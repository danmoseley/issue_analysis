[
    {
        "url":  "https://github.com/dotnet/runtime/issues/4113",
        "createdAt":  "2015-04-07T02:26:13Z",
        "number":  4113,
        "author":  "sharwell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrvNsQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2020-08-25T21:36:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2020-09-22T17:31:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jinek",
                                            "createdAt":  "2021-04-26T08:38:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2022-12-05T14:03:51Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-01-03T07:13:56Z",
        "body":  "I would like to propose an unspecified modification to the CLR which allows code to be executed in a manner where a `StackOverflowException` will not cause the process to terminate. To get the discussion started, here are some possibilities for alternative behavior:\n1. Terminate the current thread.\n2. Terminate the current `AppDomain`.\n3. Provide an attribute like `HandleProcessCorruptedStateExceptionsAttribute` which allows specialized handlers to be added.\n4. Provide a static event somewhere, which allows the exception handler to execute on a different thread.\n\nThe primary use case for this I\u0027ve encountered is recursive-descent algorithms for creating and visiting parse trees, e.g. in ANTLR. In these cases, I am able to write all of the behavior for a background thread such that immediate termination of a thread does not result in an invalid execution state. For example, no operation on the thread calls `Monitor.Enter`. These algorithms are performance-sensitive, so stack depth checking throughout the code is not a desired solution. Providing the ability to handle an exceptional stack overflow situation without terminating the process (e.g. Visual Studio, if this was running as an extension) would be a much improved situation.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO6nYmA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwNjQ0NDAy",
                                           "createdAt":  "2015-04-07T16:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBOgvGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-08-26T12:35:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "tldr: We get this request a lot but we do not believe that it is a recoverable scenario. Further, making it \"easy\" to do the wrong thing seemed more harmful than tearing down from a dangerous situation.\n\nWhile undergoing a stack overflow, your process is a hairs width from doing all sorts of Really, Really bad things(tm). For instance, causing any more stack to be consumed can start scribbling over heap space (since you’ve lost the hard guard page at the end of the stack). In addition as it’s basically an asynchronous exception, object state needs to be assumed trashed (how many user objects are really designed to operate correctly if their execution is terminated while manipulating state? And for value types it’s even worse, since their copy is non-atomic).\n\n\"Just re add the guard page and move on\", you may say. However, it’s not possible to restore the guard page until after you’ve decided how you’re dispatching the exception so you can unwind some frames and do your work. When you get the exception, you’re already in the last page and you can’t restore the frame until you’ve taken stuff off. And you still have to run user code in the guard page to figure out how to handle it. Sure, that could be solved by ignoring filters during Stack Overflow, but you’re just building special case on top of special case at that point. (stuff gets really weird when you have managed-\u003enative transitions there as well). And what about any other SEH handlers that have registered on your thread?\n\nFor scenarios that want to run code beyond this exception, the path forward is \"host clr from native\" or better, \"move the disruptive chunk of code to another process\".\n",
                                           "updatedAt":  "2015-04-07T16:54:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwNjg5MTU0",
                                           "createdAt":  "2015-04-07T18:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXDjpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2017-11-17T18:33:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T16:33:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-06-18T13:04:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e While undergoing a stack overflow, your process is a hairs width from doing all sorts of Really, Really bad things™.\n\nThis is a rather bad argument. One of the CLR\u0027s greatest features is the way it uses processor exceptions for things like dynamic reallocation of the evaluation stack and omitting `NullReferenceException` checks. If we weren\u0027t a hair\u0027s width from Really, Really Bad Things™ we would all be bored.\n\n\u003e how many user objects are really designed to operate correctly if their execution is terminated while manipulating state?\n\n[Subjective content here:] This is the wrong question. The better question is whether or not developers are out there who could write objects that are designed for these scenarios. While individual programming languages are an ideal platform for eliminating features because they could be abused or are likely to be misunderstood, this is not that place. The CLR should only eliminate the ability to control application behavior if its own internal state would be corrupted and (potentially) unrecoverable, or if the implementation cost of a feature exceeds the benefits it would provide.\n\n[Objective:] In this case, the CLR already has implemented behavior allowing applications to recover (in some manner) from a `StackOverflowException`, so whether or not that behavior is ideal it would be _possible_ to simply change the default initial execution environment for a managed process to enable this handling instead of the default options used today.\n",
                                           "updatedAt":  "2015-04-07T18:25:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwNzIzMjE1",
                                           "createdAt":  "2015-04-07T20:33:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "Okay I think we\u0027ve made progress toward agreement. I was perhaps thrown off by the use of the word \"default\". It seems obvious to me that changing the out of the box experience isn\u0027t ideal. However, if we want to have a mode that is \"I\u0027m a developer who promises to think about these things in a serious way to my serious application,\" that\u0027s probably fine. If can agree to that then you can achieve your goals vai hosting the clr. Check out: https://msdn.microsoft.com/en-us/library/ms164395(v=vs.110).aspx\n",
                                           "updatedAt":  "2015-04-07T20:33:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwNzI2NDYy",
                                           "createdAt":  "2015-04-07T20:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e If can agree to that then you can achieve your goals vai hosting the clr.\n\nExcept I can\u0027t do that from within a third-party extension to another application :frowning: \n",
                                           "updatedAt":  "2015-04-07T20:42:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwNzM0ODk0",
                                           "createdAt":  "2015-04-07T21:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXsmfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2017-11-17T18:33:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-08-25T21:39:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T16:34:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "OtherCrashOverride",
                                           "body":  "The solution to this is to change your code/algorithm from recursive to iterative.  This gives you complete control over conditions of when and what happens when you exhaust your limits.\n",
                                           "updatedAt":  "2015-04-07T21:14:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwNzM1MDg1",
                                           "createdAt":  "2015-04-07T21:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXDj1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-08-25T21:39:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T16:34:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-06-18T13:05:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "As a library developer you cannot protect your consumers from using you improperly. If the high level of stack use in your library is overly problematic, it\u0027s likely that you\u0027ll need to do the work to re-implement things iteratively. Unfortunately, there\u0027s no magic here.\n\nWe\u0027ve spent a great deal of effort over the years trying to make it possible for teams to be resilient these kinds of failures (hosting API changes, CriticalFinazerObjects etc etc). It\u0027s potentially possible that one could write a collection of objects that can handle these challenges but it\u0027s the classic \"thar be dragons here\". IMO: In essentially all cases it\u0027s better to re-architect your code than to expect this to work coherently.\n",
                                           "updatedAt":  "2015-04-07T21:15:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxNDI5Nzg3",
                                           "createdAt":  "2015-04-10T04:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "@sharwell Is any of that helpful/useful? Just discouraging? :-)\n\nI\u0027m somewhat at a loss for other good ideas. For what it\u0027s worth it spawned a bunch of hallway conversations... If you\u0027d like, I can tag it as hard problem. Thoughts?\n",
                                           "updatedAt":  "2015-04-10T04:59:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxNDM2NzEw",
                                           "createdAt":  "2015-04-10T05:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kangaroo",
                                           "body":  "For what my $0.02 are worth, I would suggest only offering a configurable change to the API through the hosting API.  That is to say, if someone wants to break the contract in their use case, they need to explicitly opt-in from the native side, and own the fallout from that.\n\nNot that it resolves the \u0027hard problem\u0027 aspect, but I think it reaches a nice middle ground where people that are willing to say \u0027we\u0027ll break it and pay for it\u0027 can opt-in, but its non-default.\n\nThoughts?\n",
                                           "updatedAt":  "2015-04-10T05:39:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxNjQ0MTgw",
                                           "createdAt":  "2015-04-10T18:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "Typically our stance is \"we don\u0027t light up features we don\u0027t intend to fully support.\" This generally entails thinking about things like: how likely are we to take patches to work around issues exposed by this feature? Will this feature incur maintenance costs because of it\u0027s interaction with current/as yet envisioned features? etc etc.\n\n@kangaroo I believe that the hosting APIs already have enough surface to do more or less what is requested (but I\u0027m no expert). However, @sharwell has another constraint in that he would prefer it exposed in an already running managed process.\n\nFWIW other applications internally that try to have stackoverflow guarantees use stack probing. @sharwell  indicated that this caused an unacceptable amount of overhead. That\u0027s a bit surprising to me but I have no reason to assume he hasn\u0027t profiled his scenario (or some prototype) before saying as much. :-)\n",
                                           "updatedAt":  "2015-04-10T18:21:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxNjkyMzU3",
                                           "createdAt":  "2015-04-10T21:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e indicated that this caused an unacceptable amount of overhead\n\nIt\u0027s a bit more complicated than that. Much of the overhead can be avoided, but it would be nice to avoid _all_ of the overhead and just let the guard page exception handler take care of the problem if and only if it becomes one.\n\nA good solution for me would be changing the default policy for `EClrFailure.FAIL_StackOverflow` to be `EPolicyAction.eRudeAbortThread`.\n",
                                           "updatedAt":  "2015-04-10T21:10:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEzNTcyNjY3NA==",
                                           "createdAt":  "2015-08-28T10:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcdickinson",
                                           "body":  "\u003e @sharwell: it would be nice to avoid all of the overhead and just let the guard page exception handler take care of the problem if and only if it becomes one.\n\nHow much overhead do you think \u0027pinging\u0027 (a single wasted read/write) `ESP + sizeof(.maxstack)` before each `call` would introduce? Basically every caller makes sure that the method being called won\u0027t run out of stack space, or every callee makes sure that it won\u0027t run out of stack space. You could possibly get the `StackOverflowException` one or two frames in advance, but at that point there is an immense probability that your app is going to encounter it anyway.\n\n**Edit:** this is a change in behavior, possibly allow it as an option in e.g. `AppDomainSetup.JitOptions`. This would allow someone to cordon off \u0027user code\u0027 (plugins that might cause this exception), while skipping the check on their own code.\n",
                                           "updatedAt":  "2015-08-28T10:27:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEzNTcyNzM3Mw==",
                                           "createdAt":  "2015-08-28T10:14:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Is there at least a way to check what is the current stack depth / how much stack space remains in an efficient manner?\n",
                                           "updatedAt":  "2015-08-28T10:14:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEzNTcyNzQzOQ==",
                                           "createdAt":  "2015-08-28T10:14:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBOgwAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quetzalcoatl",
                                                                               "createdAt":  "2019-08-26T11:14:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-08-26T12:37:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ayende",
                                           "body":  "That would allow recursive algorithms to at least throw StackOverflowImmenientExcpetion\n",
                                           "updatedAt":  "2015-08-28T10:14:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1NjczMjg0NQ==",
                                           "createdAt":  "2015-11-14T18:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "Is it possible to change the behavior while managed code is executing from the current Unix hosting API?  If so, it might be possible for managed code to P/Invoke the CLR\u0027s own hosting API.\n\nNote: This could be Undefined Behavior \u0026ndash; please let me know if it is.\n",
                                           "updatedAt":  "2015-11-14T18:51:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTMyNzE2Ng==",
                                           "createdAt":  "2017-11-17T18:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH2Z7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T16:37:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-11-23T23:08:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-12-24T13:12:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "One of the worst things about `StackOverflowException` being unrecoverable is that it seems to make it also un-debuggable.  If you get one of these in the Visual Studio debugger, it will inform you that you raised a SOE, but it doesn\u0027t provide a stack trace.  Can we please at the very least fix whatever\u0027s causing *that?*",
                                           "updatedAt":  "2017-11-17T18:38:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTMzOTI1NQ==",
                                           "createdAt":  "2017-11-17T19:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "![image](https://user-images.githubusercontent.com/10487869/32964520-5f7701c2-cb88-11e7-9281-8fc202b96775.png)\r\n\r\nI\u0027ve provided the picture above as a simple example.\r\n\r\nThe exception will be caught by a debugger and viewing either the Parallel Stacks or the Call Stack window will display the appropriate information.\r\n\r\nHowever, the first place people may check (`$exception.StackTrace`) lists the stack trace as `null`. I agree with @masonwheeler that ensuring the exception stacktrace information is properly populated would be ideal.\r\n",
                                           "updatedAt":  "2017-11-17T19:17:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTQyOTA5NA==",
                                           "createdAt":  "2017-11-18T09:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH2Z-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-12-24T13:12:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ayende",
                                           "body":  "In many cases, this is actually not working.\nIt is common for this exception to actually kill the debugger.\n\n*Hibernating Rhinos Ltd  *\n\nOren Eini* l CEO l *Mobile: + 972-52-548-6969\n\nOffice: +972-4-622-7811 *l *Fax: +972-153-4-622-7811\n\n\n\nOn Fri, Nov 17, 2017 at 9:17 PM, Tanner Gooding \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e [image: image]\n\u003e \u003chttps://user-images.githubusercontent.com/10487869/32964520-5f7701c2-cb88-11e7-9281-8fc202b96775.png\u003e\n\u003e\n\u003e I\u0027ve provided the picture above as a simple example.\n\u003e\n\u003e The exception will be caught by a debugger and viewing either the Parallel\n\u003e Stacks or the Call Stack window will display the appropriate information.\n\u003e\n\u003e However, the first place people may check ($exception.StackTrace) lists\n\u003e the stack trace as null. I agree with @masonwheeler\n\u003e \u003chttps://github.com/masonwheeler\u003e that ensuring the exception stacktrace\n\u003e information is properly populated would be ideal.\n\u003e\n\u003e —\n\u003e You are receiving this because you commented.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/coreclr/issues/652#issuecomment-345339255\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAHIs8LEfwecEKhR1tfUIzIh6GfkRZcUks5s3dvIgaJpZM4D7TXI\u003e\n\u003e .\n\u003e\n",
                                           "updatedAt":  "2017-11-18T09:04:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTc0NzkzNw==",
                                           "createdAt":  "2017-11-20T16:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH2aAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-12-24T13:13:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "@tannergooding Not sure what to say.  This is not what happens to me, on a vanilla VS2017 installation, when I get a `StackOverflowException`.  I end up with no stack trace, no ability to evaluate locals, and no useful information, and have to track down the problem manually.",
                                           "updatedAt":  "2017-11-20T16:24:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzU4ODgxMQ==",
                                           "createdAt":  "2018-10-27T04:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyHVwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2018-10-27T09:48:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T17:37:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-11-23T23:09:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmat",
                                                                               "createdAt":  "2023-01-04T21:25:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "pongba",
                                           "body":  "I want to resurrect the thread by adding that, besides the debuggability issue mentioned above, what\u0027s more prominent for online services are that you would like to have the chance to dump some important information before the app crashes, you don\u0027t always get to hook up the debugger and repro the issue ",
                                           "updatedAt":  "2018-10-27T04:09:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MDI4NDAxMA==",
                                           "createdAt":  "2020-08-25T21:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXtJhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T17:37:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "madelson",
                                           "body":  "Java has some level of support for this, right? Is there something .NET could learn from that? If not, what is wrong with what Java does in .NET\u0027s view?",
                                           "updatedAt":  "2020-08-25T21:42:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjMxNjIyNw==",
                                           "createdAt":  "2020-11-23T17:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "I\u0027m proposing to consider all \"fatal\" exceptions and get rid of the term \"fatal\" which in reality can not be determined.\r\n\r\nWe can only say, that the situation is fatal when OS closes the application and it\u0027s nothing to do here with exceptions",
                                           "updatedAt":  "2020-11-23T17:41:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjMyMjg1Mw==",
                                           "createdAt":  "2020-11-23T17:51:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "The only inherent fatal fault is memory corruption, and that should not through an exception at all, but fail fast.  Everything else (including out of memory and stack overflow) can and should be recoverable.",
                                           "updatedAt":  "2020-11-23T17:51:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjMyMzI0Mg==",
                                           "createdAt":  "2020-11-23T17:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "For instance, an HTTP server can recover by aborting the request and returning 500 Internal Server Error to the user.",
                                           "updatedAt":  "2020-11-23T17:51:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjMyNjM3Mw==",
                                           "createdAt":  "2020-11-23T17:57:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcdickinson",
                                           "body":  "@jinek unfortunately some of these exceptions are fatal for practical reasons.\r\n\r\nFor example, how would .Net recover from an out-of-memory situation? It has already attempted to do so with a full GC collection (which always happens before an OOM), and can\u0027t run finalizers (except those that have constrained execution) because they might (and generally will) attempt to allocate. This is why .Net allocates the OOM exception before running any user code, because in an OOM condition it wouldn\u0027t be able to.\r\n\r\nStack overflow is unlike OOM because you can computationally anticipate a stack overflow and throw an exception prior to actually reaching the stack overflow condition (effectively making it a `AboutToStackOverflowException`). If you actually let the stack overflow happen, you can\u0027t guarantee a successful unwinding because `finally` blocks may (and generally do) call other methods.\r\n\r\n\u003e For instance, an HTTP server can recover by aborting the request and returning 500 Internal Server Error to the user.\r\n\r\nThis would require fallible allocators in .Net, similar to how `malloc` can return `null`. You\u0027d have to write code like this everywhere:\r\n\r\n```csharp\r\nvar foo = new Bar();\r\nif (foo != null) {\r\n}\r\n```\r\n\r\nEven worse:\r\n\r\n```csharp\r\nvar foo = new Bar();\r\nif (foo != null) {\r\n  var ex = new Http500Exception();\r\n  if (ex == null) { /* Now what? */ }\r\n  throw ex;\r\n}\r\n```",
                                           "updatedAt":  "2020-11-23T17:58:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjMyODg0MA==",
                                           "createdAt":  "2020-11-23T18:01:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "@jcdickinson The server would look like\r\n\r\n```csharp\r\ntry {\r\n    await handleRequest();\r\n} catch (Object e) {// I know this isn’t valid C#, but it is valid in IL\r\n    log(e); // native code that will not allocate\r\n    returnInternalServerError();\r\n}\r\n```",
                                           "updatedAt":  "2020-11-23T18:01:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjQ1NjA2Mw==",
                                           "createdAt":  "2020-11-23T22:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e For example, how would .Net recover from an out-of-memory situation?\r\n\r\nThis depends on the source of the allocation that triggers the exception. Application-specific logic can recover from OutOfMemoryException under controlled scenarios. Here\u0027s an example:\r\nhttps://github.com/microsoft/perfview/blob/5b70079cd02ce0c590eda8eb6a0e98993b3c2228/src/HeapDump/GCHeapDumper.cs#L1131-L1162\r\n\r\n\u003e  ... It has already attempted to do so with a full GC collection (which always happens before an OOM), and can\u0027t run finalizers (except those that have constrained execution) because they might (and generally will) attempt to allocate. This is why .NET allocates the OOM exception before running any user code, because in an OOM condition it wouldn\u0027t be able to. ...\r\n\r\nThis generally makes the assumption that if one allocation fails, the next one will also fail. There are many cases where this assumption breaks down, some of which lead to error scenarios that an application could treat as recoverable:\r\n\r\n* Unwinding the stack could un-root and/or un-pin variables, which can free up memory.\r\n* Not all allocations are the same size. In the case of arrays, some allocations can be much larger than others.\r\n\r\nIn general, the view of OutOfMemoryException here is faulty for the same reason the CLR\u0027s current view of StackOverflowException is faulty: given that it is difficult to reason about these exceptions (and generally impossible without additional application-specific information) it incorrectly draws a conclusion that it is _not possible_ to code an application that exposes behavior a user would expect following an internal condition that produced this exception.",
                                           "updatedAt":  "2020-11-23T22:15:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjQ2NTg4NA==",
                                           "createdAt":  "2020-11-23T22:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e how would .Net recover from an out-of-memory situation\r\n\r\n```\r\ntry\r\n{\r\nvar data = new byte[int.Max];\r\n}\r\ncatch(OutOfMemoryException)\r\n{\r\nMessageBox(\"File is too big, Try to close other applications and run it again\";\r\n}\r\n```\r\n\r\nNow, please, show me how you recover from System.Exception ? (It\u0027s theoretical question, because as you don\u0027t know the type of exception here I can bring up my own type which meaning would be to break your idea of recovery)",
                                           "updatedAt":  "2020-11-23T22:36:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjQ2NzYxNQ==",
                                           "createdAt":  "2020-11-23T22:40:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e  you can\u0027t guarantee a successful unwinding\r\n\r\nWe can not guarantee success execution of any catch:\r\n\r\n```\r\ncatch(FormatException)\r\n{\r\n  return ((object)null).ToString() + \"Why would we think here will be no exceptions?\";\r\n}\r\n```",
                                           "updatedAt":  "2020-11-23T23:01:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjQ3NDE2OQ==",
                                           "createdAt":  "2020-11-23T22:56:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e you can computationally anticipate a stack overflow\r\n\r\nHeap and stack historically grew in opposite directions to be flexible on its sizes. \r\nStill, we know the size of the stack, we have system functions to check the size, we can throw SOException before the overflow allocation happens.\r\nHere is recovery example:\r\n\r\n```\r\n        private void CanNotRecoverMethod()\r\n        {\r\n          LocalVarToKeepSpaceForMessageBox stackReserveDontUseIt;\r\n            try\r\n            {\r\n                DoFileReadingWithStackOverflow();\r\n            }\r\n            catch (StackoverflowException)\r\n            {\r\n                MessageBox(\r\n                    \"Even what is the problem that catch can not be executed? Let it throw as for any other exception\");\r\n            }\r\n        }\r\n\r\n        private void CanRecoverMethod()\r\n        {\r\n            try\r\n            {\r\n                CanNotRecoverMethod();\r\n            }\r\n            catch (StackOverflowException)\r\n            {\r\n                MessageBox(\"File is too big, try to split it using zip\");\r\n            }\r\n        }\r\n```",
                                           "updatedAt":  "2020-11-23T22:59:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzkzNjIxOA==",
                                           "createdAt":  "2020-11-25T20:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcdickinson",
                                           "body":  "\u003e MessageBox(\"File is too big, Try to close other applications and run it again\";\r\n\r\nMessageBox allocates. That\u0027s the problem. How would it allocate when there is no more memory to allocate? It would re-throw OutOfMemoryException.",
                                           "updatedAt":  "2020-11-25T20:41:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzk0ODIwNg==",
                                           "createdAt":  "2020-11-25T21:13:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYBGdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-25T22:44:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "@jcdickinson by the time `MessageBox` gets to run, the stack will have unwound, allowing the garbage collector to reclaim memory.",
                                           "updatedAt":  "2020-11-25T21:13:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzk3ODQ4MA==",
                                           "createdAt":  "2020-11-25T22:45:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e @jcdickinson by the time `MessageBox` gets to run, the stack will have unwound, allowing the garbage collector to reclaim memory.\r\n\r\nOnly not garbage collector, but stack will get unwind (GC works for heap only).\r\n\r\nStill, what I\u0027m saying is that you can never guarantee success of catch block. Never for any exception! Still because of this we don\u0027t deny the catch block, do we?",
                                           "updatedAt":  "2020-11-25T22:45:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMzk3ODkzNw==",
                                           "createdAt":  "2020-11-25T22:47:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYBOUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-25T23:18:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "\u003e \u003e @jcdickinson by the time `MessageBox` gets to run, the stack will have unwound, allowing the garbage collector to reclaim memory.\r\n\u003e \r\n\u003e Only not garbage collector, but stack will get unwind (GC works for heap only).\r\n\u003e \r\n\u003e Still, what I\u0027m saying is that you can never guarantee success of catch block. Never for any exception! Still because of this we don\u0027t deny the catch block, do we?\r\n\r\nGC is for heap only, but the stack unwinding will remove some GC roots.",
                                           "updatedAt":  "2020-11-25T22:47:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzQ3Mzc0MA==",
                                           "createdAt":  "2020-12-02T20:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "I think this topics are very relevant https://github.com/dotnet/runtime/issues/45256",
                                           "updatedAt":  "2020-12-02T20:22:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47p5Bl",
                                           "createdAt":  "2021-12-24T13:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH2zIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2021-12-24T15:29:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I can confirm that stack overflow debugging does not work, as described in this thread. `RuntimeHelpers.EnsureSufficientExecutionStack` seems to do nothing in my case. I\u0027m currently in a very difficult situation since I have essentially no way of proceeding to debug.\r\n\r\nSome ideas on how to make this better (includes ideas collected from other contributors):\r\n\r\n1. Add an opt-in 64 KB guard page region. This region would allow reasonably safe execution in case of stack overflow.\r\n2. Add an \"I don\u0027t care whatsoever\" mode that just tries to limp along as far as possible ignoring all safety principles.\r\n3. Add an opt-in spare thread that can be activated in case of stack overflow. That thread would take care to at least write the stack out to the console or to a file.\r\n4. As stated above, fix the debugger. But that\u0027s of no use in production.\r\n5. Print the stack to the console. Apparently, this feature exists but it never activates for me. I sometimes don\u0027t even get the \"Stack overflow\" print message.\r\n6. Use an \"alternate stack\" as suggested in https://github.com/dotnet/runtime/issues/40302#issuecomment-1003840882.\r\n7. Add an \"emergency mode\" that probes for remaining stack space at each function call. If it falls below 64LB, throw. This overhead would be tolerable as part of an emergency mode useful for production troubleshooting and unit testing.\r\n8. Terminate the current thread to allow the process to keep limping along (\"emergency mode\" only). (Suggestion from OP.)\r\n9. Provide an attribute like HandleProcessCorruptedStateExceptionsAttribute which allows specialized handlers to be added. (Suggestion from OP.)\r\n10. Provide a static event somewhere, which allows the exception handler to execute on a different thread. (Suggestion from OP.)\r\n\r\nIt seems that (1) would be a great way to get a production-friendly solution. If a production crash happens, the developer would enable the special mode to obtain actionable logging. And most importantly, this would fix the outage quickly!\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2022-01-03T07:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qdiY",
                                           "createdAt":  "2021-12-25T07:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Another idea for an emergency mode: At each function call, probe remaining stack space. If it falls below 64 KB, throw. This overhead would be tolerable as part of an emergency mode useful for production troubleshooting and unit testing.",
                                           "updatedAt":  "2021-12-25T07:47:56Z"
                                       }
                                   ],
                         "totalCount":  36
                     },
        "title":  "[Proposal] Change the default behavior for StackOverflowException",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/8446",
        "createdAt":  "2017-06-28T07:39:01Z",
        "number":  8446,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-03T02:49:14Z",
        "body":  "Opened on behalf of @Jiayili1\n\nThe test `baseservices_exceptions._regressions_Dev11_147911_test147911_test147911_/_regressions_Dev11_147911_test147911_test147911_cmd` has failed.\n\n\n    \n    Return code:      1\n    Raw output file:      C:\\dotnetbuild\\work\\424f1bc6-7df7-4bc4-b3fd-842a890e5e8f\\Work\\c140ab12-9bde-4719-8982-2f4a3fb83275\\Unzip\\Reports\\baseservices.exceptions\\regressions\\Dev11\\147911\\test147911\\test147911.output.txt\n    Raw output:\n    BEGIN EXECUTION\\r\n     \"C:\\dotnetbuild\\work\\424f1bc6-7df7-4bc4-b3fd-842a890e5e8f\\Payload\\corerun.exe\" test147911.exe \\r\n    Expected: 100\\r\n    Actual: -532462766\\r\n    END EXECUTION - FAILED\\r\n    FAILED\\r\n    Test Harness Exitcode is : 1\\r\n    \n    To run the test:\n    \u003e set CORE_ROOT=C:\\dotnetbuild\\work\\424f1bc6-7df7-4bc4-b3fd-842a890e5e8f\\Payload\n    \u003e C:\\dotnetbuild\\work\\424f1bc6-7df7-4bc4-b3fd-842a890e5e8f\\Work\\c140ab12-9bde-4719-8982-2f4a3fb83275\\Unzip\\regressions\\Dev11\\147911\\test147911\\test147911.cmd\n    \\r\n    Expected: True\\r\n    Actual:   False\n\n        Stack Trace:\n\n           at baseservices_exceptions._regressions_Dev11_147911_test147911_test147911_._regressions_Dev11_147911_test147911_test147911_cmd()\nBuild : Master - 20170627.02 (Core Tests)\nFailing configurations:\n- windows.10.arm64\n  - arm\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170627.02/workItem/baseservices.exceptions.XUnitWrapper/analysis/xunit/baseservices_exceptions._regressions_Dev11_147911_test147911_test147911_~2F_regressions_Dev11_147911_test147911_test147911_cmd",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ_SMsg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDU5MjQ1MA==",
                                           "createdAt":  "2017-07-11T22:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGhiondea",
                                           "body":  "@tarekgh could you take a look?",
                                           "updatedAt":  "2017-07-11T22:41:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDg3OTg0MQ==",
                                           "createdAt":  "2017-07-12T19:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/coreclr/issues/12488\r\n\r\nI looked at this issue and the problem is the test has dll import to load the native fpcw.dll library and we fail loading it and then the test will just exit. talked offline to @wtgodbe and @tijoytom and confirmed this is known issue because of missing dependencies and @wtgodbe  is working on the fix. ",
                                           "updatedAt":  "2017-07-12T19:59:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTE5NDY5OA==",
                                           "createdAt":  "2017-07-13T20:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tijoytom-zz",
                                           "body":  "@wtgodbe Is this passing now?",
                                           "updatedAt":  "2017-07-13T20:36:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTE5NTIyOQ==",
                                           "createdAt":  "2017-07-13T20:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "No, it\u0027s actually failing with a new error:\r\n\r\n\u003e DivByZero: Shouldn\u0027t execute!\\r\\nExpected: 100\\r\\nActual: 101\\r\\nEND EXECUTION - FAILED",
                                           "updatedAt":  "2017-07-13T20:38:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTE5NTI0Nw==",
                                           "createdAt":  "2017-07-13T20:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170713.02/workItem/baseservices.exceptions.XUnitWrapper/analysis/xunit/baseservices_exceptions._regressions_Dev11_147911_test147911_test147911_~2F_regressions_Dev11_147911_test147911_test147911_cmd",
                                           "updatedAt":  "2017-07-13T20:38:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTE5NTY5Ng==",
                                           "createdAt":  "2017-07-13T20:40:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "@tarekgh ",
                                           "updatedAt":  "2017-07-13T20:40:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTE5ODk1Nw==",
                                           "createdAt":  "2017-07-13T20:53:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This is run time issue and need someone from runtime side to take a look. if you look at the test line \r\n\r\nhttps://github.com/dotnet/coreclr/blob/25dbd547bc7372906357699a24d7cf76786a50c8/tests/src/baseservices/exceptions/regressions/Dev11/147911/fpcw.cpp#L48\r\n\r\nthe code is \r\n\r\n```C\r\n__try\r\n--\r\n   {\r\n   float d = 2.0 - (0.0+2.0);\r\n   float f = 2.0f/d;\r\n   printf(\"Shouldn\u0027t execute!\\n\");\r\n   (void)f; // nop to disable warning C4189\r\n   return 99;\r\n   }\r\n   __except((GetExceptionCode()==0xc000008e)?EXCEPTION_EXECUTE_HANDLER:EXCEPTION_CONTINUE_SEARCH)\r\n\r\n```\r\n\r\nThe test expect  float f = 2.0f/d; to throw but it is not throwing. \r\n\r\nCC @jkotas ",
                                           "updatedAt":  "2017-07-13T20:53:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTIwMzY0OQ==",
                                           "createdAt":  "2017-07-13T21:11:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This test is trying to verify that the CoreCLR vector exception handler does not perform unexpected modifications of the floating point state. Somebody with ARM device needs to debug this.",
                                           "updatedAt":  "2017-07-13T21:11:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTIyODI5MA==",
                                           "createdAt":  "2017-07-13T23:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlexGhiondea",
                                           "body":  "@sergiy-k could you help with this?",
                                           "updatedAt":  "2017-07-13T23:23:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTI1Nzk2OQ==",
                                           "createdAt":  "2017-07-14T03:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sergiy-k",
                                           "body":  "@AntonLapounov should be able to take a look but probably not tomorrow (most likely on Monday). Another problem is we don\u0027t have ARM devices.",
                                           "updatedAt":  "2017-07-14T03:07:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTM5NTExNQ==",
                                           "createdAt":  "2017-07-14T15:51:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@AntonLapounov if you don\u0027t have access to http://ddccs to get ARM machine, you may contact @MattGal who helped me last time to access arm machine. ",
                                           "updatedAt":  "2017-07-14T15:51:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTQxNjA4OA==",
                                           "createdAt":  "2017-07-14T17:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattGal",
                                           "body":  "@AntonLapounov apologies I have been ill.  File a ticket on http://techease intranet site to get access to the KVM, but for getting on a machine briefly I can stop by your office and log into the KVM with my own credentials on a limited basis.",
                                           "updatedAt":  "2017-07-14T17:20:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTQxNzU5Ng==",
                                           "createdAt":  "2017-08-10T00:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKeldorph",
                                           "body":  "I believe this test isn\u0027t valid for Windows/ARM.  From [MSDN](https://msdn.microsoft.com/en-us/library/dn736986.aspx):\r\n\r\n\u003e Floating-Point Exceptions\r\nMost ARM hardware does not support IEEE floating-point exceptions. On processor variants that do have hardware floating-point exceptions, the Windows kernel silently catches the exceptions and implicitly disables them in the FPSCR register. This ensures normalized behavior across processor variants. Otherwise, code developed on a platform that doesn\u0027t have exception support could receive unexpected exceptions when it\u0027s running on a platform that has exception support.\r\n\r\nUnless the above has changed, Windows/ARM simply doesn\u0027t support trapping floating-point exceptions.  Perhaps the test should be disable on that platform.",
                                           "updatedAt":  "2017-08-10T15:17:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTg1MjEzMg==",
                                           "createdAt":  "2017-08-11T16:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "@Jiayili1 @tijoytom Could we disable this test for ARM?",
                                           "updatedAt":  "2017-08-11T16:00:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjY5NzMxOA==",
                                           "createdAt":  "2017-08-16T08:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KristinXie1",
                                           "body":  "failed again: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20170816.01/workItem/baseservices.exceptions.XUnitWrapper/analysis/xunit/baseservices_exceptions._regressions_whidbeybeta2_349379_349379_349379_~2F_regressions_whidbeybeta2_349379_349379_349379_cmd",
                                           "updatedAt":  "2017-08-16T08:07:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjgzMTM3MQ==",
                                           "createdAt":  "2017-08-16T16:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sergiy-k",
                                           "body":  "@janvorli, @kouvel, could you please take a look? This issue seems to be different from the original one.",
                                           "updatedAt":  "2017-08-16T16:44:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjgzNTYzMw==",
                                           "createdAt":  "2017-08-16T17:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattGal",
                                           "body":  "It\u0027s definitely different;  Server Core runs are AMD64, not ARM64.  Note there\u0027s lots of stuff not included in Server Core by default.  This SKU can be provisioned in Azure or any of the DTLs though, so getting a repro machine should be simple.",
                                           "updatedAt":  "2017-08-16T17:00:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjg0MTc5OQ==",
                                           "createdAt":  "2017-08-16T17:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I\u0027m taking a look.",
                                           "updatedAt":  "2017-08-16T17:24:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MjkwNTI1OA==",
                                           "createdAt":  "2019-01-09T23:14:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "@janvorli fyi, this test is still disabled for non-Windows runs",
                                           "updatedAt":  "2019-01-09T23:14:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n8m_K",
                                           "createdAt":  "2023-10-03T00:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-10-03T00:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n9Iyy",
                                           "createdAt":  "2023-10-03T02:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@trylek This test is marked with DisableProjectBuild property: https://github.com/dotnet/runtime/blob/82fee2692b3954ba8903fa4764f1f4e36a26341a/src/tests/baseservices/exceptions/regressions/Dev11/147911/test147911.csproj#L7 . Does it mean that it is never built and run, and that it would be best to delete it?",
                                           "updatedAt":  "2023-10-03T02:49:08Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Test failure: baseservices_exceptions._regressions_Dev11_147911_test147911_test147911_/_regressions_Dev11_147911_test147911_test147911_cmd",
        "labels":  [
                       "arch-arm32",
                       "test-bug",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9195",
        "createdAt":  "2017-10-27T16:35:14Z",
        "number":  9195,
        "author":  "Petermarcu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrvNtQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlphaGit",
                                            "createdAt":  "2018-03-13T11:58:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cdmihai",
                                            "createdAt":  "2018-06-01T17:41:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viblo",
                                            "createdAt":  "2018-06-18T11:38:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksuo",
                                            "createdAt":  "2018-10-18T06:37:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markusschaber",
                                            "createdAt":  "2018-11-16T07:36:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "peterzeller",
                                            "createdAt":  "2018-11-18T21:59:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "freeman42x",
                                            "createdAt":  "2018-12-03T10:14:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Remleo",
                                            "createdAt":  "2019-01-18T09:32:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamsc",
                                            "createdAt":  "2019-08-02T19:14:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mausch",
                                            "createdAt":  "2019-08-13T14:17:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2019-08-25T17:14:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zlepper",
                                            "createdAt":  "2020-03-02T12:04:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daiplusplus",
                                            "createdAt":  "2021-05-26T04:05:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2022-12-05T14:04:08Z"
                                        }
                                    ],
                          "totalCount":  14
                      },
        "updatedAt":  "2021-05-26T17:14:58Z",
        "body":  "@Daniel15 commented on [Wed Oct 25 2017](https://github.com/dotnet/core/issues/1047)\n\nI\u0027m getting this error while moving a site from ASP.NET Core 1.1 on Mono to ASP.NET Core 2.0 on .NET Core 2.0:\r\n```\r\ndbug: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action method Daniel15.Web.Controllers.ShortUrlController.Index (Daniel15.Web), returned result Microsoft.AspNetCore.Mvc.ContentResult.\r\nProcess is terminating due to StackOverflowException.\r\n[1]    12976 abort      LD_LIBRARY_PATH=/tmp/ssltest ASPNETCORE_ENVIRONMENT=Development =\r\n```\r\n\r\nHow do I get a full stack trace for the `StackOverflowException` to determine where it\u0027s coming from?\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMpoUzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MTU0ODE2Nw==",
                                           "createdAt":  "2017-11-02T20:28:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@janvorli your stack overflow work was in 2.0 I think.?",
                                           "updatedAt":  "2017-11-02T20:28:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTI0NzE1MQ==",
                                           "createdAt":  "2018-01-21T13:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Any news about this? Any idea how to get at least some idea about what is going on?",
                                           "updatedAt":  "2018-01-21T13:07:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTM2ODEwMA==",
                                           "createdAt":  "2018-01-22T09:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtgUSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kripergvg",
                                                                               "createdAt":  "2019-07-30T15:51:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The only thing that could work is to run the app under lldb and when it hits the stack overflow, load the libsosplugin.so and run \"clrstack -f\".",
                                           "updatedAt":  "2018-01-22T09:29:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTM3MzM2Mg==",
                                           "createdAt":  "2018-01-22T09:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "@janvorli Any suggestions for doing this on Windows? \r\nWe are trying with procdump right now.\r\nThe problem is that this is happening in production, and the kind of things we can do there are limited.",
                                           "updatedAt":  "2018-01-22T09:50:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk1NzQ5NA==",
                                           "createdAt":  "2018-06-01T17:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cdmihai",
                                           "body":  "SO questions suggest either using windbg or reproing it in VS while debugging. This is a bit hard when the issue is hard to repro and happens in processes spawned by the entry process (or when it\u0027s not happening on windows). Just printing out the stack trace would be so helpful ...",
                                           "updatedAt":  "2018-06-01T17:47:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk1OTYyMA==",
                                           "createdAt":  "2018-06-01T17:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBN1rLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jstall",
                                                                               "createdAt":  "2018-07-14T10:54:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "delroh",
                                                                               "createdAt":  "2018-08-07T09:55:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JulianRooze",
                                                                               "createdAt":  "2018-10-05T16:08:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2018-10-18T06:56:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freeman42x",
                                                                               "createdAt":  "2018-12-03T10:15:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "georgemihaila",
                                                                               "createdAt":  "2019-04-15T13:06:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-08-19T14:59:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "ayende",
                                           "body":  "@cdmihai Presumably at this point it would be hard to print the stack trace (there is no stack with which to work, after all). \r\nBut I want to join in and comment that _anything_ would be good here. Having even a small portion of the stack trace should usually be enough to tell us what is recursing and narrow down investigation times considerably.\r\n",
                                           "updatedAt":  "2018-06-01T17:51:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDg5ODI3NA==",
                                           "createdAt":  "2018-10-18T07:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksuo",
                                           "body":  "\u003e The only thing that could work is to run the app under lldb and when it hits the stack overflow, load the libsosplugin.so and run \"clrstack -f\".\r\n\r\n@janvorli  How do Microsoft dev debug this kind of bug in prod? \r\nNot every bug can reproduce easily in the local environment.",
                                           "updatedAt":  "2018-10-18T07:04:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDkwMDQ2MA==",
                                           "createdAt":  "2018-10-18T07:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksuo",
                                           "body":  "\u003eHaving even a small portion of the stack trace should usually be enough to tell us what is recursing and narrow down investigation times considerably.\r\n\r\nThis is exactly how Golang do. (In stacktrace below, I elide some frame manually)\r\n\r\n```\r\nsupei@sandbox-dev-hk:~$ cat a.go\r\npackage main\r\n\r\nfunc foo()() {\r\n\tfoo()\r\n}\r\n\r\nfunc main(){\r\n\tfoo()\r\n}\r\n\r\nsupei@sandbox-dev-hk:~$ go run a.go\r\nruntime: goroutine stack exceeds 1000000000-byte limit\r\nfatal error: stack overflow\r\n\r\nruntime stack:\r\nruntime.throw(0x46d1a8, 0xe)\r\n\t/home/supei/go/src/runtime/panic.go:608 +0x72\r\nruntime.newstack()\r\n\t/home/supei/go/src/runtime/stack.go:1008 +0x729\r\nruntime.morestack()\r\n\t/home/supei/go/src/runtime/asm_amd64.s:429 +0x8f\r\n\r\ngoroutine 1 [running]:\r\nmain.foo()\r\n\t/home/supei/a.go:3 +0x2e fp=0xc020086378 sp=0xc020086370 pc=0x44e9fe\r\nmain.foo()\r\n\t/home/supei/a.go:4 +0x20 fp=0xc020086388 sp=0xc020086378 pc=0x44e9f0\r\nmain.foo()\r\n\t/home/supei/a.go:4 +0x20 fp=0xc020086398 sp=0xc020086388 pc=0x44e9f0\r\nmain.foo()\r\n\t/home/supei/a.go:4 +0x20 fp=0xc0200863a8 sp=0xc020086398 pc=0x44e9f0\r\nmain.foo()\r\n\t/home/supei/a.go:4 +0x20 fp=0xc020086998 sp=0xc020086988 pc=0x44e9f0\r\nmain.foo()\r\n\t/home/supei/a.go:4 +0x20 fp=0xc0200869a8 sp=0xc020086998 pc=0x44e9f0\r\n...additional frames elided...\r\nexit status 2\r\n```",
                                           "updatedAt":  "2018-10-18T07:13:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDkzMjcwMQ==",
                                           "createdAt":  "2018-10-18T09:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBSOYmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-08-19T15:00:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "summeney",
                                                                               "createdAt":  "2020-10-02T07:10:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ayende",
                                           "body":  "In other words, like the CoreCLR allocates an `OutOfMemoryException` instance upfront, we can allocate some space (1KB should be more than enough) and do that there?",
                                           "updatedAt":  "2018-10-18T09:03:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMTA4NzAyMA==",
                                           "createdAt":  "2018-10-18T17:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "patricksuo",
                                           "body":  "Golang has dynamic (goroutine) stack which is in heap. Golang runtime grows/shrinks stack size as needed.\r\nIn the StackOverflow scenario, the runtime will preempt the goroutine just before it requires an abnormal stack growth.\r\n\r\nI\u0027m not familiar with dotnet. I guess managed code run on native thread stack. \r\nMaybe thread stack guard page mechanism is sth could help.",
                                           "updatedAt":  "2018-10-18T17:04:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMTA5MzY4OQ==",
                                           "createdAt":  "2018-10-18T17:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAkNCWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2018-10-18T17:47:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2018-11-15T08:27:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freeman42x",
                                                                               "createdAt":  "2018-12-03T10:31:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrunoJuchli",
                                                                               "createdAt":  "2019-03-01T05:16:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e I guess managed code run on native thread stack.\r\n\r\nThat\u0027s right. We already run sigsegv handler on an alternate stack to be able to at least print the message and not just silently die. This alternate stack is kept as small as possible since we need to allocate it for each thread. That size would likely not be enough to run the code that\u0027s necessary to dump the stack trace. But since we\u0027ve recently switched to allocating the alternate stack space using mmap, we could actually reserve larger VM space and commit just the size needed by the regular sigsegv handling. On stack overflow, we could commit more of the space so that we have enough to dump the stack trace. \r\nI\u0027ve created dotnet/runtime#825 assigned to myself to track it.",
                                           "updatedAt":  "2018-10-18T17:25:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzODk3MDg4Nw==",
                                           "createdAt":  "2018-11-15T09:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markusschaber",
                                           "body":  "I currently have a problem where I cannot even get Stack Trace with Visual Studio debugger... So anything which could help us to get a clue would be welcome... :-)\r\n\r\n[Edit: We solved this problem in the mean time via \"print-debugging\" - we used log entries to nail down the exact place where the code crashes, so it\u0027s not urgent any more...]",
                                           "updatedAt":  "2018-12-05T07:52:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NDM4Mzg2Mg==",
                                           "createdAt":  "2018-12-05T07:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "facundofarias",
                                           "body":  "+1 :|",
                                           "updatedAt":  "2018-12-05T07:17:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzQyNjU5Nw==",
                                           "createdAt":  "2019-01-11T08:26:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwDfaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Drizin",
                                                                               "createdAt":  "2022-11-23T04:47:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BrunoJuchli",
                                           "body":  "Does using windbg and SOS still work with core?\r\n\r\nAs described here: https://stackoverflow.com/a/49882734/684096",
                                           "updatedAt":  "2019-01-11T08:26:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODQwOTU2NQ==",
                                           "createdAt":  "2019-02-28T19:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAo800A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrii-litvinov",
                                                                               "createdAt":  "2019-05-20T11:32:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fwanggg",
                                           "body":  "\u003e That\u0027s right. We already run sigsegv handler on an alternate stack to be able to at least print the message and not just silently die. This alternate stack is kept as small as possible since we need to allocate it for each thread. That size would likely not be enough to run the code that\u0027s necessary to dump the stack trace. But since we\u0027ve recently switched to allocating the alternate stack space using mmap, we could actually reserve larger VM space and commit just the size needed by the regular sigsegv handling. On stack overflow, we could commit more of the space so that we have enough to dump the stack trace.\r\n\r\nWhere is the stacktrace dumped to, standard err/output? I am debugging in an orchestrated containerized environment, when app crashes because of StackOverFlowException the containers goes away and all is left is stderr and stdout,    \r\n2019-02-28T14:33:34.98-0500 [APP/PROC/WEB/0] ERR Process is terminating due to StackOverflowException.\r\nWhat\u0027s the best way to debug SOFE in this kind of environment. \r\n",
                                           "updatedAt":  "2019-02-28T19:41:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzM0NTA4OA==",
                                           "createdAt":  "2019-04-15T17:29:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Wait ... you\u0027re already outputting Process is terminating due to a StackOverflowException ... Too bad we can\u0027t walk down the frames and output them. This can be done in a constant amount of RAM.",
                                           "updatedAt":  "2019-04-15T17:29:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTc0NzA4Mg==",
                                           "createdAt":  "2019-07-09T18:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA089Jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rrr3da",
                                                                               "createdAt":  "2019-11-13T15:49:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TehWardy",
                                           "body":  "Got this from the console ...\r\n\r\n\u003e Api\u003e       Route matched with {action = \"Get\", controller = \"App\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get(Microsoft.AspNet.OData.Query.ODataQueryOptions`1[Core.Objects.Entities.CMS.App]) on controller Api.Controllers.AppController (Api).\r\n\u003e Api\u003e \r\n\u003e Api\u003e Process is terminating due to StackOverflowException.\r\n\r\nPut a breakpoint in the action ... it\u0027s not getting that far ... so how do I debug stack overflows in DI ?",
                                           "updatedAt":  "2019-07-09T18:07:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODQzODk3OQ==",
                                           "createdAt":  "2021-05-26T04:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBsNkQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2021-05-26T05:14:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "I\u0027d like to add that when running ASP.NET Core in an Azure App Service it\u0027s even more painful because the `EventLog.xml` file that Azure App Services maintains for you doesn\u0027t record any mention of the process being killed due to a stack-overflow. That\u0027s maddening. This means that every unexpected stack-overflow causes 2-3 hours of figuring out \"why isn\u0027t the website working?\" because _there\u0027s no indication the entire process is crashing in the first place_.\r\n\r\nIt seems in Azure the only solution is to enable short-term crash monitoring, then reproduce the issue (assuming you can even consistently and reliably reproduce it in the first place!), then download the multi-gigabyte-sized `.dmp` file that Azure Portal saves to your blob storage account, and then wait over 30 minutes for Visual Studio to chew through the `.dmp` file (all while VS shows an ugly pop-up informing me that a background process is \"taking too long\" and only giving me a (_very tempting_) \"Terminate\" button...\r\n\r\nSo I\u0027d describe the issue more broadly as: **the overall developer UX for diagnosing and investigating stack-overflow crashes in .NET Core is abysmal** and this is especially disappointing given Microsoft has a generally good reputation for developer-tooling - and we never had this problem in .NET Framework 1.x, where we could at least `catch( StackOverflowException )`.\r\n\r\n-----\r\n\r\nOut of curiosity (and I know it\u0027s off-topic), but why doesn\u0027t `EventLog.xml` record app-crashes due to stack-overflows?",
                                           "updatedAt":  "2021-05-26T04:14:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODQ0Nzc1NA==",
                                           "createdAt":  "2021-05-26T04:40:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tommcdon do you know who writes this xml file? The work @janvorli  did to emit the stack was a game changer but it sounds like the scenario doesn\u0027t quite work E2E here.",
                                           "updatedAt":  "2021-05-26T04:40:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODk1NDYzOQ==",
                                           "createdAt":  "2021-05-26T17:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Eventlog.xml is part of the [Application Event Log](https://docs.microsoft.com/aspnet/core/test/troubleshoot-azure-iis?view=aspnetcore-5.0#application-event-log-azure-app-service) feature in Azure App Services.  I\u0027ll find out the owners and try out the E2E scenario with StackOverFlow.  It sounds like we might have a scenario gap here. ",
                                           "updatedAt":  "2021-05-26T17:10:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0ODk1ODY2OA==",
                                           "createdAt":  "2021-05-26T17:14:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Or you can fix #8947 to at least allow catch (StackOverflowException) to work. The original reason for denying it is long gone.\r\n\r\nStackOverflow has been theoretically recoverable forever. Once having rolled back 4k of stack you can call the native function _resetstkoflw https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/resetstkoflw?view=msvc-160",
                                           "updatedAt":  "2021-05-26T17:14:58Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "How to debug StackOverflowException",
        "labels":  [
                       "question",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12158",
        "createdAt":  "2019-03-01T13:40:14Z",
        "number":  12158,
        "author":  "corruptmem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-08T15:08:17Z",
        "body":  "Not sure if this counts as a bug, but it was unexpected behaviour for me.\r\n\r\nTest case:\r\n```csharp\r\nforeach (var _ in Enumerable.Range(1, 10000))\r\n{            \r\n    new ManualResetEvent(false) { Handle = new IntPtr(1234) };\r\n    GC.Collect();\r\n}\r\n```\r\n\r\nRun under the debugger (Windows, .NET Core 2.2) it will produce a SEHException from the GC finalizer thread:\r\n```\r\nSystem.Runtime.InteropServices.SEHException\r\n  HResult=0x80004005\r\n  Message=External component has thrown an exception.\r\n  Stack Trace:\r\n     Microsoft.Win32.Win32Native.CloseHandle(IntPtr handle) at\r\n     System.Runtime.InteropServices.SafeHandle.InternalFinalize() at\r\n     System.Runtime.InteropServices.SafeHandle.Finalize()\r\n```\r\n\r\nAlthough this is clearly an application code issue (in my case, it came from incorrectly serializing then subsequently deserializing a ManualResetEvent with JsonConvert), because the exception occurs on the finalizer thread some time after the incorrect code is called, it\u0027s very difficult to figure out where the code issue came from.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMxKOsg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Njg1NDE5NA==",
                                           "createdAt":  "2021-06-08T15:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rkuiper1",
                                           "body":  "Hi,\r\n\r\nI would like to +1 this issue and add that \u0027very difficult to figure out where the issue came from\u0027 is an understatement.\r\nSince about 2 weeks I get exactly this exception which basically makes it impossible to debug.\r\nUp until now I\u0027ve been unsuccessful in finding any clues to what might cause this problem.\r\nMy project has a modest 180.000 lines of code and I really have no idea what to look for.\r\nDebugging the live situation with VS2019 doesn\u0027t bring me any closer to understanding what happens nor does analyzing a dump file of the situation with windbg.\r\n\r\n\u0027Clearly being an application code issue\u0027 suggests that my lack of knowledge is the problem, which is probably true, but  I dare to argue that the situation I currently find myself in is at least partially caused by design/security choices in the CLR, given that the code runs without problems when no debugger is attached.\r\n\r\nIs there a way to approach this problem and find the problematic code?\r\n\r\ncheers,\r\nRIchard",
                                           "updatedAt":  "2021-06-08T15:08:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "SEHException after instantiating invalid ManualResetEvent",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12892",
        "createdAt":  "2019-06-14T11:41:07Z",
        "number":  12892,
        "author":  "chrishaly",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9v9JQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lueurxax",
                                            "createdAt":  "2019-06-14T14:22:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Symbai",
                                            "createdAt":  "2019-06-14T16:25:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sgf",
                                            "createdAt":  "2019-07-11T06:03:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "4creators",
                                            "createdAt":  "2019-09-19T14:12:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2019-09-23T12:03:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spixy",
                                            "createdAt":  "2019-11-26T15:25:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2020-02-02T23:44:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pengweiqhca",
                                            "createdAt":  "2020-03-23T05:43:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raffaeler",
                                            "createdAt":  "2020-10-12T14:33:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rootflood",
                                            "createdAt":  "2021-08-22T14:17:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2022-10-28T04:54:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-11-03T06:06:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2024-12-27T17:36:23Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2023-04-24T17:32:53Z",
        "body":  "A compare test did, result says: performance of try catch throw Exception in .Net is over 10 times slow than in Java.\r\n\r\nReproduce:\r\n\r\nC# code\r\n``` csharp\r\n    class ExceptionPerformanceTest\r\n    {\r\n        public void Test()\r\n        {\r\n            var stopwatch = Stopwatch.StartNew();\r\n            ExceptionTest(100_000);\r\n            stopwatch.Stop();\r\n            Console.WriteLine(stopwatch.ElapsedMilliseconds);\r\n        }\r\n\r\n        private void ExceptionTest(long times)\r\n        {\r\n            for (int i = 0; i \u003c times; i++)\r\n            {\r\n                try\r\n                {\r\n                    throw new Exception();\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    //Ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nJava Code\r\n```java\r\npublic class ExceptionPerformanceTest {\r\n\r\n    public void Test() {\r\n        Instant start = Instant.now();\r\n        ExceptionTest(100_000);\r\n        Instant end = Instant.now();\r\n        Duration duration = Duration.between(start, end);\r\n        System.out.println(duration.toMillis());\r\n\r\n    }\r\n\r\n    private void ExceptionTest(long times) {\r\n        for (int i = 0; i \u003c times; i++) {\r\n            try {\r\n                throw new Exception();\r\n            } catch (Exception ex) {\r\n                //Ignore\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTest Result:\r\n\r\n\u003e .Net: 2151ms\r\n\u003eJava: 175ms\r\n\r\n2151/175=12.29\r\n\r\nsource code at https://github.com/chrishaly/DotNetVsJavaPerformanceTest",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWqIGNw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjE3MzQ2Mw==",
                                           "createdAt":  "2019-06-14T16:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "~~For me it seems like there is a huge regression on .NET Core comparing to .NET Framework.~~\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview4-011223\r\n  [Host]     : .NET Core 3.0.0-preview4-27615-11 (CoreCLR 4.6.27615.73, CoreFX 4.700.19.21213), 64bit RyuJIT\r\n  Job-HBDUYZ : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT\r\n  Clr        : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3801.0\r\n  Core       : .NET Core 3.0.0-preview4-27615-11 (CoreCLR 4.6.27615.73, CoreFX 4.700.19.21213), 64bit RyuJIT\r\n```\r\n\r\n| Method |     Job | Runtime |     Toolchain |       Mean |     Error |    StdDev | Rank |     Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------- |-------- |-------- |-------------- |-----------:|----------:|----------:|-----:|----------:|------:|------:|----------:|\r\n|    Run | Default |    Core | .NET Core 2.2 | 2,080.9 ms | 49.455 ms | 46.260 ms |    2 | 3000.0000 |     - |     - |   20.6 MB |\r\n|    Run |     Clr |     Clr |       Default |   685.3 ms |  3.420 ms |  3.031 ms |    1 | 4000.0000 |     - |     - |  27.55 MB |\r\n|    Run |    Core |    Core |       Default | 2,190.4 ms | 43.222 ms | 36.092 ms |    3 | 3000.0000 |     - |     - |  19.07 MB |\r\n\r\nCode:\r\n```\r\n[ClrJob]\r\n    [CoreJob]\r\n    [MemoryDiagnoser]\r\n    [RPlotExporter, RankColumn]\r\n    public class ExceptionTest\r\n    {\r\n        [Benchmark]\r\n        public bool Run()\r\n        {\r\n            for (int i = 0; i \u003c 100_000L; i++)\r\n            {\r\n                try\r\n                {\r\n                    throw new Exception();\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    //Ignore\r\n                }\r\n            }\r\n            return true;\r\n        }     \r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var summary = BenchmarkRunner.Run\u003cExceptionTest\u003e(DefaultConfig.Instance.With(Job.Default.With(CsProjCoreToolchain.NetCoreApp22)));\r\n        }\r\n    }\r\n```\r\n",
                                           "updatedAt":  "2019-06-14T16:31:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjE3NDI0OA==",
                                           "createdAt":  "2019-06-14T16:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAqmCdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2019-06-14T16:30:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2019-06-14T16:30:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e For me it seems like there is a huge regression on .NET Core comparing to .NET Framework.\r\n\r\nSee https://github.com/dotnet/coreclr/issues/22224#issuecomment-499657814",
                                           "updatedAt":  "2019-06-14T16:27:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjMyMjk4NQ==",
                                           "createdAt":  "2019-06-15T01:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrishaly",
                                           "body":  "Tested on Virtual Machine Ubuntu 18.04.2 LTS\r\n\r\n\u003e.NetCore 2.2: 3405\r\n\u003eJava JDK 11: 237\r\n\r\n3405/237=14.367",
                                           "updatedAt":  "2019-06-15T01:16:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjQ4MzYwOQ==",
                                           "createdAt":  "2019-06-16T20:32:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "Benchmarking in Java is [hard to get right](https://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html), more so than .NET. You should consider writing a [JMH Benchmark](https://openjdk.java.net/projects/code-tools/jmh/) to ensure that the timings are correct (BenchmarkDotNet was partly inspired by JMH, so the benchmark code will look similar).",
                                           "updatedAt":  "2019-06-16T20:32:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjk3Mzg1Mw==",
                                           "createdAt":  "2019-06-18T06:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrishaly",
                                           "body":  "\u003e Benchmarking in Java is [hard to get right](https://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html), more so than .NET. You should consider writing a [JMH Benchmark](https://openjdk.java.net/projects/code-tools/jmh/) to ensure that the timings are correct (BenchmarkDotNet was partly inspired by JMH, so the benchmark code will look similar).\r\n\r\nTimes changed from 100,000 to 1000,000 on windows the result is:\r\n\u003e.NetCore 2.2:  30401ms\r\n\u003eJava JDK 1.8: 726ms\r\n\r\n30401ms/726=41.87\r\n\r\nSo mybe it\u0027s not need to get accurate time, since more than 40 times 9.9 or 10.1, 39 or 41 are similar.\r\nIt\u0027s all said that .net core 2.2 exeception handling more slow than java.\r\n\r\nTo avoid java compiler optimize the code, a counter to sum exception times added. and the result is:\r\n\u003e1000000\r\n\u003e672\r\n\r\n1000000 times exception throw and catched in fact.\r\n\r\n```java\r\n    public void Test() {\r\n        Instant start = Instant.now();\r\n        System.out.println(ExceptionTest(1000_000));\r\n        Instant end = Instant.now();\r\n        Duration duration = Duration.between(start, end);\r\n        System.out.println(duration.toMillis());\r\n\r\n    }\r\n\r\n    private long ExceptionTest(long times) {\r\n        long result = 0;\r\n        for (int i = 0; i \u003c times; i++) {\r\n            try {\r\n                throw new Exception();\r\n            } catch (Exception ex) {\r\n                //Ignore\r\n                result++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n```",
                                           "updatedAt":  "2019-06-18T07:04:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzA1Mjg1OQ==",
                                           "createdAt":  "2019-06-18T10:51:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "Just upping a counter doesn\u0027t mean it doesn\u0027t get optimized away, you would need to throw from a different method and block that method from being inlined, except that i couldn\u0027t find a hint to block the JVM from inlining a method\r\n\r\n```java\r\npublic void Test() {\r\n\tInstant start = Instant.now();\r\n\tSystem.out.println(ExceptionTest(1000_000));\r\n\tInstant end = Instant.now();\r\n\tDuration duration = Duration.between(start, end);\r\n\tSystem.out.println(duration.toMillis());\r\n\r\n}\r\n\r\nprivate long ExceptionTest(long times) {\r\n\tlong result = 0;\r\n\tfor (int i = 0; i \u003c times; i++) {\r\n\t\ttry {\r\n\t\t\tThrow();\r\n\t\t} catch (Exception ex) {\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n//@NoInlining \u003c-- would need something like this\r\nprivate void Throw() throws Exception {\r\n\tthrow new Exception();\r\n}\r\n```",
                                           "updatedAt":  "2019-06-18T11:31:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzA1OTQ4MA==",
                                           "createdAt":  "2019-06-18T11:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoG3RQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-09-23T12:04:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spixy",
                                                                               "createdAt":  "2019-11-26T15:25:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "anvouk",
                                                                               "createdAt":  "2024-07-02T19:22:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Exception performance in .NET is known to be slow. I think this is becoming more and more of a problem because:\r\n\r\n* Callstacks with `await` rethrow an exception many times thereby multiplying the costs to an extent.\r\n* Modern applications tend to do more IO. Everything is networked these days (microservices, cloud services). IO is a major source of exceptions.\r\n\r\nI have worked on multiple applications where exceptions became a performance issue. The code was not bad. Fairly frequent errors were in the nature of the application.\r\n\r\nAlso, when the Visual Studio Debugger is attached exceptions again become 10-100x slower.\r\n",
                                           "updatedAt":  "2019-06-18T11:14:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzA3MDUzNw==",
                                           "createdAt":  "2019-06-18T11:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrishaly",
                                           "body":  "@mattwarren exception handling slow is known, however compare to java .net exception handling 10 or 40 times slow is surprise, two platform  both with GC different so much, so there must be some problem in .NET",
                                           "updatedAt":  "2019-06-22T13:25:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMjY5MTMyMg==",
                                           "createdAt":  "2019-09-18T13:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I\u0027ve tried to profile the C# EH example above on Windows. 24% of the time is spent in RaiseException, 17% in RtlLookupFunctionEntry, 10% in RtlVirtualUnwind, 6.4% in EtwEventWrite, 5.5% in EtwEventWriteTransfer and 2.7% in RtlUnwindEx. All the percentages are exclusive. It sums up to 65.6%. All of these functions are in the Windows ntdll.dll, so .NET Core cannot do much about this time.\r\nThe remaining 35% of the time is split into tiny fragments of 0..2.5% spent in various coreclr functions.",
                                           "updatedAt":  "2019-09-18T13:45:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMjc1NzM2Nw==",
                                           "createdAt":  "2019-09-18T16:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx0GeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-09-23T12:04:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spixy",
                                                                               "createdAt":  "2019-11-26T15:25:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benaadams",
                                                                               "createdAt":  "2020-01-31T03:12:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KrzysztofCwalina",
                                                                               "createdAt":  "2020-04-10T23:22:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2020-04-24T05:05:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kamilzzz",
                                                                               "createdAt":  "2022-12-27T01:04:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e .NET Core cannot do much about this time\r\n\r\n.NET Core can avoid this overhead by handling the exceptions internally, without involving the Windows OS exception handling. It is what CoreRT does. CoreRT runs the exception handling microbenchmarks like the one above number of times faster. There is nothing fundamental (except the huge amount of work involved) that prevents porting the same scheme to CoreCLR.",
                                           "updatedAt":  "2019-09-18T16:14:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODgwMzkxNg==",
                                           "createdAt":  "2020-04-24T05:06:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-0ZFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-04-25T17:15:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bill-poole",
                                                                               "createdAt":  "2020-05-17T18:47:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eduardobr",
                                                                               "createdAt":  "2020-07-09T11:12:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohanSciubukgian",
                                                                               "createdAt":  "2021-10-19T04:02:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It might be good to tackle this in .NET 6. I saw some of these stacks when I was debugging a performance run. It seems like there\u0027s some lock in the OS when exceptions get thrown. There were lots of concurrent sockets disconnecting at the same time and it resulting in high CPU.",
                                           "updatedAt":  "2020-04-24T05:06:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aogY3",
                                           "createdAt":  "2023-04-24T17:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQbcYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zsxawerdu",
                                                                               "createdAt":  "2023-12-23T17:07:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wasabii",
                                           "body":  "I\u0027m the current maintainer of IKVM. I can vouch for this. :)",
                                           "updatedAt":  "2023-04-24T17:32:52Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Exception try catch performance 10 times low than java",
        "labels":  [
                       "tenet-performance",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13209",
        "createdAt":  "2019-08-05T20:02:12Z",
        "number":  13209,
        "author":  "iskiselev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-16T18:12:00Z",
        "body":  "On Windows x64 CoreCLR use 9 KiB of stack space per each frame that has catch block that will rethrow exception up to frame that will finally handle exception. On x86 stack space is not used for the same pattern at all. Per our test it is not used on Linux-X64 too.\r\n.Net Framework x64 is also affected by the same problem (it use 8 KiB for ,Net Framework 4.7.2 and more for 3.5.).\r\nHere is test sample:\r\n```c#\r\nusing System;\r\n\r\nnamespace teststackoverflow\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            if (args.Length != 1 || !int.TryParse(args[0], out var maxRecursion))\r\n            {\r\n                maxRecursion = 250;\r\n            }\r\n            try\r\n            {\r\n\r\n                WithExceptionRecurse(1, maxRecursion);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"WithExceptionRecurse thrown\");\r\n            }\r\n        }\r\n\r\n        static void WithExceptionRecurse(int count, int maxRecursion)\r\n        {\r\n            try\r\n            {\r\n                Console.WriteLine(\"Frame {0}\", count);\r\n                if (count \u003e maxRecursion)\r\n                {\r\n                    Console.WriteLine(\"Frame {0} Throws\", count);\r\n                    throw new Exception(count.ToString());\r\n                }\r\n                WithExceptionRecurse(count+1, maxRecursion);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"Frame Exception {0}\", count);\r\n                //RecursionTest.WriteStack();\r\n\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*internal class RecursionTest\r\n    {\r\n        [DllImport(\"kernel32.dll\")]\r\n        static extern void GetCurrentThreadStackLimits(out UIntPtr lowLimit, out UIntPtr highLimit);\r\n\r\n        public static unsafe void WriteStack()\r\n        {\r\n            UIntPtr low;\r\n            UIntPtr high;\r\n\r\n            GetCurrentThreadStackLimits(out low, out high);\r\n            var size = ((long) high - (long) low) / 1024; // in KB\r\n            ulong current = (ulong) (UIntPtr) (void*) \u0026size;\r\n            var left = ((long) current - (long) low) / 1024; // in KB\r\n\r\n\r\n            bool isSufficientStack = false;\r\n            try\r\n            {\r\n                RuntimeHelpers.EnsureSufficientExecutionStack();\r\n                isSufficientStack = true;\r\n            }\r\n            catch (Exception)\r\n            {\r\n            }\r\n\r\n            Console.WriteLine($\"Stack: size={size}, left={left}, isSufficientStack={isSufficientStack}\");\r\n        }\r\n    }*/\r\n}\r\n```\r\n\r\nIf this app will be published with `dotnet publish -c release -r win-x86 --self-contained`, that can be called without StackOverfolowExcpetion with deep recursions, i.e 250.\r\nBut if it was published with `dotnet publish -c release -r win-x64 --self-contained`, it will fail with StackOverfolowExcpetion with only recursion layer 160.\r\n\r\nIt is even bigger problem on .Net Framework hosted inside w3wp, as it allocates only 512 KiB of stack - so it is reproducible with only 51 recursion there. Looks like some work have been done to provide a way to override stack size for w3wp in .Net Core hosting scenarios (#21450), which may help in hosted scenarios on CoreCLR.\r\n\r\nI\u0027ve added commented diagnostic code that should show available stack space (if it  will be uncommented).\r\n\r\nIs it possible to update Win-x64 codegen to not use stack space at all (same as x86) or at least use smaller amount of stack space in recursive throw scenarios?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOFMhaQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMDU4MDU1OA==",
                                           "createdAt":  "2019-08-12T20:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@iskiselev I\u0027ve tried to run your example on my machine under WinDbg. From those about 9kB, about 7kB are used by stack frames of Windows exception handling APIs (RtlUnwindEx, RtlDispatchException and KiUserExceptionDispatch), so there is nothing we can do to reduce that.",
                                           "updatedAt":  "2019-08-12T20:23:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMTAxMzU1OA==",
                                           "createdAt":  "2019-08-13T21:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iskiselev",
                                           "body":  "Why is it not use stack space on x86? Should it be reported as windows issue, as it is not reproducible on Linux x64? Where it can be reported? Is there any workaround that can be applied on CLR side?\r\nRight now on x64 9 kb consumed by each handler, from which 7 attributed to Windows (per @janvorli) - so 2 kb is still used by CLR. Even 2 kb is big number, but we don\u0027t see any usage, even this 2kb on x86 or x64 Linux - so probably CLR does something different in that case.",
                                           "updatedAt":  "2019-08-13T21:25:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44UyFp",
                                           "createdAt":  "2021-10-16T18:10:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vantonenko",
                                           "body":  "I can confirm the issue is still there, both net48 and netCore. \r\n\r\nAlso reproducible in C++.\r\n\r\nWindows only (not reproducible on Linux), x64 mode (or AnyCpu running in x64 env).",
                                           "updatedAt":  "2021-10-16T18:12:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Big stack usage on exception handling win-x64",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13675",
        "createdAt":  "2019-10-29T07:33:58Z",
        "number":  13675,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-03T19:01:43Z",
        "body":  "Using exceptions for control flow is a very bad idea, especially from performance point of view. I\u0027ve spoken with @janvorli about this and we know that there is a difference between Windows and Linux. The goal of this issue is to track this difference.\r\n\r\n| Slower                                                                      | Lin/Win | Win Median (ns) | Lin Median (ns) | Modality|\r\n| --------------------------------------------------------------------------- | -------:| ---------------:| ---------------:| -------- |\r\n| Exceptions.Handling.ThrowAndCatchWhen(kind: Hardware)                       |   25.11 |        20775.66 |       521648.36 |         |\r\n| Exceptions.Handling.MultipleNestedTryCatch_FirstCatches(kind: Hardware)     |   25.11 |        20875.20 |       524122.26 |         |\r\n| Exceptions.Handling.ThrowAndCatchWhenFinally(kind: Hardware)                |   24.75 |        21114.66 |       522687.48 |         |\r\n| Exceptions.Handling.MultipleNestedTryCatch_LastCatches(kind: Hardware)      |   24.48 |        21519.67 |       526803.53 |         |\r\n| Exceptions.Handling.ThrowAndCatchFinally(kind: Hardware)                    |   24.41 |        21669.90 |       529049.46 |         |\r\n| Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind: Hardware)           |   24.10 |        21991.97 |       530030.41 | several?|\r\n| Exceptions.Handling.MultipleNestedTryFinally(kind: Hardware)                |   23.96 |        21908.57 |       525023.32 |         |\r\n| Exceptions.Handling.ThrowAndCatch(kind: Hardware)                           |   23.41 |        22426.34 |       525022.52 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeep(kind: Hardware)                       |   16.13 |        33045.54 |       533146.63 |         |\r\n| Exceptions.Handling.TryAndFinallyDeep(kind: Hardware)                       |   15.74 |        34275.09 |       539323.13 |         |\r\n| Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(kind: Hardware)           |   15.69 |        34168.04 |       536168.86 | bimodal |\r\n| Exceptions.Handling.ThrowAndCatchDeepRecursive(kind: Hardware)              |   15.48 |        34633.58 |       536240.69 |         |\r\n| Exceptions.Handling.CatchAndThrowOtherDeep(kind: Hardware)                  |    4.51 |       170771.35 |       769741.43 |         |\r\n| Exceptions.Handling.CatchAndRethrowDeep(kind: Hardware)                     |    4.31 |       171411.33 |       739533.77 |         |\r\n| Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind: ReflectionHardware) |    2.88 |       196712.74 |       565876.49 |         |\r\n| Exceptions.Handling.ThrowAndCatch(kind: ReflectionHardware)                 |    2.86 |       197403.98 |       564056.95 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeep(kind: ReflectionHardware)             |    2.71 |       215040.24 |       583315.19 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeepRecursive(kind: ReflectionHardware)    |    2.69 |       214643.25 |       578046.54 |         |\r\n| Exceptions.Handling.CatchAndThrowOtherDeep(kind: Software)                  |    1.49 |       160539.16 |       239381.94 |         |\r\n| Exceptions.Handling.CatchAndRethrowDeep(kind: Software)                     |    1.40 |       154818.05 |       217226.15 |         |\r\n\r\n| Faster                                                                      | base/diff | Win Median (ns) | Lin Median (ns) | Modality|\r\n| --------------------------------------------------------------------------- | ---------:| ---------------:| ---------------:| --------:|\r\n| Exceptions.Handling.ThrowAndCatch(kind: ReflectionSoftware)                 |      4.68 |       188501.51 |        40264.51 |         |\r\n| Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind: ReflectionSoftware) |      4.64 |       191127.36 |        41204.83 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeep(kind: ReflectionSoftware)             |      3.91 |       201290.58 |        51517.30 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeepRecursive(kind: ReflectionSoftware)    |      3.36 |       203978.57 |        60632.90 |         |\r\n| Exceptions.Handling.MultipleNestedTryCatch_LastCatches(kind: Software)      |      1.19 |        13525.26 |        11395.63 |         |\r\n| Exceptions.Handling.ThrowAndCatchFinally(kind: Software)                    |      1.19 |        13400.75 |        11303.67 |         |\r\n| Exceptions.Handling.ThrowAndCatchWhen(kind: Software)                       |      1.19 |        12896.90 |        10880.16 |         |\r\n| Exceptions.Handling.MultipleNestedTryFinally(kind: Software)                |      1.18 |        13336.84 |        11295.40 |         |\r\n| Exceptions.Handling.ThrowAndCatch(kind: Software)                           |      1.17 |        13052.95 |        11166.26 |         |\r\n| Exceptions.Handling.MultipleNestedTryCatch_FirstCatches(kind: Software)     |      1.17 |        12888.73 |        11059.73 |         |\r\n| Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind: Software)           |      1.13 |        13045.92 |        11585.71 |         |\r\n| Exceptions.Handling.TryAndFinallyDeep(kind: Software)                       |      1.10 |        25933.01 |        23489.22 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeep(kind: Software)                       |      1.07 |        24724.46 |        23001.59 |         |\r\n| Exceptions.Handling.ThrowAndCatchDeepRecursive(kind: Software)              |      1.07 |        25909.13 |        24214.04 |         |\r\n| Exceptions.Handling.ThrowAndCatchWhenFinally(kind: Software)                |      1.02 |        12964.28 |        12667.33 |         |\r\n| Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(kind: Software)           |      1.02 |        25957.84 |        25491.83 |         |\r\n\r\n1. How to run the [benchmarks](https://github.com/dotnet/performance/blob/master/src/benchmarks/micro/coreclr/Exceptions/Handling.cs):\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 ./performance/scripts/benchmarks_ci.py -f netcoreapp5.0 --filter \u0027Exceptions*\u0027\r\n```\r\n\r\n2. Recommended profilers are [PerfCollect](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-corefx.md#PerfCollect) and [VTune](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-corefx.md#VTune) VTune works great on Linux.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYzX-Xw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jNf5f",
                                           "createdAt":  "2023-08-03T19:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OwnageIsMagic",
                                           "body":  "https://github.com/dotnet/runtime/issues/77568",
                                           "updatedAt":  "2023-08-03T19:01:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Handling Hardware Exceptions is much slower on Linux",
        "labels":  [
                       "os-linux",
                       "tenet-performance",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1632",
        "createdAt":  "2020-01-11T17:13:22Z",
        "number":  1632,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-13T19:29:57Z",
        "body":  "STATUS_IN_PAGE_ERROR indicates hardware fault or OS kernel problem. We may be able to improve diagnosability of these crashes by logging the error code: https://devblogs.microsoft.com/oldnewthing/20120608-00/?p=7423\r\n\r\ncc @mjsabby ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIlzIEw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NjUwNTg3NQ==",
                                           "createdAt":  "2020-01-21T03:45:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "This happens a bit more when you have binaries that are running on Azure Managed Disks (essentially disks over network).",
                                           "updatedAt":  "2020-01-21T03:45:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider logging error code for STATUS_IN_PAGE_ERROR exceptions",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1871",
        "createdAt":  "2020-01-17T19:20:00Z",
        "number":  1871,
        "author":  "jaredpar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-24T15:48:48Z",
        "body":  "\r\n## System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod\r\n\r\n### Console Log Summary\r\n\r\n\r\n```\r\n* ExceptionTests - reported call stack:\r\n   at System.Tests.ExceptionTests.ThrowException() in /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs:line 143\r\n   at System.Tests.ExceptionTests.ThrowAndRethrowOtherMethod(ValueTuple`3\u0026 rethrownExceptionStackFrame) in /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs:line 130\r\n   at System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod() in /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs:line 118\r\n    System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 131\r\n      Actual:   130\r\n      Stack Trace:\r\n        /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs(154,0): at System.Tests.ExceptionTests.VerifyCallStack(ValueTuple`3 expectedStackFrame, String reportedCallStack, Int32 skipFrames)\r\n        /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs(122,0): at System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod()\r\n  Finished:    System.Runtime.Tests\r\n```\r\n\r\n### Builds\r\n|Build|Test Failure Count|\r\n| --- | --- |\r\n|[#506244](https://dev.azure.com/dnceng/public/_build/results?buildId=506244)|2|\r\n|[#506364](https://dev.azure.com/dnceng/public/_build/results?buildId=506364)|2|\r\n### Configurations\r\n- netcoreapp5.0-Linux-Release-arm64-CoreCLR_release-(Alpine.38.Arm64.Open)Ubuntu.1804.ArmArch.Open@\u003c!-- --\u003emcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.8-helix-arm64v8-a45aeeb-20190620184035\r\n- netcoreapp5.0-Linux-Release-arm64-CoreCLR_release-(Ubuntu.1804.ArmArch.Open)Ubuntu.1804.ArmArch.Open@\u003c!-- --\u003emcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-helix-arm64v8-bfcd90a-20200127194925\r\n### Helix Logs\r\n|Build|Console|Core|Test Results|\r\n| --- | --- | --- | --- |\r\n|[#506364](https://dev.azure.com/dnceng/public/_build/results?buildId=506364)|[console.f84b1a44.log](https://helix.dot.net/api/2019-06-17/jobs/07ed90cb-d72f-41b7-9274-9befb2b292c2/workitems/System.Runtime.Tests/files/console.f84b1a44.log)|||\r\n|[#506244](https://dev.azure.com/dnceng/public/_build/results?buildId=506244)|[console.9fde1ff7.log](https://helix.dot.net/api/2019-06-17/jobs/2ea8f58d-71cb-4fc5-a025-5de8d45ded65/workitems/System.Runtime.Tests/files/console.9fde1ff7.log)|||\r\n|[#506364](https://dev.azure.com/dnceng/public/_build/results?buildId=506364)|[console.3cbd2e2b.log](https://helix.dot.net/api/2019-06-17/jobs/0a6608f4-0f03-4e59-be60-4c9f6e8bc9d9/workitems/System.Runtime.Tests/files/console.3cbd2e2b.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/0a6608f4-0f03-4e59-be60-4c9f6e8bc9d9/workitems/System.Runtime.Tests/files/testResults.xml)|\r\n|[#506244](https://dev.azure.com/dnceng/public/_build/results?buildId=506244)|[console.0b83c09a.log](https://helix.dot.net/api/2019-06-17/jobs/364c4357-8039-469b-82f4-f43a5f9ef708/workitems/System.Runtime.Tests/files/console.0b83c09a.log)||[testResults.xml](https://helix.dot.net/api/2019-06-17/jobs/364c4357-8039-469b-82f4-f43a5f9ef708/workitems/System.Runtime.Tests/files/testResults.xml)|",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZNkgYQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc3MjE4Mw==",
                                           "createdAt":  "2020-01-17T19:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@jaredpar it actually shows a message indicating the problem:\r\n`_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev: symbol not found`\r\nSee #1723 for more details.",
                                           "updatedAt":  "2020-01-17T19:55:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc3Mjk5Ng==",
                                           "createdAt":  "2020-01-17T19:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@janvorli thanks! Missed that.\r\n\r\nDoes look like that is the same issue as #1723. Will keep this one open to track getting the CI runs back to green and have #1723 track fixing the bug + enabling the run again.",
                                           "updatedAt":  "2020-01-17T19:57:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDYwMjI1OQ==",
                                           "createdAt":  "2020-01-31T06:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "I just merged: https://github.com/dotnet/runtime/pull/2290 which fixes this, and now exposes a real test failure: \r\n\r\n```\r\n* ExceptionTests - reported call stack:\r\n   at System.Tests.ExceptionTests.ThrowException() in /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs:line 143\r\n   at System.Tests.ExceptionTests.ThrowAndRethrowOtherMethod(ValueTuple`3\u0026 rethrownExceptionStackFrame) in /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs:line 130\r\n   at System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod() in /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs:line 118\r\n    System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 131\r\n      Actual:   130\r\n      Stack Trace:\r\n        /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs(154,0): at System.Tests.ExceptionTests.VerifyCallStack(ValueTuple`3 expectedStackFrame, String reportedCallStack, Int32 skipFrames)\r\n        /_/src/libraries/System.Runtime/tests/System/ExceptionTests.cs(122,0): at System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod()\r\n  Finished:    System.Runtime.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n```\r\n\r\n@jaredpar do we want to open a follow up issue for that one, or should we just keep this one open and track this failure getting fixed as part of this issue.",
                                           "updatedAt":  "2020-01-31T06:30:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTY1ODk0NQ==",
                                           "createdAt":  "2020-02-03T22:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "I updated the title and description for this issue. @jkotas @stephentoub do you have any idea what might be happening and what would the difference be on alpine arm64 vs amd64? Could it be a docker image setup? @janvorli @wfurt?",
                                           "updatedAt":  "2020-02-03T22:55:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTY2MjgxOQ==",
                                           "createdAt":  "2020-02-03T23:06:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @mikem8361 ",
                                           "updatedAt":  "2020-02-03T23:06:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTY2MzQ0NQ==",
                                           "createdAt":  "2020-02-03T23:08:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Actually it seems like it is not only alpine, also Ubuntu. \r\nhttps://helix.dot.net/api/2019-06-17/jobs/9983a98e-06ab-40bf-94f9-1a4216df4da0/workitems/System.Runtime.Tests/console\r\n\r\nWhich also runs in a docker container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-helix-arm64v8-bfcd90a-20200127194925\r\n\r\nBoth are arm64. Updating the title.",
                                           "updatedAt":  "2020-02-03T23:08:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTY2ODY5OQ==",
                                           "createdAt":  "2020-02-03T23:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "My recent PR #https://github.com/dotnet/runtime/pull/2269 to fix the stack trace line numbers may have broken this test. Investigating.",
                                           "updatedAt":  "2020-02-03T23:25:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjA0MTM3Nw==",
                                           "createdAt":  "2020-02-04T18:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Looks like PR https://github.com/dotnet/runtime/pull/31696 didn\u0027t fix this problem. I\u0027m going to have to figure out how to debug it on one of our local arm64 pi\u0027s. \r\n\r\nIt is weird that it only fails on linux arm64 not windows arm64 though I couldn\u0027t find a windows arm64 library test leg.",
                                           "updatedAt":  "2020-02-04T18:09:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjA0MzQwMg==",
                                           "createdAt":  "2020-02-04T18:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@mikem8361 \r\n\r\nDon\u0027t believe we run the libraries tests on windows arm64 at the moment. Here is the relevant entry from runtime.yml\r\n\r\n```yml\r\n- template: /eng/pipelines/common/platform-matrix.yml\r\n  parameters:\r\n    jobTemplate: /eng/pipelines/libraries/run-test-job.yml\r\n    buildConfig: ${{ variables.debugOnPrReleaseOnRolling }}\r\n    platforms:\r\n    - Windows_NT_x64\r\n    - OSX_x64\r\n    - Linux_x64\r\n    - Linux_musl_x64\r\n    - ${{ if eq(variables[\u0027isFullMatrix\u0027], true) }}:\r\n      - Linux_arm\r\n      - Linux_arm64\r\n      - Linux_musl_arm64\r\n    - ${{ if eq(variables[\u0027isFullMatrix\u0027], false) }}:\r\n      - Windows_NT_x86\r\n```\r\n\r\n@safern can confirm my reading here. ",
                                           "updatedAt":  "2020-02-04T18:13:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjA1MTUyMQ==",
                                           "createdAt":  "2020-02-04T18:33:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Yes that is correct, it fails on Linux arm64 and Linux_musl_arm64. We\u0027re waiting for necessary resources in order to be able to run tests on windows arm64, @trylek knows more about windows arm/arm64.",
                                           "updatedAt":  "2020-02-04T18:33:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjA1NjE2NQ==",
                                           "createdAt":  "2020-02-04T18:43:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trylek",
                                           "body":  "In mid-December the DDFUN team reinstalled the queue Windows.10.Arm64.Open we had been using previously for Windows arm32 testing to a new chipset that doesn\u0027t support the arm32 subsystem. That nuked Windows arm32 testing that doesn\u0027t work to this day. Based on my discussions with @MattGal and other dnceng and DDFUN people I received repeated confirmation that the queue Windows.10.Arm64.Open should be sufficient for Windows arm64 testing of the runtime repo. Last week I managed to push the first successful run through the queue and I sent out a PR for adding the Windows arm64 job to the PR runs:\r\n\r\nhttps://github.com/dotnet/runtime/pull/2095\r\n\r\nOnce this gets approved and merged in, we\u0027ll start receiving Windows arm64 results in PR runs. Initially I don\u0027t want to add the arm64 job to outerloop runs as they are noisy enough already - let\u0027s monitor stability and pass rate of the arm64 runs say for a week and based on the results we can decide what other pipelines we want to add arm64 jobs to.",
                                           "updatedAt":  "2020-02-04T18:43:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjA4OTU0MQ==",
                                           "createdAt":  "2020-02-04T20:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "I put up a PR to disable this tests for arm64 in  the effort of getting the rolling builds green: https://github.com/dotnet/runtime/pull/31735",
                                           "updatedAt":  "2020-02-04T20:02:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjA5MTIzNw==",
                                           "createdAt":  "2020-02-04T20:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trylek",
                                           "body":  "Thank you, just approved that.",
                                           "updatedAt":  "2020-02-04T20:06:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjE0MzIxNA==",
                                           "createdAt":  "2020-12-10T00:08:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "This is an off-by-one-line number issue.  We suggest updating the tests to be resilient against off-by one line issues between architectures.  This is a common issue on both native and managed code.",
                                           "updatedAt":  "2020-12-10T00:08:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjE0NTYzMA==",
                                           "createdAt":  "2020-12-10T00:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBZf1fA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2020-12-10T04:05:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-12-10T04:08:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "safern",
                                           "body":  "@tommcdon the test is disabled, should we keep the issue opened until we add that resiliency and we re-enable the test? ",
                                           "updatedAt":  "2020-12-10T00:15:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40980q",
                                           "createdAt":  "2021-07-28T22:12:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "This is just a test issue, moving to future.",
                                           "updatedAt":  "2021-07-28T22:12:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k19wO",
                                           "createdAt":  "2023-08-24T15:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "Linking the following customer reported issue to this issue: https://developercommunity.visualstudio.com/t/NET-SDK-on-Ubuntu-18046-libnethosta-/10269507",
                                           "updatedAt":  "2023-08-24T15:10:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k2K8x",
                                           "createdAt":  "2023-08-24T15:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEsN5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffschwMSFT",
                                                                               "createdAt":  "2023-08-24T15:48:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@jeffschwMSFT This does not look like the right issue.",
                                           "updatedAt":  "2023-08-24T15:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k2SBh",
                                           "createdAt":  "2023-08-24T15:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "I will create a new one ;)\r\n",
                                           "updatedAt":  "2023-08-24T15:48:48Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod failing on arm64",
        "labels":  [
                       "disabled-test",
                       "area-ExceptionHandling-coreclr",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38904",
        "createdAt":  "2020-07-08T01:53:53Z",
        "number":  38904,
        "author":  "benaadams",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9v9Zw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "itn3000",
                                            "createdAt":  "2020-07-08T02:07:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ufcpp",
                                            "createdAt":  "2020-07-08T02:58:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alefranz",
                                            "createdAt":  "2020-07-08T07:26:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2020-07-08T08:10:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tor4kichi",
                                            "createdAt":  "2020-07-08T08:32:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SIkebe",
                                            "createdAt":  "2020-07-08T11:41:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neuecc",
                                            "createdAt":  "2020-07-08T12:09:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduardobr",
                                            "createdAt":  "2020-07-09T11:13:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidbozo",
                                            "createdAt":  "2021-04-22T10:27:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kzaabox",
                                            "createdAt":  "2021-04-30T14:04:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-10-21T06:36:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-11-03T06:06:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2024-12-27T17:40:58Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2023-06-23T20:34:32Z",
        "body":  "Throwing and catching an exception isn\u0027t the cheapest of operations; which has been mentioned as a separate issue https://github.com/dotnet/runtime/issues/12892#issuecomment-532757367\r\n\r\nHowever the way async propagates a thrown exception (or cancellation, which is via exceptions), is a chain of try/catch/throws; so the cost of an exception is multiplied by the number of `await`s in the chain.\r\n\r\nCould the propagation of exceptions in the common pattern of a chain of await -\u003e await -\u003e await be more efficient (avoiding the rethrow and catch step) to reduce this multiplication factor?\r\n\r\nI\u0027m mostly thinking for the simpler case where they flow directly(ish) into the next Task and then also fault or cancel that.\r\n\r\ne.g. have the exception passed through the awaiter/asyncmethodbuilder mechanism and stamped with the next bit of stack rather than invoking the full exception handling machinery \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORuHjlA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTIzMzEwMQ==",
                                           "createdAt":  "2020-07-08T01:53:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-08T01:53:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Z2Wc",
                                           "createdAt":  "2021-10-19T01:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "Related: https://github.com/dotnet/csharplang/issues/4565, and https://github.com/dotnet/roslyn/issues/65863",
                                           "updatedAt":  "2023-03-14T00:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G4eOU",
                                           "createdAt":  "2022-07-19T15:37:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "related to some experimentation for 8. ",
                                           "updatedAt":  "2022-07-19T15:37:37Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Improve chained async exception/cancellation propagation",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40302",
        "createdAt":  "2020-08-04T07:05:35Z",
        "number":  40302,
        "author":  "YairHalberstadt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8QP3g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2020-08-04T10:29:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2020-08-25T21:42:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VBAndCs",
                                            "createdAt":  "2021-12-24T09:32:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-12-24T12:28:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vyshkant",
                                            "createdAt":  "2022-02-21T23:46:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2022-12-05T14:03:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johndkane",
                                            "createdAt":  "2022-12-11T19:36:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MBaetti",
                                            "createdAt":  "2024-10-11T12:08:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ellpeck",
                                            "createdAt":  "2024-10-29T19:41:48Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2022-01-03T19:44:56Z",
        "body":  "## Background and Motivation\r\n\r\nIt\u0027s impossible to catch a StackOverflowException. This means that when a unit test throws one the unit testing framework just crashes. No other tests run, and it\u0027s very difficult to find out why the process crashed and on which tests - you need to go through the logs to work it out, and sometimes they don\u0027t even provide that information.\r\n\r\nStack Overflows are pretty common in unit tests, especially whilst in the process of writing recursive algorithms, and so it would be convenient if there was some way for a unit testing framework to say: \"I know the risk, but let me catch this stack overflow exception anyway\".\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO9I4XA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODQ0NzYwNg==",
                                           "createdAt":  "2020-08-04T08:04:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxDT6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johndkane",
                                                                               "createdAt":  "2022-12-11T19:37:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "Related: (Possibly duplicate of) https://github.com/dotnet/runtime/issues/4113 https://github.com/dotnet/runtime/issues/9183\r\n\r\nI think providing the capability could be nice, but the problem I see is basically what @jkotas mentioned in the other issue https://github.com/dotnet/runtime/issues/9183#issuecomment-339204775 - That, there might not be enough stack space left for the handler to run, which would cause another stack overflow exception and end up crashing the same way.\r\n\r\nIMO, a better approach would be to run the tests in an isolated environment of some sort (e.g. other process) and let them talk via IPC, instead of running the test on the process that the testing framework itself runs on. This way, if the process crashes, the testing framework can notice and report the problem instead of crashing with the tests. Not only that this makes it resilient against `StackOverflowException`s, this also benefits certain other scenarios such as `AccessViolationException`/`ExecutionEngineException` which cannot be caught just like `StackOverflowException` (and is much more harder situation to handle).",
                                           "updatedAt":  "2020-08-04T08:07:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTI4MjQ0OQ==",
                                           "createdAt":  "2020-08-05T16:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPtMbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2020-11-25T23:41:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyshkant",
                                                                               "createdAt":  "2022-02-21T23:48:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I believe it would contort the runtime code if we were to attempt to make these exceptions catchable.\n\nWhat if we could instead invest in making the error message more diagnosable? I think StackOverfowException now always includes the relevant stack trace, but if there are scenarios where it\u0027s not present we could try to make those a bit better. Same with AccessViolationException: maybe we could report the full stack trace along with the memory address that triggered the AV.",
                                           "updatedAt":  "2020-08-05T16:05:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTMwMzMwOQ==",
                                           "createdAt":  "2020-08-05T16:43:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMgaTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YairHalberstadt",
                                                                               "createdAt":  "2020-08-05T16:55:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "I think the logs do have enough info (e.g. stack trace for both AVE/Stack Overflow) for diagnosis, it\u0027s just that certain toolings don\u0027t expect things to just crash without reporting and is unintuitive in such situations\r\n\r\nFor example, if the test process crashes with uncatchable exceptions, VS Test Explorer doesn\u0027t quite indicate that; instead of indicating that the test failed they appear as \u0027not run\u0027. There\u0027s this small notification at the bottom of VS but it\u0027s not as noticeable as something like a proper pop-up, like the one on build failure.\r\n \r\n![image](https://user-images.githubusercontent.com/42944058/89437394-7b258c00-d782-11ea-8170-fb7ee52f7b1a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/42944058/89437238-49142a00-d782-11ea-9682-281379dd6981.png)\r\n\r\nIf one decides to take a look at the test log, then you might be able to figure out it\u0027s an AVE thrown from the test method.\r\n\r\n\u003cdetails\u003e\u003csummary\u003eExample log: AVE\u003c/summary\u003e\r\n\r\n```\r\nLog level is set to Informational (Default).\r\nTest data store opened in 0.015 sec.\r\nBuild failed or it was cancelled.\r\n---------- Starting test discovery for requested test run ----------\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.2+2d84eb3141 (64-bit .NET 5.0.0-rc.1.20401.1)\r\n[xUnit.net 00:00:01.38]   Discovering: XUnitTestProject3\r\n[xUnit.net 00:00:01.41]   Discovered:  XUnitTestProject3\r\n========== Test discovery finished: 2 Tests found in 2.8 sec ==========\r\n---------- Starting test run ----------\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.2+2d84eb3141 (64-bit .NET 5.0.0-rc.1.20401.1)\r\n[xUnit.net 00:00:00.29]   Starting:    XUnitTestProject3\r\n활성 테스트 실행이 중단되었습니다. 이유: 테스트 호스트 프로세스 작동이 중단됨 : Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at XUnitTestProject3.UnitTest1.ThrowsAve()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cInvokeTestMethodAsync\u003eb__1()\r\n   at Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cAggregateAsync\u003ed__4 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cAggregateAsync\u003ed__4 ByRef)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cInvokeTestMethodAsync\u003eb__0()\r\n   at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__9 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__9 ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\n   at Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cRunAsync\u003eb__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.Decimal\u003e\u003e)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.TestRunner`1+\u003c\u003ec__DisplayClass43_0[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cRunAsync\u003eb__0()\r\n   at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`\r\n========== Test run aborted: 0 Tests run in 3.2 sec (0 Passed, 0 Failed, 0 Skipped) ==========\r\n\r\n```\r\n\r\n\u003c/details\u003e\r\n\u003cdetails\u003e\u003csummary\u003eExample log: Stack Overflow (didn\u0027t know it actually counts which method recursed for how many times!)\u003c/summary\u003e\r\n\r\n```\r\n---------- Starting test run ----------\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.2+2d84eb3141 (64-bit .NET 5.0.0-rc.1.20401.1)\r\n[xUnit.net 00:00:00.29]   Starting:    XUnitTestProject3\r\n활성 테스트 실행이 중단되었습니다. 이유: 테스트 호스트 프로세스 작동이 중단됨 : Stack overflow.\r\nRepeat 32049 times:\r\n--------------------------------\r\n   at XUnitTestProject3.UnitTest1.StackOverflows()\r\n--------------------------------\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cInvokeTestMethodAsync\u003eb__1()\r\n   at Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cAggregateAsync\u003ed__4 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cAggregateAsync\u003ed__4 ByRef)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cInvokeTestMethodAsync\u003eb__0()\r\n   at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__9 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__9 ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\n   at Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cRunAsync\u003eb__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.Decimal\u003e\u003e)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.TestRunner`1+\u003c\u003ec__DisplayClass43_0[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].\u003cRunAsync\u003eb__0()\r\n   at Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreL\r\n========== Test run aborted: 0 Tests run in 19.8 sec (0 Passed, 0 Failed, 0 Skipped) ==========\r\n\r\n\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\nStill, it\u0027s not immediately visible and I wish it could be improved by showing that it failed clearly, and telling which particular test it failed in. But then, I suppose it might be hard to diagnose this without being able to communicate with the test host process... allowing processes to catch those exceptions may make it possible to report enough data for the report before it `FailFast`s.\r\n\r\nHowever, I agree with @​GrabYourPitchfork that it\u0027s just too dangerous to let people catch those unrecoverable exceptions and IMO even if we allowed it to be catchable it\u0027ll be too flaky of an environment to take any of these actions reliably. (e.g. it\u0027d be incredibly hard to write code that can do those clean-ups in the same process, without allocating more memory on the heap / without using more stack space / in possibly corrupted environment due to access violations).",
                                           "updatedAt":  "2020-08-05T17:03:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTMxMjc0MA==",
                                           "createdAt":  "2020-08-05T17:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "Filed https://developercommunity.visualstudio.com/idea/1137440/make-vs-test-explorer-report-clearer-messages-when.html for the VS test explorer issue.\r\n\r\nI\u0027m not exactly sure what happens with something like `dotnet test`, but since they use the same VSTest as the base I wouldn\u0027t be  surprised if it does the same with unexpected crashes of the test host...",
                                           "updatedAt":  "2020-08-05T17:02:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTU2OTE4Mg==",
                                           "createdAt":  "2020-08-05T22:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPtMpA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T17:44:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VBAndCs",
                                                                               "createdAt":  "2021-12-24T11:12:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyshkant",
                                                                               "createdAt":  "2022-02-21T23:48:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Off-the-wall brainstorming idea. Haven\u0027t thought about how feasible this might be.\r\n\r\nAllow registering a global \"stack overflow occurred\" handler. If any thread encounters a stack overflow, the runtime will suspend that thread, and _on another thread_ invoke any registered `StackOverflowOccurredHandler`, passing as an argument the `System.Threading.Thread` corresponding to the thread that triggered the exception. They can inspect the thread object, capturing things like the call stack (how?) or logging information to disk. Then once the handlers have finished executing, the runtime terminates in the usual fashion.",
                                           "updatedAt":  "2020-08-05T22:42:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTU5MzE1Nw==",
                                           "createdAt":  "2020-08-05T23:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMiy8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2020-08-05T23:22:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This may work if the stackoverflow happens while executing managed code itself. It does not work reliably for stackoverflows that happen inside the unmanaged runtime or unmanaged libraries. For example, the runtime or OS library may have lock taken (e.g. `malloc` lock) that will prevent everything else in the process from making process.",
                                           "updatedAt":  "2020-08-05T23:17:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTU5NzE0NA==",
                                           "createdAt":  "2020-08-05T23:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "Could be a viable option if we could make it super clear that it\u0027s for logging / clean-up situations only, then it probably would unblock the scenario for (managed) StackOverflowException I suppose. How about also providing something like a `StackTrace` object of that particular thread?\r\n\r\nRE: deadlock - Just a thought, what if we impose some sort of time limit on it so it won\u0027t just stay deadlocked? probably not the best idea though.\r\n\r\nI somewhat wished there\u0027s more of a general purpose mechanism for allowing unrecoverable exceptions to be logged though. This approach seems only applicable to StackOverflowException. But then again, there might be no silver bullet for all of them...",
                                           "updatedAt":  "2020-08-05T23:31:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTQ0OTMyNA==",
                                           "createdAt":  "2020-11-18T05:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXtNqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-23T17:46:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "What if we only allowed the exception to be caught if it was taken in managed code?  A stack overflow in native code is obviously fatal.\r\n\r\nBy using stack probes, we can ensure that when the `StackOverflowException` is thrown, we at least have enough stack space to throw the exception.\r\n\r\nEdit: A stack overflow in native code is fatal *if the native code is not expecting it*.  “native code” from .NET’s perspective could very well be a JVM!  If an exception is not one .NET is expecting, it should pass it on to the previous handler, if any.",
                                           "updatedAt":  "2021-12-24T13:00:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjMyMDgyOA==",
                                           "createdAt":  "2020-11-23T17:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e By using stack probes, we can ensure that when the `StackOverflowException` is thrown, we at least have enough stack space to throw the exception.\r\n\r\nWhy do we need to express fatal situations by Exceptions at all?",
                                           "updatedAt":  "2020-11-23T17:47:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47pvYW",
                                           "createdAt":  "2021-12-24T11:15:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VBAndCs",
                                           "body":  "How does vs.net discover SOF exception at debug time and highlight the line that caused it?\r\nIn test project, ruining the test crashes the test host but debugging it beaks at the line that caused the SOF.\r\nCan the test host do something like this?.. may be run tests in another process and monitor it to report the failure?\r\n",
                                           "updatedAt":  "2021-12-24T11:15:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47p3W_",
                                           "createdAt":  "2021-12-24T13:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "\u003e \u003e By using stack probes, we can ensure that when the `StackOverflowException` is thrown, we at least have enough stack space to throw the exception.\r\n\u003e \r\n\u003e Why do we need to express fatal situations by Exceptions at all?\r\n\r\nSo that they can be caught.",
                                           "updatedAt":  "2021-12-24T13:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47p5bk",
                                           "createdAt":  "2021-12-24T13:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Another important scenario is a production error (possibly leading to an outage). Here, we need to resolve the outage as quickly as possible and then fix the issue. Making the exception catchable in an opt-in \"emergency mode\" seems like a great solution. This would make the usual catch-all error logging work again. Most apps have that.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-12-24T13:24:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qT7z",
                                           "createdAt":  "2021-12-24T23:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VBAndCs",
                                           "body":  "@CyrusNajmabadi \r\nThere are some ideas here. What do you think.\r\nAnd here is another one:\r\nWhen a function calls itself for the first time, record the memory size avaliable in the stack, repeat the same for the second call, and hence get the minimal size needed per call, hence calculate the max allowed recursive calls (mc), and throw the Stack overflow at (95.0 * mc), so, there is still a room left to handle the exception. \r\nOf course the 95.0 ratio is an istimation and can be adjusted in pratical testing.",
                                           "updatedAt":  "2021-12-24T23:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qsGg",
                                           "createdAt":  "2021-12-25T17:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "I have made related proposal which assumes possibility to catch SOF, ThreadAbort etc https://github.com/dotnet/runtime/issues/45256\r\n\r\n\r\n\r\n\u003e @CyrusNajmabadi There are some ideas here. \r\n\r\nWe had similar discussion in another post. When we catch NullReferenceException there is no guarantee that another NullReferenceException will not be thrown from the catch block. Same is for every other exception. So here is the question, why do we want special behavior for SOF? Why do we want guarantee catch execution specifically for SOF exception? May be stack has been already unwound and has some space, may be no. What is so special about SOF? Or do we need space to evaluate catch blocks on the way?",
                                           "updatedAt":  "2021-12-25T17:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qvKc",
                                           "createdAt":  "2021-12-25T18:37:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Making the exception catchable in an opt-in \"emergency mode\" seems like a great solution.\r\n\r\nI disagree.  Things are likely entirely corrupt and will likely do more damage of they proceed.  If you need to function in the face of catastrophic circumstances, then you can design your system to have a watchdog that can see when your main process dies and can take corrective action *external* to that process. ",
                                           "updatedAt":  "2021-12-25T18:37:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47rccH",
                                           "createdAt":  "2021-12-26T21:33:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e Making the exception catchable in an opt-in \"emergency mode\" seems like a great solution.\r\n\u003e \r\n\u003e I disagree. Things are likely entirely corrupt and will likely do more damage of they proceed.\r\n\r\nThis is also true about any exception in general.\r\n",
                                           "updatedAt":  "2021-12-26T21:33:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47rlv-",
                                           "createdAt":  "2021-12-27T01:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH6ntQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2021-12-27T01:38:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e This is also true about any exception in general.\r\n\r\nI don\u0027t believe this to be the case at all.  ",
                                           "updatedAt":  "2021-12-27T01:35:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zAJB",
                                           "createdAt":  "2021-12-31T00:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e This is also true about any exception in general.\r\n\u003e \r\n\u003e I don\u0027t believe this to be the case at all.\r\n\r\nThis is not like religion to believe in, it can be logically proven.\r\nProgram execution over undetermined state (which the exception signals about) comes to corrupted data in general case.\r\nFor example, like this \r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            double sumOfSquaredNumbers = 0;\r\n            \r\n            for (int i = 0; i \u003c 3; i++)\r\n            {\r\n                try\r\n                {\r\n                    sumOfSquaredNumbers += XSquaredCalculator.Calculate(i);\r\n                }\r\n                catch {}\r\n            }\r\n            \r\n            Console.WriteLine($\"Sum of first 5 digits squared is {sumOfSquaredNumbers}\");\r\n        }\r\n    }\r\n\r\n    public static class XSquaredCalculator\r\n    {\r\n        static XSquaredCalculator()\r\n        {\r\n            throw new InvalidOperationException(\"Random exception for data corruption\");\r\n        }\r\n\r\n        public static double Calculate(double x)\r\n        {\r\n            return x * x;\r\n        }\r\n    }\r\n```",
                                           "updatedAt":  "2021-12-31T00:48:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zBZl",
                                           "createdAt":  "2021-12-31T01:09:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e which the exception signals about\r\n\r\nI don\u0027t believe this to be the case at all.\r\n\r\nYou may be talking about a certain class of exceptions.  But it\u0027s definitely not inherent to exceptions (or how they\u0027re commonly utilized).",
                                           "updatedAt":  "2021-12-31T01:09:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zppj",
                                           "createdAt":  "2021-12-31T15:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e which the exception signals about\r\n\u003e \r\n\u003e I don\u0027t believe this to be the case at all.\r\n\u003e \r\n\u003e You may be talking about a certain class of exceptions. But it\u0027s definitely not inherent to exceptions (or how they\u0027re commonly utilized).\r\n\r\nI made the case more obvious, with also the case of particular exception we recognize. It shows there is no difference between SOF and any other random exception\r\n\r\n```\r\npublic void ChargeComission(decimal comission)\r\n        {\r\n            decimal balance = 0;\r\n\r\n            try\r\n            {\r\n                balance = GetBalance();\r\n            }\r\n            catch (ZeroBalanceException)\r\n            {\r\n                // this is particular exception which assumes we should use 0 for the balance\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                // It does not matter whether e is StackOverflowException or NullReferenceException\r\n                // or IndexOutOfRangeException or ThreadAbortException, state is broken\r\n                // and commenting out \"throw\" leads\r\n                // to further data corruption\r\n                throw;\r\n            }\r\n\r\n            balance -= comission;\r\n\r\n            UpdateBalance(balance);\r\n        }\r\n```",
                                           "updatedAt":  "2021-12-31T15:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zqv7",
                                           "createdAt":  "2021-12-31T15:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e I made the case more obvious, with also the case of particular exception we recognize. It shows there is no difference between SOF and any other random exception\r\n\r\nThere is absolutely a difference.  Take something as basic as `OperationCanceledException`.  It is not true that \"Things are likely entirely corrupt and will likely do more damage of they proceed.\"\r\n\r\nIndeed, if that were the case, programming with TPL would be nigh-on impossible. ",
                                           "updatedAt":  "2021-12-31T15:22:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47ztUt",
                                           "createdAt":  "2021-12-31T16:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e There is absolutely a difference. Take something as basic as `OperationCanceledException`. It is not true that \"Things are likely entirely corrupt and will likely do more damage of they proceed.\"\r\n\u003e \r\n\u003e Indeed, if that were the case, programming with TPL would be nigh-on impossible.\r\n\r\nWhat I said is true about OperactionCancelledException as well. The issue is with \"likely\" or \"not likely\". In general case it gets corrupted even if it\u0027s not likely to.\r\nTPL is a good example of things getting corrupted. Because of TPL, exceptions like ThreadAbortException can not work normally. While ThreadAbortException got special behavior at some point, customer defined exceptions, like CustomThreadAbortException or for instance BreakSchedulerLoopException still do not work.\r\nMore simple case is BackgroundService (which is based on TPL) completely looses exceptions.\r\n\r\nThe issue is even described at https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\r\n\r\n\u003e Don\u0027t catch an exception unless you can handle it and leave the application in a known state. If you catch System.Exception, rethrow it using the throw keyword at the end of the catch block.\r\n\r\nBecause how TPL swallows all random exceptions several things got broken right within .NET itself. While customer defined broken stuff we can not count.\r\nAssumption that some random exceptions are less important than SOF does not have any math under it.",
                                           "updatedAt":  "2021-12-31T16:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zw5E",
                                           "createdAt":  "2021-12-31T17:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e What I said is true about OperactionCancelledException as well. The issue is with \"likely\" or \"not likely\".\r\n\r\nThis is incorrect. And, again, of this were the case tpl programming would just not be possible. \r\n\r\nIn Roslyn itself there are likely hundreds (or more) cancellation exceptions per second. If those could corrupt state you\u0027d be screwed immediately. ",
                                           "updatedAt":  "2021-12-31T17:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zw8Z",
                                           "createdAt":  "2021-12-31T17:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Don\u0027t catch an exception unless you can handle it and leave the application in a known state.\r\n\r\nCorrect. Which clearly indicates that it\u0027s possible to deal with exceptions safely when appropriate. Entire apis and programming models are designed around this. I\u0027m not sure what else to tell you about this. ",
                                           "updatedAt":  "2021-12-31T17:44:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470bjD",
                                           "createdAt":  "2022-01-01T18:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e Correct. Which clearly indicates that it\u0027s possible to deal with exceptions safely when appropriate. Entire apis and programming models are designed around this. I\u0027m not sure what else to tell you about this.\r\n\r\nIt does not declare special rules for some exceptions. Catching SOF is same bad/good as anything else:\r\n```\r\n            foreach (var job in jobs)\r\n            {\r\n                try\r\n                {\r\n                    job.Execute();\r\n                }\r\n                catch (StackOverflowException)\r\n                {//this catch can be ommited\r\n                    Console.WriteLine($\"SOF happened during execution of {job.Id}\");\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    Console.WriteLine($\"Exception happened during execution of {job.Id}\");\r\n                }\r\n            }\r\n\r\n```",
                                           "updatedAt":  "2022-01-01T18:49:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470cK0",
                                           "createdAt":  "2022-01-01T19:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e It does not declare special rules for some exceptions. \r\n\r\n@jinek I don\u0027t know what to tell you.  Catching exceptions is absolutely part and parcel of correct .net programming.  This is simply not true:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/147858179-56f90475-1482-41cc-8bf2-a60e3a30b642.png)\r\n\r\nAre there exceptions you should not catch?  Absolutely.  But your claim above is just incorrect, and there is ample code (written by us on runtime, roslyn, etc.) that demonstrates the appropriate and necessity of this.  As i\u0027ve already pointed out, full frameworks are designed and documented with this being a core principal.\r\n\r\n\u003e Catching SOF is same bad/good as anything else:\r\n\r\nThis is not true.  And you keep repeating it without actually addressing the points that show it to not be true.  Catching SOF is not at all similar to catching \"anything else\".  For example, catching OperationCanceledException or TimeoutException are entirely different and not at all in teh same category as SOF.",
                                           "updatedAt":  "2022-01-01T19:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470cg9",
                                           "createdAt":  "2022-01-01T19:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e For example, catching OperationCanceledException or TimeoutException are entirely different and not at all in teh same category as SOF.\r\n\r\nSo what is the difference?",
                                           "updatedAt":  "2022-01-01T19:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dBU",
                                           "createdAt":  "2022-01-01T19:28:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e It does not declare special rules for some exceptions.\r\n\u003e \r\n\u003e @jinek I don\u0027t know what to tell you. Catching exceptions is absolutely part and parcel of correct .net programming. This is simply not true:\r\n\u003e \r\n\u003e ![image](https://user-images.githubusercontent.com/4564579/147858179-56f90475-1482-41cc-8bf2-a60e3a30b642.png)\r\n\u003e \r\n\u003e Are there exceptions you should not catch? Absolutely. But your claim above is just incorrect, and there is ample code (written by us on runtime, roslyn, etc.) that demonstrates the appropriate and necessity of this. As i\u0027ve already pointed out, full frameworks are designed and documented with this being a core principal.\r\n\r\nThere was a statement:\r\n\u003e Another important scenario is a production error (possibly leading to an outage). Here, we need to resolve the outage as quickly as possible and then fix the issue. Making the exception catchable in an opt-in \"emergency mode\" seems like a great solution. This would make the usual catch-all error logging work again. Most apps have that.\r\n\r\nWhich I understand as \r\n\r\n```\r\nforeach (var job in jobs)\r\n            {\r\n                try\r\n                {\r\n                    job.Execute();\r\n                }                \r\n                catch (Exception e)\r\n                {\r\n                    _logger.LogException(e);\r\n                }\r\n            }\r\n```\r\n\r\nIf jobs access shared resource, same time each job depends on previous jobs executions, then swallowed random exception from one of the job in general means that shared data will get corrupted by following jobs execution. I gave example which counts the sum. Sum value will be corrupted if we just catch and log the exception.",
                                           "updatedAt":  "2022-01-01T19:28:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dF_",
                                           "createdAt":  "2022-01-01T19:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e \u003e There was a statement:\r\n\u003e\r\n\u003e Another important scenario is a production error (possibly leading to an outage). Here, we need to resolve the outage as quickly as possible and then fix the issue. Making the exception catchable in an opt-in \"emergency mode\" seems like a great solution. This would make the usual catch-all error logging work again. Most apps have that.\r\n\r\n@jinek as i mentioned about that:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/147858646-326e377a-0ad5-4605-a61d-13f1947dd998.png)\r\n\r\n",
                                           "updatedAt":  "2022-01-01T19:31:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dJA",
                                           "createdAt":  "2022-01-01T19:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e So what is the difference?\r\n\r\nOne is not likely to leave the programming logic in a correct state, the others are.  That\u0027s the point :)\r\n\r\nThings like timeout and cancellation are part of the *normal* control flow around program logic.  they are expected, accepted, and part and parcel of interacting with many APIs.  Indeed, for these types of exceptions, it\u0027s the supported way for an external consumer get appropriate signals from an API they\u0027re working with (and there are other cases as well).\r\n\r\nYou can def argue that perhaps it would have been better if .net not conflated these sort of correct-control flow  with \u0027exceptions\u0027.  But here we are.",
                                           "updatedAt":  "2022-01-01T19:34:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dLf",
                                           "createdAt":  "2022-01-01T19:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e So what is the difference?\r\n\u003e \r\n\u003e One is not likely to leave the programming logic in a correct state, the others are. That\u0027s the point :)\r\n\r\nCould you please elaborate this point? why `catch(NullReferenceException)` likely to leave the correct state, but `catch(SOF)` is not?",
                                           "updatedAt":  "2022-01-01T19:34:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dM_",
                                           "createdAt":  "2022-01-01T19:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Could you please elaborate this point? why catch(NullReferenceException) likely to leave the correct state,\r\n\r\nI never said it would.  I think you\u0027re arguing against a misunderstanding about what was written.\r\n\r\nYou made a claim \"about any exception\".  I pointed out that that is not true.  You showing it is true for some class of exceptions doesn\u0027t make it true for \"any exception\".  \r\n\r\nIn other words.  You made a universal claim.  To disprove it, i only need to show simple examples where it it not true.  For you to prove it, you need to show it\u0027s true for *all* cases.  Showing that it\u0027s true for some (which i agree with) is not sufficient :)",
                                           "updatedAt":  "2022-01-01T19:37:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dSk",
                                           "createdAt":  "2022-01-01T19:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e One is not likely to leave the programming logic in a correct state, the others are. That\u0027s the point :)\r\n\u003e \r\n\u003e Things like timeout and cancellation are part of the _normal_ control flow around program logic. they are expected, accepted, and part and parcel of interacting with many APIs. Indeed, for these types of exceptions, it\u0027s the supported way for an external consumer get appropriate signals from an API they\u0027re working with (and there are other cases as well).\r\n\u003e \r\n\u003e You can def argue that perhaps it would have been better if .net not conflated these sort of correct-control flow with \u0027exceptions\u0027. But here we are.\r\n\r\nIf I call `plugin.ApplyFilter(picture)` I don\u0027t expect OperationCancelledException and it\u0027s not part of the flow, but I would expect SOF or OOM. I really don\u0027t understand how you draw the line what is normal and what is not. Again I don\u0027t understand what is so special about SOF. What exactly makes it so \"likely\" to corrupt the data?",
                                           "updatedAt":  "2022-01-01T19:39:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dV4",
                                           "createdAt":  "2022-01-01T19:41:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e I really don\u0027t understand how you draw the line what is normal and what is not. \r\n\r\nIn general, what APIs (and general coding patterns define).  Plus, just some common sense :)   If TimeoutException corrupted state, literally no code with timeouts would be possible in .Net without rampant instability.  Same with cancellation.",
                                           "updatedAt":  "2022-01-01T19:41:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dV-",
                                           "createdAt":  "2022-01-01T19:41:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e What exactly makes it so \"likely\" to corrupt the data?\r\n\r\nThat the ecosystem rarely, if ever, properly handles it.  It\u0027s particular difficult to handle properly as the runtime may be in a state where it cannot run the basic code you want to \u0027handle it\u0027 in the first place.",
                                           "updatedAt":  "2022-01-01T19:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470ddK",
                                           "createdAt":  "2022-01-01T19:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e  but I would expect SOF \r\n\r\nWhy would you expect SOF here?  What would you even do in that case?  Are you even in a hosted environment where you can catch it?  We haven\u0027t allowed it to even be caught in more than a decade in normal .Net environments.  ",
                                           "updatedAt":  "2022-01-01T19:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470dpJ",
                                           "createdAt":  "2022-01-01T19:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "Note: SOF and OOM are really in that *very* special category as it\u0027s not only the case taht teh *user\u0027s* code will likely not be able to handle either properly, but it\u0027s also the case that the *runtime* will likely not be in a state where it can proceed.  Say the runtime needs to run some code.  How can it?  there\u0027s no stack available. Say it needs to jit some code?  How can it if there\u0027s no memory available?  etc. etc.\r\n\r\nNote: this is why we distinguish OutOfMemoryException vs [InsufficientMemoryException](https://docs.microsoft.com/en-us/dotnet/api/system.insufficientmemoryexception?view=net-6.0#remarks).  There we state explicitly:\r\n\r\n\u003e Unlike OutOfMemoryException, InsufficientMemoryException is thrown before starting an operation, and thus does not imply state corruption. An application can catch this exception, throttle back its memory usage, and avoid actual out of memory conditions and their potential for corrupting program state.\r\n\r\nWhereas OOM says this explicitly:\r\n\r\n\u003e This type of OutOfMemoryException exception represents a catastrophic failure. If you choose to handle the exception, you should include a catch block that calls the Environment.FailFast method to terminate your app and add an entry to the system event log, as the following example does.",
                                           "updatedAt":  "2022-01-01T20:01:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470fAZ",
                                           "createdAt":  "2022-01-01T20:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e Note: SOF and OOM are really in that _very_ special category as it\u0027s not only the case taht teh _user\u0027s_ code will likely not be able to handle either properly, but it\u0027s also the case that the _runtime_ will likely not be in a state where it can proceed. \r\n\r\nCould you please give an example when OOM is not possible to handle correctly?\r\n\r\nI have dealt with OOM all the way with .NET with no issues.\r\n![image](https://user-images.githubusercontent.com/10516222/147859656-1d5f8eff-c61e-4aec-a482-74c0d30c6f58.png)\r\n\r\nAgain, why do you say that user\u0027s code will likely not be able to handle them? I\u0027m trying to figure out what so special happens with SOF or OOM?",
                                           "updatedAt":  "2022-01-01T20:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470fQV",
                                           "createdAt":  "2022-01-01T20:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e but I would expect SOF\r\n\u003e \r\n\u003e Why would you expect SOF here? What would you even do in that case? Are you even in a hosted environment where you can catch it? We haven\u0027t allowed it to even be caught in more than a decade in normal .Net environments.\r\n\r\nFor example, I\u0027m calling a plugin and I know that plugin may have no enough stack to execute the operation. Once we made data to be processed by plugin isolated, we can just warn the user and allow other operations to be processed. The user can reduce the image size and repeat the operation.\r\nRegarding hosted environment, that is the point, why not to make it in normal .NET. I\u0027ve described the situation which assumes normal control flow dealing with SOF or OOM",
                                           "updatedAt":  "2022-01-01T20:44:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470fSi",
                                           "createdAt":  "2022-01-01T20:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Could you please give an example when OOM is not possible to handle correctly?\r\n\r\nImagine the runtime it out of memory.  And you call Console.WriteLine.  And `WriteLine` isn\u0027t even jitted yet.  The runtime cannot allocate memory to even do whatever you want in response to the problem.\r\n\r\n\u003e I have dealt with OOM all the way with .NET with no issues.\r\n\r\nYou are conflating two scenarios.  One is that the runtime actually has memory to proceed after the errant problem, the other is where it does not.  You cannot distinguish that unless using the very special procedure outlined in the docs i listed for InsufficientMemoryException.",
                                           "updatedAt":  "2022-01-01T20:46:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470fUT",
                                           "createdAt":  "2022-01-01T20:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e  we can just warn the user \r\n\r\nHow?  You may literally be out of stack.\r\n\r\n\u003e and allow other operations to be processed\r\n\r\nWhat operations do you know can be processed?  Teh runtime may literally lack *any* resources to do any further processing.\r\n\r\n\u003e I\u0027ve described the situation which assumes normal control flow dealing with SOF or OOM\r\n\r\nNo.  You\u0027ve defined cases which *might* work, or which may go horribly wrong. ",
                                           "updatedAt":  "2022-01-01T20:47:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470fab",
                                           "createdAt":  "2022-01-01T20:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e why not to make it in normal .NET. \r\n\r\nThis was what was tried.  It turns out that in *in general* (not in specialized cases like you are identifying) this cannot be done.  Again, what do you do if you\u0027re literally out of memory and you cannot even JIT the recovery code to execute?  What do you do if you\u0027re literally out of stack and you need to allocate stack space?\r\n\r\nWriting code that could actually behave correctly here *for all the myriad complex cases* turned out to be far too complex for the ecosystem to handle (and was indeed super hard even for MS as a first party to do effectively).  Please look into things like CERs (ConstrainedExecutionRegions) and how this was attempted but ultimately was just not feasible because it\u0027s so complex and challenging to do right for the general case.\r\n\r\nInstead, we have *specialized* cases which *may* work in some very narrowly defined places.  They may even work well enough for certain domains (which can impose additional restrictions on the environment).  But they do not work out in the general case for the simple reasons i gave above. \r\n\r\n--\r\n\r\nAgain, just ask yourself: how can i proceed if the runtime literally does not have the resources it needs to proceed?",
                                           "updatedAt":  "2022-01-01T20:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470fpn",
                                           "createdAt":  "2022-01-01T21:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e Imagine the runtime it out of memory. And you call Console.WriteLine. And `WriteLine` isn\u0027t even jitted yet. The runtime cannot allocate memory to even do whatever you want in response to the problem.\r\n\r\nSame about any exception! Even if you are catching `OperationCancelledException` WriteLine may be have no enough memory to allocate the char array. For any exception there is no guarantee the catch block to be executed. It is exactly same for OOM, is not it?\r\n\r\n\u003e You are conflating two scenarios. One is that the runtime actually has memory to proceed after the errant problem, the other is where it does not. You cannot distinguish that unless using the very special procedure outlined in the docs i listed for InsufficientMemoryException.\r\n\r\nI don\u0027t see any reason why no to unwind the stack to some catch block and not to allow allocate some memory by executing GC. The situation when runtime can not JIT `WriteLine` is possible when executing catch block for any exception, agian. No difference if it is `OperationCancelledException` or OOM or anything else.",
                                           "updatedAt":  "2022-01-01T21:00:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470f9Y",
                                           "createdAt":  "2022-01-01T21:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Even if you are catching OperationCancelledException WriteLine may be have no enough memory to allocate the char array\r\n\r\nThat\u0027s not true.  There\u0027s no relation between OCE and running out of memory (or other resources).\r\n\r\n\u003e For any exception there is no guarantee the catch block to be executed. It is exactly same for OOM, is not it?\r\n\r\nThat is not the case.\r\n\r\n\u003e The situation when runtime can not JIT WriteLine is possible when executing catch block for any exception, agian. \r\n\r\nIt is not.  When encountering OOM, the runtime is already starved on resources (same as SOF).  This is not hte case with something like OCE.  There\u0027s no starvation.  It\u0027s an explicit part of the contracts around TPL on how OCE is used.\r\n\r\n\u003e No difference if it is OperationCancelledException or OOM or anything else.\r\n\r\nI genuinely don\u0027t know what to say at this point.  I\u0027ve linked our docs.  I\u0027ve discussed the history here.  I\u0027ve explained the distinction between exceptions thrown when teh runtime is out of resources (vs when it\u0027s not).  I\u0027ve explained how there are absolutely exceptions that are *designed* into APIs as part of the signalling and control flow mechanisms.\r\n\r\nYou seem to be operating under your own conceptions of how this works.  And no amount of actual docs or explanations seems to be satisfactory for you.  I don\u0027t know what else i can add. \r\n",
                                           "updatedAt":  "2022-01-01T21:05:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470gA3",
                                           "createdAt":  "2022-01-01T21:05:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "I have to ask @jinek are you familiar with the design of the TPL?   If not, i recommend reading this bit: https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-cancellation\r\n\r\nIt is *part of the design* that cancellation (including OCE) is how to properly signal and manage control flow (including try/catch) between components using tasks.",
                                           "updatedAt":  "2022-01-01T21:06:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470gFw",
                                           "createdAt":  "2022-01-01T21:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e How? You may literally be out of stack.\r\n\r\nWith any exception we may be out of stack. Same time I can propose to unwind reserved space and allocate \"user warning\" frame instead.\r\n\r\n\u003e What operations do you know can be processed? Teh runtime may literally lack _any_ resources to do any further processing.\r\n\r\nYou can not ever know any operations to be processed. Even if you catch `PluginException` (which is part of API) it\u0027s still possible that all other operations will fail. May be runtime has no enough resources for some operations, but has for others.\r\n",
                                           "updatedAt":  "2022-01-01T21:06:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470gR_",
                                           "createdAt":  "2022-01-01T21:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e With any exception we may be out of stack. Same time I can propose to unwind reserved space and allocate \"user warning\" frame instead.\r\n\r\nThis was the idea behind ConstrainedExecutionRegions.  However, they are *extremely* difficult to get right, and now are effectively non-grata.\r\n\r\n\u003e You can not ever know any operations to be processed.\r\n\r\nAgain, this is not the case.  And if it were it woudl not be possible to effectively do async processing.  \r\n\r\n\u003e it\u0027s still possible that all other operations will fail. \r\n\r\nYou are conflating issues.  It\u0027s like saying \"you can\u0027t continue if something returns you a value, because the very next step may fail\".  Those are two separate steps.  \r\n\r\nWith things like OCE/Timeout/etc. you absolutely can proceed *and that\u0027s part of the design of .Net*.  I simply do not know how to state it any more plainly.  It would literally not be possible to handle timeout in .net if this were not the case. \r\n\r\nIt would not be possible to do cancellation in .net if this were not the case.  \r\n\r\nAnd yet, both of tehse (and many other cases) are amply doc\u0027ed as being 100% supported and *expected* as the mechanism for how components can interact.  That is what the docs show that i\u0027ve linked you to, and you insisting otherwise serves no purpose except to indicate that you are not willing ot actually read or engage with the things we\u0027ve actually documented and published.",
                                           "updatedAt":  "2022-01-01T21:11:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470gU3",
                                           "createdAt":  "2022-01-01T21:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e May be runtime has no enough resources for some operations, but has for others.\r\n\r\nThat is not relevant to the question of: can you handle *this* issue for things like OCE/Timeout.\r\n\r\nFor things like OOM/SOF.  It *is* very relevant, and it\u0027s precisely why we don\u0027t let you catch the latter and why we doc that catching the former is effectively not stable.  If you\u0027re going to ignore the docs on this, i genuinely just do not know what i can tell you.  ",
                                           "updatedAt":  "2022-01-01T21:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470gXq",
                                           "createdAt":  "2022-01-01T21:13:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@jinek i recommend we take this to discord.gg/csharp.  This conversation has effectively gone in circles and seems to be doing nowhere.  It is clogging this issue explaining the current way .net works (and is not likely to change in).  If you\u0027d like to discuss this more, we can take it there.",
                                           "updatedAt":  "2022-01-01T21:13:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470jhc",
                                           "createdAt":  "2022-01-01T23:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \u003e Even if you are catching OperationCancelledException WriteLine may be have no enough memory to allocate the char array\r\n\u003e \r\n\u003e That\u0027s not true. There\u0027s no relation between OCE and running out of memory (or other resources).\r\n\r\nI don\u0027t know why you think you can expect any given catch block not to throw OOM.\r\nBut as a proof here you can try yourself\r\n![image](https://user-images.githubusercontent.com/10516222/147861906-34cbc95e-750d-4036-915d-ba3d87634c88.png)\r\n\r\n",
                                           "updatedAt":  "2022-01-01T23:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470j_T",
                                           "createdAt":  "2022-01-01T23:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e I don\u0027t know why you think you can expect any given catch block not to throw OOM.\r\n\r\nI never said that.  Furthermore your example proves my point.  The program is a totally fine state after the OCE (which is the normal expected case *as per the TPL* docs).  I don\u0027t know why you keep glossing over this. We have doc\u0027ed this. We have ample experience trying different routes and seeing how it has/hasn\u0027t worked out in practice.  At this point i\u0027m just not certain if you\u0027re even considering or looking at our docs here.  \r\n\r\nLike i said, this isn\u0027t going anywhere.  If you want to keep up with this tangent, take it discord.  Further talking about things that directly contradict our stated docs here will be viewed as off-topic.",
                                           "updatedAt":  "2022-01-01T23:17:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470lo3",
                                           "createdAt":  "2022-01-02T00:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e Like i said, this isn\u0027t going anywhere. If you want to keep up with this tangent, take it discord. Further talking about things that directly contradict our stated docs here will be viewed as off-topic.\r\n\r\nI think we can finish at this point, we stuck on simple false = not true.\r\nWe can switch to one-to-one if you think makes sense. I don\u0027t see a point to discuss it with .NET people exactly because of how framework is already implemented. TPL assumes it\u0027s possible to recover by re-throwing the exception on caller thread, while exception filters just swallow the exception completely. Both will get broken if we make SOF possible to catch (similar to OOM as it is now).",
                                           "updatedAt":  "2022-01-02T00:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470mVT",
                                           "createdAt":  "2022-01-02T00:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e  Both will get broken if we make SOF possible to catch\r\n\r\nI\u0027ve never argued that SOF should be possible to catch.  Please read my posts.  All i said was:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/147863423-f0665d29-252a-4a92-86c9-deb36d3cc38d.png)\r\n\r\nI\u0027ve been clear, this is in the category of errors that are likely just not at all possible to catch safely.  This is based on our actual experience in this realm.  I have maintained this, so I think you\u0027re arguing against something different with me.\r\n\r\n--\r\n\r\n\u003e We can switch to one-to-one if you think makes sense.\r\n\r\nYes please.",
                                           "updatedAt":  "2022-01-02T00:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471L4Q",
                                           "createdAt":  "2022-01-03T00:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I don\u0027t see any reason why no to unwind the stack to some catch block\r\n\r\nAs an aside, when managed exception handling runs, the stack is not unwound yet. In particular, the runtime would need to be able to run exception filters (`catch (X) when (Y)`) before the stack starts getting unwound to run catch blocks. C# kind of forces you to do a method call in the `when` clause if one wants to do anything interesting (and also many things that don\u0027t look like calls are actually calls, like `as` and `is` checks), but since we don\u0027t have stack, it would probably throw stack overflow again.\r\n\r\nCatch blocks associated with filters that throw get silently skipped.\r\n\r\nThe program is in an interesting state at that point.",
                                           "updatedAt":  "2022-01-03T00:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471WVy",
                                           "createdAt":  "2022-01-03T02:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "The standard solution to this in unmanaged code is an alternate signal stack.  Could the code be run on an alternate stack?  Furthermore, test frameworks might well be fine with skipping exception filters.",
                                           "updatedAt":  "2022-01-03T02:42:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471mCb",
                                           "createdAt":  "2022-01-03T07:10:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I have made a list collecting ideas for how to improve the situation.\r\n\r\n- https://github.com/dotnet/runtime/issues/4113#issuecomment-1000837221\r\n\r\nIf I missed something please let me know and I\u0027ll add it.",
                                           "updatedAt":  "2022-01-03T07:10:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473KNZ",
                                           "createdAt":  "2022-01-03T19:44:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e Catch blocks associated with filters that throw get silently skipped.\r\n\u003e \r\n\u003e The program is in an interesting state at that point.\r\n\r\nThat was my point: we need to think to fix this first, because possibility to catch SOF will add randomness to already random behavior (OutOfMemoryException + \"catch when\")",
                                           "updatedAt":  "2022-01-03T19:44:55Z"
                                       }
                                   ],
                         "totalCount":  57
                     },
        "title":  "Provide way for unit testing frameworks to catch StackOverflow exception",
        "labels":  [
                       "api-suggestion",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45256",
        "createdAt":  "2020-11-26T10:21:23Z",
        "number":  45256,
        "author":  "jinek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBYJ_Ow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tkhodzhaev",
                                            "createdAt":  "2020-11-26T10:35:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pavelonline",
                                            "createdAt":  "2020-11-26T16:29:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mm0d",
                                            "createdAt":  "2020-11-26T17:19:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveSenn",
                                            "createdAt":  "2020-11-27T07:26:51Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2021-10-21T12:27:05Z",
        "body":  "## Goal\r\nPrimary goal is the possibility to develop and run programs satisfying fundamental code-analysis quality rule [CA1031](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1031) (I\u0027m offering to define terms CA1031-compliance, CA1031-compliant, CA1031-compatibility, CA1031-policy etc).\r\n\r\nI am proposing to implement two independent features at runtime and/or compilation levels.\r\n\r\n### Briefly on CA1031\r\nThe idea is expressed by [Exceptions and Exception Handling (C# Programming Guide)](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/)\r\n\u003e Do not catch an exception unless you can handle it and leave the application in a known state. If you catch System.Exception, re-throw it using the throw keyword at the end of the catch block.\r\n\r\nFor people who want to only start digging in to the topic here are some resources:\r\n1) [CLR Inside Out - Handling Corrupted State Exceptions](https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/february/clr-inside-out-handling-corrupted-state-exceptions)\r\n1) [Stackoverflow related thread](https://stackoverflow.com/questions/426346/is-this-a-bad-practice-to-catch-a-non-specific-exception-such-as-system-exception)\r\n1) [StackExchange related thread](https://softwareengineering.stackexchange.com/questions/164256/is-catching-general-exceptions-really-a-bad-thing)\r\n1) [CLR via C# by Jeffrey Richter](https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454)\r\n1) Problem definition is placed below in **Problem definition and more background** section\r\n\r\n## Compilation level\r\nCA1031 is supposed to be followed in most cases, but c# and other languages offer opposite by default.  \r\nWe could reverse the default behavior of the catch by introducing new keyword **swallow**:\r\n\r\n    try\r\n    {          \r\n    }\r\n    catch(Exception e) swallow (IOException,SecurityException,WebException)\r\n    {\r\n        Debug.WriteLine(e.GetType()); //can be any type, for example NullReferenceException\r\n        // Following is added by compiler automatically: if (e is not (IOException or SecurityException or WebException)) throw; \r\n    }\r\n\r\nThis feature does not guarantee satisfaction of CA1031, however it reduces the codebase for those who follow CA1031 and helps to start following for those who do not.\r\n\r\nTo fallback to old behavior **LegacyCatchBehaviorAttribute** attribute can be applied to method/class/assembly/build.props.  \r\nBesides, it can be applied by default only to libraries, but not to executables.  \r\n\r\n## Runtime level\r\nWe have already similar solutions in dotnet for **ThreadAbortException**, **StackoverflowException** etc.  \r\nThus, this part is about to extend that special behavior to other scenarios (not only to required by the runtime itself).  \r\nIn order to allow the old behavior this proposal also assumes several runtime modes.\r\n\r\n### Suggested changes\r\n1) Add runtime modes CA1031Compliant (NotCompliant=default, Compliant, Force)\r\n1) Add assembly attribute (+ compile option, project property etc) CA1031Compliant (true/false=default)\r\n1) Compilation of compliant assembly must inject re-throwing code in such a way that Compliant assembly in NotCompliant runtime mode behaves same way as in Compliant runtime mode.\r\n1) Add special rules of runtime Compliant and Force modes:\r\n\r\n    1) Auto-rethrow exceptions from `catch{}`, `catch(Exception){}`, `catch(SystemException){}` and `catch(ApplicationException){}` similar to current implementation of **ThreadAbortException**\r\n    1) Add `Exception.NoRethrow\u003cTException\u003e()` which instructs runtime not to rethrow in current catch block (attempt to use Exception or SystemException or if actual type is not assignable to provided one throws CS1031CompliancyException)\r\n    1) Attempt to call NotCompliant assembly from Compliant one in Compliant runtime mode throws an exception\r\n    \r\n    \r\n1) Define compiler error “Project Xxx can not compile as CA1031-compliant because it references non-compliant assembly Yyy.dll. Either remove the reference or remove CA1031Compliant attribute/option.\r\n\r\nProbably, this makes sense to discuss same time:\r\n1) Possibility to catch multiple exceptions by one catch with `catch(Exception1,Exception2,Exception3 (BaseException)ex){ }`\r\n1) Make constructor of System.Exception protected (same for SystemException and ApplicationException)\r\n1) Remove special behavior of **ThreadAbortException** **StackOverflow** and others in Compliant and Force runtime modes. Deprecate **ResetAbort** as **NoRethrow** does the same (also explicit catch of **ThreadAbortException** should do the same as well). Make **StackOverflowException** internal etc \r\n1) **AppDomain.UnhandledException** should not rethrow exceptions explicitly in Compliant and Force modes, it should be allowed to catch exceptions using `Exception.NoRethrow\u003cTException\u003e()` mentioned above\r\n1) Introduce **AsyncException** for explicit passing the state in async/await scenarios.\r\n1) New operators `async throw exception;` and `async throw;` for easy instantiating the **AsyncException** \r\n\r\n## Problem definition and more background\r\nExceptions in dotnet are surely important and popular way to pass the state among the \"programs\" in the call stack.\r\nIt allows to significantly reduce the codebase and to greatly improve the performance.\r\nSame time, we receive several important requirements where one of them is the codebase to remain generally transparent for the exceptions.  \r\nThis requirement satisfaction is left on developers and very often does not happen due to various reasons.\r\n\r\nFor example, as exceptions in most cases are associated with the fault state, we do not consider other (non-fault) states expressed by exceptions as well.  \r\nAdditionally, very often we do not consider faults which are not even related to the context of our code.\r\n\r\nIn the following example we are assuming that any exception is the result of database connectivity error. \r\n            \r\n        private bool IsDatabaseAccessible()\r\n        {\r\n            try\r\n            {\r\n                _dbConnection.ExecuteProbeRequest();\r\n                return true;\r\n            }\r\n            catch\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\nSame time runtime throws **NullReferenceException** when _dbConnection is null while the host expects to receive it for the error report. It is wrongly recognized as a connectivity issue and there will be no any error report for us.  \r\nAnother example: user requests to throw OperationAbortException which is assumed to hit the catch block of JobManager class upper in the stack. Lets assume that JobManager is responsible to free resources for other jobs.  \r\nWhile the end-user just experiences difficulties to cancel jobs from time to time, this case eventually becomes the divination process for developers.\r\n\r\n[More on the problem](https://duckduckgo.com/?t=ffab\u0026q=why+not+to+catch+all+exceptions+c%23\u0026atb=v227-1\u0026ia=web)\r\n\r\n## Other possible implementations\r\nWith this proposal I would also consider other options. I am sure that the community has plenty of them.\r\n\r\nAs an example, we could extend HandleProcessCorruptedStateExceptionsAttribute technique to make general catch to work only for exceptions marked by same attribute as our method.  \r\nAnother idea could be to analyse the stack trace and determine how much the exception is \"native\" to current or to calling method.  \r\nRelativity and/or reference orders of assemblies could also be considered.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK_Z5xA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDI3NjQ3MA==",
                                           "createdAt":  "2020-11-26T12:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYF-ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jinek",
                                                                               "createdAt":  "2020-11-26T14:14:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "Is your `swallow` keyword any different from exception filters? You can already write this in C# 9:\r\n\r\n```csharp\r\ntry\r\n{          \r\n}\r\ncatch(Exception e) when (e is not (IOException or SecurityException or WebException))\r\n{\r\n    Debug.WriteLine(e.GetType()); //can be any type, for example NullReferenceException\r\n}\r\n```",
                                           "updatedAt":  "2020-11-26T12:41:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDI4MTA1NQ==",
                                           "createdAt":  "2020-11-26T12:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e Is your `swallow` keyword any different from exception filters? You can already write this in C# 9:\r\n\r\nVery different, they can go together:\r\n\r\n```\r\ntry\r\n{          \r\n}\r\ncatch(Exception e) when (e is not (IOException or SecurityException or WebException)) swallow (WebException)\r\n{\r\n    Debug.WriteLine(e.GetType());\r\n    // Following is added by compiler automatically: if (e is not (WebException)) throw;\r\n}\r\n```\r\n\r\nLets say, filters work opposite: when filters not defined - everything is caught. When swallows is not defined - everything is rethrown.\r\n\r\n**when** - means what to catch\r\n**swallow** - means what not to rethrow",
                                           "updatedAt":  "2020-11-26T14:54:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDI4MjM1MA==",
                                           "createdAt":  "2020-11-26T12:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "\u003e **when** - means what to catch\r\n\u003e **swallow** - means what not to rethrow\r\n\r\nGot it. I missed the distinction when I first read it. \r\n",
                                           "updatedAt":  "2020-11-26T12:54:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzU1NzIwNw==",
                                           "createdAt":  "2020-12-02T23:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "What if a program really does want to catch `System.Exception` or even `System.Object`?  I can think of many cases for this:\r\n\r\n- Test harnesses\r\n- User-mode sandboxes (such as Haskell’s [mueval]) that statically analyze code for safety before allowing it to run.\r\n- REPLs, such as F# Interactive\r\n\r\n[mueval]: \u003chttps://hackage.haskell.org/package/mueval\u003e",
                                           "updatedAt":  "2020-12-02T23:26:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzU3MzMxNg==",
                                           "createdAt":  "2020-12-03T00:13:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jinek",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e What if a program really does want to catch `System.Exception` or even `System.Object`? I can think of many cases for this:\r\n\r\nThank you for nice question. You have made me understanding that my initial description is not easy while being short.\r\nBoth Compliant and NonCompliant modes allow to do that, because entry point assembly can be NonCompliant in both modes (but in force mode it will be forced to be compliant).\r\n\r\nThe difference is that in NotCompliant runtime mode you can call:   \r\nNotCompliant entrypoint --------\u003e compliant library ------------\u003e not compliant library  \r\nBut in Compliant runtime mode last call is not possible (while first is):  \r\nNotCompliant entrypoint --------\u003e compliant library ------------\u003e ~~not compliant library~~ (NotCompliantCallException)\r\n\r\nSo, it\u0027s possible to have any catches in any call unless it is called from assembly which is claimed to be compliant. Obviously you are free to compile your entrypoint as not compliant, while having compliant sattelite assemblies",
                                           "updatedAt":  "2020-12-03T00:14:43Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[Proposal] Automatically re-throw exceptions caught as System.Exception, SystemException and ApplicationException",
        "labels":  [
                       "api-suggestion",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51863",
        "createdAt":  "2021-04-26T14:15:13Z",
        "number":  51863,
        "author":  "The-Futurist",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-26T21:18:19Z",
        "body":  "This a suggestion to get some idea of how others see this, if there\u0027s a better repo for this please do let me know.\r\n\r\nVery simply it would be a huge help if the exception base class include a DateTime property that contains the date and time that the exception was thrown by the runtime.\r\n\r\nThere\u0027s no easy way to do this as a consumer of .Net because we\u0027d need to introduce our own new base class (derived from Exception) and then derive all of our exceptions from that, additionally there\u0027s no mechanism, for an exception object to receive a method call when the throw itself executes. Yes one could put the setting of the property in the constructor but that isn\u0027t reliable as some (unusual designs) throw pre-created exceptions that they pull from lookup tables sometimes and so on.\r\n\r\nA common and time consuming problem in production support environments is unexpected exceptions being thrown in code that often may not (for all kinds of reasons including legacy logic or just plain human oversight) and we get sent a stack trace or screenshot of a stacktrace and have to then chase people for date time info, if we get the wrong or misleading date time info it can cost us hours in wasted time.\r\n\r\nIf every exception contained a public get property that was auto populated when the throw statement was executed this problem would almost vanish, the human element of determining the date time thrown would vanish and greatly improve our ability to respond helpfully to production issues, some of which impact customers and require rapid problem solving ability.\r\n\r\nIf we - in a support role - get sent a screenshot for example that contains a stack trace (which is common in fragile ASP.NET web apps and so on) the trace info never reveals anything about the date and time the event occurred this means its very hard to associate the exception with any other event information like possible related log messages, we can\u0027t ask questions like \"did this occur before or after we did X?\" or \"was anything else at all logged by any other app at around the same time?\" and so on.\r\n\r\nIf the \"Exception details\" text that\u0027s present in the stack trace was then augmented to include the date-time this would be always visible to support staff.\r\n\r\ne.g., this is a typical stack trace we might see (this is taken from the web, not from our systems):\r\n\r\n![image](https://user-images.githubusercontent.com/12262952/116100785-1f799680-a662-11eb-83c5-5185ac251a5d.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMUyiEw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjg4NDk5NQ==",
                                           "createdAt":  "2021-04-26T14:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Perhaps you could handle the [AppDomain.FirstChanceException](https://docs.microsoft.com/dotnet/api/system.appdomain.firstchanceexception?view=net-5.0) event and store the time stamp in [Exception.Data](https://docs.microsoft.com/dotnet/api/system.exception.data?view=net-5.0). Although I feel uneasy about how to ensure that the event handler won\u0027t ever throw another exception and cause recursion.",
                                           "updatedAt":  "2021-04-26T14:34:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjk2Nzg1Mw==",
                                           "createdAt":  "2021-04-26T16:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e If the \"Exception details\" text that\u0027s present in the stack trace was then augmented to include the date-time this would be always visible to support staff.\r\n\r\nThis seems to be the crux of the request. In which case, I think this request sound go to asp.net. That said, I think it would not be likely to change that legacy exception handler. Instead, you could swap it that exception handler with your own, which also prints out the datetime at the crash point. ",
                                           "updatedAt":  "2021-04-26T16:12:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjk3OTE5Mg==",
                                           "createdAt":  "2021-04-26T16:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "The-Futurist",
                                           "body":  "\u003e \u003e If the \"Exception details\" text that\u0027s present in the stack trace was then augmented to include the date-time this would be always visible to support staff.\r\n\u003e \r\n\u003e This seems to be the crux of the request. In which case, I think this request sound go to asp.net. That said, I think it would not be likely to change that legacy exception handler. Instead, you could swap it that exception handler with your own, which also prints out the datetime at the crash point.\r\n\r\nThe ASP.NET example was presented as a scenario that comes up fairly often it is not the only use case for this. Catching the timestamp of the throw records the datetime at the point closest to the event. Of course when the exception is caught the timestamp can be created or it can be inferred by looking at a log if the caught exception is logged, in an ideal world this would be enough.\r\n\r\nBut unfortunately many real world systems are far from well engineered and so relying on sound engineering practices for resolving problem is a risk, investigating serious operational problems in these cases can be time consuming and often relies on evidence gathering before creating hypotheses to explain what happened.\r\n\r\nAdditionally logging systems are distinct from the app, they may reside or execute in servers in different locations and time zones and reflect the local time the log request was received unless the originating app intentionally gets and includes the time stamp itself - which becomes unnecessary if every exception always includes the local timestamp pertaining to the throw.\r\n\r\nI recognize that many of these odd problems can in principle be avoided by sound design and engineering principles but unfortunately many real world systems fail to meet such standards for all kinds of reasons.\r\n\r\nBeing assured that every exception always contains the timestamp reflecting when it was thrown locally means we can possibly resolve problems sooner with less information and less reliance on other people, systems or departments.\r\n\r\nI would imagine, that this like any other suggestion, will be evaluated on a cost/benefit basis, I also _imagine_ this is low cost but have not the expertise to really argue that, it is just a perception.\r\n",
                                           "updatedAt":  "2021-04-26T16:34:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjk4NTAzOQ==",
                                           "createdAt":  "2021-04-26T16:38:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "If you have these as different servers in different timezones, you\u0027ll need to translate the info from one server to another. So you still have to do the work to do the timezone management. \r\n\r\nIt\u0027s there a reason you have time zones here at all?  Wouldn\u0027t it make me sense for all your logs to always use utc?",
                                           "updatedAt":  "2021-04-26T16:38:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjk5MTQ4Mg==",
                                           "createdAt":  "2021-04-26T16:48:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "The-Futurist",
                                           "body":  "\u003e If you have these as different servers in different timezones, you\u0027ll need to translate the info from one server to another. So you still have to do the work to do the timezone management.\r\n\u003e \r\n\u003e It\u0027s there a reason you have time zones here at all? Wouldn\u0027t it make me sense for all your logs to always use utc?\r\n\r\nHaving the exception timestamp inside the exception means one can unambiguously log that as a datum no matter what logging systems one has or what time zone a user may be in. Resolving operational problems frequently involves answering the question \"OK when did the user do this?\" or \"OK when did this actually take place?\" or \"Did this arise before or after the evening batch suite started?\" and so on.\r\n\r\nAlso we are concerned with knowing when an exception was thrown not when a logging system received a message and wrote it to the log, in most cases these will be milliseconds apart but there is a window there and in busy systems with huge workloads one can envisage delays perhaps on the seconds or more, in fact without knowing the exception thrown timestamp one could never even detect if there had been a delay in the logging of such an event.\r\n\r\nThe ordering of logged events too can be vital to correct problem diagnosis, in a system where there is a variable and unpredictable delay in logging we will see messages ordered in time of arrival not necessarily in order of time thrown.",
                                           "updatedAt":  "2021-04-26T16:50:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNzA2NTkyNw==",
                                           "createdAt":  "2021-04-26T18:48:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Also we are concerned with knowing when an exception was thrown not when a logging system received a message and wrote it to the log, in most cases these will be milliseconds apart but there is a window there and in busy systems with huge workloads one can envisage delays perhaps on the seconds or more\r\n\r\nThat is true.  But in my own experience hasn\u0027t been an issue.  Furthermore, if milliseconds apart is an issue, you fundamentally are not going to find that this works as your clocks in different regions for all those servers you have are also not going to agree on this stuff.  \r\n\r\nGiven the stack tells you where the exception happened, can you just solve this with a try/catch there that logs and rethrows.  This will give you the timestamp you want, and will allow you to collect any and all other information you need as close to the source to determine what the issue is.",
                                           "updatedAt":  "2021-04-26T18:48:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNzEwNTgxMQ==",
                                           "createdAt":  "2021-04-26T19:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "The-Futurist",
                                           "body":  "\u003e \u003e Also we are concerned with knowing when an exception was thrown not when a logging system received a message and wrote it to the log, in most cases these will be milliseconds apart but there is a window there and in busy systems with huge workloads one can envisage delays perhaps on the seconds or more\r\n\u003e \r\n\u003e That is true. But in my own experience hasn\u0027t been an issue. Furthermore, if milliseconds apart is an issue, you fundamentally are not going to find that this works as your clocks in different regions for all those servers you have are also not going to agree on this stuff.\r\n\u003e \r\n\u003e Given the stack tells you where the exception happened, can you just solve this with a try/catch there that logs and rethrows. This will give you the timestamp you want, and will allow you to collect any and all other information you need as close to the source to determine what the issue is.\r\n\r\nI don\u0027t think delays of milliseconds are a concern and as you say if they are then we\u0027re dealing with a different problem altogether. In reality there can be intervals in the _thousands_ of milliseconds (one, two etc seconds) and this in turn leads to the next concern that the ordering of logged events too can be vital to correct problem diagnosis, in a system where there is a variable and unpredictable delay in logging we will see messages ordered in time of arrival not necessarily in order of time thrown.\r\n\r\nThe question we are ultimately concerned about is when did this occur and not when was this received by a log server, its preferable to eliminate details like logging delays, log server clock settings and time zones completely from the event being logged, these are superfluous and really just a means to end which is - when did this occur and what is the true temporal order of these logged exceptions, recording the exception timestamp at the _source_ (the throw) would seem to be the most helpful starting point.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-04-26T21:18:19Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Suggestion about exceptions",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54448",
        "createdAt":  "2021-06-19T05:11:28Z",
        "number":  54448,
        "author":  "diehell02",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-06T06:10:45Z",
        "body":  "I need to get the call stack when a crash occurs. \r\n\r\nOur project is using C++/CLI to combine C# and C++ code.\r\n\r\nThe exception from C# and C++/CLI， we can use try-catch to get the exception.\r\n\r\nBut the exception from native C++, especially the exception that is considered unrecoverable, or occurs in another thread, like `AccessViolationException`, `StackOverflowException`.\r\n```\r\nint* p = nullptr;\r\n*p = 123;\r\n```\r\n\r\nAnd I also see when the native exception occurs, the console will print this message and then the app crash:\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at \u003cModule\u003e.NativeCppDemo.MyNativeCppTestClass.memberFunctionAddFunCrash(NativeCppDemo.MyNativeCppTestClass*, Int32, Int32)\r\n--------------------------------\r\n   at ClrCrashTestNetCore.ClrTest.memberFunAddCrash(Int32, Int32, Boolean)\r\n   at CsCrashDemoNetCore.Program.Run()\r\n   at CsCrashDemoNetCore.Program.Main(System.String[])\r\n```\r\nThis is the message that I want but I don\u0027t know how to get it in the code. \r\nAnd I found this message when the exception occurs on another thread, it won\u0027t print on the console. \r\n\r\nDo we have any method to get the exception information from native C++? Like has some interface to get the exception? Or using a profiler can get the call stack?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONBRyZQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDM1OTQyNg==",
                                           "createdAt":  "2021-06-19T05:36:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Can you use a native debugger, maybe set to break on native exception throw?",
                                           "updatedAt":  "2021-06-19T05:36:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDM2NTU0Mw==",
                                           "createdAt":  "2021-06-19T06:47:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "diehell02",
                                           "body":  "\u003e Can you use a native debugger, maybe set to break on native exception throw?\r\n\r\nMy purpose is to get the crash information on the product when the crash occurs, in the production environment. Adding a debugger maybe is not suitable for us.\r\nDo we have some interface or event that can get the exception? Don\u0027t need to only use in C#, in C++/CLI is ok, or in the daemon process, even add the clrprofiler is acceptable. But I don\u0027t know how to get it.",
                                           "updatedAt":  "2021-06-19T07:16:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDM5NzQwNA==",
                                           "createdAt":  "2021-06-19T12:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "I believe even you managed to get exception message, in this case you will only get a line `segment fault` as result.\r\n\r\nYou can configure your environment to generate core dump while crash happening, so that you can attach your debugger to the dump file to do analysis locally.",
                                           "updatedAt":  "2021-06-19T12:04:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDQwMDA2NA==",
                                           "createdAt":  "2021-06-19T12:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "diehell02",
                                           "body":  "\u003e I believe even you managed to get exception message, in this case you will only get a line `segment fault` as result.\r\n\u003e \r\n\u003e You can configure your environment to generate core dump while crash happening, so that you can attach your debugger to the dump file to do analysis locally.\r\n\r\nYes, through analyze the dump file we can get the call stack fully, but the problem is that the dump file size is too huge, for our situation the size is more than 200M after zipping. So the best way is we can get the crash call stack directly.",
                                           "updatedAt":  "2021-06-19T12:29:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzY0ODc4NQ==",
                                           "createdAt":  "2021-07-04T19:34:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "Have you considered having your own debugger as another process to attach to your actual process? With a debugger you can get everything theoretically.",
                                           "updatedAt":  "2021-07-04T19:34:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzY4NDQ1OQ==",
                                           "createdAt":  "2021-07-04T23:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "diehell02",
                                           "body":  "\u003e Have you considered having your own debugger as another process to attach to your actual process? With a debugger you can get everything theoretically.\r\n\r\nThe purpose is to get the crash call stack on the production environment, using the debugger maybe is not a suitable option.",
                                           "updatedAt":  "2021-07-04T23:30:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3Mzc1NTIzNw==",
                                           "createdAt":  "2021-07-05T03:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e The purpose is to get the crash call stack on the production environment, using the debugger maybe is not a suitable option.\r\n\r\nWhy not? Debugger is basically a message loop. If you want to reliably get something when your application crashes, that\u0027s the best way. Many PC software (especially games) today use debugger for anti-reversing purpose in the shipped version.",
                                           "updatedAt":  "2021-07-05T03:21:47Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "How to get native exception on .NET core or .NET 5",
        "labels":  [
                       "question",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59845",
        "createdAt":  "2021-09-30T23:32:54Z",
        "number":  59845,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T15:49:37Z",
        "body":  "See https://github.com/dotnet/runtime/pull/53888\r\n\r\nNote that Windows Checked is currently built using the `-O1` compiler switch.\r\n\r\nE.g.,\r\n\r\n```\r\nAssert failure(PID 7704 [0x00001e18], Thread: 7708 [0x1e1c]): FastNExportSEH(pEHR) || IsComPlusNestedExceptionRecord(pEHR) || ((ExecuteHandler2Module != NULL) \u0026\u0026 IsIPInModule(ExecuteHandler2Module, (PCODE)pEHR-\u003eHandler))\r\n\r\nCORECLR! PopNestedExceptionRecords + 0xA0 (0x71127c40)\r\nCORECLR! COMPlusEndCatch + 0x4A (0x711285da)\r\nCORECLR! JIT_EndCatch + 0xE (0x71199e41)\r\nCORECLR! CallDescrWorkerInternal + 0x34 (0x71199121)\r\nCORECLR! CallDescrWorker + 0x13E (0x70da52ee)\r\nCORECLR! CallDescrWorkerWithHandler + 0x189 (0x70da5589)\r\nCORECLR! MethodDescCallSite::CallTargetWorker + 0x7A7 (0x70da5d77)\r\nCORECLR! RunMainInternal + 0x2FE (0x70ae232e)\r\nCORECLR! ``RunMain\u0027::29\u0027::__Body::Run\u0027::5\u0027::__Body::Run + 0x86 (0x70ae1c36)\r\nCORECLR! RunMain\u0027::29\u0027::__Body::Run + 0xA3 (0x70ae1d53)\r\nFile: D:\\workspace_work\\1\\s\\src\\coreclr\\vm\\i386\\excepx86.cpp Line: 2054\r\nImage: C:\\h\\w\\B10F09DA\\p\\corerun.exe\r\n```\r\nand:\r\n```\r\nAssert failure(PID 3932 [0x00000f5c], Thread: 5880 [0x16f8]): Consistency check failed: Invalid transition into managed code!\r\n\r\nWe\u0027re walking this thread\u0027s stack and we\u0027ve reached a managed frame at Esp=0x00F7D338. (The method is EHTest::f1) The very next FS:0 record (0x00F7D460) up from this point on the stack should be one of our \u0027unmanaged to managed SEH handlers\u0027, but its not... its something else, and that\u0027s very bad. It indicates that someone managed to call into managed code without setting up the proper exception handling.\r\n\r\nGet a good unmanaged stack trace for this thread. All FS:0 records are on the stack, so you can see who installed the last handler. Somewhere between that function and where the thread is now is where the bad transition occurred.\r\n\r\nA little extra info: FS:0 = 0x00F7C35C, pEHR-\u003eHandler = 0x70D12C3A\r\nFAILED: IsUnmanagedToManagedSEHHandler(pEHR)\r\n\r\nCORECLR! CHECK::Trigger + 0x3C4 (0x70a75264)\r\nCORECLR! VerifyValidTransitionFromManagedCode + 0x18A (0x709e856a)\r\nCORECLR! StackFrameIterator::NextRaw + 0xAE4 (0x705ca434)\r\nCORECLR! Thread::StackWalkFramesEx + 0x421 (0x705cb681)\r\nCORECLR! Thread::StackWalkFrames + 0x159 (0x705cb1c9)\r\nCORECLR! LookForHandler + 0x1A (0x704959da)\r\nCORECLR! CPFH_RealFirstPassHandler + 0xF57 (0x709e6007)\r\nCORECLR! CPFH_FirstPassHandler + 0x1C0 (0x709e5020)\r\nCORECLR! COMPlusFrameHandler + 0x26B (0x709e88db)\r\nCORECLR! COMPlusNestedExceptionHandler + 0x13B (0x709e8a6b)\r\nFile: D:\\workspace_work\\1\\s\\src\\coreclr\\vm\\i386\\excepx86.cpp Line: 329\r\nImage: C:\\h\\w\\B10F09DA\\p\\corerun.exe\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON6nXdg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43prm3",
                                           "createdAt":  "2021-10-04T16:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @BruceForstall, assume this fix is required to switch to `-O2`, but looking through the PRs doesnt seem like there is consensus whether it should be switched? ",
                                           "updatedAt":  "2021-10-04T16:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43pttL",
                                           "createdAt":  "2021-10-04T17:08:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "I\u0027m still working on switching to `-O2` because it makes the JIT about 10% faster, but my current attempt in https://github.com/dotnet/runtime/pull/59235 simply works around this issue by not switching x86. The CI has been very noisy with failures recently, so I don\u0027t know if there are other lurking issues yet.\r\n\r\n\u003e looking through the PRs doesnt seem like there is consensus whether it should be switched?\r\n\r\nI don\u0027t think there\u0027s any pushback; janvorli had some concerns about debuggability, but I think I addressed those.\r\n",
                                           "updatedAt":  "2021-10-04T17:08:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43qdd2",
                                           "createdAt":  "2021-10-04T21:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB87D7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BruceForstall",
                                                                               "createdAt":  "2021-10-04T23:51:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok thanks for the context, so assume this issue isnt blocking your PR, but just something we should fix to enable `O2` on x86 as well. ",
                                           "updatedAt":  "2021-10-04T21:40:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Windows x86 Checked CLR build using -O2 hits runtime asserts",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69006",
        "createdAt":  "2022-05-07T05:40:53Z",
        "number":  69006,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC71oJg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zmj",
                                            "createdAt":  "2022-05-08T20:27:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timmydo",
                                            "createdAt":  "2022-08-24T20:22:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shimr12",
                                            "createdAt":  "2024-10-15T14:14:20Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-05-09T06:07:58Z",
        "body":  "We\u0027ve had 2 occasions in ASP.NET Core where users have encountered OutOfMemoryException which have left the applications in an undefined state. I\u0027m not sure why this exception doesn\u0027t act like a stackoverflow exception but it feels there should be a switch to toggle this behavior. ASP.NET Core catches unhandled exceptions and logs by default in several places. This is to prevent the system from crashing for unhandled error (lots of people to things like use exceptions for control flow etc etc). Instead of special casing OutOfMemoryException in those places it feels like it would make sense to have a switch that does an `Environment.FailFast` when this happens.  This has been showing up more with container memory limits.\r\n\r\nsee https://github.com/dotnet/aspnetcore/issues/41556 (there was another issue but I can\u0027t find it rn)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfUoO0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Cw_nI",
                                           "createdAt":  "2022-05-07T05:40:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-05-07T05:40:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CxAFp",
                                           "createdAt":  "2022-05-07T05:56:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it feels like it would make sense to have a switch that does an Environment.FailFast when this happens. \r\n\r\nWhat do you exactly mean by \"this\"?",
                                           "updatedAt":  "2022-05-07T05:56:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CxAS7",
                                           "createdAt":  "2022-05-07T06:03:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There is `AppDomain.FirstChanceException` event handler that you can use to intercept exceptions early. You can use it to look for OutOfMemoryException and turn them into failfasts.",
                                           "updatedAt":  "2022-05-07T06:03:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CxAYX",
                                           "createdAt":  "2022-05-07T06:05:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbtYwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2022-05-07T17:33:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Neme12",
                                                                               "createdAt":  "2022-05-07T20:14:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e What do you exactly mean by \"this\"?\r\n\r\nOutOfMemoryException would turn into a non-catchable exception.\r\n\r\nFeels like this should be a global option (runtime.config.json) that we can turn on by default in ASP.NET Core projects. Though TBH, I don\u0027t think this behavior is ASP.NET Core specific.",
                                           "updatedAt":  "2022-05-07T06:05:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cxg3w",
                                           "createdAt":  "2022-05-07T19:48:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhLvGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2022-05-07T19:59:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2024-05-08T20:51:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "I definitely don\u0027t want this for my desktop app -- configurable is fine, I see good value here, but I don\u0027t want to see this going the way of `legacyCorruptedStateExceptionsPolicy` where the runtime folks have taken a 100% hardline stance on forcing fail-fast for a particular failure type, which has really impacted my app (Paint.NET) negatively",
                                           "updatedAt":  "2022-05-07T19:48:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59QZ9n",
                                           "createdAt":  "2024-05-08T21:00:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I definitely don\u0027t want this for my desktop app\r\n\r\n+1 (for desktop + mobile)\r\n\r\nWe have some isolated parts of code that can end up doing huge allocations and fail. The expected outcome is to display an error to the user and fail just that operation. We try to ensure that all resources along the way are cleaned up properly. Of course, if we know the rough amount of memory upfront we would use `MemoryFailPoint` but we don\u0027t always have that information. Also, we still support 32-bit environments where this is more likely to happen.\r\n\r\nLikewise, in the server context I would expect `OutOfMemoryException` resulting from endpoint request to fail just the request. I know that\u0027s not necessarily easy to accomplish, and it\u0027s usually paired with improper input validation, but I thought I would mention my user/developer expectation nevertheless.",
                                           "updatedAt":  "2024-05-08T21:00:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Qj63",
                                           "createdAt":  "2024-05-08T21:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "How does InsufficientMemoryException fit in here? It\u0027s supposed to be fully recoverable but it\u0027s also a derived class of course.",
                                           "updatedAt":  "2024-05-08T21:14:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Sg7Q",
                                           "createdAt":  "2024-05-09T06:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e How does InsufficientMemoryException fit in here?\r\n\r\nI assume it would only be reasonable behavior for the one preallocated `OutOfMemoryException` instance. I\u0027m not sure if that\u0027s something that we can check in `AppDomain.FirstChanceException` today since I don\u0027t think there\u0027s public API to get the instance.\r\n\r\nHistorically, there are libraries that throw `OutOfMemoryException` for any resource starvation (eg. [GDI+ and System.Drawing](https://github.com/dotnet/winforms/blob/main/src/System.Private.Windows.Core/src/Windows/Win32/Graphics/GdiPlus/StatusExtensions.cs#L31)), and as you pointed out, derived exceptions such as `InsufficientMemoryException` are explicitly designed to be caught.",
                                           "updatedAt":  "2024-05-09T06:07:58Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Default OOM exceptions to crash the process",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70109",
        "createdAt":  "2022-06-01T20:36:01Z",
        "number":  70109,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCfzz9A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2022-06-01T20:37:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-06-02T04:05:42Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-06-23T20:42:23Z",
        "body":  "To fully complete #69758, we need to enable P/Invoke inlining in more places to ensure we generate zero IL stubs on startup for many target scenarios. Today, we don\u0027t inline P/Invokes for a few cases:\r\n\r\n- P/Invoke in a try block\r\n- P/Invoke in a catch clause\r\n- P/Invoke in a filter clause\r\n- P/Invoke in a finally clause\r\n- P/Invoke in a cold (rarely executed) block\r\n\r\nTo get to zero managed-\u003enative IL stubs with a Hello World program where we use `dotnet trace collect` to track P/Invoke stub generation, we need to enable inlining P/Invokes in try blocks and finally clauses. We\u0027ll likely want to also enable inlining P/Invoke stubs into catch and filter clauses for more complex scenarios. We don\u0027t want to enable inlining P/Invokes in cold blocks as that has caused major perf regressions in the past.\r\n\r\nThis work will require both exception handling work to enable correctly handling exception interop on Windows (particularly handling unwinding exactly to the method that has the InlinedCallFrame), as well as some simple JIT work to remove blocking the inlining of these IL stubs.\r\n\r\ncc: @dotnet/interop-contrib ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX6lJ1Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EMbyS",
                                           "createdAt":  "2022-06-01T20:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I have a test suite we can use for testing the exception interop behavior here. I\u0027ll put it out in a PR and reference it here so we can validate our behavior.",
                                           "updatedAt":  "2022-06-01T20:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EMtea",
                                           "createdAt":  "2022-06-01T21:59:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we need to enable inlining P/Invokes in try blocks and finally clauses\r\n\r\nIt is pretty difficult to do this. I am not sure whether it is worth the complexity.\r\n\r\nCan we generate \"no-op\" stubs that just repush all arguments for these cases instead?",
                                           "updatedAt":  "2022-06-01T21:59:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ENfS9",
                                           "createdAt":  "2022-06-02T03:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "We can, but it does remove some of the benefits of removing the crossgen2 support for emitting P/Invoke IL stubs since we can’t remove the infrastructure.\r\n\r\nIt would be a reasonable first step to keep blittable-only support in crossgen2 (I can put up a PR for that), but I wouldn’t want to close the linked issue until we fully remove support from crossgen2.",
                                           "updatedAt":  "2022-06-02T03:09:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ERoAg",
                                           "createdAt":  "2022-06-03T00:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e P/Invoke in a try block\r\n\r\nThis limitation is probably the easiest one to fix. https://github.com/dotnet/runtime/issues/330#issuecomment-621668766 talks about it.",
                                           "updatedAt":  "2022-06-03T00:30:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ERwU0",
                                           "createdAt":  "2022-06-03T01:37:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I took a look at fixing that, and I hit some issues. Even after fixing that, there’s an additional issue. The problem comes when there’s a catch clause in the same frame as the inlined P/Invoke. It seems in this case, the stackwalker is able to unwind past the inlined call frame correctly to the managed method frame, but it clears the info about the non-volatile registers and doesn’t restore them correctly, which breaks the EH support for resuming the method after the catch clause.\r\n\r\nOnce I figured this out, I decided to file this issue before trying to fix that.",
                                           "updatedAt":  "2022-06-03T16:07:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EpT4K",
                                           "createdAt":  "2022-06-09T22:27:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "After more investigation, it looks like `InlinedCallFrame` explicitly doesn\u0027t support restoring callee-saved registers (likely because we already ensure that no GC refs live across the call, and that combined with not supporting inlining P/Invokes in try blocks has led us to never need them), and in `ExceptionTracker::FindNonvolatileRegisterPointers` in exceptionhandling.cpp, there\u0027s a comment that assumes that the frame object will restore the nonvolatile registers.\r\n\r\nhttps://github.com/dotnet/runtime/blob/61ca87cb48435239d662b75636629c432e5fc8f8/src/coreclr/vm/exceptionhandling.cpp#L385-L390\r\n\r\nWould it be worthwhile to save the callee-saved registers in the InlinedCallFrame when we\u0027re in a try block? Maybe by creating a `TransitionBlock` (or `CalleeSavedRegisters` block) inline and adding a pointer to it into the `InlinedCallFrame`?\r\n\r\nAn alternative solution would be to update the stackwalker to manually unwind native frames as it sees them to keep the non-volatile registers accurate.",
                                           "updatedAt":  "2022-06-09T22:31:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EpUgm",
                                           "createdAt":  "2022-06-09T22:32:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "cc: @janvorli for additional ideas as he knows this space much better than I.",
                                           "updatedAt":  "2022-06-09T22:32:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Epcfp",
                                           "createdAt":  "2022-06-09T23:41:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Would it be worthwhile to save the callee-saved registers in the InlinedCallFrame when we\u0027re in a try block? \r\n\r\nWe do depend on the JIT to save the callee-saved registers for efficiency and simplicity. I do not think we would want to start saving the callee-saved registers in InlinedCallFrame.\r\n\r\nThe regular built-in PInvoke stubs can have exception handling and they work fine (?). What is the delta between the built-in stubs and the case that\u0027s broken?",
                                           "updatedAt":  "2022-06-09T23:41:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Eppiv",
                                           "createdAt":  "2022-06-10T01:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Yes, there is a slight difference. We never catch an exception and resume execution in the same IL stub that we have an InlinedCallFrame. We only emit catch blocks in Reverse P/Invokes. The break we’re currently facing is trying to resume execution after catching the exception in the same function as the P/Invoke call.",
                                           "updatedAt":  "2022-06-10T01:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Epz94",
                                           "createdAt":  "2022-06-10T01:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It means that we should be able to relax https://github.com/dotnet/runtime/blob/4becc7585148277c041bed2e1099744f7172df21/src/coreclr/src/jit/importer.cpp#L6479 to allow inlining in try/finally blocks. It is not a complete fix, but it will give us parity with the built-in interop.\r\n\r\n",
                                           "updatedAt":  "2022-06-10T01:34:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EsjTX",
                                           "createdAt":  "2022-06-10T16:20:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "That will get us parity for built-in interop, but it doesn\u0027t solve the problem with the runtime-generated blittable IL stubs that show up if we remove IL stub generation from crossgen2, which is the main impetus behind this issue.",
                                           "updatedAt":  "2022-06-10T16:20:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Espc1",
                                           "createdAt":  "2022-06-10T16:53:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChTYVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2022-06-10T17:47:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The parity with built-in interop is interesting for throughput perf. If the source-generated interop has try/finally, it will get an extra frame at runtime that is not free. We may not be seeing it in our micro-benchmarks, but somebody will notice sooner or later.\r\n\r\nI do not think we want to force the blittable stubs to be always inlineable by fixing all limitations you have listed. It is not profitable for cold code (catch blocks, filter blocks, cold based on profile data). That leaves try clauses associated with finally that should just work, and finally clauses where the PInvoke inlining is complicated.",
                                           "updatedAt":  "2022-06-10T16:53:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Es0A9",
                                           "createdAt":  "2022-06-10T17:48:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "My goal with this work is to eventually support inlining in all `try` blocks (including ones with `catch` clauses) and `finally` clauses. I agree that inlining into catch, filter, or profiled cold blocks is likely not profitable or worthwhile.",
                                           "updatedAt":  "2022-06-10T17:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IdG93",
                                           "createdAt":  "2022-08-15T18:33:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @jkoritzinsky is this still being worked on for 7? ",
                                           "updatedAt":  "2022-08-15T18:33:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IdMcJ",
                                           "createdAt":  "2022-08-15T18:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I\u0027m working on this in https://github.com/dotnet/runtime/pull/73661. I have one last failure that I\u0027m going to try to investigate today.",
                                           "updatedAt":  "2022-08-15T18:57:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IdvE5",
                                           "createdAt":  "2022-08-15T20:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I don\u0027t think we should be pushing on this at this point. There is no .NET 7 requirement and I\u0027d prefer to defer this to .NET 8",
                                           "updatedAt":  "2022-08-15T20:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IdwjA",
                                           "createdAt":  "2022-08-15T20:32:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqmHVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-08-15T20:32:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Sounds good.",
                                           "updatedAt":  "2022-08-15T20:32:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fqUnV",
                                           "createdAt":  "2023-06-23T20:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Deferring to Future as we\u0027re not going to get to this in .NET 8 and future work in the exception handling space may change the difficulty of this work significantly (either making it easier or more difficult, we\u0027ll see).",
                                           "updatedAt":  "2023-06-23T20:42:22Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Enable inlining P/Invokes in exception clauses",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79291",
        "createdAt":  "2022-12-06T10:15:58Z",
        "number":  79291,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:36Z",
        "body":  "### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.18362\r\nBaseline | [8158cb8be51bd6269c75e4010e2e25ada78578f0](https://github.com/dotnet/runtime/commit/8158cb8be51bd6269c75e4010e2e25ada78578f0)\r\nCompare | [067e43a1363f6d1748acc679f1804cd48299ba89](https://github.com/dotnet/runtime/commit/067e43a1363f6d1748acc679f1804cd48299ba89)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8158cb8be51bd6269c75e4010e2e25ada78578f0...067e43a1363f6d1748acc679f1804cd48299ba89)\r\n\r\n\r\n### Regressions in Exceptions.Handling\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ThrowAndCatchWhenFinally - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatchWhenFinally(kind%3a%20Software).html\u003e) | 13.94 μs | 15.59 μs | 1.12 | 0.35 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-a031c6ff093b4d3587/Collect%20Exceptions.Handling.ThrowAndCatchWhenFinally/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchWhenFinally%28kind_%20Software%29-20221206-014456.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=BWtRPn9Yvw6yHWI%2FSj5c0pLQfezPeQ4CrCrkIcGfbUA%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-59a2ed8d766e4d9392/Collect%20Exceptions.Handling.ThrowAndCatchWhenFinally/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchWhenFinally%28kind_%20Software%29-20221206-014357.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=3J8bizribY91aps8IefD9Q88hsu38Lgczgb%2Fun%2Fccgw%3D)\r\n[TryAndFinallyDeep - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.TryAndFinallyDeep(kind%3a%20Software).html\u003e) | 21.24 μs | 28.90 μs | 1.36 | 0.29 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-1b77f9fd6299492185/Collect%20Exceptions.Handling.TryAndFinallyDeep/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndFinallyDeep%28kind_%20Software%29-20221206-014500.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A35Z\u0026sr=c\u0026sp=rl\u0026sig=A0dVr5THmXq06mzg3jU2dhJ6gdclBA3q%2Be8LDEISO4M%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-2320cc5c1aed464985/Collect%20Exceptions.Handling.TryAndFinallyDeep/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndFinallyDeep%28kind_%20Software%29-20221206-014504.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A35Z\u0026sr=c\u0026sp=rl\u0026sig=0FikipDDlj4XZ4%2Bu5ICwcViLxngs0qphfW%2BiLBY46UU%3D)\r\n[ThrowAndCatch - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatch(kind%3a%20ReflectionSoftware).html\u003e) | 21.31 μs | 38.99 μs | 1.83 | 0.29 | False | 295367.23163841804 | 327232.7044025157 | 1.1078842517070637 | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-efd18b30aa6e4f41bd/Collect%20Exceptions.Handling.ThrowAndCatch/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch%28kind_%20ReflectionSoftware%29-20221206-014507.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A36Z\u0026sr=c\u0026sp=rl\u0026sig=2P4g3Xy2uQtBIwA0HaITVbmg2J7%2FpuMkYkESFQ2EW%2BM%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-ef520b8f47c94fb395/Collect%20Exceptions.Handling.ThrowAndCatch/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch%28kind_%20ReflectionSoftware%29-20221206-014417.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A36Z\u0026sr=c\u0026sp=rl\u0026sig=lxAXzjK4Dg68XYFLh6SkmXh53My6%2Fxvzepi8IPHoQE4%3D)\r\n[TryAndCatchDeep_CaugtAtTheTop - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(kind%3a%20Software).html\u003e) | 21.11 μs | 28.92 μs | 1.37 | 0.30 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-0c0d9b94c07c410895/Collect%20Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop%28kind_%20Software%29-20221206-014523.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A38Z\u0026sr=c\u0026sp=rl\u0026sig=zbLN3BiDK5ydE9KlDlC6ggshLGdeg%2BW9pe6i88SPBAs%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-186f0a96f9364e5682/Collect%20Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop%28kind_%20Software%29-20221206-014529.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A38Z\u0026sr=c\u0026sp=rl\u0026sig=YKFovzmEdt%2BYELhNvGtJpHYeZcTyctx7hv9E9dUWATc%3D)\r\n[ThrowAndCatchDeepRecursive - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatchDeepRecursive(kind%3a%20Software).html\u003e) | 27.09 μs | 28.90 μs | 1.07 | 0.33 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-df35e07c48f24149b2/Collect%20Exceptions.Handling.ThrowAndCatchDeepRecursive/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchDeepRecursive%28kind_%20Software%29-20221206-014454.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A43Z\u0026sr=c\u0026sp=rl\u0026sig=J%2BJYekX7CQbjkXn%2BscCAjR8lU1ah0oXE3T0l8b%2FBQTg%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-65a7859ad7b24ad891/Collect%20Exceptions.Handling.ThrowAndCatchDeepRecursive/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchDeepRecursive%28kind_%20Software%29-20221206-014547.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A43Z\u0026sr=c\u0026sp=rl\u0026sig=C5jAaGFBArmClqM0dTL79QAQFV0aj%2BI%2BUwXKY5TJHPI%3D)\r\n[ThrowAndCatch_ManyCatchBlocks - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind%3a%20Software).html\u003e) | 7.43 μs | 15.75 μs | 2.12 | 0.31 | False | 129178.77906976744 | 140150.27322404372 | 1.084932635478392 | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-06e4f2baf73e4244a3/Collect%20Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks%28kind_%20Software%29-20221206-014544.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A44Z\u0026sr=c\u0026sp=rl\u0026sig=icXA9OWX0%2FN9VwhTImUnhuyAb5zGPLu4Rg9%2Ffpa8KkA%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-431b9eaea10742288a/Collect%20Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks%28kind_%20Software%29-20221206-014549.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A44Z\u0026sr=c\u0026sp=rl\u0026sig=8%2FXNEk8lXzmAdm3UOWzZypRqQ43P4%2B5O41ZJXshHj90%3D)\r\n\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_4.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_5.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_6.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Exceptions.Handling*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-4da3423d-7df0-42a6-b46f-03a2b70cc604ed0d8daf0ed4233a0/2cfb8306-1a04-46c0-8589-be3a08fa00c5.zip?sv=2021-08-06\u0026se=2022-12-30T17%3A27%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=ffKDwidJru%2FfukTt8D4WK98cFD0pM2fRTH9Y%2BrNMRWQ%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-96851370-f06e-433c-9fa5-92f70f52ecfa428f599667d4e2b87/7d5fed53-3744-4d56-978a-d5376aa98303.zip?sv=2021-08-06\u0026se=2022-12-31T06%3A45%3A54Z\u0026sr=c\u0026sp=rl\u0026sig=27%2B4s%2FUW6331CxrpMiS4uvq%2FrDxfo9VvlWl5mQPRA9w%3D\u003e)\r\n### Histogram\r\n\r\n#### Exceptions.Handling.ThrowAndCatchWhenFinally(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.585828759148372 \u003e 14.40504684505828.\r\nIsChangePoint: Marked as a change because one of 11/30/2022 7:06:59 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -3.4644330068340223 (T) = (0 -14812.583819391015) / Math.Sqrt((6868774.955056067 / (27)) + (4142163.364375723 / (25))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (27) + (25) - 2, .025) and -0.17867525655752448 = (12567.145816442357 - 14812.583819391015) / 12567.145816442357 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchWhenFinally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,40\r\n       lea       rbp,[rsp+40]\r\n       xor       eax,eax\r\n       mov       [rbp-8],rax\r\n       mov       [rbp-20],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FFAB806D660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       jmp       short M00_L01\r\nM00_L00:\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFAB806D678]; Exceptions.Handling.DoNothing()\r\n       jmp       short M00_L02\r\nM00_L01:\r\n       mov       rcx,rsp\r\n       call      M00_L05\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\nM00_L02:\r\n       mov       rax,[rbp-10]\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,offset MT_System.Exception\r\n       call      qword ptr [7FFAB7D0B828]; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       test      rax,rax\r\n       jne       short M00_L03\r\n       xor       eax,eax\r\n       jmp       short M00_L04\r\nM00_L03:\r\n       mov       [rbp-8],rax\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFAB806D690]; Exceptions.Handling.ReturnTrue()\r\n       test      eax,eax\r\n       setne     al\r\n       movzx     eax,al\r\nM00_L04:\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rax,[rbp-8]\r\n       mov       [rbp-10],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L05:\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFAB806D678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 217\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFAB7DA5C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n```assembly\r\n; Exceptions.Handling.DoNothing()\r\n       ret\r\n; Total bytes of code 1\r\n```\r\n```assembly\r\n; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       mov       rax,rdx\r\n       test      rax,rax\r\n       je        short M03_L00\r\n       cmp       [rax],rcx\r\n       jne       short M03_L01\r\nM03_L00:\r\n       ret\r\nM03_L01:\r\n       mov       rdx,[rax]\r\n       mov       rdx,[rdx+10]\r\nM03_L02:\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       jne       short M03_L05\r\nM03_L03:\r\n       xor       eax,eax\r\nM03_L04:\r\n       ret\r\nM03_L05:\r\n       mov       rdx,[rdx+10]\r\n       jmp       short M03_L02\r\n; Total bytes of code 82\r\n```\r\n```assembly\r\n; Exceptions.Handling.ReturnTrue()\r\n       mov       eax,1\r\n       ret\r\n; Total bytes of code 6\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchWhenFinally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,40\r\n       lea       rbp,[rsp+40]\r\n       xor       eax,eax\r\n       mov       [rbp-8],rax\r\n       mov       [rbp-20],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FFC3BE91660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       jmp       short M00_L01\r\nM00_L00:\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFC3BE91678]; Exceptions.Handling.DoNothing()\r\n       jmp       short M00_L02\r\nM00_L01:\r\n       mov       rcx,rsp\r\n       call      M00_L05\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\nM00_L02:\r\n       mov       rax,[rbp-10]\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,offset MT_System.Exception\r\n       call      qword ptr [7FFC3BB0D828]; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       test      rax,rax\r\n       jne       short M00_L03\r\n       xor       eax,eax\r\n       jmp       short M00_L04\r\nM00_L03:\r\n       mov       [rbp-8],rax\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFC3BE91690]; Exceptions.Handling.ReturnTrue()\r\n       test      eax,eax\r\n       setne     al\r\n       movzx     eax,al\r\nM00_L04:\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rax,[rbp-8]\r\n       mov       [rbp-10],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L05:\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFC3BE91678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 217\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFC3BB17C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n```assembly\r\n; Exceptions.Handling.DoNothing()\r\n       ret\r\n; Total bytes of code 1\r\n```\r\n```assembly\r\n; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       mov       rax,rdx\r\n       test      rax,rax\r\n       je        short M03_L00\r\n       cmp       [rax],rcx\r\n       jne       short M03_L01\r\nM03_L00:\r\n       ret\r\nM03_L01:\r\n       mov       rdx,[rax]\r\n       mov       rdx,[rdx+10]\r\nM03_L02:\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       jne       short M03_L05\r\nM03_L03:\r\n       xor       eax,eax\r\nM03_L04:\r\n       ret\r\nM03_L05:\r\n       mov       rdx,[rdx+10]\r\n       jmp       short M03_L02\r\n; Total bytes of code 82\r\n```\r\n```assembly\r\n; Exceptions.Handling.ReturnTrue()\r\n       mov       eax,1\r\n       ret\r\n; Total bytes of code 6\r\n```\r\n\r\n\r\n#### Exceptions.Handling.TryAndFinallyDeep(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 28.897433659217878 \u003e 28.277094162695974.\r\nIsChangePoint: Marked as a change because one of 11/14/2022 3:36:58 AM, 11/14/2022 7:25:10 PM, 11/30/2022 7:06:59 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -3.983582774938478 (T) = (0 -28555.74009650842) / Math.Sqrt((4686141.24910061 / (27)) + (3811203.762083469 / (25))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (27) + (25) - 2, .025) and -0.08654519786621775 = (26281.22617686483 - 28555.74009650842) / 26281.22617686483 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndFinallyDeep(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFD57A6DAB0]; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FFD57A6DAC8]; Exceptions.Handling.Level2Finally(ExceptionKind)\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFD57A6D678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFD57A6D678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndFinallyDeep(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FF9940A1AB0]; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FF9940A1AC8]; Exceptions.Handling.Level2Finally(ExceptionKind)\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FF9940A1678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FF9940A1678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n\r\n\r\n#### Exceptions.Handling.ThrowAndCatch(kind: ReflectionSoftware)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 38.98574871179816 \u003e 35.71404558231385.\r\nIsChangePoint: Marked as a change because one of 12/2/2022 5:21:30 AM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -7.442331829536757 (T) = (0 -39639.960974209724) / Math.Sqrt((24721548.0088073 / (36)) + (1819214.5731855454 / (16))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (36) + (16) - 2, .025) and -0.2018800187707424 = (32981.62907704601 - 39639.960974209724) / 32981.62907704601 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFC4F7ED660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFC4F515C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFB268C1660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFB26547C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n#### Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 28.915075741297812 \u003e 28.360926779670375.\r\nIsChangePoint: Marked as a change because one of 11/28/2022 4:36:31 AM, 11/29/2022 11:48:02 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -5.507571130065528 (T) = (0 -28215.427617509406) / Math.Sqrt((9322390.741477897 / (23)) + (2141843.399938189 / (29))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (23) + (29) - 2, .025) and -0.15623071405528638 = (24402.939028101493 - 28215.427617509406) / 24402.939028101493 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFE1B0BDBB8]; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFE1B0BDBD0]; Exceptions.Handling.Level2TryDontCatch(ExceptionKind)\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       call      CORINFO_HELP_RETHROW\r\n       int       3\r\n; Total bytes of code 51\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFD9AED1BB8]; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFD9AED1BD0]; Exceptions.Handling.Level2TryDontCatch(ExceptionKind)\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       call      CORINFO_HELP_RETHROW\r\n       int       3\r\n; Total bytes of code 51\r\n```\r\n\r\n\r\n#### Exceptions.Handling.ThrowAndCatchDeepRecursive(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 28.896683673469383 \u003e 28.276018728663047.\r\nIsChangePoint: Marked as a change because one of 11/30/2022 7:06:59 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -5.126168703437914 (T) = (0 -28617.139539030453) / Math.Sqrt((6351643.60125467 / (27)) + (2272233.550291982 / (25))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (27) + (25) - 2, .025) and -0.11395497279645725 = (25689.67349478263 - 28617.139539030453) / 25689.67349478263 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchDeepRecursive(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       r8d,0A\r\n       call      qword ptr [7FFB2DADD828]; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 83\r\n```\r\n```assembly\r\n; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\nM01_L00:\r\n       sub       rsp,28\r\n       lea       eax,[r8-1]\r\n       test      r8d,r8d\r\n       jne       short M01_L01\r\n       call      qword ptr [7FFB2DADD660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       add       rsp,28\r\n       ret\r\nM01_L01:\r\n       mov       r8d,eax\r\n       call      qword ptr [7FFB2DADD828]\r\n       nop\r\n       add       rsp,28\r\n       ret\r\n; Total bytes of code 40\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchDeepRecursive(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       r8d,0A\r\n       call      qword ptr [7FFF67AF1828]; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 83\r\n```\r\n```assembly\r\n; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\nM01_L00:\r\n       sub       rsp,28\r\n       lea       eax,[r8-1]\r\n       test      r8d,r8d\r\n       jne       short M01_L01\r\n       call      qword ptr [7FFF67AF1660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       add       rsp,28\r\n       ret\r\nM01_L01:\r\n       mov       r8d,eax\r\n       call      qword ptr [7FFF67AF1828]\r\n       nop\r\n       add       rsp,28\r\n       ret\r\n; Total bytes of code 40\r\n```\r\n\r\n\r\n#### Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.754629044489384 \u003e 14.718556579172228.\r\nIsChangePoint: Marked as a change because one of 11/28/2022 4:36:31 AM, 11/29/2022 11:48:02 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -5.432850575162834 (T) = (0 -15244.382443685565) / Math.Sqrt((11355315.02582522 / (23)) + (2604017.3312574876 / (29))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (23) + (29) - 2, .025) and -0.3740646364944456 = (11094.370700477006 - 15244.382443685565) / 11094.370700477006 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFB55EFD660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 214\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFB55C25C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFEB26F1660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 214\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFEB2377C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT9_q9g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5P2vb8",
                                           "createdAt":  "2022-12-06T17:48:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.18362\r\nBaseline | [8158cb8be51bd6269c75e4010e2e25ada78578f0](https://github.com/dotnet/runtime/commit/8158cb8be51bd6269c75e4010e2e25ada78578f0)\r\nCompare | [067e43a1363f6d1748acc679f1804cd48299ba89](https://github.com/dotnet/runtime/commit/067e43a1363f6d1748acc679f1804cd48299ba89)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8158cb8be51bd6269c75e4010e2e25ada78578f0...067e43a1363f6d1748acc679f1804cd48299ba89)\r\n\r\n\r\n### Regressions in Exceptions.Handling\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ThrowAndCatchWhenFinally - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatchWhenFinally(kind%3a%20Software).html\u003e) | 13.94 μs | 15.59 μs | 1.12 | 0.35 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-a031c6ff093b4d3587/Collect%20Exceptions.Handling.ThrowAndCatchWhenFinally/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchWhenFinally%28kind_%20Software%29-20221206-014456.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=BWtRPn9Yvw6yHWI%2FSj5c0pLQfezPeQ4CrCrkIcGfbUA%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-59a2ed8d766e4d9392/Collect%20Exceptions.Handling.ThrowAndCatchWhenFinally/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchWhenFinally%28kind_%20Software%29-20221206-014357.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A32Z\u0026sr=c\u0026sp=rl\u0026sig=3J8bizribY91aps8IefD9Q88hsu38Lgczgb%2Fun%2Fccgw%3D)\r\n[TryAndFinallyDeep - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.TryAndFinallyDeep(kind%3a%20Software).html\u003e) | 21.24 μs | 28.90 μs | 1.36 | 0.29 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-1b77f9fd6299492185/Collect%20Exceptions.Handling.TryAndFinallyDeep/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndFinallyDeep%28kind_%20Software%29-20221206-014500.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A35Z\u0026sr=c\u0026sp=rl\u0026sig=A0dVr5THmXq06mzg3jU2dhJ6gdclBA3q%2Be8LDEISO4M%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-2320cc5c1aed464985/Collect%20Exceptions.Handling.TryAndFinallyDeep/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndFinallyDeep%28kind_%20Software%29-20221206-014504.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A35Z\u0026sr=c\u0026sp=rl\u0026sig=0FikipDDlj4XZ4%2Bu5ICwcViLxngs0qphfW%2BiLBY46UU%3D)\r\n[ThrowAndCatch - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatch(kind%3a%20ReflectionSoftware).html\u003e) | 21.31 μs | 38.99 μs | 1.83 | 0.29 | False | 295367.23163841804 | 327232.7044025157 | 1.1078842517070637 | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-efd18b30aa6e4f41bd/Collect%20Exceptions.Handling.ThrowAndCatch/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch%28kind_%20ReflectionSoftware%29-20221206-014507.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A36Z\u0026sr=c\u0026sp=rl\u0026sig=2P4g3Xy2uQtBIwA0HaITVbmg2J7%2FpuMkYkESFQ2EW%2BM%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-ef520b8f47c94fb395/Collect%20Exceptions.Handling.ThrowAndCatch/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch%28kind_%20ReflectionSoftware%29-20221206-014417.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A36Z\u0026sr=c\u0026sp=rl\u0026sig=lxAXzjK4Dg68XYFLh6SkmXh53My6%2Fxvzepi8IPHoQE4%3D)\r\n[TryAndCatchDeep_CaugtAtTheTop - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(kind%3a%20Software).html\u003e) | 21.11 μs | 28.92 μs | 1.37 | 0.30 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-0c0d9b94c07c410895/Collect%20Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop%28kind_%20Software%29-20221206-014523.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A38Z\u0026sr=c\u0026sp=rl\u0026sig=zbLN3BiDK5ydE9KlDlC6ggshLGdeg%2BW9pe6i88SPBAs%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-186f0a96f9364e5682/Collect%20Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop%28kind_%20Software%29-20221206-014529.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A38Z\u0026sr=c\u0026sp=rl\u0026sig=YKFovzmEdt%2BYELhNvGtJpHYeZcTyctx7hv9E9dUWATc%3D)\r\n[ThrowAndCatchDeepRecursive - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatchDeepRecursive(kind%3a%20Software).html\u003e) | 27.09 μs | 28.90 μs | 1.07 | 0.33 | False | | | | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-df35e07c48f24149b2/Collect%20Exceptions.Handling.ThrowAndCatchDeepRecursive/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchDeepRecursive%28kind_%20Software%29-20221206-014454.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A43Z\u0026sr=c\u0026sp=rl\u0026sig=J%2BJYekX7CQbjkXn%2BscCAjR8lU1ah0oXE3T0l8b%2FBQTg%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-65a7859ad7b24ad891/Collect%20Exceptions.Handling.ThrowAndCatchDeepRecursive/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatchDeepRecursive%28kind_%20Software%29-20221206-014547.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A43Z\u0026sr=c\u0026sp=rl\u0026sig=C5jAaGFBArmClqM0dTL79QAQFV0aj%2BI%2BUwXKY5TJHPI%3D)\r\n[ThrowAndCatch_ManyCatchBlocks - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.18362/Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind%3a%20Software).html\u003e) | 7.43 μs | 15.75 μs | 2.12 | 0.31 | False | 129178.77906976744 | 140150.27322404372 | 1.084932635478392 | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-06e4f2baf73e4244a3/Collect%20Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks%28kind_%20Software%29-20221206-014544.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A44Z\u0026sr=c\u0026sp=rl\u0026sig=icXA9OWX0%2FN9VwhTImUnhuyAb5zGPLu4Rg9%2Ffpa8KkA%3D) | [Trace](https://helixri107v0xdeko0k025g8.blob.core.windows.net/results-431b9eaea10742288a/Collect%20Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks/1/artifacts/BenchmarkDotNet.Artifacts/Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks%28kind_%20Software%29-20221206-014549.etl?sv=2021-08-06\u0026se=2023-03-06T09%3A42%3A44Z\u0026sr=c\u0026sp=rl\u0026sig=8%2FXNEk8lXzmAdm3UOWzZypRqQ43P4%2B5O41ZJXshHj90%3D)\r\n\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_1.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_2.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_3.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_4.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_5.png\u003e)\r\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling_6.png\u003e)\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/12_06_2022/refs/heads/main_x64_Windows%2010.0.18362_Regression/Exceptions.Handling.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Exceptions.Handling*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-4da3423d-7df0-42a6-b46f-03a2b70cc604ed0d8daf0ed4233a0/2cfb8306-1a04-46c0-8589-be3a08fa00c5.zip?sv=2021-08-06\u0026se=2022-12-30T17%3A27%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=ffKDwidJru%2FfukTt8D4WK98cFD0pM2fRTH9Y%2BrNMRWQ%3D\u003e)\r\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-96851370-f06e-433c-9fa5-92f70f52ecfa428f599667d4e2b87/7d5fed53-3744-4d56-978a-d5376aa98303.zip?sv=2021-08-06\u0026se=2022-12-31T06%3A45%3A54Z\u0026sr=c\u0026sp=rl\u0026sig=27%2B4s%2FUW6331CxrpMiS4uvq%2FrDxfo9VvlWl5mQPRA9w%3D\u003e)\r\n### Histogram\r\n\r\n#### Exceptions.Handling.ThrowAndCatchWhenFinally(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.585828759148372 \u003e 14.40504684505828.\r\nIsChangePoint: Marked as a change because one of 11/30/2022 7:06:59 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -3.4644330068340223 (T) = (0 -14812.583819391015) / Math.Sqrt((6868774.955056067 / (27)) + (4142163.364375723 / (25))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (27) + (25) - 2, .025) and -0.17867525655752448 = (12567.145816442357 - 14812.583819391015) / 12567.145816442357 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchWhenFinally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,40\r\n       lea       rbp,[rsp+40]\r\n       xor       eax,eax\r\n       mov       [rbp-8],rax\r\n       mov       [rbp-20],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FFAB806D660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       jmp       short M00_L01\r\nM00_L00:\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFAB806D678]; Exceptions.Handling.DoNothing()\r\n       jmp       short M00_L02\r\nM00_L01:\r\n       mov       rcx,rsp\r\n       call      M00_L05\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\nM00_L02:\r\n       mov       rax,[rbp-10]\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,offset MT_System.Exception\r\n       call      qword ptr [7FFAB7D0B828]; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       test      rax,rax\r\n       jne       short M00_L03\r\n       xor       eax,eax\r\n       jmp       short M00_L04\r\nM00_L03:\r\n       mov       [rbp-8],rax\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFAB806D690]; Exceptions.Handling.ReturnTrue()\r\n       test      eax,eax\r\n       setne     al\r\n       movzx     eax,al\r\nM00_L04:\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rax,[rbp-8]\r\n       mov       [rbp-10],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L05:\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFAB806D678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 217\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFAB7DA5C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n```assembly\r\n; Exceptions.Handling.DoNothing()\r\n       ret\r\n; Total bytes of code 1\r\n```\r\n```assembly\r\n; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       mov       rax,rdx\r\n       test      rax,rax\r\n       je        short M03_L00\r\n       cmp       [rax],rcx\r\n       jne       short M03_L01\r\nM03_L00:\r\n       ret\r\nM03_L01:\r\n       mov       rdx,[rax]\r\n       mov       rdx,[rdx+10]\r\nM03_L02:\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       jne       short M03_L05\r\nM03_L03:\r\n       xor       eax,eax\r\nM03_L04:\r\n       ret\r\nM03_L05:\r\n       mov       rdx,[rdx+10]\r\n       jmp       short M03_L02\r\n; Total bytes of code 82\r\n```\r\n```assembly\r\n; Exceptions.Handling.ReturnTrue()\r\n       mov       eax,1\r\n       ret\r\n; Total bytes of code 6\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchWhenFinally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,40\r\n       lea       rbp,[rsp+40]\r\n       xor       eax,eax\r\n       mov       [rbp-8],rax\r\n       mov       [rbp-20],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FFC3BE91660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       jmp       short M00_L01\r\nM00_L00:\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFC3BE91678]; Exceptions.Handling.DoNothing()\r\n       jmp       short M00_L02\r\nM00_L01:\r\n       mov       rcx,rsp\r\n       call      M00_L05\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\nM00_L02:\r\n       mov       rax,[rbp-10]\r\n       add       rsp,40\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,offset MT_System.Exception\r\n       call      qword ptr [7FFC3BB0D828]; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       test      rax,rax\r\n       jne       short M00_L03\r\n       xor       eax,eax\r\n       jmp       short M00_L04\r\nM00_L03:\r\n       mov       [rbp-8],rax\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFC3BE91690]; Exceptions.Handling.ReturnTrue()\r\n       test      eax,eax\r\n       setne     al\r\n       movzx     eax,al\r\nM00_L04:\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rax,[rbp-8]\r\n       mov       [rbp-10],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L05:\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+40]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFC3BE91678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 217\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFC3BB17C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n```assembly\r\n; Exceptions.Handling.DoNothing()\r\n       ret\r\n; Total bytes of code 1\r\n```\r\n```assembly\r\n; System.Runtime.CompilerServices.CastHelpers.IsInstanceOfClass(Void*, System.Object)\r\n       mov       rax,rdx\r\n       test      rax,rax\r\n       je        short M03_L00\r\n       cmp       [rax],rcx\r\n       jne       short M03_L01\r\nM03_L00:\r\n       ret\r\nM03_L01:\r\n       mov       rdx,[rax]\r\n       mov       rdx,[rdx+10]\r\nM03_L02:\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       je        short M03_L03\r\n       mov       rdx,[rdx+10]\r\n       cmp       rdx,rcx\r\n       je        short M03_L04\r\n       test      rdx,rdx\r\n       jne       short M03_L05\r\nM03_L03:\r\n       xor       eax,eax\r\nM03_L04:\r\n       ret\r\nM03_L05:\r\n       mov       rdx,[rdx+10]\r\n       jmp       short M03_L02\r\n; Total bytes of code 82\r\n```\r\n```assembly\r\n; Exceptions.Handling.ReturnTrue()\r\n       mov       eax,1\r\n       ret\r\n; Total bytes of code 6\r\n```\r\n\r\n\r\n#### Exceptions.Handling.TryAndFinallyDeep(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 28.897433659217878 \u003e 28.277094162695974.\r\nIsChangePoint: Marked as a change because one of 11/14/2022 3:36:58 AM, 11/14/2022 7:25:10 PM, 11/30/2022 7:06:59 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -3.983582774938478 (T) = (0 -28555.74009650842) / Math.Sqrt((4686141.24910061 / (27)) + (3811203.762083469 / (25))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (27) + (25) - 2, .025) and -0.08654519786621775 = (26281.22617686483 - 28555.74009650842) / 26281.22617686483 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndFinallyDeep(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFD57A6DAB0]; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FFD57A6DAC8]; Exceptions.Handling.Level2Finally(ExceptionKind)\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFD57A6D678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FFD57A6D678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndFinallyDeep(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FF9940A1AB0]; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1Finally(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       [rbp+10],rcx\r\n       call      qword ptr [7FF9940A1AC8]; Exceptions.Handling.Level2Finally(ExceptionKind)\r\n       nop\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FF9940A1678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rcx,[rbp+10]\r\n       call      qword ptr [7FF9940A1678]; Exceptions.Handling.DoNothing()\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n\r\n\r\n#### Exceptions.Handling.ThrowAndCatch(kind: ReflectionSoftware)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 38.98574871179816 \u003e 35.71404558231385.\r\nIsChangePoint: Marked as a change because one of 12/2/2022 5:21:30 AM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -7.442331829536757 (T) = (0 -39639.960974209724) / Math.Sqrt((24721548.0088073 / (36)) + (1819214.5731855454 / (16))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (36) + (16) - 2, .025) and -0.2018800187707424 = (32981.62907704601 - 39639.960974209724) / 32981.62907704601 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFC4F7ED660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFC4F515C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFB268C1660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFB26547C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n#### Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 28.915075741297812 \u003e 28.360926779670375.\r\nIsChangePoint: Marked as a change because one of 11/28/2022 4:36:31 AM, 11/29/2022 11:48:02 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -5.507571130065528 (T) = (0 -28215.427617509406) / Math.Sqrt((9322390.741477897 / (23)) + (2141843.399938189 / (29))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (23) + (29) - 2, .025) and -0.15623071405528638 = (24402.939028101493 - 28215.427617509406) / 24402.939028101493 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFE1B0BDBB8]; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFE1B0BDBD0]; Exceptions.Handling.Level2TryDontCatch(ExceptionKind)\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       call      CORINFO_HELP_RETHROW\r\n       int       3\r\n; Total bytes of code 51\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.TryAndCatchDeep_CaugtAtTheTop(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFD9AED1BB8]; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 77\r\n```\r\n```assembly\r\n; Exceptions.Handling.Level1TryDontCatch(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFD9AED1BD0]; Exceptions.Handling.Level2TryDontCatch(ExceptionKind)\r\n       nop\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       call      CORINFO_HELP_RETHROW\r\n       int       3\r\n; Total bytes of code 51\r\n```\r\n\r\n\r\n#### Exceptions.Handling.ThrowAndCatchDeepRecursive(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 28.896683673469383 \u003e 28.276018728663047.\r\nIsChangePoint: Marked as a change because one of 11/30/2022 7:06:59 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -5.126168703437914 (T) = (0 -28617.139539030453) / Math.Sqrt((6351643.60125467 / (27)) + (2272233.550291982 / (25))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (27) + (25) - 2, .025) and -0.11395497279645725 = (25689.67349478263 - 28617.139539030453) / 25689.67349478263 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchDeepRecursive(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       r8d,0A\r\n       call      qword ptr [7FFB2DADD828]; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 83\r\n```\r\n```assembly\r\n; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\nM01_L00:\r\n       sub       rsp,28\r\n       lea       eax,[r8-1]\r\n       test      r8d,r8d\r\n       jne       short M01_L01\r\n       call      qword ptr [7FFB2DADD660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       add       rsp,28\r\n       ret\r\nM01_L01:\r\n       mov       r8d,eax\r\n       call      qword ptr [7FFB2DADD828]\r\n       nop\r\n       add       rsp,28\r\n       ret\r\n; Total bytes of code 40\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatchDeepRecursive(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       mov       r8d,0A\r\n       call      qword ptr [7FFF67AF1828]; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       rax,rdx\r\n       mov       [rbp-8],rax\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 83\r\n```\r\n```assembly\r\n; Exceptions.Handling.ThrowRecursive(ExceptionKind, Int32)\r\nM01_L00:\r\n       sub       rsp,28\r\n       lea       eax,[r8-1]\r\n       test      r8d,r8d\r\n       jne       short M01_L01\r\n       call      qword ptr [7FFF67AF1660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       add       rsp,28\r\n       ret\r\nM01_L01:\r\n       mov       r8d,eax\r\n       call      qword ptr [7FFF67AF1828]\r\n       nop\r\n       add       rsp,28\r\n       ret\r\n; Total bytes of code 40\r\n```\r\n\r\n\r\n#### Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(kind: Software)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 15.754629044489384 \u003e 14.718556579172228.\r\nIsChangePoint: Marked as a change because one of 11/28/2022 4:36:31 AM, 11/29/2022 11:48:02 PM, 12/6/2022 5:44:36 AM falls between 11/27/2022 4:37:47 PM and 12/6/2022 5:44:36 AM.\r\nIsRegressionStdDev: Marked as regression because -5.432850575162834 (T) = (0 -15244.382443685565) / Math.Sqrt((11355315.02582522 / (23)) + (2604017.3312574876 / (29))) is less than -2.0085591120996775 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (23) + (29) - 2, .025) and -0.3740646364944456 = (11094.370700477006 - 15244.382443685565) / 11094.370700477006 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```### Baseline Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFB55EFD660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 214\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFB55C25C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n### Compare Jit Disasm\r\n\r\n```assembly\r\n; Exceptions.Handling.ThrowAndCatch_ManyCatchBlocks(ExceptionKind)\r\n       push      rbp\r\n       sub       rsp,30\r\n       lea       rbp,[rsp+30]\r\n       mov       [rbp-10],rsp\r\n       call      qword ptr [7FFEB26F1660]; Exceptions.Handling.Throw(ExceptionKind)\r\n       nop\r\n       xor       eax,eax\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\nM00_L00:\r\n       mov       rax,[rbp-8]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n       push      rbp\r\n       sub       rsp,30\r\n       mov       rbp,[rcx+20]\r\n       mov       [rsp+20],rbp\r\n       lea       rbp,[rbp+30]\r\n       mov       [rbp-8],rdx\r\n       lea       rax,[M00_L00]\r\n       add       rsp,30\r\n       pop       rbp\r\n       ret\r\n; Total bytes of code 214\r\n```\r\n```assembly\r\n; Exceptions.Handling.Throw(ExceptionKind)\r\n       push      rsi\r\n       sub       rsp,30\r\n       mov       rax,rcx\r\n       test      edx,edx\r\n       je        near ptr M01_L03\r\n       cmp       edx,1\r\n       jne       short M01_L00\r\n       mov       rsi,[rax+10]\r\n       mov       rcx,[rax+8]\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+40]\r\n       call      qword ptr [rax+18]\r\n       mov       [rsi+40],eax\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L00:\r\n       cmp       edx,2\r\n       jne       short M01_L01\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+20]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L01:\r\n       cmp       edx,3\r\n       jne       short M01_L02\r\n       mov       rcx,[rax+18]\r\n       mov       rdx,[rax+28]\r\n       mov       [rsp+20],rdx\r\n       xor       edx,edx\r\n       mov       [rsp+28],rdx\r\n       mov       rdx,rax\r\n       xor       r8d,r8d\r\n       xor       r9d,r9d\r\n       mov       rax,[rcx]\r\n       mov       rax,[rax+58]\r\n       call      qword ptr [rax+38]\r\nM01_L02:\r\n       nop\r\n       add       rsp,30\r\n       pop       rsi\r\n       ret\r\nM01_L03:\r\n       mov       rcx,offset MT_System.Exception\r\n       call      CORINFO_HELP_NEWSFAST\r\n       mov       rsi,rax\r\n       mov       rcx,rsi\r\n       call      qword ptr [7FFEB2377C00]; System.Exception..ctor()\r\n       mov       rcx,rsi\r\n       call      CORINFO_HELP_THROW\r\n       int       3\r\n; Total bytes of code 186\r\n```\r\n\r\n\r\n\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`, `refs/heads/main`, `RunKind=micro`, `Windows 10.0.18362`, `Regression`, `CoreClr`, `x64`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-06T17:48:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3srF",
                                           "createdAt":  "2022-12-06T21:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwzSGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2022-12-06T21:03:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "LoopedBard3",
                                           "body":  "Likely a more useful related regression set here: https://github.com/dotnet/perf-autofiling-issues/issues/10382. Commit range https://github.com/dotnet/runtime/compare/b49fcc6c5a131608813dcd68760270c18ebd11bb...c01ad8694fe712e9dcdfa9a9d37c1be0e8b82e4e only has 2 commits, and https://github.com/dotnet/runtime/pull/79024 is likely the cause, @MihaZupan.  ",
                                           "updatedAt":  "2022-12-06T21:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3w8p",
                                           "createdAt":  "2022-12-06T21:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "I don\u0027t see how my Uri changes could possibly affect this benchmark.",
                                           "updatedAt":  "2022-12-06T21:17:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3-r2",
                                           "createdAt":  "2022-12-06T22:09:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@janvorli ",
                                           "updatedAt":  "2022-12-06T22:09:22Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Regressions in Exceptions.Handling",
        "labels":  [
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84993",
        "createdAt":  "2023-04-18T17:11:59Z",
        "number":  84993,
        "author":  "TimLovellSmith",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T17:53:57Z",
        "body":  "### Description\r\n\r\nI stumbled upon astack overflow exception crash dump which doesn\u0027t obviously have user code in the stack, and passes through `AsyncStreamReader.FlushMessageQueue(Boolean)`, which was introduced in a refactoring of AsyncStreamReader that also seems to have introduced this concept of \u0027rethrowInNewThread\u0027, where the exception will be raised on a diferent thread from the calling one, for some reason.\r\n\r\n`bool [FlushMessageQueue](https://source.dot.net/System.Diagnostics.Process/R/db4c3f24df1043ec.html)(bool rethrowInNewThread)`\r\nhttps://github.com/dotnet/runtime/blob/634cc1e04e91b2b264a57798a2c733ae261758f9/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs#L214\r\n\r\nI\u0027m not sure if I understand how the stack overflow exception originally arose here. However, as I think about this code, it seems to me that the design of this is kind of inherently flawed, because \u0027rethrowInNewThread\u0027 is trying to rethrow fatal stack overflow exceptions on a different worker thread, even though they are really fatal exceptions about corrupt state on the *current thread*.\r\n\r\n```\r\nApp!out_of_memory+0x0\r\nunknown![.ecxr]+0x0\r\nntdll!RtlReportSilentProcessExit+0x0 [minkernel\\ntdll\\wer.c @ 2501]\r\nKERNELBASE!TerminateProcess+0x0 [minkernel\\kernelbase\\process.c @ 3689]\r\nKERNELBASE!RaiseFailFastException+0x0 [minkernel\\kernelbase\\xcpt.c @ 1224]\r\ncoreclr!WatsonLastChance+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 3842]\r\ncoreclr!EEPolicy::HandleFatalStackOverflow+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eepolicy.cpp @ 726]\r\ncoreclr!EEPolicy::HandleStackOverflow+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eepolicy.cpp @ 147]\r\ncoreclr!CLRException::HandlerState::SetupCatch+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\clrex.cpp @ 878]\r\ncoreclr!`TieredCompilationManager::CreateBackgroundWorker\u0027::`1\u0027::catch$15+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 375]\r\ncoreclr!_CallSettingFrame_LookupContinuationIndex+0x0 [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcruntime\\src\\eh\\amd64\\handlers.asm @ 98]\r\ncoreclr!__FrameHandler4::CxxCallCatchBlock+0x0 [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcruntime\\src\\eh\\frame.cpp @ 1393]\r\nntdll!RcFrameConsolidation+0x0 [minkernel\\ntos\\rtl\\amd64\\capture.asm @ 1124]\r\ncoreclr!TieredCompilationManager::CreateBackgroundWorker+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 367]\r\ncoreclr!TieredCompilationManager::HandleCallCountingForFirstCall+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 182]\r\ncoreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1861]\r\ncoreclr!MethodDesc::DoPrestub+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2215]\r\ncoreclr!PreStubWorker+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2039]\r\ncoreclr!ThePreStub+0x0\r\nSystem_Diagnostics_Process!System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean)+0x0 [/_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs @ 224]\r\nunknown!noop+0x0 [/_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs @ 95]\r\nSystem_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 158]\r\nunknown!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[System.Diagnostics.AsyncStreamReader+_ReadBufferAsync_d__16, System.Diagnostics.Process]].MoveNext(System.Thre+0x0\r\nSystem_Private_CoreLib!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskContinuation.cs @ 765]\r\nSystem_Private_CoreLib!System.Threading.Tasks.Task.RunContinuations(System.Object)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3358]\r\nunknown!System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib]].TrySetResult(Int32)+0x0\r\nSystem_Private_CoreLib!System.IO.Strategies.BufferedFileStreamStrategy+_ReadFromNonSeekableAsync_d__36.MoveNext()+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/IO/Strategies/BufferedFileStreamStrategy.cs @ 376]\r\nSystem_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 158]\r\nunknown!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib],[System.IO.Strategies.BufferedFileStreamStrategy+_ReadFromNonSeekableAsync_d__36, System.Private.CoreLib]].MoveNext(System.Threading.Thr+0x0\r\nSystem_Private_CoreLib!Microsoft.Win32.SafeHandles.SafeFileHandle+ThreadPoolValueTaskSource.ExecuteInternal+0x0 [/_/src/libraries/System.Private.CoreLib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.ThreadPoolValueTaskSource.cs @ 151]\r\nSystem_Private_CoreLib!Microsoft.Win32.SafeHandles.SafeFileHandle+ThreadPoolValueTaskSource.System.Threading.IThreadPoolWorkItem.Execute+0x0 [/_/src/libraries/System.Private.CoreLib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.ThreadPoolValueTaskSource.cs @ 163]\r\nSystem_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch()+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs @ 613]\r\nSystem_Private_CoreLib!System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63]\r\nSystem_Private_CoreLib!System.Threading.Thread.StartCallback+0x0 [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 106]\r\ncoreclr!CallDescrWorkerInternal+0x0\r\ncoreclr!DispatchCallSimple+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 220]\r\ncoreclr!ThreadNative::KickOffThread_Worker+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158]\r\ncoreclr!ManagedThreadBase_DispatchMiddle+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7365]\r\ncoreclr!ManagedThreadBase_DispatchOuter+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7524]\r\ncoreclr!ThreadNative::KickOffThread+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230]\r\nkernel32!BaseThreadInitThunk+0x0 [clientcore\\base\\win32\\client\\thread.c @ 75]\r\nntdll!RtlUserThreadStart+0x0 [minkernel\\ntdll\\rtlstrt.c @ 1152]\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nRepro not yet know. \r\n\r\n### Expected behavior\r\n\r\nUncertain. App crash, with actionable stack?\r\n\r\n### Actual behavior\r\n\r\nApp crash, with mysterious stack\r\n\r\n### Regression?\r\n\r\nUnknown if this is a regression from .Net Framework.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nMy current best guess is that this is running recent .Net 6 bits, on Windows Server x64 OS.\r\n\r\nOSBuildString:\r\n\t20348.859.amd64fre.fe_release_svc_prod2.220707-1832  \r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWjaGvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aNoa_",
                                           "createdAt":  "2023-04-18T17:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI stumbled upon astack overflow exception crash dump which doesn\u0027t obviously have user code in the stack, and passes through `AsyncStreamReader.FlushMessageQueue(Boolean)`, which was introduced in a refactoring of AsyncStreamReader that also seems to have introduced this concept of \u0027rethrowInNewThread\u0027, where the exception will be raised on a diferent thread from the calling one, for some reason.\r\n\r\n`bool [FlushMessageQueue](https://source.dot.net/System.Diagnostics.Process/R/db4c3f24df1043ec.html)(bool rethrowInNewThread)`\r\n\r\nI\u0027m not sure if I understand how the stack overflow exception originally arose here. However, as I think about this code, it seems to me that the design of this is kind of inherently flawed, because \u0027rethrowInNewThread\u0027 is trying to rethrow fatal stack overflow exceptions on a different worker thread, even though they are really fatal exceptions about corrupt state on the *current thread*.\r\n\r\n```\r\nApp!out_of_memory+0x0\r\nunknown![.ecxr]+0x0\r\nntdll!RtlReportSilentProcessExit+0x0 [minkernel\\ntdll\\wer.c @ 2501]\r\nKERNELBASE!TerminateProcess+0x0 [minkernel\\kernelbase\\process.c @ 3689]\r\nKERNELBASE!RaiseFailFastException+0x0 [minkernel\\kernelbase\\xcpt.c @ 1224]\r\ncoreclr!WatsonLastChance+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 3842]\r\ncoreclr!EEPolicy::HandleFatalStackOverflow+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eepolicy.cpp @ 726]\r\ncoreclr!EEPolicy::HandleStackOverflow+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eepolicy.cpp @ 147]\r\ncoreclr!CLRException::HandlerState::SetupCatch+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\clrex.cpp @ 878]\r\ncoreclr!`TieredCompilationManager::CreateBackgroundWorker\u0027::`1\u0027::catch$15+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 375]\r\ncoreclr!_CallSettingFrame_LookupContinuationIndex+0x0 [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcruntime\\src\\eh\\amd64\\handlers.asm @ 98]\r\ncoreclr!__FrameHandler4::CxxCallCatchBlock+0x0 [D:\\a\\_work\\1\\s\\src\\vctools\\crt\\vcruntime\\src\\eh\\frame.cpp @ 1393]\r\nntdll!RcFrameConsolidation+0x0 [minkernel\\ntos\\rtl\\amd64\\capture.asm @ 1124]\r\ncoreclr!TieredCompilationManager::CreateBackgroundWorker+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 367]\r\ncoreclr!TieredCompilationManager::HandleCallCountingForFirstCall+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\tieredcompilation.cpp @ 182]\r\ncoreclr!CodeVersionManager::PublishVersionableCodeIfNecessary+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\codeversion.cpp @ 1861]\r\ncoreclr!MethodDesc::DoPrestub+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2215]\r\ncoreclr!PreStubWorker+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\prestub.cpp @ 2039]\r\ncoreclr!ThePreStub+0x0\r\nSystem_Diagnostics_Process!System.Diagnostics.AsyncStreamReader.FlushMessageQueue(Boolean)+0x0 [/_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs @ 224]\r\nunknown!noop+0x0 [/_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs @ 95]\r\nSystem_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 158]\r\nunknown!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[System.Diagnostics.AsyncStreamReader+_ReadBufferAsync_d__16, System.Diagnostics.Process]].MoveNext(System.Thre+0x0\r\nSystem_Private_CoreLib!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox, Boolean)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskContinuation.cs @ 765]\r\nSystem_Private_CoreLib!System.Threading.Tasks.Task.RunContinuations(System.Object)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs @ 3358]\r\nunknown!System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib]].TrySetResult(Int32)+0x0\r\nSystem_Private_CoreLib!System.IO.Strategies.BufferedFileStreamStrategy+_ReadFromNonSeekableAsync_d__36.MoveNext()+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/IO/Strategies/BufferedFileStreamStrategy.cs @ 376]\r\nSystem_Private_CoreLib!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 158]\r\nunknown!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib],[System.IO.Strategies.BufferedFileStreamStrategy+_ReadFromNonSeekableAsync_d__36, System.Private.CoreLib]].MoveNext(System.Threading.Thr+0x0\r\nSystem_Private_CoreLib!Microsoft.Win32.SafeHandles.SafeFileHandle+ThreadPoolValueTaskSource.ExecuteInternal+0x0 [/_/src/libraries/System.Private.CoreLib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.ThreadPoolValueTaskSource.cs @ 151]\r\nSystem_Private_CoreLib!Microsoft.Win32.SafeHandles.SafeFileHandle+ThreadPoolValueTaskSource.System.Threading.IThreadPoolWorkItem.Execute+0x0 [/_/src/libraries/System.Private.CoreLib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.ThreadPoolValueTaskSource.cs @ 163]\r\nSystem_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch()+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ThreadPoolWorkQueue.cs @ 613]\r\nSystem_Private_CoreLib!System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart+0x0 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/PortableThreadPool.WorkerThread.cs @ 63]\r\nSystem_Private_CoreLib!System.Threading.Thread.StartCallback+0x0 [/_/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs @ 106]\r\ncoreclr!CallDescrWorkerInternal+0x0\r\ncoreclr!DispatchCallSimple+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 220]\r\ncoreclr!ThreadNative::KickOffThread_Worker+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158]\r\ncoreclr!ManagedThreadBase_DispatchMiddle+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7365]\r\ncoreclr!ManagedThreadBase_DispatchOuter+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7524]\r\ncoreclr!ThreadNative::KickOffThread+0x0 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230]\r\nkernel32!BaseThreadInitThunk+0x0 [clientcore\\base\\win32\\client\\thread.c @ 75]\r\nntdll!RtlUserThreadStart+0x0 [minkernel\\ntdll\\rtlstrt.c @ 1152]\r\n```\n\n### Reproduction Steps\n\nRepro not yet know. \n\n### Expected behavior\n\nUncertain. App crash, with actionable stack?\n\n### Actual behavior\n\nApp crash, with mysterious stack\n\n### Regression?\n\nUnknown if this is a regression from .Net Framework.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nMy current best guess is that this is running recent .Net 6 bits, on Windows Server x64 OS.\r\n\r\nOSBuildString:\r\n\t20348.859.amd64fre.fe_release_svc_prod2.220707-1832  \n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTimLovellSmith\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Threading`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-18T17:12:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Issues understanding a StackOverflowException from System.Diagnostics.Process.AsyncStreamReader ",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90728",
        "createdAt":  "2023-08-17T09:54:58Z",
        "number":  90728,
        "author":  "tbino5981",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-31T18:57:59Z",
        "body":  "### Description\r\n\r\nWe use an UnhandledExceptionHandler to show a message to the user and log some stuff before exiting.\r\nThis is not working on some systems (all windows).\r\n\r\nOn some systems it is working as intended: User does something by clicking button -\u003e that something throws an unhandled exception -\u003e UnhandledException handler is called (logs are written and message is displayed to user) -\u003e application terminates and windows event log has the exception logged\r\n\r\nOn others it works like this: User does something by clicking button -\u003e that something throws an unhandled exception -\u003e software crashes/hangs -\u003e exception is not logged in windows event log (only an error in kernelbase.dll with code 0xe0434352 is logged)\r\n\r\nif a debugger is attached then it works as expected on all systems.\r\nThis worked as expected in .NET 4.8\r\n\r\n### Reproduction Steps\r\n\r\nclone https://github.com/weezlemsneezle/UnhandledException\r\ncompile and start the .net6 build without debugging\r\n\r\n### Expected behavior\r\n\r\nwhen clicking the button the unhandled exception handler should be invoked and a message should be displayed to the user.\r\n\r\n### Actual behavior\r\n\r\nOn some systems: unhandled exception handler is called\r\n\r\non other systems: unhandled exception handler is not called\r\n\r\n### Regression?\r\n\r\nWorks in .NET 4.8\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6.0.413 (6.0.21) (all systems)\r\nWindows 10 22H2 (all systems)\r\nx64 (all systems)\r\n\r\nOur systems have different hardware the OS is installed as an image (all software versions are identical)\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Arbitrary UnhandledException Behaviour",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91125",
        "createdAt":  "2023-08-25T17:18:02Z",
        "number":  91125,
        "author":  "kkeirstead",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-31T19:02:34Z",
        "body":  "### Description\n\nWhen `Exception1` is caught, wrapped in `Exception2`, and `Exception2` is thrown from within the catch block, the callstack for `Exception2` is missing.\r\n\r\nIn contrast, when `Exception1` is caught, wrapped in `Exception2`, and `Exception2` is thrown from **outside** the catch block, the callstack for `Exception2` is present.\r\n\r\nThis appears to be due to incorrect offsets, causing `dotnet monitor` to fail to find a match when trying to compute the callstack (see [here](https://github.com/dotnet/dotnet-monitor/blob/main/src/Microsoft.Diagnostics.Monitoring.StartupHook/Exceptions/Pipeline/Steps/ExceptionEventsPipelineStep.cs#L71)).\r\n\r\nThrowing the wrapping exception after the `catch` works as expected:\r\n```cs\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static void ThrowAndCatchEclipsingExceptionOutsideCatch()\r\n{\r\n    try\r\n    {\r\n        Exception caughtException = null;\r\n        try\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            caughtException = ex;\r\n        }\r\n\r\n        throw new Exception(null, caughtException);\r\n    }\r\n    catch (Exception)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThrowing the wrapping exception within the `catch` does not work as expected: \r\n```cs\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static void ThrowAndCatchEclipsingExceptionInsideCatch()\r\n{\r\n    try\r\n    {\r\n        try\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            throw new Exception(null, ex);\r\n        }\r\n    }\r\n    catch (Exception)\r\n    {\r\n    }\r\n}\r\n```\n\n### Reproduction Steps\n\nClone repro project from `https://github.com/kkeirstead/missing_callstacks/tree/main`\r\nRun .\\restore.cmd from repo root to restore toolset and dependencies.\r\nRun .\\build.cmd -test from repo root to build and execute the tests. `OutsideCatch` should pass, but `InsideCatch` will fail.\r\n\r\nOutput from the failing (`InsideCatch`) test:\r\n```\r\nBegin Observing Exception: System.NotImplementedException\r\nThrowing Frame: [ThrowAndCatchEclipsingExceptionInsideCatch, 0x8]\r\nBegin Checking Thread Frames:\r\n- [ValidateExceptionStackFrame, 0xB5]\r\n- [FirstChanceExceptionCallback, 0x41]\r\n- [\u003cExceptionCallStack_InsideCatch\u003eb__0, 0x6]\r\n- [ThrowAndCatchEclipsingExceptionInsideCatch, 0x8]\r\nEnd Checking Thread Frames:\r\nEnd Observing Exception: System.NotImplementedException\r\nBegin Observing Exception: System.Exception\r\nThrowing Frame: [ThrowAndCatchEclipsingExceptionInsideCatch, 0x12]\r\nBegin Checking Thread Frames:\r\n- [ValidateExceptionStackFrame, 0xB5]\r\n- [FirstChanceExceptionCallback, 0x41]\r\n- [\u003cExceptionCallStack_InsideCatch\u003eb__0, 0x6]\r\n- [ThrowAndCatchEclipsingExceptionInsideCatch, 0x8]\r\n- [ExceptionCallStack_InsideCatch, 0x33]\r\n- [InvokeMethod, 0xFFFFFFFF]\r\n- [Invoke, 0x78]\r\n- [Invoke, 0x0]\r\n- [CallTestMethod, 0x0]\r\n- [MoveNext, 0xC5]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [\u003cInvokeTestMethodAsync\u003eb__1, 0x1C]\r\n- [MoveNext, 0x20]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [AggregateAsync, 0x24]\r\n- [\u003cInvokeTestMethodAsync\u003eb__0, 0x22]\r\n- [MoveNext, 0x14]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x24]\r\n- [MoveNext, 0x6C]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [InvokeTestMethodAsync, 0x24]\r\n- [InvokeTestMethodAsync, 0x37]\r\n- [MoveNext, 0x168]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [\u003cRunAsync\u003eb__47_0, 0x1C]\r\n- [MoveNext, 0x14]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x24]\r\n- [RunAsync, 0x12]\r\n- [InvokeTestMethodAsync, 0x36]\r\n- [MoveNext, 0x79]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [InvokeTestAsync, 0x24]\r\n- [\u003cRunAsync\u003eb__0, 0x0]\r\n- [MoveNext, 0x14]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x24]\r\n- [MoveNext, 0x113]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x1C]\r\n- [RunTestAsync, 0x0]\r\n- [MoveNext, 0xB8]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x1C]\r\n- [RunAsync, 0x1E]\r\n- [RunTestCaseAsync, 0x1E]\r\n- [MoveNext, 0x4E]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunTestCasesAsync, 0x1C]\r\n- [MoveNext, 0x59]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x1C]\r\n- [RunTestMethodAsync, 0x2D]\r\n- [MoveNext, 0x120]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunTestMethodsAsync, 0x1C]\r\n- [MoveNext, 0xBE]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x1C]\r\n- [RunTestClassAsync, 0x31]\r\n- [MoveNext, 0x77]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunTestClassesAsync, 0x1C]\r\n- [MoveNext, 0xBE]\r\n- [Start, 0x28]\r\n- [Start, 0x0]\r\n- [RunAsync, 0x1C]\r\n- [RunTestCollectionAsync, 0x21]\r\n- [\u003cRunTestCollectionsAsync\u003eb__2, 0x0]\r\n- [InnerInvoke, 0xF]\r\n- [\u003c.cctor\u003eb__272_0, 0x0]\r\n- [RunInternal, 0x40]\r\n- [ExecuteWithThreadLocal, 0x96]\r\n- [ExecuteEntry, 0x36]\r\n- [\u003c.cctor\u003eb__8_0, 0x0]\r\n- [RunOnSyncContext, 0xB]\r\n- [\u003cWorkerThreadProc\u003eb__0, 0x0]\r\n- [RunInternal, 0x40]\r\n- [WorkerThreadProc, 0x7C]\r\n- [\u003cQueueUserWorkItem\u003eb__5_0, 0x7]\r\n- [InnerInvoke, 0x25]\r\n- [\u003c.cctor\u003eb__272_0, 0x0]\r\n- [RunInternal, 0x40]\r\n- [ExecuteWithThreadLocal, 0x96]\r\n- [ExecuteEntryUnsafe, 0x2B]\r\n- [\u003c.cctor\u003eb__10_0, 0x0]\r\n- [StartCallback, 0xE]\r\nEnd Checking Thread Frames:\r\nEnd Observing Exception: System.Exception\r\n```\r\n\r\nOutput from the passing (`OutsideCatch`) test:\r\n```\r\nBegin Observing Exception: System.NotImplementedException\r\nThrowing Frame: [ThrowAndCatchEclipsingExceptionOutsideCatch, 0xA]\r\nBegin Checking Thread Frames:\r\n- [ValidateExceptionStackFrame, 0xB5]\r\n- [FirstChanceExceptionCallback, 0x41]\r\n- [\u003cExceptionCallStack_OutsideCatch\u003eb__0, 0x6]\r\n- [ThrowAndCatchEclipsingExceptionOutsideCatch, 0xA]\r\nEnd Checking Thread Frames:\r\nEnd Observing Exception: System.NotImplementedException\r\nBegin Observing Exception: System.Exception\r\nThrowing Frame: [ThrowAndCatchEclipsingExceptionOutsideCatch, 0x19]\r\nBegin Checking Thread Frames:\r\n- [ValidateExceptionStackFrame, 0xB5]\r\n- [FirstChanceExceptionCallback, 0x41]\r\n- [\u003cExceptionCallStack_OutsideCatch\u003eb__0, 0x6]\r\n- [ThrowAndCatchEclipsingExceptionOutsideCatch, 0x19]\r\nEnd Checking Thread Frames:\r\nEnd Observing Exception: System.Exception\r\n```\n\n### Expected behavior\n\nWhen `Exception1` is caught, wrapped in `Exception2`, and `Exception2` is thrown from within the catch block, the callstack for `Exception2` should be present.\n\n### Actual behavior\n\nWhen `Exception1` is caught, wrapped in `Exception2`, and `Exception2` is thrown from within the catch block, the callstack for `Exception2` is missing.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nIn the context of collecting exceptions using the `dotnet-monitor` tool (see [here](https://github.com/dotnet/dotnet-monitor/blob/main/src/Microsoft.Diagnostics.Monitoring.StartupHook/Exceptions/Pipeline/Steps/ExceptionEventsPipelineStep.cs#L106)), we currently check both the method and the offset of the frames to compute the callstack. For the outer exceptions, the methods do seem to match, but the offsets do not.\r\n\r\n**What we could do**\r\nIf there isn\u0027t a strict match between any frames, we could look for the \"closest\" match by only checking that the methods match - note that this solution won\u0027t necessarily be able to handle situations where multiple frames are from the same method, because there would be several matches and we would be unable to distinguish which one is the right match.\n\n### Configuration\n\nWe added a [test](https://github.com/dotnet/dotnet-monitor/pull/5193) to exercise this scenario in dotnet-monitor\u0027s CI pipeline - it appears that the test passed only on x86. It also appears to fail on .NET6/7/8.\r\n\r\nThe test expects `dotnet-monitor` to get exceptions, and we validate that the outer exception has a callstack - the assertion fails because the callstack is empty (see [here](https://github.com/dotnet/dotnet-monitor/pull/5193/files#diff-fe7e4fc4a236e0958d64bc3452bc3bae24683b26490615aebf72d77724826f0cR348)).\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Missing Callstack Information For Outer Exception Thrown Within Catch Block",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97181",
        "createdAt":  "2024-01-18T22:42:33Z",
        "number":  97181,
        "author":  "rchoffardet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T20:30:35Z",
        "body":  "### Description\r\n\r\nI don\u0027t know if that\u0027s expected. Feel free to close the issue if it is.\r\n\r\nWe identified some thread contention while throwing and catching exceptions on multiple threads.\r\nThe methodology was to simply throw 10_000 exceptions in a multithreaded context. I was expecting that the CPU time spent per exception would stay relatively stable but it\u0027s increasing instead. If you do the same thing with method calls, the CPU time per calls stays flat. \r\n\r\n### Configuration\r\n\r\n Windows 11 (10.0.22631.3007/23H2/2023Update/SunValley3)\r\n12th Gen Intel Core i7-12700H, 1 CPU, 20 logical and 14 physical cores\r\n.NET 8.0.0 (8.0.23.53103), X64 RyuJIT AVX2\r\n\r\n### Regression?\r\n\r\nI don\u0027t know\r\n\r\n### Data\r\n#### Code\r\nhttps://gist.github.com/rchoffardet/228f4bf1892e403c65487fcfe46afe35\r\n#### Result\r\n![image](https://github.com/dotnet/runtime/assets/5098668/71cf4514-0899-44e1-b860-4d46cf599ac4)\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtY9pUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xNZPr",
                                           "createdAt":  "2024-01-18T22:42:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI don\u0027t know if that\u0027s expected. Feel free to close the issue if it is.\r\n\r\nWe identified some thread contention while throwing and catching exceptions on multiple threads.\r\nThe methodology was to simply throw 10_000 exceptions in a multithreaded context. I was expecting that the CPU time spent per exception would stay relatively stable but it\u0027s increasing instead. If you do the same thing with method calls, the CPU time per calls stays flat. \r\n\r\n### Configuration\r\n\r\n Windows 11 (10.0.22631.3007/23H2/2023Update/SunValley3)\r\n12th Gen Intel Core i7-12700H, 1 CPU, 20 logical and 14 physical cores\r\n.NET 8.0.0 (8.0.23.53103), X64 RyuJIT AVX2\r\n\r\n### Regression?\r\n\r\nI don\u0027t know\r\n\r\n### Data\r\n#### Code\r\nhttps://gist.github.com/rchoffardet/228f4bf1892e403c65487fcfe46afe35\r\n#### Result\r\n![image](https://github.com/dotnet/runtime/assets/5098668/71cf4514-0899-44e1-b860-4d46cf599ac4)\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erchoffardet\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Threading`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-18T22:42:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xSgvi",
                                           "createdAt":  "2024-01-19T15:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@rchoffardet thank you for the test and reported issue! There is a global lock in the exception stack trace building, maybe that\u0027s the source of the contention identified by the attached test. It is something I am planning to get rid of. I\u0027ll run the test locally to get full understanding of where the issue is.",
                                           "updatedAt":  "2024-01-19T15:58:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xSqZZ",
                                           "createdAt":  "2024-01-19T16:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rchoffardet",
                                           "body":  "Alongside my tests, I noticed that when I retrieve the stack trace, it takes more time and it allocates more, so I naively thought that the stack trace wouldn\u0027t be build if not requested. Maybe that\u0027s related to the string building and not the stack trace itself.",
                                           "updatedAt":  "2024-07-30T11:36:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fv8oq",
                                           "createdAt":  "2024-07-22T22:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The repro has a bug. It doesn\u0027t zero the totalTimeNs after each run for a specific thread count, so the result just keeps accumulating the time. After fixing it, the results were more or less the same (growing very slightly) for the number of threads upto the # of cores on Windows. On Linux, the results are growing with thread count though, that\u0027s worth looking into.",
                                           "updatedAt":  "2024-07-22T22:46:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F92uf",
                                           "createdAt":  "2024-07-24T10:48:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rchoffardet",
                                           "body":  "Sorry about that, I \"extracted\" this gist from a bigger script and made mistakes along the way. It should be fixed now.\r\nI might be missing something as I still have growing numbers on Windows / .NET 9.0.0 preview 6.\r\nCould you share your fix? ",
                                           "updatedAt":  "2024-07-24T10:48:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GBspk",
                                           "createdAt":  "2024-07-24T17:50:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "My fix was to set totalTimeNS=0 after the Console.WriteLine, which should effectively have the same effect as your fix. \r\nAs for the performance, it is interesting though. This is from my AMD Ryzen 5 5600X 6-Core Processor:\r\n```\r\n2924,37\r\n3271,7\r\n3037,3133333333335\r\n3272,7475\r\n3481,018\r\n3965,5066666666667\r\n```\r\nAnd this is from my Intel  i9-9900X 10 physical cores CPU :\r\n```\r\n3764.84\r\n4649.17\r\n5072.29\r\n5374.31\r\n7517.652\r\n6482.285\r\n10037.368571428571\r\n10261.98375\r\n8214.833333333334\r\n9332.818\r\n```\r\nClearly, the intel is scaling worse than AMD here, I was testing it on the AMD before",
                                           "updatedAt":  "2024-07-24T17:53:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GTUIC",
                                           "createdAt":  "2024-07-26T17:44:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsGgYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rchoffardet",
                                                                               "createdAt":  "2024-07-30T11:35:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Moving further investigations to 10 since we don\u0027t have time left for it in the 9 timeframe and it is not critical.",
                                           "updatedAt":  "2024-07-26T17:44:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61j2lR",
                                           "createdAt":  "2025-07-07T17:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli, is this still an issue with new - EH? ",
                                           "updatedAt":  "2025-07-07T17:56:43Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Thread contention while throwing and catching exceptions",
        "labels":  [
                       "tenet-performance",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98477",
        "createdAt":  "2024-02-15T07:40:40Z",
        "number":  98477,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T20:32:41Z",
        "body":  "Stackoverflow on macOS x64 can cause infinite memory allocation loop. See #97049 for repro and other context.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc_yHAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5z_IcC",
                                           "createdAt":  "2024-02-15T11:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The infinite loop is caused by an insufficient stack size allocated for the stack overflow handling. We allocate 32kB out of which 4kB is a guard page (on x64). The frames on the stack contain large data structures and that end up resulting in stack overflow again in `unw_step` when the code is unwinding to the first managed frame. Maybe some recent update in the apple libunwind has caused that it tripped the line. There also seems to be a bug in the `___chkstk_darwin` that probes too deep (effectively twice the requested amount - it first correctly probes page by page the requested amount, but at the end it probes the requested size below the lowest address is has probed before). That can prevent us from detecting it as a stack overflow, as the probe then goes below the guard page we create.",
                                           "updatedAt":  "2024-02-15T12:54:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Stackoverflow on macOS x64 hangs",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99977",
        "createdAt":  "2024-03-19T19:21:33Z",
        "number":  99977,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T21:59:52Z",
        "body":  "This is related to https://github.com/dotnet/diagnostics/issues/4259 and https://github.com/dotnet/diagnostics/issues/4551\r\n\r\nSOS is an LLDB plugin that is hosts a CoreCLR runtime.  It have been failing to work on recent versions of macOS / Xcode, and in Sonoma macOS 14.4 loading the plugin actually kills the LLDB process entirely (see https://github.com/dotnet/diagnostics/issues/4551)\r\n\r\nI have only tried on osx-arm64.  SIP is not disabled\r\n\r\nI have created a standalone repro https://github.com/lambdageek/repro-coreclr-lldb\r\n\r\nBuild:\r\n\r\n```console\r\n$ cmake -B out -S .\r\n$ cmake --build out\r\n```\r\n\r\nRun:\r\n\r\n```console\r\n$ lldb -b -o \"plugin load ./out/libhihost.dylib\"\r\n(lldb) plugin load ./out/libhihost.dylib\r\nHello from C\r\nhostfxr path is /Users/alklig/work/hihost/out/libhostfxr.dylib\r\nrunning with dotnet root /Users/alklig/work/hihost/out/\r\ncoreclr initialized\r\nzsh: killed     lldb -b -o \"plugin load ./out/libhihost.dylib\"\r\n```\r\n\r\nThe above happens with macOS Sonoma 14.4.  With 14.3, you get a bit further, but the runtime will still fail to initialize.\r\n\r\nIn https://github.com/dotnet/diagnostics/issues/4551 we found a workaround to at least get past the whole LLDB process aborting, by passing `PAL_MachExceptionMode=7`\r\n\r\n\r\n```console\r\n$ PAL_MachExceptionMode=7 lldb -b -o \"plugin load ./out/libhihost.dylib\"\r\n(lldb) plugin load ./out/libhihost.dylib\r\nHello from C\r\nhostfxr path is /Users/alklig/work/hihost/out/libhostfxr.dylib\r\nrunning with dotnet root /Users/alklig/work/hihost/out/\r\ncoreclr initialized\r\nhost says: Failed to create CoreCLR, HRESULT: 0x8007000C\r\nhostfxr_run_app finished\r\n```\r\n\r\nExpected output (compare with a \"normal\" hardened runtime macOS app):\r\n\r\n```console\r\n$ ./out/runmyself\r\nHello from C\r\nhostfxr path is /Users/alklig/work/hihost/out/libhostfxr.dylib\r\nrunning with dotnet root /Users/alklig/work/hihost/out/\r\ncoreclr initialized\r\nHello from C#\r\nhostfxr_run_app finished\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd8mjiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53ru1z",
                                           "createdAt":  "2024-03-19T19:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-19T19:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53rvmS",
                                           "createdAt":  "2024-03-19T19:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "This is likely not a hosting issue.  See also https://github.com/dotnet/runtime/issues/99172 - the LLDB environment is sufficiently different that some runtime functionality (for example messing with VM page protections in order to initialize the stack guard cookie) just doesn\u0027t succeed.\r\n",
                                           "updatedAt":  "2024-03-19T19:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53ryHg",
                                           "createdAt":  "2024-03-19T19:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "if you run without the `PAL_MachExceptionMode` workaround, `Console.app` shows a bit of what went wrong:\r\n\r\n```\r\nProcess:               lldb [16099]\r\nPath:                  /Applications/Xcode-15.3.0.app/Contents/Developer/usr/bin/lldb\r\nIdentifier:            lldb\r\nVersion:               ???\r\nCode Type:             ARM-64 (Native)\r\nParent Process:        zsh [68922]\r\nResponsible:           iTerm2 [731]\r\nUser ID:               501\r\n\r\nDate/Time:             2024-03-19 15:14:23.4631 -0400\r\nOS Version:            macOS 14.4 (23E214)\r\nReport Version:        12\r\nAnonymous UUID:        1143D3D0-7711-BC35-8E10-8642D5EAA935\r\n\r\nSleep/Wake UUID:       E0C87088-29D9-4EEE-A407-0796A7947768\r\n\r\nTime Awake Since Boot: 22000 seconds\r\nTime Since Wake:       9821 seconds\r\n\r\nSystem Integrity Protection: enabled\r\n\r\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\r\n\r\nException Type:        EXC_GUARD (SIGKILL)\r\nException Codes:       GUARD_TYPE_MACH_PORT\r\nException Codes:       0x00000000000227d0, 0x0000000000000000\r\n\r\nTermination Reason:    Namespace GUARD, Code 2305843036766218192 \r\n\r\nThread 0 Crashed::  Dispatch queue: com.apple.main-thread\r\n0   libsystem_kernel.dylib        \t       0x196cfa1f4 mach_msg2_trap + 8\r\n1   libsystem_kernel.dylib        \t       0x196d0cb24 mach_msg2_internal + 80\r\n2   libsystem_kernel.dylib        \t       0x196d29db0 thread_swap_exception_ports + 368\r\n3   libcoreclr.dylib              \t       0x10450faa4 CorUnix::CPalThread::EnableMachExceptions() + 108\r\n4   libcoreclr.dylib              \t       0x10450e75c CorUnix::CreateThreadData(CorUnix::CPalThread**) + 280\r\n5   libcoreclr.dylib              \t       0x1044e8508 Initialize(int, char const* const*, unsigned int) + 1244\r\n6   libcoreclr.dylib              \t       0x1044e8964 PAL_InitializeCoreCLR + 60\r\n7   libcoreclr.dylib              \t       0x104512758 coreclr_initialize + 500\r\n8   libhostpolicy.dylib           \t       0x10350acd8 coreclr_t::create(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e const\u0026, char const*, char const*, coreclr_property_bag_t const\u0026, std::__1::unique_ptr\u003ccoreclr_t, std::__1::default_delete\u003ccoreclr_t\u003e\u003e\u0026) + 392\r\n9   libhostpolicy.dylib           \t       0x103522e88 (anonymous namespace)::create_coreclr() + 424\r\n10  libhostfxr.dylib              \t       0x103454bf8 fx_muxer_t::run_app(host_context_t*) + 448\r\n11  libhihost.dylib               \t       0x1027a3c60 start_runtime + 596\r\n12  libhihost.dylib               \t       0x1027a37f4 lldb::PluginInitialize(lldb::SBDebugger) + 144\r\n13  LLDB                          \t       0x115678c68 lldb::SBDebugger::InitializeWithErrorHandling()::$_0::__invoke(std::__1::shared_ptr\u003clldb_private::Debugger\u003e const\u0026, lldb_private::FileSpec const\u0026, lldb_private::Status\u0026) + 244\r\n14  LLDB                          \t       0x115821850 lldb_private::Debugger::LoadPlugin(lldb_private::FileSpec const\u0026, lldb_private::Status\u0026) + 92\r\n15  LLDB                          \t       0x115f3ebf8 CommandObjectPluginLoad::DoExecute(lldb_private::Args\u0026, lldb_private::CommandReturnObject\u0026) + 164\r\n16  LLDB                          \t       0x115910de4 lldb_private::CommandObjectParsed::Execute(char const*, lldb_private::CommandReturnObject\u0026) + 660\r\n17  LLDB                          \t       0x115907734 lldb_private::CommandInterpreter::HandleCommand(char const*, lldb_private::LazyBool, lldb_private::CommandReturnObject\u0026, bool) + 2172\r\n18  LLDB                          \t       0x11590b0d4 lldb_private::CommandInterpreter::IOHandlerInputComplete(lldb_private::IOHandler\u0026, std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e\u0026) + 828\r\n19  LLDB                          \t       0x1158407a4 lldb_private::IOHandlerEditline::Run() + 304\r\n20  LLDB                          \t       0x115823fe0 lldb_private::Debugger::RunIOHandlers() + 140\r\n21  LLDB                          \t       0x11590c320 lldb_private::CommandInterpreter::RunCommandInterpreter(lldb_private::CommandInterpreterRunOptions\u0026) + 196\r\n22  LLDB                          \t       0x115675510 lldb::SBDebugger::RunCommandInterpreter(lldb::SBCommandInterpreterRunOptions const\u0026) + 112\r\n23  lldb                          \t       0x10236b96c Driver::MainLoop() + 2700\r\n24  lldb                          \t       0x10236c634 main + 2040\r\n25  dyld                          \t       0x1969b20e0 start + 2360\r\n```\r\n",
                                           "updatedAt":  "2024-03-19T19:31:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53yaOI",
                                           "createdAt":  "2024-03-20T14:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbsnUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2024-03-20T14:38:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2024-03-24T21:00:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I can actually see another mode of this issue on my 14.4 (SIP disabled). The same failure `GUARD_TYPE_MACH_PORT` occurs when we call `thread_set_state` during hardware exception handling in the plugin in the `SEHExceptionThread` function. So it seems that with SIP disabled, we can pass the PAL initialization, but we crash there. In this case, we are injecting exception handler code into the target thread and since the thread belongs to lldb, it kind of makes sense it may have it guarded.\r\n",
                                           "updatedAt":  "2024-03-20T14:26:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[macOS] Hosting CoreCLR inside an LLDB plugin fails to initialize the runtime",
        "labels":  [
                       "arch-arm64",
                       "os-mac-os-x",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101560",
        "createdAt":  "2024-04-25T17:45:34Z",
        "number":  101560,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMaLbg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkotas",
                                            "createdAt":  "2024-04-25T20:05:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cwensley",
                                            "createdAt":  "2024-04-25T20:24:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nxrighthere",
                                            "createdAt":  "2024-04-26T00:24:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HalidCisse",
                                            "createdAt":  "2024-04-26T05:58:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-04-26T12:59:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2024-04-27T12:23:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2024-04-27T13:15:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladimir-cheverdyuk-altium",
                                            "createdAt":  "2024-05-09T20:24:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msackton",
                                            "createdAt":  "2024-05-14T18:00:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akravch",
                                            "createdAt":  "2024-05-29T08:00:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2024-06-10T14:55:38Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "kevingosse",
                                            "createdAt":  "2024-06-10T15:48:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jozefizso",
                                            "createdAt":  "2024-06-10T15:59:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "miszu",
                                            "createdAt":  "2024-07-19T11:19:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2024-09-05T21:38:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "UnityAlex",
                                            "createdAt":  "2024-10-22T20:11:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-11-14T12:32:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2024-11-15T09:11:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Symbai",
                                            "createdAt":  "2024-11-30T04:59:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "whiskhub",
                                            "createdAt":  "2025-01-28T20:23:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TFlippy",
                                            "createdAt":  "2025-02-19T03:32:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2025-02-24T03:52:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mlancione",
                                            "createdAt":  "2025-03-21T13:23:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "goaaats",
                                            "createdAt":  "2025-03-29T19:26:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2025-04-03T00:46:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elgonzo",
                                            "createdAt":  "2025-06-14T16:42:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "harbingerftw",
                                            "createdAt":  "2025-08-11T07:20:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rogihee",
                                            "createdAt":  "2025-08-11T23:55:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2025-08-24T06:27:00Z"
                                        }
                                    ],
                          "totalCount":  29
                      },
        "updatedAt":  "2025-08-29T16:09:54Z",
        "body":  "Re: The previous proposal and a discussion that led to this proposal - (https://github.com/dotnet/runtime/issues/42275)\r\n\r\n## Background and motivation  \r\n\r\nThe current default behavior in a case of unhandled exception is termination of a process. \r\nThe current default behavior in a case of a fatal error is print exception to console and invoke Watson/CrashDump.\r\n\r\nWhile satisfactory to the majority of uses, the scheme is not flexible enough for some classes of scenarios. \r\n\r\nScenarios like Designers, REPLs or game scripting that host user provided code are not able to handle unhandled exceptions thrown by the user provided code. Unhandled exceptions on finalizer thread, threadpool threads or user created threads will take down the whole process. This is not desirable experience for these types of scenarios. \r\n\r\nIn addition, there are customers that have existing infrastructure for postmortem analysis of failures and inclusion of .NET components requires interfacing with or overriding the way the fatal errors are handled.\r\n\r\n## API Proposal\r\n\r\n### API for process-wide handling of unhandled exception\r\n\r\n```cs\r\nnamespace System.Runtime.ExceptionServices\r\n{\r\n    public delegate bool UnhandledExceptionHandler(System.Exception exception);\r\n\r\n    public static class ExceptionHandling\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Sets a handler for unhandled exceptions.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cexception cref=\"ArgumentNullException\"\u003eIf handler is null\u003c/exception\u003e\r\n        /// \u003cexception cref=\"InvalidOperationException\"\u003eIf a handler is already set\u003c/exception\u003e\r\n        public static void SetUnhandledExceptionHandler(UnhandledExceptionHandler handler);\r\n    }\r\n}\r\n```\r\n\r\nThe semantics of unhandled exception handler follows the model of imaginary handler like the following inserted in places where the exception will not lead to process termination regardless of what `handler()` returns. \r\n\r\n```cs\r\ntry { UserCode(); } catch (Exception ex) when handler(ex){};\r\n```\r\nIn particular: \r\n- only exceptions that can be caught and ignored will cause the handler to be invoked. (i.e. stack overflow will not)\r\n- an unhandled exception thrown in a handler will not invoke the handler, but will be treated as returning `false`.\r\n- when an exception is handled via a handler in a user-started thread, the thread will still exit (but not escalate to process termination)\r\n- when an exception is handled in a task-like scenario on an infrastructure thread (thread pool, finalizer queue...), the execution of tasks will continue. \r\n(Whether the infrastructure thread continues or restarted is unspecified, but the process should be able to proceed)\r\n- a reverse pinvoke will not install the try/catch like above.\r\n- `main()` will not install the try/catch like above\r\n\r\n\r\n### API Proposal for custom handling of fatal errors\r\n\r\nManaged API to set up the handler.\r\n```cs\r\nnamespace System.Runtime.ExceptionServices\r\n{\r\n    public static class ExceptionHandling\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// .NET runtime is going to call `fatalErrorHandler` set by this method before its own\r\n        /// fatal error handling (creating .NET runtime-specific crash dump, etc.).\r\n        /// \u003c/summary\u003e\r\n        /// \u003cexception cref=\"ArgumentNullException\"\u003eIf fatalErrorHandler is null\u003c/exception\u003e\r\n        /// \u003cexception cref=\"InvalidOperationException\"\u003eIf a handler is already set\u003c/exception\u003e\r\n        public static void SetFatalErrorHandler(delegate* unmanaged\u003cint, void*, int\u003e fatalErrorHandler);\r\n    }\r\n}\r\n```\r\nThe shape of the FatalErrorHandler, if implemented in c++\r\n(the default calling convention for the given platform is used) \r\n```c\r\n// expected signature of the handler\r\nFatalErrorHandlerResult FatalErrorHandler(int32_t hresult, struct FatalErrorInfo* data);\r\n```\r\n\r\nWith `FatalErrorHandlerResult` and `FatalErrorInfo` defined in \"FatalErrorHandling.h\" under [src/native/public](https://github.com/dotnet/runtime/tree/main/src/native/public):\r\n\r\n```c\r\nenum FatalErrorHandlerResult : int32_t\r\n{\r\n    RunDefaultHandler = 0,\r\n    SkipDefaultHandler = 1,\r\n};\r\n\r\n#if defined(_MSC_VER) \u0026\u0026 defined(_M_IX86)\r\n#define DOTNET_CALLCONV __stdcall\r\n#else\r\n#define DOTNET_CALLCONV\r\n#endif\r\n\r\nstruct FatalErrorInfo\r\n{\r\n    size_t size;    // size of the FatalErrorInfo instance\r\n    void*  address; // code location correlated with the failure (i.e. location where FailFast was called)\r\n\r\n    // exception/signal information, if available\r\n    void* info;     // Cast to PEXCEPTION_RECORD on Windows or siginfo_t* on non-Windows.\r\n    void* context;  // Cast to PCONTEXT on Windows or ucontext_t* on non-Windows.\r\n\r\n    // An entry point for logging additional information about the crash.\r\n    // As runtime finds information suitable for logging, it will invoke pfnLogAction and pass the information in logString.\r\n    // The callback may be called multiple times.\r\n    // Combined, the logString will contain the same parts as in the console output of the default crash handler.\r\n    // The errorLog string will have UTF-8 encoding.\r\n    void (DOTNET_CALLCONV *pfnGetFatalErrorLog)(\r\n           FatalErrorInfo* errorData, \r\n           void (DOTNET_CALLCONV *pfnLogAction)(char8_t* logString, void *userContext), \r\n           void* userContext);\r\n\r\n    // More information can be exposed for querying in the future by adding\r\n    // entry points with similar pattern as in pfnGetFatalErrorLog\r\n};\r\n\r\n```\r\n\r\n## API Usage\r\n\r\n### Setting up a handler for unhandled exceptions:\r\n```cs\r\nusing System.Runtime.ExceptionServices;\r\n\r\nExceptionHandling.SetUnhandledExceptionHandler(\r\n    (ex) =\u003e\r\n    {\r\n        if (DesignMode)\r\n        {\r\n            DisplayException(ex);\r\n            // the exception is now \"handled\"\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n);\r\n```\r\n\r\n### Setting up a handler for fatal errors:\r\n\r\nSetting up the handler for the process (C# code in the actual app):\r\n```cs\r\ninternal unsafe class Program\r\n{\r\n    [DllImport(\"myCustomCrashHandler.dll\")]\r\n    public static extern delegate* unmanaged\u003cint, void*, int\u003e GetFatalErrorHandler();\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        ExceptionHandling.SetFatalErrorHandler(GetFatalErrorHandler());\r\n\r\n        RunMyProgram();\r\n    }\r\n}\r\n```\r\n\r\nThe handler. (c++ in `myCustomCrashHandler.dll`)\r\n```c\r\n#include \"FatalErrorHandling.h\"\r\n\r\nstatic FatalErrorHandlerResult FatalErrorHandler(int32_t hresult, struct FatalErrorInfo* data)\r\n{\r\n    // this is a special handler that analyzes OOM crashes\r\n    if (hresult != COR_E_OUTOFMEMORY)\r\n    {\r\n        return FatalErrorHandlerResult::RunDefaultHandler;\r\n    }\r\n\r\n    DoSomeCustomProcessingOfOOM(data);\r\n\r\n    // retain the additional error data\r\n    data-\u003epfnGetFatalErrorLog(data, \u0026LogErrorMessage, NULL);\r\n\r\n    // no need for a huge crash dump after an OOM.\r\n    return FatalErrorHandlerResult::SkipDefaultHandler;\r\n}\r\n\r\nstatic void LogErrorMessage(char8_t* logString, void *userContext)\r\n{\r\n    AppendToBlob(logString);\r\n}\r\n\r\nextern \"C\" DLL_EXPORT void* GetFatalErrorHandler()\r\n{\r\n    return \u0026FatalErrorHandler;\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\nUnmanaged hosting API that enables this behavior. (CoreCLR has undocumented and poorly tested configuration option for this today. #39587. This option is going to be replaced by this API.)\r\n\r\nExtending `AppDomain.CurrentDomain.UnhandledException` API and make `IsTerminating` property writeable to allow \"handling\". \r\nUpon scanning the existing use of this API it was found that `IsTerminating` is often used as a fact - whether an exception is terminal or not. Changing the behavior to mean \"configurable\" will be a breaking change to those uses.\r\n\r\n### Risks\r\n\r\nThis APIs can be abused to ignore unhandled exceptions or fatal errors in scenarios where it is not warranted.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk6duQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc572kOu",
                                           "createdAt":  "2024-04-25T18:26:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfkbDw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2024-04-25T18:33:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e `FatalErrorHandlerResult FatalErrorHandler(int32_t hresult, struct FatalErrorInfo* data);`\r\n\r\nDefines `int32_t`, but the C# function pointer in `SetFatalErrorHandler()` defined `uint`. I assume both should be signed.",
                                           "updatedAt":  "2024-04-25T18:26:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc573dvw",
                                           "createdAt":  "2024-04-25T20:40:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfmGZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2024-04-26T00:12:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I wonder if having the messages etc. as 16 bit strings is the right way. Our coreclr_xxx hosting APIs use 8 bit (UTF-8) strings so that users on Unix don\u0027t have to convert them using some external library. 16 bit strings are very unusual on Unix and on Windows, it is trivial to do the conversion if needed thanks to the Windows APIs.",
                                           "updatedAt":  "2024-04-25T20:40:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc573jSv",
                                           "createdAt":  "2024-04-25T20:54:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "We had to choose between `char_t` and `char16_t`. See: https://github.com/dotnet/runtime/issues/42275#issuecomment-2073114120\r\n\r\nThe key observations were -\r\n* unlike hosting, where strings originate from the native host and thus in the platform-specific form, these originate from the runtime and they are in UTF-16 form. \r\n* the process might be in somewhat precarious state, so we\u0027d like to minimize the work that is done \"inline\". \r\nFor example the strings could be uninteresting to the given handler anyways, or could be stored as-is and converted later.",
                                           "updatedAt":  "2024-04-25T21:15:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc573s63",
                                           "createdAt":  "2024-04-25T21:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "In case the native handler on Unix would want to do anything sensible with these strings, even just writing them to a text log file, I think it would most likely need to convert them. In the runtime, we can easily convert them into stack allocated buffers without disturbing the process state. I still think it would be better if whatever string enters or leaves the runtime from the native side was 8 bit. Similar to the hosting APIs, it would add a little overhead for the handler on Windows, but much less than the overhead that would otherwise be needed on Unix. \r\nI am not sure I understand the comment in the other issue on a need to have some PAL definitions if we went with 8 bit strings.",
                                           "updatedAt":  "2024-04-25T21:23:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc573vv8",
                                           "createdAt":  "2024-04-25T21:33:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e I am not sure I understand the comment in the other issue on a need to have some PAL definitions if we went with 8 bit strings.\r\n\r\nThe approach in question was to have a `char_t` that represented `wchar_t` on Windows and `char` on non-Windows. If we wanted to make it always UTF-8, I could get behind that. That seems rather annoying, but I do get it. My desire is to avoid any sort of PAL types that users would need to think about. Casting doesn\u0027t concern me, but encoding types in signatures or data structures would be a red flag to me.",
                                           "updatedAt":  "2024-04-25T21:33:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5790JA",
                                           "createdAt":  "2024-04-26T17:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "How complex is UTF-16 to UTF-8 conversion? Is there IO or allocations?",
                                           "updatedAt":  "2024-04-26T17:31:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57972p",
                                           "createdAt":  "2024-04-26T17:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e How complex is UTF-16 to UTF-8 conversion? Is there IO or allocations?\r\n\r\nThere will be allocations for sure. The IO is nil or very limited if done from managed code if I recall. The native side trans-coding is also new and I believe avoids IO. It isn\u0027t the worst idea if it is just for logging. The tricky bit is if the callback comes back into managed though - that is my biggest concern.",
                                           "updatedAt":  "2024-04-26T17:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57-Axq",
                                           "createdAt":  "2024-04-26T18:04:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7A51g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-04-26T18:04:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ForNeVeR",
                                                                               "createdAt":  "2024-11-15T09:12:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e How complex is UTF-16 to UTF-8 conversion? Is there IO or allocations?\r\n\r\nIt can be ~100 - ~1000 lines depending on how optimized implementation you want. The problem is that there is no broadly available standardized method to do this conversion on non-Windows platforms, so everybody using this API on non-Windows would have to copy the conversion routine from somewhere. \r\n\r\nAs a (usability) test for this API, you can write a sample handler that produces .json that captures the failure details (similar to .json that is produced by native AOT crash handler today). You will hit the UTF16 conversion problem pretty much immediately.\r\n\r\n\u003e The tricky bit is if the callback comes back into managed though - that is my biggest concern.\r\n\r\nCalling managed implementation is not an option for the crash handlers.",
                                           "updatedAt":  "2024-04-26T18:04:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57-BEb",
                                           "createdAt":  "2024-04-26T18:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfsZAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-04-26T18:05:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e There will be allocations for sure. The IO is nil or very limited if done from managed code if I recall. The native side trans-coding is also new and I believe avoids IO. It isn\u0027t the worst idea if it is just for logging. The tricky bit is if the callback comes back into managed though - that is my biggest concern.\r\n\r\nIf a string comes from native assert (like from GC), running managed code might not be an option. \r\nI assumed the conversion can be done completely in native code.",
                                           "updatedAt":  "2024-04-26T18:04:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57-Cyg",
                                           "createdAt":  "2024-04-26T18:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e The problem is that there is no broadly available standardized method to do this conversion on non-Windows platforms\r\n\r\nRight, they will likely need to use ICU or some other library.\r\n\r\n\u003e\u003e The tricky bit is if the callback comes back into managed though - that is my biggest concern.\r\n\r\n\u003e Calling managed implementation is not an option for the crash handlers.\r\n\r\nExcellent\r\n\r\n\u003e You will hit the UTF16 conversion problem pretty much immediately.\r\n\r\nFair. This implies UTF-8 should be the preference then.",
                                           "updatedAt":  "2024-04-26T18:07:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57-D21",
                                           "createdAt":  "2024-04-26T18:08:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e It can be ~100 - ~1000 lines depending on how optimized implementation you want. The problem is that there is no broadly available standardized method to do this conversion on non-Windows platforms, so everybody using this API on non-Windows would have to copy the conversion routine from somewhere.\r\n\r\nThat is not too bad. \r\nSince this is a crash handling and strings are not expected to be huge, I\u0027d optimize for reliability. (avoiding IO, allocations, syscalls, if possible - the process might have crashed, but who knows what locks are still held and such...)\r\n",
                                           "updatedAt":  "2024-04-26T18:11:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57-JAG",
                                           "createdAt":  "2024-04-26T18:14:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Right, they will likely need to use ICU or some other library.\r\n\r\nICU is big, complicated library. It is not something you want to depend on in a crash handler. I think that the most appropriate solution would be to include source for the simplest possible conversion from somewhere.",
                                           "updatedAt":  "2024-04-26T18:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57-QBz",
                                           "createdAt":  "2024-04-26T18:26:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladimir-cheverdyuk-altium",
                                           "body":  "Is it possible to get content of `char16_t* exceptionString; // for unhandled managed exceptions the result of \"ex.ToString()\"` by request? I believe that when `FatalErrorHandler` is called stack is still available.\r\n\r\nI suggest to do it on demand because it will create issues for `COR_E_OUTOFMEMORY` and also we had an issue that @jkotas helped us with COM when calling Exception.ToString considerably slowdown future COM calls. See #98788. ",
                                           "updatedAt":  "2024-04-26T18:26:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_S2b",
                                           "createdAt":  "2024-04-26T22:23:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf35Cg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-04-26T22:31:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "janvorli",
                                                                               "createdAt":  "2024-04-29T06:18:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "VSadov",
                                           "body":  "If conversion to UTF-8 is going to be needed in majority of scenarios (especially on Unix), I think we should do UTF-8 rather than expect that the end user will convert.\r\n\r\nI\u0027ll update the proposal to have `char8_t`.",
                                           "updatedAt":  "2024-04-26T22:45:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_WV4",
                                           "createdAt":  "2024-04-26T22:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e Is it possible to get content of char16_t* exceptionString; // for unhandled managed exceptions the result of \"ex.ToString()\" by request? I believe that when FatalErrorHandler is called stack is still available.\r\n\r\n`ex.ToString()` typically happens at the time when runtime finds that the exception is unhandled. By the time when the native crash handler runs, managed code would not be able to run. To have any chance to report that string it should be captured and stored earlier, while that is still possible. I do not think the string can be produced on request while handling a crash. \r\n\r\nOn the other hand, a fatal error can happen only once in the life of an app, so perhaps performance of this API will not be as critical as in scenarios that can repeat.  ",
                                           "updatedAt":  "2024-04-26T22:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58AD1f",
                                           "createdAt":  "2024-04-27T06:50:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@vladimir-cheverdyuk-altium has a good point about having an option to suppress computation of the textual stacktrace or doing other non-trivial operations if the crash handler is not interested in the information. Such non-trivial operations can hit secondary crashes or otherwise interfere with the diagnosability of the original unhandled exception. \r\n\r\nI had [similar concern](https://github.com/dotnet/runtime/issues/42275#issuecomment-2072997535) in the original discussion.",
                                           "updatedAt":  "2024-04-27T06:50:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58A_Ah",
                                           "createdAt":  "2024-04-27T13:14:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e they will likely need to use ICU or some other library.\r\n\r\nRuntime\u0027s implementation (which is pretty much standalone) could also be an option for users.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003ee.g. this test code\u003c/summary\u003e\r\n\r\n```c\r\n#include \u003cstdio.h\u003e\r\n#include \u003cerrno.h\u003e\r\n#include \u003cminipal/utf8.h\u003e\r\n\r\nsize_t wstrlen(CHAR16_T* str)\r\n{\r\n    size_t len = 0;\r\n    while (str[len++]);\r\n    return len;\r\n}\r\n\r\nvoid handleErrors()\r\n{\r\n    if (errno == MINIPAL_ERROR_INSUFFICIENT_BUFFER)\r\n    {\r\n        printf (\"Allocation failed (%d)\", errno);\r\n        abort();\r\n    }\r\n    else if (errno == MINIPAL_ERROR_NO_UNICODE_TRANSLATION)\r\n    {\r\n        printf (\"Illegal byte sequence encountered in the input. (%d)\", errno);\r\n        abort();\r\n    }\r\n}\r\n\r\nint main(void)\r\n{\r\n    CHAR16_T wstr[] = u\"ハローワールド! 👋 🌏\";\r\n    int wlen = wstrlen(wstr);\r\n\r\n    size_t mblen = minipal_get_length_utf16_to_utf8(wstr, wlen, 0);\r\n    handleErrors();\r\n\r\n    char* mbstr = (char *)malloc((mblen + 1) * sizeof(char));\r\n    size_t written = minipal_convert_utf16_to_utf8 (wstr, wlen, mbstr, mblen, 0);\r\n    handleErrors();\r\n\r\n    printf(\"Conversion completed. mblen: %zu, mbstr: %s\\n\", written, mbstr);\r\n\r\n    return 0;\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\ncan be built with sources acquired from tag link:\r\n```sh\r\n$ curl --create-dirs --output-dir external/minipal -sSLO \\\r\n    \"https://raw.githubusercontent.com/dotnet/runtime/v8.0.4/src/native/minipal/{utf8.c,utf8.h,utils.h}\"\r\n$ clang -Iexternal test.c external/minipal/utf8.c -o testutf8\r\n$ ./testutf8\r\nConversion completed. mblen: 33, mbstr: ハローワールド! 👋 🌏\r\n```",
                                           "updatedAt":  "2024-04-27T13:14:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58L3x2",
                                           "createdAt":  "2024-04-29T19:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e @vladimir-cheverdyuk-altium has a good point about having an option to suppress computation of the textual stacktrace or doing other non-trivial operations if the crash handler is not interested in the information. Such non-trivial operations can hit secondary crashes or otherwise interfere with the diagnosability of the original unhandled exception.\r\n\r\nAt the time of reporting the crash it would be too late to decide whether FailFast should have captured the exception message for the unhandled exception or not. \r\n\r\nWe could add a bool parameter to `SetFatalErrorHandler` that would have effect of suppressing that `ex.ToString` process-wide.\r\nThe result of that would be that the default crash processing will not have the string either - i.e. will not print it to console.\r\n\r\nThe benefits of that would be slightly faster handling of the crash and more robust behavior in case `ex.ToString` causes secondary errors.\r\n \r\nCases like OOM or stack overflow are always tricky. Also `ex.ToString` can do anything - like `throw this;`. \r\nIn most cases unhandled exceptions are just that - unhandled exceptions (null dereferences, file did not exist, ..) and getting exception message would be safe and useful. \r\n\r\nBasically - we can add a knob to `SetFatalErrorHandler` to suppress `ex.ToString` when installing the handler, but I wonder is there will be a lot of users for that. \r\n\r\nIs it really that often that `ex.ToString` can do really bad things (like stack overflow) and simply placing it inside `try/catch` will not make the scenario safe enough, that you\u0027d rather prefer to not see stack traces? ",
                                           "updatedAt":  "2024-04-29T19:18:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58MVQo",
                                           "createdAt":  "2024-04-29T20:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladimir-cheverdyuk-altium",
                                           "body":  "@VSadov \r\n\u003eAt the time of reporting the crash it would be too late to decide whether FailFast should have captured the exception message for the unhandled exception or not.\r\nI\u0027m not sure about FailFast but for regular exceptions I think exception stack should be available unless I\u0027m missing something.\r\n\r\nAs it was stated in https://github.com/dotnet/runtime/issues/98788, ex.ToString will make COM calls slow if it was in the call stack and it is why I\u0027m concerned.",
                                           "updatedAt":  "2024-04-29T20:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58Mo51",
                                           "createdAt":  "2024-04-29T21:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Perhaps I do not understand the scenario...\r\n\r\nWhen a managed exception is unhandled(*), the runtime will call `Environment_FailFast` and will pass the exception as one of the parameters.\r\nhttps://github.com/dotnet/runtime/blob/6cd329b25315c5f21e86dac74f6cbe6d0deb6b0e/src/coreclr/classlibnative/bcltype/system.cpp#L168\r\n\r\n`Environment_FailFast` will make a call to `exception.ToString()`. (via `GetExceptionMessage`). At that point we still can run managed code, but not for long.\r\nA few lines later `Environment_FailFast` will call `EEPolicy::HandleFatalError`, which will proceed to things like capturing a dump and exiting the process. \r\n\r\nI understand the reliability concern about `exception.ToString()` doing something horrible, but not sure where the performance concern comes from. What will observe slowness in COM calls after `Environment_FailFast`?\r\n\r\n(*) Unhandled here means - \"really unhandled\". If there was `UnhandledExceptionHandler` and handled it, the exception is not unhandled after that and will not FailFast/crash.\r\n",
                                           "updatedAt":  "2024-04-29T21:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58PdMS",
                                           "createdAt":  "2024-04-30T05:46:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgChqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2024-04-30T07:31:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I am not worried about performance. I am worried about providing the right information to the crash handler, without introducing unnecessary failure points between the failure point and the call of the crash handler.\r\n\r\nOn one end, you can have crash handlers that just want to capture crashdump for offline processing and do nothing else. Computing the textual stacktrace is source of unnecessary failure points for those.\r\n\r\nOn the other end, you can have crash handlers that want to capture many details like stacktrace with file and line numbers if possible.\r\n\r\nThe design should accommodate the whole spectrum. (We do not need to implement everything in the first round, but we should have an idea for how we would go about covering the whole spectrum.)",
                                           "updatedAt":  "2024-04-30T05:47:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58XhZt",
                                           "createdAt":  "2024-04-30T18:45:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladimir-cheverdyuk-altium",
                                           "body":  "@VSadov \r\nMy idea was to pass exception handle (it can be exception object itself) to handler and later handler can call function to get more information from this handle.\r\n\r\n\u003eWhat will observe slowness in COM calls after Environment_FailFast?\r\n\r\nCOM calls slows down after ex.ToString called if some module is on the call stack. Some code that walks stack converts module to read/write mode from read-only mode and as result search became linear instead of binary.",
                                           "updatedAt":  "2024-04-30T18:46:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58clW1",
                                           "createdAt":  "2024-05-01T02:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e The design should accommodate the whole spectrum. (We do not need to implement everything in the first round, but we should have an idea for how we would go about covering the whole spectrum.)\r\n\r\nI think the suggested API shape is sufficient for the first round. Then we can see how the API will be used and if/how it can be made better.\r\n\r\nIf we find that we really need to allow configuring `ex.ToString()` in FailFast, we can add an overload of `SetFatalErrorHandler` that takes an extra `BOOL` for that. Or we can pass an `enum` that can suppress any combination of optional parts in `FatalErrorInfo`.\r\n\r\nBasically - I think there is a way to react to the need to configure, but maybe there is no need. In such case having a simpler API would be better.",
                                           "updatedAt":  "2024-05-01T02:04:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58cu8z",
                                           "createdAt":  "2024-05-01T03:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgQQgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladimir-cheverdyuk-altium",
                                                                               "createdAt":  "2024-05-01T17:22:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2024-05-01T17:25:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Or we can pass an enum that can suppress any combination of optional parts in FatalErrorInfo.\r\n\r\nIt assumes that the handler wants the fixed information for all types of crashes. It is not necessarily the case.\r\n\r\nI am coming back to the callback idea: By default, the crash handler should only get information that does not require any extra memory allocations or substantial effort to compute. Everything else should be provided via callbacks. I think it is the most future proof and flexible design.",
                                           "updatedAt":  "2024-05-01T03:04:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gNzW",
                                           "createdAt":  "2024-05-01T17:38:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Callbacks are more flexible, but may require that there is some state that can be interrogated. Right now we can store all the relevant info that we have to the stack and then invoke the handler while passing the pointers. \r\n\r\nIf the handler can come back for more info, we would need to store that info ahead of time somewhere (likely not on stack). We could defer some things like converting to UTF-8, but assuming that is relatively trivial, it may be not something that matters to defer.\r\n\r\nAlternatively, we could provide the extra info by digging through the memory of the dead process - like debugger does. Maybe that would be better served by just exposing debugging APIs? An additional advantage for that would be that it might also work over a core dump, provided that debug info is available. \r\nThis can certainly be the future direction where all this will be going.\r\n\r\nAs for configuring the behavior of `ex.ToString` via a callback I could see a scenario when FailFast could make a callback (managed or native?) and ask if `ToString` is desired.  \r\n\r\nThis question would be asked only once per lifetime of the process, so there is not a lot of advantages over pre-configuring that via a bool parameter when setting up a handler. \r\nIf concurrent FailFast is possible, the callback may fire more than once and a different answer could be provided, but I am not sure this is an advantage or not.\r\n",
                                           "updatedAt":  "2024-05-01T17:42:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gu5K",
                                           "createdAt":  "2024-05-01T19:15:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladimir-cheverdyuk-altium",
                                           "body":  "\u003e As for configuring the behavior of ex.ToString via a callback I could see a scenario when FailFast could make a callback (managed or native?) and ask if ToString is desired.\r\n\r\nMaybe that callback can return flags that will specify what optional fields of FatalErrorInfo it should populate?",
                                           "updatedAt":  "2024-05-01T19:19:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc584Xm0",
                                           "createdAt":  "2024-05-06T03:53:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Can this proposal be updated to use a `EventArgs` that contains a `GetDeferral()` method to allow async handler?\r\n\r\n```cs\r\npublic delegate void UnhandledExceptionHandler(UnhandledExceptionHandlerEventArgs e);\r\n\r\npublic sealed class UnhandledExceptionHandlerEventArgs\r\n{\r\n    private TaskCompletionSource? m_tcs;\r\n\r\n    private sealed class UnhandledExceptionHandlerDeferral(TaskCompletionSource tcs) : IDisposable\r\n    {\r\n        public void Dispose() =\u003e tcs.TrySetResult();\r\n    }\r\n\r\n    public Exception Exception { get; }\r\n    public IDisposable GetDeferral() =\u003e new UnhandledExceptionHandlerDeferral(m_tcs ??= new());\r\n    public bool Handled { get; set; }\r\n}\r\n```\r\n\r\nUsage 1: synchronized handler\r\n\r\n```cs\r\nvoid MyHandler(UnhandledExceptionHandlerEventArgs e)\r\n{\r\n    e.Handled = true;\r\n}\r\n```\r\n\r\nUsage 2: asynchronized handler\r\n\r\n```cs\r\nasync void MyHandler(UnhandledExceptionHandlerEventArgs e)\r\n{\r\n    using var deferral = e.GetDeferral();\r\n    await MyAsyncHandlerMethod();\r\n    e.Handled = true;\r\n}\r\n```",
                                           "updatedAt":  "2024-05-06T04:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc584ZjZ",
                                           "createdAt":  "2024-05-06T04:02:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODguuSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-05-06T04:04:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There is nothing else that the thread dealing with the unhandled exception can do until the unhandled exception was dealt with, so there is no advantage in complicating this API with async. If you handler needs to call async methods, it should use Task.Wait.",
                                           "updatedAt":  "2024-05-06T04:02:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59JYre",
                                           "createdAt":  "2024-05-08T02:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I\u0027ve made changes to the fatal error handling API that allow querying for the error text if needed.\r\n\r\n- the moment when the error text is formed is now not driven by the shape of the API. It may be computed on demand or prepared beforehand - that is now an unspecified implementation detail.\r\n- instead of a bunch of strings with overlapping meaning, the runtime will just provide one string with exactly the same content and shape as what is printed to the console by the default handler.\r\n- the custom crash handler will ask for the string by invoking a provided entry point and specifying a consuming/logging function pointer that will receive the string. \r\n\r\nIf the custom logger prints the provided text to console, it will achieve the same behavior as in the default handler.\r\nIt could also add the text to a file, append to some binary storage, etc..\r\n\r\nThe same pattern may be followed in the future to allow querying for some other data, not necessarily textual.",
                                           "updatedAt":  "2024-05-08T02:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Jcgu",
                                           "createdAt":  "2024-05-08T02:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Nit: `pfnLogAction` will be called multiple times by the runtime. The runtime is not required to materialize the entire message in one long string.",
                                           "updatedAt":  "2024-05-08T02:41:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Jfmj",
                                           "createdAt":  "2024-05-08T02:53:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Yes, that may be desirable. I’ll modify the description to allow for sending that string in pieces.",
                                           "updatedAt":  "2024-05-08T02:53:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59O3jh",
                                           "createdAt":  "2024-05-08T17:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Updated for possibility of multiple calls to the `pfnLogAction`",
                                           "updatedAt":  "2024-05-08T17:18:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59YgQ6",
                                           "createdAt":  "2024-05-09T23:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "```c\r\n    void (*pfnGetFatalErrorLog)(\r\n           FatalErrorInfo* errorData, \r\n           void (*pfnLogAction)(void *userContext, char8_t* logString), \r\n           void* userContext);\r\n```\r\n\r\nThe above signature needs explicit calling conventions. I assume we want `__stdcall` on Windows x86 and the \"default\" everywhere else.\r\n\r\n\u003e `void (*pfnLogAction)(void *userContext, char8_t* logString), `\r\n\r\nThe `userContext` variable is typically passed in last to the callback.",
                                           "updatedAt":  "2024-05-09T23:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-PwZe",
                                           "createdAt":  "2024-05-17T17:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e The above signature needs explicit calling conventions. I assume we want __stdcall on Windows x86 and the \"default\" everywhere else.\r\n\r\nHow would it look in the declaration? Would that require `#ifdef` ?",
                                           "updatedAt":  "2024-05-17T17:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-PzXa",
                                           "createdAt":  "2024-05-17T17:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e\u003e `void (*pfnLogAction)(void *userContext, char8_t* logString), `\r\n\r\n\u003eThe `userContext` variable is typically passed in last to the callback.\r\n\r\nCould that make it awkward when more parameters need to be added? \r\nMaybe if adding an overload in v-next of this API or in an another entry point that logs something else. Would the other variants still have the context at the end?\r\n",
                                           "updatedAt":  "2024-05-17T17:27:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-P2ux",
                                           "createdAt":  "2024-05-17T17:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e \u003e The above signature needs explicit calling conventions. I assume we want __stdcall on Windows x86 and the \"default\" everywhere else.\r\n\u003e \r\n\u003e How would it look in the declaration? Would that require `#ifdef` ?\r\n\r\nYep. Something like the following:\r\n\r\n```c\r\n#if defined(_MSC_VER) \u0026\u0026 defined(_M_IX86)\r\n#define DOTNET_CALLBACK __stdcall\r\n#else\r\n#define DOTNET_CALLBACK \r\n#endif\r\n```\r\n\r\n\u003e Could that make it awkward when more parameters need to be added?\r\n\u003e Maybe if adding an overload in v-next of this API or in an another entry point that logs something else. Would the other variants still have the context at the end?\r\n\r\nWhat other information are you envisioning that could evolve here? Adding additional arguments to a callback should be avoided. The best solution would be to create a new callback option rather than changing an existing callback API. The \"context\" is almost always last. I can\u0027t even think of a counter example, so this seems like \"the pattern\" to follow.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-05-17T17:31:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-P6r4",
                                           "createdAt":  "2024-05-17T17:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e Yep. Something like the following:\r\n\r\nWould it be sufficient to just document it as:  \r\n\"In all signatures of this API the default calling convention for the given platform is used.\"\r\n\r\nI am not against the `#ifdef` just wonder if simply adding a comment is just as good.",
                                           "updatedAt":  "2024-05-17T17:40:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-P7ax",
                                           "createdAt":  "2024-05-17T17:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e What other information are you envisioning that could evolve here? Adding additional arguments to a callback should be avoided. The best solution would be to create a new callback option rather than changing an existing callback API. The \"context\" is almost always last. I can\u0027t even think of a counter example, so this seems like \"the pattern\" to follow.\r\n\r\nI could be easily convinced that the callback will be at the end. \r\nAs the only truly required parameter in any kind of such pattern it would seem odd to put it at the end, but if that is very common, we can do that. \r\n",
                                           "updatedAt":  "2024-05-17T17:42:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-P7tM",
                                           "createdAt":  "2024-05-17T17:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e \"In all signatures of this API the default calling convention for the given platform is used.\"\r\n\r\nThat is possible, but that is ambigous on Windows. For example, the Windows OS is generally `__stdcall`, but VS defaults to `__cdecl`. Which means from a user perspective it might not even be something they have thought about in their project. My preference here is making the code as copy/paste friendly as possible.",
                                           "updatedAt":  "2024-05-17T17:43:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-P9ye",
                                           "createdAt":  "2024-05-17T17:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiOfng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-05-17T17:50:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I\u0027ve updated the signatures to add the `#ifdef`/__stdcall thing and made the context the last.",
                                           "updatedAt":  "2024-05-17T17:50:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-QKcR",
                                           "createdAt":  "2024-05-17T18:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Do we have enough of the API shape to move this to \"ready for review\"?",
                                           "updatedAt":  "2024-05-17T18:26:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-QKss",
                                           "createdAt":  "2024-05-17T18:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiQLkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2024-05-17T23:18:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I am ready to have a broader conversation. @jkotas?",
                                           "updatedAt":  "2024-05-17T18:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-QNir",
                                           "createdAt":  "2024-05-17T18:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiQLlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2024-05-17T23:18:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Same here.",
                                           "updatedAt":  "2024-05-17T18:35:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_Ydvv",
                                           "createdAt":  "2024-05-29T10:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e ```cs\r\n\u003e public static void SetUnhandledExceptionHandler(UnhandledExceptionHandler handler);\r\n\u003e ```\r\n\r\nThe naming here seems confusing to me, this is named very similarly to the AppDomain.UnhandledException event, and in particular it doesn\u0027t seem clear that this won\u0027t be called for all unhandled exceptions, only unhandled exceptions that can actually be ignored.\r\n\r\nIt\u0027s not a big difference, but what about `SetUnhandledExceptionFilter`? That matches the imaginary code:\r\n\r\n```cs\r\ntry { UserCode(); } catch (Exception ex) when handler(ex){};\r\n```\r\n\r\nin that `handler` is an exception _filter_.\r\n\r\nIMHO it\u0027s also somewhat more obvious that this won\u0027t be called for all unhandled exceptions, only those that can actually be filtered/ignored.\r\n\r\nA few other ideas, I don\u0027t like any of them, but maybe somebody else are inspired to come up with better names:\r\n\r\n* `SetFilterableUnhandledExceptionFilter`\r\n* `SetCatchUnhandledExceptionHandler`\r\n\r\nAdditionally, it would be nice to be able to invoke the callback.\r\n\r\nExample use case for .NET for iOS: we have an API called `InvokeOnMainThread (Action action)`, where developers can do this:\r\n\r\n```cs\r\nInvokeOnMainThread (() =\u003e { ShowMessageBox (\"Hello World!\"); });\r\n```\r\n\r\nwhich would currently, if `ShowMessageBox` threw an exception, end up bringing the process down. If we could implement this internally like this:\r\n\r\n```cs\r\npublic void InvokeOnMainThread (Action action)\r\n{\r\n    NativeInvokeOnMainThread (() =\u003e {\r\n        // This is effectively called from a reverse P/Invoke\r\n        try {\r\n            action ():\r\n        } catch (Exception ex) when ExceptionHandling.FilterUnhandledException (ex) {\r\n            // ignored\r\n        }\r\n    });\r\n}\r\n```\r\n\r\nthat would be nice.\r\n\r\nLastly:\r\n\r\n\u003e ```cs\r\n\u003e /// \u003cexception cref=\"ArgumentNullException\"\u003eIf handler is null\u003c/exception\u003e\r\n\u003e /// \u003cexception cref=\"InvalidOperationException\"\u003eIf a handler is already set\u003c/exception\u003e\r\n\u003e public static void SetUnhandledExceptionHandler(UnhandledExceptionHandler handler);\r\n\u003e ```\r\n\r\nThere\u0027s no way to clear/change/reset the handler once it\u0027s set? Is that intentional?",
                                           "updatedAt":  "2024-05-29T10:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_lDVc",
                                           "createdAt":  "2024-05-30T17:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Does this proposal address crashes in unmanaged code?  The main motivation in https://github.com/dotnet/runtime/issues/79706 is the ability for a user app (which is commonly a combination of managed code and native libraries) to install a third-party crash reporter behind the .NET runtime so that all fatal app terminations are captured and logged.   This proposal seems to only deal with unhandled managed exceptions - or will `SetFatalErrorHandler` also install something for those cases? The proposal is fairly vague about what kinds of fatal errors will trigger the handler",
                                           "updatedAt":  "2024-05-30T17:43:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_7bz1",
                                           "createdAt":  "2024-06-03T23:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The naming here seems confusing to me, this is named very similarly to the AppDomain.UnhandledException event, and in particular it doesn\u0027t seem clear that this won\u0027t be called for all unhandled exceptions\r\n\r\nGood point. I agree that the name variants like you have suggested can be used to make the behavior more clear.\r\n\r\nAnother option is to call it for all unhandled exceptions and change the filter to take an extra `bool ignorable` argument that will say whether the exception can be ignored.\r\n\r\n\u003e Additionally, it would be nice to be able to invoke the callback.\r\n\r\nIt sound reasonable to me.\r\n\r\n\u003e There\u0027s no way to clear/change/reset the handler once it\u0027s set? Is that intentional?\r\n\r\nYes, it is intentional. These callbacks are meant to be used at the applications level. The application is expected to be have one and only unhandled exception and fatal error handling policy.\r\n\r\n\u003e Does this proposal address crashes in unmanaged code?\r\n\r\n`SetFatalErrorHandler` is expected to address crashes in unmanaged code. Thinking about this more, there are two cases: fatal crashes in the .NET code (including unmanaged runtime code) and crashes in other code.\r\n\r\nWe clearly want this to intercept handle crashes in .NET code, but handling crashes in other code is less clear cut. It makes sense if the app wants to own the process, but it does not make sense if the .NET code is a library (e.g. think native AOT library) and the main app has its own crash handler. Are we going to limit this to handling crashes in .NET code or should we have a flag that says whether the handler should intercept all crashes - both in .NET code and other code?",
                                           "updatedAt":  "2024-06-03T23:23:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C7UtC",
                                           "createdAt":  "2024-06-28T10:25:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Why a dedicated delegate type and not `Func\u003cException, bool\u003e`?",
                                           "updatedAt":  "2024-06-28T10:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EOf4l",
                                           "createdAt":  "2024-07-09T18:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=4NA1dWe1h_I\u0026t=0h52m25s)\n\n* Instead of creating a new delegate type, use `Func\u003cException, bool\u003e`\r\n* We renamed `fatalErrorHandler` to `handler` for consistency.\r\n\r\n```C#\r\nnamespace System.Runtime.ExceptionServices\r\n{\r\n    public static class ExceptionHandling\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Sets a handler for unhandled exceptions.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cexception cref=\"ArgumentNullException\"\u003eIf handler is null\u003c/exception\u003e\r\n        /// \u003cexception cref=\"InvalidOperationException\"\u003eIf a handler is already set\u003c/exception\u003e\r\n        public static void SetUnhandledExceptionHandler(Func\u003cException, bool\u003e handler);\r\n\r\n        /// \u003csummary\u003e\r\n        /// .NET runtime is going to call `fatalErrorHandler` set by this method before its own\r\n        /// fatal error handling (creating .NET runtime-specific crash dump, etc.).\r\n        /// \u003c/summary\u003e\r\n        /// \u003cexception cref=\"ArgumentNullException\"\u003eIf fatalErrorHandler is null\u003c/exception\u003e\r\n        /// \u003cexception cref=\"InvalidOperationException\"\u003eIf a handler is already set\u003c/exception\u003e\r\n        public static unsafe void SetFatalErrorHandler(delegate* unmanaged\u003cint, void*, int\u003e handler);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-07-09T19:46:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TkQH9",
                                           "createdAt":  "2024-11-14T08:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rgroenewoudt",
                                           "body":  "Will this also be implemented for .NET Android? On mobile platforms logging and debugging of crashes is very complex, especially because retrieving device logs means complicated instructions to a customer.",
                                           "updatedAt":  "2024-11-14T08:51:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tp25B",
                                           "createdAt":  "2024-11-14T19:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7C1CA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2024-11-14T19:19:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mlancione",
                                                                               "createdAt":  "2024-11-15T03:11:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2024-11-15T13:11:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Will this also be implemented for .NET Android?\n\nYes, it is the intention to implement these APIs on all platforms. (On some platforms, the fatal error handler may have limitations imposed by the platform.)",
                                           "updatedAt":  "2024-11-14T19:17:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T2tOZ",
                                           "createdAt":  "2024-11-16T14:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bruno-garcia",
                                           "body":  "\u003e Will this also be implemented for .NET Android? On mobile platforms logging and debugging of crashes is very complex, especially because retrieving device logs means complicated instructions to a customer.\n\nYou don\u0027t really need to deal with this manually though. \n\n[Sentry](https://docs.sentry.io/platforms/dotnet/) on Android will capture crashes caused by unhandled exceptions in C# as well as from Java/Kotlin or native (NDK, C/C++/etc). The terminology used in this issue is **fatal** error. \nSimilar on iOS, C# exceptions as well as Swift/Obj-C fatal errors, crashes, etc.\n\nIt attaches logs automatically, _optionally_ attaches screenshots too.\nIf you [upload debug files during build](https://docs.sentry.io/platforms/dotnet/configuration/msbuild/) all the crash events in Sentry will contain line numbers (even in release builds of course). It supports [Portable PDBs, ProGuard and native symbols (ELF, Mach-O, and more)](https://docs.sentry.io/platforms/dotnet/data-management/debug-files/). It pulls symbols from nuget.org automatically so it\u0027ll include line numbers of .NET\u0027s runtime and OSS libraries too. If `source_link` is available, it pulls the surrounding lines of code on the frame so it\u0027s easier to understand what\u0027s going on in the code (see screenshot below).\n\n[Supports Native AOT](https://sentry.engineering/blog/should-you-could-you-aot) also outside of mobile. With line numbers on stack traces from C# as well as native code.\n\n\u003cdetails\u003e\n\u003csummary\u003esome screenshots of Symbol Collector\u003c/summary\u003e\nI do some dogfooding of it on Symbol Collector: https://github.com/getsentry/symbol-collector/\n\n![Image](https://github.com/user-attachments/assets/794b984e-712c-49e4-819b-e83e3552c9b9)\n\n![Image](https://github.com/user-attachments/assets/1701bf1f-c82e-4322-9d16-d7e66130fb04)\n![Image](https://github.com/user-attachments/assets/5546dacc-1a6f-4329-b15d-c154ba471ae0)\n\n![Image](https://github.com/user-attachments/assets/3ccc07e1-d028-40e6-9530-2bb7911eeaf9)\n\n![Image](https://github.com/user-attachments/assets/db20e66f-4a91-44d1-9493-acc733f6f1d6)\n\n\n\u003c/details\u003e\n\nDisclaimer: I worked on building the Sentry SDK for .NET",
                                           "updatedAt":  "2024-11-16T14:54:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gE0Vz",
                                           "createdAt":  "2025-02-26T16:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWoGAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cwensley",
                                                                               "createdAt":  "2025-02-26T18:04:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mlancione",
                                                                               "createdAt":  "2025-03-21T13:23:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kebechet",
                                                                               "createdAt":  "2025-03-22T09:10:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jamescrosswell",
                                                                               "createdAt":  "2025-03-23T21:14:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "goaaats",
                                                                               "createdAt":  "2025-03-29T19:30:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2025-06-14T16:36:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "whiskhub",
                                           "body":  "I hope this will still make it into .NET 10! It would make life much easier when dealing with native libraries and crash handling.",
                                           "updatedAt":  "2025-02-26T16:45:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60IcLG",
                                           "createdAt":  "2025-07-01T06:48:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "killaragorn",
                                           "body":  "any update？ we need this~",
                                           "updatedAt":  "2025-07-01T06:48:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60IhP_",
                                           "createdAt":  "2025-07-01T06:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcUmdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "vladimir-cheverdyuk-altium",
                                                                               "createdAt":  "2025-07-01T17:54:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2025-07-03T22:44:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "killaragorn",
                                                                               "createdAt":  "2025-07-29T12:17:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@killaragorn Which one of the two proposed APIs are you interested in?\n\n`ExceptionHandling.SetUnhandledExceptionHandler` API is implemented and it will be included in .NET 10 (November 2025).\n\n`ExceptionHandling.SetFatalErrorHandler` is work-in-progress and it is likely going to be included in .NET 11 (November 2026).",
                                           "updatedAt":  "2025-07-01T06:53:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60I76O",
                                           "createdAt":  "2025-07-01T07:18:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whiskhub",
                                           "body":  "That’s a bit sad, I especially need the fatal error handling since currently .NET is swallowing a lot of things and it’s not possible to report native crashes that users are facing. ",
                                           "updatedAt":  "2025-07-01T07:18:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69qH0P",
                                           "createdAt":  "2025-08-13T01:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeIpzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ForNeVeR",
                                                                               "createdAt":  "2025-08-13T10:12:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VSadov",
                                           "body":  "The last small piece of `ExceptionHandling.SetUnhandledExceptionHandler` is in https://github.com/dotnet/runtime/pull/118563 - that is support for Mono and WASM.\n\nThe rest will be .net 11",
                                           "updatedAt":  "2025-08-13T01:59:59Z"
                                       }
                                   ],
                         "totalCount":  56
                     },
        "title":  "[API Proposal]: Overriding the default behavior in case of unhandled exceptions and fatal errors.",
        "labels":  [
                       "api-approved",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107184",
        "createdAt":  "2024-08-30T13:28:39Z",
        "number":  107184,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T17:44:26Z",
        "body":  "There is a problem with handling stack overflow on ARM when the stack overflow occurs in a leaf native function (in the libcoreclr.so or in any other native library like libc, etc). Such functions don\u0027t have any unwind information and are marked as `ARM_EXIDX_CANT_UNWIND` in the EHABI unwind info and the libunwind\u0027s `unw_step` fails to unwind them due to that. Currently, the `HandleHardwareException` tries to unwind to the first managed frame using the libunwind to get a starting frame to log the stack trace. But that fails and no stack trace is dumped.\r\nActually, there are couple more issues here:\r\n* `PAL_VirtualUnwind` executed on a frame where a hardware exception occurred increments the PC in the context by 1 to compensate for the fact that libunwind decrements the PC before searching for unwind info for frames unless in knows it is a frame of a hardware exception. It cannot detect that a frame is a frame of hardware exception unless it has unwound through the signal handler, which doesn\u0027t occur in our case. However, the compensation we do doesn\u0027t seem to fully work on ARM in some cases and can lead to crashes during follow-up unwinds. I have found there is a `libunwind_init_local2` function that takes an extra argument that can be used to tell libunwind the frame is a frame of hardware exception, so we should use it instead of the compensation.\r\n* This compensation we do also blocks correct check for the unw_step not moving the PC that happens when no unwind info is found, so we actually think that `PAL_VirtualUnwind` successfully unwound the frame to PC+1.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Stack overflow handling issue on ARM (32 bit)",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108008",
        "createdAt":  "2024-09-19T02:37:15Z",
        "number":  108008,
        "author":  "WindingWinter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7Iemw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2024-09-19T03:25:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-01T16:37:00Z",
        "body":  "### Description\n\nFirst let me say that I\u0027m using NUnit, but I don\u0027t think this is NUnit related. Rather it has to do with how The Finalize method works.\r\n\r\nAs we all know Finalize will call deconstructor. And according to the popular IDisposable pattern, we put Dispose method in the deconstructor to clean up the resources.\r\n\r\nNow what if the Dispose generates an exception? The whole dotnet test will be brought down and the test cannot continue! Which means that if I my first test is already crashing in Dispose method, then my subsequent tests couldn\u0027t run if garbage collector is kicking into action.\r\n\r\nWorse of all, this problem will come at indeterministic time for the developers( because GC works indeterministically), leaving them confused.\r\n\r\nYou might think this is not a big problem, because during manual testing we are supposed to call Dispose ourselves and we should be able to see the crash ourselves right?\r\n\r\nBut it\u0027s not always as straightforward. The issue might not be reproducible during testing time. In actual application or environment, the program can crash randomly even at the start of the constructor, due to Thread being aborted ( due to bugs in the user code), and hence the Dispose might be called in the way we don\u0027t anticipate. Like in [this example](https://stackoverflow.com/a/33639531), even `readonly` field throws Null Reference Exception because the constructor doesn\u0027t get to finish initializing!\n\n### Reproduction Steps\n\nI can create a small sample to reproduce the issue, here\u0027s the main code\r\n\r\n```\r\n    public class AAClass\r\n    {\r\n        public void EmptyMethod()\r\n        {\r\n\r\n        }\r\n    }\r\n    public class ObservableObject:IDisposable\r\n    {\r\n        ~ObservableObject()\r\n        {\r\n            Dispose();\r\n        }\r\n\r\n        private bool _isDisposed;\r\n\r\n\r\n        public void Dispose()\r\n        {\r\n            Console.WriteLine(\"Disposing OO...\");\r\n\r\n            if (!_isDisposed)\r\n            {\r\n                AAClass claAA = null;\r\n                //this will throw a Null Reference Exception, but the issue is that\r\n                // this will also bring down dotnet test!\r\n\r\n                claAA.EmptyMethod();\r\n            }\r\n\r\n            _isDisposed = true;\r\n        }\r\n    }\r\n\r\n\r\n```\r\n\r\nAnd here\u0027s the test code:\r\n\r\n\r\n```\r\n   [TestFixture]\r\n   public class Net80TestClasses\r\n   {\r\n\r\n\r\n       [Test]\r\n       public void AATest()\r\n       {\r\n           ObservableObject observable = new ObservableObject();\r\n           Assert.That(1, Is.EqualTo(2));\r\n       }\r\n\r\n       [Test]\r\n       public void BBRunMe()\r\n       {\r\n           Thread.Sleep(20*1000);\r\n           GC.Collect();\r\n           GC.WaitForPendingFinalizers();  //Force GC so that Finalize will be called and crash the whole dotnet test\r\n\r\n       }\r\n\r\n       [Test]\r\n       public void ZZHehe()\r\n       {\r\n           Thread.Sleep(20 * 1000);\r\n          Assert.That(1, Is.EqualTo(2));\r\n\r\n       }\r\n\r\n       [Test]\r\n       public void TestPass()\r\n       {\r\n           Assert.That(1, Is.EqualTo(1));\r\n       }\r\n\r\n       [Test]\r\n       public void TestFail()\r\n       {\r\n           Assert.That(1, Is.EqualTo(2));\r\n       }\r\n\r\n       [Test]\r\n       public void RunMe()\r\n       {\r\n           TestContext.WriteLine(\"TestLibNet80.RunMe\" + RunTimeInfo.NetCoreFramework);\r\n\r\n           TestContext.WriteLine(\"TestLibNet80.RunMe\" + RunTimeInfo.RunTimeFramework());\r\n       }\r\n\r\n```\n\n### Expected behavior\n\n\r\n\r\nSo I would suggest that dotnet test must still be able to continue even though the Dispose method throws exception during the Garbage Collection time.\n\n### Actual behavior\n\nAnd the test run will be aborted. Only 1 test is run despite that there are many of them.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjKuJHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Mq0CK",
                                           "createdAt":  "2024-09-19T05:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODy2XKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-09-19T12:25:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2024-09-19T14:06:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "C# language says exception from finalizer is unspecified: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/exceptions#214-how-exceptions-are-handled\r\n\r\n\u003e Otherwise, if an exception occurs during finalizer execution, and that exception is not caught, then the behavior is unspecified.\r\n\r\nECMA-335 doesn\u0027t explicitly mention exception from finalizer. It hints that the exception can\u0027t be handled by others and will cause process termination.\r\n\r\nThere are other fatal errors that can\u0027t be caught by a test framework, like AccessViolation from incorrect use of unsafe code, or StackOverflow. Exception from finalizer is a similar fatal error.",
                                           "updatedAt":  "2024-09-19T05:49:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mq4kd",
                                           "createdAt":  "2024-09-19T06:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e In actual application or environment, the program can crash randomly even at the start of the constructor, due to Thread being aborted ( due to bugs in the user code), and hence the Dispose might be called in the way we don\u0027t anticipate. Like in [this example](https://stackoverflow.com/a/33639531), even `readonly` field throws Null Reference Exception because the constructor doesn\u0027t get to finish initializing!\r\n\r\nA small reproduction for this:\r\n\r\n```csharp\r\nusing System;\r\n\r\nwhile (true)\r\n{\r\n    try\r\n    {\r\n        var derived = new Derived();\r\n    }\r\n    catch (NotImplementedException)\r\n    {\r\n\r\n    }\r\n    GC.Collect();\r\n    GC.WaitForPendingFinalizers();\r\n}\r\n\r\nabstract class Base\r\n{\r\n    private readonly object obj = new object();\r\n\r\n    protected Base(int unused) { }\r\n\r\n    ~Base()\r\n    {\r\n        lock (obj) // will crash!\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    private static int Throws() =\u003e throw new NotImplementedException();\r\n\r\n    public Derived() : base(Throws()) { }\r\n}\r\n```\r\n\r\nExceptions **before** the base constructor call can produce corrupted finalizable object.",
                                           "updatedAt":  "2024-09-19T06:05:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`dotnet test` shouldn\u0027t crash, even if Dispose method is throwing exception during the Finalize method",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110173",
        "createdAt":  "2024-11-26T02:17:04Z",
        "number":  110173,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:02:33Z",
        "body":  "**Failed in:** [runtime-coreclr outerloop 20241125.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=878786\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22948170\u0026resultId=118344\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked no_tiered_compilation @ (Alpine.317.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:37:59\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:38:00\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174564 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32785 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"------------------------------\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\n```json\n{\n  \"ErrorMessage\": \"baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": true\n}\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=878786\r\n**Error message validated:** `[baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 12/4/2024 10:05:14 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153256](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153256)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153256\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31857290\u0026resultId=123759)||\r\n|[1152510](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152510)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152510\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31836922\u0026resultId=123775)||\r\n|[1152364](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152364)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152364\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31831912\u0026resultId=117506)|dotnet/runtime#119866|\r\n|[1151516](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151516)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151516\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31811244\u0026resultId=117492)|dotnet/runtime#119764|\r\n|[1150699](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150699)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150699\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31788026\u0026resultId=117492)||\r\n|[1149663](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149663)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149663\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31757672\u0026resultId=117505)|dotnet/runtime#115766|\r\n|[1149310](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149310)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149310\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31746832\u0026resultId=117505)||\r\n|[1148775](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148775)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148775\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31725392\u0026resultId=117505)||\r\n|[1147389](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147389)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147389\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31670908\u0026resultId=117505)|dotnet/runtime#119684|\r\n|[1147113](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147113)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147113\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31662456\u0026resultId=123774)||\r\n|[1146675](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146675)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146675\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31645192\u0026resultId=123774)||\r\n|[1146254](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146254)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146254\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31630918\u0026resultId=117505)||\r\n|[1144737](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144737)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144737\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31577140\u0026resultId=117505)|dotnet/runtime#119552|\r\n|[1143166](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143166)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143166\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31520664\u0026resultId=117505)|dotnet/runtime#119492|\r\n|[1142383](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142383)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142383\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31491230\u0026resultId=117492)||\r\n|[1141575](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141575)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141575\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31462352\u0026resultId=123773)||\r\n|[1141356](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141356)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141356\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31453834\u0026resultId=117505)|dotnet/runtime#117571|\r\n|[1140631](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140631)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140631\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31427780\u0026resultId=117492)|dotnet/runtime#119406|\r\n|[1140566](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140566)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140566\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31425818\u0026resultId=123759)||\r\n|[1140453](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140453)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140453\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31423428\u0026resultId=117491)||\r\n|[1139630](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139630)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139630\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31396678\u0026resultId=117491)||\r\n|[1139543](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139543)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139543\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31394606\u0026resultId=117491)|dotnet/runtime#119357|\r\n|[1139155](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139155)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139155\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31384934\u0026resultId=117492)|dotnet/runtime#112740|\r\n|[1139105](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139105)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139105\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31383512\u0026resultId=117492)||\r\n|[1138582](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138582)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138582\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31363668\u0026resultId=123758)||\r\n|[1138291](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138291)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138291\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31354162\u0026resultId=117490)|dotnet/runtime#119041|\r\n|[1136183](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136183)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136183\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31281338\u0026resultId=112805)|dotnet/runtime#119098|\r\n|[1134238](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134238)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134238\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31217002\u0026resultId=123758)||\r\n|[1134164](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134164)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134164\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31215490\u0026resultId=117490)|dotnet/runtime#119177|\r\n|[1133828](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133828)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133828\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31205834\u0026resultId=117490)||\r\n|[1133711](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133711)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133711\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31200126\u0026resultId=123758)||\r\n|[1133592](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133592)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133592\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31196364\u0026resultId=123757)||\r\n|[1132322](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132322)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132322\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31157938\u0026resultId=123757)||\r\n|[1132123](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132123)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132123\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31151538\u0026resultId=117490)||\r\n|[1131760](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131760)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131760\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31138542\u0026resultId=117490)|dotnet/runtime#118878|\r\n|[1131501](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131501)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131501\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31130832\u0026resultId=123757)||\r\n|[1130999](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130999)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130999\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31116914\u0026resultId=123756)||\r\n|[1130609](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130609)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130609\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31101824\u0026resultId=123756)||\r\n|[1130278](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130278)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130278\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31088768\u0026resultId=117489)|dotnet/runtime#119028|\r\n|[1130170](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130170)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130170\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31085416\u0026resultId=117489)|dotnet/runtime#118879|\r\n|[1130056](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130056)|dotnet/runtime|[baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130056\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31082704\u0026resultId=117489)|dotnet/runtime#118995|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|1|9|41|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnhjCBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6VUIIf",
                                           "createdAt":  "2024-11-28T01:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241127.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=881207\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23031680\u0026resultId=120797\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.317.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174587 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 11/27/2024 7:21:53 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-11-28T01:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vzniy",
                                           "createdAt":  "2024-12-03T01:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241202.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=883900\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23115800\u0026resultId=122046\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AE860A0B/w/B7C509F2/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/2/2024 7:30:01 PM, end: 12/2/2024 7:40:01 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AE860A0B/w/B7C509F2/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AE860A0B/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174497 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/AE860A0B/w/B7C509F2/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/2/2024 7:30:01 PM, end: 12/2/2024 7:40:01 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_48601.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0xbdd9\n      Child SP               IP Call Site\n 0x7ffc974564a0 0x7c65d3a91117 libc.so.6!\n 0x7ffc974564e0 0x7c65d3a93a41 libc.so.6!pthread_cond_wait\n 0x7ffc974565c0 0x7c65d36de23b libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:0:28\n 0x7ffc97456620 0x7c65d36dd7c0 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:303:22\n 0x7ffc97456680 0x7c65d\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-03T01:24:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V9dMU",
                                           "createdAt":  "2024-12-04T01:07:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241203.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=885186\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23156402\u0026resultId=122047\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/B3AE098A/w/B66809DC/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/3/2024 7:44:42 PM, end: 12/3/2024 7:54:42 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B3AE098A/w/B66809DC/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B3AE098A/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174539 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/B3AE098A/w/B66809DC/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/3/2024 7:44:42 PM, end: 12/3/2024 7:54:42 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_121488.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x1da90\n      Child SP               IP Call Site\n 0x7d77927f0260 0x7d77920e57f8 libc.so.6!clock_nanosleep\n 0x7d77927f02e0 0x7d77920ea677 libc.so.6!__nanosleep\n 0x7d77927f02f0 0x7d77920ea5ae libc.so.6!sleep\n 0x7d77927f0330 0x7d7791c912fa libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x7d77927f0380 0x7d7792042520 libc.so.6!\n 0x7ffe838bab50 0x7d7713cd299e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe838bab60 0x7d7713cd296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe838cab70 0x7d7713cd2b7c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe838dab80 0x7d7713cd29ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe838eab90 0x7d7713cd296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe838faba0 0x7d7713cd2b7c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8390abb0 0x7d7713cd29ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8391abc0 0x7d7713cd296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8392abd0 0x7d7713cd2b7c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8393abe0 0x7d7713cd29ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8394abf0 0x7d7713cd296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8395ac00 0x7d7713cd2b7c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8396ac10 0x7d7713cd29ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8397ac20 0x7d7713cd296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8398ac30 0x\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-04T01:07:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WIv6O",
                                           "createdAt":  "2024-12-05T01:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241204.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=886368\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23198456\u0026resultId=122845\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked @ (Ubuntu.2004.Arm64.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 12/4/2024 7:53:22 PM, end: 12/4/2024 8:23:22 PM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:53:22\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:53:23\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174542 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCa\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-05T01:13:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WeYlO",
                                           "createdAt":  "2024-12-06T22:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "This issue is also affecting optional pipelines:\n- [runtime-coreclr pgostress](https://dev.azure.com/dnceng-public/public/_build?definitionId=230\u0026_a=summary)/[20241129.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=882613)\n- [runtime-coreclr jitstressregs](https://dev.azure.com/dnceng-public/public/_build?definitionId=110\u0026_a=summary)/[20241201.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=882990)\n- [runtime-coreclr pgo](https://dev.azure.com/dnceng-public/public/_build?definitionId=144\u0026_a=summary)/[20241202.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=883295)\n- [runtime-coreclr jitstress-isas-x86](https://dev.azure.com/dnceng-public/public/_build?definitionId=115\u0026_a=summary)/[20241130.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=882872)",
                                           "updatedAt":  "2024-12-06T23:07:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WemxM",
                                           "createdAt":  "2024-12-06T23:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "CC @mangod9. ",
                                           "updatedAt":  "2024-12-06T23:22:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WmPGT",
                                           "createdAt":  "2024-12-09T01:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgostress 20241206.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=888863\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23267080\u0026resultId=122048\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked syntheticpgo @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AE980984/w/C6700AAD/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/7/2024 7:40:20 AM, end: 12/7/2024 7:50:20 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AE980984/w/C6700AAD/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AE980984/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174513 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/AE980984/w/C6700AAD/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/7/2024 7:40:20 AM, end: 12/7/2024 7:50:20 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_179040.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x2bb60\n      Child SP               IP Call Site\n 0x7fcdf7035260 0x7fcdf68e57f8 libc.so.6!clock_nanosleep\n 0x7fcdf70352e0 0x7fcdf68ea677 libc.so.6!__nanosleep\n 0x7fcdf70352f0 0x7fcdf68ea5ae libc.so.6!sleep\n 0x7fcdf7035330 0x7fcdf6489baa libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x7fcdf7035380 0x7fcdf6842520 libc.so.6!\n 0x7ffdb36d7970 0x7fcd784ed13e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffdb36d7980 0x7fcd784ed10c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffdb36e7990 0x7fcd784ed48c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffdb36f79a0 0x7fcd784ed18c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffdb37079b0 0x7fcd784ed10c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffdb37179c0 0x7fcd784ed48c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffdb37279d0 0x7fcd784ed18c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffdb37379e0 0x7fcd784ed10c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffdb37479f0 0x7fcd784ed48c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffdb3757a00 0x7fcd784ed18c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffdb3767a10 0x7fcd784ed10c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffdb3777a20 0x7fcd784ed48c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffdb3787a30 0x7fcd784ed18c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffdb3797a40 0x7fcd784ed10c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffdb37a7a50 0x\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-09T01:40:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WzEn4",
                                           "createdAt":  "2024-12-10T01:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20241208.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=889516\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23294282\u0026resultId=121557\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked jitstress2_tiered @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/BBD909D1/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 12/9/2024 3:25:39 AM, end: 12/9/2024 4:55:39 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/BBD909D1/w/B02D0996/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n03:25:39\nResponse file: /datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/BBD909D1/p/System.*.dll\n-r:/datadisks/disk1/work/BBD909D1/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/BBD909D1/p/xunit.*.dll\n-r:/datadisks/disk1/work/BBD909D1/p/mscorlib.dll\n-r:/datadisks/disk1/work/BBD909D1/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/BBD909D1/p/crossgen2/crossgen2 @/datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/BBD909D1/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/BBD909D1/w/B02D0996/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n03:25:40\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/BBD909D1/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174539 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverf\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-10T01:22:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XQA4J",
                                           "createdAt":  "2024-12-12T01:38:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20241211.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=892186\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23379190\u0026resultId=122049\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked defaultpgo @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AF630988/w/C2D30A6C/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/11/2024 9:31:42 AM, end: 12/11/2024 9:41:42 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AF630988/w/C2D30A6C/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AF630988/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174437 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/AF630988/w/C2D30A6C/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/11/2024 9:31:42 AM, end: 12/11/2024 9:41:42 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_15987.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x3e73\n      Child SP               IP Call Site\n 0x72c2f7a7f260 0x72c2f74e57f8 libc.so.6!clock_nanosleep\n 0x72c2f7a7f2e0 0x72c2f74ea677 libc.so.6!__nanosleep\n 0x72c2f7a7f2f0 0x72c2f74ea5ae libc.so.6!sleep\n 0x72c2f7a7f330 0x72c2f70877fa libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x72c2f7a7f380 0x72c2f7442520 libc.so.6!\n 0x7ffef81c4530 0x72c2790d29de stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffef81c4540 0x72c2790d286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffef81d4550 0x72c2790d2aac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffef81e4560 0x72c2790d2a2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffef81f4570 0x72c2790d286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffef8204580 0x72c2790d2aac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffef8214590 0x72c2790d2a2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffef82245a0 0x72c2790d286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffef82345b0 0x72c2790d2aac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffef82445c0 0x72c2790d2a2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffef82545d0 0x72c2790d286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffef82645e0 0x72c2790d2aac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffef82745f0 0x72c2790d2a2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffef8284600 0x72c2790d286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffef8294610 \n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-12T01:38:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XchXH",
                                           "createdAt":  "2024-12-13T08:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241212.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=894321\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23444932\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/B22509A6/w/B52009BB/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/13/2024 2:35:05 AM, end: 12/13/2024 2:45:05 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B22509A6/w/B52009BB/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B22509A6/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174564 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/B22509A6/w/B52009BB/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/13/2024 2:35:05 AM, end: 12/13/2024 2:45:05 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_34600.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x8728\n      Child SP               IP Call Site\n 0x7fff9ce56df0 0x7ceaf1e91117 libc.so.6!\n 0x7fff9ce56e30 0x7ceaf1e93a41 libc.so.6!pthread_cond_wait\n 0x7fff9ce56f10 0x7ceaf1ad02db libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:0:28\n 0x7fff9ce56f70 0x7ceaf1acf868 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWake\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-13T08:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XptyU",
                                           "createdAt":  "2024-12-16T01:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20241215.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=895706\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23488042\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked defaultpgo @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A7D408FE/w/AD500981/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/15/2024 9:31:49 AM, end: 12/15/2024 9:41:49 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A7D408FE/w/AD500981/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A7D408FE/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174542 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/A7D408FE/w/AD500981/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/15/2024 9:31:49 AM, end: 12/15/2024 9:41:49 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_60970.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0xee2a\n      Child SP               IP Call Site\n 0x75f9b7f51260 0x75f9b78e57f8 libc.so.6!clock_nanosleep\n 0x75f9b7f512e0 0x75f9b78ea677 libc.so.6!__nanosleep\n 0x75f9b7f512f0 0x75f9b78ea5ae libc.so.6!sleep\n 0x75f9b7f51330 0x75f9b748786a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x75f9b7f51380 0x75f9b7842520 libc.so.6!\n 0x7fffc4bd7930 0x75f9394b289e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fffc4bd7940 0x75f9394b286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fffc4be7950 0x75f9394b296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fffc4bf7960 0x75f9394b28ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fffc4c07970 0x75f9394b286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fffc4c17980 0x75f9394b296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fffc4c27990 0x75f9394b28ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fffc4c379a0 0x75f9394b286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fffc4c479b0 0x75f9394b296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fffc4c579c0 0x75f9394b28ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fffc4c679d0 0x75f9394b286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fffc4c779e0 0x75f9394b296c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fffc4c879f0 0x75f9394b28ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fffc4c97a00 0x75f9394b286c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fffc4ca7a10 \n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-16T01:32:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X_wNn",
                                           "createdAt":  "2024-12-18T01:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20241216.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=897145\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23530826\u0026resultId=121561\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked no_tiered_compilation @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/BC7509F5/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 12/17/2024 6:33:09 AM, end: 12/17/2024 7:03:09 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/BC7509F5/w/ADED09C6/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n06:33:09\nResponse file: /datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/BC7509F5/p/System.*.dll\n-r:/datadisks/disk1/work/BC7509F5/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/BC7509F5/p/xunit.*.dll\n-r:/datadisks/disk1/work/BC7509F5/p/mscorlib.dll\n-r:/datadisks/disk1/work/BC7509F5/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/BC7509F5/p/crossgen2/crossgen2 @/datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/BC7509F5/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/BC7509F5/w/ADED09C6/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n06:33:10\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/BC7509F5/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174495 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOve\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-18T01:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YWnh9",
                                           "createdAt":  "2024-12-20T01:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241219.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=899820\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23613370\u0026resultId=121062\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked no_tiered_compilation @ (Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174453 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32784 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 12/19/2024 7:35:24 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-20T01:20:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yg4bw",
                                           "createdAt":  "2024-12-23T02:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstressregs 20241221.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901296\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23659724\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstressregs0x2000 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/BE7509CD/w/A50D0953/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 12/21/2024 11:50:12 AM, end: 12/21/2024 12:20:12 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/BE7509CD/w/A50D0953/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/BE7509CD/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174508 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/BE7509CD/w/A50D0953/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 12/21/2024 11:50:12 AM, end: 12/21/2024 12:20:12 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_8798.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x225e\n      Child SP               IP Call Site\n 0x7fffef48ca80 0x793ccd491117 libc.so.6!\n 0x7fffef48cac0 0x793ccd493a41 libc.so.6!pthread_cond_wait\n 0x7fffef48cba0 0x793ccd2c9e6b libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7fffef48cc00 0x793ccd2c93f8 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::Thr\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-23T02:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ynkl5",
                                           "createdAt":  "2024-12-24T01:28:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20241222.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901792\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23675928\u0026resultId=121561\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked jitstressregs0x80 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/A35D0902/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 12/23/2024 3:33:37 AM, end: 12/23/2024 5:03:37 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A35D0902/w/A31E0914/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n03:33:37\nResponse file: /datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/A35D0902/p/System.*.dll\n-r:/datadisks/disk1/work/A35D0902/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/A35D0902/p/xunit.*.dll\n-r:/datadisks/disk1/work/A35D0902/p/mscorlib.dll\n-r:/datadisks/disk1/work/A35D0902/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/A35D0902/p/crossgen2/crossgen2 @/datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/A35D0902/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/A35D0902/w/A31E0914/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n03:33:37\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/A35D0902/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174476 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.P\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n",
                                           "updatedAt":  "2024-12-24T01:28:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yrc3I",
                                           "createdAt":  "2024-12-25T01:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241224.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=902614\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23710040\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked no_tiered_compilation @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A6D00968/w/A5830925/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/24/2024 8:17:26 PM, end: 12/24/2024 8:27:26 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A6D00968/w/A5830925/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A6D00968/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174418 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/A6D00968/w/A5830925/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/24/2024 8:17:26 PM, end: 12/24/2024 8:27:26 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_24417.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x5f61\n      Child SP               IP Call Site\n 0x7fffad772630 0x732e52e91117 libc.so.6!\n 0x7fffad772670 0x732e52e93a41 libc.so.6!pthread_cond_wait\n 0x7fffad772750 0x732e52cc9a3b libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7fffad7727b0 0x732e52cc8fc8 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:300:22\n 0x7fffad772810 0\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-25T01:24:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YtcyM",
                                           "createdAt":  "2024-12-26T01:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20241225.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=902734\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23715060\u0026resultId=114888\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked defaultpgo @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/25/2024 9:23:22 AM, end: 12/25/2024 9:33:22 AM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174559 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/25/2024 9:23:22 AM, end: 12/25/2024 9:33:22 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_809.dmp.crashreport.json\u0027\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_747.dmp.crashreport.json\u0027\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-26T01:06:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YyyK8",
                                           "createdAt":  "2024-12-27T08:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr crossgen2 20241225.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=902889\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23718930\u0026resultId=115591\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/B1580975/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 12/26/2024 7:24:41 AM, end: 12/26/2024 7:54:41 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B1580975/w/BA150A44/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n07:24:41\nResponse file: /datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/B1580975/p/System.*.dll\n-r:/datadisks/disk1/work/B1580975/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/B1580975/p/xunit.*.dll\n-r:/datadisks/disk1/work/B1580975/p/mscorlib.dll\n-r:/datadisks/disk1/work/B1580975/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/B1580975/p/crossgen2/crossgen2 @/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/B1580975/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n07:24:41\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/B1580975/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174489 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/B1580975/w/BA150A44/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 12/26/2024 7:24:41 AM, end: 12/26/2024 7:54:41 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_98566.dmp.crashreport.json\u0027\nInvoking llvm-s\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor14|0_15(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-27T08:23:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4c2V",
                                           "createdAt":  "2024-12-30T01:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgostress 20241227.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=903545\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23747532\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked syntheticpgo_blend @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A9EE0954/w/95ED087C/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/28/2024 7:38:30 AM, end: 12/28/2024 7:48:30 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A9EE0954/w/95ED087C/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A9EE0954/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174537 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/A9EE0954/w/95ED087C/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/28/2024 7:38:30 AM, end: 12/28/2024 7:48:30 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_110025.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x1adc9\n      Child SP               IP Call Site\n 0x7a2b68873590 0x7a2b682e57f8 libc.so.6!clock_nanosleep\n 0x7a2b68873610 0x7a2b682ea677 libc.so.6!__nanosleep\n 0x7a2b68873620 0x7a2b682ea5ae libc.so.6!sleep\n 0x7a2b68873660 0x7a2b6808322a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x7a2b68874380 0x7a2b68242520 libc.so.6!\n 0x7fff118bace0 0x7a2aea11ddde stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff118bacf0 0x7a2aea11ddac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff118cad00 0x7a2aea11e1ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff118dad10 0x7a2aea11de2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff118ead20 0x7a2aea11ddac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff118fad30 0x7a2aea11e1ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff1190ad40 0x7a2aea11de2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff1191ad50 0x7a2aea11ddac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff1192ad60 0x7a2aea11e1ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff1193ad70 0x7a2aea11de2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff1194ad80 0x7a2aea11ddac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff1195ad90 0x7a2aea11e1ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff1196ada0 0x7a2aea11de2c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff1197adb0 0x7a2aea11ddac stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff1198adc0 0x7a2aea11e1ec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff1199add0 0x7a2aea11d\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-30T01:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y9jIb",
                                           "createdAt":  "2024-12-31T09:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20241230.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=904443\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23789350\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A6960966/w/B5D809C8/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/31/2024 2:39:21 AM, end: 12/31/2024 2:49:21 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A6960966/w/B5D809C8/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A6960966/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174516 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/A6960966/w/B5D809C8/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 12/31/2024 2:39:21 AM, end: 12/31/2024 2:49:21 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_12128.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x2f60\n      Child SP               IP Call Site\n 0x7ffe2c8c0000 0x7b068b691117 libc.so.6!\n 0x7ffe2c8c0040 0x7b068b693a41 libc.so.6!pthread_cond_wait\n 0x7ffe2c8c0120 0x7b068b4c9a3b libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7ffe2c8c0180 0x7b068b4c8fc8 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:300:22\n 0x7ffe2c8c01e0 0\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2024-12-31T09:15:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZBJH0",
                                           "createdAt":  "2025-01-02T01:29:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20241231.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=904777\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23810010\u0026resultId=122052\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked disabler2r @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AAC8092A/w/B6390943/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/1/2025 5:37:49 AM, end: 1/1/2025 6:07:49 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AAC8092A/w/B6390943/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AAC8092A/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174448 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/AAC8092A/w/B6390943/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/1/2025 5:37:49 AM, end: 1/1/2025 6:07:49 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_5836.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x16cc\n      Child SP               IP Call Site\n 0x7ffc9b96aff0 0x740aa5e91117 libc.so.6!\n 0x7ffc9b96b030 0x740aa5e93a41 libc.so.6!pthread_cond_wait\n 0x7ffc9b96b110 0x740aa5cc9a3b libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7ffc9b96b170 0x740aa5cc8fc8 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupRea\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-02T01:29:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZTetx",
                                           "createdAt":  "2025-01-06T02:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr crossgen2 20250104.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=906830\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23884814\u0026resultId=116957\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/5/2025 7:37:20 AM, end: 1/5/2025 8:07:20 AM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n07:37:20\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n07:37:20\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174574 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor14|0_15(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-06T02:03:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zmq2s",
                                           "createdAt":  "2025-01-08T08:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250107.7](https://dev.azure.com/dnceng-public/public/_build/results?buildId=909845\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23984696\u0026resultId=117738\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ (Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n02:42:07\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n02:42:07\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174568 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"-----------------------------\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-08T08:28:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZuHNt",
                                           "createdAt":  "2025-01-09T01:14:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr crossgen2 20250107.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=910090\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23992536\u0026resultId=115741\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/B0EA09DF/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/8/2025 7:18:39 AM, end: 1/8/2025 7:48:40 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B0EA09DF/w/BF770A2B/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n07:18:39\nResponse file: /datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/B0EA09DF/p/System.*.dll\n-r:/datadisks/disk1/work/B0EA09DF/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/B0EA09DF/p/xunit.*.dll\n-r:/datadisks/disk1/work/B0EA09DF/p/mscorlib.dll\n-r:/datadisks/disk1/work/B0EA09DF/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/B0EA09DF/p/crossgen2/crossgen2 @/datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/B0EA09DF/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/B0EA09DF/w/BF770A2B/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n07:18:40\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/B0EA09DF/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174524 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflo\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor14|0_15(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-09T01:14:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Z35g0",
                                           "createdAt":  "2025-01-10T01:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250108.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=911405\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24034532\u0026resultId=123343\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked jitstress2_tiered @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/9/2025 5:50:04 AM, end: 1/9/2025 6:20:04 AM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174570 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1033 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/9/2025 5:50:04 AM, end: 1/9/2025 6:20:04 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_807.dmp.crashreport.json\u0027\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_745.dmp.crashreport.json\u0027\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-10T01:39:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aI5O-",
                                           "createdAt":  "2025-01-13T01:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgostress 20250110.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=914243\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24133548\u0026resultId=122056\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked fullpgo_random_gdv_edge @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AD71097A/w/A76A096C/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/11/2025 7:31:15 AM, end: 1/11/2025 7:41:15 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AD71097A/w/A76A096C/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AD71097A/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174451 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/AD71097A/w/A76A096C/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/11/2025 7:31:15 AM, end: 1/11/2025 7:41:15 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_8342.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x2096\n      Child SP               IP Call Site\n 0x74fb22d3f590 0x74fb226e57f8 libc.so.6!clock_nanosleep\n 0x74fb22d3f610 0x74fb226ea677 libc.so.6!__nanosleep\n 0x74fb22d3f620 0x74fb226ea5ae libc.so.6!sleep\n 0x74fb22d3f660 0x74fb22480f4a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x74fb22d40380 0x74fb22642520 libc.so.6!\n 0x7ffe1891c790 0x74faa451dbfe stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe1891c7a0 0x74faa451dbcc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe1892c7b0 0x74faa451e00c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe1893c7c0 0x74faa451dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe1894c7d0 0x74faa451dbcc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe1895c7e0 0x74faa451e00c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe1896c7f0 0x74faa451dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe1897c800 0x74faa451dbcc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe1898c810 0x74faa451e00c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe1899c820 0x74faa451dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe189ac830 0x74faa451dbcc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe189bc840 0x74faa451e00c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe189cc850 0x74faa451dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe189dc860 0x74faa451dbcc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe189ec870 0x74faa451e00c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe189fc880 0x74faa451dc4c sta\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-13T01:25:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aLGpA",
                                           "createdAt":  "2025-01-13T09:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "cc @janvorli, any possibility you could take a look at this? Looks like some form of hang.",
                                           "updatedAt":  "2025-01-13T09:31:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aLxkb",
                                           "createdAt":  "2025-01-13T10:52:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "So far seems to be Linux only",
                                           "updatedAt":  "2025-01-13T11:03:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aMxXg",
                                           "createdAt":  "2025-01-13T12:58:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I have looked at this in the past. The infinite loop (the hang @jakobbotsch mentions) is sometimes intentional, it happens when another thread is already handling stack overflow. We don\u0027t allow multiple threads to handle it. The thread that was handling the stack overflow should have terminated the process. \nI\u0027ve just noticed that in some of the failing cases, including the last one shown above though, the hang occurs in the test case when stack overflow is run on the main thread only, so there should not be another thread that would handle a stack overflow at the same time. So it looks as somehow the stack overflow handling code somehow returned without handling the stack overflow in some edge case and we returned to the original location, re-triggering the stack overflow again.\nI was unable to repro it locally so far. I\u0027ve tried several overnight runs in a loop with the same settings as in the lab and it never reproduced. \nI\u0027ll try to add some temporary checks into the code so that next time we hit it in the lab, we can figure out more.\n",
                                           "updatedAt":  "2025-01-13T12:58:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aSicG",
                                           "createdAt":  "2025-01-14T01:16:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20250113.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=915319\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24174406\u0026resultId=122056\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked defaultpgo @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A8880980/w/ACDF096E/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/13/2025 9:33:39 AM, end: 1/13/2025 9:43:39 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A8880980/w/ACDF096E/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A8880980/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174419 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/A8880980/w/ACDF096E/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/13/2025 9:33:39 AM, end: 1/13/2025 9:43:39 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_53748.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0xd1f4\n      Child SP               IP Call Site\n 0x781e657b5590 0x781e650e57f8 libc.so.6!clock_nanosleep\n 0x781e657b5610 0x781e650ea677 libc.so.6!__nanosleep\n 0x781e657b5620 0x781e650ea5ae libc.so.6!sleep\n 0x781e657b5660 0x781e64e80dca libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x781e657b6380 0x781e65042520 libc.so.6!\n 0x7ffe8df07010 0x781de6ed2d1e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8df07020 0x781de6ed2cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8df17030 0x781de6ed2f5c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8df27040 0x781de6ed2d6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8df37050 0x781de6ed2cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8df47060 0x781de6ed2f5c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8df57070 0x781de6ed2d6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8df67080 0x781de6ed2cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8df77090 0x781de6ed2f5c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8df870a0 0x781de6ed2d6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8df970b0 0x781de6ed2cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8dfa70c0 0x781de6ed2f5c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe8dfb70d0 0x781de6ed2d6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe8dfc70e0 0x781de6ed2cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe8dfd70f0 0x78\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-14T01:16:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aoVs2",
                                           "createdAt":  "2025-01-16T01:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250115.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=918580\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24280404\u0026resultId=122056\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A4CF090D/w/A8690928/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/15/2025 7:56:10 PM, end: 1/15/2025 8:06:10 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A4CF090D/w/A8690928/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A4CF090D/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174508 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/A4CF090D/w/A8690928/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/15/2025 7:56:10 PM, end: 1/15/2025 8:06:10 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_37514.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x928a\n      Child SP               IP Call Site\n 0x78987225d590 0x789871ce57f8 libc.so.6!clock_nanosleep\n 0x78987225d610 0x789871cea677 libc.so.6!__nanosleep\n 0x78987225d620 0x789871cea5ae libc.so.6!sleep\n 0x78987225d660 0x789871a80dca libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x78987225e380 0x789871c42520 libc.so.6!\n 0x7ffeb8d65350 0x7897f3ad27ce stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb8d65360 0x7897f3ad279c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb8d75370 0x7897f3ad289c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb8d85380 0x7897f3ad281c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb8d95390 0x7897f3ad279c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb8da53a0 0x7897f3ad289c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb8db53b0 0x7897f3ad281c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb8dc53c0 0x7897f3ad279c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb8dd53d0 0x7897f3ad289c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb8de53e0 0x7897f3ad281c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb8df53f0 0x7897f3ad279c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb8e05400 0x7897f3ad289c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb8e15410 0x7897f3ad281c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb8e25420 0x7897f3ad279c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb8e35430 0x7897f3ad289c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb8e45440 0x7897f3ad281c st\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-16T01:17:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6azseV",
                                           "createdAt":  "2025-01-17T01:27:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250115.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=919278\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24301202\u0026resultId=122056\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress1_tiered @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/C3C90A70/w/A91108EE/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/16/2025 5:26:15 AM, end: 1/16/2025 5:56:15 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/C3C90A70/w/A91108EE/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/C3C90A70/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174543 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1031 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\ncmdLine:/datadisks/disk1/work/C3C90A70/w/A91108EE/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.s\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-17T01:27:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bCoZx",
                                           "createdAt":  "2025-01-20T01:45:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgostress 20250117.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=921860\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24381032\u0026resultId=122056\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked fullpgo_random_gdv @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/B5FE09E4/w/B2370982/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/18/2025 7:28:31 AM, end: 1/18/2025 7:38:31 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B5FE09E4/w/B2370982/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B5FE09E4/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174509 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\ncmdLine:/datadisks/disk1/work/B5FE09E4/w/B2370982/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/18/2025 7:28:31 AM, end: 1/18/2025 7:38:31 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_3853.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0xf0d\n      Child SP               IP Call Site\n 0x7497adab8590 0x7497ad4e57f8 libc.so.6!clock_nanosleep\n 0x7497adab8610 0x7497ad4ea677 libc.so.6!__nanosleep\n 0x7497adab8620 0x7497ad4ea5ae libc.so.6!sleep\n 0x7497adab8660 0x7497ad2807da libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:641:21\n 0x7497adab9380 0x7497ad442520 libc.so.6!\n 0x7fff5c231900 0x74972f38dc7e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff5c231910 0x74972f38dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff5c241920 0x74972f38dd4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff5c251930 0x74972f38dccc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff5c261940 0x74972f38dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff5c271950 0x74972f38dd4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff5c281960 0x74972f38dccc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff5c291970 0x74972f38dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff5c2a1980 0x74972f38dd4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff5c2b1990 0x74972f38dccc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff5c2c19a0 0x74972f38dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff5c2d19b0 0x74972f38dd4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7fff5c2e19c0 0x74972f38dccc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7fff5c2f19d0 0x74972f38dc4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7fff5c3019e0 0x7497\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-20T01:45:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bNrbV",
                                           "createdAt":  "2025-01-21T09:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250120.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=923503\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24436694\u0026resultId=122056\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AFDF0987/w/A9D90974/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/21/2025 2:35:15 AM, end: 1/21/2025 2:45:15 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AFDF0987/w/A9D90974/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AFDF0987/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174404 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1033 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\ncmdLine:/datadisks/disk1/work/AFDF0987/w/A9D90974\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-21T09:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bVYdt",
                                           "createdAt":  "2025-01-22T01:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250121.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=924198\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24460600\u0026resultId=123344\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/21/2025 7:50:05 PM, end: 1/21/2025 8:00:05 PM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174554 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 1/21/2025 7:50:05 PM, end: 1/21/2025 8:00:05 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_809.dmp.crashreport.json\u0027\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_747.dmp.crashreport.json\u0027\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-22T01:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bdBJG",
                                           "createdAt":  "2025-01-22T19:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e I\u0027ll try to add some temporary checks into the code so that next time we hit it in the lab, we can figure out more.\n\n@janvorli - were you able to add the checks? This again failed in this week\u0027s run.",
                                           "updatedAt":  "2025-01-22T19:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bdKfu",
                                           "createdAt":  "2025-01-22T19:40:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Not yet, but it is on my TODO list to do as soon as I can.",
                                           "updatedAt":  "2025-01-22T19:40:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bpe6b",
                                           "createdAt":  "2025-01-24T01:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250123.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=926879\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24539082\u0026resultId=114415\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174606 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32764 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 1/23/2025 7:18:03 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-24T01:19:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b0ROV",
                                           "createdAt":  "2025-01-26T01:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250123.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=927560\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24553404\u0026resultId=123395\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked jitstress1_tiered @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/24/2025 5:34:15 AM, end: 1/24/2025 6:04:15 AM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174575 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1033 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/24/2025 5:34:15 AM, end: 1/24/2025 6:04:15 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_807.dmp.crashreport.json\u0027\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_746.dmp.crashreport.json\u0027\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-26T01:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b2aOi",
                                           "createdAt":  "2025-01-27T02:14:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress2-jitstressregs 20250126.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=929846\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24609188\u0026resultId=122469\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress2_jitstressregs0x2000 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/BA700A13/w/B5DE09CD/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/26/2025 6:50:15 PM, end: 1/26/2025 7:20:15 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/BA700A13/w/B5DE09CD/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/BA700A13/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174566 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\ncmdLine:/datadisks/disk1/work/BA700A13/w/B5DE09CD/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 1/26/2025 6:50:15 PM, end: 1/26/2025 7:20:15 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_12665.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x3179\n      Child SP               IP Call Site\n 0x7fff3abbaec0 0x783fb7c91117 libc.so.6!\n 0x7fff3abbaf00 0x783fb7c93a41 libc.so.6!pthread_cond_wait\n 0x7fff3abbafe0 0x783fb7ac55bb libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7fff3abbb040 0x783fb7ac4b48 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:300:22\n 0x7fff3abbb0a0 0x7\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-01-27T02:14:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b78Zf",
                                           "createdAt":  "2025-01-27T16:10:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I\u0027ve created PR #111867 with additional logging to help further investigations.",
                                           "updatedAt":  "2025-01-27T16:10:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dF3l4",
                                           "createdAt":  "2025-02-05T02:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgostress 20250131.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=936980\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24835616\u0026resultId=123868\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked fullpgo @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 2/1/2025 7:31:59 AM, end: 2/1/2025 7:41:59 AM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174491 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174613 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread+StartHelper.Run()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 2/1/2025 7:31:59 AM, end: 2/1/2025 7:41:59 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_823.dmp.crashreport.json\u0027\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_762.dmp.crashreport.json\u0027\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-05T02:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dQoKC",
                                           "createdAt":  "2025-02-06T01:11:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250204.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=940537\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24968306\u0026resultId=123302\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked jitstress2_tiered @ (Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/5/2025 6:06:03 AM, end: 2/5/2025 6:36:03 AM)\n\nReturn code:      -100\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174558 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174616 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1033 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/5/2025 6:06:03 AM, end: 2/5/2025 6:36:03 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_808.dmp.crashreport.json\u0027\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_747.dmp.crashreport.json\u0027\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-06T01:11:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dcycS",
                                           "createdAt":  "2025-02-07T01:04:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250206.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=942438\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25025470\u0026resultId=122424\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A74A0952/w/AEDA0923/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 2/6/2025 11:02:00 AM, end: 2/6/2025 11:12:00 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A74A0952/w/AEDA0923/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A74A0952/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174429 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A74A0952/w/AEDA0923/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 2/6/2025 11:02:00 AM, end: 2/6/2025 11:12:00 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_13548.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x34ec\n      Child SP               IP Call Site\n 0x76087b1f1260 0x76087aae57f8 libc.so.6!clock_nanosleep\n 0x76087b1f12e0 0x76087aaea677 libc.so.6!__nanosleep\n 0x76087b1f12f0 0x76087aaea5ae libc.so.6!sleep\n 0x76087b1f1330 0x76087a87ea3a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:660:21\n 0x76087b1f1380 0x76087aa42520 libc.so.6!\n 0x7ffefc6049a0 0x7607fc942a7e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffefc6049b0 0x7607fc942a4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffefc6149c0 0x7607fc942b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffefc6249d0 0x7607fc942acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffefc6349e0 0x7607fc942a4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffefc6449f0 0x7607fc942b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffefc654a00 0x7607fc942acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffefc664a10 0x7607fc942a4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffefc674a20 0x7607fc942b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffefc684a30 0x7607fc942acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffefc694a40 0x7607fc942a4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffefc6a4a50 0x7607fc942b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffefc6b4a60 0x7607fc942acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffefc6c4a70 0x7607fc942a4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffefc6d4a80 0x7607f\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-07T01:04:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dd40r",
                                           "createdAt":  "2025-02-07T03:35:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "@janvorli - with https://github.com/dotnet/runtime/pull/111867 merged last week, can we get insights into this failure? ",
                                           "updatedAt":  "2025-02-07T03:35:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dgE2L",
                                           "createdAt":  "2025-02-07T09:40:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@kunalspathak even with the added logging, I was unable to figure out how that can occur. I can see that it detects that the stack overflow was hit on the main thread for 2nd time, but I don\u0027t see how that could happen. The added logging indicates that we don\u0027t return from the sigsegv handler, which would be the only way I could imagine we would hit the sigsegv at the same place. The stack trace dumped from the hung process seems to indicate that the 2nd sigsegv came from the managed code of the test.\n\nI have tried to repro it locally on both x64 and arm64 linux and was unable to get a repro even in 10000 iterations.\n\nOne more idea I have that I\u0027ll try to create a PR for today is to trigger actual dump generation when I detect that we got the sigsegv on the same thread again. Maybe that\u0027s going to reveal more.",
                                           "updatedAt":  "2025-02-07T09:40:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dnm0T",
                                           "createdAt":  "2025-02-08T01:19:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20250206.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=943845\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25060786\u0026resultId=122424\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/AFAD09A9/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/7/2025 7:02:59 AM, end: 2/7/2025 7:32:59 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AFAD09A9/w/C3D70A30/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n07:02:59\nResponse file: /datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/AFAD09A9/p/System.*.dll\n-r:/datadisks/disk1/work/AFAD09A9/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/AFAD09A9/p/xunit.*.dll\n-r:/datadisks/disk1/work/AFAD09A9/p/mscorlib.dll\n-r:/datadisks/disk1/work/AFAD09A9/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/AFAD09A9/p/crossgen2/crossgen2 @/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/AFAD09A9/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n07:03:00\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/AFAD09A9/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174412 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/AFAD09A9/w/C3D70A30/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/7/2025 7:02:59 AM, end: 2/7/2025 7:32:59 AM)\nPrinting stac\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-08T01:19:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dwp84",
                                           "createdAt":  "2025-02-10T02:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress-isas-x86 20250208.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=945526\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25104166\u0026resultId=122425\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress_isas_2_x86_nosse41 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/AE890973/w/AC6A0983/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/8/2025 10:03:11 PM, end: 2/8/2025 10:33:11 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/AE890973/w/AC6A0983/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/AE890973/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174521 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/AE890973/w/AC6A0983/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/8/2025 10:03:11 PM, end: 2/8/2025 10:33:11 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_47874.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0xbb02\n      Child SP               IP Call Site\n 0x7fff4a054b80 0x74343ba91117 libc.so.6!\n 0x7fff4a054bc0 0x74343ba93a41 libc.so.6!pthread_cond_wait\n 0x7fff4a054ca0 0x74343b8c5deb libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7fff4a054d00 0x74343b8c5378 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-10T02:20:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d7euH",
                                           "createdAt":  "2025-02-11T01:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20250209.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=946084\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25118510\u0026resultId=122425\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked jitstressregs1 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/A20F08BF/p/crossgen2/createdump\n\ncmdLine:/datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 5400000 from variable __TestTimeout, start: 2/10/2025 4:10:20 AM, end: 2/10/2025 5:40:20 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A20F08BF/w/B02F09C4/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n04:10:20\nResponse file: /datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/datadisks/disk1/work/A20F08BF/p/System.*.dll\n-r:/datadisks/disk1/work/A20F08BF/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/A20F08BF/p/xunit.*.dll\n-r:/datadisks/disk1/work/A20F08BF/p/mscorlib.dll\n-r:/datadisks/disk1/work/A20F08BF/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/A20F08BF/p/crossgen2/crossgen2 @/datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/A20F08BF/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/A20F08BF/w/B02F09C4/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n04:10:21\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/A20F08BF/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174427 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverf\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-11T01:30:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eGMIF",
                                           "createdAt":  "2025-02-12T01:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250210.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=947648\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25168438\u0026resultId=122425\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress1 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A49208F8/w/AC720934/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/11/2025 5:38:14 AM, end: 2/11/2025 6:08:14 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A49208F8/w/AC720934/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A49208F8/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174452 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A49208F8/w/AC720934/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/11/2025 5:38:14 AM, end: 2/11/2025 6:08:14 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_5865.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x16e9\n      Child SP               IP Call Site\n 0x7ffe703a5990 0x7222aae91117 libc.so.6!\n 0x7ffe703a59d0 0x7222aae93a41 libc.so.6!pthread_cond_wait\n 0x7ffe703a5ab0 0x7222aacc5deb libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7ffe703a5b10 0x7222aacc5378 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/s\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-12T01:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6edg72",
                                           "createdAt":  "2025-02-14T08:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250213.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=952073\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25311796\u0026resultId=121153\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174519 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1033 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/14/2025 2:45:02 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up \n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-14T08:04:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6epzDu",
                                           "createdAt":  "2025-02-17T01:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress-isas-x86 20250215.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=953670\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25358648\u0026resultId=122426\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress_isas_1_x86_noavx2 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A4D108E9/w/B2EC0983/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/15/2025 9:16:54 PM, end: 2/15/2025 9:46:54 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A4D108E9/w/B2EC0983/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A4D108E9/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174513 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A4D108E9/w/B2EC0983/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/15/2025 9:16:54 PM, end: 2/15/2025 9:46:54 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_66229.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x102b5\n      Child SP               IP Call Site\n 0x754768ddd260 0x7547686e57f8 libc.so.6!clock_nanosleep\n 0x754768ddd2e0 0x7547686ea677 libc.so.6!__nanosleep\n 0x754768ddd2f0 0x7547686ea5ae libc.so.6!sleep\n 0x754768ddd330 0x7547684766ca libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:660:21\n 0x754768ddd380 0x754768642520 libc.so.6!\n 0x7ffeb703e630 0x7546ea551e9e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb703e640 0x7546ea551e6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb704e650 0x7546ea551f6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb705e660 0x7546ea551eec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb706e670 0x7546ea551e6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb707e680 0x7546ea551f6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb708e690 0x7546ea551eec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb709e6a0 0x7546ea551e6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb70ae6b0 0x7546ea551f6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb70be6c0 0x7546ea551eec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb70ce6d0 0x7546ea551e6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb70de6e0 0x7546ea551f6c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb70ee6f0 0x7546ea551eec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb70fe700 0x7546ea551e6c stackoverflow.dll!TestStackOver\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-17T01:28:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ezsv7",
                                           "createdAt":  "2025-02-18T01:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250217.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=954661\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25395504\u0026resultId=104378\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174544 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32764 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/17/2025 7:31:36 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-18T01:26:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fMM6V",
                                           "createdAt":  "2025-02-20T08:23:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250219.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=957268\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25475928\u0026resultId=107853\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174579 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/20/2025 2:51:37 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-20T08:23:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fYDiw",
                                           "createdAt":  "2025-02-21T08:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250220.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=958505\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25509812\u0026resultId=122428\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A9C80903/w/B66D099E/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 2/21/2025 2:32:39 AM, end: 2/21/2025 2:42:39 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A9C80903/w/B66D099E/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A9C80903/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174422 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A9C80903/w/B66D099E/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 2/21/2025 2:32:39 AM, end: 2/21/2025 2:42:39 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_5560.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x15b8\n      Child SP               IP Call Site\n 0x75758cec6260 0x75758c8e57f8 libc.so.6!clock_nanosleep\n 0x75758cec62e0 0x75758c8ea677 libc.so.6!__nanosleep\n 0x75758cec62f0 0x75758c8ea5ae libc.so.6!sleep\n 0x75758cec6330 0x75758c676e7a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:660:21\n 0x75758cec6380 0x75758c842520 libc.so.6!\n 0x7ffeb4858d20 0x75750e7226ee stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb4858d30 0x75750e7226bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb4868d40 0x75750e7227bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb4878d50 0x75750e72273c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb4888d60 0x75750e7226bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb4898d70 0x75750e7227bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb48a8d80 0x75750e72273c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb48b8d90 0x75750e7226bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb48c8da0 0x75750e7227bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb48d8db0 0x75750e72273c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb48e8dc0 0x75750e7226bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb48f8dd0 0x75750e7227bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffeb4908de0 0x75750e72273c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffeb4918df0 0x75750e7226bc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffeb4928e00 0x75750e7227bc stackoverflow.dll!TestStackOverflow.Program.Infi\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-21T08:22:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fma9i",
                                           "createdAt":  "2025-02-24T07:49:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress-isas-x86 20250222.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=959916\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25555472\u0026resultId=122430\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress_isas_nohwintrinsic_nosimd @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A8D30967/w/AF6708E1/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/22/2025 9:49:40 PM, end: 2/22/2025 10:19:40 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A8D30967/w/AF6708E1/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A8D30967/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174423 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A8D30967/w/AF6708E1/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/22/2025 9:49:40 PM, end: 2/22/2025 10:19:40 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_17438.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x441e\n      Child SP               IP Call Site\n 0x7c44b718d260 0x7c44b6ae57f8 libc.so.6!clock_nanosleep\n 0x7c44b718d2e0 0x7c44b6aea677 libc.so.6!__nanosleep\n 0x7c44b718d2f0 0x7c44b6aea5ae libc.so.6!sleep\n 0x7c44b718d330 0x7c44b687711a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:660:21\n 0x7c44b718d380 0x7c44b6a42520 libc.so.6!\n 0x7ffcc42892f0 0x7c443895260e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffcc4289300 0x7c44389525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffcc4299310 0x7c44389526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffcc42a9320 0x7c443895265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffcc42b9330 0x7c44389525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffcc42c9340 0x7c44389526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffcc42d9350 0x7c443895265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffcc42e9360 0x7c44389525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffcc42f9370 0x7c44389526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffcc4309380 0x7c443895265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffcc4319390 0x7c44389525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffcc43293a0 0x7c44389526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffcc43393b0 0x7c443895265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffcc43493c0 0x7c44389525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffcc43593d0 0x7c44389526dc stackoverflow.dll!TestStackOverflow.Program\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-24T07:49:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fweEz",
                                           "createdAt":  "2025-02-25T03:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250224.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=961276\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25601896\u0026resultId=114013\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174533 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32764 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/24/2025 7:33:31 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-25T03:00:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gTmmK",
                                           "createdAt":  "2025-02-28T01:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250227.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=964886\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25710324\u0026resultId=118830\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174574 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 2/27/2025 7:54:52 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-02-28T01:28:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ghRWb",
                                           "createdAt":  "2025-03-03T01:53:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstressregs 20250301.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=966325\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25746580\u0026resultId=122433\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstressregs0x2000 @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A4C30924/w/A64808E3/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 3/1/2025 12:00:42 PM, end: 3/1/2025 12:30:42 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A4C30924/w/A64808E3/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A4C30924/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174413 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A4C30924/w/A64808E3/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 3/1/2025 12:00:42 PM, end: 3/1/2025 12:30:42 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_6611.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x19d3\n      Child SP               IP Call Site\n 0x7ffd765dd680 0x70a23cc91117 libc.so.6!\n 0x7ffd765dd6c0 0x70a23cc93a41 libc.so.6!pthread_cond_wait\n 0x7ffd765dd7a0 0x70a23cabe4db libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7ffd765dd800 0x70a23cabda68 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupRe\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-03T01:53:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g880M",
                                           "createdAt":  "2025-03-05T09:21:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20250304.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=968362\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25807152\u0026resultId=122434\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked defaultpgo @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/B7350995/w/ACFC0964/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 3/4/2025 9:18:39 AM, end: 3/4/2025 9:28:39 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B7350995/w/ACFC0964/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B7350995/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174466 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/B7350995/w/ACFC0964/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 3/4/2025 9:18:39 AM, end: 3/4/2025 9:28:39 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_35599.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x8b0f\n      Child SP               IP Call Site\n 0x747f8a908260 0x747f8a2e57f8 libc.so.6!clock_nanosleep\n 0x747f8a9082e0 0x747f8a2ea677 libc.so.6!__nanosleep\n 0x747f8a9082f0 0x747f8a2ea5ae libc.so.6!sleep\n 0x747f8a908330 0x747f8a0779ea libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:660:21\n 0x747f8a908380 0x747f8a242520 libc.so.6!\n 0x7ffc221041d0 0x747f0c15260e stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffc221041e0 0x747f0c1525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffc221141f0 0x747f0c1526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffc22124200 0x747f0c15265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffc22134210 0x747f0c1525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffc22144220 0x747f0c1526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffc22154230 0x747f0c15265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffc22164240 0x747f0c1525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffc22174250 0x747f0c1526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffc22184260 0x747f0c15265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffc22194270 0x747f0c1525dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffc221a4280 0x747f0c1526dc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffc221b4290 0x747f0c15265c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffc221c42a0 0x747f0c1525dc stackoverflow.dll!TestStackOverflow.Pr\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-05T09:21:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6he05_",
                                           "createdAt":  "2025-03-10T01:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress-isas-x86 20250308.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=973012\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25937076\u0026resultId=122434\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress_isas_x86_nosse @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/B67E09D6/w/B1FA09B0/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 3/8/2025 9:15:50 PM, end: 3/8/2025 9:45:50 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B67E09D6/w/B1FA09B0/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B67E09D6/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174414 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/B67E09D6/w/B1FA09B0/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 3/8/2025 9:15:50 PM, end: 3/8/2025 9:45:50 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_35318.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x89f6\n      Child SP               IP Call Site\n 0x7ffe53badee0 0x7f1bbca91117 libc.so.6!\n 0x7ffe53badf20 0x7f1bbca93a41 libc.so.6!pthread_cond_wait\n 0x7ffe53bae000 0x7f1bbc8c133b libcoreclr.so!CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:476:28\n 0x7ffe53bae060 0x7f1bbc8c08c8 libcoreclr.so!CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-10T01:24:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iGIuy",
                                           "createdAt":  "2025-03-13T01:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20250312.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=976898\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26032512\u0026resultId=122439\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked defaultpgo @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/B8AB09E1/w/AF4009D8/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 3/12/2025 9:47:59 AM, end: 3/12/2025 9:57:59 AM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/B8AB09E1/w/AF4009D8/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/B8AB09E1/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174414 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"{0x763a-0x7118a3c9b870} ASSERT [THREAD ] at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp.1475: Expression: setNameResult == 0\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"@Exiting stack trace printing thread.\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/B8AB09E1/w/AF4009D8/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 3/12/2025 9:47:59 AM, end: 3/12/2025 9:57:59 AM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_30375.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-13T01:34:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iTz0Z",
                                           "createdAt":  "2025-03-14T01:30:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250313.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=979333\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26101698\u0026resultId=105813\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked no_tiered_compilation @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n20:05:43\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n20:05:44\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174518 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Pro\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-14T01:30:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iaThZ",
                                           "createdAt":  "2025-03-14T14:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The issue was hit with my latest logging added yesterday. From that, I can see that while the secondary thread that printed the stack trace has exited (\"@Exiting stack trace printing thread.\"), the main thread waiting for it has hit another stack overflow seemingly during the wait, as the message that gets printed right after the wait is not in the log (\"@Stack trace printing helper thread exited.\").\n\nWhat may have happened is that there was an async signal like the activation one, for example, that would fire during the wait and its handler wouldn\u0027t have enough stack space left. The stack overflow handling stack is 32kB large (plus one guard page) and when I debug the test, the consumed portion of stack at the wait is approx 1/2 of that, so it is still strange.",
                                           "updatedAt":  "2025-03-14T14:04:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ipATh",
                                           "createdAt":  "2025-03-17T08:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250316.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=982246\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26203084\u0026resultId=113378\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n03:09:31\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n03:09:31\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174422 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Pro\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-17T08:59:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jb2gm",
                                           "createdAt":  "2025-03-21T01:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250319.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=986913\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26333152\u0026resultId=122495\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows x64 Checked jitstress2_tiered @ Windows.10.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      C:hwB2F809C9wA73B092Auploadsstackoverflowstackoverflowtesteroutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwB2F809C9pcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  stackoverflowtester.dll \nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 8008 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"Repeated 8020 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread+StartHelper.RunWorker()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging stack overflow.\"\n\"@Waiting for thread that\u0027s logging s\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-21T01:07:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jtx5O",
                                           "createdAt":  "2025-03-24T02:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250323.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=990491\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26439540\u0026resultId=114462\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174568 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 3/23/2025 7:35:31 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-24T02:04:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j8mg-",
                                           "createdAt":  "2025-03-25T09:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250324.5](https://dev.azure.com/dnceng-public/public/_build/results?buildId=992132\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26485844\u0026resultId=110314\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174560 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32765 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 3/25/2025 2:51:35 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor134|0_135(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-25T09:06:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kzSkX",
                                           "createdAt":  "2025-03-31T01:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250330.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=998622\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26652366\u0026resultId=112609\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174550 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCa\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor136|0_137(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-03-31T01:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k-ih7",
                                           "createdAt":  "2025-04-01T02:04:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250331.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=999766\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26685060\u0026resultId=121498\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174510 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 3/31/2025 7:58:13 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor136|0_137(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-01T02:04:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lKmkI",
                                           "createdAt":  "2025-04-02T01:16:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250401.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1001344\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26724002\u0026resultId=121094\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n20:00:00\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n20:00:00\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174431 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nin ReleaseLock\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/1/2025 8:00:00 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../st\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor136|0_137(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-02T01:16:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lWwDc",
                                           "createdAt":  "2025-04-03T02:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250402.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002907\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26762194\u0026resultId=115037\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:40:46\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:40:46\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174574 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor136|0_137(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-03T02:25:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l2QmS",
                                           "createdAt":  "2025-04-07T08:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250406.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1007036\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26895422\u0026resultId=122429\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n02:54:47\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n02:54:47\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174474 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor136|0_137(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-07T08:36:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mOpy3",
                                           "createdAt":  "2025-04-09T08:58:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250408.8](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1010110\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26983312\u0026resultId=106834\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174508 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/9/2025 2:34:20 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor136|0_137(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-09T08:58:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m6Oj1",
                                           "createdAt":  "2025-04-14T01:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250412.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1014577\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27138572\u0026resultId=113832\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174509 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/12/2025 7:36:02 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-14T01:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nJyXC",
                                           "createdAt":  "2025-04-15T09:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250414.9](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1016398\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27192428\u0026resultId=110548\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174593 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32765 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/15/2025 2:35:41 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-15T09:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nlYT5",
                                           "createdAt":  "2025-04-17T02:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250416.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1018036\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27248096\u0026resultId=115236\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked no_tiered_compilation @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174573 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1035 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/16/2025 10:54:04 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-17T02:50:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nvpXx",
                                           "createdAt":  "2025-04-18T01:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250417.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1019740\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27305320\u0026resultId=109508\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:47:22\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:47:22\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174567 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule\n\n",
                                           "updatedAt":  "2025-04-18T07:18:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n7yNw",
                                           "createdAt":  "2025-04-21T01:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250419.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1021010\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27346122\u0026resultId=111391\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174541 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32764 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/19/2025 10:36:50 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule\n\n",
                                           "updatedAt":  "2025-04-22T01:29:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oCEez",
                                           "createdAt":  "2025-04-21T17:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Another failure: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1021687\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27369384\u0026resultId=122458\u0026paneView=debug\n\n@janvorli @mangod9 Is this test providing enough value, compared to the noise it creates, to warrant continue running it?",
                                           "updatedAt":  "2025-04-21T17:46:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oEy1y",
                                           "createdAt":  "2025-04-22T01:29:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr crossgen2 20250420.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1021652\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27367436\u0026resultId=102074\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /datadisks/disk1/work/B70D095B/p/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /datadisks/disk1/work/B70D095B/w/AE9A09DD/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n07:40:52\nResponse file: /datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n--hot-cold-splitting\n-r:/datadisks/disk1/work/B70D095B/p/System.*.dll\n-r:/datadisks/disk1/work/B70D095B/p/Microsoft.*.dll\n-r:/datadisks/disk1/work/B70D095B/p/xunit.*.dll\n-r:/datadisks/disk1/work/B70D095B/p/mscorlib.dll\n-r:/datadisks/disk1/work/B70D095B/p/netstandard.dll\nRunning CrossGen2:  /datadisks/disk1/work/B70D095B/p/crossgen2/crossgen2 @/datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /datadisks/disk1/work/B70D095B/p/R2RDump/R2RDump.dll --header --sc --in /datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /datadisks/disk1/work/B70D095B/w/AE9A09DD/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n07:40:53\nin ReleaseLock\nin takeLock\n/datadisks/disk1/work/B70D095B/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174493 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174645 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflo\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor17|0_18(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-04-22T01:29:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oQQGX",
                                           "createdAt":  "2025-04-23T01:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250421.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1022124\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27382170\u0026resultId=122458\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked jitstress1_tiered @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:/datadisks/disk1/work/A42108F8/w/B24B09A9/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 4/21/2025 11:03:55 PM, end: 4/21/2025 11:33:55 PM)\n\nReturn code:      -100\nRaw output file:      /datadisks/disk1/work/A42108F8/w/B24B09A9/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/A42108F8/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174486 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"Stack overflow occurred on the same thread again!\"\n\ncmdLine:/datadisks/disk1/work/A42108F8/w/B24B09A9/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 4/21/2025 11:03:55 PM, end: 4/21/2025 11:33:55 PM)\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/crashdump_96972.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n----------------------------------\nThread Id: 0x17acc\n      Child SP               IP Call Site\n 0x7e32d694a260 0x7e32d62e57f8 libc.so.6!clock_nanosleep\n 0x7e32d694a2e0 0x7e32d62ea677 libc.so.6!__nanosleep\n 0x7e32d694a2f0 0x7e32d62ea5ae libc.so.6!sleep\n 0x7e32d694a330 0x7e32d607194a libcoreclr.so!sigsegv_handler(int, siginfo_t*, void*) at /__w/1/s/src/coreclr/pal/src/exception/signal.cpp:660:21\n 0x7e32d694a380 0x7e32d6242520 libc.so.6!\n 0x7ffe5f38ea90 0x7e3258172afe stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe5f38eaa0 0x7e3258172acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe5f39eab0 0x7e3258172cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe5f3aeac0 0x7e3258172b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe5f3bead0 0x7e3258172acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe5f3ceae0 0x7e3258172cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe5f3deaf0 0x7e3258172b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe5f3eeb00 0x7e3258172acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe5f3feb10 0x7e3258172cec stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionC2()\n 0x7ffe5f40eb20 0x7e3258172b4c stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionB2()\n 0x7ffe5f41eb30 0x7e3258172acc stackoverflow.dll!TestStackOverflow.Program.InfiniteRecursionA2()\n 0x7ffe5f42eb40 0x7e32\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-04-23T01:25:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oUz8N",
                                           "createdAt":  "2025-04-23T11:51:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@BruceForstall I am worried that if we disable the test, we will never figure out what\u0027s wrong. It never repros for me locally and even trying to run the legs manually in the lab didn\u0027t hit the problem for me. I have just created PR #114956 that enlarges the special stack we use for handling stack overflow, as the only explanation I have is that somehow it overflows in rare cases, maybe due to an async signal hitting the thread.",
                                           "updatedAt":  "2025-04-23T11:51:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ooZdU",
                                           "createdAt":  "2025-04-25T01:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250424.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1025747\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27500354\u0026resultId=111548\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked no_tiered_compilation @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:53:58\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:53:59\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174491 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32819 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute meth\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-04-25T01:10:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5-uc",
                                           "createdAt":  "2025-04-28T01:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250427.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1027796\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27570206\u0026resultId=104540\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked no_tiered_compilation @ (Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n20:08:27\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n20:08:28\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174553 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174611 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 t\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-04-28T01:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pG7GJ",
                                           "createdAt":  "2025-04-29T01:13:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20250427.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1027880\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27574474\u0026resultId=116177\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked jitstressregs0x10 @ (Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n04:28:50\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n04:28:50\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174543 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174611 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\n\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-04-29T01:13:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pWVbB",
                                           "createdAt":  "2025-04-30T08:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250429.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1030300\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27661940\u0026resultId=114988\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174593 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32763 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/30/2025 2:27:51 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-04-30T08:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qDkW1",
                                           "createdAt":  "2025-05-06T02:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250505.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1033904\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27779542\u0026resultId=117084\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked no_tiered_compilation @ (Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:59:48\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:59:48\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174490 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174611 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute met\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-06T02:06:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qVVGU",
                                           "createdAt":  "2025-05-07T08:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250506.5](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1035285\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27821040\u0026resultId=113904\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174556 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 5/7/2025 2:30:03 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-07T08:50:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qiZH6",
                                           "createdAt":  "2025-05-08T01:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250507.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1035956\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27843404\u0026resultId=110526\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174564 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32763 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 5/7/2025 8:34:33 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-08T01:27:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rGJQ7",
                                           "createdAt":  "2025-05-12T02:03:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20250510.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1038794\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27935578\u0026resultId=115102\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked jitstressregs0x1000 @ (Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n04:32:35\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n04:32:36\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174498 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174611 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\n\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-12T02:03:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rWOca",
                                           "createdAt":  "2025-05-13T01:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250512.5](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1039726\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27965614\u0026resultId=102442\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked no_tiered_compilation @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\nR2R-CG2 linux x64 Checked @ (Alpine.321.Amd64.Open)azurelinux.3.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:47:14\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:47:14\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174483 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-13T01:19:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ryNVE",
                                           "createdAt":  "2025-05-15T02:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250514.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1041602\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28015314\u0026resultId=108296\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked no_tiered_compilation @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:44:10\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:44:10\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174517 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nC\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-15T02:56:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sdSBG",
                                           "createdAt":  "2025-05-20T08:03:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250519.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1045859\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28151030\u0026resultId=117236\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm64 Checked @ (Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174510 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 174611 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nSystem.Exception: Missing \"Main\" method frame at the last line\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 5/20/2025 2:33:25 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-20T08:04:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tEhbI",
                                           "createdAt":  "2025-05-23T08:14:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250522.6](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1049186\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28268998\u0026resultId=116943\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n02:59:57\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n02:59:57\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174496 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-23T08:14:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tgABo",
                                           "createdAt":  "2025-05-27T01:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250526.4](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1051443\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28333016\u0026resultId=111041\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174573 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32763 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 5/26/2025 7:31:10 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-28T08:14:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6txWM8",
                                           "createdAt":  "2025-05-28T08:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250527.7](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1052601\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28370260\u0026resultId=112621\u0026paneView=debug)\n\n**Failed tests:**\n```\nR2R-CG2 linux arm64 Checked @ (Alpine.321.Arm64.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm64v8\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n DOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n03:14:10\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:arm64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n03:14:11\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174495 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32818 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall \n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-05-28T08:13:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uGjx2",
                                           "createdAt":  "2025-05-30T01:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250529.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1054305\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28415066\u0026resultId=108800\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174571 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32763 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 5/29/2025 7:43:38 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-06-04T01:17:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vHaI8",
                                           "createdAt":  "2025-06-04T01:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250603.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1058103\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28536198\u0026resultId=106951\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\ncoreclr linux x64 Checked @ Ubuntu.2204.Amd64.Open\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174578 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32763 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 6/3/2025 7:33:33 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-06-04T01:17:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wHI1y",
                                           "createdAt":  "2025-06-09T05:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250608.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1061998\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28661630\u0026resultId=116884\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked no_tiered_compilation @ (Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174459 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 6/8/2025 7:41:43 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-06-11T08:24:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wh-1K",
                                           "createdAt":  "2025-06-11T08:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250610.6](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1064388\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=28754062\u0026resultId=111897\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked no_tiered_compilation @ (Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174549 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32764 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe secondary)\n\"Stack overflow.\"\n\"Repeated 8 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameSecondaryThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 6/11/2025 2:37:24 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor137|0_138(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n09:28.7 | runtime-coreclr crossgen2 | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250130.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildId\":\"935834\",\"DefinitionId\":\"124\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"e0092ccc-9d84-5c4e-a93c-aa83bffadeae | Schedule\n16:46.9 | runtime-coreclr outerloop | Checked | ubuntu.2204.armarch.open | arm | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"BuildId\":\"929622\",\"BuildNumber\":\"20250125.3\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.321.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microso | Schedule",
                                           "updatedAt":  "2025-06-11T08:24:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc612Xwk",
                                           "createdAt":  "2025-07-09T02:48:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250708.2](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1088592)\n\n**Failed tests:**\n```\nR2R-CG2 linux x64 Checked @ (Alpine.322.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\nDOTNET_DbgEnableMiniDump is set and the createdump binary does not exist: /root/helix/work/correlation/crossgen2/createdump\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n19:40:56\nResponse file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp\n/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/stackoverflowtester.dll\n-o:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\n--targetarch:x64\n--targetos:linux\n--verify-type-and-field-layout\n--method-layout:random\n-r:/root/helix/work/correlation/System.*.dll\n-r:/root/helix/work/correlation/Microsoft.*.dll\n-r:/root/helix/work/correlation/xunit.*.dll\n-r:/root/helix/work/correlation/mscorlib.dll\n-r:/root/helix/work/correlation/netstandard.dll\nRunning CrossGen2:  /root/helix/work/correlation/crossgen2/crossgen2 @/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.rsp   -r:/root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/IL-CG2/*.dll\nEmitting R2R PE file: /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll\nRunning R2RDump:  dotnet /root/helix/work/correlation/R2RDump/R2RDump.dll --header --sc --in /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll --out /root/helix/work/workitem/e/baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.dll.r2rdump --val\n19:40:56\nin ReleaseLock\nin takeLock\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174448 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nin ReleaseLock\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 07/08/2025 19:40:55\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../st\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor139|0_140(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n6/28/2025, 2:29:21.816 AM | runtime-coreclr outerloop | Checked | azurelinux.3.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.JobId\":\"fa2c7683-52dc-5163-1de4-3cf5b1b4c990\",\"DefinitionId\":\"108\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildId\":\"1080769\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20250627.3\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"operatingSystem\":\"AzureLinux.3.Amd64.Open\",\"AzurePipelinesTestRunId\":\"29382056\",\"System.StageAttempt\":\"1\"} | Schedule\n6/28/2025, 2:29:21.816 AM | runtime-coreclr outerloop | Checked | azurelinux.3.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.JobId\":\"fa2c7683-52dc-5163-1de4-3cf5b1b4c990\",\"DefinitionId\":\"108\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildId\":\"1080769\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20250627.3\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"operatingSystem\":\"AzureLinux.3.Amd64.Open\",\"AzurePipelinesTestRunId\":\"29382056\",\"System.StageAttempt\":\"1\"} | Schedule\n6/3/2025, 7:27:52.522 PM | runtime-coreclr outerloop | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250603.2\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_musl_x64_checked\",\"operatingSystem\":\"(Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\",\"configuration\":\"Checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.JobId\":\"92e17f34-a5d5-5d2c-e1e5-826eb9786835\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"BuildId\":\"1058103\",\"AzurePipelinesTestRunId\":\"28536430\"} | Schedule\n6/3/2025, 7:27:52.522 PM | runtime-coreclr outerloop | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250603.2\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_musl_x64_checked\",\"operatingSystem\":\"(Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\",\"configuration\":\"Checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.JobId\":\"92e17f34-a5d5-5d2c-e1e5-826eb9786835\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"BuildId\":\"1058103\",\"AzurePipelinesTestRunId\":\"28536430\"} | Schedule\n",
                                           "updatedAt":  "2025-07-09T02:48:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63FVy7",
                                           "createdAt":  "2025-07-15T01:49:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250714.3](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1093992)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.322.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174485 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 07/14/2025 20:05:51\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor139|0_140(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\n-- | -- | -- | -- | -- | -- | -- | -- | --\n6/28/2025, 2:29:21.816 AM | runtime-coreclr outerloop | Checked | azurelinux.3.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.JobId\":\"fa2c7683-52dc-5163-1de4-3cf5b1b4c990\",\"DefinitionId\":\"108\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildId\":\"1080769\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20250627.3\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"operatingSystem\":\"AzureLinux.3.Amd64.Open\",\"AzurePipelinesTestRunId\":\"29382056\",\"System.StageAttempt\":\"1\"} | Schedule\n6/28/2025, 2:29:21.816 AM | runtime-coreclr outerloop | Checked | azurelinux.3.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"System.JobId\":\"fa2c7683-52dc-5163-1de4-3cf5b1b4c990\",\"DefinitionId\":\"108\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildId\":\"1080769\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20250627.3\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"operatingSystem\":\"AzureLinux.3.Amd64.Open\",\"AzurePipelinesTestRunId\":\"29382056\",\"System.StageAttempt\":\"1\"} | Schedule\n6/3/2025, 7:27:52.522 PM | runtime-coreclr outerloop | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250603.2\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_musl_x64_checked\",\"operatingSystem\":\"(Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\",\"configuration\":\"Checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.JobId\":\"92e17f34-a5d5-5d2c-e1e5-826eb9786835\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"BuildId\":\"1058103\",\"AzurePipelinesTestRunId\":\"28536430\"} | Schedule\n6/3/2025, 7:27:52.522 PM | runtime-coreclr outerloop | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd | Failed | {\"BuildNumber\":\"20250603.2\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_musl_x64_checked\",\"operatingSystem\":\"(Alpine.321.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-helix-amd64\",\"configuration\":\"Checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"System.JobId\":\"92e17f34-a5d5-5d2c-e1e5-826eb9786835\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr outerloop\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"BuildId\":\"1058103\",\"AzurePipelinesTestRunId\":\"28536430\"} | Schedule\n",
                                           "updatedAt":  "2025-07-15T01:49:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67r_5A",
                                           "createdAt":  "2025-08-04T01:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250802.3](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1112134)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.322.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174518 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 08/03/2025 03:05:37\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor139|0_140(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-08-04T01:28:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68egyA",
                                           "createdAt":  "2025-08-07T01:23:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250806.2](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1115887)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked @ (Alpine.322.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-arm32v7\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174519 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 08/06/2025 19:39:38\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor139|0_140(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-08-07T01:23:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69cuN8",
                                           "createdAt":  "2025-08-12T09:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250811.3](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1119967)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.322.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174481 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflowLargeFrameMainThread()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 08/12/2025 02:31:44\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../stackoverflow/stackoverflowtester/stackoverflowtester.sh\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor139|0_140(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-08-12T09:06:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-KQdM",
                                           "createdAt":  "2025-08-15T01:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20250814.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1122356)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked @ (Alpine.322.Amd64.Open)Ubuntu.2204.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.22-helix-amd64\n    - baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/stackoverflow/stackoverflowtester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true stackoverflowtester.dll \u0027\u0027\nRunning stackoverflow test(smallframe main)\n\"Stack overflow.\"\n\"Repeated 174559 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(largeframe main)\n\"Stack overflow.\"\n\"Repeated 42 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC2()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB2()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA2()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program.Main(System.String[])\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow test(smallframe secondary)\n\"Stack overflow.\"\n\"Repeated 32821 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionC()\"\n\"   at TestStackOverflow.Program.InfiniteRecursionB()\"\n\"--------------------------------\"\n\"   at TestStackOverflow.Program.InfiniteRecursionA()\"\n\"   at TestStackOverflow.Program.Test(Boolean)\"\n\"   at TestStackOverflow.Program+\u003c\u003ec__DisplayClass7_0.\u003cSecondaryThreadsTest\u003eb__0()\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"@Exiting stack trace printing thread.\"\n\"@Stack trace printing helper thread exited.\"\n\"@Proceeding with exit.\"\n\"@Setting throwable.\"\n\"@Calling WatsonLastChance.\"\n\"@Terminating the process.\"\n\"\"\nRunning stackoverflow3 test()\nCall number 50 to the Execute method\nCall number 100 to the Execute method\nCall number 150 to the Execute method\nCall number 200 to the Execute method\nCall number 250 to the Execute method\nCall number 300 to the Execute method\nCall number 350 to the Execute method\nCall number 400 to the Execute method\nCall number 450 to the Execute method\nCall number 500 to the Execute method\nCall number 550 to the Execute method\nCall number 600 to the Execute method\nCall number 650 to the Execute method\nCall number 700 to the Execute method\nCall number 750 to the Execute method\nCall number 800 to the Execute method\nCall number 850 to the Execute method\nCall number 900 to the Execute method\nCall number 950 to the Execute method\nCall number 1000 to the Execute method\n\"Stack overflow.\"\n\"Repeated 1033 times:\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Execute(System.String)\"\n\"--------------------------------\"\n\"   at TestStackOverflow3.Program.Main()\"\n\"@Exiting stack trace printing thread.\"\n\"\"\nSystem.Exception: Exit code: 0x0000008B, expected 0x00000086\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines)\n   at TestStackOverflow.Program.TestStackOverflow3()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /datadisks/disk1/dumps since 08/14/2025 10:34:58\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/wor\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor139|0_140(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-08-15T01:30:10Z"
                                       }
                                   ],
                         "totalCount":  107
                     },
        "title":  "Test failure: baseservices/exceptions/stackoverflow/stackoverflowtester/stackoverflowtester.cmd",
        "labels":  [
                       "os-linux",
                       "arch-x64",
                       "area-ExceptionHandling-coreclr",
                       "blocking-clean-ci",
                       "blocking-clean-ci-optional",
                       "blocking-outerloop",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110769",
        "createdAt":  "2024-12-17T07:36:32Z",
        "number":  110769,
        "author":  "karmeli87",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-10T07:51:32Z",
        "body":  "### Description\n\nWe recently upgraded from .NET 8 to .NET 9 and start to experience crashes in our tests\n\n```\nFaulting application name: testhost.exe, version: 17.1200.24.56501, time stamp: 0x63740000\nFaulting module name: coreclr.dll, version: 9.0.24.52809, time stamp: 0x672049fc\nException code: 0xc0000005\nFault offset: 0x00000000002eea8b\nFaulting process id: 0x2c8c\nFaulting application start time: 0x01db4ea81cad46d8\nFaulting application path: c:\\Jenkins\\workspace\\Testsv70_Winx64\\s\\test\\SlowTests\\bin\\Release\\net9.0\\testhost.exe\nFaulting module path: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\9.0.0\\coreclr.dll\nReport Id: 3804b1ee-81a8-4f06-bef5-760530d90989\nFaulting package full name: \nFaulting package-relative application ID: \n```\n\n```\nApplication: testhost.exe\nCoreCLR Version: 9.0.24.52809\n.NET Version: 9.0.0\nDescription: The process was terminated due to an unhandled exception.\nStack:\n   at System.Runtime.ExceptionServices.InternalCalls.RhpCallFinallyFunclet(Byte*, Void*, ExInfo*)\n   at System.Runtime.ExceptionServices.InternalCalls.RhpCallFinallyFunclet(Byte*, Void*, ExInfo*)\n   at System.Runtime.EH.InvokeSecondPass(ExInfo ByRef, UInt32, UInt32)\n   at System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef)\n   at System.Runtime.EH.RhRethrow(ExInfo ByRef, ExInfo ByRef)\n   at Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler`2[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, \nCulture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, \nPublicKeyToken=7cec85d7bea7798e]].ReceiveReplicationBatches()\n   at Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler`2[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, \nCulture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, \nPublicKeyToken=7cec85d7bea7798e]].DoIncomingReplication()\n   at Raven.Server.Utils.PoolOfThreads+PooledThread.DoWork()\n   at Raven.Server.Utils.PoolOfThreads+PooledThread.Run()\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\n``` \n\nWill attach the dump privately.\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326\n\n### Reproduction Steps\n\nNot at the moment.\n\n### Expected behavior\n\nnot to crash with an AVE\n\n### Actual behavior\n\ncrashing with an AVE\n\n### Regression?\n\nYes, this was working without crashing on .NET 8\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwOA5hQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6X9-Kp",
                                           "createdAt":  "2024-12-17T20:52:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It looks like a GC hole. Could you please share one more dump from a crash so that I can get more confidence on that? It would be great to get a dump with enabled stresslog which would allow me to see a recent history of GC stack walks / relocations. To do that, please set the following env variables:\n```\nDOTNET_StressLog=1 \nDOTNET_LogLevel=7 \nDOTNET_LogFacility=80103 \nDOTNET_StressLogSize=2000000 \nDOTNET_TotalStressLogSize=40000000\n``` \n\nThe stresslog is an in-memory log that gets included in the crash dump and can be dumped via the !stresslog command in WinDbg. ",
                                           "updatedAt":  "2024-12-17T20:52:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YEW67",
                                           "createdAt":  "2024-12-18T13:07:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "Hi,\n\nThanks for looking into that, we will set those env variables and wait for the next dump.\n\nSince the upgrade to .NET 9, we get almost every test run on linux a seg fault, while on windows we get only once a day or two the above AVE.\n\nIf you like we can also share the linux dumps, but I don\u0027t want to mix several issues in one ticket and prefer to tackle one bug at a time.\n\nBut if you believe it can shed more light into current issue we can share those dumps as well.\n\n",
                                           "updatedAt":  "2024-12-18T13:07:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YEehk",
                                           "createdAt":  "2024-12-18T13:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_fvHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karmeli87",
                                                                               "createdAt":  "2024-12-18T13:23:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 It would be great to get linux dumps as well. Chances are it is the same issue.",
                                           "updatedAt":  "2024-12-18T13:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YGaoG",
                                           "createdAt":  "2024-12-18T16:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "I have uploaded the linux dump here https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10815576",
                                           "updatedAt":  "2024-12-18T16:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YIFqb",
                                           "createdAt":  "2024-12-18T20:59:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The Linux crash is a completely different thing. It looks like a JIT bug. Can you please create a separate issue for it? I\u0027ve shared the call stack and crash reason in this gist: https://gist.github.com/janvorli/e9ce073e24f58ccf1629e3cfa0f6c414, so you can cut and paste it into the issue description.",
                                           "updatedAt":  "2024-12-18T20:59:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YIHq8",
                                           "createdAt":  "2024-12-18T21:04:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e https://gist.github.com/janvorli/e9ce073e24f58ccf1629e3cfa0f6c414, so you can cut and paste it into the issue description.\n\nThis looks like a duplicate of #109981",
                                           "updatedAt":  "2024-12-18T21:04:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YIQcl",
                                           "createdAt":  "2024-12-18T21:28:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "According to https://github.com/dotnet/runtime/issues/109981#issuecomment-2528071350 setting the following `DOTNET_JitEnableInductionVariableOpts=0` should workaround this issue.\n\nWe will try that and I report back once we will experience another crash.",
                                           "updatedAt":  "2024-12-18T21:28:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YKybx",
                                           "createdAt":  "2024-12-19T07:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "I have shared another linux dump here https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10815576\n\nwith those env var set\n```\nDOTNET_JitEnableInductionVariableOpts=0\n\nDOTNET_StressLog=1 \nDOTNET_LogLevel=7 \nDOTNET_LogFacility=80103 \nDOTNET_StressLogSize=2000000 \nDOTNET_TotalStressLogSize=40000000\n```\n\nPlease let me know if should open a separate issue for those crashes.",
                                           "updatedAt":  "2024-12-19T07:28:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YLszb",
                                           "createdAt":  "2024-12-19T09:38:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 the crash is exactly the same as the one before (linux). ",
                                           "updatedAt":  "2024-12-19T09:38:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cLDbd",
                                           "createdAt":  "2025-01-28T22:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 I am sorry for the delay, I have not realized that while the Linux case culprit was discovered and fix is on its way (should be in the upcoming servicing release), we have not figured out the Windows case yet.\nTo investigate it further, I would need a dump from Windows with those env variables mentioned in https://github.com/dotnet/runtime/issues/110769#issuecomment-2549605033 set. Can you please share one?",
                                           "updatedAt":  "2025-01-28T22:00:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cOZPn",
                                           "createdAt":  "2025-01-29T08:49:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "Hi @janvorli thanks for not forgetting about that :-) \n\nSince it was crashing every single run on linux we decide to revert back to .Net 8 until the fix will be available in an official release (9.0.2)\n\nOnce it is available we will update back to the latest version and wait for the windows crash which is much more rare.\n\n",
                                           "updatedAt":  "2025-01-29T08:49:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g77bZ",
                                           "createdAt":  "2025-03-05T07:14:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wickedmachinator",
                                           "body":  "\u003e Hi [@janvorli](https://github.com/janvorli) thanks for not forgetting about that :-)\n\u003e \n\u003e Since it was crashing every single run on linux we decide to revert back to .Net 8 until the fix will be available in an official release (9.0.2)\n\u003e \n\u003e Once it is available we will update back to the latest version and wait for the windows crash which is much more rare.\n\nHi @karmeli87!\n\nDisabling CETCompat in csproj was not working for you?\nReference: https://github.com/dotnet/runtime/issues/110355\n\nedit: even after CETCompat is set to false, I still get random access violation exceptions...",
                                           "updatedAt":  "2025-03-05T08:43:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hBKQE",
                                           "createdAt":  "2025-03-05T16:21:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 I was wondering if you have already updated to 9.0.2 and have some more details on the Windows crash?",
                                           "updatedAt":  "2025-03-05T16:21:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hBgxb",
                                           "createdAt":  "2025-03-05T16:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wickedmachinator",
                                           "body":  "@janvorli I have the RVE on .NET 9.0.2, also I have the same issue on 9.0.0 as well.\n\nI tried all these, none helped:\n```\n\u003cCETCompat\u003efalse\u003c/CETCompat\u003e\n\u003cTieredCompilation\u003efalse\u003c/TieredCompilation\u003e\n\u003cTieredCompilationQuickJit\u003efalse\u003c/TieredCompilationQuickJit\u003e\n\u003cTieredCompilationQuickJitForLoops\u003efalse\u003c/TieredCompilationQuickJitForLoops\u003e\n\u003cTieredPGO\u003efalse\u003c/TieredPGO\u003e\n```\n\nI switched back to .NET 8 and the problem is gone.\nThen I installed .NET 10 preview1, however the issue is the same as with .NET 9.0.x.\n\nA few hours ago I set `\u003cServerGarbageCollection\u003etrue\u003c/ServerGarbageCollection\u003e` and it appears the problem is gone on 9.0.2 now but I need more time to confirm:\n- I am running my repro code on a laptop in the next 12 hours\n- also I am running the \"normal code\" that has this issue in the next 10 hours.\nIf the problem is gone, I\u0027ll share the small repro code here tomorrow.",
                                           "updatedAt":  "2025-03-05T16:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hCmI7",
                                           "createdAt":  "2025-03-05T18:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Thanks @wickedmachinator for the details, a repro would be awesome.",
                                           "updatedAt":  "2025-03-05T18:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hG3Vf",
                                           "createdAt":  "2025-03-06T06:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "Hi @janvorli, \nWe didn\u0027t moved to 9.0.2 yet. \n\nBut we do have a test branch on 9.0.2 that I didn\u0027t run for a while (it wasn\u0027t crashing for 5 consecutive runs at the time, which approved the fix for the linux case). \n\nOnce I will get back to testing it, I will report back.   ",
                                           "updatedAt":  "2025-03-06T06:30:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hl7w3",
                                           "createdAt":  "2025-03-10T15:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "We got another crash \n```\nFaulting application name: testhost.exe, version: 17.1300.25.10604, time stamp: 0x63740000\nFaulting module name: coreclr.dll, version: 9.0.225.6610, time stamp: 0x6789558d\nException code: 0xc0000005\nFault offset: 0x000000000004dd45\nFaulting process id: 0x2690\nFaulting application start time: 0x01db90c199cc28d6\nFaulting application path: c:\\Jenkins\\workspace\\Testsv71_Winx64_Debug\\s\\test\\SlowTests\\bin\\Debug\\net9.0\\testhost.exe\nFaulting module path: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\9.0.2\\coreclr.dll\nReport Id: ce9793bc-df10-4014-992a-26ddf62fffe5\n```\n\nI have attached the dump [here](https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10844587)\n\nIt run as Debug, but without other env variables.\n\nThis time the stacktrace is completely different and the heap seems to be very corrupted. \n\n```\n0:062\u003e k\n # Child-SP          RetAddr               Call Site\n00 (Inline Function) --------`--------     coreclr!LoaderAllocator::IsCollectible [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\loaderallocator.hpp @ 575] \n01 000000bc`6a8fa1a0 00007ffa`95882025     coreclr!VirtualCallStubManager::ResolveWorker+0x4d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\virtualcallstub.cpp @ 1486] \n02 000000bc`6a8fa360 00007ffa`958f44dd     coreclr!VSD_ResolveWorker+0x335 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\virtualcallstub.cpp @ 1382] \n03 000000bc`6a8fa480 00007ffa`3dbd5fc5     coreclr!ResolveWorkerAsmStub+0x6d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\VirtualCallStubAMD64.asm @ 36] \n04 000000bc`6a8fa530 00007ffa`9587c1fe     Raven_Server!Raven.Server.Documents.Indexes.Index.DoIndexingWork+0xbe5\n05 000000bc`6a8fa580 00007ffa`3a4f6a89     coreclr!CallFinallyFunclet+0x11e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\exceptionhandling.cpp @ 7997] \n06 000000bc`6a8fa630 00007ffa`3b46c700     0x00007ffa`3a4f6a89\n07 000000bc`6a8fa760 00007ffa`3ee15388     0x00007ffa`3b46c700\n08 000000bc`6a8fa880 00007ffa`958f2da3     0x00007ffa`3ee15388\n09 000000bc`6a8fa8b0 00007ffa`95871418     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n0a 000000bc`6a8fa8f0 00007ffa`95862171     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 248] \n0b 000000bc`6a8fa980 00007ffa`95862261     coreclr!RethrowNew+0x101 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3161] \n0c 000000bc`6a8fc440 00007ffa`3dbd5e8e     coreclr!IL_Rethrow+0x81 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3177] \n0d 000000bc`6a8fc590 00007ffa`9587c3ff     Raven_Server!Raven.Server.Documents.Indexes.Index.DoIndexingWork+0xaae\n0e 000000bc`6a8fc5e0 00007ffa`3b46c838     coreclr!CallCatchFunclet+0x17f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\exceptionhandling.cpp @ 7751] \n0f 000000bc`6a8fc6f0 00007ffa`3b46c97d     0x00007ffa`3b46c838\n10 000000bc`6a8fc810 00007ffa`958f2da3     0x00007ffa`3b46c97d\n11 000000bc`6a8fc840 00007ffa`95871418     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n12 000000bc`6a8fc880 00007ffa`958619e1     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 248] \n13 000000bc`6a8fc910 00007ffa`95861874     coreclr!DispatchManagedException+0x169 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\exceptionhandling.cpp @ 5698] \n14 000000bc`6a8fdfd0 00007ffa`95861843     coreclr!DispatchManagedException+0x24 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\exceptionhandling.cpp @ 5715] \n15 000000bc`6a8fe4d0 00007ffa`958617ce     coreclr!ThrowNew+0x67 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3075] \n16 000000bc`6a8fe520 00007ffa`3b4d7b88     coreclr!IL_Throw+0x8e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 3100] \n17 000000bc`6a8fe670 00007ffa`3a47146d     System_Private_CoreLib!System.Threading.CancellationToken.ThrowOperationCanceledException+0x38 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/CancellationToken.cs @ 368] \n18 000000bc`6a8fe6b0 00007ffa`3dbe0db1     System_Private_CoreLib!System.Threading.CancellationToken.ThrowIfCancellationRequested+0x1d [/_/src/libraries/System.Private.CoreLib/src/System/Threading/CancellationToken.cs @ 362] \n19 000000bc`6a8fe6e0 00007ffa`3dbd57d7     Raven_Server!Raven.Server.Documents.Indexes.Workers.MapItems.Execute+0x6e1\n1a 000000bc`6a8fec50 00007ffa`3dbcf1a2     Raven_Server!Raven.Server.Documents.Indexes.Index.DoIndexingWork+0x3f7\n1b 000000bc`6a8fef40 00007ffa`3dbcca03     Raven_Server!Raven.Server.Documents.Indexes.Index.ExecuteIndexing+0xbb2\n1c 000000bc`6a8ff750 00007ffa`39b6f0f5     Raven_Server!Raven.Server.Documents.Indexes.Index.\u003cStartIndexingThread\u003eb__167_0+0x103\n1d 000000bc`6a8ff810 00007ffa`39b6d007     Raven_Server!Raven.Server.Utils.PoolOfThreads.PooledThread.DoWork+0x185\n1e 000000bc`6a8ff940 00007ffa`388bbbc5     Raven_Server!Raven.Server.Utils.PoolOfThreads.PooledThread.Run+0xa7\n1f 000000bc`6a8ff9a0 00007ffa`958f2da3     System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0xe5 [/_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs @ 179] \n20 000000bc`6a8ffa10 00007ffa`95871418     coreclr!CallDescrWorkerInternal+0x83 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 74] \n21 000000bc`6a8ffa50 00007ffa`958e14b3     coreclr!DispatchCallSimple+0x60 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\callhelpers.cpp @ 248] \n22 000000bc`6a8ffae0 00007ffa`9585ef35     coreclr!ThreadNative::KickOffThread_Worker+0x63 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 158] \n23 (Inline Function) --------`--------     coreclr!ManagedThreadBase_DispatchInner+0xd [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7110] \n24 000000bc`6a8ffb40 00007ffa`9585ee5d     coreclr!ManagedThreadBase_DispatchMiddle+0x79 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7154] \n25 000000bc`6a8ffbf0 00007ffa`9585efeb     coreclr!ManagedThreadBase_DispatchOuter+0x8d [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7313] \n26 (Inline Function) --------`--------     coreclr!ManagedThreadBase_FullTransition+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7358] \n27 (Inline Function) --------`--------     coreclr!ManagedThreadBase::KickOff+0x28 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 7393] \n28 000000bc`6a8ffc60 00007ffa`b32c4cb0     coreclr!ThreadNative::KickOffThread+0x7b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 230] \n29 000000bc`6a8ffcc0 00007ffa`b3afedcb     kernel32!BaseThreadInitThunk+0x10\n2a 000000bc`6a8ffcf0 00000000`00000000     ntdll!RtlUserThreadStart+0x2b\n```\n\n\n```\n0:062\u003e !verifyheap\nSegment          Object           Failure                          Reason\n02dc0b17f378     029bfb23d908     FreeObjectReference              Object 29bfb23d908 contains free object at offset 10: 29c0f1620f0\n02dc0b17f378     029bfb7f81f0     FreeObjectReference              Object 29bfb7f81f0 contains free object at offset 10: 29c1a789a38\n02dc0b185930     029c20c1b4e0     SyncBlockMismatch                Object 29c20c1b4e0 System.WeakReference\u003cVoron.Impl.Paging.Pager+State\u003e had a SyncBlock index of 3695 but the runtime has no matching SyncBlock\n02dc0b185930     029c20c8fd68     FreeObjectReference              Object 29c20c8fd68 contains free object at offset 18: 29c0f310378\n02dc0b185930     029c20cd7650     FreeObjectReference              Object 29c20cd7650 contains free object at offset 18: 29c064c6f10\n...\n02dc0b18b9a8     029c458b29c8     InvalidObjectReference           Object 29c458b29c8 has a bad member at offset 20: 29c474f6800\n02dc0b18bba0     029c4662ef10     InvalidObjectReference           Object 29c4662ef10 has a bad member at offset 38: 29c4747a900\n02dc0b18bba0     029c467f82e8     FreeObjectReference              Object 29c467f82e8 contains free object at offset 10: 29c01e693b8\n\n7,999,179 objects verified, 22,643 errors.\n```",
                                           "updatedAt":  "2025-03-10T15:58:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6su6kl",
                                           "createdAt":  "2025-05-21T13:30:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "Hi @janvorli, so we are back into looking at .net 9 again and we updated to 9.0.5 version.\n\nI ran with the env variables that you requested\n```\nDOTNET_StressLog=1 \nDOTNET_LogLevel=7 \nDOTNET_LogFacility=80103 \nDOTNET_StressLogSize=2000000 \nDOTNET_TotalStressLogSize=40000000\n``` \n\nand we are having a crash with the following stack trace\n```\n(Inline Function) --------`--------     : --------`-------- --------`-------- --------`-------- --------`-------- : coreclr!LoaderAllocator::IsCollectible\n00000049`d11faed0 00007ffe`b1f80d45     : 0000020a`a1029e50 00000049`d11fb0c0 00000049`d11fb260 0000000d`00000000 : coreclr!VirtualCallStubManager::ResolveWorker+0x4d\n00000049`d11fb090 00007ffe`b1ff47ad     : 00000000`00000006 0000020b`15117040 00000049`d11ff6d0 00007ffe`55356d30 : coreclr!VSD_ResolveWorker+0x335\n00000049`d11fb1b0 00007ffe`6146a688     : 0000020b`15117040 00000000`00000000 00007ffe`b22fb0d0 00000049`d11ff6d0 : coreclr!ResolveWorkerAsmStub+0x6d\n00000049`d11fb260 00007ffe`b1f7af1e     : 00000049`d11ff6d0 00000049`d11fb4c0 00007ffe`55356d30 00000049`d11fc068 : Raven_Server!Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler\u003cRaven.Server.ServerWide.Context.DocumentsContextPool,Raven.Server.ServerWide.Context.DocumentsOperationContext\u003e.ReceiveReplicationBatches+0x1bc8\n00000049`d11fb2f0 00007ffe`565ccd89     : 00007ffe`6146a603 00000000`00000006 00000000`0000000a 00000049`d11fb3c8 : coreclr!CallFinallyFunclet+0x11e\n00000049`d11fb3a0 00007ffe`57b125f2     : 00000049`d11fbc10 00000049`d11fb578 00007ffe`61469016 00000049`d11fb590 : System_Private_CoreLib!System.Runtime.EH.InvokeSecondPass(ExInfo ByRef, UInt32, UInt32)+0xffffffff`be184fb9\n00000049`d11fb4d0 00007ffe`58126fd8     : 00000049`d11fbcd0 00000049`d11fbc10 00007ffe`616bb6a8 00000049`d11fbe60 : System_Private_CoreLib!System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef)+0xffffffff`bf6cb222\n00000049`d11fb5f0 00007ffe`b1ff3073     : 00000049`d11fd7e0 00000049`d11fbc10 00000000`00000555 00000fff`cc28d491 : System_Private_CoreLib!System.Runtime.EH.RhRethrow(ExInfo ByRef, ExInfo ByRef)+0xffffffff`bfcdfc58\n00000049`d11fb620 00007ffe`b1f70198     : 00000049`d11fbe60 00007ffe`6146a7a1 00000049`d11fbda0 00000049`d11fbda0 : coreclr!CallDescrWorkerInternal+0x83\n00000049`d11fb660 00007ffe`b1f5e1d1     : 0000024b`6f849e00 00000049`d11fb7f0 00000049`d11fd7e0 0000024b`c52f0cf0 : coreclr!DispatchCallSimple+0x60\n00000049`d11fb6f0 00007ffe`b1f5e2c1     : 00000049`d11fd570 0000020b`15155098 0000020b`12486f58 00007ffe`55356d30 : coreclr!RethrowNew+0x101\n00000049`d11fd1b0 00007ffe`6146a5c0     : 00007ffe`55356d30 00007ffe`b1f7b327 00000049`d11fd7e0 00007ffe`6146a48e : coreclr!IL_Rethrow+0x81\n00000049`d11fd300 00007ffe`b1f7b11f     : 00000049`d11fd570 00000049`d11fd5b0 00000049`d11fdc18 00000049`d11ff6d0 : Raven_Server!Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler\u003cRaven.Server.ServerWide.Context.DocumentsContextPool,Raven.Server.ServerWide.Context.DocumentsOperationContext\u003e.ReceiveReplicationBatches+0x1b00\n00000049`d11fd390 00007ffe`57b12658     : 00000049`d11fd8a0 00007ffe`6146a48e 00000049`d11fd7e0 00000049`d11fd7e0 : coreclr!CallCatchFunclet+0x17f\n00000049`d11fd4a0 00007ffe`57b1279d     : 00000049`d11fd8a0 00000049`d11fd7e0 00000049`d11ff930 00000000`00000000 : System_Private_CoreLib!System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef)+0xffffffff`bf6cb288\n00000049`d11fd5c0 00007ffe`b1ff3073     : 0000020b`12486f58 00000049`d11fd7e0 00007ffe`5525c6a8 00007ffe`b1f5d8f3 : System_Private_CoreLib!System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef)+0xffffffff`bf6cb74d\n00000049`d11fd5f0 00007ffe`b1f70198     : 00000049`d11fe4c0 0000020b`148e18f0 0000024b`6f849e00 00007ffe`b1f7b774 : coreclr!CallDescrWorkerInternal+0x83\n00000049`d11fd630 00007ffe`b1f5da41     : 0000024b`6f849e00 00000049`d11fd7c0 0000020b`12486f58 0000024b`c52f0cf0 : coreclr!DispatchCallSimple+0x60\n00000049`d11fd6c0 00007ffe`b1f5d8d4     : 00000000`00000000 0000020b`15117080 0000020b`12486f58 00000000`00000000 : coreclr!DispatchManagedException+0x169\n00000049`d11fed80 00007ffe`b1f5d8a3     : 00000049`d11ff310 00007ffe`57be4e39 0000020a`a3c44478 0000024b`382cb0b0 : coreclr!DispatchManagedException+0x24\n00000049`d11ff280 00007ffe`b1f5d82e     : 0000020b`12486f58 00007ffe`b1f8a29e 0000024b`382cb0b0 0000020a`a1c01c30 : coreclr!ThrowNew+0x67\n00000049`d11ff2d0 00007ffe`57be7208     : 00000000`00000001 0000020b`12486f40 0000020b`1516f190 0000020b`12486f18 : coreclr!IL_Throw+0x8e\n00000049`d11ff420 00007ffe`56faba28     : 0000020b`12486f18 00007ffe`b1fbedbf 00000049`d11ff4b8 00007ffe`b1f8aa17 : System_Private_CoreLib!System.Threading.CancellationToken.ThrowOperationCanceledException+0x38\n00000049`d11ff460 00007ffe`57b1e280     : 0000020b`12486f18 00000000`ffffffff 0000020b`1516f190 0000020b`1516f190 : System_Private_CoreLib!System.Threading.ManualResetEventSlim.Wait+0x3a8\n00000049`d11ff5a0 00007ffe`57b1df61     : 0000020b`12486ec0 00007ffe`546806db 00000000`00000000 0000020b`15192b40 : System_Private_CoreLib!System.Threading.Tasks.Task.SpinThenBlockingWait+0xf0\n00000049`d11ff620 00007ffe`5753c88e     : 0000020b`1516f190 0000020b`15155718 0000020b`15190b60 0000020b`15190bb0 : System_Private_CoreLib!System.Threading.Tasks.Task.InternalWaitCore+0x71\n00000049`d11ff6a0 00007ffe`61469016     : 0000020b`124496f0 0000020a`b33c0c70 0000020b`1516f190 0000020b`124496f0 : System_Private_CoreLib!System.Threading.Tasks.Task.Wait+0x3e\n00000049`d11ff6d0 00007ffe`614689fa     : 0000020b`156d5048 0000020a`cfa12c68 0000020a`ab45b388 0000020a`cfa12c68 : Raven_Server!Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler\u003cRaven.Server.ServerWide.Context.DocumentsContextPool,Raven.Server.ServerWide.Context.DocumentsOperationContext\u003e.ReceiveReplicationBatches+0x556\n00000049`d11ff9d0 00007ffe`58463d6b     : 0000020b`156d5048 0000020a`b5b75bd8 00000000`00000078 00000000`d11ffa00 : Raven_Server!Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler\u003cRaven.Server.ServerWide.Context.DocumentsContextPool,Raven.Server.ServerWide.Context.DocumentsOperationContext\u003e.DoIncomingReplication+0x1a\n00000049`d11ffa20 00007ffe`61127240     : 0000020a`c91a0870 0000020a`abe94bf0 0000020a`ab3c0b00 00007ffe`c9fc3dcb : Raven_Server!Raven.Server.Utils.PoolOfThreads.PooledThread.DoWork+0x3cb\n00000049`d11ffb00 00007ffe`565120b3     : 0000020a`c91a0870 0000020a`ad273858 0000020a`ab3c0b00 00000000`00000000 : Raven_Server!Raven.Server.Utils.PoolOfThreads.PooledThread.Run+0xa0\n00000049`d11ffbb0 00007ffe`b1ff3073     : 0000020b`0edc6ba0 00000000`00000000 00000000`00000000 0000024b`6f849e00 : System_Private_CoreLib!System.Threading.ExecutionContext.RunInternal+0xe3\n```\n\nTried to do `!dumplog` but it yield `FAILURE: Stress log not dumped`, so I hope all evn variables are set correctly.\n\nAnyway I share the full dump here https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10908179\n\nPlease let me know if you require anything more.",
                                           "updatedAt":  "2025-05-21T13:30:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6svUoC",
                                           "createdAt":  "2025-05-21T14:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 thank you for the dump, I\u0027ll take a look at it. It is strange that the stresslog was not dumped, the settings look correct.",
                                           "updatedAt":  "2025-05-21T14:02:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tGrcO",
                                           "createdAt":  "2025-05-23T12:06:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETYvqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "redknightlois",
                                                                               "createdAt":  "2025-05-23T14:59:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 I\u0027ve investigated the dump and there is clearly a GC hole somewhere. The stress log dump worked fine for me and helped me to reveal some details. There are two objects that the last GC run has logged as having invalid MethodTable and I\u0027ve found that their references are pointing to the GC heap, but into the middle of another object. So at some point, GC must have scanned the stack and not get their roots reported, then moved objects on the heap and thus these references are pointing wrong places.\nTrying to find the real reason for the GC heap is like searching for a needle in a haystack, so it will take me some time. The method in which these two references are stored on the stack is the Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].ReceiveReplicationBatches()\nIt is huge (almost 8kB) and contains 47 exception handling records (11 original clauses and the rest are cloned and duplicate ones generated by JIT due to specific EH reasons). That makes the investigation even more fun.",
                                           "updatedAt":  "2025-05-23T12:06:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tG09l",
                                           "createdAt":  "2025-05-23T12:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "I\u0027m glad to hear that you are able to make some progress on that issue, I know it is fun to find the root cause for such things.\nWe are able to make it crash pretty often (more or less 1 out of 5 runs of our entire test suite) so, if needed we can share more dumps and add more env variables.\n\nInteresting thing is, that all of the crashes that I\u0027ve saw crashed at the exact same place.\nhandling an exception at `Raven.Server.Documents.Replication.Incoming.AbstractIncomingReplicationHandler`2[[System.__Canon, System.Private.CoreLib],[System.__Canon, System.Private.CoreLib]].ReceiveReplicationBatches()` as you noted.\n\nWhich makes us wonder whether it might be related to the exception handling changes that were introduced in .net 9\n\nPlease let me know if you need anything that can assist.\nThanks :-)",
                                           "updatedAt":  "2025-05-23T12:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tG9jJ",
                                           "createdAt":  "2025-05-23T12:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETXA2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karmeli87",
                                                                               "createdAt":  "2025-05-23T12:37:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 it might be related to the EH changes, as the GC stack walk needs to do some special things when exception handling is in progress. Would it be possible for you to try to run with the new EH disabled to see if it gets rid of the crash? You can do it either by setting the env variable DOTNET_LegacyExceptionHandling=1 or by setting System.Runtime.LegacyExceptionHandling to true in the runtimeconfig.json file.",
                                           "updatedAt":  "2025-05-23T12:36:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ys86Z",
                                           "createdAt":  "2025-06-23T22:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 I\u0027ve spent another time debugging the dump you\u0027ve shared with me last time. And I have found something really strange. The crashing thread is in GC preemptive mode, but it should be in cooperative mode at the point where the crash occurs. The preemptive mode causes GC on another thread to walk the stack of this crashing thread freely which should not be happening. I can see that even the GC thread is actually crashing at the same time due to invalid reference it found on the crashing thread\u0027s stack.\nDid you have a chance to check if the issue still repros with the legacy EH?\nI also wonder if you could let your stuff run with a checked build of coreclr.dll that I would provide as an in-place replacement. If that would prove to be too heavy, I could also sprinkle checks for the proper GC mode all over the problematic function and give you a release build.",
                                           "updatedAt":  "2025-06-23T22:21:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zya7C",
                                           "createdAt":  "2025-06-29T06:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "@janvorli thanks again for looking into this and sorry for the delayed response.\n\nI\u0027ve run it many times in EH legacy mode and it didn\u0027t crashed, then I switch the legacy mode off to verify and it didn\u0027t crashed either (after 10+ tests suite runs I stopped trying).. so it isn\u0027t very conclusive.\n\nOf course we can try the custom coreclr.dll \nShould we base it on the latest dotnet?\n ",
                                           "updatedAt":  "2025-06-29T06:09:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61gz4Q",
                                           "createdAt":  "2025-07-07T13:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 I think it would be the best to use the same runtime version that you currently use and just patch it to the checked build.  That way we would be comparing apples to apples. But if the issue doesn\u0027t repro anymore, I wonder if some change in the recent runtime servicing updates could have fixed it. What is the current version of the runtime you are using?",
                                           "updatedAt":  "2025-07-07T13:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc615NCx",
                                           "createdAt":  "2025-07-09T08:28:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "@janvorli we are on `9.0.6`.\n\nThis is our development branch so the tests aren\u0027t run very often.\nWhen I trigger the test suite manually it might crash 3 times out of 5 runs or not to crash at all for 20 consecutive runs.\nBut it does crash :-) \n\nWhat we will do next is to _always_ run with `DOTNET_LegacyExceptionHandling=1` and observe whether it will crash or not.\nOf course we can also use the custom `coreclr.dll`",
                                           "updatedAt":  "2025-07-09T08:29:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61-EqR",
                                           "createdAt":  "2025-07-09T14:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ok, let me build and share checked build of coreclr.dll and matching System.Private.CoreLib.dll.",
                                           "updatedAt":  "2025-07-09T14:47:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62mwoO",
                                           "createdAt":  "2025-07-11T19:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 here is a checked build of clrjit.dll, coreclr.dll, System.Private.CoreLib.dll, mscordaccore.dll and mscordbi.dll and their pdb files built from the v9.0.6 tag. Just copy them over the release files you have.\nhttps://1drv.ms/u/c/2176c86404e3d542/EY9dhXe1CQRBmuohS5t2J9IB8fU-0ACYFOpb7WCDGsf3jA?e=3IUNv7",
                                           "updatedAt":  "2025-07-11T19:54:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62yKci",
                                           "createdAt":  "2025-07-13T05:01:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karmeli87",
                                           "body":  "@janvorli thanks!\ndo you prefer us to run this with `DOTNET_LegacyExceptionHandling=1` or set it to `0`",
                                           "updatedAt":  "2025-07-13T05:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63Avvj",
                                           "createdAt":  "2025-07-14T17:42:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEagt8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karmeli87",
                                                                               "createdAt":  "2025-07-14T17:45:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@karmeli87 with it being set to 0.",
                                           "updatedAt":  "2025-07-14T17:42:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc680gJW",
                                           "createdAt":  "2025-08-08T13:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli It appears that we are no longer able to reproduce the issue. We’re planning to upgrade to .NET 9.0.8. Should we continue using the custom DLLs? If so, could you please provide versions compatible with .NET 9.0.8?\n",
                                           "updatedAt":  "2025-08-08T17:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Nsfb",
                                           "createdAt":  "2025-08-11T12:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski are you unable to repro it just with the custom dll or even with the original one? ",
                                           "updatedAt":  "2025-08-11T12:05:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69N000",
                                           "createdAt":  "2025-08-11T12:16:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "It\u0027s hard to say since it happened quite occasionally as I know. We upgraded to 9.0.8 today. I’ll monitor for crashes. If any occur, we can install a custom DLL and continue the investigation.\n",
                                           "updatedAt":  "2025-08-11T12:17:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69N2FS",
                                           "createdAt":  "2025-08-11T12:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ok, then you\u0027ll need a new build of the custom dlls. They need to match the release. I\u0027ll share it later today.",
                                           "updatedAt":  "2025-08-11T12:18:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69O-uZ",
                                           "createdAt":  "2025-08-11T13:21:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli It just crashed on .NET 9.0.8. Please check the details in the attached file below. Do you want me to upload the crash dump or prefer to wait for it to crash with custom DLL?\n\n[crash_net_9.0.8.txt](https://github.com/user-attachments/files/21715595/crash_net_9.0.8.txt)",
                                           "updatedAt":  "2025-08-11T13:22:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69PSPK",
                                           "createdAt":  "2025-08-11T13:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Yes, please share the dump. From the stack trace, it seems to be similar, but it is not at the same place.\n\nHere is the custom build for 9.0.8:\nhttps://1drv.ms/u/c/2176c86404e3d542/EazqSsjodxtHsQGKspFe9bIBvG74aLZX-eeLX8t1Mu7b7A?e=UVIOlo",
                                           "updatedAt":  "2025-08-11T13:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69bA4E",
                                           "createdAt":  "2025-08-12T07:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli I have uploaded it to https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10950184\n\nEDIT:\n\nAnd one more: https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10950200",
                                           "updatedAt":  "2025-08-12T07:54:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69buSK",
                                           "createdAt":  "2025-08-12T07:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "We will install the custom DLLs later today",
                                           "updatedAt":  "2025-08-12T07:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69l1Py",
                                           "createdAt":  "2025-08-12T19:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski thank you for the dump, the issue is the same as before, the only difference being that the crash is in a slightly different method.\nIn both cases, native runtime helper for virtual stub dispatch stuff is running in GC preemptive mode while that should never happen for that one. That leads to GC running while that thread is modifying managed references on stack and later causes the crash.",
                                           "updatedAt":  "2025-08-12T19:53:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-RFCV",
                                           "createdAt":  "2025-08-15T16:50:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "We are closing down 10, so moving this to 11. If we find the root cause we can consider back porting. ",
                                           "updatedAt":  "2025-08-15T16:50:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-tI8b",
                                           "createdAt":  "2025-08-19T07:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli I have shared the memory dump of crashing process that had custom .NET DLLs. Console output:\n\n```\nAssert failure(PID 5600 [0x000015e0], Thread: 7980 [0x1f2c]): (GetComponentSize() \u003c= 2) || IsArray()\nCORECLR! GetCLRRuntimeHost + 0x14C5E5 (0x00007ffb`0f0a8215)\nCORECLR! GetCLRRuntimeHost + 0x14F50E (0x00007ffb`0f0ab13e)\nCORECLR! GetCLRRuntimeHost + 0x16016E (0x00007ffb`0f0bbd9e)\nCORECLR! GetCLRRuntimeHost + 0x160031 (0x00007ffb`0f0bbc61)\nCORECLR! GetCLRRuntimeHost + 0x15799D (0x00007ffb`0f0b35cd)\nCORECLR! GetCLRRuntimeHost + 0x23259A (0x00007ffb`0f18e1ca)\nCORECLR! GetCLRRuntimeHost + 0x68862D (0x00007ffb`0f5e425d)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007ffa`d136c65d)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00000225`e9863a08)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00000225`e9863a08)\n    File: D:\\git\\runtime9\\src\\coreclr\\vm\\methodtable.cpp:6288\n```\n\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10953395",
                                           "updatedAt":  "2025-08-19T07:08:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-tPgK",
                                           "createdAt":  "2025-08-19T07:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "And one more:\n\n```\nAssert failure(PID 924 [0x0000039c], Thread: 3396 [0x0d44]): last_gc_info-\u003econdemned_generation == max_generation\nCORECLR! GetCLRRuntimeHost + 0x648E9C (0x00007fff`82864acc)\nCORECLR! GetCLRRuntimeHost + 0x28AE44 (0x00007fff`824a6a74)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007fff`2a5c5a9d)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00000000`00000003)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007fff`00000003)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x000001a0`245c99b0)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x0000007f`bba7d210)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x0000007f`bba7dba8)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x0000007f`bba7ba50)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x0000007f`bba7d350)\n    File: D:\\git\\runtime9\\src\\coreclr\\gc\\gc.cpp:51768\n```\n\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10953403",
                                           "updatedAt":  "2025-08-19T07:18:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_kkJh",
                                           "createdAt":  "2025-08-22T11:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski thank you for the dumps! I just got back from my vacation, I\u0027ll take a look today or on Monday the latest.",
                                           "updatedAt":  "2025-08-22T11:25:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_l07S",
                                           "createdAt":  "2025-08-22T13:20:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "From a quick look, the first dump is related to the culprit, the second one is most likely a different issue. I\u0027ll investigate those in more detail. It would be great if you could keep it running for a bit more to get some additional dumps.",
                                           "updatedAt":  "2025-08-22T13:20:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_mI6p",
                                           "createdAt":  "2025-08-22T13:48:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Yes, we\u0027ll keep it running. There is one more dump but it looks the same assertion was encountered as in the second dump that I uploaded:\n\n```\nAssert failure(PID 9692 [0x000025dc], Thread: 9444 [0x24e4]): last_gc_info-\u003econdemned_generation == max_generation\nCORECLR! GetCLRRuntimeHost + 0x648E9C (0x00007ff8`b1034acc)\nCORECLR! GetCLRRuntimeHost + 0x28AE44 (0x00007ff8`b0c76a74)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007ff8`55b8ef9d)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00000000`00000003)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007ff8`00000003)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x000002b9`a9f170b0)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x000000d4`d6afd850)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x000000d4`d6afe1e8)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x000000d4`d6afc090)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x000000d4`d6afd990)\n```",
                                           "updatedAt":  "2025-08-22T13:48:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AXXas",
                                           "createdAt":  "2025-08-27T08:52:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli I have uploaded another memory dump that I believe might interest you\n\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10957408\n\n```\nAssert failure(PID 6160 [0x00001810], Thread: 9596 [0x257c]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\nCORECLR! coreclr_shutdown_2 + 0xE2DCD (0x00007fff`e260c8cd)\nCORECLR! coreclr_shutdown_2 + 0x3A0E0 (0x00007fff`e2563be0)\nCORECLR! coreclr_shutdown_2 + 0x3803E (0x00007fff`e2561b3e)\nNTDLL! RtlCaptureContext2 + 0x4A6 (0x00007fff`f6de4146)\nCORECLR! GetCLRRuntimeHost + 0x16016E (0x00007fff`e1e2bd9e)\nCORECLR! GetCLRRuntimeHost + 0x160031 (0x00007fff`e1e2bc61)\nCORECLR! GetCLRRuntimeHost + 0x15799D (0x00007fff`e1e235cd)\nCORECLR! GetCLRRuntimeHost + 0x23259A (0x00007fff`e1efe1ca)\nCORECLR! GetCLRRuntimeHost + 0x68862D (0x00007fff`e235425d)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007fff`a444236a)\n    File: D:\\git\\runtime9\\src\\coreclr\\vm\\object.cpp:631\n    Image: c:\\Jenkins\\workspace\\Testsv80_Winx64\\s\\test\\SlowTests\\bin\\Release\\net9.0\\testhost.exe\n```",
                                           "updatedAt":  "2025-08-27T08:52:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AanLT",
                                           "createdAt":  "2025-08-27T13:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski thank you for the dump. It again shows exactly the same symptoms. However, I have found that the stress log size I\u0027ve asked you to set it is insufficient. I have thought that was a maximum possible size, but my records are obviously obsolete. So in the dumps you\u0027ve shared, some vital logs are missing for figuring out the cuprit.\n\nCould you please change the `DOTNET_TotalStressLogSize=40000000` to \n`DOTNET_TotalStressLogSize=10` ? This small number actually represents a large size, because when it is smaller than 32768, it is multiplied by 1GB. \n\nI hope this way, I\u0027ll finally have all the evidence.",
                                           "updatedAt":  "2025-08-27T13:24:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ApNks",
                                           "createdAt":  "2025-08-28T06:09:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli I see you requested some `DOTNET_xxxxx` env variables to be set (https://github.com/dotnet/runtime/issues/110769#issuecomment-2549605033) but it looks that currently we don\u0027t have any for this specific CI build. Can you please provide the complete list of env variables that need to be set there? ",
                                           "updatedAt":  "2025-08-28T06:09:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ApqWi",
                                           "createdAt":  "2025-08-28T06:39:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski ah, then please set these:\n```\nDOTNET_StressLog=1 \nDOTNET_LogLevel=7 \nDOTNET_LogFacility=80103 \nDOTNET_StressLogSize=2000000 \nDOTNET_TotalStressLogSize=10\n```",
                                           "updatedAt":  "2025-08-28T06:39:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A4DmF",
                                           "createdAt":  "2025-08-29T06:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "I just uploaded two memory dumps:\n\n\n- `Assert failure(PID 4260 [0x000010a4], Thread: 4148 [0x1034]): !CREATE_CHECK_STRING(pMT \u0026\u0026 pMT-\u003eValidate())`\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10958538\n\n- `Assert failure(PID 7424 [0x00001d00], Thread: 12552 [0x3108]): last_gc_info-\u003econdemned_generation == max_generation`\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10958546\n\nBoth runs had the environment variables configured as requested above.\n\n",
                                           "updatedAt":  "2025-08-29T06:45:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A4et-",
                                           "createdAt":  "2025-08-29T07:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Thank you! I\u0027ll take a look today.",
                                           "updatedAt":  "2025-08-29T07:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BPPSD",
                                           "createdAt":  "2025-09-01T11:24:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski I have not realized that the total memory used by the stress log is clipped to 4GB max, so the logs are still missing some records due to too large per-thread buffer specified. Can you please modify the settings  as follows?\n```\nDOTNET_StressLog=1\nDOTNET_LogLevel=7\nDOTNET_LogFacility=80103\nDOTNET_StressLogSize=800000\nDOTNET_TotalStressLogSize=4\n```\n",
                                           "updatedAt":  "2025-09-01T11:24:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BPToT",
                                           "createdAt":  "2025-09-01T11:30:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli just to make absolutely sure, you\u0027re asking about changing the following two\n\n```\nDOTNET_StressLogSize=2000000 \nDOTNET_TotalStressLogSize=10\n```\n\nto\n\n```\nDOTNET_StressLogSize=800000\nDOTNET_TotalStressLogSize=4\n```\n\nIs that correct? In particular `DOTNET_TotalStressLogSize` was to 10 and now it will be 4. Please confirm",
                                           "updatedAt":  "2025-09-01T11:30:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BPg_L",
                                           "createdAt":  "2025-09-01T11:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Right. Btw, the crucial part is setting the `DOTNET_StressLogSize=800000`, this sets the per-thread log buffer size. ",
                                           "updatedAt":  "2025-09-01T11:50:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BP3DR",
                                           "createdAt":  "2025-09-01T12:23:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "OK. The env variables have been set accordingly.",
                                           "updatedAt":  "2025-09-01T12:23:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BXGlG",
                                           "createdAt":  "2025-09-02T07:07:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "New memory dump uploaded:\n\n-  `Assert failure(PID 13012 [0x000032d4], Thread: 9264 [0x2430]): last_gc_info-\u003econdemned_generation == max_generation`\nhttps://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10959501",
                                           "updatedAt":  "2025-09-02T07:07:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Bcs26",
                                           "createdAt":  "2025-09-02T14:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The \"last_gc_info-\u003econdemned_generation == max_generation\" is a different problem not related to the GC hole issue. I\u0027ll route that one to the right folks.",
                                           "updatedAt":  "2025-09-02T14:10:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BluV1",
                                           "createdAt":  "2025-09-03T06:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "OK. I scheduled a couple of test suite runs yesterday evening but non of them failed. I will update once we\u0027ll get something else than \"last_gc_info-\u003econdemned_generation == max_generation\"",
                                           "updatedAt":  "2025-09-03T06:43:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CI7M6",
                                           "createdAt":  "2025-09-05T05:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli would a memory dump with failing assertion \"!CREATE_CHECK_STRING(pMT \u0026\u0026 pMT-\u003eValidate())\" be interesting to you?",
                                           "updatedAt":  "2025-09-05T05:30:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CKRxY",
                                           "createdAt":  "2025-09-05T08:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski yes, please.",
                                           "updatedAt":  "2025-09-05T08:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CNCFY",
                                           "createdAt":  "2025-09-05T12:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "```\nAssert failure(PID 10200 [0x000027d8], Thread: 9196 [0x23ec]): !CREATE_CHECK_STRING(pMT \u0026\u0026 pMT-\u003eValidate())\nCORECLR! GetCLRRuntimeHost + 0x16018A (0x00007fff`dc8fbdba)\nCORECLR! GetCLRRuntimeHost + 0x160031 (0x00007fff`dc8fbc61)\nCORECLR! GetCLRRuntimeHost + 0x15799D (0x00007fff`dc8f35cd)\nCORECLR! GetCLRRuntimeHost + 0x23259A (0x00007fff`dc9ce1ca)\nCORECLR! GetCLRRuntimeHost + 0x68862D (0x00007fff`dce2425d)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00007fff`9f86b1a0)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00000213`c3839a78)\n\u003cno module\u003e! \u003cno symbol\u003e + 0x0 (0x00000213`c3839a78)\nCORECLR! coreclr_shutdown_2 + 0x24C7D8 (0x00007fff`dd2462d8)\nCORECLR! coreclr_shutdown_2 + 0x24AED0 (0x00007fff`dd2449d0)\n```\n\nUploaded to: https://developercommunity.visualstudio.com/t/Access-Violation-Exception-after-upgradi/10814326#T-N10961546",
                                           "updatedAt":  "2025-09-05T12:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DHw9o",
                                           "createdAt":  "2025-09-10T07:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@janvorli We\u0027re considering upgrading the dev branch currently running on .NET 9, where this issue is reproducing, to .NET 10 RC 1. What are your thoughts on this?",
                                           "updatedAt":  "2025-09-10T07:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DIZ1W",
                                           "createdAt":  "2025-09-10T07:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@arekpalinski I think it is a good idea. In the last dump you have shared, I\u0027ve yesterday finally found the evidence of how the problem happens and I am looking into whether the problem is in the JIT generating incorrect GC information or the runtime doing something wrong. So I won\u0027t need more dumps from .NET 9 and you moving to .NET 10 would help us find early whether the issue got fixed by some JIT change or if it still persists. We can start with the official build and keep the stresslog settings. If the issue reproes, we could then again move to a custom build of the runtime.",
                                           "updatedAt":  "2025-09-10T07:51:32Z"
                                       }
                                   ],
                         "totalCount":  63
                     },
        "title":  "Access Violation Exception after upgrading from .NET 8 to .NET 9",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111601",
        "createdAt":  "2025-01-20T02:05:46Z",
        "number":  111601,
        "author":  "jotabe-net",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAg3PA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "edgarkz",
                                            "createdAt":  "2025-03-26T11:50:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-30T17:45:07Z",
        "body":  "### Description\n\nIt looks like the problem describred in [#666707](https://github.com/dotnet/runtime/issues/66707), is happening in .NET 9\n\n# More details\n\n## Application description\n\nContainerized .net 9 console app, built from worker service template\n\nIf some configuration is missing, the app throws an exception in a constructor of a DI injected service.\n\n## Behavior in Windows Docker Desktop\n\nWhen running\n`docker run myapp:1.0`\nthe container stops as a consequence of the unhandled exception\n\n## Behavior in Linux docker  - Unexpected behavior!!\n\nWhen running\n`docker run myapp:1.0`\nthe container shows the unhandled exception, but doesn\u0027t stop\n\nHowever, adding the `--init` switch:\n`docker run --init myapp:1.0`\nthe container shows the excception, and stops, as expected\n\n# Summary\n\nSo it looks exactly as described in https://github.com/dotnet/runtime/issues/66707#issuecomment-1382304345\n\n\n### Reproduction Steps\n\nAs described above:\n- containerized app throwing an exception (more specifically an app based on worker service template throwing in the ctor of an injected service)\n\nRunning it in Linux ARM64 with\n`docker run myapp:1.0`\ndoesn\u0027t stop the container\n\nAdding `--init`, the exception does stop the container.\n\n### Expected behavior\n\nRunning the contaienr in Linux ARM64 with\n`docker run myapp:1.0`\nshoudl stop the contaienr on unhandled exception, but only does if `--init` is added.\n\n### Actual behavior\n\nThe container doesn\u0027t stop on unhandled exception.\n\n### Regression?\n\nIf it was really fixed in .NET 7, yep, it\u0027s a regression of something solved as explained in #66707\n\n### Known Workarounds\n\nRun the container with `--init`\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuv9UoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bUe2U",
                                           "createdAt":  "2025-01-21T22:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I might have possibly reintroduced the problem in #105578. I\u0027ll take a look",
                                           "updatedAt":  "2025-01-21T22:07:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66_1Sg",
                                           "createdAt":  "2025-07-30T17:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@jotabe-net, can you check if this still reproduces on latest .NET 10 preview release? Believe it might be fixed per the discussion here: https://github.com/dotnet/runtime/issues/118049",
                                           "updatedAt":  "2025-07-30T17:45:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Unhandled exception causes docker container to hang on ARM64, like #66707",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112580",
        "createdAt":  "2025-02-11T15:01:23Z",
        "number":  112580,
        "author":  "philipszalla-cpit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_HB-A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "donat-comparit",
                                            "createdAt":  "2025-02-11T15:43:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "twickboldt",
                                            "createdAt":  "2025-02-12T09:04:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tschrank-cpit",
                                            "createdAt":  "2025-02-12T09:06:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "philipszalla",
                                            "createdAt":  "2025-02-12T09:08:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ylle-comparit",
                                            "createdAt":  "2025-02-12T17:36:51Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-13T18:51:01Z",
        "body":  "### Describe the bug\n\nWe switched our asp.net application from .NET 8.0 to .NET 9.0. We discovered an issue with .NET 9.0:\n\nWhen an exception occurs in the Program.cs, the dotnet process does not terminate and the container continues running and uses 100% CPU.\n\nExpected behaviour:\n1. Top level exception occurs\n2. Docker container stops\n\nCurrent behaviour:\n1. Top level exception occurs\n2. Docker container is still running\n3. Docker container CPU usage stays at 100%\n\n### Which .NET image(s) are you using?\n\nmcr.microsoft.com/dotnet/runtime:9.0@sha256:c31b1ae5818421e20c0792e9e169004b1ca637486ef85b1c662921d82b053a03\n\n### Steps to reproduce\n\nI can reproduce this using a new ASP.NET 9.0 project or just a .NET 9.0 command-line project. If I run the same project outside of a container, the process stops correctly.\n\nEnvironment:\n- MacBook Pro M3 Pro (Arm)\n- AWS EC2 t4g (Arm)\n\n`Test.csproj`:\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n    \u003cPropertyGroup\u003e\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\n        \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003c/PropertyGroup\u003e\n\n    \u003cItemGroup\u003e\n      \u003cContent Include=\"..\\..\\.dockerignore\"\u003e\n        \u003cLink\u003e.dockerignore\u003c/Link\u003e\n      \u003c/Content\u003e\n    \u003c/ItemGroup\u003e\n\n\u003c/Project\u003e\n```\n\n`Program.cs`:\n```csharp\nConsole.WriteLine(\"Hello, World!\");\n\nthrow new Exception(\"test\");\n```\n\n`Dockerfile`:\n```dockerfile\nFROM mcr.microsoft.com/dotnet/runtime:9.0 AS base\nUSER $APP_UID\nWORKDIR /app\n\nFROM mcr.microsoft.com/dotnet/sdk:9.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"Test.csproj\", \".\"]\nRUN dotnet restore \"Test.csproj\"\nCOPY . .\nWORKDIR \"/src\"\nRUN dotnet build \"Test.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"Test.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"Test.dll\"]\n```\n\n`.dockerignore`:\n```\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/.idea\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/azds.yaml\n**/bin\n**/charts\n**/docker-compose*\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\nLICENSE\nREADME.md\n```\n\nRun this:\n```bash\ndocker build -t test .\ndocker run --rm test\n```\n\n### Other information\n\nThe issue is reproducible using a new .NET project generated by JetBrains Rider.\n\nHost OSs are:\n- macOS 15.1.1 (24B91)\n- Amazon Linux 2023 (used with AWS EKS)\n\n### Output of `docker version`\n\n```console\nClient:\n Version:           27.4.0\n API version:       1.47\n Go version:        go1.22.10\n Git commit:        bde2b89\n Built:             Sat Dec  7 10:35:43 2024\n OS/Arch:           darwin/arm64\n Context:           desktop-linux\n\nServer: Docker Desktop 4.37.2 (179585)\n Engine:\n  Version:          27.4.0\n  API version:      1.47 (minimum version 1.24)\n  Go version:       go1.22.10\n  Git commit:       92a8393\n  Built:            Sat Dec  7 10:38:33 2024\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.7.21\n  GitCommit:        472731909fa34bd7bc9c087e4c27943f9835f111\n runc:\n  Version:          1.1.13\n  GitCommit:        v1.1.13-0-g58aa920\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n```\n\n### Output of `docker info`\n\n```console\nClient:\n Version:    27.4.0\n Context:    desktop-linux\n Debug Mode: false\n Plugins:\n  ai: Ask Gordon - Docker Agent (Docker Inc.)\n    Version:  v0.5.1\n    Path:     /Users/ps/.docker/cli-plugins/docker-ai\n  buildx: Docker Buildx (Docker Inc.)\n    Version:  v0.19.2-desktop.1\n    Path:     /Users/ps/.docker/cli-plugins/docker-buildx\n  compose: Docker Compose (Docker Inc.)\n    Version:  v2.31.0-desktop.2\n    Path:     /Users/ps/.docker/cli-plugins/docker-compose\n  debug: Get a shell into any image or container (Docker Inc.)\n    Version:  0.0.37\n    Path:     /Users/ps/.docker/cli-plugins/docker-debug\n  desktop: Docker Desktop commands (Beta) (Docker Inc.)\n    Version:  v0.1.0\n    Path:     /Users/ps/.docker/cli-plugins/docker-desktop\n  dev: Docker Dev Environments (Docker Inc.)\n    Version:  v0.1.2\n    Path:     /Users/ps/.docker/cli-plugins/docker-dev\n  extension: Manages Docker extensions (Docker Inc.)\n    Version:  v0.2.27\n    Path:     /Users/ps/.docker/cli-plugins/docker-extension\n  feedback: Provide feedback, right in your terminal! (Docker Inc.)\n    Version:  v1.0.5\n    Path:     /Users/ps/.docker/cli-plugins/docker-feedback\n  init: Creates Docker-related starter files for your project (Docker Inc.)\n    Version:  v1.4.0\n    Path:     /Users/ps/.docker/cli-plugins/docker-init\n  sbom: View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc.)\n    Version:  0.6.0\n    Path:     /Users/ps/.docker/cli-plugins/docker-sbom\n  scout: Docker Scout (Docker Inc.)\n    Version:  v1.15.1\n    Path:     /Users/ps/.docker/cli-plugins/docker-scout\n\nServer:\n Containers: 26\n  Running: 7\n  Paused: 0\n  Stopped: 19\n Images: 70\n Server Version: 27.4.0\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Using metacopy: false\n  Native Overlay Diff: true\n  userxattr: false\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Cgroup Version: 2\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog\n CDI spec directories:\n  /etc/cdi\n  /var/run/cdi\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 472731909fa34bd7bc9c087e4c27943f9835f111\n runc version: v1.1.13-0-g58aa920\n init version: de40ad0\n Security Options:\n  seccomp\n   Profile: unconfined\n  cgroupns\n Kernel Version: 6.10.14-linuxkit\n Operating System: Docker Desktop\n OSType: linux\n Architecture: aarch64\n CPUs: 11\n Total Memory: 17.54GiB\n Name: docker-desktop\n ID: 1808eb13-9c72-496f-9afe-c70273fb9be6\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n HTTP Proxy: http.docker.internal:3128\n HTTPS Proxy: http.docker.internal:3128\n No Proxy: hubproxy.docker.internal\n Labels:\n  com.docker.desktop.address=unix:///Users/ps/Library/Containers/com.docker.docker/Data/docker-cli.sock\n Experimental: false\n Insecure Registries:\n  hubproxy.docker.internal:5555\n  127.0.0.0/8\n Live Restore Enabled: false\n\nWARNING: daemon is not using the default seccomp profile\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvdiySA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaLd",
                                           "createdAt":  "2025-02-12T19:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lbussell",
                                           "body":  "I can\u0027t reproduce this using your precise instructions/files on my Windows AMD64 machine - @richlander can you give this a try on your ARM Mac?\n\n```\nPS\u003e docker run --rm test\nHello, World!\nUnhandled exception. System.Exception: test\n   at Program.\u003cMain\u003e$(String[] args) in /src/Program.cs:line 3\nPS\u003e\n```\n\nOne thing I noticed is that `mcr.microsoft.com/dotnet/runtime:9.0@sha256:c31b1ae5818421e20c0792e9e169004b1ca637486ef85b1c662921d82b053a03` is a manifest list tag. Can you validate which architecture you\u0027re pulling and running, and ensure you aren\u0027t running under any kind of emulation/translation? The latest ARM64 specific tag would be `mcr.microsoft.com/dotnet/runtime:9.0.2-bookworm-slim-arm64v8`.",
                                           "updatedAt":  "2025-02-12T19:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaLh",
                                           "createdAt":  "2025-02-12T19:42:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "I don\u0027t have an Arm Mac anymore. I gave it back.",
                                           "updatedAt":  "2025-02-12T19:42:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaLo",
                                           "createdAt":  "2025-02-12T20:46:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGb64Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lbussell",
                                                                               "createdAt":  "2025-02-12T20:59:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoken",
                                           "body":  "I can confirm that it doesn\u0027t work for me either. Also tried with the image `mcr.microsoft.com/dotnet/runtime:9.0.2-bookworm-slim-arm64v8`.\n\n![Image](https://github.com/user-attachments/assets/ea9e3e82-ff37-47d8-aede-f44cd4bac17d)\n\nOS: Mac Studio M2 Max\nDocker Version: (Rosetta enabled)\n\n```sh\ndocker version\n\nClient:\n Version:           27.5.1\n API version:       1.47\n Go version:        go1.22.11\n Git commit:        9f9e405\n Built:             Wed Jan 22 13:37:19 2025\n OS/Arch:           darwin/arm64\n Context:           desktop-linux\n\nServer: Docker Desktop 4.38.0 (181591)\n Engine:\n  Version:          27.5.1\n  API version:      1.47 (minimum version 1.24)\n  Go version:       go1.22.11\n  Git commit:       4c9b3b0\n  Built:            Wed Jan 22 13:41:25 2025\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.7.25\n  GitCommit:        bcc810d6b9066471b0b6fa75f557a15a1cbf31bb\n runc:\n  Version:          1.1.12\n  GitCommit:        v1.1.12-0-g51d5e946\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n```",
                                           "updatedAt":  "2025-02-12T20:46:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaLv",
                                           "createdAt":  "2025-02-12T20:58:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lbussell",
                                           "body":  "@jkotas could this be a runtime issue? Or do you have any troubleshooting tips to rule out the runtime?",
                                           "updatedAt":  "2025-02-12T20:58:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaLx",
                                           "createdAt":  "2025-02-12T22:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This may be related to https://github.com/dotnet/runtime/issues/109779 . cc @janvorli @mikem8361\n\n@lbussell I do not have access to arm64 box at the moment. Could you please check:\n\n- Does the problem repro on live .NET 10?\n\n- Does the problem go away if you pass `--init` argument to `docker run` (workaround described in https://github.com/dotnet/runtime/issues/109779#issuecomment-2477592057)? ",
                                           "updatedAt":  "2025-02-12T22:13:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaL1",
                                           "createdAt":  "2025-02-12T22:27:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lbussell",
                                           "body":  "@mthalman is working on a repro, otherwise I can try later this evening with my Mac.\n\nIf anyone else wants to check with .NET 10, the equivalent image(s) would be `mcr.microsoft.com/dotnet/nightly/[runtime|sdk]:10.0-preview-trixie-slim-arm64v8`.",
                                           "updatedAt":  "2025-02-12T22:27:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaL6",
                                           "createdAt":  "2025-02-13T09:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philipszalla-cpit",
                                           "body":  "@lbussell\n\n\u003e I can\u0027t reproduce this using your precise instructions/files on my Windows AMD64 machine - [@richlander](https://github.com/richlander) can you give this a try on your ARM Mac?\n\u003e \n\u003e ```\n\u003e PS\u003e docker run --rm test\n\u003e Hello, World!\n\u003e Unhandled exception. System.Exception: test\n\u003e    at Program.\u003cMain\u003e$(String[] args) in /src/Program.cs:line 3\n\u003e PS\u003e\n\u003e ```\n\u003e \n\u003e One thing I noticed is that `mcr.microsoft.com/dotnet/runtime:9.0@sha256:c31b1ae5818421e20c0792e9e169004b1ca637486ef85b1c662921d82b053a03` is a manifest list tag. Can you validate which architecture you\u0027re pulling and running, and ensure you aren\u0027t running under any kind of emulation/translation? The latest ARM64 specific tag would be `mcr.microsoft.com/dotnet/runtime:9.0.2-bookworm-slim-arm64v8`.\n\nUsing the tag `mcr.microsoft.com/dotnet/runtime:9.0.2-bookworm-slim-arm64v8` causes the same problem.\n\n@jkotas\n\n\u003e This may be related to [dotnet/runtime#109779](https://github.com/dotnet/runtime/issues/109779) . cc [@janvorli](https://github.com/janvorli) [@mikem8361](https://github.com/mikem8361)\n\u003e \n\u003e [@lbussell](https://github.com/lbussell) I do not have access to arm64 box at the moment. Could you please check:\n\u003e \n\u003e * Does the problem repro on live .NET 10?\n\u003e * Does the problem go away if you pass `--init` argument to `docker run` (workaround described in [App hangs after taking crashdump in official .NET 9 x64 glibc docker images runtime#109779 (comment)](https://github.com/dotnet/runtime/issues/109779#issuecomment-2477592057))?\n\n* Yes, with .NET 10 (`mcr.microsoft.com/dotnet/nightly/runtime:10.0-preview-trixie-slim-arm64v8`) I have the same issue.\n* And yes, the problem goes away if I pass `--init` to `docker run`. But this is no workaround for us, as we are using kuberentes and after a short research I couldn\u0027t find any way to get this behaviour (`--init`) with the CRI.",
                                           "updatedAt":  "2025-02-13T09:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaL7",
                                           "createdAt":  "2025-02-13T12:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoken",
                                           "body":  "This solution may not be the most elegant, but it should work.\n\n```yaml\nFROM mcr.microsoft.com/dotnet/runtime:9.0 AS base\nRUN apt-get update \u0026\u0026 apt-get install -y tini\nUSER $APP_UID\nWORKDIR /app\n\nFROM mcr.microsoft.com/dotnet/sdk:9.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"Test.csproj\", \".\"]\nRUN dotnet restore \"Test.csproj\"\nCOPY . .\nWORKDIR \"/src\"\nRUN dotnet build \"Test.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"Test.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"dotnet\", \"Test.dll\"]\n\n```",
                                           "updatedAt":  "2025-02-13T12:39:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaL-",
                                           "createdAt":  "2025-02-13T15:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mthalman",
                                           "body":  "I can repro this on my MacBook. The [suggested workaround of installing `tini`](https://github.com/dotnet/runtime/issues/112580) doesn\u0027t resolve the issue for me. Using the `--init` option does resolve it.\n\nI backtracked to see when this behavior first started happening. It looks like it was introduced with the release of 9.0 RC1. Works fine in 9.0 Preview 7 (the previous release).",
                                           "updatedAt":  "2025-02-13T15:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaMD",
                                           "createdAt":  "2025-02-13T15:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lbussell",
                                           "body":  "I was also able to repro on .NET 9 and 10. So it seems like https://github.com/dotnet/runtime/pull/110379 may not have worked?\n\n@mthalman, the `tini` workaround does work for me on .NET 9 and 10 as well.",
                                           "updatedAt":  "2025-02-13T15:55:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaMJ",
                                           "createdAt":  "2025-02-13T16:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I backtracked to see when this behavior first started happening. It looks like it was introduced with the release of 9.0 RC1. Works fine in 9.0 Preview 7 (the previous release).\n\nThe problem could have been introduced by change in either .NET runtime or in the Linux distro. It would be useful to eliminate the later as a possibility. Could you please check whether it repros in the latest .NET 9.0 container with dotnet runtime overwritten with .NET 9 Preview 7 bits?",
                                           "updatedAt":  "2025-02-13T16:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaML",
                                           "createdAt":  "2025-02-13T17:13:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGb65A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lbussell",
                                                                               "createdAt":  "2025-02-13T17:22:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mthalman",
                                           "body":  "\u003e Could you please check whether it repros in the latest .NET 9.0 container with dotnet runtime overwritten with .NET 9 Preview 7 bits?\n\nIt still does not repro using the latest distro w/ P7 bits. Here\u0027s the Dockerfile I used to check that:\n\n```Dockerfile\nFROM mcr.microsoft.com/dotnet/runtime:9.0.0-preview.7 AS base\n\nFROM mcr.microsoft.com/dotnet/runtime-deps:9.0 AS distro\n\nCOPY --from=base /usr/share/dotnet /usr/share/dotnet\nRUN ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n\nUSER $APP_UID\nWORKDIR /app\n\nFROM mcr.microsoft.com/dotnet/sdk:9.0.100-preview.7 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"Test.csproj\", \".\"]\nRUN dotnet restore \"Test.csproj\"\nCOPY . .\nWORKDIR \"/src\"\nRUN dotnet build \"Test.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"Test.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n\nFROM distro AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"Test.dll\"]\n```",
                                           "updatedAt":  "2025-02-13T17:13:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ejaMO",
                                           "createdAt":  "2025-02-14T19:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lbussell",
                                           "body":  "I also tested using Ubuntu 24.04 and came to the same conclusion. I don\u0027t think it was a change in containers. I am transferring to dotnet/runtime since this seems like a regression.",
                                           "updatedAt":  "2025-02-14T19:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6e8y0Z",
                                           "createdAt":  "2025-02-18T19:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I will look into it. But there seems to be a workaround even on Kubernetes in the meanwhile, see https://stackoverflow.com/questions/50803268/kubernetes-equivalent-of-docker-run-init",
                                           "updatedAt":  "2025-02-18T19:25:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66aB16",
                                           "createdAt":  "2025-07-28T14:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "I have [asked](https://github.com/dotnet/runtime/issues/118049#issuecomment-3127371364) to backport the fix to .net 9.  ",
                                           "updatedAt":  "2025-07-28T14:02:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc691P7m",
                                           "createdAt":  "2025-08-13T17:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@baal2000 assume this can be closed as dupe of #118049 ? ",
                                           "updatedAt":  "2025-08-13T17:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc692LJI",
                                           "createdAt":  "2025-08-13T18:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 agreed: the only difference between the two is the main (foreground) thread exception here vs background in https://github.com/dotnet/runtime/issues/118049. The test under [TestUnhandledCrashConsoleApp](https://github.com/baal2000/TestUnhandledCrashConsoleApp) can be updated to verify if there is any doubt.",
                                           "updatedAt":  "2025-08-13T18:51:01Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Top level exception does not stop docker container",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113694",
        "createdAt":  "2025-03-19T14:41:33Z",
        "number":  113694,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T11:09:10Z",
        "body":  "most of EH will be handled by the interpreter. we might still need few parts for the native code",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwPZOZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6jNyVZ",
                                           "createdAt":  "2025-03-19T22:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-19T22:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A9k5l",
                                           "createdAt":  "2025-08-29T15:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "In transitions to native code in Mono we use C++ `catch` via LLVM, that translates to WASM catch instruction/block.\n\nThis would not be necessary for JSImport/JSExport interop, because we catch and marshal exceptions in JS.\n\nBut any exceptions in native code called by P/Invoke/Qcall/Fcall/Icall (including emscripten and browser errors) would trap if not handled. So I think we will need something similar when we call out.\n\nhttps://github.com/dotnet/runtime/blob/2562b734de0793a894cea73ba0678245575f6779/src/mono/mono/mini/llvm-runtime.cpp#L42-L50\n\nhttps://github.com/dotnet/runtime/blob/2562b734de0793a894cea73ba0678245575f6779/src/mono/mono/mini/llvm-runtime.cpp#L58-L66",
                                           "updatedAt":  "2025-09-01T11:09:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm coreclr] exception handling",
        "labels":  [
                       "arch-wasm",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114055",
        "createdAt":  "2025-03-31T01:50:04Z",
        "number":  114055,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T02:06:22Z",
        "body":  "**Failed in:** [runtime-coreclr gcstress0x3-gcstress0xc 20250330.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=998576\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26651192\u0026resultId=222930\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked gcstress0x3 @ Windows.11.Arm64.Open\n    - baseservices/exceptions/unhandled/unhandledTester/unhandledTester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:C:hw9DF20881wBC0209FCe\baseservicesexceptions\baseservices-exceptions../unhandled/unhandledTester/unhandledTester.cmd Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/30/2025 2:43:44 PM, end: 3/30/2025 3:44:10 PM)\n\nReturn code:      -100\nRaw output file:      C:hw9DF20881wBC0209FCuploadsunhandledunhandledTesteroutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hw9DF20881pcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  unhandledTester.dll \n\"Unhandled exception. System.Exception: Test\"\n\"\"\n\"   at TestUnhandledException.Program.Main(String[] args)\"\n\"\"\nTest process unhandled.dll with argument main exited\nTest process exited with expected error code and produced expected output\n\"Unhandled exception. System.Exception: Test\"\n\"\"\n\"   at TestUnhandledException.Program.\u003c\u003ec.\u003cMain\u003eb__5_0()\"\n\"\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nTest process unhandled.dll with argument secondary exited\nTest process exited with expected error code and produced expected output\n\"Unhandled exception. System.DllNotFoundException: Unable to load DLL \u0027__internal\u0027 or one of its dependencies: The specified module could not be found. (0x8007007E)\"\n\"\"\nTest process unhandled.dll with argument foreign exited\nTest process exited with expected error code and produced expected output\n\ncmdLine:C:hw9DF20881wBC0209FCe\baseservicesexceptions\baseservices-exceptions../unhandled/unhandledTester/unhandledTester.cmd Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 3/30/2025 2:43:44 PM, end: 3/30/2025 3:44:10 PM)\nUnable to find cdb.exe at C:Program Files (x86)Windows Kits10Debuggers\u0007rm64cdb.exe\nUnable to find cdb.exe at C:Program Files (x86)Windows Kits10Debuggers\u0007rm64cdb.exe\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hw9DF20881wBC0209FCe\baseservicesexceptions\baseservices-exceptions../unhandled/unhandledTester/unhandledTester.cmd\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor141|0_142(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv9f3vQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lz1Te",
                                           "createdAt":  "2025-04-07T01:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr gcstress0x3-gcstress0xc 20250406.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1006865\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26888150\u0026resultId=222935\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked gcstress0x3 @ Windows.11.Arm64.Open\n    - baseservices/exceptions/unhandled/unhandledTester/unhandledTester.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:C:hwA85209CEwAF9F0978e\baseservicesexceptions\baseservices-exceptions../unhandled/unhandledTester/unhandledTester.cmd Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 4/6/2025 2:43:02 PM, end: 4/6/2025 3:43:07 PM)\n\nReturn code:      -100\nRaw output file:      C:hwA85209CEwAF9F0978uploadsunhandledunhandledTesteroutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwA85209CEpcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  unhandledTester.dll \n\"Unhandled exception. System.Exception: Test\"\n\"\"\n\"   at TestUnhandledException.Program.Main(String[] args)\"\n\"\"\nTest process unhandled.dll with argument main exited\nTest process exited with expected error code and produced expected output\n\"Unhandled exception. System.Exception: Test\"\n\"\"\n\"   at TestUnhandledException.Program.\u003c\u003ec.\u003cMain\u003eb__5_0()\"\n\"\"\n\"   at System.Threading.Thread.StartCallback()\"\n\"\"\nTest process unhandled.dll with argument secondary exited\nTest process exited with expected error code and produced expected output\n\"Unhandled exception. System.DllNotFoundException: Unable to load DLL \u0027__internal\u0027 or one of its dependencies: The specified module could not be found. (0x8007007E)\"\n\"\"\nTest process unhandled.dll with argument foreign exited\nTest process exited with expected error code and produced expected output\n\"Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly \u0027dependencytodelete, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027. The system cannot find the file specified.\"\n\"\"\n\"File name: \u0027dependencytodelete, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027\"\n\"\"\n\"   at DependencyTest.Program.Main(String[] args)\"\n\ncmdLine:C:hwA85209CEwAF9F0978e\baseservicesexceptions\baseservices-exceptions../unhandled/unhandledTester/unhandledTester.cmd Timed Out (timeout in milliseconds: 3600000 from variable __TestTimeout, start: 4/6/2025 2:43:02 PM, end: 4/6/2025 3:43:07 PM)\nUnable to find cdb.exe at C:Program Files (x86)Windows Kits10Debuggers\u0007rm64cdb.exe\nUnable to find cdb.exe at C:Program Files (x86)Windows Kits10Debuggers\u0007rm64cdb.exe\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwA85209CEwAF9F0978e\baseservicesexceptions\baseservices-exceptions../unhandled/unhandledTester/unhandledTester.cmd\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor141|0_142(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-04-07T01:46:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qDSj-",
                                           "createdAt":  "2025-05-06T01:41:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr gcstress0x3-gcstress0xc 20250504.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1033175\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27755848\u0026resultId=222956\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked gcstress0x3 @ Windows.11.Arm64.Open\n    - baseservices/exceptions/unhandled/unhandledTester/unhandledTester.cmd\n```\n\n**Error message:**\n```\n Test Infrastructure Failure: System.InvalidOperationException: Process has exited, so the requested information is not available.\n   at System.Diagnostics.Process.EnsureState(State state) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 987\n   at System.Diagnostics.Process.get_ProcessName() in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs:line 913\n   at CoreclrTestLib.CoreclrTestWrapperLib.FindChildProcessesByName(Process process, String childName)\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.Fail(String message) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 38\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor142|0_143(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```\n",
                                           "updatedAt":  "2025-05-06T01:41:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66dMvR",
                                           "createdAt":  "2025-07-28T17:15:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "This issue hasn\u0027t reproed in a few months. ",
                                           "updatedAt":  "2025-07-28T17:15:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-iFrp",
                                           "createdAt":  "2025-08-18T12:43:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "This reproed yesterday: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1124795\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30924732\u0026resultId=236561\u0026paneView=debug",
                                           "updatedAt":  "2025-08-18T12:43:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_1_e9",
                                           "createdAt":  "2025-08-25T02:06:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr gcstress-extra 20250823.3](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1130522)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked gcstress0xc_jitstress2 @ (Debian.13.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-13-helix-arm32v7\n    - baseservices/exceptions/unhandled/unhandledTester/unhandledTester.cmd\ncoreclr linux arm Checked gcstress0xc_tailcallstress @ (Debian.13.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-13-helix-arm32v7\n    - baseservices/exceptions/unhandled/unhandledTester/unhandledTester.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      /root/helix/work/workitem/uploads/unhandled/unhandledTester/output.txt\nRaw output:\nBEGIN EXECUTION\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true unhandledTester.dll \u0027\u0027\n\"\"\n\"Assert failure(PID 576 [0x00000240], Thread: 576 [0x0240]): Consistency check failed: hit privileged instruction!\"\n\"FAILED: !ExecutionManager::IsManagedCode(GetIP(pContext))\"\n\"    File: /__w/1/s/src/coreclr/vm/excep.cpp:5742\"\n\"    Image: /root/helix/work/correlation/corerun\"\n\"\"\n\"\"\nTest process unhandled.dll with argument main exited\nSystem.Exception: Missing Unhandled exception header\n   at TestUnhandledExceptionTester.Program.RunExternalProcess(String unhandledType, String assembly)\n   at TestUnhandledExceptionTester.Program.TestEntryPoint()\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /datadisks/disk1/dumps since 8/23/2025 10:35:40 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e /root/helix/work/workitem/e/baseservices/exceptions/baseservices-exceptions/../unhandled/unhandledTester/unhandledTester.sh\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor145|0_146(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-08-25T02:06:22Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Test failure: baseservices/exceptions/unhandled/unhandledTester/unhandledTester.cmd",
        "labels":  [
                       "arch-arm64",
                       "os-windows",
                       "GCStress",
                       "area-ExceptionHandling-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115476",
        "createdAt":  "2025-05-12T09:23:11Z",
        "number":  115476,
        "author":  "dmalukov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-12T20:31:58Z",
        "body":  "### Description\n\nApparently, gCurrentThreadInfo (threads.inl) is null. \n\n```c++\ninline Thread* GetThreadNULLOk()\n{\n    return gCurrentThreadInfo.m_pThread;\n}\n```\n\n```[0x0]   coreclr!GetThreadNULLOk+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.inl @ 37]   (Inline Function)   (Inline Function)   \n[0x1]   coreclr!COMUnhandledExceptionFilter+0x1e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 4769]   0x6f3ef7d0c0   0x7ffd15cc9f73   \n[0x2]   KERNELBASE!UnhandledExceptionFilter+0x1f3   0x6f3ef7d0f0   0x7ffd188453fa   \n[0x3]   ntdll!RtlUserThreadStart$filt$0+0x3f   0x6f3ef7d1e0   0x7ffd187fe963   \n[0x4]   ntdll!_C_specific_handler+0x93   0x6f3ef7d210   0x7ffd188406ff   \n[0x5]   ntdll!RtlpExecuteHandlerForException+0xf   0x6f3ef7d280   0x7ffd1871a328   \n[0x6]   ntdll!RtlDispatchException+0x2c8   0x6f3ef7d2b0   0x7ffd1884003e   \n[0x7]   ntdll!KiUserExceptionDispatch+0x2e   0x6f3ef7da80   0x7ffc5c6b001e   \n[0x8]   coreclr!GetThreadNULLOk+0x14 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.inl @ 37]   (Inline Function)   (Inline Function)   \n[0x9]   coreclr!COMUnhandledExceptionFilter+0x1e [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\excep.cpp @ 4769]   0x6f3ef7e1c0   0x7ffd15cc9f73   \n[0xa]   KERNELBASE!UnhandledExceptionFilter+0x1f3   0x6f3ef7e1f0   0x7ffd188372fe   \n[0xb]   ntdll!TppWorkerpInnerExceptionFilter+0x1a   0x6f3ef7e2e0   0x7ffd18843061   \n[0xc]   ntdll!TppWorkerThread$filt$5+0x19   0x6f3ef7e310   0x7ffd187fe963   \n[0xd]   ntdll!_C_specific_handler+0x93   0x6f3ef7e360   0x7ffd1883bb2e   \n[0xe]   ntdll!_GSHandlerCheck_SEH+0x6a   0x6f3ef7e3d0   0x7ffd188406ff   \n[0xf]   ntdll!RtlpExecuteHandlerForException+0xf   0x6f3ef7e400   0x7ffd1871a328   \n[0x10]   ntdll!RtlDispatchException+0x2c8   0x6f3ef7e430   0x7ffd1884003e   \n[0x11]   ntdll!KiUserExceptionDispatch+0x2e   0x6f3ef7ec00   0x7ffd1878cbe1   \n[0x12]   ntdll!RtlpHpLfhOwnerMoveSubsegment+0x191   0x6f3ef7f330   0x7ffd1878cd10   \n[0x13]   ntdll!RtlpHpLfhOwnerRunMaintenance+0x90   0x6f3ef7f3d0   0x7ffd1873f73d   \n[0x14]   ntdll!RtlpHpLfhOwnerCompact+0x1ed   0x6f3ef7f470   0x7ffd1873f415   \n[0x15]   ntdll!RtlpHpLfhContextCompact+0x195   0x6f3ef7f5f0   0x7ffd1873db13   \n[0x16]   ntdll!RtlpHpGCFlushCallback+0x43   0x6f3ef7f640   0x7ffd1874b88e   \n[0x17]   ntdll!RtlpEnumProcessHeaps+0xae   0x6f3ef7f670   0x7ffd18749ab6   \n[0x18]   ntdll!RtlpHpGCCallback+0x16   0x6f3ef7f6d0   0x7ffd18714f06   \n[0x19]   ntdll!TppTimerpExecuteCallback+0x1d6   0x6f3ef7f700   0x7ffd186f5cbd   \n[0x1a]   ntdll!TppWorkerThread+0x80d   0x6f3ef7f740   0x7ffd1671e8d7   \n[0x1b]   kernel32!BaseThreadInitThunk+0x17   0x6f3ef7faa0   0x7ffd187914fc   \n[0x1c]   ntdll!RtlUserThreadStart+0x2c   0x6f3ef7fad0   0x0   \n```\n\nThe full crash dump is available [here](https://drive.google.com/file/d/1akNq5fNY3tW035abJ4NK3ZUatpxJccRd/view?usp=sharing).\n\nOS Version: 10.0.26100\nCLR Version: 9.0.325.11113",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrMWsYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rK2yf",
                                           "createdAt":  "2025-05-12T09:27:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmalukov",
                                           "body":  "I assume the app misbehaves in a way that there are too many threads created.\nNonetheless, the runtime should not crash.",
                                           "updatedAt":  "2025-05-12T14:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rNxPp",
                                           "createdAt":  "2025-05-12T13:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We can add a check like this https://github.com/dotnet/runtime/blob/44209039b2352e51855adbd9b54b694f4e6187fb/src/coreclr/vm/excep.cpp#L7011-L7015 to avoid crashing in coreclr.dll",
                                           "updatedAt":  "2025-05-12T13:09:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sqw7a",
                                           "createdAt":  "2025-05-21T07:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmalukov",
                                           "body":  "@jkotas are there any plans to include the fix in one of the upcoming servicing updates?",
                                           "updatedAt":  "2025-05-21T07:26:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sxaxh",
                                           "createdAt":  "2025-05-21T16:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I assume the app misbehaves in a way that there are too many threads created\n\nI have looked at your dump. The crash is not caused by too many threads. The original fault occurred in RtlpHpLfhOwnerMoveSubsegment. It is caused by unmanaged heap corruption - use-after-free, double-free or buffer overrun in unmanaged code. The corrupted memory contains a string `{0.0.0.00000000}.{f7922446-79e8-46b3-a021-7f116af84e30}`. It may be a clue for where the memory corruption is coming from.\n\n\u003e are there any plans to include the fix in one of the upcoming servicing updates?\n\nI do not expect this fix to be included in servicing. The app is going is about to crash anyway. The potential fix just makes this crash a tiny bit easier to diagnose. However, all bets are off with unmanaged heap corruptions like this. They are never easy to diagnose.",
                                           "updatedAt":  "2025-05-21T16:59:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Access violation at COMUnhandledExceptionFilter",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116522",
        "createdAt":  "2025-06-11T10:45:58Z",
        "number":  116522,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-03T15:25:59Z",
        "body":  "### Description\n\nRunning the sample HelloAndroid test app on CoreCLR using static linking and throw an exception in main will trigger a crash with limited callstack data. Turns out that the ICU function pointers are null and when trying to resolve exception message will lead to a crash in a bad spot (handling another unhandled exception) that will leave us with a truncated callstack.\n\n### Reproduction Steps\n\nBuild sample HelloAndroid test app using static linking targeting CoreCLR. Include a throw new Exception(\"Crash\") in main method.\n\n### Expected behavior\n\nStack of unhandled managed exception and process termination.\n\n### Actual behavior\n\nCrash with limited native callstack information and no managed callstack.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsJF8Sw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wkXxL",
                                           "createdAt":  "2025-06-11T11:30:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-11T11:30:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Crash calling ICU GetLocale on static Android CoreCLR build.",
        "labels":  [
                       "area-ExceptionHandling-coreclr",
                       "os-android",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116594",
        "createdAt":  "2025-06-12T18:42:15Z",
        "number":  116594,
        "author":  "39otsu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-25T21:29:14Z",
        "body":  "### Description\n\nCoreCLR Test Failure\n\n### Reproduction Steps\n\n-Open x64 VS Dev Command Prompt 17.14.4 preview 1.0\n-Clone the repo\n-Checkout b21c93c\n-cd to project root directory\n-`.\\build clr+libs -rc Debug -lc Release -fsanitize address -arch x64`\n-`src/tests/build.cmd debug x64 -fsanitize address /p:LibrariesConfiguration=Release`\n-`src/tests/run.cmd debug x64`\n\n### Expected behavior\n\nTests pass\n\n### Actual behavior\n\nFailed test: OutOfProcessTest::baseservices\\exceptions\\stackoverflow\\stackoverflowtester\\stackoverflowtester.cmd (baseservices\\exceptions\\stackoverflow\\stackoverflowtester\\stackoverflowtester.cmd) (baseservices.exceptions.baseservices-exceptions)\n\nReturn code:      1\nRaw output file:      C:\\gitP\\dotnet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester\\output.txt\nRaw output:\nBEGIN EXECUTION\n\nC:\\gitP\\dotnet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester\u003eset DOTNETCLI=C:\\gitP\\dotnet\\runtime\\dotnet.cmd\n\nC:\\gitP\\dotnet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester\u003eset __DOTNET_ADD_64BIT=1\n\nC:\\gitP\\dotnet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester\u003eset __DOTNET_PREFERRED_BITNESS=64\n \"C:\\gitP\\dotnet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  stackoverflowtester.dll\nRunning stackoverflow test(smallframe main)\n\"\"\nSystem.Exception: Exit code: 0xC0000005, expected 0xC00000FD or 0x800703E9\n   at TestStackOverflow.Program.TestStackOverflow(String testName, String testArgs, List`1\u0026 stderrLines) in C:\\gitP\\dotnet\\runtime\\src\\tests\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester.cs:line 76\n   at TestStackOverflow.Program.TestStackOverflowSmallFrameMainThread() in C:\\gitP\\dotnet\\runtime\\src\\tests\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester.cs:line 88\n   at __GeneratedMainWrapper.Main() in C:\\gitP\\dotnet\\runtime\\artifacts\\tests\\coreclr\\obj\\windows.x64.Debug\\Managed\\baseservices\\exceptions\\stackoverflow\\stackoverflowtester\\XUnitWrapperGenerator\\XUnitWrapperGenerator.XUnitWrapperGenerator\\SimpleRunner.g.cs:line 7\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nFAILED\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows x64\n\n### Other information\n\nThis was built with the sanitizer instrumentation fix for Windows from https://github.com/dotnet/runtime/pull/116166",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsXkzsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xdxsF",
                                           "createdAt":  "2025-06-16T17:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "@janvorli @mangod9 ",
                                           "updatedAt":  "2025-06-16T17:00:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xeTOz",
                                           "createdAt":  "2025-06-16T17:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/runtime-infrastructure\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-16T17:51:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "baseservices.exceptions.baseservices-exceptions test failure when built with -fsanitize address on Windows x64",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117544",
        "createdAt":  "2025-07-11T15:22:12Z",
        "number":  117544,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGvHxw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "am11",
                                            "createdAt":  "2025-07-12T06:25:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-11T15:51:44Z",
        "body":  "When the `SfiNext` finds there are no more managed frames on the stack and the exception would propagate into native frames, it needs to figure out whether the exception should be reported as unhandled or whether it should let it go into the caller native frames so that a possible external native thread code can get a chance to catch it. \nCurrently, the presence of topmost `DebuggerU2MCatchHandlerFrame` with \"CatchesAllExceptions\" flag set or not is what drives that decision. But recently, it turned out there was a place where we were missing the `DebuggerU2MCatchHandlerFrame` and it caused an exception from managed code called by COM to be reported as unhandled and that caused an unexpected process shutdown. Investigating all places where runtime can be called from external code where most of them are marked by `BEGIN_EXTERNAL_ENTRYPOINT` macro is difficult due to sometimes complex control flow and it is also not future proof.\nSo we should look into finding a better way to make the decision whether an exception should be reported as unhandled or not.\nOne possible way would be to add the `DebuggerU2MCatchHandlerFrame` to the BEGIN_EXTERNAL_ENTRYPOINT, but it is not immediately clear whether it would have any unexpected effect on debugger behavior.\nAnother one is to mark entry points to the runtime where we know the exception needs to be reported as unhandled instead. E.g. using a new kind of explicit frame. It seems that it would be much easier to reason about that way rather than trying to mark all places where the exception should not be treated as unhandled.\n\nAlso, we should add documentation of this behavior to the `docs/design/coreclr/botr/exceptions.md`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOto7_hA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc62jv-E",
                                           "createdAt":  "2025-07-11T15:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaSxLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-07-11T18:25:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We should do something about this in .NET 10. Context: https://github.com/dotnet/runtime/pull/117518#issuecomment-3062822934",
                                           "updatedAt":  "2025-07-11T15:51:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Try to figure a better way to decide whether a managed exception should be reported as unhandled.",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118049",
        "createdAt":  "2025-07-25T00:30:53Z",
        "number":  118049,
        "author":  "baal2000",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-08T18:38:12Z",
        "body":  "### Description\n\nA .NET 9 application running as the primary process (PID 1) in a Docker container fails to terminate after an unhandled exception. The runtime correctly generates a crash dump as configured by DOTNET_DbgEnableMiniDump=1, but immediately afterward the process  continues running instead of exiting.\n\n\n### Reproduction Steps\n\n**Update**: the reproduction has been moved to its own repo at [TestUnhandledCrashConsoleApp](https://github.com/baal2000/TestUnhandledCrashConsoleApp).\n\nThe following minimal application and Docker configuration reproduces the issue.\n\n**Step 1:** C# Application Code (Program.cs) triggers an unhandled exception on a timer thread after 10 seconds.\n```\nAppDomain.CurrentDomain.UnhandledException += (sender, e) =\u003e\n{\n    Console.WriteLine(\"Unhandled exception: \" + e.ExceptionObject.ToString());\n};\n\nusing var timer = new Timer(\n    callback: _ =\u003e throw new InvalidOperationException(\"This is a test exception\"),\n    state: null,\n    dueTime: TimeSpan.FromSeconds(10),\n    period: Timeout.InfiniteTimeSpan\n);\n\nConsole.WriteLine(\"Hello, World! Application will crash in 10 seconds...\");\n// Keep the application running\nThread.Sleep(Timeout.Infinite);\n```\n\n**Step 2:** Publish the application as a self-contained executable for the Linux x64 runtime.\n```\ndotnet publish -c Release -r linux-x64\n```\n\n**Step 3:** Dockerfile\nCreate a Dockerfile to package the application.\n```\n# Use the official .NET 9 runtime base image\nFROM mcr.microsoft.com/dotnet/aspnet:9.0\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Copy the published application files into the container\nCOPY ./bin/Release/net9.0/linux-x64/publish/ .\n\n# Set the entrypoint to run the application.\n# Using this \"exec\" form ensures the app runs as PID 1.\nENTRYPOINT [\"./YourAppName\"]\n```\n(Note: Replace YourAppName with the actual name of the project\u0027s executable.)\n\n**Step 4:** Build the image and run containers demonstrating the different behaviors.\n```\ndocker build -t pid1-crash-app .\n```\n**Step 5:** Execute the following test cases:\n\nA. **FAILS**: Application crashes, creates a dump, and then hangs.\n```\ndocker run --rm -v ~/Downloads:/dumps -e \"DOTNET_DbgEnableMiniDump=1\" -e \"DOTNET_DbgMiniDumpType=1\" -e \"DOTNET_DbgMiniDumpName=/dumps/coredump.%p\" pid1-crash-app\n```\nB. PASSES: Application crashes and exits correctly (no dump created).\n```\ndocker run --rm -v ~/Downloads:/dumps -e \"DOTNET_DbgEnableMiniDump=0\" -e \"DOTNET_DbgMiniDumpType=1\" -e \"DOTNET_DbgMiniDumpName=/dumps/coredump.%p\" pid1-crash-app\n``` \nC. PASSES: Application is not PID 1, creates a dump, and exits correctly.\n```\ndocker run --rm --init -v ~/Downloads:/dumps -e \"DOTNET_DbgEnableMiniDump=1\" -e \"DOTNET_DbgMiniDumpType=1\" -e \"DOTNET_DbgMiniDumpName=/dumps/coredump.%p\" pid1-crash-app\n```\n\n[TestUnhandledCrashConsoleApp.zip](https://github.com/user-attachments/files/21420668/TestUnhandledCrashConsoleApp.zip)\n\n\n\n### Expected behavior\n\nTest Case A PASSES: Application is PID 1, creates a dump, and exits correctly.\n\n### Actual behavior\n\nTest Case A FAILS: Application crashes, creates a dump, and then hangs.\n\n\n\n### Regression?\n\nYes.\n\nA .NET 8 - based application passes all 3 tests successfully.\n\n### Known Workarounds\n\nThis behavior does not occur under the following conditions:\n\n- When DOTNET_DbgEnableMiniDump is set to 0.\n- When the container is run with an init system (e.g., using the docker run --init flag), which prevents the application from running as PID 1.\n\n### Configuration\n\n- .NET Version: .NET 9\n- Operating System: Linux (Ubuntu 20.04, etc)\n- Deployment: An application running in a Docker container.\n\n### Other information\n\n**STRACE Analysis:**  Attached [strace.txt](https://github.com/user-attachments/files/21420638/strace.txt) from a sidecar container.\n`strace -f -e trace=signal -p 1`\n\n1. Successful Dump Creation: strace logs confirm that the .NET runtime successfully launches the createdump utility and is notified of its completion via the SIGCHLD signal.\n```\n[pid  4633] +++ exited with 255 +++\n[pid  1102] --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=4633, si_uid=5001, si_status=255, si_utime=0, si_stime=9 /* 0.09 s */} —\n```\n2. Failed Termination Sequence: After the dump is complete, the strace log shows a dedicated crash-handling thread pid 4094 attempting to terminate the application by sending a SIGABRT signal twice to itself. This signal is \"swallowed\" and the process does not terminate.\n```\n[pid  4094] --- SIGABRT {si_signo=SIGABRT, si_code=SI_TKILL, si_pid=1, si_uid=5001} ---\n[pid  4094] rt_sigaction(SIGABRT, {sa_handler=SIG_DFL, sa_mask=~[], sa_flags=SA_RESTORER, sa_restorer=0x7e87a0a78090}, NULL, 8) = 0\n[pid  4094] rt_sigprocmask(SIG_BLOCK, ~[RTMIN RT_1], [], 8) = 0\n[pid  4094] tgkill(1, 4094, SIGABRT)    = 0\n[pid  4094] rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0\n[pid  4094] --- SIGABRT {si_signo=SIGABRT, si_code=SI_TKILL, si_pid=1, si_uid=5001} ---\n```\n3. State Corruption and SIGSEGV: Immediately after the failed SIGABRT attempts, the crash-handling thread receives a SIGSEGV (Segmentation Fault), indicating its memory state has become corrupted.\n```\n[pid  4094] --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=NULL} ---\n```\n**gdb Analysis:** \n1. A gdb backtrace of the hung process confirms the cause of the SIGSEGV is a call to `__netlink_request` with a null pointer (h=0x0).\n```\nThread 238 (LWP 4094):\n#0  0x00007e87a0b47bbf in __netlink_request (h=0x0, type=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/ifaddrs.c:119\n```\n2. The gdb command info handle SIGABRT shows the default handler is registered (yet strace shows the signal is not handled correctly).\n```\n (gdb) info handle SIGABRT\nSignal        Stop\tPrint\tPass to program\tDescription\nSIGABRT       Yes\tYes\tYes\t\tAborted\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwsGY-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65_Tzw",
                                           "createdAt":  "2025-07-25T21:14:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Adding @janvorli. I believe this is a known issue but I can\u0027t find a previous issue for this. @baal2000, is this a regression in 9? ",
                                           "updatedAt":  "2025-07-25T21:14:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65_alT",
                                           "createdAt":  "2025-07-25T21:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "This is the original issue: https://github.com/dotnet/runtime/issues/112580",
                                           "updatedAt":  "2025-07-25T21:24:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66AbNr",
                                           "createdAt":  "2025-07-25T23:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "\u003e is this a regression in 9\n\nyes if we compare with 8. https://github.com/dotnet/runtime/issues/109779 looks like a similar problem (mentions the crashdump triggering the issue) and has been fixed in 10 then the fix needs to be ported back to 9.",
                                           "updatedAt":  "2025-07-25T23:30:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66Fset",
                                           "createdAt":  "2025-07-26T15:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "The reproduction for both 9.0 and 10.0 frameworks has been moved to ist own repo [TestUnhandledCrashConsoleApp](https://github.com/baal2000/TestUnhandledCrashConsoleApp). Can also be updated to 8.0 if needed.\n\nI have tested with 10.0 preview 6, confirmed it has fixed the issue.",
                                           "updatedAt":  "2025-07-26T15:40:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66Z-Zk",
                                           "createdAt":  "2025-07-28T13:58:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@janvorli @mikem8361 https://github.com/dotnet/runtime/pull/110379 for https://github.com/dotnet/runtime/issues/109779 is what likely fixes the bug: looks simple enough to back-port to .NET 9 so that customers do not have to worry about  workarounds.\nThe reproduction is available so it is going to be easy to validate if the fix works.",
                                           "updatedAt":  "2025-07-28T19:13:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc666ADW",
                                           "createdAt":  "2025-07-30T10:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 please ask the team to decide whether this is going to be fixed by porting back from .net 10 preview. This is a deal or no deal regarding .net 9 for us: disabling crash dumps is not a nice option and changing the build process is risky and looks unnecessary if it can be addressed in the framework. Thank you.",
                                           "updatedAt":  "2025-07-30T10:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc669ylP",
                                           "createdAt":  "2025-07-30T15:06:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcgh_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "baal2000",
                                                                               "createdAt":  "2025-07-30T15:08:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Adding @steveisok @tommcdon since this was fixed via https://github.com/dotnet/runtime/pull/110379. We will evaluate porting to 9. Thx. ",
                                           "updatedAt":  "2025-07-30T15:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc691PGE",
                                           "createdAt":  "2025-08-13T17:36:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@steveisok @tommcdon do you see any concerns of back porting the fix to 9? ",
                                           "updatedAt":  "2025-08-13T17:36:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AMnrb",
                                           "createdAt":  "2025-08-26T14:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 @steveisok @tommcdon what is your expert opinion regarding fixing .net 9? ",
                                           "updatedAt":  "2025-08-26T14:57:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cv-KD",
                                           "createdAt":  "2025-09-08T18:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ladeak",
                                           "body":  "What does the backport mean usually? It is expected in the next 9.0.x release? Maybe already in 3 days?",
                                           "updatedAt":  "2025-09-08T18:07:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CwZj4",
                                           "createdAt":  "2025-09-08T18:38:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEha3RA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ladeak",
                                                                               "createdAt":  "2025-09-09T05:46:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Yeah once the back port PR merges is should have the version added to it, It will most likely be the October servicing release 9.0.10. ",
                                           "updatedAt":  "2025-09-08T18:38:12Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  ".NET 9 Process Fails To Terminate after Unhandled Exception when running as PID 1 in Docker with Crash Dump enabled",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118218",
        "createdAt":  "2025-07-30T21:28:59Z",
        "number":  118218,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-07T16:40:17Z",
        "body":  "### Repro\n\nCompiler and run on .NET 10:\n```\nM(1);\n\nvoid M(int x)\n{\n   Console.WriteLine(x);\n   M(x+1);\n   Console.WriteLine(x);\n}\n```\n\n### Actual result\n\nVery long stacktrace with `at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)` repeated thousands of  time\n\n### Expected result\n\nThe repeating part of the stacktrace is eliminated, like:\n```\nStack overflow.\n....\nRepeated 24121 times:\n--------------------------------\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n--------------------------------\n   at Program.\u003cMain\u003e$(System.String[])\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvKWYGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68o-wH",
                                           "createdAt":  "2025-08-07T16:08:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "assume this is a regression in 10? ",
                                           "updatedAt":  "2025-08-07T16:08:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68pV14",
                                           "createdAt":  "2025-08-07T16:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "No, this has nothing to do with .NET 10.\nThe pretty printing can only handle case when the repeated sequence of frames is at the top of the stack trace. But in this case, the top of the stack looks like this:\n```\nStack overflow.\n   at Interop+Kernel32.WideCharToMultiByte(UInt32, UInt32, Char*, Int32, Byte*, Int32, Byte*, BOOL*)\n   at System.IO.StreamWriter.Flush(Boolean, Boolean)\n   at System.IO.StreamWriter.Write(System.String)\n   at System.IO.TextWriter.WriteLine(Int32)\n   at System.IO.TextWriter+SyncTextWriter.WriteLine(Int32)\n   at System.Console.WriteLine(Int32)\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n   at Program.\u003c\u003cMain\u003e$\u003eg__M|0_0(Int32)\n```\nIt was always like this.\n\nI\u0027ll try to think about possible ways to improve it while still keeping reasonable time complexity.",
                                           "updatedAt":  "2025-08-07T16:35:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68pZgb",
                                           "createdAt":  "2025-08-07T16:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok, if not a regression we can move to 11 then. ",
                                           "updatedAt":  "2025-08-07T16:40:14Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Pretty printing of stackoverflow stacktrace does not always work",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118823",
        "createdAt":  "2025-08-17T17:48:44Z",
        "number":  118823,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPaUoA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "filipnavara",
                                            "createdAt":  "2025-08-17T19:04:38Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "lindexi",
                                            "createdAt":  "2025-08-19T00:50:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "rabuckley",
                                            "createdAt":  "2025-09-09T18:03:43Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-09-10T21:14:11Z",
        "body":  "This experience seems to be new. I wrote a test app with an intentional crash scenario to test something. This is what I saw. Not a problem, just (A) is this new?, and (B) FYI.\n\n\u003cimg width=\"1025\" height=\"746\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/df45e7da-81a8-45f8-8434-a2f906091ee1\" /\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw0yIbg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-ag7R",
                                           "createdAt":  "2025-08-17T20:06:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "This looks like the Swift crash handler. https://www.swift.org/blog/swift-5.9-backtraces/\n\nThe post goes on to say that the debugger is off by default for macOS, maybe they turned it on by default in macOS 26.\n\nIf we don\u0027t like it I suppose we could set environment variable SWIFT_BACKTRACE to `enable=no` on start up, if the environment variable is unset. That way folks can turn it on if they want.",
                                           "updatedAt":  "2025-08-17T20:06:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-ahzS",
                                           "createdAt":  "2025-08-17T20:13:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "From [Apple\u0027s docs](https://github.com/swiftlang/swift/blob/main/docs/Backtracing.rst):\n\n\u003e Note that the runtime will not install its signal handlers for a signal if it finds that there is already a handler for that signal. Similarly if something else has already configured an alternate signal stack, it will leave that stack alone.\n\nThis is interesting and I wonder if Apple\u0027s exception handling will collide with our own, since it mentions configuring alternate stacks.\n\ncc @janvorli \n",
                                           "updatedAt":  "2025-08-17T20:13:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mcOq",
                                           "createdAt":  "2025-08-18T17:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "@hoyosjs @steveisok ",
                                           "updatedAt":  "2025-08-18T23:37:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mvkf",
                                           "createdAt":  "2025-08-18T17:33:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "FYI: I am now one beta build back. Another came out (I think) last week. I\u0027m in the middle of a project and have been delaying upgrading until I get to a clean spot (and can push my changes). It\u0027s _possible_ that the beheavior changes in the next build. perhaps someone else has that installed.",
                                           "updatedAt":  "2025-08-18T17:33:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-myiD",
                                           "createdAt":  "2025-08-18T17:38:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "For kicks, this is the code I was running: https://gist.github.com/richlander/d5f8cf2b6fb0fce45a336a387c3858ff",
                                           "updatedAt":  "2025-08-18T17:38:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-pXTO",
                                           "createdAt":  "2025-08-18T21:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "I can reproduce this on Preview 7. Any second change managed exception causes it. A simple 1-line program:\n\n```C#\nthrow new Exception(\"hello!\");\n```\n\nWill invoke the Swift debugger.\n\nThis is with .NET 10 preview 7 and macOS 26 preview 7. I am not using a debug build of the runtime.\n\nDoing `SWIFT_BACKTRACE=\"enable=no\" dotnet run` does indeed disable the swift backtrace handler.",
                                           "updatedAt":  "2025-08-18T21:43:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-pb_G",
                                           "createdAt":  "2025-08-18T21:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@jkotas / @agocke Where in the product would we go about disabling this by default? I presume we\u0027d need to introduce our own ENV var to disable us disabling it too.",
                                           "updatedAt":  "2025-08-18T21:51:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qAQo",
                                           "createdAt":  "2025-08-18T23:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e Where in the product would we go about disabling this by default?\n\nI don\u0027t know how easy this is to do by environment variable. This needs to be done very early in application startup - before the managed `Main`. I can\u0027t disable it programmatically from my own program.",
                                           "updatedAt":  "2025-08-18T23:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qKAp",
                                           "createdAt":  "2025-08-18T23:36:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "FYI: I believe this is ship-stopper issue.",
                                           "updatedAt":  "2025-08-18T23:36:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qKpP",
                                           "createdAt":  "2025-08-18T23:38:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The documentation in the Swift repo says https://github.com/swiftlang/swift/blob/main/docs/Backtracing.rst#macos : \"The backtracer is not active by default on macOS.\". Is there any public documentation about the defaults changing in macOS 26?\n\nWe should have a discussion with somebody from Apple first before we do anything.\n\nI expect that .NET is not the only environment affected by this. Can you check what the experience is like for unhandled exceptions in other languages on the latest macOS preview?",
                                           "updatedAt":  "2025-08-18T23:38:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qT-_",
                                           "createdAt":  "2025-08-18T23:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEetuQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lindexi",
                                                                               "createdAt":  "2025-08-19T00:54:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e Is there any public documentation about the defaults changing in macOS 26?\n\nI don\u0027t see any.\n\n\u003e Can you check what the experience is like for unhandled exceptions in other languages on the latest macOS preview?\n\nA standard C program and ruby do not exhibit this. e.g. for Ruby:\n\n```ruby\nProcess.kill(\u0027ABRT\u0027, Process.pid)\n```\n\nand for C\n\n```c\n#include \u003cstdlib.h\u003e\n\nint main(void) {\n    abort();\n    return 1;\n}\n```\n\nWill cause a SIGABRT but the Swift backtrace handler will not kick in. A NULL dereference won\u0027t do it either.\n\nIf I had to guess \"why\", it\u0027s because neither ruby nor my test C app link the Swift runtime. The .NET runtime does link the Swift runtime, and I suspect when the Swift runtime is loaded it installs its signal handlers.",
                                           "updatedAt":  "2025-08-19T00:00:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qUwu",
                                           "createdAt":  "2025-08-19T00:02:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "@hoyosjs suggested that \"debug entitlement\" could another angle.",
                                           "updatedAt":  "2025-08-19T00:02:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qiOj",
                                           "createdAt":  "2025-08-19T00:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leecow",
                                           "body":  "Additional data point - I can repro with the macOS Beta released today (25A5346a) and .NET 10 RC1.",
                                           "updatedAt":  "2025-08-19T00:35:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-q6QG",
                                           "createdAt":  "2025-08-19T01:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "Okay. I did some digging and it apparently has nothing to do with macOS 26. This is a regressing in .NET 10 and affects all macOS versions.\n\nThis is the issue occurring on a non-beta macOS 15.6.\n\n\u003cimg width=\"1423\" height=\"593\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/32e2e4c0-a324-416d-8170-bfb0403dd271\" /\u003e\n\nBisecting.",
                                           "updatedAt":  "2025-08-19T01:32:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-q6hX",
                                           "createdAt":  "2025-08-19T01:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhiN-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2025-08-19T03:04:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-08-21T18:18:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rabuckley",
                                                                               "createdAt":  "2025-09-09T18:10:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "As an additional point to \"This is new in .NET 10\", I can _not_ reproduce with .NET 8 or .NET 9 on macOS 26 beta.",
                                           "updatedAt":  "2025-08-19T01:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-q7f-",
                                           "createdAt":  "2025-08-19T01:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I don\u0027t know how easy this is to do by environment variable. This needs to be done very early in application startup - before the managed `Main`.\n\nPresumably the corehost could set it before the Swift runtime gets loaded?\n\n\u003e [@hoyosjs](https://github.com/hoyosjs) suggested that \"debug entitlement\" could another angle.\n\nI think it\u0027s enabled by default if the debug entitlement is set and the app is a console app.\n\n\u003e Okay. I did some digging and it apparently has nothing to do with macOS 26. This is a regressing in .NET 10 and affects all macOS versions.\n\nThat\u0027s interesting. I was wondering about that since the code in the Swift runtime exists there for about 2 years (https://github.com/swiftlang/swift/blob/46677a53f5bbdf4e9d04725985a5ddd5aff0f399/stdlib/public/runtime/Backtrace.cpp#L326).\n",
                                           "updatedAt":  "2025-08-19T01:36:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-rGni",
                                           "createdAt":  "2025-08-19T02:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "~Regression is somewhere between .NET 10 preview 6 and .NET 10 preview 7.~\n\nUnfortunately git bisect is being a little difficult because the tags are not decedents.",
                                           "updatedAt":  "2025-08-19T14:06:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-rbqf",
                                           "createdAt":  "2025-08-19T03:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Related?\n\n- https://github.com/dotnet/runtime/pull/118120\n- https://github.com/dotnet/diagnostics/pull/5530\n\nI noticed those changes were backported to servicing. If this is the issue, then the backports are a concern.",
                                           "updatedAt":  "2025-08-19T03:09:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-v8oL",
                                           "createdAt":  "2025-08-19T10:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Related?\n\nNo. Already happens at e9dd250942d329658df303ca4bf9a8e42ac4c9fc before the PRs above were merged.\n\nUPD: Happens locally at 4afdf63044be77d9256a0a62adc0a3f61f343b7f (last commit on `main` on Apr 30, 2025). That\u0027s very long time before the Preview 6 snap. However, I confirmed that the official builds of P6 don\u0027t exhibit the behavior and official builds of P7 do. Was there some Xcode version bump on the build machines between P6 and P7?\n\nUPD2: The build tool versions look identical on the downloaded binaries:\n```\n-- .NET 10 Preview 6\n      cmd LC_BUILD_VERSION\n  cmdsize 32\n platform 1\n    minos 12.0\n      sdk 14.5\n   ntools 1\n     tool 3\n  version 1053.12\n\n-- .NET 10 Preview 7\n      cmd LC_BUILD_VERSION\n  cmdsize 32\n platform 1\n    minos 12.0\n      sdk 14.5\n   ntools 1\n     tool 3\n  version 1053.12\n```",
                                           "updatedAt":  "2025-08-19T11:58:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-xY7f",
                                           "createdAt":  "2025-08-19T12:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I built the `v10.0.0-preview.6.25358.103` tag of dotnet/runtime locally with `./build.sh clr+libs+libs.pretest` (ie. Debug build) and run `./artifacts/bin/testhost/net10.0-osx-Debug-arm64/dotnet ~/extest/bin/Debug/net10.0/extest.dll`. It ends with the Swift debugger running.\n\nRunning the same executable with the downloaded SDK - `~/Downloads/dotnet-sdk-10.0.100-preview.6.25358.103-osx-arm64/dotnet ~/extest/bin/Debug/net10.0/extest.dll` - doesn\u0027t end up in the Swift debugger.\n\nIt seems like bisecting this is not going to work.",
                                           "updatedAt":  "2025-08-19T12:46:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-xyoq",
                                           "createdAt":  "2025-08-19T13:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "@filipnavara I wonder if it\u0027s the bootstrapped SDK that is used to build the runtime itself.\n\nI recall somewhere we added entitlement preserving. I wonder if the testhost is getting new entitlements.\n\nCan you compare the entitlements of the official builds of p6 and p7? (I will when I get back in front of a computer)",
                                           "updatedAt":  "2025-08-19T13:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-x7H3",
                                           "createdAt":  "2025-08-19T13:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I already compared the entitlements of P6 and P7 official builds and they were identical.",
                                           "updatedAt":  "2025-08-19T13:24:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-ydHE",
                                           "createdAt":  "2025-08-19T14:01:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "I checked out the `v9.0.7` tag and built it locally and it _still_ reproduces. Using\n\n```C#\nSystem.Console.WriteLine(System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription);\nthrow new System.Exception(\"Hi\");\n```\n\n\u003cimg width=\"1065\" height=\"255\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ac9150c6-0e24-4a44-b20a-11357538f238\" /\u003e\n\nI think it is fair to say this is caused by something external.",
                                           "updatedAt":  "2025-08-19T14:01:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-yehv",
                                           "createdAt":  "2025-08-19T14:03:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I think it is fair to say this is caused by something external.\n\nAgreed. It suddenly stopped happening to me even on .NET 10 P7.",
                                           "updatedAt":  "2025-08-19T14:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-ysOQ",
                                           "createdAt":  "2025-08-19T14:16:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Does Apple OSes have a crash reporting system that phones home like [Windows Error Reporting](https://learn.microsoft.com/en-us/troubleshoot/windows-client/system-management-components/windows-error-reporting-diagnostics-enablement-guidance)? Windows Error Reporting sends back instructions what to tell user. For example, it can recommend installing a graphics driver patch or ask a question. If Apple has one of these too and the backend is misbehaving, it can explain what we are seeing. ",
                                           "updatedAt":  "2025-08-19T14:16:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-yxM1",
                                           "createdAt":  "2025-08-19T14:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e Does Apple OSes have a crash reporting system that phones home like [Windows Error Reporting](https://learn.microsoft.com/en-us/troubleshoot/windows-client/system-management-components/windows-error-reporting-diagnostics-enablement-guidance)? Windows Error Reporting sends back instructions what to tell user.\n\nIt does. But I don\u0027t see that being invoked here.\n\n\u003e  If Apple has one of these too and the backend is misbehaving, it can explain what we are seeing\n\nPerhaps. It would be difficult to explain why it does not happen on p6, but does happen on p7. But also happens on p6 (or any other build) when built locally.\n",
                                           "updatedAt":  "2025-08-19T14:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-zLT2",
                                           "createdAt":  "2025-08-19T14:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Agreed. It suddenly stopped happening to me even on .NET 10 P7.\n\nI tried to force enable the support by `SWIFT_BACKTRACE=\"enable=yes,interactive=yes\"` and now it prints \n`swift runtime: backtrace-on-crash is not supported for privileged executables.`\n\nSuddenly the very same .NET 10 Preview 7 executable is treated as privileged.\n\nI even tried deleting it and extracting everything from scratch, same result. I didn\u0027t use the machine today for anything else but this experiment.\n\nSo, magically it started to get different result from this [opaque check](https://github.com/swiftlang/swift/blob/46677a53f5bbdf4e9d04725985a5ddd5aff0f399/stdlib/public/runtime/Backtrace.cpp#L287-L298).",
                                           "updatedAt":  "2025-08-19T14:53:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-zXUr",
                                           "createdAt":  "2025-08-19T15:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "CSOps returns `PID: 37570 -\u003e Code Signing Status: 0x22011305 FLAGS: ; CS_VALID ; CS_GET_TASK_ALLOW ; CS_HARD ; CS_KILL ; CS_ENFORCEMENT ; CS_RUNTIME ; CS_NO_UNTRUSTED_HELPERS ; CS_SIGNED` for .NET 10 P7 where I do **NOT** get the backtrace.\n\nOn a local runtime build I get `PID: 37581 -\u003e Code Signing Status: 0x22000205 FLAGS: ; CS_VALID ; CS_GET_TASK_ALLOW ; CS_KILL ; CS_NO_UNTRUSTED_HELPERS ; CS_SIGNED`\n\nThe differrence is `CS_HARD ; CS_KILL ; CS_RUNTIME` and `CS_RUNTIME` would cause the Swift backtrace to be disabled. Normally I would expect the flag to be present only when [hardened runtime](https://developer.apple.com/documentation/security/hardened-runtime?language=objc) is enabled. I don\u0027t think the dotnet host itself normally enables hardened runtime though.",
                                           "updatedAt":  "2025-08-19T15:06:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-zi3J",
                                           "createdAt":  "2025-08-19T15:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "Potentially related? https://github.com/dotnet/runtime/pull/116476/\n\n",
                                           "updatedAt":  "2025-08-19T15:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CFAhf",
                                           "createdAt":  "2025-09-04T22:42:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "I finally upgraded my machine. It is now on Tahoe Beta 9. I still see the same crash handler. I\u0027m on .NET 10 P7. I also tried with a nightly RC2 branch build. Same thing.",
                                           "updatedAt":  "2025-09-04T22:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CG4Sx",
                                           "createdAt":  "2025-09-05T00:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEg_n4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2025-09-05T02:32:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "@richlander we believe this is unrelated to macOS 26. It repos on Sequoia with .NET 10P6+. Something changed in the build but no one has nailed down the exact cause.",
                                           "updatedAt":  "2025-09-05T00:16:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CK_b5",
                                           "createdAt":  "2025-09-05T09:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "\u003e Normally I would expect the flag to be present only when [hardened runtime](https://developer.apple.com/documentation/security/hardened-runtime?language=objc) is enabled. I don\u0027t think the dotnet host itself normally enables hardened runtime though.\n\nWe do sign the `dotnet` executable with hardened runtime in official builds: https://github.com/dotnet/runtime/blob/ed7ab3a12075cac5cdcb0daa18110796c74d48df/eng/Signing.props#L42-L44",
                                           "updatedAt":  "2025-09-05T09:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7COyak",
                                           "createdAt":  "2025-09-05T14:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "I think we\u0027re [past | at] the point where we need to drive this to ground. We\u0027re going to need to do some experiments (likely with signing) to root cause this difference. We\u0027re very close to release, as you all know. I\u0027ll ask for something to take this on.",
                                           "updatedAt":  "2025-09-05T14:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPEC6",
                                           "createdAt":  "2025-09-05T15:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Why isn\u0027t this issue showing up in CI?",
                                           "updatedAt":  "2025-09-05T15:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPHya",
                                           "createdAt":  "2025-09-05T15:18:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e \n\u003e We do sign the `dotnet` executable with hardened runtime in official builds:\n\u003e \n\u003e [runtime/eng/Signing.props](https://github.com/dotnet/runtime/blob/ed7ab3a12075cac5cdcb0daa18110796c74d48df/eng/Signing.props#L42-L44)\n\nFrom the \"hey, why not department\", can we run the official build on an x64 mac and see if there ends up being any difference? In fixing an unrelated debugger issue, I found what I can only amount to toolchain differences on arm64 where after trying a reasonable set of things, only cross building on x64 worked. ",
                                           "updatedAt":  "2025-09-05T15:18:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPLM4",
                                           "createdAt":  "2025-09-05T15:21:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "\"Why not department\" is definitely welcome. Claritying question ... do we need to run through signing/notarization to get full confirmation? Perhaps that\u0027s what you mean by \"Official build\".",
                                           "updatedAt":  "2025-09-05T15:21:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPYBI",
                                           "createdAt":  "2025-09-05T15:35:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e \"Why not department\" is definitely welcome. Claritying question ... do we need to run through signing/notarization to get full confirmation? Perhaps that\u0027s what you mean by \"Official build\".\n\nYeah, basically switch the pool to x64 and re-run the entire product build.",
                                           "updatedAt":  "2025-09-05T15:35:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPqOa",
                                           "createdAt":  "2025-09-05T16:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "I can reproduce this with `dotnet run` but not if I run the app directly with `dotnet bin/Debug/net10.0/app.dll`.\n\nProbably because of the TTY checks in https://github.com/swiftlang/swift/blob/aa3a0756f435a06b57b068972b64c3a3110ce2b4/stdlib/public/runtime/Backtrace.cpp#L355-L357 and https://github.com/swiftlang/swift/blob/aa3a0756f435a06b57b068972b64c3a3110ce2b4/stdlib/public/runtime/Backtrace.cpp#L406-L408\n\nIt also works if I do e.g. `dotnet run | echo`",
                                           "updatedAt":  "2025-09-05T16:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPskp",
                                           "createdAt":  "2025-09-05T16:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e Why isn\u0027t this issue showing up in CI?\n\nAs @akoeplinger pointed out, the Swift runtime automatically disables its backtrace handler when it doesn\u0027t detect a TTY (unless you force it to be on), and in CI I don\u0027t believe there is an active TTY.",
                                           "updatedAt":  "2025-09-05T16:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CP1DC",
                                           "createdAt":  "2025-09-05T16:16:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "so maybe this was always happening and something changed in how dotnet run runs the app?",
                                           "updatedAt":  "2025-09-05T16:16:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CP3Bi",
                                           "createdAt":  "2025-09-05T16:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e so maybe this was always happening\n\nNo, because if you install .NET 10 Preview 5 it doesn\u0027t reproduce. It does in P6.",
                                           "updatedAt":  "2025-09-05T16:20:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CP4a1",
                                           "createdAt":  "2025-09-05T16:21:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhMuAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2025-09-07T09:49:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e something changed in how dotnet run runs the app?\n\nOh I see. You are suggesting that maybe the host was set up in such a way that Swift thought there was no TTY.\n\nThat\u0027s possible.\n\n@filipnavara point out some differences with runtime hardening as well that could be the culprit.",
                                           "updatedAt":  "2025-09-05T16:21:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CbKFm",
                                           "createdAt":  "2025-09-06T11:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e From the \"hey, why not department\", can we run the official build on an x64 mac and see if there ends up being any difference? In fixing an unrelated debugger issue, I found what I can only amount to toolchain differences on arm64 where after trying a reasonable set of things, only cross building on x64 worked.\n\nI used a cross built runtime / host and it still crashed, so we can rule that out.\n\nSetting an env variable in the host seems like a viable workaround. Any preference or other suggestions?",
                                           "updatedAt":  "2025-09-06T11:20:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CeyyM",
                                           "createdAt":  "2025-09-06T18:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "I threw up a PR to start the discussion about the best way to band-aid this. Feel free to make suggestions / push commits.",
                                           "updatedAt":  "2025-09-06T18:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSQyF",
                                           "createdAt":  "2025-09-10T20:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "We pinged Apple about this and the swift backtrace handler running was an intentional change. The guidance they provided is to either have a dummy signal handler that just returns or set the `SWIFT_BACKTRACE` env variable to `enable=no`. They did say it was important to note that the environment variable is only checked on process startup (when the static initializers for the swift runtime execute). \n\nFor our case, it does not seem like there\u0027s any harm in using the environment variable. ",
                                           "updatedAt":  "2025-09-10T20:05:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSddz",
                                           "createdAt":  "2025-09-10T20:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e For our case, it does not seem like there\u0027s any harm in using the environment variable.\n\nOne noticeable issue would be custom hosting scenarios like Unity, since they\u0027d need to set the variable themselves since dotnet might only be loaded later on in program lifetime.",
                                           "updatedAt":  "2025-09-10T20:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DTIhu",
                                           "createdAt":  "2025-09-10T21:14:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhvkdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveisok",
                                                                               "createdAt":  "2025-09-10T21:48:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2025-09-10T22:45:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e One noticeable issue would be custom hosting scenarios like Unity, since they\u0027d need to set the variable themselves since dotnet might only be loaded later on in program lifetime.\n\nRegardless of environment variable or signal handler, it seems to me it needs to be something to host does. The host can set the environment variable (early) or it can set the signal handler. If the runtime attempts to set the signal handler or environment variable then it might be too late - the swift runtime will have already set up `BacktraceInitializer`.",
                                           "updatedAt":  "2025-09-10T21:14:11Z"
                                       }
                                   ],
                         "totalCount":  47
                     },
        "title":  "New crash handler in macOS?",
        "labels":  [
                       "os-mac-os-x",
                       "area-ExceptionHandling-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119731",
        "createdAt":  "2025-09-15T19:07:43Z",
        "number":  119731,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T19:07:43Z",
        "body":  "The method uses the following check:\nhttps://github.com/dotnet/runtime/blob/838491d0baf7922e159c2aafdf0c6b2859a86de2/src/libraries/System.Private.CoreLib/src/System/AppContext.cs#L116-L119\n\nHowever, this check is not correct and results in FailFast when a second thread tries to call this method. The `previousCrashingThreadId` is always the `s_crashingThreadId` for the second and following threads hitting this method. The correct check is to compare the `currentThreadId` with the `s_crashingThreadId`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Check for recursion in calls to AppContext.OnUnhandledException is incorrect",
        "labels":  [
                       "area-ExceptionHandling-coreclr"
                   ]
    }
]
