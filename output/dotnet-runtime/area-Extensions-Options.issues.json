[
    {
        "url":  "https://github.com/dotnet/runtime/issues/36001",
        "createdAt":  "2019-11-30T13:56:47Z",
        "number":  36001,
        "author":  "rcollina",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKDd5A==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-12-13T15:33:43Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "anvouk",
                                            "createdAt":  "2025-08-06T07:53:00Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-07T09:42:39Z",
        "body":  "Hello, as suggested in https://github.com/aspnet/AspNetCore.Docs/issues/15925 I’m opening a feature request.\r\n\r\nI need a way to obtain the list of names for a given option type.\r\n\r\nI haven’t found a workaround for this yet.\r\n\r\nThanks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcyKyiw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MDE4Njg5OA==",
                                           "createdAt":  "2020-01-02T11:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rcollina",
                                           "body":  "Hello,\r\nShould this feature request be moved to the Extensions repo for visibility?\r\n\r\n",
                                           "updatedAt":  "2020-01-02T11:53:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3OTAzMjMwOQ==",
                                           "createdAt":  "2020-01-28T01:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA6ERLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2020-01-28T06:27:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Pilchie",
                                           "body":  "Yes, sorry.  Transferred now.",
                                           "updatedAt":  "2020-01-28T01:09:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDQyMTE3MQ==",
                                           "createdAt":  "2020-01-30T19:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "The way Named Options works today doesn\u0027t really allow this. Any consumer of `IOptionsMonitor` can \"create\" a new name by simply retriving it. All the `IConfigureNamedOptions` in DI will run based on that name (most of them will no-op if nobody registered any configuration actions for that name). There is no central list of names.\r\n\r\nCan you expand a bit on *why* you need a list of possible named options?",
                                           "updatedAt":  "2020-01-30T21:48:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDQ0Njc5NQ==",
                                           "createdAt":  "2020-01-30T20:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rcollina",
                                           "body":  "Sure. Thank you.\r\n\r\nI wrote some libraries on top of existing drivers (RabbitMQ, MongoDB).\r\nI have some strongly typed Options classes in place.\r\n\r\nI’d like to run infrastructure configuration steps (routing topologies, or collections and indexes) for each registered option without forcing library consumers to repeat option names. Less friction. \r\n\r\nThings like health checks could also benefit from this - if you have an external dependency such as a message queue or a database you’d be checking for their statuses more often than not. You could opt out, of course.\r\n\r\nI don’t mind IOptionsMonitor creating new instances at runtime. I do however believe it’s not too far fetched to have an actionable list of option names, whatever the purpose, after the service provider has been built.\r\n",
                                           "updatedAt":  "2020-01-30T20:32:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzgyNzIwMg==",
                                           "createdAt":  "2020-06-02T21:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rcollina",
                                           "body":  "Hello,\nAny chance this can fit in the 5.0 release?",
                                           "updatedAt":  "2020-06-02T21:55:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzcxNDA0Nw==",
                                           "createdAt":  "2020-10-05T15:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Hey @rcollina, unfortunately we\u0027ve closed on new features for 5.0. We could consider this for 6.0 but need a more detail design spec. cc @HaoK ",
                                           "updatedAt":  "2020-10-05T15:39:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzcyMTUxOA==",
                                           "createdAt":  "2020-10-05T15:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "I\u0027m not sure this makes sense on the options monitor itself, but it might make sense on the cache interfaces, exposing a way to get the names of the already configured options instances.  ",
                                           "updatedAt":  "2020-10-05T15:52:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzgyMjg5NA==",
                                           "createdAt":  "2020-10-05T18:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOPbNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bhehe",
                                                                               "createdAt":  "2023-12-02T01:30:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rcollina",
                                           "body":  "Just to make sure I worded the requirement properly.\r\n\r\nI need the list of option names _before_ any named options instantiation happens. \r\n\r\nSo I can iterate over it and obtain the options instances for the reasons I mentioned in another comment.\r\n",
                                           "updatedAt":  "2020-10-05T18:53:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzgyNDg5Mw==",
                                           "createdAt":  "2020-10-05T18:57:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rcollina",
                                           "body":  "\u003e Hey @rcollina, unfortunately we\u0027ve closed on new features for 5.0. We could consider this for 6.0 but need a more detail design spec. cc @HaoK\r\n\r\nI understand there are items with a higher priority.\r\nIt’s been a while since I requested this feature, I’ll keep waiting.",
                                           "updatedAt":  "2020-10-05T18:57:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjU4NTgxNw==",
                                           "createdAt":  "2021-02-20T08:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rcollina",
                                           "body":  "Any chance this can be considered for 6.0?\n\nThank you.",
                                           "updatedAt":  "2021-02-20T08:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tfiln",
                                           "createdAt":  "2023-12-02T01:39:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bhehe",
                                           "body":  "I landed here looking for the same thing after spending some time trying to get something viable in place myself.\r\n\r\nI tried to leverage the ```IConfigureNamedOptions``` but found that it wasn\u0027t triggered until the named instance was requested so that blocks my need for a \u0027discovery-based\u0027 approach where I want to allow for (_n_) named instances to be registered by a contributor/plug-in type of implementation and then resolve them all (with being able to discover all of their names and it would even be desirable to know what configuration section they were bound to or other relevant metadata about the registration).\r\n\r\nI dug around looking for where the ```ValidateOnStartup``` code would know the list of named instances to target and validate but that didn\u0027t get me where I needed either. Being that I am not in a scenario where the Host model is in use (so no *.Hosting dependency here) I don\u0027t have the startup validation happening. All I have is the container being built and then at that point I guess I could make a call/bake something in homebrew - if I had the list of names. \r\n\r\nSo while this request is quite old now, the need is still there. So +1 from me.\r\n\r\nEven if the internals cannot be exposed to do this ourselves, simply offering something like an ```IOptionsMonitor.GetAll()``` would help;  It would be beneficial then if it returns something like an ```IDictionary\u003cstring, T\u003e``` so we know which instance contributed the value and could use that in any error-handling/logging/instance-name dependent logic.",
                                           "updatedAt":  "2023-12-02T01:39:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tk4a8",
                                           "createdAt":  "2023-12-04T10:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vandersteen",
                                           "body":  "I also have a need for this feature, I have a similar use case as stated above.\r\n\r\nI currently \u0027worked\u0027 around this by doing something like this:\r\n\r\n```\r\nservices.AddMyLibrary(\"name\", o =\u003e Configuration.Bind(o));\r\n```\r\n\r\n```\r\npublic class MyLibraryRegistrations\r\n{\r\n    public HashSet\u003cstring\u003e Registrations {get;} = new();\r\n}\r\n\r\n\r\npublic static void AddMyLibrary(this IServiceCollection services, string name, Action\u003c...\u003e config)\r\n{\r\n    service.AddOptions\u003cMyLibraryRegistrations\u003e()\r\n     .Configure(o =\u003e o.Registrations.Add(\"name\u0027));\r\n     \r\n     services.AddOptions\u003c...\u003e(name)\r\n      .Configure(o =\u003e config(o));\r\n}\r\n```\r\n\r\nI then fetch the list of options using the `IOptions\u003cMyLibraryRegistrations\u003e` and the specific options using the `IOptionsMonitor`",
                                           "updatedAt":  "2023-12-04T10:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tmGTl",
                                           "createdAt":  "2023-12-04T14:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bhehe",
                                           "body":  "Same here, I already had a helper method to implement my preferred \u0027recipe\u0027 for registering Options. What I found though was that when I did the wireup in the .Configure(..) method it wasn\u0027t getting hit until I fetched the named instances.  I needed to be able to know all of the registered names -before- any of them are requested/resolved. \r\n\r\nSo in my variant, I just have a \u0027registry\u0027 that I populate as part of the helper, without the .Configure(..) needed. \r\n\r\nFar from a preferred implementation, but I have it working and I now have a .GetAll() like method.",
                                           "updatedAt":  "2023-12-04T14:02:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zIjMx",
                                           "createdAt":  "2024-02-07T09:25:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfGjMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "byjokese",
                                                                               "createdAt":  "2024-04-22T15:43:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rcollina",
                                           "body":  "Hello @ViktorHofer, are you willing to accept PRs for this? \r\n\r\nI never contributed before to the dotnet repo, I figured this would be as good a time as any to start - please be _gentle_.",
                                           "updatedAt":  "2024-02-07T09:25:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zIrKL",
                                           "createdAt":  "2024-02-07T09:42:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODV1whg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2024-02-07T11:56:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "I\u0027m not the right person to respond here. Let me tag the area owners. @dotnet/area-extensions-options ",
                                           "updatedAt":  "2024-02-07T09:42:38Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Named options: list of names",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36009",
        "createdAt":  "2019-12-23T20:24:53Z",
        "number":  36009,
        "author":  "akilin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-13T04:36:36Z",
        "body":  "### Describe the bug\nApp was unable to resolve IWebHostEnvironment from ValidationContext when validating options with custom Required attribute inside Configure method.\n\n### To Reproduce\n\nIWebHostEnvironment not resolving, when trying to create a custom validation attribute to make something required only in Production environment.\n\nRelevant code snippets\n``` C#\n    public class DemoOptions\n    {\n        [RequiredInProd]\n        public string FooBar { get; set; }\n    }\n\n    public class RequiredInProd : RequiredAttribute\n    {\n        protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n        {\n            //this errors\n            var env = validationContext.GetRequiredService\u003cIWebHostEnvironment\u003e();\n            return ValidationResult.Success;\n        }\n    }\n//Startup.cs methods\npublic void ConfigureServices(IServiceCollection services)\n        {\n            services.AddOptions\u003cDemoOptions\u003e()\n                .Bind(Configuration.GetSection(nameof(DemoOptions)))\n                .ValidateDataAnnotations();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            //this line works fine and IWebHostEnvironment is resolved.\n            var envFromServices = app.ApplicationServices.GetRequiredService\u003cIWebHostEnvironment\u003e();\n            //this errors when trying to resolve IWebHostEnvironment inside Attribute methods\n            _ = app.ApplicationServices.GetRequiredService\u003cIOptions\u003cDemoOptions\u003e\u003e().Value;\n        }\n\n\n```\n\n--\u003e\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVEpP0w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTc4NzkxNw==",
                                           "createdAt":  "2019-12-30T20:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "This looks like a feature request. Options validation does not wire up the application\u0027s service provider which explains why this doesn\u0027t work.",
                                           "updatedAt":  "2019-12-30T20:30:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USk_T",
                                           "createdAt":  "2023-02-02T18:06:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bordecal",
                                           "body":  "+1 for wiring up the service provider in `DataAnnotationValidateOptions`",
                                           "updatedAt":  "2023-02-02T18:06:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Unable to resolve IWebHostEnvironment from ValidationContext when validating options with custom Required attribute inside Configure method",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36036",
        "createdAt":  "2020-03-16T15:13:18Z",
        "number":  36036,
        "author":  "Kahbazi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-06T00:01:24Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI\u0027m adding an Options class without direct dependency to `Configuration` and I would like to be able to reload the option.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAdd an extension method for `OptionsBuilder` which binds a reload token to the options.\r\n\r\n```csharp\r\nReloadWith\u003cTOptions\u003e(this OptionsBuilder\u003cTOptions\u003e optionsBuilder, Action\u003cIChangeToken\u003e changeTokenCreator)\r\n```\r\n\r\nAlso this method could be added to `ConfigurationExtensions` package\r\n```csharp\r\nReloadWith\u003cTOptions\u003e(this OptionsBuilder\u003cTOptions\u003e optionsBuilder, IConfiguration config)\r\n```\r\n\r\n\r\nWith this method I can use the reload token of my configuration to reload `MyOptions`.\r\n```csharp\r\nservices.AddOptions\u003cMyOptions\u003e().Configure\u003cSomeDependency\u003e((option, dependency) =\u003e\r\n{\r\n// fill the options\r\n})\r\n.ReloadWith(_configuration);\r\n```\r\n\r\n### Describe alternatives you\u0027ve considered\r\nRegister the change token with this code.\r\n\r\n```csharp\r\nservices.AddSingleton\u003cIOptionsChangeTokenSource\u003cMyOptions\u003e\u003e(new ConfigurationChangeTokenSource\u003cMyOptions\u003e(Options.DefaultName, _configuration));\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY1b_7w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTUyMzg1NQ==",
                                           "createdAt":  "2020-05-07T22:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T22:13:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jVv_v",
                                           "createdAt":  "2023-08-06T00:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kmcclellan",
                                           "body":  "The configuration change token is specific to your configuration sources (`appsettings.json`). If options don\u0027t utilize `IConfiguration`, I\u0027m not sure why you would want to bind them to the configuration reload token.\r\n\r\nAn extension method to provide a custom change token factory is not a bad idea. However, it\u0027s already possible to implement your own `IConfigurationChangeTokenSource\u003cTOptions\u003e`. Just add it to the container as a singleton.\r\n\r\n```csharp\r\nusing HelloChangeToken;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Options;\r\nusing Microsoft.Extensions.Primitives;\r\n\r\nvar services = new ServiceCollection();\r\nvar language = \"en-US\";\r\nvar darkMode = false;\r\n\r\nservices.Configure\u003cChangingOptions\u003e(\r\n    opts =\u003e\r\n    {\r\n        opts.Language = language;\r\n        opts.DarkMode = darkMode;\r\n    });\r\n\r\nservices.AddSingleton\u003cManualChangeToken\u003e()\r\n    .AddSingleton\u003cIOptionsChangeTokenSource\u003cChangingOptions\u003e, ManualOptionsChangeTokenSource\u003cChangingOptions\u003e\u003e();\r\n\r\nawait using var provider = services.BuildServiceProvider();\r\n\r\nvar monitor = provider.GetRequiredService\u003cIOptionsMonitor\u003cChangingOptions\u003e\u003e();\r\n\r\nConsole.WriteLine(new { monitor.CurrentValue.Language, monitor.CurrentValue.DarkMode });\r\n\r\nlanguage = \"zh-CN\";\r\ndarkMode = true;\r\n\r\n// Comment out and the options will not update.\r\nprovider.GetRequiredService\u003cManualChangeToken\u003e().Trigger();\r\n\r\nConsole.WriteLine(new { monitor.CurrentValue.Language, monitor.CurrentValue.DarkMode });\r\n\r\n\r\nnamespace HelloChangeToken\r\n{\r\n    public class ChangingOptions\r\n    {\r\n        public string? Language { get; set; }\r\n\r\n        public bool DarkMode { get; set; }\r\n    }\r\n\r\n    sealed class ManualOptionsChangeTokenSource\u003cTOptions\u003e : IOptionsChangeTokenSource\u003cTOptions\u003e\r\n    {\r\n        private readonly ManualChangeToken _token;\r\n\r\n        public ManualOptionsChangeTokenSource(ManualChangeToken token)\r\n        {\r\n            _token = token;\r\n        }\r\n\r\n        public string? Name =\u003e Options.DefaultName;\r\n\r\n        public IChangeToken GetChangeToken()\r\n        {\r\n            return _token.Value;\r\n        }\r\n    }\r\n\r\n    sealed class ManualChangeToken : IDisposable\r\n    {\r\n        CancellationTokenSource _source = new();\r\n\r\n        public IChangeToken Value =\u003e new CancellationChangeToken(_source.Token);\r\n\r\n        public void Trigger()\r\n        {\r\n            // Have to refresh source before triggering, since monitor will get a new token when triggered.\r\n            var triggering = _source;\r\n            _source = new();\r\n\r\n            triggering.Cancel();\r\n            triggering.Dispose();\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            _source.Dispose();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"7.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Options\" Version=\"7.0.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```\r\n{ Language = en-US, DarkMode = False }\r\n{ Language = zh-CN, DarkMode = True }\r\n```",
                                           "updatedAt":  "2023-08-06T00:01:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Feature Request] Add Change Token to Options That Are Not Bind To Configuration",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42358",
        "createdAt":  "2020-09-17T01:52:49Z",
        "number":  42358,
        "author":  "weichch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCx1uWg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FiniteReality",
                                            "createdAt":  "2020-09-17T06:52:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bart-vmware",
                                            "createdAt":  "2023-08-09T12:47:14Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-09T12:47:57Z",
        "body":  "## Background and Motivation\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\n`ConfigureOptions()` method in `Microsoft.Extensions.Options` is often used by library authors who need to add their own types to configure options. \r\n\r\nCurrently the method uses `AddTransient` internally when adding each of the `IConfigureOptions\u003c\u003e`, `IPostConfigureOptions\u003c\u003e`, and `IValidateOptions\u003c\u003e` found. This often can lead to a problem where if the `ConfigureOptions()` method gets called more than once, the configure services will be registered more than once, therefore the options type will be configured more than once when resolving `IOptions\u003cT\u003e.Value`.\r\n\r\nThe current workaround is adding types manually using `TryAddEnumerable` method against each interface types instead of `ConfigureOptions`. It would be great if we could have new APIs equivalent  to `ConfigureOptions()` but uses `TryAddEnumerable` internally, so that the configure method in custom libraries could look a lot nicer.\r\n\r\n## Proposed API\r\n\r\n\u003c!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\n```diff\r\nnamespace System.Collections.Generic\r\n{\r\n-    public class HashSet\u003cT\u003e : ICollection\u003cT\u003e, ISet\u003cT\u003e {\r\n+    public class HashSet\u003cT\u003e : ICollection\u003cT\u003e, ISet\u003cT\u003e, IReadOnlySet\u003cT\u003e {\r\n     }\r\n```\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n--\u003e\r\n\r\n```csharp\r\npublic static IServiceCollection TryConfigureOptions\u003cT\u003e(this IServiceCollection services)\r\n    where T : class\r\n{\r\n    return services.TryConfigureOptions(typeof(T));\r\n}\r\n\r\npublic static IServiceCollection TryConfigureOptions\u003cT\u003e(this IServiceCollection services, Type configureType)\r\n    where T : class\r\n{\r\n    services.AddOptions();\r\n    IEnumerable\u003cType\u003e enumerable = FindConfigurationServices(configureType);\r\n    foreach (Type item in enumerable)\r\n    {\r\n        // Use TryAddEnumerable here\r\n        services.TryAddEnumerable(ServiceDescriptor.Describe(\r\n            item,\r\n            configureType,\r\n            ServiceLifetime.Transient));\r\n    }\r\n    return services;\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n\u003c!--\r\nPlease provide code examples that highlight how the proposed API additions are meant to be consumed.\r\nThis will help suggest whether the API has the right shape to be functional, performant and useable.\r\nYou can use code blocks like this:\r\n``` C#\r\n// some lines of code here\r\n```\r\n--\u003e\r\n\r\n```csharp\r\nservices.TryConfigureOptions\u003cConfigureMyOptions\u003e();\r\nservices.TryConfigureOptions(typeof(ConfigureMyOptions));\r\n\r\npublic class ConfigureMyOptions \r\n    : IConfigureOptions\u003cMyOptions\u003e,\r\n    IPostConfigureOptions\u003cMyOptions\u003e,\r\n    IValidateOptions\u003cMyOptions\u003e\r\n{\r\n    public void Configure(MyOptions options)\r\n    {\r\n    }\r\n\r\n    public void PostConfigure(string name, MyOptions options)\r\n    {\r\n    }\r\n\r\n    public ValidateOptionsResult Validate(string name, MyOptions options)\r\n    {\r\n        return ValidateOptionsResult.Success;\r\n    }\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY510nA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mzc1OTgwNw==",
                                           "createdAt":  "2020-09-17T01:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-09-17T01:52:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NDI5OTAyMg==",
                                           "createdAt":  "2020-09-17T15:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-17T15:05:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Njk2NDc3MA==",
                                           "createdAt":  "2020-09-22T20:35:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@maryamariyan @ViktorHofer @haok @davidfowl for discussion",
                                           "updatedAt":  "2020-09-22T20:35:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NzAxNTk3Ng==",
                                           "createdAt":  "2020-09-22T22:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzkYOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-07-22T20:23:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Just to make sure I understand the scenario, since libraries might end up having `services.ConfigureOptions\u003cT\u003e` called more than once on the same T, the configurations in T may run multiple times.  And this new TryConfigureOptions is what libraries should to ensure that their options setup only runs once.  That seems reasonable to me if I understand the intent correctly...",
                                           "updatedAt":  "2020-09-22T22:29:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NzAzMDQ5OA==",
                                           "createdAt":  "2020-09-22T23:13:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weichch",
                                           "body":  "@HaoK Yes, that\u0027s what I\u0027m trying to propose. Even in some Microsoft libraries `TryAddEnumerable` is used to avoid running configuration for T more than once, like this [example](https://github.com/dotnet/aspnetcore/blob/master/src/Azure/AzureAD/Authentication.AzureAD.UI/src/AzureADAuthenticationBuilderExtensions.cs#L123).",
                                           "updatedAt":  "2020-09-22T23:13:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q_yH3",
                                           "createdAt":  "2022-12-20T06:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mburumaxwell",
                                           "body":  "Any hopes on this?\r\n@HaoK is this an area for which you accept contributions?",
                                           "updatedAt":  "2022-12-20T06:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jnXSc",
                                           "createdAt":  "2023-08-09T12:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bart-vmware",
                                           "body":  "Running into this as well, a fix would be greatly appreciated.",
                                           "updatedAt":  "2023-08-09T12:47:57Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "New ConfigureOptions APIs that use TryAddEnumerable",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43359",
        "createdAt":  "2020-10-13T15:27:05Z",
        "number":  43359,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC07IJA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JanEggers",
                                            "createdAt":  "2020-10-15T05:46:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christiannagel",
                                            "createdAt":  "2020-10-15T15:01:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "seangwright",
                                            "createdAt":  "2020-11-10T23:34:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loraderon",
                                            "createdAt":  "2020-11-11T08:04:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DillonN",
                                            "createdAt":  "2020-12-03T03:25:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iSeiryu",
                                            "createdAt":  "2020-12-21T20:46:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dm-CaT",
                                            "createdAt":  "2021-01-10T15:57:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IEvangelist",
                                            "createdAt":  "2021-01-21T18:07:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neoGeneva",
                                            "createdAt":  "2021-02-17T02:24:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SGStino",
                                            "createdAt":  "2021-03-03T16:02:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Arithmomaniac",
                                            "createdAt":  "2021-05-20T09:51:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2021-06-06T17:59:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Yakimych",
                                            "createdAt":  "2021-06-13T19:03:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AgentFire",
                                            "createdAt":  "2021-06-22T11:37:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "georg-jung",
                                            "createdAt":  "2021-07-21T14:36:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skynode",
                                            "createdAt":  "2021-08-19T12:01:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tanveerbadar",
                                            "createdAt":  "2021-09-25T11:58:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmaillet",
                                            "createdAt":  "2021-10-17T22:09:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2021-11-03T12:19:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JohnLBevan",
                                            "createdAt":  "2021-11-06T00:52:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulrichb",
                                            "createdAt":  "2021-12-07T13:54:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "peteraritchie",
                                            "createdAt":  "2021-12-10T16:01:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abiratur",
                                            "createdAt":  "2021-12-15T20:22:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Oblomoff",
                                            "createdAt":  "2022-01-25T14:02:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Balfa",
                                            "createdAt":  "2022-02-25T16:39:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michaelestermann",
                                            "createdAt":  "2022-03-17T09:03:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scalablecory",
                                            "createdAt":  "2022-04-30T00:45:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nellsn",
                                            "createdAt":  "2022-06-29T00:02:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "momvart",
                                            "createdAt":  "2022-07-05T08:34:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daiplusplus",
                                            "createdAt":  "2022-08-13T14:36:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jernejg",
                                            "createdAt":  "2022-10-15T23:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Prunkles",
                                            "createdAt":  "2022-11-06T22:43:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eeskildsen",
                                            "createdAt":  "2022-12-16T13:38:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2022-12-24T06:05:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduardomezencio",
                                            "createdAt":  "2023-02-03T12:11:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndrewBoklashko",
                                            "createdAt":  "2023-02-17T23:52:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2023-05-03T09:31:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DemoBytom",
                                            "createdAt":  "2023-07-16T11:50:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MitchRazga",
                                            "createdAt":  "2023-07-28T16:25:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViIvanov",
                                            "createdAt":  "2023-09-26T09:27:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CyberAndrii",
                                            "createdAt":  "2023-10-17T13:04:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T12:01:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mykhailok01",
                                            "createdAt":  "2023-11-14T22:21:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trevorgray",
                                            "createdAt":  "2023-11-19T09:34:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mitoihs",
                                            "createdAt":  "2023-11-29T13:05:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nicholass-alcidion",
                                            "createdAt":  "2023-12-21T03:40:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marekchovanec",
                                            "createdAt":  "2023-12-22T12:29:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aelij",
                                            "createdAt":  "2023-12-30T13:18:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2024-01-01T12:59:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vit-svoboda",
                                            "createdAt":  "2024-01-02T18:00:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batkaevruslan",
                                            "createdAt":  "2024-01-19T08:24:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexandraKim",
                                            "createdAt":  "2024-01-20T04:28:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienwareone",
                                            "createdAt":  "2024-02-15T16:35:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bugproof",
                                            "createdAt":  "2024-03-22T18:03:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MGRatEJOT",
                                            "createdAt":  "2024-04-23T17:20:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CaringDev",
                                            "createdAt":  "2024-06-04T14:28:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lvde0",
                                            "createdAt":  "2024-07-10T14:40:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DvdKhl",
                                            "createdAt":  "2024-07-24T08:39:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariusz96",
                                            "createdAt":  "2024-07-25T12:44:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamjones2",
                                            "createdAt":  "2024-09-17T09:02:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OliverStevens-Mitel",
                                            "createdAt":  "2024-10-04T15:09:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2025-01-12T11:18:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-01-30T14:17:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "radverg",
                                            "createdAt":  "2025-04-02T15:15:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamgauthier",
                                            "createdAt":  "2025-04-17T06:07:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ohlus",
                                            "createdAt":  "2025-05-15T15:15:45Z"
                                        }
                                    ],
                          "totalCount":  66
                      },
        "updatedAt":  "2025-01-30T06:24:23Z",
        "body":  "Today the `IOptions\u003cTOptions\u003e` pattern is built around the mutability of the `TOptions` until first use (though nothing prevents later mutation). We should investigate what it would mean to consume immutable `TOptions` in the options system. Today, the system constructs `TOptions` using `Activator.CreateInstance` then executes a series of delegates on top of that instead to produce the \"final\" instance (see https://github.com/dotnet/runtime/blob/546115d17880b6dc97bf3f0a0c846c760e53b11e/src/libraries/Microsoft.Extensions.Options/src/OptionsFactory.cs#L46)\r\n\r\nAn alternative model would be to do the same thing but execute delegates that return a new instance of the options object instead of mutating the current instance. We would need to figure out how to support both side by side but it would allow designing immutable options objects.\r\n\r\nHere\u0027s an example of what we what it would look like:\r\n\r\n```C#\r\npublic record MyImmutableOption(string Name, int Size);\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.Configure\u003cMyImmutableOption\u003e(o =\u003e\r\n    {\r\n        return o with { Name = \"Foo\" };\r\n    });\r\n}\r\n```\r\n\r\ncc @ericstj @eerhardt @maryamariyan ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnGE7hQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzgyNzQxNA==",
                                           "createdAt":  "2020-10-13T15:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-13T15:38:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzYwOTg1Ng==",
                                           "createdAt":  "2021-03-01T03:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skyoxZ",
                                           "body":  "I find a workaround for #46996: \r\n```\r\npublic record MyImmutableOption\r\n{\r\n    public string Name { get; init; } = \"[NoName]\";\r\n    public int Size { get; init; }\r\n}\r\n```",
                                           "updatedAt":  "2021-03-01T03:26:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDIxOTQ5MQ==",
                                           "createdAt":  "2021-07-14T21:22:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByjNhA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-07-14T21:26:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TorreyGarland",
                                           "body":  "Records with all \"init\" property setters partially works.  I am running into an issue with deserializing immutable collection types.  IOptions is not picking up any data from the app.settings files.",
                                           "updatedAt":  "2021-07-14T21:22:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VeMo",
                                           "createdAt":  "2021-08-08T16:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nihlus",
                                           "body":  "I have a suggested API surface + implementation - is there an appropriate place to share this? PR, here in this issue...?",
                                           "updatedAt":  "2021-08-08T16:22:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Vgml",
                                           "createdAt":  "2021-08-08T17:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "At this point it would be for .NET 7. It\u0027s a bit late to take such a big change for .NET 6. Would love to see the proposed design in this issue though!",
                                           "updatedAt":  "2021-08-08T17:44:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Vn4-",
                                           "createdAt":  "2021-08-08T21:55:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFM-Ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2021-09-25T12:01:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-11-03T12:47:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ulrichb",
                                                                               "createdAt":  "2021-12-07T15:05:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SGStino",
                                                                               "createdAt":  "2022-01-05T11:31:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2022-04-07T20:52:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "the-avid-engineer",
                                                                               "createdAt":  "2022-07-03T05:44:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joepb",
                                                                               "createdAt":  "2022-09-23T06:28:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "radverg",
                                                                               "createdAt":  "2023-05-15T11:26:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seungyongshim",
                                                                               "createdAt":  "2023-08-13T00:32:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mykhailok01",
                                                                               "createdAt":  "2023-10-03T21:19:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mbrecka",
                                                                               "createdAt":  "2024-08-02T16:21:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cidzoo",
                                                                               "createdAt":  "2025-02-04T15:16:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "Nihlus",
                                           "body":  "Sure!\r\n\r\nSo, essentialy, I\u0027ve tried to go for the most straightforward approach to supporting immutable option types (and indirectly, `record`s), while maintaining a familiar and unsurprising API. The short explanation is that a set of extension methods are added alongside the existing `Configure` family of methods, which instead of accepting an `Action\u003cTOptions\u003e`, accept a `Func\u003cTOptions, TOptions\u003e`.\r\n\r\nCumulative configurations of an immutable options type is done by simply returning a new copy of the options type, instead of mutating it in-place as is done today.\r\n\r\nThe full source code for this proposal can be viewed [here](https://github.com/Nihlus/Remora.Extensions.Options.Immutable), and since I have a need for this right away, I intend to release it on nuget as an experimental package as soon as I\u0027ve got some unit tests set up :)\r\n\r\nThe proposed surface would do the following (with nullable reference types enabled).\r\n\r\n## New Methods\r\nThe following methods are defined as extension methods to `IServiceCollection`.\r\n\r\n```cs\r\nIServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, Func\u003cTOptions\u003e creator);\r\nIServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, string? name, Func\u003cTOptions\u003e creator);\r\nIServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, Func\u003cTOptions,TOptions\u003e configureOptions);\r\nIServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, string? name, Func\u003cTOptions,TOptions\u003e configureOptions);\r\nIServiceCollection ConfigureAll\u003cTOptions\u003e(this IServiceCollection services, Func\u003cTOptions,TOptions\u003e configureOptions);\r\nIServiceCollection PostConfigure\u003cTOptions\u003e(this IServiceCollection services, Func\u003cTOptions,TOptions\u003e configureOptions);\r\nIServiceCollection PostConfigure\u003cTOptions\u003e(this IServiceCollection services, string name, Func\u003cTOptions,TOptions\u003e configureOptions);\r\nIServiceCollection PostConfigureAll\u003cTOptions\u003e(this IServiceCollection services, Action\u003cTOptions\u003e configureOptions);\r\n```\r\n\r\nThey behave effectively identical to their existing counterparts, save for operating on immutable types.\r\n\r\n## New Types\r\nThe following new types are added.\r\n\r\n### Interfaces\r\nThe following new interfaces are added, generally matching the existing interfaces.\r\n\r\n```cs\r\npublic interface ICreateOptions\u003cout TOptions\u003e where TOptions : class\r\n{\r\n    string? Name { get; }\r\n    TOptions Create();\r\n}\r\n\r\npublic interface IReadOnlyConfigureNamedOptions\u003cTOptions\u003e : IReadOnlyConfigureOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    TOptions Configure(string name, TOptions options);\r\n}\r\n\r\npublic interface IReadOnlyConfigureOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    TOptions Configure(TOptions options);\r\n}\r\n\r\npublic interface IReadOnlyPostConfigureOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    TOptions PostConfigure(string name, TOptions options);\r\n}\r\n```\r\n\r\n### Records\r\nThe following new records are added, generally matching the existing classes but utilizing new language features. It would of course be trivial to implement these as classes instead, but records are used here for brevity\u0027s sake. The full implementations are omitted from this section; see the linked experimental implementation for the complete source code.\r\n\r\n```cs\r\npublic record CreateOptions\u003cTOptions\u003e(string? Name, Func\u003cTOptions\u003e Creator) : ICreateOptions\u003cTOptions\u003e where TOptions : class;\r\n\r\npublic record ReadOnlyConfigureNamedOptions\u003cTOptions\u003e(string? Name, Func\u003cTOptions, TOptions\u003e Function) : IReadOnlyConfigureNamedOptions\u003cTOptions\u003e where TOptions : class;\r\n\r\npublic record ReadOnlyPostConfigureOptions\u003cTOptions\u003e(string? Name, Func\u003cTOptions, TOptions\u003e Function) : IReadOnlyPostConfigureOptions\u003cTOptions\u003e where TOptions : class;\r\n```\r\n\r\n### Classes\r\nThe following new classes are added.\r\n\r\n```cs\r\npublic class ReadOnlyOptionsFactory\u003cTOptions\u003e : IOptionsFactory\u003cTOptions\u003e where TOptions : class\r\n```\r\n\r\n## Usage\r\nUsage of the new API differs in two major ways.\r\n\r\n  * Immutable option types must be given an initial state\r\n  * Configuration steps do not mutate in-place, but instead return an entirely new instance which becomes the new option instance\r\n\r\nThe second of the two points is solved by using `Func\u003cTOptions, TOptions\u003e` as described above. The first, however, is slightly more interesting. As you\u0027ve seen, I\u0027ve added an `ICreateOptions` interface with a corresponding implementation, which is used to create the initial state for an options instance. This is utilized in `ReadOnlyOptionsFactory` in one of three ways.\r\n\r\n### Explicit initialization\r\nGiven the following options type,\r\n```cs\r\npublic record MyOptions(string Value, bool Flag);\r\n```\r\n\r\nit could be utilized in the following way:\r\n\r\n```cs\r\nvar services = new ServiceCollection()\r\n    .Configure\u003cMyOptions\u003e(() =\u003e new MyOptions(\"Initial\", false))\r\n    .Configure\u003cMyOptions\u003e(opts =\u003e opts with { Value = \"Something else\" })\r\n    .BuildServiceProvider();\r\n```\r\nUsing a `Configure` call with a parameterless lambda lets the user specify the initial state explicitly, and it may then be configured normally.\r\n\r\n### Parameterless constructor\r\nGiven the following options type,\r\n```cs\r\npublic record MyOptions()\r\n{\r\n    public string Value { get; init; }\r\n    public bool Flag { get; init; }\r\n}\r\n```\r\n\r\nit could be utilized in the following way:\r\n\r\n```cs\r\nvar services = new ServiceCollection()\r\n    .Configure\u003cMyOptions\u003e(opts =\u003e opts with { Value = \"Something else\" })\r\n    .BuildServiceProvider();\r\n```\r\n\r\nIn this case, the parameterless constructor is used to create the initial state, and the user does not need to specify anything. This is the most similar to the current API.\r\n\r\n### All-optional constructor\r\nGiven the following options type,\r\n```cs\r\npublic record MyOptions(string Value = \"Initial\", bool Flag = true);\r\n```\r\n\r\nit could be utilized in the following way:\r\n\r\n```cs\r\nvar services = new ServiceCollection()\r\n    .Configure\u003cMyOptions\u003e(opts =\u003e opts with { Value = \"Something else\" })\r\n    .BuildServiceProvider();\r\n```\r\n\r\nIn this case, a constructor with all parameters defined as optional is detected and used to create the initial state. This is a best-of-both-worlds approach, which allows both terse usage and an appropriate initial state.",
                                           "updatedAt":  "2021-08-08T21:55:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Foaxo",
                                           "createdAt":  "2022-06-28T04:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCkaPng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "TorreyGarland",
                                                                               "createdAt":  "2022-06-29T17:30:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "\u003e Records with all \"init\" property setters partially works. I am running into an issue with deserializing immutable collection types. IOptions is not picking up any data from the app.settings files.\r\n\r\n@TorreyGarland - this sounds like https://github.com/dotnet/runtime/issues/61547 which was fixed in https://github.com/dotnet/runtime/pull/52514, which was part of .NET 6\r\n\r\nActually, scrap that - it\u0027s not part of .NET 6 as the PR was [closed](https://github.com/dotnet/runtime/pull/52514#discussion_r635612319) so that further thought could be given to the problem.\r\n\r\nA new PR was created and merged to main in March, so it\u0027ll be part of .NET 7: https://github.com/dotnet/runtime/pull/66131",
                                           "updatedAt":  "2022-06-28T05:15:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GoHVL",
                                           "createdAt":  "2022-07-14T21:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "We will consider this in a future release. Moving this issue out of the 7.0 milestone. ",
                                           "updatedAt":  "2022-07-14T21:41:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Out5Z",
                                           "createdAt":  "2022-11-19T11:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ohadschn",
                                           "body":  "\u003e \u003e Records with all \"init\" property setters partially works. I am running into an issue with deserializing immutable collection types. IOptions is not picking up any data from the app.settings files.\r\n\u003e \r\n\u003e @TorreyGarland - this sounds like #61547 which was fixed in #52514, which was part of .NET 6\r\n\u003e \r\n\u003e Actually, scrap that - it\u0027s not part of .NET 6 as the PR was [closed](https://github.com/dotnet/runtime/pull/52514#discussion_r635612319) so that further thought could be given to the problem.\r\n\u003e \r\n\u003e A new PR was created and merged to main in March, so it\u0027ll be part of .NET 7: #66131\r\n\r\n@SteveDunn By \"immutable collection types\" are we talking about [System.Collections.Immutable](https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable?view=net-7.0)? \r\nAre you saying for example that the following should be possible in .NET 7 (but not 6)?\r\n\r\n```jsonc\r\n// app.settings\r\n{\r\n    \"MyStrings\": [\"a\", \"b\", \"c\"]\r\n}\r\n```\r\n\r\n```cs\r\npublic class MyOptions\r\n{\r\n    public ImmutableArray\u003cstring\u003e MyStrings { get; set; }\r\n   //or ImmutableHashSet\u003cstring\u003e, or ImmutableDictionary\u003cstring,string\u003e, etc.\r\n}\r\n```\r\n\r\nBecause I just attempted this and neither .NET 6 nor .NET 7 worked - the immutable array above was not bound (its `IsDefault` was `true`), while a sibling regular array I added for control was bound without issue.\r\n\r\nI tried binding to the concrete `ReadOnlyCollection\u003cT\u003e` class but that failed with `Cannot create instance ... missing a public parameterless constructor`. However Binding to `IReadOnlyCollection\u003cT\u003e`/`IReadOnlyDictionary\u003cT\u003e`/`IReadOnlyList\u003cT\u003e` did work:\r\nhttps://github.com/dotnet/runtime/blob/0f3a88b479ddab4899954ba1c2cbdbceb5c23385/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationCollectionBindingTests.cs#L1272\r\n\r\nNevertheless, without any guarantee on the generated underlying type, it\u0027s not as good as Immutable - especially considering thread safety (which a [readonly interface does not guarantee](https://web.archive.org/web/20150401000000*/http://blogs.msdn.com/b/ericlippert/archive/2011/05/23/read-only-and-threadsafe-are-different.aspx)). Plus these is no `ReadOnlySet\u003cT\u003e` AFAIK (https://github.com/dotnet/runtime/issues/29387).\r\n\r\nOpened an issue suggesting immutable collection binding: : https://github.com/dotnet/runtime/issues/78592",
                                           "updatedAt":  "2022-11-19T13:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hjr7F",
                                           "createdAt":  "2023-07-15T11:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "Will this be shipped with .NET 8 or is there any workaround how immutable options can be used? Because at the moment with .NET 7, the following code doesn\u0027t compile:\r\n```c#\r\ninternal class WebApplicationFactoryForAny : WebApplicationFactory\u003cProgram\u003e\r\n{\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder) =\u003e\r\n        builder.ConfigureTestServices(services =\u003e services.Configure\u003cScreenshotOptions\u003e(options =\u003e options with { Url = \"\" }));\r\n}\r\n\r\npublic record ScreenshotOptions\r\n{\r\n    public const string SectionName = nameof(ScreenshotOptions);\r\n\r\n    public string Url { get; init; } = string.Empty;\r\n\r\n    public UrlType UrlType { get; init; }\r\n\r\n    public string Username { get; init; } = string.Empty;\r\n\r\n    public string Password { get; init; } = string.Empty;\r\n\r\n    public string ScreenshotFileName { get; init; } = \"Screenshot.png\";\r\n\r\n    public uint Width { get; init; }\r\n\r\n    public uint Height { get; init; }\r\n\r\n    public uint TimeBetweenHttpCallsInSeconds { get; init; }\r\n\r\n    public uint RefreshIntervalInSeconds { get; init; }\r\n\r\n    public bool BackgroundProcessingEnabled { get; init; }\r\n\r\n    public Activity? Activity { get; init; }\r\n\r\n    public string CalculateSleepBetweenUpdates() =\u003e\r\n        Activity.DisplayShouldBeActive()\r\n            ? RefreshIntervalInSeconds.ToString()\r\n            : Activity.RefreshIntervalWhenInactiveInSeconds.ToString();\r\n}\r\n\r\npublic enum UrlType\r\n{\r\n    Any,\r\n    OpenHab\r\n}\r\n\r\npublic record Activity(TimeOnly ActiveFrom, TimeOnly ActiveTo, uint RefreshIntervalWhenInactiveInSeconds);\r\n```",
                                           "updatedAt":  "2023-07-15T11:49:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hjudq",
                                           "createdAt":  "2023-07-15T12:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wertzui",
                                           "body":  "It doesn\u0027t compile, or are you getting an Exception at startup?\r\n\r\nWhat is the error, you are seeing? ",
                                           "updatedAt":  "2023-07-15T12:37:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hj7_d",
                                           "createdAt":  "2023-07-15T16:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "It doesn\u0027t compile, I\u0027m getting a `[CS0201] Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement`",
                                           "updatedAt":  "2023-07-15T16:06:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hkN1h",
                                           "createdAt":  "2023-07-15T20:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODA0Ytg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mu88",
                                                                               "createdAt":  "2023-07-16T08:57:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Nihlus",
                                           "body":  "That is expected, as the discussed functionality is not in .NET as of yet. The API surface I suggested above is available as a nuget package if you want to start using it right away - it\u0027s linked in the comment.",
                                           "updatedAt":  "2023-07-15T20:48:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hkxQO",
                                           "createdAt":  "2023-07-16T08:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "And will the support for immutable options be part of the upcoming .NET 8 release?",
                                           "updatedAt":  "2023-07-16T08:58:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hk5e2",
                                           "createdAt":  "2023-07-16T11:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5Aw7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "TorreyGarland",
                                                                               "createdAt":  "2023-07-26T18:23:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Regenhardt",
                                                                               "createdAt":  "2023-09-24T15:10:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "AlexandreBossard",
                                                                               "createdAt":  "2023-10-24T07:56:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kennethac",
                                                                               "createdAt":  "2023-10-25T18:28:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mykhailok01",
                                                                               "createdAt":  "2023-11-18T22:23:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Moreno-Gentili",
                                                                               "createdAt":  "2023-12-19T16:44:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "BenjaminAbt",
                                                                               "createdAt":  "2024-01-19T15:39:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "DemoBytom",
                                                                               "createdAt":  "2024-01-30T15:59:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ali50m",
                                                                               "createdAt":  "2024-06-15T03:39:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mitkabraun",
                                                                               "createdAt":  "2024-11-01T07:34:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@mu88 No, it\u0027s in the \"Future\" milestone, which means it was deprioritized.",
                                           "updatedAt":  "2023-07-16T11:46:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r-TDV",
                                           "createdAt":  "2023-11-14T22:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESyqyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mu88",
                                                                               "createdAt":  "2023-11-15T09:01:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "marleypowell",
                                                                               "createdAt":  "2023-11-17T08:52:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "amis92",
                                                                               "createdAt":  "2023-11-19T23:04:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Moreno-Gentili",
                                                                               "createdAt":  "2023-12-19T16:43:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "aateeque",
                                                                               "createdAt":  "2024-03-11T14:21:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "bugproof",
                                                                               "createdAt":  "2024-03-22T18:02:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tsemer",
                                                                               "createdAt":  "2024-04-27T09:20:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "ali50m",
                                                                               "createdAt":  "2024-06-15T03:39:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ali50m",
                                                                               "createdAt":  "2024-06-15T03:39:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "mariusz96",
                                                                               "createdAt":  "2024-07-25T12:49:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kilazur",
                                                                               "createdAt":  "2024-10-04T13:31:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Kilazur",
                                                                               "createdAt":  "2024-10-04T13:31:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "bbartels",
                                                                               "createdAt":  "2025-04-02T12:08:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "oliver-unifii",
                                                                               "createdAt":  "2025-05-20T09:47:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "mykhailok01",
                                           "body":  "Is there a chance it will be added in .NET 9? :)",
                                           "updatedAt":  "2023-11-14T22:28:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6agojt",
                                           "createdAt":  "2025-01-15T10:23:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "Here\u0027s a different take on the API (+implementation): https://gist.github.com/aelij/3165d856b03ca35f8ab8b2973a181f10\n\n* Uses `RuntimeHelpers.GetUninitializedObject` instead of `Activator` to create the initial instance when the type has no parameterless public ctor, so there\u0027s no issue initializing options from configuration without any setup.\n* The new immutable interfaces inherit from the existing ones so they can be called in the order they were added to the service collection, which is the behavior I\u0027d expect.\n* The config binder seems to work well with records. The source generator will probably need to be updated.",
                                           "updatedAt":  "2025-01-15T10:23:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cYTuF",
                                           "createdAt":  "2025-01-30T06:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "Related issue: #78592",
                                           "updatedAt":  "2025-01-30T06:24:22Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Explore options immutability",
        "labels":  [
                       "api-needs-work",
                       "feature-request",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44381",
        "createdAt":  "2020-11-08T03:11:50Z",
        "number":  44381,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7uzbQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "xakep139",
                                            "createdAt":  "2023-11-09T13:32:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oleh-wtg",
                                            "createdAt":  "2024-08-07T01:02:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-10T18:00:13Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-10-10T03:40:56Z",
        "body":  "Today you can use `IOptionsMonitor.OnChange` to subscribe to changes when an `IOptionsChangeTokenSource\u003cT\u003e` cancellation token source triggers. The problem is that if the next call results in an invalid configuration or throws an exception during the building of the changed configuration, that error will throw on a background thread and OnChange will never fire. Even worse is that there\u0027s no way to handle those validation errors or exceptions. This could also result in crashing the program if the `IOptionsChangeTokenSource\u003cT\u003e` implementation isn\u0027t handling exceptions properly.\r\n\r\nHere\u0027s an example (change is never displayed on the screen):\r\n\r\n```C#\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Threading;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Options;\r\nusing Microsoft.Extensions.Primitives;\r\n\r\nvar services = new ServiceCollection();\r\nservices.AddOptions();\r\n\r\nvar num = 0;\r\nservices.AddOptions\u003cMyOptions\u003e()\r\n        .Configure(o =\u003e\r\n        {\r\n            o.Name = num % 2 == 0 ? \"David\" : null;\r\n            num++;\r\n        })\r\n        .ValidateDataAnnotations();\r\n\r\nvar trigger = new TriggerChanges();\r\nservices.AddSingleton\u003cIOptionsChangeTokenSource\u003cMyOptions\u003e\u003e(trigger);\r\n\r\nvar sp = services.BuildServiceProvider();\r\n\r\nvar options = sp.GetRequiredService\u003cIOptionsMonitor\u003cMyOptions\u003e\u003e();\r\n\r\nConsole.WriteLine(options.CurrentValue);\r\n\r\noptions.OnChange(o =\u003e\r\n{\r\n    Console.WriteLine(\"Changed!\");\r\n});\r\n\r\ntrigger.Change();\r\n\r\npublic class TriggerChanges : IOptionsChangeTokenSource\u003cMyOptions\u003e\r\n{\r\n    private CancellationTokenSource _cts = new CancellationTokenSource();\r\n\r\n    public string Name =\u003e default;\r\n\r\n    public void Change()\r\n    {\r\n        var old = _cts;\r\n        _cts = new CancellationTokenSource();\r\n        old.Cancel();\r\n    }\r\n\r\n    public IChangeToken GetChangeToken() =\u003e new CancellationChangeToken(_cts.Token);\r\n}\r\n\r\npublic class MyOptions\r\n{\r\n    [Required]\r\n    public string Name { get; set; }\r\n    public int Age { get; set; }\r\n}\r\n```\r\n\r\nI think the right fix for this is a design change around the OnChange callback where it doesn\u0027t provide you with the new options, but instead just fires and lets you read the new options lazily from the CurrentValue property. That would let you handle exceptions cleanly.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj0g7cQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNTQxMg==",
                                           "createdAt":  "2020-11-08T03:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @HaoK did this come up during the initial design? \r\n\r\nI can think of 2 ways to address this:\r\n- Implement *another* options interface with an `OnChange` callback that just notifies without first retrieving the new options\r\n- Implement *another* options interface with an `OnChange` callback that pushes the error through (similar to Rx)\r\n\r\nWe may be able to retrofit it by using:\r\n- Default interface methods in .NET 3/5\r\n- Separate interface + extension method on .NET Standard 2.x\r\n\r\nStrawman:\r\n\r\n```C#\r\npublic interface IOptionsChangeListener\u003cTOptions\u003e\r\n{\r\n    IDisposable OnChange(Action\u003cstring\u003e changed);\r\n}\r\n```\r\n\r\nThis would be implemented by the OptionsMonitor\u003cT\u003e implementation. Then we would introduce an extension method:\r\n\r\n```C#\r\npublic static class OptionsExtensions\r\n{\r\n    public static IDisposable OnChange(this IOptionsMonitor\u003cT\u003e optionsMonitor, Action\u003cstring\u003e changed);\r\n}\r\n```\r\n\r\nThe implementation would cast the optionsMonitor to an `IOptionsChangeListener\u003cTOptions\u003e` and subscribe if possible.",
                                           "updatedAt":  "2020-11-08T03:33:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNTk1Nw==",
                                           "createdAt":  "2020-11-08T03:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1o1UQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "BrandonSchreck",
                                                                               "createdAt":  "2024-10-10T03:37:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-10T18:06:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Ah yeah, no we didn\u0027t really consider how validation errors would interact with OnChange",
                                           "updatedAt":  "2020-11-08T03:34:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNjQxNg==",
                                           "createdAt":  "2020-11-08T03:42:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yea, it doesn\u0027t work well right now if things throw on background threads. The good news is that this can be worked around today because all of the interfaces are public but it basically requires a re-implementation of the OptionsMonitor. I think we should make a tiny change here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c82abc5cd40ecc9b61c6a8590acb267131727a98/src/libraries/Microsoft.Extensions.Options/src/OptionsMonitor.cs#L53\r\n\r\nTo only resolve the options if the callback is non-null. At least it would throw errors in the background unless you are interested in the changes. The only potential for breaking here is that errors maybe thrown from accesses to `CurrentValue` ",
                                           "updatedAt":  "2020-11-08T03:42:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNjQ2OA==",
                                           "createdAt":  "2020-11-08T03:43:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "You prefer letting them fetch the options as opposed to pushing the error (with a null instance I guess to signify an error has occurred?\r\n\r\n`IDisposable OnChange(Action\u003cTOptions, string, Exception\u003e listener);` where TOptions will be null whenever there\u0027s an exception.  The old OnChange could just call the new overload with an action that ignores the exception too.",
                                           "updatedAt":  "2020-11-08T03:43:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNjU3Nw==",
                                           "createdAt":  "2020-11-08T03:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "The tweak of moving the Get into the non null check I think would result in the cache not being populated which is a subtle (not sure if it matters difference)",
                                           "updatedAt":  "2020-11-08T03:45:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNzExNA==",
                                           "createdAt":  "2020-11-08T03:55:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@HaoK IDEA but likely breaking, what if we pass null with an emptied cache? That would allow you to handle the error by accessing the value but would still fire the callback...\r\n\r\nEveryone would start getting null ref exceptions 😄 ",
                                           "updatedAt":  "2020-11-08T03:58:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNzI5OQ==",
                                           "createdAt":  "2020-11-08T03:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "That seems decent, so basically we wrap the Get with a try/catch in OptionsMonitor and callers will need to guard against null (if they use options validation).  ",
                                           "updatedAt":  "2020-11-08T03:58:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUyNzMyOQ==",
                                           "createdAt":  "2020-11-08T03:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlI-nQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2020-11-08T04:03:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2020-11-10T23:50:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-03-29T02:08:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Yeah maybe better for them to opt-in with a new OnChange than blow everyone up",
                                           "updatedAt":  "2020-11-08T03:58:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzcwMjQ5Mw==",
                                           "createdAt":  "2020-11-09T01:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-11-09T01:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40xI6-",
                                           "createdAt":  "2021-07-22T23:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "6.0 is now feature complete. Moving to 7.0.",
                                           "updatedAt":  "2021-07-22T23:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rhG26",
                                           "createdAt":  "2023-11-09T13:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xakep139",
                                           "body":  "@davidfowl are there any plans to address this issue in 9.0?",
                                           "updatedAt":  "2023-11-09T13:32:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rhH_z",
                                           "createdAt":  "2023-11-09T13:35:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnliKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xakep139",
                                                                               "createdAt":  "2023-11-09T19:36:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emiliovmq",
                                                                               "createdAt":  "2024-02-28T13:17:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dao007forever",
                                                                               "createdAt":  "2024-06-27T21:23:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tekian",
                                           "body":  "Yup, quite mission critical for services that use inherently unreliable source of configuration and/or feature flags with values that need validation on-the-fly. Maybe we could add an overload with an on-error semantics? 🫣",
                                           "updatedAt":  "2023-11-09T13:35:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rhgpl",
                                           "createdAt":  "2023-11-09T14:33:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geeknoid",
                                           "body":  "@danmoseley @joperezr Is there a chance this could be tackled in the next release?",
                                           "updatedAt":  "2023-11-09T14:33:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51XDS5",
                                           "createdAt":  "2024-02-28T13:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emiliovmq",
                                           "body":  "Is there currently any solution to support cases where there are validation errors (or any other error, such as the file does not exist, etc.) in the configuration, and using at the same time IOptionsMonitor and the OnChange event (to detect changes in the configuration source)? We cannot rely on this mechanism (which is also unique for singleton services, like ours) if there is no support for such case.",
                                           "updatedAt":  "2024-02-28T13:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PSDtx",
                                           "createdAt":  "2024-10-10T03:40:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrandonSchreck",
                                           "body":  "Currently looking at implementing IOptionsMonitor and this came up...I\u0027m running .NET 8 Isolated Azure Func and need to run validation when a change occurs to ensure dynamic specification pattern rules engine wont break.",
                                           "updatedAt":  "2024-10-10T03:40:55Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "There\u0027s no way to handle validation errors with IOptionsMonitor.OnChange",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45045",
        "createdAt":  "2020-11-21T00:24:11Z",
        "number":  45045,
        "author":  "Trolldemorted",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-01T13:54:34Z",
        "body":  "### Describe the bug\r\nIf I make my code parse a custom configuration section in a `\u003cNullable\u003eenable\u003c/Nullable\u003e` project, it fills non-nullable references with null values instead of throwing an exception.\r\n\r\n\r\n### To Reproduce\r\n```c#\r\npublic Startup(IConfiguration configuration)\r\n{\r\n    this.Configuration = configuration;\r\n}\r\n\r\npublic IConfiguration Configuration { get; }\r\n\r\n// This method gets called by the runtime. Use this method to add services to the container.\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.Configure\u003cMySettings\u003e(this.Configuration.GetSection(\"MySettings\"));\r\n    var mySettings= this.Configuration\r\n        .GetSection(\"MySettings\")\r\n        .Get\u003cLandingPageSettings\u003e();\r\n```\r\nAdd any reference type to MySettings and observe that the parsing does not fail and fills the non-nullable variable with null.\r\n\r\nI didn\u0027t find anything related in https://github.com/dotnet/aspnetcore/issues/5680 so I created this Issue. This might be caused by https://github.com/dotnet/runtime/issues/1256, if you are using their parser.\r\n\r\nDoes asp.net have a way of parsing configs that honors the not-null safety?\r\n\r\n### Further technical details\r\n- ASP.NET Core version 5.0\r\n- Include the output of `dotnet --info`\r\n```\r\n.NET SDK (gemäß \"global.json\"):\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0\r\n  Commit:  cf258a14b7\r\n\r\n.NET SDKs installed:\r\n  5.0.100-rc.2.20479.15 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.2.20475.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.2.20475.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.2.20475.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgyTACQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ4NzYyOA==",
                                           "createdAt":  "2020-11-21T01:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This is expected. Nullable is a compile-time only aid, it does not affect the application at runtime. Configuration is bound dynamically at runtime.\r\n\r\nNote the configuration and options APIs live in the runtime repo. I\u0027ll transfer this.",
                                           "updatedAt":  "2020-11-21T01:47:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ4NzY1MA==",
                                           "createdAt":  "2020-11-21T01:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-11-21T01:47:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ4NzY3OA==",
                                           "createdAt":  "2020-11-21T01:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\nIf I make my code parse a custom configuration section in a `\u003cNullable\u003eenable\u003c/Nullable\u003e` project, it fills non-nullable references with null values instead of throwing an exception.\r\n\r\n\r\n### To Reproduce\r\n```c#\r\npublic Startup(IConfiguration configuration)\r\n{\r\n    this.Configuration = configuration;\r\n}\r\n\r\npublic IConfiguration Configuration { get; }\r\n\r\n// This method gets called by the runtime. Use this method to add services to the container.\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.Configure\u003cMySettings\u003e(this.Configuration.GetSection(\"MySettings\"));\r\n    var mySettings= this.Configuration\r\n        .GetSection(\"MySettings\")\r\n        .Get\u003cLandingPageSettings\u003e();\r\n```\r\nAdd any reference type to MySettings and observe that the parsing does not fail and fills the non-nullable variable with null.\r\n\r\nI didn\u0027t find anything related in https://github.com/dotnet/aspnetcore/issues/5680 so I created this Issue. This might be caused by https://github.com/dotnet/runtime/issues/1256, if you are using their parser.\r\n\r\nDoes asp.net have a way of parsing configs that honors the not-null safety?\r\n\r\n### Further technical details\r\n- ASP.NET Core version 5.0\r\n- Include the output of `dotnet --info`\r\n```\r\n.NET SDK (gemäß \"global.json\"):\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0\r\n  Commit:  cf258a14b7\r\n\r\n.NET SDKs installed:\r\n  5.0.100-rc.2.20479.15 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.2.20475.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.2.20475.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.2.20475.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTrolldemorted\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-21T01:48:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTU2NTI4Mg==",
                                           "createdAt":  "2020-11-21T11:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Trolldemorted",
                                           "body":  "@Tratcher as mentioned in https://github.com/dotnet/runtime/issues/1256, entity framework\u0027s runtime behaviour is affected by nullable, so there must be some way to do different things depending on whether a type is nullable or not.\r\n\r\nIs there any `[Required]`-like attribute I can attach to my non-nullable type references which will be respected when parsing an asp.net config?",
                                           "updatedAt":  "2020-11-21T11:21:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTU5NDI2OQ==",
                                           "createdAt":  "2020-11-21T15:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn5vyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-01T14:01:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wzchua",
                                           "body":  "ASP Options pattern has a means to configure validation https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0#options-validation",
                                           "updatedAt":  "2020-11-21T15:29:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjE1NjE3MQ==",
                                           "createdAt":  "2020-11-23T13:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "cc: @safern ",
                                           "updatedAt":  "2020-11-23T13:18:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjUwNzMxNA==",
                                           "createdAt":  "2020-11-24T00:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn5wJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Trolldemorted",
                                                                               "createdAt":  "2020-11-24T07:04:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-01T14:02:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "safern",
                                           "body":  "Sorry for the delay on responding. Unfortunately, at the moment we don\u0027t have an API that can tell us whether a member is a nullable reference type as the underlying type at runtime is the same for non-nullable as for nullable types, the only thing that changes is that the compiler emits metadata in order to capture the nullability. However this metadata is hard to read as it has a lot of edge cases, so in order to support this we would need a proper API that exposes this information via Reflection for example: https://github.com/dotnet/runtime/issues/29723 -- until we have that API in place, we can\u0027t support this without a huge investment on implementing logic to read this metadata, which just seems overkill as the compiler could change the way metadata is represented at any time. \r\n\r\nHowever, I think that if we end up using source generators at compile time, we could get information about nullable reference types for the POCO an app is trying to bind to, and with that info, roslyn could tell us if the type has nullable annotations or not. We currently have this to investigate how source generators could help the binding story: https://github.com/dotnet/runtime/issues/44493\r\n",
                                           "updatedAt":  "2020-11-24T00:36:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DJMAJ",
                                           "createdAt":  "2024-07-01T13:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "archaeron",
                                           "body":  "Hi\r\n\r\nit looks to me like this API is now included in dotnet https://github.com/dotnet/runtime/issues/29723\r\n\r\nis there a way to turn this check on?\r\n\r\nThank you :)",
                                           "updatedAt":  "2024-07-01T13:54:32Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "asp.net\u0027s configuration parsing puts null into non-nullable variables",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45294",
        "createdAt":  "2020-11-28T03:41:21Z",
        "number":  45294,
        "author":  "macsux",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBYPQOQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2020-11-28T10:32:25Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-22T23:17:40Z",
        "body":  "## Background and motivation\r\n\r\nIt is sometimes desired to defined multiple named sections of repeating config blocks in the configuration file. Consider the following configuration which is used to define OAuth2 clients:\r\n```yaml\r\nclients:\r\n  google:\r\n    clientId: foo\r\n    secret: bar\r\n  microsoft:\r\n    clientId: dotnet\r\n    secret: rocks\r\n```\r\nThe current approach would require explicitly calling Configure on for each named section, which would require a code change for each new named registration. This new API would allow the entire section to be registered with each entry becoming a named instance. This API is important for dynamically configuring this like authentication schemes. \r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n     public static class OptionsConfigurationServiceCollectionExtensions\r\n     {\r\n+        public static void ConfigureNamedSection\u003cTOptions\u003e(this IServiceCollection services, IConfiguration config) where TOptions : class\r\n+        {\r\n+            services.AddOptions\u003cTOptions\u003e();\r\n+            services.AddSingleton\u003cIConfigureOptions\u003cTOptions\u003e\u003e(new NamedConfigureFromConfigurationSectionNamesOptions\u003cTOptions\u003e(config));\r\n+        }\r\n```\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Microsoft.Extensions.Options.ConfigurationExtensions\r\n{\r\n    public class NamedConfigureFromConfigurationSectionNamesOptions\u003cTOptions\u003e : IConfigureNamedOptions\u003cTOptions\u003e \r\n        where TOptions : class\r\n    {\r\n        private readonly IConfiguration _config;\r\n        public NamedConfigureFromConfigurationSectionNamesOptions(IConfiguration config)\r\n        {\r\n            _config = config;\r\n        }\r\n        public void Configure(string name, TOptions options) =\u003e _config.GetSection(name).Bind(options);\r\n\r\n        public void Configure(TOptions options) =\u003e Configure(Options.DefaultName, options);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nGiven the config section above, the registration could look like the following:\r\n\r\n```csharp\r\nservices.ConfigureNamedSection\u003cOAuth2Options\u003e(_configuration.GetSection(\"clients\"));\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNone considered beyond alternate names for this new API. The naming of the new method can potentially be improved to be more intuitive about what it does.\r\n\r\n## Risks\r\n\r\nIntroduction of the extra API may cause confusion on its intended usage since it implies a specific structure of the IConfiguration passed in.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMSQIw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTAzNTE1OA==",
                                           "createdAt":  "2020-11-28T03:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and motivation\r\n\r\nIt is sometimes desired to defined multiple named sections of repeating config blocks in the configuration file. Consider the following configuration which is used to define OAuth2 clients:\r\n```yaml\r\nclients:\r\n  google:\r\n    clientId: foo\r\n    secret: bar\r\n  microsoft:\r\n    clientId: dotnet\r\n    secret: rocks\r\n```\r\nThe current approach would require explicitly calling Configure on for each named section, which would require a code change for each new named registration. This new API would allow the entire section to be registered with each entry becoming a named instance. This API is important for dynamically configuring this like authentication schemes. \r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n     public static class OptionsConfigurationServiceCollectionExtensions\r\n     {\r\n+        public static void ConfigureNamedSection\u003cTOptions\u003e(this IServiceCollection services, IConfiguration config) where TOptions : class\r\n+        {\r\n+            services.AddOptions\u003cTOptions\u003e();\r\n+            services.AddSingleton\u003cIConfigureOptions\u003cTOptions\u003e\u003e(new NamedConfigureFromConfigurationSectionNamesOptions\u003cTOptions\u003e(config));\r\n+        }\r\n```\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Microsoft.Extensions.Options.ConfigurationExtensions\r\n{\r\n    public class NamedConfigureFromConfigurationSectionNamesOptions\u003cTOptions\u003e : IConfigureNamedOptions\u003cTOptions\u003e \r\n        where TOptions : class\r\n    {\r\n        private readonly IConfiguration _config;\r\n        public NamedConfigureFromConfigurationSectionNamesOptions(IConfiguration config)\r\n        {\r\n            _config = config;\r\n        }\r\n        public void Configure(string name, TOptions options) =\u003e _config.GetSection(name).Bind(options);\r\n\r\n        public void Configure(TOptions options) =\u003e Configure(Options.DefaultName, options);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nGiven the config section above, the registration could look like the following:\r\n\r\n```csharp\r\nservices.ConfigureNamedSection\u003cOAuth2Options\u003e(_configuration.GetSection(\"clients\"));\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNone considered beyond alternate names for this new API. The naming of the new method can potentially be improved to be more intuitive about what it does.\r\n\r\n## Risks\r\n\r\nIntroduction of the extra API may cause confusion on its intended usage since it implies a specific structure of the IConfiguration passed in.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emacsux\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Options`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-28T03:41:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTAzNTY4MQ==",
                                           "createdAt":  "2020-11-28T03:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think I would prefer to continue adding API to the `AddOptions` builder:\r\n\r\n```C#\r\nservices.AddOptions\u003cTOptions\u003e()\r\n        .BindNameConfiguration(\"clients\");\r\n```",
                                           "updatedAt":  "2020-11-28T03:49:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTA0NjUyMQ==",
                                           "createdAt":  "2020-11-28T06:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "macsux",
                                           "body":  "Based on the feedback from @davidfowl, changing the proposal to look as following:\r\n*Updated*: to handle empty path\r\n \r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    public static class OptionsBuilderConfigurationExtensions\r\n    {\r\n        public static OptionsBuilder\u003cTOptions\u003e BindNameConfiguration\u003cTOptions\u003e(\r\n            this OptionsBuilder\u003cTOptions\u003e optionsBuilder,\r\n            string configSectionPath)\r\n            where TOptions : class\r\n        {\r\n            _ = optionsBuilder ?? throw new ArgumentNullException(nameof(optionsBuilder));\r\n            _ = configSectionPath ?? throw new ArgumentNullException(nameof(configSectionPath));\r\n\r\n            optionsBuilder.Services.AddSingleton\u003cIConfigureOptions\u003cTOptions\u003e\u003e(sp =\u003e\r\n            {\r\n                IConfiguration config = sp.GetRequiredService\u003cIConfiguration\u003e();\r\n                IConfiguration section = string.Equals(\"\", configSectionPath, StringComparison.OrdinalIgnoreCase)\r\n                    ? config\r\n                    : config.GetSection(configSectionPath);\r\n                return new BindNameConfigurationOptions\u003cTOptions\u003e(section);\r\n            });\r\n            return optionsBuilder;\r\n        }\r\n```\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Options.ConfigurationExtensions\r\n{\r\n    public class BindNameConfigurationOptions\u003cTOptions\u003e : IConfigureNamedOptions\u003cTOptions\u003e\r\n        where TOptions : class\r\n    {\r\n        private readonly IConfiguration _config;\r\n        public BindNameConfigurationOptions(IConfiguration config)\r\n        {\r\n            _config = config;\r\n        }\r\n        public void Configure(string name, TOptions options) =\u003e _config.GetSection(name).Bind(options);\r\n\r\n        public void Configure(TOptions options) =\u003e Configure(Options.DefaultName, options);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2020-11-28T06:56:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzExNjg0NQ==",
                                           "createdAt":  "2021-06-08T20:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "macsux",
                                           "body":  "@davidfowl After trying to use the API as you suggested, I found that it doesn\u0027t really fit well together as an extension on `OptionsBuilder`. The reason is that `OptionsBuilder` inherently is tied to a single named instance of options. This creates a logical disconnect as:\r\n1. Starting an `OptionsBuilder` requires a name. We\u0027re kinda skipping name in what you proposed because it\u0027s dynamically derived, but it doesn\u0027t feel intuitive as the builder is already supposed to be tied to a single named instance\r\n2. Subsequent calls to `OptionsBuilder` such as the `Validate` method only make sense if they are applied to all option instances.\r\n\r\nSeems like the logic in Validation, Postconfigure, and other things invoked by `OptionsBuilder` is built in such a way that if the name is null then it\u0027s assumed to apply to all instances, but there\u0027s no way to create `OptionsBuilder` with `Name == null`. If we want to proceed down this path then one solution would be to add a way to reset `OptionBuilder.Name` property to `null` after  `BindNameConfiguration` is called. The easiest way to do it is to move `BindNameConfiguration` off the extension method on to `OptionBuilder` itself and add a private setter for Name.",
                                           "updatedAt":  "2021-06-08T20:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40xJAj",
                                           "createdAt":  "2021-07-22T23:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "6.0 is now feature complete, this won\u0027t be completed for that release.",
                                           "updatedAt":  "2021-07-22T23:17:23Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "OptionsServiceCollectionExtensions.ConfigureDynamic",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45671",
        "createdAt":  "2020-12-07T08:29:19Z",
        "number":  45671,
        "author":  "aelij",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-06T16:20:12Z",
        "body":  "## Background and Motivation\r\n\r\nCurrently the Options API will return a new instance of the options class even if it was not configured. This is especially problematic with named options, where a misconfiguration can easily occur. This is compounded by the fact that validation is configured per named instance. I suggest a way to validate that a named option has been explicitly registered.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Options\r\n{\r\n    public class OptionsBuilder\u003cT\u003e {\r\n+        ValidateNames();\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```cs\r\nvar services = new ServiceCollection();\r\nservices.AddOptions\u003cMyOptions\u003e().ValidateNames();\r\nservices.AddOptions\u003cMyOptions\u003e(\"X\").Configure(o =\u003e { ... });\r\nvar serviceProvider = services.BuildServiceProvider();\r\nvar myOptions = serviceProvider.GetService\u003cIOptionsMonitor\u003cMyOptions\u003e\u003e();\r\nmyOptions.Get(\"X\") // returns value\r\nmyOptions.Get(\"Y\") // throws\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAnother option is to allow validations to be defined for all instances. Currently there\u0027s a `ConfigureAll` method that allows defining an action that would run on all named options, but no API to configure validation for all instances. So we could have something like `AddAllOptions` (not the best name, I know):\r\n\r\n```cs\r\nservices.AddAllOptions\u003cMyOptions\u003e().ValidateDataAnnotations();\r\n```\r\n\r\n## Risks\r\n\r\nNone - this behavior does not change existing options as it must be opted into.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLwtL_w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTc2MDI5MQ==",
                                           "createdAt":  "2020-12-07T08:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nCurrently the Options API will return a new instance of the options class even if it was not configured. This is especially problematic with named options, where a misconfiguration can easily occur. This is compounded by the fact that validation is configured per named instance. I suggest a way to validate that a named option has been explicitly registered.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Options\r\n{\r\n    public class OptionsBuilder\u003cT\u003e {\r\n+        ValidateNames();\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```cs\r\nvar services = new ServiceCollection();\r\nservices.AddOptions\u003cMyOptions\u003e().ValidateNames();\r\nservices.AddOptions\u003cMyOptions\u003e(\"X\").Configure(o =\u003e { ... });\r\nvar serviceProvider = services.BuildServiceProvider();\r\nvar myOptions = serviceProvider.GetService\u003cIOptionsMonitor\u003cMyOptions\u003e\u003e();\r\nmyOptions.Get(\"X\") // returns value\r\nmyOptions.Get(\"Y\") // throws\r\n```\r\n--\u003e\r\n\r\n## Alternative Designs\r\n\r\nAnother option is to allow validations to be defined for all instances. Currently there\u0027s a `ConfigureAll` method that allows defining an action that would run on all named options, but no API to configure validation for all instances. So we could have something like `AddAllOptions` (not the best name, I know):\r\n\r\n```cs\r\nservices.AddAllOptions\u003cMyOptions\u003e().ValidateDataAnnotations();\r\n```\r\n\r\n## Risks\r\n\r\nNone - this behavior does not change existing options as it must be opted into.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eaelij\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Options`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-07T08:29:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjI3OTQ2Mw==",
                                           "createdAt":  "2021-02-25T22:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "We added a new feature into .NET 6 Preview 2 for allowing options validation also for named options. For more information check out this original issue: https://github.com/dotnet/runtime/issues/36391\r\n\r\nClosing as fixed.",
                                           "updatedAt":  "2021-02-25T22:46:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQyNTAwNQ==",
                                           "createdAt":  "2021-02-28T09:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "@maryamariyan I took a quick look at the PR and I don\u0027t think this use case is covered.\r\n\r\nIt\u0027s not about validating the options at start-up, it\u0027s validating that only pre-registered names can be used when calling `IOptions\u003cT\u003e.Get(string)`.\r\n\r\nAn unconfigured named option is very hard to debug without this.",
                                           "updatedAt":  "2021-02-28T09:47:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzQ3MjYwOA==",
                                           "createdAt":  "2021-02-28T15:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We would need to add another API for that. This one can\u0027t cover arbitrary names ",
                                           "updatedAt":  "2021-02-28T15:46:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTEwOTg0Mw==",
                                           "createdAt":  "2021-03-02T18:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "@maryamariyan Could you please reopen the issue?",
                                           "updatedAt":  "2021-03-02T18:17:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTIxMzg5NQ==",
                                           "createdAt":  "2021-03-02T21:03:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "How would this work if all names aren\u0027t known up front?",
                                           "updatedAt":  "2021-03-02T21:04:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTI1NTY1NQ==",
                                           "createdAt":  "2021-03-02T22:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "In our use case all names are registered to the DI engine.\r\n\r\nI experimented a bit, and it turns out the following works for validating all named options (the alternate design I suggested):\r\n\r\n```cs\r\nservices.AddSingleton\u003cIValidateOptions\u003cMyOptions\u003e\u003e(new ValidateOptions\u003cMyOptions\u003e(null, o =\u003e Validate(o), \"invalid\"));\r\nservices.AddSingleton\u003cIValidateOptions\u003cMyOptions\u003e\u003e(new DataAnnotationValidateOptions\u003cMyOptions\u003e(null))\r\n```\r\n\r\nBut the API is not easily discoverable (passing `null` as name). Maybe consider adding extension methods for the above?",
                                           "updatedAt":  "2021-03-02T22:09:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTI1NzU2NQ==",
                                           "createdAt":  "2021-03-02T22:13:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m not sure I\u0027m following... What works. Can you describe the end to end here?",
                                           "updatedAt":  "2021-03-02T22:13:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTI2MTQzMQ==",
                                           "createdAt":  "2021-03-02T22:19:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "The problem we had was that an unexpected name was used, which retrieved an unconfigured and **unvalidated** instance of an option.\r\n\r\nI suggested 2 solutions (not mutually exclusive):\r\n* Ensure that only names that were registered could be fetched from `IOptionsMonitor\u003cT\u003e`\r\n* Enforce validation for all instances, whether pre-registered or not\r\n\r\nThe latter is possible with the above code sample.\r\n",
                                           "updatedAt":  "2021-03-02T22:20:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTI2MzExOA==",
                                           "createdAt":  "2021-03-02T22:22:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Enforce validation for all instances, whether pre-registered or not\r\n\r\nAnd this has nothing to do with validation on startup right?",
                                           "updatedAt":  "2021-03-02T22:22:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTI2MzQzOQ==",
                                           "createdAt":  "2021-03-02T22:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "Right. Validating this at start-up could be an added bonus.",
                                           "updatedAt":  "2021-03-02T22:23:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTI2OTUwMw==",
                                           "createdAt":  "2021-03-02T22:33:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Right. Validating this at start-up could be an added bonus.\r\n\r\nGot it, this only works when you specify which names up front.",
                                           "updatedAt":  "2021-03-02T22:33:33Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Options: Validate named registrations",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48052",
        "createdAt":  "2021-02-09T12:56:02Z",
        "number":  48052,
        "author":  "vanillajonathan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-26T14:15:10Z",
        "body":  "### Description\r\n\r\nWhen you use the `ValidateDataAnnotations` extension method, it only works when the configuration is bound to a section of the configuration, it does not work if you want to bind the whole configuration, not a specific extension.\r\n\r\nI expected it to work (as in an exception would be thrown) also when binding `IConfiguration` instead of `IConfigurationSection`.\r\n\r\n```cs\r\npublic static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureServices((hostContext, services) =\u003e\r\n        {\r\n            services.AddOptions\u003cApplicationOptions\u003e()\r\n                .Bind(hostContext.Configuration)\r\n                .ValidateDataAnnotations(); // Does not work\r\n\r\n            services.AddOptions\u003cFooOptions\u003e()\r\n                .Bind(hostContext.Configuration.GetSection(\"Foo\"))\r\n                .ValidateDataAnnotations(); // Does work\r\n\r\n            services.AddHostedService\u003cWorker\u003e();\r\n        });\r\n}\r\n```\r\n\r\n```cs\r\npublic class Worker : BackgroundService\r\n{\r\n    public Worker(IOptions\u003cApplicationOptions\u003e options, IOptions\u003cFoorOptions\u003e fooOptions)\r\n    {\r\n        try\r\n        {\r\n            _ = options.Value; // Does not throw\r\n            _= fooOptions.Value; // Throws\r\n        }\r\n        catch (OptionsValidationException ex)\r\n        {\r\n            // handle exception\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5.0 on Windows 10.\r\n\r\n### Other information\r\n\r\nIs having a single global \"ApplicationOptions\" class not an intended use case? Are we supposed to bind each configuration section individually, then have the constructor take an `IOptions\u003c\u003e` for each configuration section?\r\n\r\n```cs\r\npublic class Worker : BackgroundService\r\n{\r\n    public Worker(IOptions\u003cFooOptions\u003e fooOptions, IOptions\u003cBarOptions\u003e barOptions, /* ...options */)\r\n    {\r\n        try\r\n        {\r\n            _fooOptions = fooOptions.Value;\r\n            _barOoptions = barOptions.Value;\r\n           // ...options\r\n        }\r\n        catch (OptionsValidationException ex)\r\n        {\r\n            // handle exception\r\n        }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTQQzXA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTkxNjE2MA==",
                                           "createdAt":  "2021-02-09T12:56:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen you use the `ValidateDataAnnotations` extension method, it only works when the configuration is bound to a section of the configuration, it does not work if you want to bind the whole configuration, not a specific extension.\r\n\r\nI expected it to work (as in an exception would be thrown) also when binding `IConfiguration` instead of `IConfigurationSection`.\r\n\r\n```cs\r\npublic static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureServices((hostContext, services) =\u003e\r\n        {\r\n            services.AddOptions\u003cApplicationOptions\u003e()\r\n                .Bind(hostContext.Configuration)\r\n                .ValidateDataAnnotations(); // Does not work\r\n\r\n            services.AddOptions\u003cFooOptions\u003e()\r\n                .Bind(hostContext.Configuration.GetSection(\"Foo\"))\r\n                .ValidateDataAnnotations(); // Does work\r\n\r\n            services.AddHostedService\u003cWorker\u003e();\r\n        });\r\n}\r\n```\r\n\r\n```cs\r\npublic class Worker : BackgroundService\r\n{\r\n    public Worker(IOptions\u003cApplicationOptions\u003e options, IOptions\u003cFoorOptions\u003e fooOptions)\r\n    {\r\n        try\r\n        {\r\n            _ = options.Value; // Does not throw\r\n            _= fooOptions.Value; // Throws\r\n        }\r\n        catch (OptionsValidationException ex)\r\n        {\r\n            // handle exception\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 5.0 on Windows 10.\r\n\r\n### Other information\r\n\r\nIs having a single global \"ApplicationOptions\" class not an intended use case? Are we supposed to bind each configuration section individually, then have the constructor take an `IOptions\u003c\u003e` for each configuration section?\r\n\r\n```cs\r\npublic class Worker : BackgroundService\r\n{\r\n    public Worker(IOptions\u003cFooOptions\u003e fooOptions, IOptions\u003cBarOptions\u003e barOptions, /* ...options */)\r\n    {\r\n        try\r\n        {\r\n            _fooOptions = fooOptions.Value;\r\n            _barOoptions = barOptions.Value;\r\n           // ...options\r\n        }\r\n        catch (OptionsValidationException ex)\r\n        {\r\n            // handle exception\r\n        }\r\n    }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evanillajonathan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-09T12:56:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTkyMTE0Mw==",
                                           "createdAt":  "2021-02-09T13:05:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What does ApplicationOptions look like? What does your configuration look like? What are you binding?",
                                           "updatedAt":  "2021-02-09T13:05:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NjYzOTc0Nw==",
                                           "createdAt":  "2021-02-10T11:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vanillajonathan",
                                           "body":  "@davidfowl\r\n\r\nLike:\r\n\r\n```cs\r\nclass ApplicationOptions\r\n{\r\n    [Required]\r\n    public FooOptions Foo { get; set; }\r\n\r\n    [Required]\r\n    public BarOptions Bar { get; set; }\r\n}\r\n\r\nclass FooOptions\r\n{\r\n    [Required]\r\n    public string Foo1 { get; set; }\r\n\r\n    [Required]\r\n    public string Foo2 { get; set; }\r\n}\r\n\r\nclass BarOptions\r\n{\r\n    [Required]\r\n    public string Bar1 { get; set; }\r\n\r\n    [Required]\r\n    public string Bar2 { get; set; }\r\n}\r\n```\r\n\r\nThe configuration appsettings.json:\r\n```json\r\n{\r\n    \"Foo\" : {\r\n        \"Foo1\": \"\",\r\n        \"Foo2\": \"\"\r\n    },\r\n    \"Bar\" : {\r\n        \"Bar1\": \"\",\r\n        \"Bar2\": \"\"\r\n    },\r\n}\r\n```",
                                           "updatedAt":  "2021-02-10T11:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NAzf5",
                                           "createdAt":  "2022-10-26T13:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Protheon",
                                           "body":  "hi @vanillajonathan did you get this to work? i\u0027m having another extreme issue where my bind works on debug but does not work on the service, when running as a windows service. its a standard setup on .net 6 using 6.0.0 package version",
                                           "updatedAt":  "2022-10-26T13:37:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NBAth",
                                           "createdAt":  "2022-10-26T14:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vanillajonathan",
                                           "body":  "@Protheon No, I have not.",
                                           "updatedAt":  "2022-10-26T14:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NBDNc",
                                           "createdAt":  "2022-10-26T14:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Protheon",
                                           "body":  "@vanillajonathan  figured it out...i was not calling HostBuilder.UseWindowsService() which meant the content root was not properly configured. it still worked on debug, which made things more confusing. thanks for the reply though!",
                                           "updatedAt":  "2022-10-26T14:15:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Microsoft.Extensions.Configuration option does not work on configuration root",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50877",
        "createdAt":  "2021-04-07T20:24:46Z",
        "number":  50877,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T18:04:03Z",
        "body":  "Microsoft.Extensions.Options.Tests\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsWithAction\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsIfNothingFound\r\n\r\n```\r\n\r\nMicrosoft.Extensions.Options.Tests.dll   Failed: 2\r\n\r\nTest collection for Microsoft.Extensions.Options.Tests.OptionsFactoryTest\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsWithAction\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: No IConfigureOptions\u003c\u003e, IPostConfigureOpt···\\nActual:   Error_NoConfigurationServicesAndAction\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsIfNothingFound\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: No IConfigureOptions\u003c\u003e, IPostConfigureOpt···\\nActual:   Error_NoConfigurationServices\\n          ↑ (pos 0)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMJeMQg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTIzODIxMA==",
                                           "createdAt":  "2021-04-07T20:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMicrosoft.Extensions.Options.Tests\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsWithAction\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsIfNothingFound\r\n\r\n```\r\n\r\nMicrosoft.Extensions.Options.Tests.dll   Failed: 2\r\n\r\nTest collection for Microsoft.Extensions.Options.Tests.OptionsFactoryTest\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsWithAction\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: No IConfigureOptions\u003c\u003e, IPostConfigureOpt···\\nActual:   Error_NoConfigurationServicesAndAction\\n          ↑ (pos 0)\r\nMicrosoft.Extensions.Options.Tests.OptionsFactoryTest.ConfigureOptionsThrowsIfNothingFound\r\n    Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: No IConfigureOptions\u003c\u003e, IPostConfigureOpt···\\nActual:   Error_NoConfigurationServices\\n          ↑ (pos 0)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-07T20:24:51Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.Extensions.Options.Tests Fails on Android",
        "labels":  [
                       "os-android",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52485",
        "createdAt":  "2021-05-08T00:48:33Z",
        "number":  52485,
        "author":  "jonnovaretti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-14T20:11:51Z",
        "body":  "I\u0027m trying to use IOptionsMonitor for dinamic configuration with Azure AppConfiguration, the values are loaded correctly on starting the application. After started, when I update any settings on Azure App Configuration portal, the settings values keep the same.\r\n\r\nI\u0027ve already used App Configuration in a function and it works properly, but nowadays I\u0027m using WebHostedService DotNetCore.\r\n\r\n```\r\n        public static void Main()\r\n        {\r\n            var host = CreateHostBuilder().Build();            \r\n            host.Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder()\r\n        {\r\n            var host = Host.CreateDefaultBuilder()\r\n                 .ConfigureAppConfiguration((hostingContext, config) =\u003e\r\n                {\r\n                    var configuration = config.Build();\r\n\r\n                    config.AddAzureAppConfiguration(options =\u003e\r\n                    {\r\n                        options.Connect(configuration[\"ConnectionStrings:AppConfiguration\"])\r\n                               .UseFeatureFlags()\r\n                               .ConfigureRefresh(refresh =\u003e\r\n                               {\r\n                                   refresh.Register(\"RetryPolicyConfig:IntervalSecs\", true);\r\n                                   refresh.Register(\"RetryPolicyConfig:RetryCount\", true);\r\n                                   refresh.SetCacheExpiration(new TimeSpan(30, 0, 0));\r\n                               });\r\n\r\n                        _refresher = options.GetRefresher();\r\n                    });\r\n                })\r\n                .ConfigureWebHostDefaults(webBuilder =\u003e\r\n                {\r\n                    webBuilder.UseStartup\u003cStartup\u003e();\r\n                    webBuilder.ConfigureServices((w, s) =\u003e { s.AddSingleton(_refresher); });\r\n                });\r\n\r\n            return host;\r\n        }\r\n```\r\nthe IOptionsMonitor is inject in service class\r\n\r\n```\r\n        private readonly RetryPolicyConfig retryPolicyConfig;\r\n        private readonly IConfigurationRefresher _refresher;\r\n\r\n        public Service(IOptionsMonitor\u003cRetryPolicyConfig\u003e configuration, IConfigurationRefresher refresher)\r\n        {\r\n            this.configuration = configuration;\r\n            retryPolicyConfig = configuration.CurrentValue;\r\n        }\r\n\r\n        public async Task Execute(Commmand command)\r\n        {\r\n            try\r\n            {\r\n                await _refresher.TryRefreshAsync();\r\n                var retryPolicy = retryPolicyConfig.RetryCount;\r\n                var secs = retryPolicyConfig.IntervalExponentialEachRetryInSecs; //nothing happens here after updating setting by AppConfiguration\r\n```\r\n\r\nAny idea?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV4uTOA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDkxMTYzMA==",
                                           "createdAt":  "2021-05-08T00:48:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-08T00:48:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTE0Njg5MA==",
                                           "createdAt":  "2021-05-08T06:40:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "centreboard",
                                           "body":  "What\u0027s the lifetime of your service? It\u0027s resolving the current configuration value when it\u0027s constructed rather than when it\u0027s executed. If you move `retryPolicyConfig` from a field to a variable does that help?\r\n```\r\n public async Task Execute(Commmand command)\r\n    {\r\n        try\r\n        {\r\n            await _refresher.TryRefreshAsync();\r\n            \r\n            var retryPolicyConfig = this.configuration.CurrentValue;\r\n            var retryPolicy = retryPolicyConfig.RetryCount;\r\n            var secs = retryPolicyConfig.IntervalExponentialEachRetryInSecs;\r\n        }\r\n```",
                                           "updatedAt":  "2021-05-08T06:40:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTIxNTM2Mg==",
                                           "createdAt":  "2021-05-08T08:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "Are you actually updating the watched configuration settings? Configuration won\u0027t update at the client unless you explicitly update any of the \"watched\" settings and even then it can take a minimum of the refresh interval. You also need to set the `updateAll` parameter for it to trigger an update for everything and not just the Refresh triggers.\r\n\r\nI use this mechanism and it works perfectly well so I can only imagine you are triggering the wrong settings or that labels are involved and you haven\u0027t set the LabelFilter in the refresher configuration. \r\n\r\nBTW since you are using a WebHost, there\u0027s an Aspnet sibling package for that library which adds a Middleware that automatically does the refreshing for you on each request (so you don\u0027t need to track the refresher object yourself)\r\n\r\nIn any case I think this belongs in the Azure repos. ",
                                           "updatedAt":  "2021-05-08T08:44:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTM3OTY5NQ==",
                                           "createdAt":  "2021-05-08T14:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m trying to use IOptionsMonitor for dinamic configuration with Azure AppConfiguration, the values are loaded correctly on starting the application. After started, when I update any settings on Azure App Configuration portal, the settings values keep the same.\r\n\r\nI\u0027ve already used App Configuration in a function and it works properly, but nowadays I\u0027m using WebHostedService DotNetCore.\r\n\r\n`public static void Main()\r\n        {\r\n            var host = CreateHostBuilder().Build();            \r\n            host.Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder()\r\n        {\r\n            var host = Host.CreateDefaultBuilder()\r\n                 .ConfigureAppConfiguration((hostingContext, config) =\u003e\r\n                {\r\n                    var configuration = config.Build();\r\n\r\n                    config.AddAzureAppConfiguration(options =\u003e\r\n                    {\r\n                        options.Connect(configuration[\"ConnectionStrings:AppConfiguration\"])\r\n                               .UseFeatureFlags()\r\n                               .ConfigureRefresh(refresh =\u003e\r\n                               {\r\n                                   refresh.Register(\"RetryPolicyConfig:IntervalSecs\", true);\r\n                                   refresh.Register(\"RetryPolicyConfig:RetryCount\", true);\r\n                                   refresh.SetCacheExpiration(new TimeSpan(30, 0, 0));\r\n                               });\r\n\r\n                        _refresher = options.GetRefresher();\r\n                    });\r\n                })\r\n                .ConfigureWebHostDefaults(webBuilder =\u003e\r\n                {\r\n                    webBuilder.UseStartup\u003cStartup\u003e();\r\n                    webBuilder.ConfigureServices((w, s) =\u003e { s.AddSingleton(_refresher); });\r\n                });\r\n\r\n            return host;\r\n        }\r\n`\r\nthe IOptionsMonitor is inject in service class\r\n\r\n` private readonly RetryPolicyConfig retryPolicyConfig;\r\n        private readonly IConfigurationRefresher _refresher;\r\n\r\n        public Service(IOptionsMonitor\u003cRetryPolicyConfig\u003e configuration, IConfigurationRefresher refresher)\r\n        {\r\n            this.configuration = configuration;\r\n            retryPolicyConfig = configuration.CurrentValue;\r\n        }\r\n\r\n        public async Task Execute(Commmand command)\r\n        {\r\n            try\r\n            {\r\n                await _refresher.TryRefreshAsync();\r\n                var retryPolicy = retryPolicyConfig.RetryCount;\r\n                var secs = retryPolicyConfig.IntervalExponentialEachRetryInSecs; //nothing happens here after updating setting by AppConfiguration`\r\n\r\nAny idea?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejonnovaretti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-08T14:13:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43LzPb",
                                           "createdAt":  "2021-09-23T13:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommck",
                                           "body":  "Wait.. seriously?  This doesn\u0027t work?  I was just wondering why it seemed like it wasn\u0027t and started googling.  If this doesn\u0027t work, that\u0027s a major problem!\r\n\r\nDo we at least have a workaround for this?",
                                           "updatedAt":  "2021-09-23T13:56:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XiHJr",
                                           "createdAt":  "2023-03-14T17:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MRRQX",
                                           "body":  "I was able to confirm the firing of `IOptionsMontior.OnChange()`. \r\n\r\nThe \u0027gotcha\u0027 is you have to call `IConfigurationRefresher.TryRefreshAsync()` after the timespan passed to `IConfigurationRefresher.ProcessPushNotification()` has lapsed. The default value is a random time between 0-30 seconds.\r\n\r\n```\r\n_refresher.ProcessPushNotification(notification, TimeSpan.Zero);\r\n\r\nawait _refresher.TryRefreshAsync();\r\n```\r\n",
                                           "updatedAt":  "2023-03-14T17:51:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xi5M4",
                                           "createdAt":  "2023-03-14T20:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "@MRRQX if this is a web app, the Middleware provided by [this Azure maintained package](https://www.nuget.org/packages/Microsoft.Azure.AppConfiguration.AspNetCore) will do that for you automatically, assuming you\u0027re receiving traffic ",
                                           "updatedAt":  "2023-03-14T20:11:51Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "IOptionsMonitor doesn\u0027t work dinamically with Azure AppConfiguration",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53793",
        "createdAt":  "2021-06-06T23:15:20Z",
        "number":  53793,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1DxkQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tompazourek",
                                            "createdAt":  "2021-10-29T10:37:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hammypants",
                                            "createdAt":  "2022-03-02T01:21:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmitriyse",
                                            "createdAt":  "2023-07-25T22:04:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JeffMathewSyngenta",
                                            "createdAt":  "2024-01-09T16:28:39Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-02-04T07:50:04Z",
        "body":  "This came up after a perf investigation on a recently refactored endpoint. Moving us back from IOptionsSnapshot to IOptionsMonitor knocked off ~100us, nothing else changed.\r\n\r\nThis option type of ours is fairly costly to create and looking into `OptionsManager\u003cTOptions\u003e` showed an obvious clue why we saw issues. `OptionsManager` does not just cache the instance for the duration of the DI scope but it also *creates* from scratch an instance through the factory *per scope*.\r\n\r\nLooking through the docs this is vaguely alluded to (though there are contra-indicators) but after doing a search on SO and blogs on the subject most users seem to focus entirely on the \u0027you get a constant value during a scope/request\u0027 aspect of it. \r\n\r\nAs nobody (famous last words) seems to care whether it is entirely recreated my question would be: \r\nWhy doesn\u0027t `OptionsManager\u003cTOptions\u003e` cache the result of an `IOptionsMonitor.Get` call? (leaving out the backwards compatibility part for the sake of argument)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOipZXbw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTQ3ODk4Ng==",
                                           "createdAt":  "2021-06-06T23:15:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis came up after a perf investigation on a recently refactored endpoint. Moving us back from IOptionsSnapshot to IOptionsMonitor knocked off ~100us, nothing else changed.\r\n\r\nThis option type of ours is fairly costly to create, and looking into `OptionsManager\u003cTOptions\u003e` showed an obvious clue why we saw issues. `OptionsManager` does not just cache the instance for the duration of the DI scope but it also *creates* from scratch an instance through the factory *per request*. \r\n\r\nLooking through the docs this is vaguely alluded to (though there are contra-indicators) but after doing a search on SO and blogs on the subject most users seem to focus entirely on the \u0027you get a constant value during a scope/request\u0027 aspect of it. \r\n\r\nAs nobody (famous last words) seems to care whether it is entirely recreated my question would be: \r\nWhy doesn\u0027t `OptionsManager\u003cTOptions\u003e` cache the result of an `IOptionsMonitor.Get` call? (leaving out the backwards compatibility part for the sake of argument)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNinoFloris\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-06T23:15:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTQ4Mjc0MQ==",
                                           "createdAt":  "2021-06-06T23:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwcK1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-30T15:16:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes this is a known issue https://github.com/dotnet/runtime/issues/42222. IOptionsSnapshot is currently a performance trap.\r\n\r\n\u003e As nobody (famous last words) seems to care whether it is entirely recreated my question would be:\r\nWhy doesn\u0027t OptionsManager\u003cTOptions\u003e cache the result of an IOptionsMonitor.Get call? (leaving out the backwards compatibility part for the sake of argument)\r\n\r\nAgreed that this implementation would  have been more efficient. My only guess as to why it was done this way was because we had unified IOptions and IOptionsSnapsot implementations via the OptionsManager (though that\u0027s now changed in .NET 6).\r\n\r\nThe sad truth is that it would have been fixed if our own components were using it.\r\n\r\nI\u0027d be willing to take this change and see if there was any real impact not re-running factories per request. There are some very subtle differences but maybe worth the break.\r\n\r\n\r\ncc @HaoK to see if he remembers why it was done this way.\r\n",
                                           "updatedAt":  "2021-06-06T23:41:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTQ4NDk0MA==",
                                           "createdAt":  "2021-06-06T23:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "The original idea was:\r\nIOptions is singleton and cached forever\r\nIOptionsSnapshot is supposed to be scoped and recomputed per request (which is fine for some things, that don\u0027t involve config) (mostly exists for backcompat)\r\nIOptionsMonitor is supposed to combine the ability to have options updates with caching semantics, change notifications and cache eviction",
                                           "updatedAt":  "2021-06-06T23:59:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTQ4NTk4Ng==",
                                           "createdAt":  "2021-06-07T00:04:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcxxPw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OleksandrBorovenskyi",
                                                                               "createdAt":  "2023-08-22T15:05:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marlonchosky",
                                                                               "createdAt":  "2024-04-03T01:30:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "HaoK",
                                           "body":  "If we are talking specifically about IOptionsSnapshot, that was intended to be really the no-caching you get a really new fresh instance on every scope, so it literally was intended to recompute everything on every request",
                                           "updatedAt":  "2021-06-07T00:04:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTUyODQ4OQ==",
                                           "createdAt":  "2021-06-07T02:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFA6dQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2021-06-07T12:57:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nbarbettini",
                                                                               "createdAt":  "2021-09-20T14:14:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tompazourek",
                                                                               "createdAt":  "2021-10-29T10:46:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benjamin-stern",
                                                                               "createdAt":  "2022-05-02T00:39:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aelbatal-arabdt",
                                                                               "createdAt":  "2022-10-05T09:01:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2022-11-23T17:17:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgulrich",
                                                                               "createdAt":  "2022-12-13T15:06:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cdschneider",
                                                                               "createdAt":  "2023-11-07T15:45:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ravindUwU",
                                                                               "createdAt":  "2023-12-11T03:26:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-30T15:17:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BershadskyArtem",
                                                                               "createdAt":  "2025-02-03T13:42:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Right. We should consider changing the implementation so that it caches the currently cached value so scoped services are a consistent view of the data but there\u0027s no need to recompute if nothing changes ",
                                           "updatedAt":  "2021-06-07T02:14:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDgxMjE3OQ==",
                                           "createdAt":  "2021-07-15T15:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@davidfowl I see it\u0027s been placed in 7.0 is a PR for 6.0 still welcome?",
                                           "updatedAt":  "2021-07-15T15:55:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDgxNzE3Ng==",
                                           "createdAt":  "2021-07-15T16:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes, if you send a PR, it can be done without adding public API (I believe).",
                                           "updatedAt":  "2021-07-15T16:01:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDgxODU5Nw==",
                                           "createdAt":  "2021-07-15T16:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAboIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-07-15T19:20:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tompazourek",
                                                                               "createdAt":  "2021-10-29T10:46:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "I agree, alright will be cooking it up.",
                                           "updatedAt":  "2021-07-15T16:03:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ilLu",
                                           "createdAt":  "2021-07-16T14:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@davidfowl started work on it just now, practically the change is extremely simple * if * OptionsManager can take IOptionsMonitor instead of IOptionsFactory. This does mean an api compat error for the constructor, what\u0027s the policy on those? Alternatively I could duplicate the OptionsMonitor code into OptionsManager as that\u0027s as good as it gets with access to just IOptionsFactory.\r\n\r\nhttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Options/src/OptionsManager.cs#L17-L27\r\n\r\nIdeally I\u0027d also inline that silly cache (which is only used in OptionsManager) but it\u0027s a public type so I guess that\u0027s a no ;)",
                                           "updatedAt":  "2021-07-16T14:11:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ipdA",
                                           "createdAt":  "2021-07-16T14:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Or just make a new internal type so we don\u0027t need to change the public surface here. Call it OptionsSnapshot\\\u003cT\\\u003e",
                                           "updatedAt":  "2021-07-16T14:36:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uWkx",
                                           "createdAt":  "2021-08-18T18:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pentp",
                                           "body":  "This should be re-opened since it was reverted in #57570?",
                                           "updatedAt":  "2021-08-18T18:41:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uXYB",
                                           "createdAt":  "2021-08-18T18:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Yes - good call, I had forgotten.",
                                           "updatedAt":  "2021-08-18T18:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ucwE",
                                           "createdAt":  "2021-08-18T19:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So the performance issue is by design but the thing that can be cached here is the parsing of configuration. We should be able to only read that once until it changes, VS reading it once per request. The scoped `IConfigureOptions\u003cT\u003e` need to run per call, that\u0027s by design and can use arbitrary scoped services to change the options value.",
                                           "updatedAt":  "2021-08-18T19:21:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ueAx",
                                           "createdAt":  "2021-08-18T19:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Without doing some hacky diffing how would you propose to request just the IConfigureOptions\u003cT\u003e that have a scoped registration?",
                                           "updatedAt":  "2021-08-18T19:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ztho",
                                           "createdAt":  "2021-08-20T14:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAbpLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tompazourek",
                                                                               "createdAt":  "2021-10-29T10:49:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@davidfowl that was an honest question, I would like to fix it up but suggestions are welcome.",
                                           "updatedAt":  "2021-08-20T14:49:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43sTv_",
                                           "createdAt":  "2021-10-05T12:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitriyse",
                                           "body":  "IMHO the root problem of the **interface** ```IOptionsSnapshot\u003cT\u003e``` that it\u0027s suitable for multiple scenarios:\r\n1) It allows to fix configuration state at the beginning of request and be consistent among scoped services.\r\n2) It allows to write clean code, if it enough for us to get options only time per lifetime scope and don\u0027t track changes during the scope lifetime, we can prefer ```IOptionsShapshot\u003cT\u003e``` over ```IOptionsMonitor\u003cT\u003e``` to express it.\r\n3) It allows to recalculate options always in each scope. **Only this scenario creates the performance problem as we unable to cache the value between scopes.**\r\n\r\nDocumentation states that ```IOptionsSnapshot\u003cT\u003e``` at once suitable for all scenarios, \r\nWe can keep all this without changes.\r\n\r\nif developer know that each subsequent recalculation will give the same result (in between of configuration change events), then he can enable caching and it will be an **optimization**. \r\n\r\nWe can at the time of services registration **explicitly allow** caching of the ```IOptionsSnapshot\u003cT\u003e``` among scopes.\r\n\r\nImplementation idea:\r\nThe registration logic could be extended.\r\n```CSharp\r\n        public static IServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, string name, IConfiguration config, Action\u003cBinderOptions\u003e configureBinder, \r\n           bool allowCaching // New argument\r\n)\r\n            where TOptions : class\r\n        {\r\n            if (services == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(services));\r\n            }\r\n\r\n            if (config == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(config));\r\n            }\r\n\r\n            services.AddOptions()\r\n            services.AddSingleton\u003cIOptionsChangeTokenSource\u003cTOptions\u003e\u003e(new ConfigurationChangeTokenSource\u003cTOptions\u003e(name, config));\r\n            \r\n            if (allowCaching)\r\n            {\r\n                 // Hope DI supports overriding of open generics by specific registrations.\r\n                 services.AddScoped\u003cIOptionsSnapshot\u003cT\u003e, OptionsSnapshotCached\u003cT\u003e\u003e();\r\n            }\r\n            return services.AddSingleton\u003cIConfigureOptions\u003cTOptions\u003e\u003e(new NamedConfigureFromConfigurationOptions\u003cTOptions\u003e(name, config, configureBinder));\r\n        }\r\n        \r\n    // Just an idea, final code should be well implemented with various optimizations\r\n    public class OptionsSnapshotCached\u003cT\u003e: IOptionsSnapshot\u003cT\u003e\r\n    {\r\n        private readonly ConcurrentDictionary\u003cstring, T\u003e _scopeCache = new (); \r\n        private readonly IOptionsMonitor\u003cT\u003e _optionsMonitor;\r\n        public OptionsSnapshotCached(IOptionsMonitor\u003cT\u003e optionsMonitor)\r\n        {\r\n             _optionsMonitor = optionsMonitor;\r\n        }\r\n        public T Value =\u003e _scopeCache.GetOrAdd(string.Empty, _ =\u003e_optionsMonitor.Value);\r\n        public T Get(string name) =\u003e _scopeCache.GetOrAdd(name, key =\u003e _optionsMonitor.Get(key));\r\n    }\r\n```",
                                           "updatedAt":  "2021-10-05T12:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc445tpE",
                                           "createdAt":  "2021-10-29T11:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tompazourek",
                                           "body":  "\u003e So the performance issue is by design but the thing that can be cached here is the parsing of configuration. We should be able to only read that once until it changes, VS reading it once per request.\r\n\r\nHowever, there\u0027s a possible issue. Parsing of the configuration applies the configuration values to an existing `TOptions` instance. And it\u0027s possible that the existing `TOptions` instance is different each time depending on which scoped `IConfigureOptions` services were executed before the configuration-binding `IConfigureOptions`. I\u0027m not sure which part can actually be cached given how the configuration binding currently works. Maybe if the entire configuration binding would be rewritten (something like #36130) so it\u0027s blazing fast and has some sort of caching inside of it, then this whole issue with `IOptionsSnapshot` being slow would disappear. But as the configuration binding is currently written, I\u0027m not sure what\u0027s there to cache...\r\n\r\n\u003e The scoped IConfigureOptions\u003cT\u003e need to run per call, that\u0027s by design and can use arbitrary scoped services to change the options value.\r\n\r\nTo be honest, I don\u0027t like that `IOptionsSnapshot\u003cT\u003e` has this hidden by-design difference from `IOptionsMonitor\u003cT\u003e` very much. I think it would be much simpler to understand if it was just a more limited version of `IOptionsMonitor\u003cT\u003e`. Just something that you use if you don\u0027t need the full monitoring features, not something that sometimes applies changes that even the supposedly \u0027more powerful\" `IOptionsMonitor\u003cT\u003e` doesn\u0027t detect. But on the other hand, I cannot tell if you would be willing to accept a breaking change like that (based on the reverted PR, probably not?).\r\n\r\nIf it\u0027s really by design, it should at least be documented (maybe we can contribute with a documentation update PR?) as this behavior is not obvious.",
                                           "updatedAt":  "2021-11-03T06:25:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49USEY",
                                           "createdAt":  "2022-02-03T08:34:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Have you profiled where the performance bottle-neck is? \r\n",
                                           "updatedAt":  "2022-02-03T08:34:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49UVzx",
                                           "createdAt":  "2022-02-03T08:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Some micro-optimization/workaround would be not using anonymous methods, because they are currently not optimized by jit [^1].\r\n\u003chttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Options/src/OptionsManager.cs#L46\u003e\r\n\r\n[^1]: Also some case not using delegates: https://github.com/dotnet/runtime/issues/61086",
                                           "updatedAt":  "2022-02-03T08:53:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49VdLt",
                                           "createdAt":  "2022-02-03T14:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "OptionsManager.Get seems fine...\r\n\r\n![image](https://user-images.githubusercontent.com/10373452/152360171-76e49e7f-e3c0-4682-8e64-7ae7387968ed.png)\r\n\r\nThe bottleneck is the `ConcurrentDictionary`",
                                           "updatedAt":  "2022-02-03T14:17:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49VeDN",
                                           "createdAt":  "2022-02-03T14:21:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwGBFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benjamin-stern",
                                                                               "createdAt":  "2022-05-02T00:43:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2022-11-23T17:23:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tompazourek",
                                           "body":  "@deeprobin I think the bottleneck is this: #33954. And if we use `IOptionsSnapshot`, it runs on every request. If we use `IOptionsMonitor`, it runs once, and then it\u0027s cached until the configuration is changed (and reloaded). I encourage you to try this with IConfiguration that contains several thousand key-value pairs (and nesting, etc.)",
                                           "updatedAt":  "2022-02-03T14:22:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49XvvZ",
                                           "createdAt":  "2022-02-04T05:02:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@tompazourek is right. The problem is the rebinding per request.",
                                           "updatedAt":  "2022-02-04T05:02:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HfZ59",
                                           "createdAt":  "2022-07-29T14:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Blackclaws",
                                           "body":  "There is also a difference in behavior if your code doesn\u0027t properly track what causes configuration to change.\r\n\r\nYou can write something like this:\r\n```csharp\r\nclass TestOptionsConfigure : IConfigureOptions\u003cTestOptions\u003e\r\n{\r\n    private IConfiguration _root;\r\n    private ILogger\u003cTestOptionsConfigure\u003e _logger;\r\n    public TestOptionsConfigure(IConfiguration root, ILogger\u003cTestOptionsConfigure\u003e logger)\r\n    {\r\n        _root = root;\r\n        _logger = logger;\r\n        _logger.LogError(\"Constructed\");\r\n    }\r\n    \r\n    public void Configure(TestOptions options)\r\n    {\r\n        var sec = _root.GetSection(\"Test\");\r\n        if (sec != null)\r\n        {\r\n            options.Val = sec[\"Value\"];\r\n        }\r\n        _logger.LogError(\"Configured\");\r\n    }\r\n}\r\n```\r\n\r\nIf you add this to the service collection, it will get called each time for IOptionsSnapshot but only once for IOptionsMonitor, even if you change the configuration underneath. \r\n\r\nIOptionsMonitor only gets notified of changes if you actually bind configuration on adding options, not if you just use IConfigureOptions classes.",
                                           "updatedAt":  "2022-07-29T14:37:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPVNq",
                                           "createdAt":  "2023-07-24T15:56:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "profet23",
                                           "body":  "Has there been any movement on this?\r\n\r\nThis is a significant pain point. \r\n\r\nMy naïve take is that whatever is building the IOptionSnapshots should just use IOptionsMonitor internally and only re-bind when a change event occurs. So at least then MOST requests wouldn\u0027t have to rebind.",
                                           "updatedAt":  "2023-07-24T15:56:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ7MY",
                                           "createdAt":  "2023-07-24T20:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitriyse",
                                           "body":  "@profet23,  `IOptionsSnapshot` also is used for the scenario when each request (scope) can have different version (state) of the options. That why it was decided to be always re-populated from IConfiguration on each request. So the mapping logic can respect the context of the request (scope).",
                                           "updatedAt":  "2023-07-24T20:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ7oa",
                                           "createdAt":  "2023-07-24T20:59:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitriyse",
                                           "body":  "Yes it would be great to have the official support of both: per-context state + caching (probably with custom key calculated from the request). And yest the cache should be invalidated once the configuration changes.",
                                           "updatedAt":  "2023-07-24T20:59:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iRRBz",
                                           "createdAt":  "2023-07-24T22:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBqbEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dmitriyse",
                                                                               "createdAt":  "2023-07-24T23:54:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "profet23",
                                                                               "createdAt":  "2023-07-25T00:50:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "IOptionsSnapshot can\u0027t use IOptionsMonitor. In fact, we tried to do that in .NET 7 and it is a major breaking change. IOptionsSnapshot supports injecting scoped `IConfigureOptions\u003cT\u003e`. That\u0027s the problem.\r\n\r\nThe combination of IOptionsSnapshot with uncached configuration binding is a performance pit of failure worth investigating. Specifically, the problem is that calling:\r\n\r\n",
                                           "updatedAt":  "2023-07-24T23:24:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iSPEG",
                                           "createdAt":  "2023-07-25T02:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "To do anything useful here we\u0027d need something like the API I proposed in https://github.com/dotnet/runtime/issues/36130#issuecomment-717910325. This is essentially what the new configuration source generator does today so it\u0027s possible that is a reasonable mitigation for this.",
                                           "updatedAt":  "2023-07-25T02:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iTldW",
                                           "createdAt":  "2023-07-25T07:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBw5uA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-07-25T18:43:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tompazourek",
                                           "body":  "\u003e To do anything useful here we\u0027d need something like the API I proposed in [#36130 (comment)](https://github.com/dotnet/runtime/issues/36130#issuecomment-717910325). This is essentially what the new configuration source generator does today so it\u0027s possible that is a reasonable mitigation for this.\r\n\r\nThis is a similar solution that I implemented as a workaround for issue in our code. I ended up writing an extension to provide a custom binder, and wrote some binders by hand that were written for the exact types used. It performed very well.\r\n\r\nA source generator that will generate similar code as the one I wrote by hand sounds like a very good solution to me.",
                                           "updatedAt":  "2023-07-25T12:45:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iVTat",
                                           "createdAt":  "2023-07-25T12:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "profet23",
                                           "body":  "@davidfowl I understand that this isn\u0027t a one size all solution and that this does not behave 1:1 with the current implementation of IOptionsSnapshot, but I am curious how much would break with this:\r\n\r\n```csharp\r\n\tpublic static IServiceCollection AddFastOptions(this IServiceCollection services)\r\n\t{\r\n\t\tvar descriptor = services.Single(descriptor =\u003e descriptor.ServiceType == typeof(IOptionsSnapshot\u003c\u003e));\r\n\t\tservices.Remove(descriptor);\r\n\r\n\t\tservices.AddScoped(typeof(IOptionsSnapshot\u003c\u003e), typeof(FastOptionsSnapshot\u003c\u003e));\r\n\r\n\t\treturn services;\r\n\t}\r\n\r\n\tpublic class FastOptionsSnapshot\u003cTOptions\u003e : IOptionsSnapshot\u003cTOptions\u003e where TOptions : class\r\n\t{\r\n\t\tprivate readonly IOptionsMonitor\u003cTOptions\u003e monitor;\r\n\t\tprivate readonly ConcurrentDictionary\u003cstring, TOptions\u003e namedValuesDictionary = new ConcurrentDictionary\u003cstring, TOptions\u003e();\r\n\r\n\t\tpublic FastOptionsSnapshot(IOptionsMonitor\u003cTOptions\u003e monitor)\r\n\t\t{\r\n\t\t\tthis.monitor = monitor;\r\n\t\t\tthis.Value = monitor.CurrentValue;\r\n\t\t}\r\n\r\n\t\tpublic TOptions Value { get; }\r\n\r\n\t        public TOptions Get(string name)\r\n\t        {\r\n\t\t        name ??= Options.DefaultName;\r\n        \r\n\t\t        namedValuesDictionary.TryAdd(name, monitor.Get(name));\r\n        \r\n\t\t        return namedValuesDictionary[name];\r\n\t        }\r\n\t}\r\n```\r\n\r\nAgain, understanding that this maintains the same TOptions for each scope lifetime. But does not maintain that the entire configuration is the same for each scope.\r\n\r\nThat said, this is a significant performance boost. Between 200 and 600ms per request (for my use case).\r\n\r\n\r\nEDIT: Updated the non relevant Dictionary snippet because people keep talking about it, and not the actual issue.",
                                           "updatedAt":  "2023-07-25T19:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iVZZV",
                                           "createdAt":  "2023-07-25T12:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "@profet23 Your `FastOptionsSnapshot` uses `Dictionary` instead of `ConcurrentDictionary`. However, you are locking the dictionary and therefore I don\u0027t think there should be a problem from a concurrency point of view.\r\n\r\nI just wonder if the tide turns with the total number of options. This should be analyzed.",
                                           "updatedAt":  "2023-07-25T12:47:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iXnEw",
                                           "createdAt":  "2023-07-25T18:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "https://github.com/dotnet/runtime/pull/56271",
                                           "updatedAt":  "2023-07-25T18:46:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iXsHM",
                                           "createdAt":  "2023-07-25T19:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@profet23, your code lets a thread read the dictionary without locking, while another thread is writing. That combination is not safe for System.Collections.Generic.Dictionary\\\u003cTKey, TValue\\\u003e, although it is safe for System.Collections.Hashtable.",
                                           "updatedAt":  "2023-07-25T19:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iX3CF",
                                           "createdAt":  "2023-07-25T19:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "profet23",
                                           "body":  "\u003e #56271\r\n\r\n@davidfowl  Are there any linkable examples of the following?\r\n\r\n\u003e I think we\u0027re going to have to revert this PR. It breaks scoped services contributing to the value of options snapshots (I now see the tests were changed here to account for those changes).\r\n\r\n",
                                           "updatedAt":  "2023-07-25T19:36:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iYMHI",
                                           "createdAt":  "2023-07-25T20:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "[This deleted line](https://github.com/dotnet/runtime/pull/56271/files#diff-657819006b55c55f0740950d11f2e38a8ef37029922f800b3f94ea57186b787cL136) needs to continue working.",
                                           "updatedAt":  "2023-07-25T20:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5idY2s",
                                           "createdAt":  "2023-07-26T14:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "profet23",
                                           "body":  "This isn\u0027t a fix, but more of a workaround for the current \"performance pit of failure\".\r\nThis implementation is aware that using `IOptionsMonitor` is not possible for scoped `IConfiguredOptions`.\r\n\r\n```csharp\r\npublic static IServiceCollection AddFastOptions(this IServiceCollection services)\r\n{\r\n\tvar descriptor = services.Single(descriptor =\u003e descriptor.ServiceType == typeof(IOptionsSnapshot\u003c\u003e));\r\n\tservices.Remove(descriptor); \r\n\tservices.Add(new ServiceDescriptor(descriptor.ImplementationType!, descriptor.ImplementationType!, descriptor.Lifetime));\r\n  \r\n\tservices.AddScoped(typeof(IOptionsSnapshot\u003c\u003e), typeof(FastOptionsSnapshot\u003c\u003e));\r\n  \r\n\treturn services;\r\n}\r\n\r\npublic class FastOptionsSnapshot\u003cTOptions\u003e : IOptionsSnapshot\u003cTOptions\u003e where TOptions : class\r\n{\r\n\tprivate readonly IServiceProvider serviceProvider;\r\n\tprivate readonly IOptionsMonitor\u003cTOptions\u003e? monitor;\r\n\tprivate readonly ConcurrentDictionary\u003cstring, TOptions\u003e namedValuesDictionary = new ConcurrentDictionary\u003cstring, TOptions\u003e();\r\n\r\n\tpublic FastOptionsSnapshot(IServiceProvider serviceProvider)\r\n\t{\r\n\t\tthis.serviceProvider = serviceProvider;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tmonitor = serviceProvider.GetService(typeof(IOptionsMonitor\u003cTOptions\u003e)) as IOptionsMonitor\u003cTOptions\u003e;\r\n\t\t}\r\n\t\tcatch (InvalidOperationException)\r\n\t\t{\r\n\t\t\t// Swallow the exception and continue without the monitor.\r\n\t\t\t// This means that the type contains at least one scoped option and we\u0027ll need to fall back to OptionsManager (slow) later.\r\n\t\t}\r\n\t}\r\n\r\n\tpublic TOptions Value =\u003e Get(null);\r\n\r\n\tpublic TOptions Get(string? name)\r\n\t{\r\n\t\tname ??= Options.DefaultName;\r\n\r\n\t\tvar value =  monitor?.Get(name) ?? ((OptionsManager\u003cTOptions\u003e) serviceProvider.GetRequiredService(typeof(OptionsManager\u003cTOptions\u003e))).Get(name);\r\n\r\n\t\tnamedValuesDictionary.TryAdd(name, value);\r\n\r\n\t\treturn namedValuesDictionary[name];\r\n\t}\r\n}\r\n```\r\n\r\nIdea being, use the `IOptionsMonitor` value when possible, but fallback to the existing `OptionsManager` (slow) when a scoped option exists.\r\n\r\nAgain, this is a bit hacky, but the performance of the default `OptionsManager` is such that I think it is worth the added complexity.",
                                           "updatedAt":  "2023-07-26T14:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ieLbA",
                                           "createdAt":  "2023-07-26T15:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODB4HYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "profet23",
                                                                               "createdAt":  "2023-07-26T15:52:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes it’s a workaround that we can’t ship but you can use in your apps if they don’t hit this scenario ",
                                           "updatedAt":  "2023-07-26T15:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5if2Z2",
                                           "createdAt":  "2023-07-26T21:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "profet23",
                                           "body":  "\u003e Yes it’s a workaround that we can’t ship but you can use in your apps if they don’t hit this scenario\r\n\r\nUnderstood. \r\n\r\nBut if others find it useful, I\u0027ve published my workaround:\r\n\r\nhttps://github.com/sermo/FastOptions",
                                           "updatedAt":  "2023-07-26T21:24:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ihaft",
                                           "createdAt":  "2023-07-27T05:16:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Is there anything we can optimize in [`ConcurrentDictionary`](https://github.com/dotnet/runtime/blob/8f70860b23845e7b6a2fc31c1edf699d3ee2935d/src/libraries/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs#L896-L1031)?\r\n\r\nThe code looks quite complex.\r\nBut probably complex enough to support access from multiple threads.",
                                           "updatedAt":  "2023-07-27T05:16:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ijFL9",
                                           "createdAt":  "2023-07-27T10:41:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@deeprobin what is it that you’re attempting to fix?",
                                           "updatedAt":  "2023-07-27T10:41:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58HVjb",
                                           "createdAt":  "2024-04-29T09:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "renrutsirhc",
                                           "body":  "@NinoFloris @davidfowl How slow is very slow? I\u0027m currently troubleshooting a performance issue in an application that seems to point to IOptionsSnapshot being passed into the InvokeAsync method in a custom middleware component. We are seeing Waiting times of 30 seconds or more for Framework/Library Lazy`1.CreateValue in application insights profiler on some requests while others sail through just fine. Could this performance issue be attributed to this issue with IOptionsSnapshot or is this orders of magnitude slower than what has been discussed here previously?",
                                           "updatedAt":  "2024-04-29T20:28:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-AZZV",
                                           "createdAt":  "2024-05-16T05:02:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiFzFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "profet23",
                                                                               "createdAt":  "2024-05-16T18:04:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This came up again today and to move this forward without breaking changes is to Iintroduce IOptionsMonitorSnapshot\\\u003cT\\\u003e that was what the original fix by @NinoFloris had. This new type would be scoped and would read the current value from `IOptionsMonitor\u003cT\u003e`. This solves the performance issues with IOptionsSnapshot because it doesn\u0027t do anything but cache the last value (which itself is cached and only changes when config changes).\r\n\r\nThe biggest performance challenge is the mixing `IOptionSnapshot\u003cT\u003e` with any expensive operation in `IConfigureOptions\u003cT\u003e`. The most common problem is running configuration binding per scope (usually per request in asp.net core). We want to cache the configuration that was bound until it changes, applying those cached values to the object. This is a difficult to do efficiently and would require codegen to make it fast (basically generating left hand right handcode to copy values):\r\n\r\n```C#\r\nclass CachedConfigureFromConfiguration\u003cT\u003e(IConfiguration configuration) : IConfigureOptions\u003cT\u003e where T : class\r\n{\r\n    private T? _cached;\r\n\r\n    public void Configure(T options)\r\n    {\r\n        // Read the cached value\r\n        var cache = _cached;\r\n\r\n        if (cache is null)\r\n        {\r\n            // If it\u0027s null, bind the configuration to a new instance and cache it\r\n            _cached = Activator.CreateInstance\u003cT\u003e();\r\n\r\n            ConfigurationBinder.Bind(configuration, _cached);\r\n\r\n            cache = _cached;\r\n\r\n            // Register a change callback to clear the cache\r\n            configuration.GetReloadToken().RegisterChangeCallback(static t =\u003e\r\n            {\r\n                // Clear the cache when the configuration changes\r\n                ((CachedConfigureFromConfiguration\u003cT\u003e)t!)._cached = null;\r\n            }, \r\n            this);\r\n        }\r\n\r\n        ApplyFromCached(cache, options);\r\n    }\r\n\r\n    private void ApplyFromCached(T cache, T options)\r\n    {\r\n        // Copy the cached options to the provided options instance\r\n        // this would need to match the rules of what configuration binding would have done\r\n    }\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-05-16T05:02:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KS37v",
                                           "createdAt":  "2024-08-30T06:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMGrAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "frg",
                                                                               "createdAt":  "2025-03-29T21:55:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "WAcry",
                                           "body":  "Performance Comparison Between IOptionsSnapshot and IOptionsMonitor with Deep Cloning\n\nWe\u0027ve obviously had a long discussion here. If I understand correctly, ensuring that each scope\u0027s configurations remain independent—allowing modifications in different scopes—makes it challenging to have caching. However, I want to raise something new here.\n\nIssue:\nIn our distributed .NET application, using `IOptionsSnapshot` to handle complex configurations for each user (for A/B tests, so each request has a isolated settings and we overwrite them with different experiment config overwrites) has led to performance bottlenecks. Profiling revealed that configuration binding was consuming approximately **16% of the total CPU workload**.\n\nKey Observation:\nDespite our assumption that `IOptionsSnapshot`\u0027s performance should be comparable to deserializing the configuration from a string for each request, this was not the case in fact. Simplified benchmark test results showed **a 10x gap in cpu and memory allocations** (see code at the bottom), and in our production environment with more complex configurations, the gap widened to **over 100x**.\n\nSpecifically, we benchmarked `IOptionsSnapshot` against a custom solution that used `IOptionsMonitor` and **deep cloning** of the configuration for each request (using serialization and deserialization, which is clearly not optimal and only for testing purposes):\n\n| Method               | Mean      | Error     | StdDev    | Gen0    | Allocated  |\n| -------------------- | --------- | --------- | --------- | ------- | ---------- |\n| UseOptionsSnapshot   | 223.15 us | 4.399 us  | 4.115 us  | 10.0098 | 123.78 KB  |\n| CloneOptionsMonitor  | 23.23 us  | 0.453 us  | 0.484 us  | 0.9155  | 11.49 KB   |\n\nSolution:\nWe switched to using `IOptionsMonitor`, and performed deep cloning with a third-party library (`DeepCloner`). This reduced real CPU workload by 16% and memory allocation by 12%. The configuration-related CPU and memory allocation overheads were reduced by hundreds of times. The one line code change was as follows:\n\n```csharp\nservices.AddScoped\u003cIServiceContext\u003e(sp =\u003e new ServiceContext()\n{\n    Logger = sp.GetRequiredService\u003cIRequestLevelLogger\u003e(),\n-   Settings = sp.GetRequiredService\u003cIOptionsSnapshot\u003cSettings\u003e\u003e().Value,\n+   Settings = sp.GetRequiredService\u003cIOptionsMonitor\u003cSettings\u003e\u003e()?.CurrentValue.DeepClone(),\n});\n```\n\nI believe these two lines are actually behave the same way, cloning and create a isolated scope level configuration which can be changed and will only have impacts inside the scope.\nI understand the runtime lacks a generic deep clone implementation, but isn\u0027t the performance gap of IOptionsSnapshot so extreme? I believe there must be some room for improvement. If it\u0027s impossible, maybe we should just never use IOptionsSnapshot in any cases. The configuration builder bind methods are too expensive. Any thoughts on this?\n\n\nBenchmark code:\n\n```\nusing System.Text.Json;\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\n\nnamespace ConfigBenchmarks;\n\npublic class ComplexConfig\n{\n    public string Name { get; set; }\n    public int Value { get; set; }\n    public List\u003cSubConfig\u003e SubConfigs { get; set; }\n    public Dictionary\u003cstring, NestedConfig\u003e NestedConfigs { get; set; }\n    public List\u003cExtraNestedConfig\u003e ExtraNestedConfigs { get; set; }\n\n    public ComplexConfig? Clone()\n    {\n        var json = JsonSerializer.Serialize(this);\n        return JsonSerializer.Deserialize\u003cComplexConfig\u003e(json);\n    }\n}\n\npublic class SubConfig\n{\n    public string Key { get; set; }\n    public double Amount { get; set; }\n\n    public SubConfig? Clone()\n    {\n        var json = JsonSerializer.Serialize(this);\n        return JsonSerializer.Deserialize\u003cSubConfig\u003e(json);\n    }\n}\n\npublic class NestedConfig\n{\n    public Guid Id { get; set; }\n    public DateTime Timestamp { get; set; }\n    public List\u003cstring\u003e Tags { get; set; }\n    public Dictionary\u003cstring, int\u003e AdditionalData { get; set; }\n\n    public NestedConfig? Clone()\n    {\n        var json = JsonSerializer.Serialize(this);\n        return JsonSerializer.Deserialize\u003cNestedConfig\u003e(json);\n    }\n}\n\npublic class ExtraNestedConfig\n{\n    public string Category { get; set; }\n    public List\u003cNestedConfig\u003e NestedItems { get; set; }\n    public SubConfig DefaultSubConfig { get; set; }\n\n    public ExtraNestedConfig? Clone()\n    {\n        var json = JsonSerializer.Serialize(this);\n        return JsonSerializer.Deserialize\u003cExtraNestedConfig\u003e(json);\n    }\n}\n\n[MemoryDiagnoser]\npublic class ConfigPerformanceBenchmark\n{\n    private IServiceProvider _serviceProvider;\n    private IConfiguration _configuration;\n    private IOptionsMonitor\u003cComplexConfig\u003e _optionsMonitor;\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        var configDictionary = new Dictionary\u003cstring, string\u003e\n        {\n            [\"Name\"] = \"TestConfig\",\n            [\"Value\"] = \"42\",\n            [\"SubConfigs:0:Key\"] = \"SubKey1\",\n            [\"SubConfigs:0:Amount\"] = \"10.5\",\n            [\"SubConfigs:1:Key\"] = \"SubKey2\",\n            [\"SubConfigs:1:Amount\"] = \"20.7\",\n            [\"NestedConfigs:Nested1:Id\"] = Guid.NewGuid().ToString(),\n            [\"NestedConfigs:Nested1:Timestamp\"] = DateTime.Now.ToString(\"o\"),\n            [\"NestedConfigs:Nested1:Tags:0\"] = \"Tag1\",\n            [\"NestedConfigs:Nested1:Tags:1\"] = \"Tag2\",\n            [\"NestedConfigs:Nested2:Id\"] = Guid.NewGuid().ToString(),\n            [\"NestedConfigs:Nested2:Timestamp\"] = DateTime.Now.AddDays(1).ToString(\"o\"),\n            [\"NestedConfigs:Nested2:Tags:0\"] = \"Tag3\",\n            [\"NestedConfigs:Nested2:Tags:1\"] = \"Tag4\",\n\n            [\"SubConfigs:2:Key\"] = \"SubKey3\",\n            [\"SubConfigs:2:Amount\"] = \"30.9\",\n            [\"SubConfigs:2:Key\"] = \"SubKey3\",\n            [\"SubConfigs:2:Amount\"] = \"30.9\",\n            [\"SubConfigs:3:Key\"] = \"SubKey4\",\n            [\"SubConfigs:3:Amount\"] = \"40.1\",\n\n            [\"NestedConfigs:Nested3:Id\"] = Guid.NewGuid().ToString(),\n            [\"NestedConfigs:Nested3:Timestamp\"] = DateTime.Now.AddDays(2).ToString(\"o\"),\n            [\"NestedConfigs:Nested3:Tags:0\"] = \"Tag5\",\n            [\"NestedConfigs:Nested3:Tags:1\"] = \"Tag6\",\n            [\"NestedConfigs:Nested3:AdditionalData:Key1\"] = \"100\",\n            [\"NestedConfigs:Nested3:AdditionalData:Key2\"] = \"200\",\n            [\"NestedConfigs:Nested4:Id\"] = Guid.NewGuid().ToString(),\n            [\"NestedConfigs:Nested4:Timestamp\"] = DateTime.Now.AddDays(3).ToString(\"o\"),\n            [\"NestedConfigs:Nested4:Tags:0\"] = \"Tag7\",\n            [\"NestedConfigs:Nested4:Tags:1\"] = \"Tag8\",\n            [\"NestedConfigs:Nested4:AdditionalData:Key1\"] = \"300\",\n            [\"NestedConfigs:Nested4:AdditionalData:Key2\"] = \"400\",\n\n            [\"ExtraNestedConfigs:0:Category\"] = \"CategoryA\",\n            [\"ExtraNestedConfigs:0:NestedItems:0:Id\"] = Guid.NewGuid().ToString(),\n            [\"ExtraNestedConfigs:0:NestedItems:0:Timestamp\"] = DateTime.Now.ToString(\"o\"),\n            [\"ExtraNestedConfigs:0:NestedItems:0:Tags:0\"] = \"Tag1\",\n            [\"ExtraNestedConfigs:0:NestedItems:0:Tags:1\"] = \"Tag2\",\n            [\"ExtraNestedConfigs:0:NestedItems:0:AdditionalData:Key1\"] = \"100\",\n            [\"ExtraNestedConfigs:0:NestedItems:0:AdditionalData:Key2\"] = \"200\",\n            [\"ExtraNestedConfigs:0:DefaultSubConfig:Key\"] = \"DefaultKey1\",\n            [\"ExtraNestedConfigs:0:DefaultSubConfig:Amount\"] = \"10.5\",\n\n            [\"ExtraNestedConfigs:1:Category\"] = \"CategoryB\",\n            [\"ExtraNestedConfigs:1:NestedItems:0:Id\"] = Guid.NewGuid().ToString(),\n            [\"ExtraNestedConfigs:1:NestedItems:0:Timestamp\"] = DateTime.Now.AddDays(1).ToString(\"o\"),\n            [\"ExtraNestedConfigs:1:NestedItems:0:Tags:0\"] = \"Tag3\",\n            [\"ExtraNestedConfigs:1:NestedItems:0:Tags:1\"] = \"Tag4\",\n            [\"ExtraNestedConfigs:1:NestedItems:0:AdditionalData:Key1\"] = \"300\",\n            [\"ExtraNestedConfigs:1:NestedItems:0:AdditionalData:Key2\"] = \"400\",\n            [\"ExtraNestedConfigs:1:DefaultSubConfig:Key\"] = \"DefaultKey2\",\n            [\"ExtraNestedConfigs:1:DefaultSubConfig:Amount\"] = \"20.7\",\n\n            [\"ExtraNestedConfigs:2:Category\"] = \"CategoryC\",\n            [\"ExtraNestedConfigs:2:NestedItems:0:Id\"] = Guid.NewGuid().ToString(),\n            [\"ExtraNestedConfigs:2:NestedItems:0:Timestamp\"] = DateTime.Now.AddDays(2).ToString(\"o\"),\n            [\"ExtraNestedConfigs:2:NestedItems:0:Tags:0\"] = \"Tag5\",\n            [\"ExtraNestedConfigs:2:NestedItems:0:Tags:1\"] = \"Tag6\",\n            [\"ExtraNestedConfigs:2:NestedItems:0:AdditionalData:Key1\"] = \"500\",\n            [\"ExtraNestedConfigs:2:NestedItems:0:AdditionalData:Key2\"] = \"600\",\n            [\"ExtraNestedConfigs:2:DefaultSubConfig:Key\"] = \"DefaultKey3\",\n            [\"ExtraNestedConfigs:2:DefaultSubConfig:Amount\"] = \"30.9\",\n\n            [\"ExtraNestedConfigs:3:Category\"] = \"CategoryD\",\n            [\"ExtraNestedConfigs:3:NestedItems:0:Id\"] = Guid.NewGuid().ToString(),\n            [\"ExtraNestedConfigs:3:NestedItems:0:Timestamp\"] = DateTime.Now.AddDays(3).ToString(\"o\"),\n            [\"ExtraNestedConfigs:3:NestedItems:0:Tags:0\"] = \"Tag7\",\n            [\"ExtraNestedConfigs:3:NestedItems:0:Tags:1\"] = \"Tag8\",\n            [\"ExtraNestedConfigs:3:NestedItems:0:AdditionalData:Key1\"] = \"700\",\n            [\"ExtraNestedConfigs:3:NestedItems:0:AdditionalData:Key2\"] = \"800\",\n            [\"ExtraNestedConfigs:3:DefaultSubConfig:Key\"] = \"DefaultKey4\",\n            [\"ExtraNestedConfigs:3:DefaultSubConfig:Amount\"] = \"40.1\"\n        };\n\n        _configuration = new ConfigurationBuilder()\n            .AddInMemoryCollection(configDictionary)\n            .Build();\n\n        var services = new ServiceCollection();\n        services.AddOptions();\n        services.Configure\u003cComplexConfig\u003e(config =\u003e { _configuration.Bind(config); });\n        _serviceProvider = services.BuildServiceProvider();\n        _optionsMonitor = _serviceProvider.GetRequiredService\u003cIOptionsMonitor\u003cComplexConfig\u003e\u003e();\n    }\n\n    [Benchmark]\n    public int UseOptionsSnapshot()\n    {\n        using var scope = _serviceProvider.CreateScope();\n        var snapshot = scope.ServiceProvider.GetRequiredService\u003cIOptionsSnapshot\u003cComplexConfig\u003e\u003e();\n        return snapshot.Value.GetHashCode();\n    }\n\n    [Benchmark]\n    public int CloneOptionsMonitor()\n    {\n        using var scope = _serviceProvider.CreateScope();\n        return _optionsMonitor.CurrentValue.Clone()!.GetHashCode() + scope.GetHashCode();\n    }\n}\n\npublic static class Program\n{\n    public static void Main(string[] args)\n    {\n        var summary = BenchmarkRunner.Run\u003cConfigPerformanceBenchmark\u003e();\n    }\n}\n```",
                                           "updatedAt":  "2025-02-01T05:44:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KXYiR",
                                           "createdAt":  "2024-08-30T14:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Profiling revealed that configuration binding was consuming approximately 16% of the total CPU workload.\r\n\r\nI\u0027m curious if you tried using the [configuration binder source generator](https://github.com/dotnet/runtime/issues/44493)? What impact would it have on your scenario? It should make configuration binding much faster since it doesn\u0027t use reflection, and instead sets the object\u0027s properties directly via generated code.",
                                           "updatedAt":  "2024-08-30T14:09:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KcOh1",
                                           "createdAt":  "2024-08-31T01:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WAcry",
                                           "body":  "\u003e \u003e Profiling revealed that configuration binding was consuming approximately 16% of the total CPU workload.\n\u003e \n\u003e I\u0027m curious if you tried using the [configuration binder source generator](https://github.com/dotnet/runtime/issues/44493)? What impact would it have on your scenario? It should make configuration binding much faster since it doesn\u0027t use reflection, and instead sets the object\u0027s properties directly via generated code.\n\nThe `ConfigurationBinderSourceGenerator` seems really cool! Unfortunately, this service is still using .NET 6 due to some issues that arose during our recent upgrade to .NET 8, so I\u0027m unable to test the actual difference in a production environment. But I can see from the benchmark above that it consumes only half the CPU compared to the previous approach. While it\u0027s not yet the default in .NET 8, I think that code gen sounds one right direction for optimization.\n\n| Method                                                     | Mean          | Error        | StdDev   | Gen0   | Allocated |\n|----------------------------------------------|-------------:|-----------:|----------:|-------:|------------:|\n| UseOptionsSnapshot                                | 216.80 us | 2.850 us    | 5.757 us | 0.2441 | 121.05 KB |\n| UseOptionsSnapshotWithCodeGen         | 112.15 us    | 1.426 us  | 3.131 us |         - |  69.35 KB |\n| CloneOptionsMonitor                              | 22.83 us      | 0.334 us  | 0.279 us | 0.0305 |  11.34 KB |\n\nHowever, it\u0027s only 50% improvement. When the configs are more complex [[**example**](https://gist.github.com/WAcry/8b46c163476b296beb7da5ea2d7b9882)], the performance difference could still be very large. As mentioned earlier, even cloning using JsonSerializer for serialization and deserialization provides dozens of times the performance improvement.",
                                           "updatedAt":  "2025-02-04T07:50:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KkWSN",
                                           "createdAt":  "2024-09-02T13:37:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@WAcry \r\n\u003e However, when the configs become more complex [[**example**](https://gist.github.com/WAcry/8b46c163476b296beb7da5ea2d7b9882)], the performance difference consistently remains around 2x, regardless of the complexity.\r\n\r\nThat example you used for the benchmark seems _quite_ extreme in terms of complexity. Do you mind me asking what exactly are you modelling in the real application that requires such deep configuration structure with that many elements? I know this doesn\u0027t solve the slowdown or anything, just curious as I don\u0027t think I\u0027ve ever needed such elaborate options object graph before. I wonder if your design is flawed here to be honest.",
                                           "updatedAt":  "2024-09-02T13:37:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KlOtB",
                                           "createdAt":  "2024-09-02T15:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwtOAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-02T16:27:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "profet23",
                                           "body":  "\u003e @WAcry\r\n\u003e \r\n\u003e \u003e However, when the configs become more complex [[**example**](https://gist.github.com/WAcry/8b46c163476b296beb7da5ea2d7b9882)], the performance difference consistently remains around 2x, regardless of the complexity.\r\n\u003e \r\n\u003e That example you used for the benchmark seems _quite_ extreme in terms of complexity. Do you mind me asking what exactly are you modelling in the real application that requires such deep configuration structure with that many elements? I know this doesn\u0027t solve the slowdown or anything, just curious as I don\u0027t think I\u0027ve ever needed such elaborate options object graph before. I wonder if your design is flawed here to be honest.\r\n\r\nI don\u0027t think it\u0027s out of the ordinary to have some pretty complicated configuration files. It\u0027s common to utilize several configuration sources. And Microsoft encourages usage of configuration for more than just IOptions. \r\n\r\nFor instance Microsoft feature management (feature flags) relies on it:\r\nhttps://learn.microsoft.com/en-us/azure/azure-app-configuration/feature-management-dotnet-reference\r\n\r\n",
                                           "updatedAt":  "2024-09-02T15:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Klldv",
                                           "createdAt":  "2024-09-02T17:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwtcNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-02T17:17:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "WAcry",
                                           "body":  "In our production environment, the configuration isn’t as large as in the example above. The significant optimization in production (\u003e 100x) is due to the absence of Config Code Gen by default, the fact that the service still uses .NET 6, and our use of DeepCloner instead of serialization and deserialization (which can be much faster in many common cases). Btw, the example above has thousands of lines, which may be rare, but it is not \"deep\" (only 3-4 levels). \r\n\r\nI can provide a simpler [**example**](https://pastecode.io/s/d0etgs1o) to show the issue (with enabled config code gen). Consider a configuration containing only int properties, without any custom types. Below are the benchmark results for configurations with 1,000 int properties and 100 int properties.\r\n\r\n| Method                                             | Mean         | Error       | StdDev       | Gen0   | Allocated |\r\n|--------------------------------------------------- |-------------:|------------:|-------------:|-------:|----------:|\r\n| SimplePropsConfig_UseOptionsSnapshotCodeGen1000    | 398,597.8 ns | 7,931.24 ns | 18,381.86 ns |      - |   86480 B |\r\n| SimplePropsConfig_CloneOptionsMonitorJson1000      | 231,247.1 ns | 4,322.07 ns |  4,042.87 ns | 0.2441 |   71204 B |\r\n| SimplePropsConfig_CloneOptionsMonitorDeepClone1000 |     555.4 ns |    11.03 ns |     22.77 ns | 0.0172 |    4280 B |\r\n| SimplePropsConfig_UseOptionsSnapshotCodeGen100     |  24,259.2 ns |   474.20 ns |    805.23 ns | 0.0305 |   10872 B |\r\n| SimplePropsConfig_CloneOptionsMonitorJson100       |  12,226.4 ns |    62.98 ns |     58.91 ns | 0.0153 |    4576 B |\r\n| SimplePropsConfig_CloneOptionsMonitorDeepClone100  |     179.6 ns |     3.57 ns |      4.25 ns | 0.0026 |     680 B |\r\n\r\nIn this case, the performance difference between configuration binding with code gen and json serialization isn\u0027t significant. However, json serialization is not well-suited for deep cloning. Using real deep cloning shows a performance improvement of hundreds of times. I think maybe we can use code gen to do the deep clone for us.",
                                           "updatedAt":  "2024-09-03T11:52:40Z"
                                       }
                                   ],
                         "totalCount":  48
                     },
        "title":  "IOptionsSnapshot is very slow",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56302",
        "createdAt":  "2021-07-26T13:51:33Z",
        "number":  56302,
        "author":  "dazinator",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_gKxg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2023-09-10T15:17:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mickey-stringer",
                                            "createdAt":  "2025-02-26T16:44:04Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-02-27T01:27:51Z",
        "body":  "I\u0027ve recently handled serialising and deserialising polymorphic lists with system.text.json, and described an issue I had to workaround here: https://github.com/dotnet/runtime/issues/56297\r\n\r\nThis above issue covers a case where I want to use `SJT` to directly serialise / deserialise an instance of my class with a polymorphic list which is good.\r\n\r\nHowever suppose I wanted to use my class with a polymorphic list, with the `IOptions` pattern. In this case system.text.json converter is now redundant, as `ConfigurationBuilder.AddJson` essentially reads the json into key value pairs in the IConfiguration - it doesn\u0027t deserialise the json into instances of concrete types. This is ofcourse how its meant to work, but it does then mean that if I want an instance of an options class containing a polymorphic list (where each item in the list has some type descriminator specified as a config value) I need a way to take control of how the object instance is materialised from the IConfiguration values. For example, when my options instance is created, I want to be able to have some logic inspect the key value pairs in IConfiguration for it\u0027s polymorphic list property, and then for each item, check its discriminator value, and then new() up (or bind) the appropriate derived type to add to the polymorphic list. Is there something on the roadmap that would enable me to do this?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoBdflA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc402k2j",
                                           "createdAt":  "2021-07-26T13:51:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @layomia\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027ve recently handled serialising and deserialising polymorphic lists with system.text.json, and described an issue I had to workaround here: https://github.com/dotnet/runtime/issues/56297\r\n\r\nThis covers a case where I want to use `SJT` to directly serialise / deserialise an instance of my class with a polymorphic list which is good.\r\n\r\nHowever suppose I wanted to use this class with the `IOptions` pattern. In this case system.text.json converter is now redundant, as `ConfigurationBuilder.AddJson` essentially reads the json into key value pairs in the IConfiguration - it doesn\u0027t deserialise the json into instances of concrete types. This is ofcourse how its meant to work, but it does then mean that if I want an instance of an options class containing a polymorphic list (where each item in the list has some type descriminator property) I need a way to take control of how the object instance is materialised from the IConfiguration values. For example, when I inject my IOptions instance I want to be able to have some logic inspect the key value pairs in IConfiguration for the polymorphic list property, and then for each item, check its descriminator value, and then new() up (or bind) the appropriate derived type to add to the list. Is there something on the roadmap that would enable me to do this?\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edazinator\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-26T13:51:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc402l3F",
                                           "createdAt":  "2021-07-26T13:56:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027ve recently handled serialising and deserialising polymorphic lists with system.text.json, and described an issue I had to workaround here: https://github.com/dotnet/runtime/issues/56297\r\n\r\nThis above issue covers a case where I want to use `SJT` to directly serialise / deserialise an instance of my class with a polymorphic list which is good.\r\n\r\nHowever suppose I wanted to use my class with a polymorphic list, with the `IOptions` pattern. In this case system.text.json converter is now redundant, as `ConfigurationBuilder.AddJson` essentially reads the json into key value pairs in the IConfiguration - it doesn\u0027t deserialise the json into instances of concrete types. This is ofcourse how its meant to work, but it does then mean that if I want an instance of an options class containing a polymorphic list (where each item in the list has some type descriminator property) I need a way to take control of how the object instance is materialised from the IConfiguration values. For example, when my options instance is created, I want to be able to have some logic inspect the key value pairs in IConfiguration for it\u0027s polymorphic list property, and then for each item, check its discriminator value, and then new() up (or bind) the appropriate derived type to add to the polymorphic list. Is there something on the roadmap that would enable me to do this?\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edazinator\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-26T13:56:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423N5b",
                                           "createdAt":  "2021-09-15T22:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "williamb1024",
                                           "body":  "I have a similar issue. I my scenario, I need to bind a settings object containing an `ICollection\u003cX509Certificate2\u003e`. Registering a custom `TypeConverter` is generally straight forward, including the ability to register a `TypeConverter` for the `ICollection\u003cX509Certificate2\u003e` type. \r\n\r\nUltimately, the registered `TypeConverter` receives a single string (the value of the configuration section) and is able to return the appropriate object. This works, but isn\u0027t very flexible. An entire syntax has to be created for all of the possible certificate sources, for example, a certificate store or a certificate file. If there a multiple certificates, those all be specified in the same string. \r\n\r\nIf it would be possible to modify [BindInstance](https://github.com/dotnet/runtime/blob/b83e5feab51766273530baa991c53e10b76cde15/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L343) to attempt to pass the `TypeConverter` and the `IConfigurationSection` before trying to convert from `String`, the `TypeConverter` would have the opportunity to read the `IConfigurationSection` content in any manner it desired. This would allow for multiple keys, or even arrays, to be read by the `TypeConverter` and used for the binding process.\r\n\r\nI believe it would be a relatively unobtrusive change, as I suspect most `TypeConverters` would simply ignore the `IConfigurationSection` type when passed to `CanConvertFrom`.\r\n",
                                           "updatedAt":  "2021-09-15T22:51:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mHKol",
                                           "createdAt":  "2023-09-11T04:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If you make ConfigurationBinder pass the IConfigurationSection to the TypeConverter, please consider also making the IConfigurationRoot available to the TypeConverter.  At the TypeConverter side, this could be done via the `System.ComponentModel.ITypeDescriptorContext? context` parameter of [TypeConverter.ConvertFrom](https://learn.microsoft.com/dotnet/api/system.componentmodel.typeconverter.convertfrom?view=netstandard-2.0#system-componentmodel-typeconverter-convertfrom(system-componentmodel-itypedescriptorcontext-system-globalization-cultureinfo-system-object)); ITypeDescriptorContext is derived from IServiceProvider, so the converter could call `context?.GetService(typeof(IConfigurationRoot))`.  At the ConfigurationBinder side, the IConfigurationRoot could perhaps be added as a property in BinderOptions.\r\n\r\nIn my scenario, some of the classes that I want to bind to configuration have database connection string properties, and I want to have only the *name* of the connection string as a configuration value, and read the *provider name* and *connection string* from the \"ConnectionStrings\" section of the configuration root during the conversion.  (There is [ConfigurationExtensions.GetConnectionString](https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration.configurationextensions.getconnectionstring?view=dotnet-plat-ext-2.1) for reading the connection string; there isn\u0027t a similar method for reading the provider name, but Microsoft.Extensions.Configuration.EnvironmentVariables [defines a convention](https://github.com/dotnet/runtime/blob/4822e3c3aa77eb82b2fb33c9321f923cf11ddde6/src/libraries/Microsoft.Extensions.Configuration.EnvironmentVariables/src/EnvironmentVariablesConfigurationProvider.cs#L100).)\r\n\r\nOr more generally, let the caller of ConfigurationBinder provide an IServiceProvider and make the IServiceProvider implementation of the ITypeDescriptorContext forward the calls to that.",
                                           "updatedAt":  "2023-09-11T06:02:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r4r58",
                                           "createdAt":  "2023-11-14T11:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "Is there any new on this?\r\nI am not sure whether `TypeCoverter` is the best fit for this.\r\nI am exploring an approach that uses `IConfigureOptions`\r\ne.g the following class could be generecised to take the `TOptions` and the config section path and then re-used.\r\n\r\n```csharp\r\npublic class MyOptionsSetup : IConfigureOptions\u003cMyOptions\u003e\r\n{\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public MyOptionsSetup(IConfiguration configuration)\r\n    {\r\n        _configuration = configuration;\r\n    }\r\n\r\n    public void Configure(MyOptions options)\r\n    {\r\n        // Custom logic to populate options.MyDictionary\r\n        // Similar to the PolymorphicJsonConverter.Convert method\r\n        options.MyDictionary = ConvertToPolymorphicDictionary(_configuration.GetSection(\"MyDictionary\"));\r\n    }\r\n\r\n    private Dictionary\u003cstring, SomeBase\u003e ConvertToPolymorphicDictionary(IConfigurationSection section)\r\n    {\r\n        var result = new Dictionary\u003cstring, SomeBase\u003e();\r\n        foreach (var child in section.GetChildren())\r\n        {\r\n            var type = GetTypeFromConfiguration(child);\r\n            var instance = (SomeBase)Activator.CreateInstance(type);\r\n            JsonConvert.PopulateObject(child.Value, instance);\r\n            result.Add(child.Key, instance);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private Type GetTypeFromConfiguration(IConfigurationSection section)\r\n    {\r\n        var typeName = section[\"type\"];\r\n        return Type.GetType(typeName);\r\n    }\r\n}\r\n\r\n```\r\n\r\n",
                                           "updatedAt":  "2023-11-14T11:23:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gF1-U",
                                           "createdAt":  "2025-02-26T18:38:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mickey-stringer",
                                           "body":  "First of all just adding my vote for this functionality. \n\nSecond, wanted to offer a lazy workaround. It\u0027s by no means ideal, but it _is_ easy, and I think there\u0027s something to say for that.\nThe main qualifier here is that, for me, it\u0027s preferable to provide each object in my polymorphic list in full, rather than set each property for each item individually.\ni.e. I do _not_ want to do this:\n```\n\"MyOptions:PolymorphicList:0:Prop1\":\"value\"\n\"MyOptions:PolymorphicList:0:Prop2\":\"value\"\n\"MyOptions:PolymorphicList:1:Prop1\":\"value\"\n\"MyOptions:PolymorphicList:1:Prop2\":\"value\"\n\"MyOptions:PolymorphicList:1:Prop3\":\"value\"\n```\nInstead I want to do this:\n```\n\"MyOptions:PolymorphicList:0\": \"{\\\"Prop1\\\":\\\"value\\\",\\\"Prop2\\\":\\\"value\\\"}\"\n\"MyOptions:PolymorphicList:1\": \"{\\\"Prop1\\\":\\\"value\\\",\\\"Prop2\\\":\\\"value\\\",\\\"Prop3\\\":\\\"value\\\"}\"\n```\nSo yes, escaped json strings as config values. Not pretty but, in my use case, preferable to the alternative.\nTo make sure those items get bound by the options binding, I added a `List\u003cstring\u003e` property to my options class:\n```\npublic class MyOptions\n{\n    public List\u003cstring\u003e StringList { get; set; }\n    public List\u003cPolymorphicClass\u003e PolymorphicList { get; set; }\n}\n```\nrenamed them in config so they\u0027re named e.g. `\"MyOptions:StringList:0\"` instead of `\"MyOptions:PolymorphicList:0\"`,\nand then added a PostConfigure step to deserialize them and set my polymorphic list:\n```\napp.Services.AddOptions\u003cMyOptions\u003e()\n\t\t\t.Configure\u003cIConfiguration\u003e((settings, configuration) =\u003e\n\t\t\t{\n\t\t\t\tconfiguration.GetSection(MyOptions.Name).Bind(settings);\n\t\t\t});\napp.Services\n\t.PostConfigure\u003cMyOptions\u003e(options =\u003e \n\t{\n\t\tList\u003cPolymorphicClass\u003e polymorphicList = new();\n\t\tforeach (var item in options.StringList)\n\t\t{\n\t\t\tpolymorphicList.Add(JsonSerializer.Deserialize\u003cPolymorphicClass\u003e(item));\n\t\t}\n\t\toptions.PolymorphicList = polymorphicList;\n\t});\n```\nSo if you can tolerate json strings and a quasi-redundant class property, this is a pretty simple workaround.",
                                           "updatedAt":  "2025-02-27T01:27:51Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "binding options classes with polymorphic lists to config sections",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71170",
        "createdAt":  "2022-06-22T04:26:17Z",
        "number":  71170,
        "author":  "mshann03",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T19:01:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027ve got a scenario where I\u0027m using `OptionsBuilderExtensions.ValidateOnStart` to validate some settings to fail fast if there are any values missing etc.\r\n\r\nI\u0027ve wired in an `IValidateOptions\u003c\u003e` implementation to do the validation, and I have an `IConfigureOptions\u003c\u003e` implementation to change some of the settings on load.\r\n\r\nThe issue I\u0027m experiencing is both the configure and validate implementations get called twice, and if I change any of the setting values in the first call to configure, it resets on the second call. \r\n\r\nHere is a cutdown sample that illustrates my point:\r\n\r\nSimple `program.cs` setup:\r\n```\r\nusing Microsoft.Extensions.Options;\r\nusing OptionsValidationExample;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder\r\n    .Services\r\n    .AddOptions\u003cGreetingSettings\u003e()\r\n    .Configure(settings =\u003e settings.Name = \"Initial Name\")\r\n    .ValidateOnStart();\r\n\r\nbuilder.Services.AddSingleton\u003cIValidateOptions\u003cGreetingSettings\u003e, SettingsValidateOptions\u003e();\r\nbuilder.Services.AddSingleton\u003cIConfigureOptions\u003cGreetingSettings\u003e, SettingsConfigureOptions\u003e();\r\n        \r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", (IOptions\u003cGreetingSettings\u003e settings) =\u003e\r\n{\r\n    return $\"Hello {settings.Value.Name}!\";\r\n});\r\n\r\napp.Run();\r\n```\r\nAnd my GreetingSettings.cs file complete with validateoptions and configureoptions implementations:\r\n```\r\nusing Microsoft.Extensions.Options;\r\nusing System.Diagnostics;\r\n\r\nnamespace OptionsValidationExample;\r\n\r\npublic class GreetingSettings\r\n{\r\n    public string Name { get; set; } = null!;\r\n}\r\n\r\npublic class SettingsConfigureOptions : IConfigureOptions\u003cGreetingSettings\u003e\r\n{\r\n    public void Configure(GreetingSettings options)\r\n    {\r\n        // This method gets called twice due to ValidateOnStartup for the settings.\r\n        Debugger.Break();\r\n\r\n        // The second time it should come through as \"Changed Name\".\r\n        Debug.Assert(options.Name == \"Initial Name\");\r\n\r\n        options.Name = \"Changed Name\";\r\n    }\r\n}\r\n\r\npublic class SettingsValidateOptions : IValidateOptions\u003cGreetingSettings\u003e\r\n{\r\n    public ValidateOptionsResult Validate(string name, GreetingSettings options)\r\n    {\r\n        // This method gets called twice: once for ValidateOnStartup and once for first usage.\r\n        Debugger.Break();\r\n\r\n        return ValidateOptionsResult.Success;\r\n    }\r\n}\r\n```\r\nAny suggestions on how to fix this?\r\n\r\nMany thanks in advance,\r\nMark.\n\n### Expected Behavior\n\nI would have thought the validate would run once on startup, and further calls to any injected IOptions\u003c\u003e.value would not result in another validation.\r\n\r\nAlso, the fact that my IConfigureOptions implementation gets run on startup led me to expect the configure would not get called again after startup.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nnet6.0\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuwJ7tg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FW_yE",
                                           "createdAt":  "2022-06-22T07:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "It configures twice because [`ValidateOnStart`](https://github.com/dotnet/runtime/blob/v6.0.6/src/libraries/Microsoft.Extensions.Hosting/src/OptionsBuilderExtensions.cs#L23-L40\r\n) gets an `IOptionsMonitor\u003cT\u003e` injected instead of `IOptions\u003cT\u003e`:\r\n\r\nBoth have their own private caches. You could work around this doubling by writing your own variant of the extension method which doesn\u0027t care about named options and which taps `IOptions\u003cT\u003e` instead of `IOptionsMonitor\u003cT\u003e`.\r\n\r\nArguably, the framework should actually have taken the effort to detect whether the registration that is being added to validate at startup is a named registration or not, and use `IOptions\u003cT\u003e` when it\u0027s not, given that at some point the actual _implementation_ of named and unnamed options diverged as well: unnamed options are now registered via an `UnnamedOptionsManager\u003cT\u003e` internally, and not via the `OptionsManager\u003cT\u003e` that backs `IOptionsMonitor\u003cT\u003e`.",
                                           "updatedAt":  "2022-06-22T08:11:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FXb8f",
                                           "createdAt":  "2022-06-22T23:42:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mshann03",
                                           "body":  "OK thank you for the response @rjgotten, for now I\u0027ll just inject the options I need to have validated on startup as IOptionsMonitor instead on IOptions and then it\u0027ll only run once.\r\n\r\nDo you think there would potentially be a better solution going forward?",
                                           "updatedAt":  "2022-06-22T23:42:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FXtRF",
                                           "createdAt":  "2022-06-23T02:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027ve got a scenario where I\u0027m using `OptionsBuilderExtensions.ValidateOnStart` to validate some settings to fail fast if there are any values missing etc.\r\n\r\nI\u0027ve wired in an `IValidateOptions\u003c\u003e` implementation to do the validation, and I have an `IConfigureOptions\u003c\u003e` implementation to change some of the settings on load.\r\n\r\nThe issue I\u0027m experiencing is both the configure and validate implementations get called twice, and if I change any of the setting values in the first call to configure, it resets on the second call. \r\n\r\nHere is a cutdown sample that illustrates my point:\r\n\r\nSimple `program.cs` setup:\r\n```\r\nusing Microsoft.Extensions.Options;\r\nusing OptionsValidationExample;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder\r\n    .Services\r\n    .AddOptions\u003cGreetingSettings\u003e()\r\n    .Configure(settings =\u003e settings.Name = \"Initial Name\")\r\n    .ValidateOnStart();\r\n\r\nbuilder.Services.AddSingleton\u003cIValidateOptions\u003cGreetingSettings\u003e, SettingsValidateOptions\u003e();\r\nbuilder.Services.AddSingleton\u003cIConfigureOptions\u003cGreetingSettings\u003e, SettingsConfigureOptions\u003e();\r\n        \r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", (IOptions\u003cGreetingSettings\u003e settings) =\u003e\r\n{\r\n    return $\"Hello {settings.Value.Name}!\";\r\n});\r\n\r\napp.Run();\r\n```\r\nAnd my GreetingSettings.cs file complete with validateoptions and configureoptions implementations:\r\n```\r\nusing Microsoft.Extensions.Options;\r\nusing System.Diagnostics;\r\n\r\nnamespace OptionsValidationExample;\r\n\r\npublic class GreetingSettings\r\n{\r\n    public string Name { get; set; } = null!;\r\n}\r\n\r\npublic class SettingsConfigureOptions : IConfigureOptions\u003cGreetingSettings\u003e\r\n{\r\n    public void Configure(GreetingSettings options)\r\n    {\r\n        // This method gets called twice due to ValidateOnStartup for the settings.\r\n        Debugger.Break();\r\n\r\n        // The second time it should come through as \"Changed Name\".\r\n        Debug.Assert(options.Name == \"Initial Name\");\r\n\r\n        options.Name = \"Changed Name\";\r\n    }\r\n}\r\n\r\npublic class SettingsValidateOptions : IValidateOptions\u003cGreetingSettings\u003e\r\n{\r\n    public ValidateOptionsResult Validate(string name, GreetingSettings options)\r\n    {\r\n        // This method gets called twice: once for ValidateOnStartup and once for first usage.\r\n        Debugger.Break();\r\n\r\n        return ValidateOptionsResult.Success;\r\n    }\r\n}\r\n```\r\nAny suggestions on how to fix this?\r\n\r\nMany thanks in advance,\r\nMark.\n\n### Expected Behavior\n\nI would have thought the validate would run once on startup, and further calls to any injected IOptions\u003c\u003e.value would not result in another validation.\r\n\r\nAlso, the fact that my IConfigureOptions implementation gets run on startup led me to expect the configure would not get called again after startup.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nnet6.0\n\n### Anything else?\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emshann03\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-23T02:06:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HUMqA",
                                           "createdAt":  "2022-07-27T09:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateapexearlyspeed",
                                           "body":  "Hi @maryamariyan I would like to try to fix it and here is [PR](https://github.com/dotnet/runtime/pull/72927), thanks !",
                                           "updatedAt":  "2022-07-27T09:18:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ht7Zp",
                                           "createdAt":  "2022-08-02T21:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@lateapexearlyspeed we are considering the fix for this in the next release to reduce the risk of the changes in the current release. Thanks for opening the PR. can we just close the PR for now and we reopen when branch for next release? ",
                                           "updatedAt":  "2022-08-02T21:16:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HumXq",
                                           "createdAt":  "2022-08-03T02:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCp9heQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-08-03T15:47:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lateapexearlyspeed",
                                           "body":  "Closed for current release for now @tarekgh ",
                                           "updatedAt":  "2022-08-03T02:02:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IkGOi",
                                           "createdAt":  "2022-08-17T03:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateapexearlyspeed",
                                           "body":  "@tarekgh Because current main branch is .Net 8 branch now so I just reopen [PR](https://github.com/dotnet/runtime/pull/72927). Please correct me if wrong, or review, thanks !",
                                           "updatedAt":  "2022-08-17T03:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5InJfT",
                                           "createdAt":  "2022-08-17T16:07:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@lateapexearlyspeed you are right. main branch is now open for 8.0.",
                                           "updatedAt":  "2022-08-17T16:07:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67AUil",
                                           "createdAt":  "2025-07-30T18:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgraf1",
                                           "body":  "Is there any movement on this issue? It\u0027s not a showstopper, but it does cause some annoyance if your logging during `IConfigureOptions`. Because `IConfigureOptions` fires twice, you\u0027ll end up with duplicate logs unless you do something quite ugly. \n\nConsider this case where `IConfigureOptions` is registered from a library in the event that the consumer does not provider their own configuration such as when calling a parameterless DI registration method (`services.AddSomeLibrary()`). Maybe the implementation first checks configuration for some default section, and if that isn\u0027t present and it\u0027s a development environment, some constant value is assigned.\n\nIn cases like these, it\u0027s ideal to log messages because there\u0027s quite a bit going and consumers want to be able to easily see what the library is doing. To avoid log duplication, something like an `alreadyExecuted` is required.\n\n```csharp\ninternal sealed class DefaultConfigureOptions(\n    IAppInfo appInfo,\n    IConfiguration config,\n    ILogger\u003cDefaultConfigureOptions\u003e logger)\n    : IConfigureOptions\u003cMyOptions\u003e\n{\n    private const string DevelopmentOnlyValue = \"SomeValue\";\n\n    private readonly IConfiguration config = config;\n    private readonly IAppInfo appInfo = appInfo;\n    private readonly ILogger logger = logger;\n\n    // This can be removed when .net fixes the issue with IConfigureOptions being called twice.\n    // We use it to avoid duplicative logging. Unfortunately we still need the execution to happen twice\n    // or otherwise options don\u0027t work correctly.\n    // See: https://github.com/dotnet/runtime/issues/71170\n    private bool alreadyExecuted = false;\n\n    /// \u003cinheritdoc /\u003e\n    public void Configure(MyOptions options)\n    {\n        var extractedOptions = this.config.GetSection(Constants.DefaultConfigSectionPath)\n            ?.Get\u003cMyOptions\u003e();\n\n        if (extractedOptions == null)\n        {\n            if (!this.alreadyExecuted)\n            {\n                this.logger.DefaultSectionNotFound(Constants.DefaultConfigSectionPath);\n            }\n\n            if (this.appInfo.IsDevelopment())\n            {\n                if (!this.alreadyExecuted)\n                {\n                    this.logger.UsingPlaceholderValue();\n                }\n\n                options.SomeValue = DevelopmentOnlyValue ;\n            }\n\n            this.alreadyExecuted = true;\n            return;\n        }\n\n        if (!this.alreadyExecuted)\n        {\n            this.logger.ConfigurationOptionsFound(Constants.DefaultConfigSectionPath);\n        }\n\n        options.SomeValue= extractedOptions.SomeValue;\n\n        this.alreadyExecuted = true;\n    }\n}\n```\n",
                                           "updatedAt":  "2025-07-30T18:31:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67Anu2",
                                           "createdAt":  "2025-07-30T19:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We are still considering this for future releases. However, it has not been prioritized at this time due to other higher-priority work.",
                                           "updatedAt":  "2025-07-30T19:01:14Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "IValidateOptions and IConfigureOptions executing twice",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79958",
        "createdAt":  "2022-12-24T22:05:01Z",
        "number":  79958,
        "author":  "aradalvand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGMlBA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Freeesia",
                                            "createdAt":  "2023-01-29T09:27:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "realsonic",
                                            "createdAt":  "2023-04-21T12:39:06Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "9Rune5",
                                            "createdAt":  "2023-09-18T11:49:40Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "mozesa",
                                            "createdAt":  "2023-10-06T06:50:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alvipeo",
                                            "createdAt":  "2024-03-03T10:11:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jzebedee",
                                            "createdAt":  "2024-03-17T12:50:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2024-08-08T08:34:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mungojam",
                                            "createdAt":  "2024-09-03T21:36:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idiotleon",
                                            "createdAt":  "2024-11-30T16:18:19Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "idiotleon",
                                            "createdAt":  "2024-11-30T16:18:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2024-12-11T20:50:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamgauthier",
                                            "createdAt":  "2025-04-17T06:05:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sean-krail",
                                            "createdAt":  "2025-07-08T14:28:43Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2025-07-26T10:40:37Z",
        "body":  "### Description\r\n\r\nApparently this was implemented in #43662 so I don\u0027t know why the following actually throws:\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Options;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.Configure\u003cSettings\u003e(builder.Configuration);\r\n\r\nvar app = builder.Build();\r\n\r\nvar settings = app.Services.GetRequiredService\u003cIOptions\u003cSettings\u003e\u003e().Value;\r\nConsole.WriteLine(settings);\r\n\r\napp.Run();\r\n\r\npublic record Settings(string Color, int Length);\r\n```\r\nThe exception:\r\n```\r\nUnhandled exception. System.MissingMethodException: Cannot dynamically create an instance of type \u0027Settings\u0027. Reason: No parameterless constructor defined.\r\n   at System.RuntimeType.ActivatorCache..ctor(RuntimeType rt)\r\n   at System.RuntimeType.CreateInstanceOfT()\r\n   at System.Activator.CreateInstance[T]()\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.UnnamedOptionsManager`1.get_Value()\r\n   at Program.\u003cMain\u003e$(String[] args) in /home/arad/other/aspnet-core-test/Program.cs:line 10\r\n```\r\nI\u0027m confused because this is precisely the same example shown in #43662, am I missing something?!\r\n\r\n### Reproduction Steps\r\n\r\nDescribed above.\r\n\r\n### Expected behavior\r\n\r\nShouldn\u0027t throw.\r\n\r\n### Actual behavior\r\n\r\nThrows.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh5CJTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RVfmU",
                                           "createdAt":  "2022-12-24T22:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-24T22:05:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVhpg",
                                           "createdAt":  "2022-12-25T00:00:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nApparently this was implemented in #43662 so I don\u0027t know why the following actually throws:\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Options;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.Configure\u003cSettings\u003e(builder.Configuration);\r\n\r\nvar app = builder.Build();\r\n\r\nvar settings = app.Services.GetRequiredService\u003cIOptions\u003cSettings\u003e\u003e().Value;\r\nConsole.WriteLine(settings);\r\n\r\napp.Run();\r\n\r\npublic record Settings(string Color, int Length);\r\n```\r\nThe exception:\r\n```\r\nUnhandled exception. System.MissingMethodException: Cannot dynamically create an instance of type \u0027Settings\u0027. Reason: No parameterless constructor defined.\r\n   at System.RuntimeType.ActivatorCache..ctor(RuntimeType rt)\r\n   at System.RuntimeType.CreateInstanceOfT()\r\n   at System.Activator.CreateInstance[T]()\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.UnnamedOptionsManager`1.get_Value()\r\n   at Program.\u003cMain\u003e$(String[] args) in /home/arad/other/aspnet-core-test/Program.cs:line 10\r\n```\r\nI\u0027m confused because this is precisely the same example shown in #43662, am I missing something?!\r\n\r\n### Reproduction Steps\r\n\r\nDescribed above.\r\n\r\n### Expected behavior\r\n\r\nShouldn\u0027t throw.\r\n\r\n### Actual behavior\r\n\r\nThrows.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earadalvand\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-25T00:00:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RWGiJ",
                                           "createdAt":  "2022-12-25T22:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This is most likely be the same issue tracked here https://github.com/dotnet/runtime/issues/78771. Could you please try to define the record as: \r\n\r\n```C# \r\npublic record Settings(string Color, int Length);\r\n{\r\n public string Color { get; init; }\r\n public int Length { get; init; }\r\n}\r\n```\r\n\r\nand look if this can help workaround the issue?",
                                           "updatedAt":  "2022-12-25T22:45:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RWGif",
                                           "createdAt":  "2022-12-25T22:45:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-12-25T22:45:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RWWtn",
                                           "createdAt":  "2022-12-26T02:11:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "@tarekgh It isn\u0027t. That issue is about the in-memory configuration provider; it seems to be complaining that the in-memory configuration provider fails to work with the `Get\u003cRecordType\u003e()` method, mine has nothing to do with that, in my case `Get\u003cRecordType\u003e()` does actually work, it\u0027s the `IOptions` pattern that doesn\u0027t.\r\n\r\nAs I mentioned in my original comment, this is the same example that was shown in #43662, and that issue was supposedly resolved by #67258, but using `IOptions\u003cRecordType\u003e` still throws; which I don\u0027t really understand?!",
                                           "updatedAt":  "2022-12-26T02:22:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RbYjm",
                                           "createdAt":  "2022-12-27T19:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@aradalvand thank for the info. We\u0027ll try to look at it later. ",
                                           "updatedAt":  "2022-12-27T19:43:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53WwkC",
                                           "createdAt":  "2024-03-17T12:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzebedee",
                                           "body":  "This bug still exists a fresh year and fresh .NET release later. However, the following does correctly bind to a record type:\r\n\r\n`builder.Configuration.Get\u003cSettings\u003e()`\r\n\r\nSo clearly the binding is able to happen, but there\u0027s still a bug in the registration/binding of option types through `.Configure`.",
                                           "updatedAt":  "2024-03-17T12:58:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53XPTC",
                                           "createdAt":  "2024-03-17T19:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiHUgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alvipeo",
                                                                               "createdAt":  "2024-03-18T21:02:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-09-13T03:44:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The record is actually a class. When using record this way, the compiler will generate a class `public class Settings` with only one constructor `public Settings(string Color, int Length)`. The options binding will fail to create instance of this class because there is no parameter-less constructor to use. There is easy workaround for this problem by using something like the following instead:\r\n\r\n```C#\r\npublic class Settings\r\n{\r\n    public string Color { get; set; } = null!;\r\n    public int Length { get; set; }\r\n}\r\n```\r\n\r\nWe\u0027re maintaining the open issue to address it with a fix in the future, although it\u0027s not currently a priority compared to our ongoing tasks and considering the easy workaround.",
                                           "updatedAt":  "2024-03-17T19:02:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54H-Xp",
                                           "createdAt":  "2024-03-22T15:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiHUgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-09-13T03:44:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jzebedee",
                                           "body":  "\u003e There is easy workaround for this problem by using something like the following instead:\r\n\u003e \r\n\u003e ```cs\r\n\u003e public class Settings\r\n\u003e {\r\n\u003e     public string Color { get; set; } = null!;\r\n\u003e     public int Length { get; set; }\r\n\u003e }\r\n\u003e ```\r\n\r\nThat\u0027s not a workaround for the issue. That\u0027s just a regular class. If we were going down that route, why use a record in the first place?\r\n\r\nIt\u0027s also explicitly mentioned in #43662 that binding of immutable record types is supported just as shown in the original repro. That issue is closed, so I\u0027m not sure if it was never correctly implemented or if this is a regression.",
                                           "updatedAt":  "2024-03-22T15:34:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54IRCO",
                                           "createdAt":  "2024-03-22T16:13:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@jzebedee I am not saying we are not going to fix the issue. I am just mentioning the workaround for anyone blocked by that for now. That is all. \r\n\r\nFor https://github.com/dotnet/runtime/issues/43662 it is addressed by https://github.com/dotnet/runtime/pull/67258. You mentioned in the other comment `So clearly the binding is able to happen, but there\u0027s still a bug in the registration/binding of option types through .Configure.`. This means the implementation missed the case of IOption binding. This is not a regression. ",
                                           "updatedAt":  "2024-03-22T16:13:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HkIlM",
                                           "createdAt":  "2024-08-07T21:38:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZdhmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alvipeo",
                                                                               "createdAt":  "2024-08-10T12:40:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-07-05T19:35:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I have looked more at this; the best can be done for now is instead of doing:\r\n\r\n```C#\r\nvar settings = app.Services.GetRequiredService\u003cIOptions\u003cSettings\u003e\u003e().Value;\r\n```\r\n\r\ndo\r\n\r\n```C#\r\nIConfiguration configuration = app.Services.GetRequiredService\u003cIConfiguration\u003e();\r\nSettings? settings = configuration.GetSection(\"Settings\").Get\u003cSettings\u003e();\r\n```\r\n\r\nHere are more details:\r\n\r\nWhen calling `app.Services.GetRequiredService\u003cIOptions\u003cSettings\u003e\u003e().Value`, this eventually need to create instance of the `Settings` record. As the record is defined with a primary constructor, the record will not have any parameter-less constructors. Eventually the options try to create the instance of the record https://github.com/dotnet/runtime/blob/1d2e841eff21c3a1e4591ef6cf522afd5c40ff51/src/libraries/Microsoft.Extensions.Options/src/OptionsFactory.cs#L100 then fail to do so because cannot call the record constructor which is taking parameters. And cannot even extract the parameter values from the configuration because on this level the options cannot access the configuration. \r\nThe suggested way to make this work is instead of using options to get the instance, try to use the configuration to do it. First get the configuration `IConfiguration configuration = app.Services.GetRequiredService\u003cIConfiguration\u003e();` then get the record instance `Settings? settings = configuration.GetSection(\"Settings\").Get\u003cSettings\u003e();`. This will work because the configuration can read the settings values and pass such values to the record constructor to create the record instance.\r\n\r\n",
                                           "updatedAt":  "2024-08-07T21:39:17Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "`IOptions\u003cRecordType\u003e` with `services.Configure\u003cRecordType\u003e` throws",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82844",
        "createdAt":  "2023-03-01T17:04:56Z",
        "number":  82844,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8SbWw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zintom",
                                            "createdAt":  "2023-03-01T20:30:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2023-03-01T23:53:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-05-22T08:37:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-06-26T17:54:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alrz",
                                            "createdAt":  "2024-09-08T09:02:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-30T20:18:14Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-10-30T17:03:31Z",
        "body":  "The `Microsoft.Extensions.Options.DataAnnotations` library only exists because it has a dependency on `System.ComponentModel.Annotations`. Since `System.ComponentModel.Annotations` wasn\u0027t in `netstandard2.0` by default, the code in this library was split into its own package instead of being added to `Microsoft.Extensions.Options`.\r\n\r\nHowever, recently we\u0027ve added a dependency from `Microsoft.Extensions.Options` netstandard2.0 to `System.ComponentModel.Annotations` in the 6.0.0-preview5.21301.5 NuGet package. It looks like this was added by a combination of https://github.com/dotnet/runtime/pull/52084 + https://github.com/dotnet/runtime/pull/35606.\r\n\r\nAlso, as of 6.0, `System.ComponentModel.Annotations` is now part of the netX.0+ TFM by default. It is no longer a separate NuGet package.\r\n\r\nWith #82749, we are doubling down on this dependency, and fully adding `System.ComponentModel.Annotations` code to `Microsoft.Extensions.Options`.\r\n\r\nGiven all these changes, it doesn\u0027t make sense to keep `Microsoft.Extensions.Options.DataAnnotations` as a separate library/NuGet package. It is just an extra package, assembly, etc and can be merged into `Microsoft.Extensions.Options`.\r\n\r\nI\u0027m not exactly sure how to do this with NuGet packages. I know we will need `TypeForwardedTo` attributes in order to keep back compat working. Does that mean we will need to keep shipping a NuGet package for `Microsoft.Extensions.Options.DataAnnotations` with just the `TypeForwardedTo` attribute? Maybe we only need to ship 1 more - `8.0.0` with `TypeForwardedTo` and then it can be dead-ended after that?\r\n\r\ncc @tarekgh @ericstj @ViktorHofer ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkebKYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WdOLD",
                                           "createdAt":  "2023-03-01T17:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `Microsoft.Extensions.Options.DataAnnotations` library only exists because it has a dependency on `System.ComponentModel.Annotations`. Since `System.ComponentModel.Annotations` wasn\u0027t in `netstandard2.0` by default, the code in this library was split into its own package instead of being added to `Microsoft.Extensions.Options`.\r\n\r\nHowever, recently we\u0027ve added a dependency from `Microsoft.Extensions.Options` netstandard2.0 to `System.ComponentModel.Annotations` in the 6.0.0-preview5.21301.5 NuGet package. It looks like this was added by a combination of https://github.com/dotnet/runtime/pull/52084 + https://github.com/dotnet/runtime/pull/35606.\r\n\r\nAlso, as of 6.0, `System.ComponentModel.Annotations` is now part of the netX.0+ TFM by default. It is no longer a separate NuGet package.\r\n\r\nWith #82749, we are doubling down on this dependency, and fully adding `System.ComponentModel.Annotations` code to `Microsoft.Extensions.Options`.\r\n\r\nGiven all these changes, it doesn\u0027t make sense to keep `Microsoft.Extensions.Options.DataAnnotations` as a separate library/NuGet package. It is just an extra package, assembly, etc and can be merged into `Microsoft.Extensions.Options`.\r\n\r\nI\u0027m not exactly sure how to do this with NuGet packages. I know we will need `TypeForwardedTo` attributes in order to keep back compat working. Does that mean we will need to keep shipping a NuGet package for `Microsoft.Extensions.Options.DataAnnotations` with just the `TypeForwardedTo` attribute? Maybe we only need to ship 1 more - `8.0.0` with `TypeForwardedTo` and then it can be dead-ended after that?\r\n\r\ncc @tarekgh @ericstj @ViktorHofer \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-01T17:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WfTF0",
                                           "createdAt":  "2023-03-01T23:54:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This sounds reasonable.  Is there any urgency here or is this just about cleaning things up?  (trying to understand if merging them will enable any scenarios)",
                                           "updatedAt":  "2023-03-01T23:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WfUXS",
                                           "createdAt":  "2023-03-01T23:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3BqWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-03-02T00:04:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "My understanding there is no urgency. This mostly optimizes loading one assembly instead of two in the apps.",
                                           "updatedAt":  "2023-03-01T23:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wfdz-",
                                           "createdAt":  "2023-03-02T00:25:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e\u003e Is there any urgency here or is this just about cleaning things up? (trying to understand if merging them will enable any scenarios)\r\n\r\n\u003e My understanding there is no urgency. This mostly optimizes loading one assembly instead of two in the apps.\r\n\r\nAgreed. This is more of a \"clean up\" thing, and isn\u0027t blocking any scenarios.",
                                           "updatedAt":  "2023-03-02T00:25:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iYLew",
                                           "createdAt":  "2023-07-25T20:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBxwvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-07-25T21:10:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I talked offline with @ericstj and we believe this better be done in the early cycle of the next release and there will be some risk doing it now. ",
                                           "updatedAt":  "2023-07-25T20:25:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ryxac",
                                           "createdAt":  "2024-10-30T06:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "As part of this I\u0027d like to bring up an issue when validation fails, which probably needs this two packages be tightly coupled,\n\n`DataAnnotation validation failed for \u0027\u003ctype\u003e\u0027 members: \u0027\u003cproperty-name\u003e\u0027 `\n\nWhen using `[ConfigurationKeyName]`, that name/path should appear in the exception, as the `\u003cproperty-name\u003e` isn\u0027t quite helpful.",
                                           "updatedAt":  "2024-10-30T06:55:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R5Ipw",
                                           "createdAt":  "2024-10-30T16:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@alrz could you please provide a small reproduce project for the issue?",
                                           "updatedAt":  "2024-10-30T16:10:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R5spg",
                                           "createdAt":  "2024-10-30T17:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4xCjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-10-30T17:06:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alrz",
                                           "body":  "When `[ConfigurationKeyName]` is used in conjunction with annotations, only the property name is mentioned in the exception, not the path:\n\n\n```cs\npublic class ConfigurationRoot\n{\n    [Required]\n    [ConfigurationKeyName(\"OTEL_SERVICE_NAME\")]\n    public string ServiceName {get; init;}\n}\n```\nIf the service name is not set, an exception is raised `DataAnnotation validation failed for \u0027ConfigurationRoot\u0027 members: \u0027ServiceName\u0027 `. That doesn\u0027t say anything about the configuration name to be set.\n\n",
                                           "updatedAt":  "2024-10-30T17:03:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Consider merging Microsoft.Extensions.Options.DataAnnotations into Microsoft.Extensions.Options",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84478",
        "createdAt":  "2023-04-07T12:01:46Z",
        "number":  84478,
        "author":  "jez9999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODOcl2A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NullPointerWizard",
                                            "createdAt":  "2024-01-10T15:26:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevTKSS",
                                            "createdAt":  "2025-09-04T16:10:59Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-06T18:29:49Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nShouldn\u0027t `IOptions\u003cT\u003e` support getting named options?  I know you can use `IOptionsSnapshot` and `IOptionsMonitor` but they monitor the updating of the JSON config file which presumably comes with a performance hit.  If it\u0027s appropriate for some classes to use the one-off binding of `IOptions\u003cT\u003e`, why isn\u0027t it appropriate for a singleton to use it for one-off binding when it wants to get named options?  In fact, I may actually want the behaviour of my singleton only changing its configured behaviour when the service is restarted rather than live as the file is edited (that seems like somewhat surprising behaviour as I\u0027m used to settings taking effect only on restart).\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAdd something like `.Get(string optionsName)` to `IOptions\u003cT\u003e`.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgFZyGA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZcDCt",
                                           "createdAt":  "2023-04-07T18:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nShouldn\u0027t `IOptions\u003cT\u003e` support getting named options?  I know you can use `IOptionsSnapshot` and `IOptionsMonitor` but they monitor the updating of the JSON config file which presumably comes with a performance hit.  If it\u0027s appropriate for some classes to use the one-off binding of `IOptions\u003cT\u003e`, why isn\u0027t it appropriate for a singleton to use it for one-off binding when it wants to get named options?  In fact, I may actually want the behaviour of my singleton only changing its configured behaviour when the service is restarted rather than live as the file is edited (that seems like somewhat surprising behaviour as I\u0027m used to settings taking effect only on restart).\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAdd something like `.Get(string optionsName)` to `IOptions\u003cT\u003e`.\r\n\r\n### Additional context\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejez9999\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-07T18:19:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zc1L0",
                                           "createdAt":  "2023-04-07T23:59:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@jez9999 Can you provide more details about your scenario and how incorporating `IOptions\u003cTOptions\u003e.Get(optionName)` will be beneficial? Additionally, could you clarify why using `IOptionsMonitor\u003cTOptions\u003e.Get(String)` isn\u0027t sufficient for your needs? Providing some code examples to demonstrate what you are trying to accomplish would also be useful.",
                                           "updatedAt":  "2023-04-07T23:59:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zc1Pt",
                                           "createdAt":  "2023-04-08T00:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-04-08T00:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZdP6h",
                                           "createdAt":  "2023-04-08T09:27:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "@tarekgh If I have a singleton service that, for example, persists data to a database every 10 seconds, and I update the config file to 60 seconds, I might expect the updated settings to take effect upon restart, not immediately.  `IOptionsMonitor` gets the update immediately.  It could even lead to inconsistent behaviour if code relies on getting a complete group of settings on startup.\r\n\r\n`IOptionsMonitor` may be \"sufficient\", but then why does `IOptions` exist at all?  Isn\u0027t it meant to be a simpler way to get a snapshot of options that were configured when the program started?  What I\u0027m saying is, if you\u0027re doing that for some settings, it\u0027s only consistent to do it for all settings, even ones used by singletons.",
                                           "updatedAt":  "2023-04-08T09:31:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zeowh",
                                           "createdAt":  "2023-04-09T20:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@jez9999 \r\n\r\n\u003e but then why does IOptions exist at all?\r\n\r\nIt looks to me there is some misunderstanding here. `IOptions` provides strongly typed access to groups of related settings. .NET exposes other options interfaces to support different scenarios. like `IOptionsSnapshot` and `IOptionsMonitor`. You may look at the [Options interfaces doc](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-7.0#options-interfaces) for more info. As stated in the doc, `IOptions` only read the configurations once at the startup and never read the configuration again. Isn\u0027t that the behavior you are requesting here? ",
                                           "updatedAt":  "2023-04-09T20:05:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZeoxR",
                                           "createdAt":  "2023-04-09T20:05:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-04-09T20:05:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zet4l",
                                           "createdAt":  "2023-04-09T22:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "But it doesn\u0027t support named options.  What if you want named options with the \"just read the configuration once at startup\" behaviour?",
                                           "updatedAt":  "2023-04-09T22:12:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZevTm",
                                           "createdAt":  "2023-04-09T22:50:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5f_fg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-04-09T23:11:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScarletKuro",
                                           "body":  "\u003e But it doesn\u0027t support named options. What if you want named options with the \"just read the configuration once at startup\" behaviour?\r\n\r\nThis still doesn\u0027t answer the question why you need the `.Get(string optionsName)` method in `IOptions`. `IOptions` is added only once at startup using code similar to the following:\r\n```CSharp\r\nservices.Configure\u003cDbOptions\u003e(Configuration.GetSection(\"DbOptions\"));\r\n```\r\nAfterward, you can inject it via Dependency Injection using `IOptions\u003cDbOptions\u003e`.\r\nIf you updated the configuration, it will apply only after the application restart.\r\n\r\nIf you still want to access an IOptions instance by name, you can inject IConfiguration and use the following code:\r\n```CSharp\r\nvar section = Configuration.GetSection(\"DbOptions\").Get\u003cDbOptions\u003e();\r\nIOptions\u003cDbOptions\u003e option = Microsoft.Extensions.Options.Options.Create(section);\r\n```\r\n",
                                           "updatedAt":  "2023-04-09T22:50:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZewMA",
                                           "createdAt":  "2023-04-09T23:12:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-04-09T23:12:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZexfG",
                                           "createdAt":  "2023-04-09T23:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODk072Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-06T17:52:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jez9999",
                                           "body":  "That `IConfiguration` code looks horrible, it\u0027s the sort of thing that should only go in the initial DI setup.  The consumer should be able to do something tidy like `IOptions\u003cDbOptions\u003e foo; ... foo.Get(\"QA\")`.  If the `IConfiguration` injection is appropriate, why does .NET provide `IOptions` via DI at all?",
                                           "updatedAt":  "2023-04-09T23:43:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZeymC",
                                           "createdAt":  "2023-04-09T23:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It’s unclear what this issue I asking for now that it’s been answered. There are 3 interfaces for consuming strongly typed configuration listed in the docs. There’s also INamed* equivalents of those interfaces.\r\n\r\nWhat are you trying to solve?\r\nWhat are you doing today?\r\nWhat are you trying to improve?",
                                           "updatedAt":  "2023-04-09T23:57:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ze2ad",
                                           "createdAt":  "2023-04-10T00:49:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "@davidfowl I don\u0027t see that it has been answered.  How do I consume named options with `IOptions`?  The other interfaces do something different, keeping the latest version of the JSON file monitored, whereas `IOptions` doesn\u0027t do that.",
                                           "updatedAt":  "2023-04-10T00:49:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZfCeb",
                                           "createdAt":  "2023-04-10T02:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODR6ftQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "NullPointerWizard",
                                                                               "createdAt":  "2024-01-10T15:26:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "When using named options, the only way to get the value is via IOptionsMonitor or IOptionsSnapshot. The reason IOptions\\\u003cT\\\u003e doesn’t have names is because they were added later. We could add to the existing interface but it wouldn’t be usable in net standard 2.0.",
                                           "updatedAt":  "2023-04-10T02:16:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZgbK3",
                                           "createdAt":  "2023-04-10T10:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYc6cQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "swythan",
                                                                               "createdAt":  "2024-02-27T15:59:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jez9999",
                                           "body":  "Indeed.  And adding it\u0027s what I\u0027m suggesting.",
                                           "updatedAt":  "2023-04-10T10:51:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AUelV",
                                           "createdAt":  "2024-06-06T15:44:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rafal-zieba",
                                           "body":  "I\u0027s been more than a year now. If you don\u0027t want to add support for named options to `IOptions\u003cT\u003e` interface than maybe we could get one more interface that behaves like `IOptions\u003cT\u003e` (no monitoring) but has the support. `IOptionsWithNamedOptionsSupoport\u003cT\u003e` for lack of a better name. Without it named options are far less useful. We need to accept performance hit in e.g. every web request (monitoring).",
                                           "updatedAt":  "2024-06-06T15:44:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AUgDZ",
                                           "createdAt":  "2024-06-06T15:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We can do this now that we have default interface methods, but it would work on .NET 8+, not down level. Still, I don\u0027t really understand why you can\u0027t use `IOptionsMonitor\u003cT\u003e.Get(name)`.",
                                           "updatedAt":  "2024-06-06T15:46:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AVl34",
                                           "createdAt":  "2024-06-06T18:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@jez9999 if you can change your code ever so slightly to inject the options model instead of grabbing the named instance, something like this should work:\r\n\r\n```csharp\r\nservices\r\n    .AddSingletonKeyed\u003cIOptions\u003cMyOptions\u003e\u003e(\"QA\", p =\u003e p.GetRequiredService\u003cIOptionsMonitor\u003e().Get(\"QA\"));\r\n```\r\n\r\nThen you can inject this into your service either using the attribute:\r\n```csharp\r\npublic class MyService([FromKeyedServices(\"QA\")]IOptions\u003cMyOptions\u003e options)\r\n...\r\n```\r\n\r\nOr just grab the value directly at method level:\r\n```csharp\r\npublic class MyService(IServiceProvider provider)\r\n{\r\n    public void MyMethod(string environment)\r\n    {\r\n        var options = provider.GetRequiredKeyedService\u003cIOptions\u003cMyOptions\u003e\u003e(environment);\r\n    }\r\n}\r\n```\r\n\r\nOr even drop the identifier altogether if you can do this:\r\n```csharp\r\nservices\r\n    .AddSingletonKeyed\u003cIOptions\u003cMyOptions\u003e\u003e(\"QA\", p =\u003e p.GetRequiredService\u003cIOptionsMonitor\u003e().Get(\"QA\"))\r\n    .AddTransient\u003cMyService\u003e(p =\u003e ActivatorUtilities.CreateInstance\u003cMyService\u003e(\r\n        p, \r\n        p.GetRequiredKeyedService\u003cIOptions\u003cMyOptions\u003e\u003e());\r\n```\r\n\r\nOn a personal level... I still firmly believe the entire `IOptions` abstraction along with named options is a workaround to limitations in the Microsoft container (some of which were lifted when keyed registrations were added), but I end up using it anyways just for consistency\u0027s sake as it has become the de-facto standard for these kinds of settings.",
                                           "updatedAt":  "2024-06-06T18:26:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AVnIY",
                                           "createdAt":  "2024-06-06T18:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtIC-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bau-wd",
                                                                               "createdAt":  "2024-08-07T13:49:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@davidfowl \r\n\u003e We can do this now that we have default interface methods, but it would work on .NET 8+, not down level. Still, I don\u0027t really understand why you can\u0027t use `IOptionsMonitor\u003cT\u003e.Get(name)`.\r\n\r\n`IOptionsMonitor` will force rebinding and re-running the config pipeline for that `T` instance, which is what the OP wants to avoid.\r\n\r\nJust using it directly won\u0027t fix this unless the class where you are using it is registered as singleton itself.\r\n\r\nOne of the ways to make it behave like `IOptions` is to override the registration like I mentioned above, which combined with keyed registrations ends up producing the same effect as a singleton named options would.",
                                           "updatedAt":  "2024-06-06T18:29:48Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "IOptions\u003cT\u003e should support getting named options",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85276",
        "createdAt":  "2023-04-24T18:25:18Z",
        "number":  85276,
        "author":  "jez9999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-25T01:10:51Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027m not exactly sure why, but at the moment the only way of setting up options with a factory in ASP.NET is to take an unconfigured instance of an options object, and modify it to have the correct values.  There doesn\u0027t appear to be a way to just return the options object from the factory.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThere should be an overload in `OptionsServiceCollectionExtensions` of `Configure` that takes a `Func\u003cTOptions\u003e` so I can just return an options set instead of having to map each value manually.  I have an overarching options object I first bind, then configure subsets of that options object that may need to be pulled in.  Currently I need to do this:\r\n\r\n```C#\r\nprivate readonly WebAppOptions _options = new();\r\n\r\n[...]\r\n\r\n_conf.Bind(_options);\r\nservices\r\n\t.Configure\u003cWebAppOptions\u003e(_conf);\r\nservices\r\n\t.Configure\u003cTurnsProcessorOptions\u003e(opts =\u003e {\r\n\t\topts.EmptyRoundsForGameDraw = _options.TurnsProcessorOptions.EmptyRoundsForGameDraw;\r\n\t\topts.TurnTimeoutInterval = _options.TurnsProcessorOptions.TurnTimeoutInterval;\r\n\t});\r\n```\r\n\r\nA `Func\u003cTOptions\u003e` overload would allow me to simply do:\r\n\r\n```C#\r\n_conf.Bind(_options);\r\nservices\r\n\t.Configure\u003cWebAppOptions\u003e(_conf);\r\nservices\r\n\t.Configure\u003cTurnsProcessorOptions\u003e(() =\u003e _options.TurnsProcessorOptions);\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWqa6VQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aprpV",
                                           "createdAt":  "2023-04-24T21:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027m not exactly sure why, but at the moment the only way of setting up options with a factory in ASP.NET is to take an unconfigured instance of an options object, and modify it to have the correct values.  There doesn\u0027t appear to be a way to just return the options object from the factory.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThere should be an overload in `OptionsServiceCollectionExtensions` of `Configure` that takes a `Func\u003cTOptions\u003e` so I can just return an options set instead of having to map each value manually.  I have an overarching options object I first bind, then configure subsets of that options object that may need to be pulled in.  Currently I need to do this:\r\n\r\n```\r\nprivate readonly WebAppOptions _options = new();\r\n\r\n[...]\r\n\r\n_conf.Bind(_options);\r\nservices\r\n\t.Configure\u003cWebAppOptions\u003e(_conf);\r\nservices\r\n\t.Configure\u003cTurnsProcessorOptions\u003e(opts =\u003e {\r\n\t\topts.EmptyRoundsForGameDraw = _options.TurnsProcessorOptions.EmptyRoundsForGameDraw;\r\n\t\topts.TurnTimeoutInterval = _options.TurnsProcessorOptions.TurnTimeoutInterval;\r\n\t});\r\n```\r\n\r\nA `Func\u003cTOptions\u003e` overload would allow me to simply do:\r\n\r\n```\r\n_conf.Bind(_options);\r\nservices\r\n\t.Configure\u003cWebAppOptions\u003e(_conf);\r\nservices\r\n\t.Configure\u003cTurnsProcessorOptions\u003e(() =\u003e _options.TurnsProcessorOptions);\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejez9999\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-24T21:50:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IServiceCollection Configure should have an overload taking Func\u003cTOptions\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91966",
        "createdAt":  "2023-09-12T22:24:40Z",
        "number":  91966,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:44:34Z",
        "body":  "Options source generator is parsing the code validation attributes in the source and then emits generated code which instantiate the attribute with the same parameters and properties used in the source code. Currently the source generator support all basic parameter types including the array and params parameters. There are more complex scenarios which can include array of arrays like:\r\n\r\n```C#\r\nusing System;\r\npublic class MyValidationAttribute : Attribute {\r\n    public MyValidationAttribute(params object[] values) { }\r\n}\r\n\r\n[MyValidationAttribute(new object[] { new object [] { new object[] { new int[] {1, 2, 3}}}})]\r\npublic class MyType\r\n{\r\n}\r\n``` \r\n\r\nThis issue is tracking to look at such complex scenarios and support it. \r\n\r\nhttps://github.com/dotnet/runtime/pull/91934#discussion_r1323326105\r\nhttps://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp.Workspaces/CodeGeneration/CSharpSyntaxGenerator.cs,838c28d0fc10cd04\r\n\r\nCC @ericstj ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2f43A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mUToB",
                                           "createdAt":  "2023-09-12T22:24:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOptions source generator is parsing the code validation attributes in the source and then emits generated code which instantiate the attribute with the same parameters and properties used in the source code. Currently the source generator support all basic parameter types including the array and params parameters. There are more complex scenarios which can include array of arrays like:\r\n\r\n```C#\r\nusing System;\r\npublic class MyValidationAttribute : Attribute {\r\n    public MyValidationAttribute(params object[] values) { }\r\n}\r\n\r\n[MyValidationAttribute(new object[] { new object [] { new object[] { new int[] {1, 2, 3}}}})]\r\npublic class MyType\r\n{\r\n}\r\n``` \r\n\r\nThis issue is tracking to look at such complex scenarios and support it. \r\n\r\nhttps://github.com/dotnet/runtime/pull/91934#discussion_r1323326105\r\nhttps://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp.Workspaces/CodeGeneration/CSharpSyntaxGenerator.cs,838c28d0fc10cd04\r\n\r\nCC @ericstj \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etarekgh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel.DataAnnotations`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-12T22:24:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mUTwg",
                                           "createdAt":  "2023-09-12T22:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOptions source generator is parsing the code validation attributes in the source and then emits generated code which instantiate the attribute with the same parameters and properties used in the source code. Currently the source generator support all basic parameter types including the array and params parameters. There are more complex scenarios which can include array of arrays like:\r\n\r\n```C#\r\nusing System;\r\npublic class MyValidationAttribute : Attribute {\r\n    public MyValidationAttribute(params object[] values) { }\r\n}\r\n\r\n[MyValidationAttribute(new object[] { new object [] { new object[] { new int[] {1, 2, 3}}}})]\r\npublic class MyType\r\n{\r\n}\r\n``` \r\n\r\nThis issue is tracking to look at such complex scenarios and support it. \r\n\r\nhttps://github.com/dotnet/runtime/pull/91934#discussion_r1323326105\r\nhttps://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp.Workspaces/CodeGeneration/CSharpSyntaxGenerator.cs,838c28d0fc10cd04\r\n\r\nCC @ericstj \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etarekgh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003etarekgh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-12T22:25:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mZT_A",
                                           "createdAt":  "2023-09-13T16:00:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "In solving this we should look at all possible parameters that might appear in attribute usage to ensure we can synthesize source for them.  I think it might make sense to look at Roslyn\u0027s CSharpSyntaxGenerator for some inspiration here - I think the place to look for reference implementation might be https://github.com/dotnet/roslyn/blob/1b7a6f807cb8ce709048debae6b771f4705a697a/src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs#L3393",
                                           "updatedAt":  "2023-09-13T16:00:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ_jc",
                                           "createdAt":  "2024-08-06T16:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@tarekgh co we need to address this in 9.0?  I don\u0027t think we\u0027ve heard feedback on it.",
                                           "updatedAt":  "2024-08-06T16:58:25Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Complex validation attribute constructor support in the Options validator source generator",
        "labels":  [
                       "area-Extensions-Options",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93313",
        "createdAt":  "2023-10-10T19:20:23Z",
        "number":  93313,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:44:36Z",
        "body":  "### Description\r\n\r\nSee more detail in https://github.com/dotnet/runtime/issues/92914.\r\n\r\n### Reproduction Steps\r\n\r\nCreate a project that uses Options Validation source generator.  Observe it\u0027s execution pattern - either in the debugger or through ETW.\r\n\r\n### Expected behavior\r\n\r\nChanges unrelated to the options validation code and it\u0027s type closure should not trigger regeneration of the options source.\r\n\r\n### Actual behavior\r\n\r\nEvery change causes the entire pipeline to rerun.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nWe haven\u0027t had reports of the performance here being a blocker, but that could be due to lack of use.  The amount of work done on keypress will depend on whether or not the generator has work to do.  If it has a lot of work to do, then it will be doing that work on every change.\r\n \r\nDisable the options generator from design-time builds (this will result in errors where the generator is used, which are design time only errors).\r\nWorkaround:\r\n```xml\r\n  \u003cTarget Name=\"_disableOptionsGeneratorInDesignTime\" BeforeTargets=\"ResolveOffByDefaultAnalyzers\"\u003e\r\n    \u003cItemGroup Condition=\"\u0027$(DesignTimeBuild)\u0027 == \u0027true\u0027 OR \u0027$(BuildingProject)\u0027 != \u0027true\u0027\"\u003e\r\n      \u003cOffByDefaultAnalyzer Include=\"Microsoft.Extensions.Options.SourceGeneration.dll\"\r\n                            IsEnabled=\"$(EnableOptionsGenerator)\"/\u003e\r\n    \u003c/ItemGroup\u003e\r\n  \u003c/Target\u003e\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2d3pg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5orLh7",
                                           "createdAt":  "2023-10-10T20:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nSee more detail in https://github.com/dotnet/runtime/issues/92914.\r\n\r\n### Reproduction Steps\r\n\r\nCreate a project that uses Options Validation source generator.  Observe it\u0027s execution pattern - either in the debugger or through ETW.\r\n\r\n### Expected behavior\r\n\r\nChanges unrelated to the options validation code and it\u0027s type closure should not trigger regeneration of the options source.\r\n\r\n### Actual behavior\r\n\r\nEvery change causes the entire pipeline to rerun.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nWe haven\u0027t had reports of the performance here being a blocker, but that could be due to lack of use.  The amount of work done on keypress will depend on whether or not the generator has work to do.  If it has a lot of work to do, then it will be doing that work on every change.\r\n \r\nDisable the options generator from design-time builds (this will result in errors where the generator is used, which are design time only errors).\r\nWorkaround:\r\n```xml\r\n  \u003cTarget Name=\"_disableOptionsGeneratorInDesignTime\" BeforeTargets=\"ResolveOffByDefaultAnalyzers\"\u003e\r\n    \u003cItemGroup Condition=\"\u0027$(DesignTimeBuild)\u0027 == \u0027true\u0027 OR \u0027$(BuildingProject)\u0027 != \u0027true\u0027\"\u003e\r\n      \u003cOffByDefaultAnalyzer Include=\"Microsoft.Extensions.Options.SourceGeneration.dll\"\r\n                            IsEnabled=\"$(EnableOptionsGenerator)\"/\u003e\r\n    \u003c/ItemGroup\u003e\r\n  \u003c/Target\u003e\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-10T20:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oz1TT",
                                           "createdAt":  "2023-10-11T19:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It looks like VS noticed the impact of this generator as well, causing 0.21% regression on a typing benchmark for razor pages.  When fixing this we should be comparing performance to other well-behaved incremental generators (RegEx, Interop, Json) to ensure we raise enough of the data model to the incremental pipeline so that we don\u0027t end up calling the expensive part of our pipeline of every change. ",
                                           "updatedAt":  "2023-10-11T19:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pcg1U",
                                           "createdAt":  "2023-10-18T18:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKLO1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-10-18T18:52:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sharwell",
                                           "body":  "@ericstj PR #93427 will address (eliminate) the performance overhead for cases where the source generator is not being used. I\u0027m watching this issue as tracking ongoing work to improve the performance specifically in cases where the generator is being used (i.e. produces at least one output).",
                                           "updatedAt":  "2023-10-18T18:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pcuhv",
                                           "createdAt":  "2023-10-18T18:55:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Yes, we need to improve that situation.  FWIW we have the same class of bug in logging https://github.com/dotnet/runtime/issues/93309 since 6.0 which also needs to be fixed.\r\n\r\nAs mentioned above the plan is to fix in 9.0 (with possibility of backport) - @sharwell do you know of a reason to prioritize a fix for this sooner than that?",
                                           "updatedAt":  "2023-10-18T18:55:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pdVdZ",
                                           "createdAt":  "2023-10-18T20:48:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKc6vA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-10-20T15:40:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sharwell",
                                           "body":  "No, the urgent fix was already submitted.",
                                           "updatedAt":  "2023-10-18T20:48:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5prXjX",
                                           "createdAt":  "2023-10-20T15:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Thank you for confirming @sharwell.  We will get to this in 9.0 I just wanted to make sure we were on the same page.",
                                           "updatedAt":  "2023-10-20T15:41:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ3em",
                                           "createdAt":  "2024-08-06T16:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We discussed improving the incremental characteristics of the runtime source generators and scoped it out of 9.0",
                                           "updatedAt":  "2024-08-06T16:38:33Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Options Validation source generator runs primary code generation phase on keypress",
        "labels":  [
                       "area-Extensions-Options",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95678",
        "createdAt":  "2023-12-06T10:22:14Z",
        "number":  95678,
        "author":  "HHobeck",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T07:01:15Z",
        "body":  "### Background and motivation\r\n\r\nDear community,\r\n\r\nI came up with the idea to extend the Microsoft.Extensions.Options model to support the configuration options with a full qualified section key to resolve the IOptions\u003cT\u003e dependencies automatically. This has the advantage that you don\u0027t need to register the configuration classes explicit (and map it to an arbitrary section in your configuration) in the application startup each time. It is useful especially if you are not aware of third party libraries and want to change the behavior or fine tune the settings (via IOptions\u003cT\u003e) in a later stage without recompilation.\r\n\r\nHope this finds a way in .net core because it was a breaking change compared to the old world of .NET Framework and left the user without the option to change the behavior of how the settings are resolved.\r\n\r\nThank you.\r\n\r\n### API Proposal\r\n\r\nPossible implementation:\r\n```csharp\r\nusing System;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Microsoft.Extensions.Options;\r\n\r\npublic static class OptionsWithFullQualifiedSectionKeyComposition\r\n{\r\n    public static void Register(IServiceCollection serviceCollection)\r\n    {\r\n        if (serviceCollection is null) throw new ArgumentNullException(nameof(serviceCollection));\r\n\r\n        serviceCollection.AddSingleton(typeof(IConfigureOptions\u003c\u003e), typeof(ConfigureOptionsWithFullQualifiedSectionKey\u003c\u003e));\r\n        serviceCollection.AddSingleton(\r\n            typeof(IOptionsChangeTokenSource\u003c\u003e), typeof(ConfigurationChangeTokenSourceWithFullQualifiedSectionKey\u003c\u003e)\r\n        );\r\n    }\r\n}\r\n\r\npublic class ConfigureOptionsWithFullQualifiedSectionKey\u003cTOptions\u003e\r\n    : ConfigureFromConfigurationOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    public ConfigureOptionsWithFullQualifiedSectionKey(IConfiguration configuration)\r\n        : base(configuration?.GetSection(typeof(TOptions).FullName)!)\r\n    {\r\n    }\r\n}\r\n\r\npublic class ConfigurationChangeTokenSourceWithFullQualifiedSectionKey\u003cTOptions\u003e\r\n    : ConfigurationChangeTokenSource\u003cTOptions\u003e\r\n{\r\n    public ConfigurationChangeTokenSourceWithFullQualifiedSectionKey(IConfiguration configuration)\r\n        : base(configuration?.GetSection(typeof(TOptions).FullName)!)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nPossible usage:\r\n```csharp\r\ninternal class Program\r\n{\r\n    static void Main(string[] arguments)\r\n    {\r\n        IHostBuilder hostBuilder = Host.CreateDefaultBuilder(arguments);\r\n        hostBuilder.ConfigureServices(\r\n            serviceCollection =\u003e OptionsWithFullQualifiedSectionKeyComposition.Register(serviceCollection)\r\n        );\r\n\r\n        using IHost host = hostBuilder.Build();\r\n        host.Run();\r\n    }\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThis has no risks and can be seen as an option to the user to change the way how the configuration are loaded.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmzL4Rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5t07UT",
                                           "createdAt":  "2023-12-06T10:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nDear community,\r\n\r\nI came up with the idea to extend the Microsoft.Extensions.Options model to support the configuration options with a full qualified section key to resolves the IOptions\u003cT\u003e dependencies automatically. This has the advantage that you don\u0027t need to register the configuration classes explicit in the application startup each time. It is useful especially if you are not aware of third party library and wants to change the behavior or fine tune the settings (via IOptions\u003cT\u003e) in a later stage without recompilation.\r\n\r\nHope this finds a way in .net core because it was a breaking change compared to the old world of .NET Framework and left the user without the option to change the behavior of how the settings are resolved.\r\n\r\nThank you.\n\n### API Proposal\n\nPossible implementation:\r\n```csharp\r\nusing System;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Microsoft.Extensions.Options;\r\n\r\npublic static class OptionsWithFullQualifiedSectionKeyComposition\r\n{\r\n    public static void Register(IServiceCollection serviceCollection)\r\n    {\r\n        if (serviceCollection is null) throw new ArgumentNullException(nameof(serviceCollection));\r\n\r\n        serviceCollection.AddSingleton(typeof(IConfigureOptions\u003c\u003e), typeof(ConfigureOptionsWithFullQualifiedSectionKey\u003c\u003e));\r\n        serviceCollection.AddSingleton(\r\n            typeof(IOptionsChangeTokenSource\u003c\u003e), typeof(ConfigurationChangeTokenSourceWithFullQualifiedSectionKey\u003c\u003e)\r\n        );\r\n    }\r\n}\r\n\r\npublic sealed class ConfigureOptionsWithFullQualifiedSectionKey\u003cTOptions\u003e\r\n    : ConfigureFromConfigurationOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    public ConfigureOptionsWithFullQualifiedSectionKey(IConfiguration configuration)\r\n        : base(configuration?.GetSection(typeof(TOptions).FullName)!)\r\n    {\r\n    }\r\n}\r\n\r\npublic sealed class ConfigurationChangeTokenSourceWithFullQualifiedSectionKey\u003cTOptions\u003e\r\n    : ConfigurationChangeTokenSource\u003cTOptions\u003e\r\n{\r\n    public ConfigurationChangeTokenSourceWithFullQualifiedSectionKey(IConfiguration configuration)\r\n        : base(configuration?.GetSection(typeof(TOptions).FullName)!)\r\n    {\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\nPossible usage:\r\n```csharp\r\ninternal class Program\r\n{\r\n    static void Main(string[] arguments)\r\n    {\r\n        IHostBuilder hostBuilder = Host.CreateDefaultBuilder(arguments);\r\n        hostBuilder.ConfigureServices(\r\n            serviceCollection =\u003e OptionsWithFullQualifiedSectionKeyComposition.Register(serviceCollection)\r\n        );\r\n\r\n        using IHost host = hostBuilder.Build();\r\n        host.Run();\r\n    }\r\n}\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThis has no risks and can be seen as an option to the user to change the way how the configuration are loaded.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eHHobeck\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-06T10:22:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WAib0",
                                           "createdAt":  "2024-12-04T09:47:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HHobeck",
                                           "body":  "@tarekgh Maybe this feature is something for .NET 10? ;)",
                                           "updatedAt":  "2024-12-04T09:47:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WGF9I",
                                           "createdAt":  "2024-12-04T18:08:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@HHobeck Thanks for reaching out. I’m monitoring this request to assess demand before considering support for it. Does this pose a blocker for you in any way? It looks to me trivial to add this code to your app if necessary. ",
                                           "updatedAt":  "2024-12-04T18:08:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WXvRr",
                                           "createdAt":  "2024-12-06T10:46:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HHobeck",
                                           "body":  "Hi @tarekgh. \nNo it\u0027s not a blocker for me. I\u0027m using it in production code for years already. My motivation is just to bring this feature into the .NET world, because I think it is very convenient and a missing puzzle.",
                                           "updatedAt":  "2024-12-06T10:47:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZK67v",
                                           "createdAt":  "2025-01-03T20:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The proposed implementation gets the name of the configuration section from `typeof(TOptions).FullName`.  That can get unwieldy if TOptions is a constructed generic type.  For example, `typeof(List\u003cint\u003e.FullName)` is ``System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]``, i.e. it includes the assembly-qualified name of the generic argument.  When Microsoft.Extensions.Logging.LoggerFactoryExtensions translates types to log category names, it uses the internal class [TypeNameHelper](https://github.com/dotnet/runtime/blob/9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3/src/libraries/Common/src/Extensions/TypeNameHelper/TypeNameHelper.cs) to format the type names more concisely.",
                                           "updatedAt":  "2025-01-03T20:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bMvhH",
                                           "createdAt":  "2025-01-21T07:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HHobeck",
                                           "body":  "\u003e The proposed implementation gets the name of the configuration section from `typeof(TOptions).FullName`. That can get unwieldy if TOptions is a constructed generic type. For example, `typeof(List\u003cint\u003e.FullName)` is `` System.Collections.Generic.List`1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] ``, i.e. it includes the assembly-qualified name of the generic argument. When Microsoft.Extensions.Logging.LoggerFactoryExtensions translates types to log category names, it uses the internal class [TypeNameHelper](https://github.com/dotnet/runtime/blob/9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3/src/libraries/Common/src/Extensions/TypeNameHelper/TypeNameHelper.cs) to format the type names more concisely.\n\nYes, that\u0027s a good point. Thank you for bringing this to our attention.",
                                           "updatedAt":  "2025-01-21T07:01:14Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Support of configuration options with a full qualified section key like in the old days of .NET Framework",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95899",
        "createdAt":  "2023-12-12T09:01:01Z",
        "number":  95899,
        "author":  "HHobeck",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-05T11:53:22Z",
        "body":  "### Background and motivation\r\n\r\nDear community,\r\n\r\nI came up with the idea to extend the Microsoft.Extensions.Options model to support a secured value decryption of dedicated configuration properties marked with SecuredValueAttribute. Handling with sensitive information in application settings is very difficult and error prone. Because every API developer and third party library authors knows what sensitive information are it is very easy to mark it with deserving protection.\r\n\r\nThe idea is to encrypt the sensitive information in the application settings with e.g. IDataProtector on design time (via IDE would be awesome) and decrypt it when the application started. This has the advantage that you can check in you configuration without to be afraid that the sensitive information are in the repository.\r\n\r\nThe idea would be to have a provider based approach and supporting other security provider for AWS, MS Azure and so on.\r\n\r\nThank you for reading.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nusing System;\r\nusing Microsoft.AspNetCore.DataProtection;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Microsoft.Extensions.Options;\r\n\r\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)]\r\npublic class SecuredValueAttribute : Attribute\r\n{\r\n}\r\n\r\npublic static class OptionsWithSecuredValueDecryptionComposition\r\n{\r\n    public static void Register(IServiceCollection serviceCollection)\r\n    {\r\n        if (serviceCollection is null) throw new ArgumentNullException(nameof(serviceCollection));\r\n\r\n        serviceCollection.AddSingleton(typeof(IPostConfigureOptions\u003c\u003e), typeof(SecuredValueDecryptionConfigureOptions\u003c\u003e));\r\n    }\r\n}\r\n\r\npublic sealed class SecuredValueDecryptionConfigureOptions\u003cTOptions\u003e : IPostConfigureOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    private readonly IHostEnvironment _hostEnvironment;\r\n    private readonly Lazy\u003cIDataProtector\u003e _dataProtectorLazy;\r\n\r\n    public SecuredValueDecryptionConfigureOptions(IHostEnvironment hostEnvironment, IServiceProvider serviceProvider)\r\n    {\r\n        _hostEnvironment = hostEnvironment ?? throw new ArgumentNullException(nameof(hostEnvironment));\r\n        if (serviceProvider is null) throw new ArgumentNullException(nameof(serviceProvider));\r\n\r\n        _dataProtectorLazy = new Lazy\u003cIDataProtector\u003e(() =\u003e\r\n            serviceProvider.GetRequiredService\u003cIDataProtectionProvider\u003e().CreateProtector(\"SecuredValueDecryption\")\r\n        );\r\n    }\r\n\r\n    public void PostConfigure(string? name, TOptions options)\r\n    {\r\n        if (_hostEnvironment.IsDevelopment()) return;\r\n\r\n        // Detect encrypted configuration properties and decrypt them here if the environment is not Development.\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\ninternal class Program\r\n{\r\n    static void Main(string[] arguments)\r\n    {\r\n        IHostBuilder hostBuilder = Host.CreateDefaultBuilder(arguments);\r\n        hostBuilder.ConfigureServices((hostBuilderContext, serviceCollection) =\u003e\r\n        {\r\n            OptionsWithSecuredValueDecryptionComposition.Register(serviceCollection);\r\n            serviceCollection.Configure\u003cServiceSettings\u003e(\r\n                hostBuilderContext.Configuration.GetSection(typeof(ServiceSettings).FullName!)\r\n            );\r\n        });\r\n\r\n        using IHost host = hostBuilder.Build();\r\n        host.Run();\r\n    }\r\n}\r\n\r\n[SecuredValue]\r\npublic class ServiceSettings\r\n{\r\n    public string UserName { get; set; } = string.Empty;\r\n\r\n    [SecuredValue]\r\n    public string Password { get; set; } = string.Empty;\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThis is additive and every developer can decide to use it or not. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObr-P8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5uXLin",
                                           "createdAt":  "2023-12-12T09:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-hosting\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nDear community,\r\n\r\nI came up with the idea to extend the Microsoft.Extensions.Options model to support a secured value decryption of dedicated configuration properties marked with SecuredValueAttribute. Handling with sensitive information in application settings is very difficult and error prone. Because every API developer and third party library authors knows what sensitive information are it is very easy to mark it with deserving protection.\r\n\r\nThe idea is to encrypt the sensitive information in the application settings with e.g. IDataProtector on design time (via IDE would be awesome) and decrypt it when the application started. This has the advantage that you can check in you configuration without to be afraid that the sensitive information are in the repository.\r\n\r\nThe idea would be to have a provider based approach and supporting other security provider for AWS, MS Azure and so on.\r\n\r\nThank you for reading.\n\n### API Proposal\n\n```csharp\r\nusing System;\r\nusing Microsoft.AspNetCore.DataProtection;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Microsoft.Extensions.Options;\r\n\r\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)]\r\npublic class SecuredValueAttribute : Attribute\r\n{\r\n}\r\n\r\npublic static class OptionsWithSecuredValueDecryptionComposition\r\n{\r\n    public static void Register(IServiceCollection serviceCollection)\r\n    {\r\n        if (serviceCollection is null) throw new ArgumentNullException(nameof(serviceCollection));\r\n\r\n        serviceCollection.AddSingleton(typeof(IPostConfigureOptions\u003c\u003e), typeof(SecuredValueDecryptionConfigureOptions\u003c\u003e));\r\n    }\r\n}\r\n\r\npublic sealed class SecuredValueDecryptionConfigureOptions\u003cTOptions\u003e : IPostConfigureOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    private readonly IHostEnvironment _hostEnvironment;\r\n    private readonly Lazy\u003cIDataProtector\u003e _dataProtectorLazy;\r\n\r\n    public SecuredValueDecryptionConfigureOptions(IHostEnvironment hostEnvironment, IServiceProvider serviceProvider)\r\n    {\r\n        _hostEnvironment = hostEnvironment ?? throw new ArgumentNullException(nameof(hostEnvironment));\r\n        if (serviceProvider is null) throw new ArgumentNullException(nameof(serviceProvider));\r\n\r\n        _dataProtectorLazy = new Lazy\u003cIDataProtector\u003e(() =\u003e\r\n            serviceProvider.GetRequiredService\u003cIDataProtectionProvider\u003e().CreateProtector(\"SecuredValueDecryption\")\r\n        );\r\n    }\r\n\r\n    public void PostConfigure(string? name, TOptions options)\r\n    {\r\n        // Detect encrypted configuration properties and decrypt them here or get it from\r\n        // AWS or MS Azure if the environment is not Development.\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\ninternal class Program\r\n{\r\n    static void Main(string[] arguments)\r\n    {\r\n        IHostBuilder hostBuilder = Host.CreateDefaultBuilder(arguments);\r\n        hostBuilder.ConfigureServices(\r\n            serviceCollection =\u003e OptionsWithSecuredValueDecryptionComposition.Register(serviceCollection)\r\n        );\r\n\r\n        using IHost host = hostBuilder.Build();\r\n        host.Run();\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThis is additive and every developer can decide to use it or not. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eHHobeck\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Hosting`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-12T09:01:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ubnAu",
                                           "createdAt":  "2023-12-12T20:10:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPY-_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2023-12-12T21:08:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2023-12-13T04:53:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Handling with sensitive information in application settings is very difficult and error prone.\r\n\r\nSo difficult and error prone that `SecureString` was removed.\r\nThe underlying problem is that protecting your own memory is very difficult, especially once you consider that managed memory systems tend to keep copies just laying around.\r\n\r\n\u003e The idea is to encrypt the sensitive information in the application settings with e.g. IDataProtector on design time (via IDE would be awesome) and decrypt it when the application started. This has the advantage that you can check in you configuration without to be afraid that the sensitive information are in the repository.\r\n\r\n.... if you\u0027ve encrypted the setting, where are you getting the decryption key from?  You can\u0027t put _that_ in the repository.  You have to put it somewhere secure, like an environment variable or key vault on the deployment target.\r\nAnd the moment you have to put the decryption key somewhere secure, you may as well put the actual setting in the same secure storage.\r\n\r\nAdditionally, even if you can put a setting into the source repository, at scale you generally want settings to come from setup/deployment scripts referencing other identities.  For example, if you\u0027re thinking of things like passwords for databases, rather than storing the database password in the source repository it should be retrieved from the deployed database as part of deployment.",
                                           "updatedAt":  "2023-12-12T20:10:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ugbHu",
                                           "createdAt":  "2023-12-13T14:13:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HHobeck",
                                           "body":  "Hi Stephen.\r\n\r\nThanks for your thoughts. I would like to reply to this as following:\r\n\r\n\u003e The underlying problem is that protecting your own memory is very difficult, especially once you consider that managed memory systems tend to keep copies just laying around.\r\n\r\nThis feature is not about protecting sensitive information in memory it is about how to inject it into the configuration system. As long as you are not concatenating the string you have the sensitive information exactly one time in memory. But this problem you are describing here remains independent of that if you inject the sensitive information via pipeline on deployment time or put it on an environment variable or get it on startup from a security vault on runtime. That means at the end if an attacker has access to your memory then you have other problems.\r\n\r\n\u003e .... if you\u0027ve encrypted the setting, where are you getting the decryption key from? You can\u0027t put that in the repository. You have to put it somewhere secure, like an environment variable or key vault on the deployment target.\r\n\u003e And the moment you have to put the decryption key somewhere secure, you may as well put the actual setting in the same secure storage.\r\n\r\nYes maybe you are right and the solution you are describing gives a maximum value from the security point of view. But you need to consider that not all applications are running in a high security environment. You can think of to have a solution between password in clear text and password injected in the deployment pipeline. In most cases the developer wants to test the application with NonProduction or even with the Production settings locally. That means maybe in 3 of 5 projects there will be other solutions implemented. One solution can be to determine the sensitive information from e.g. AWS Secrets Manager or Azure Key Vault or like I mentioned to just decrypt it on runtime.\r\n\r\nTo answer your question: The DataProtectionAPI can be used to e.g. use the private key which is located on a dedicated folder where only user have access who are allowed to see the information.\r\n\r\n\u003e Additionally, even if you can put a setting into the source repository, at scale you generally want settings to come from setup/deployment scripts referencing other identities. For example, if you\u0027re thinking of things like passwords for databases, rather than storing the database password in the source repository it should be retrieved from the deployed database as part of deployment.\r\n\r\nI agree if you think of a rolling password management then this feature would be not fitting.",
                                           "updatedAt":  "2023-12-13T15:46:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uiXtb",
                                           "createdAt":  "2023-12-13T18:32:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e As long as you are not concatenating the string you have the sensitive information exactly one time in memory.\r\n\r\nThis is false.\r\nThe memory manager is free to make copies of a string at any time, to enable things like heap compaction.\r\nDepending on how your parse/decrypt is implemented, you\u0027ll have partial or whole copies of the raw data in byte arrays.\r\n\r\n\u003e But you need to consider that not all applications are running in a high security environment.\r\n\r\nThis isn\u0027t high-security stuff.  This should be standard security stuff.\r\n\r\n\u003e In most cases the developer wants to test the application with NonProduction or even with the Production settings locally.\r\n\r\nIn almost no case should a developer have access to Production secrets, especially anything that would enable read/write access to resources.  Ideally, developers should be able to run all unit tests and the majority of base integration tests locally, without a connection to cloud resources.  Even when they do need to access remote resources, the frameworks they use should enable them to connect with developer-specific credentials available by the cloud platform.  For example, with Azure you can log in to the CLI which gets you a token, and then things like remote database connections use your tokenized credentials instead of what would normally be tokenized credentials for the actual host service.\r\n\r\nFor the most part, the need for secret variables should be something we actively discourage.  The majority of their use is for managing credentials, which causes a number of problems (eg, rolling expired credentials, leaks).  Which is why the push is to update frameworks to use token identities, and allow for automatic use by developer tools.  Many of the more popular frameworks already work this way (eg, ASP.NET, Spring Boot, etc)\r\n\r\n\u003e To answer your question: The DataProtectionAPI can be used to e.g. use the private key which is located on a dedicated folder where only user have access who are allowed to see the information.\r\n\r\nIf you mean using this to manage a private key, **no**.  First, production private keys shouldn\u0027t be in the repository simply from a management perspective (never mind the security reasons).  Even non-prod keys can be dicey.  For local development many frameworks have fallback configs that should be used instead.\r\n",
                                           "updatedAt":  "2023-12-13T18:32:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ujLhM",
                                           "createdAt":  "2023-12-13T21:19:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HHobeck",
                                           "body":  "\u003e This is false. The memory manager is free to make copies of a string at any time, to enable things like heap compaction. Depending on how your parse/decrypt is implemented, you\u0027ll have partial or whole copies of the raw data in byte arrays.\n\nOkay for sure this is operation system optimisation stuff which I have no insides. I can just say that from the language point of view strings are object types and just the address pointers are stored on the stack and will be copied. Just curious: Can you tell me where the different is of your proposal when injecting the sensitive information on deployment time or get it from a security provider? Is it not stored in memory?\n\n\u003e This isn\u0027t high-security stuff. This should be standard security stuff.\n\nOkay fair enough to hold the security high. But please consider that not all applications are the same and running in the cloud,\n\n\u003e In almost no case should a developer have access to Production secrets, especially anything that would enable read/write access to resources. Ideally, developers should be able to run all unit tests and the majority of base integration tests locally, without a connection to cloud resources. Even when they do need to access remote resources, the frameworks they use should enable them to connect with developer-specific credentials available by the cloud platform. For example, with Azure you can log in to the CLI which gets you a token, and then things like remote database connections use your tokenized credentials instead of what would normally be tokenized credentials for the actual host service.\n\nOf course fair point that the developers should have no access to the production environment. But on the non-production environment they should be able to access ;). You can see my proposal also as additive: You can encrypt just the sensitive information for the NonProduction environment and use another mechanism on Production system or even do both and put only encrypted values in the security provider (in the sense of defense in depth).\n\n\u003e For the most part, the need for secret variables should be something we actively discourage. The majority of their use is for managing credentials, which causes a number of problems (eg, rolling expired credentials, leaks). Which is why the push is to update frameworks to use token identities, and allow for automatic use by developer tools. Many of the more popular frameworks already work this way (eg, ASP.NET, Spring Boot, etc)\n\nCan you please explain this in more detail? I\u0027m curios and open for any other solutions. How would you provide the credentials to the application to e.g. connect to the database? You mean not to inject it in the configuration system via environment variable or mounted a secret file right? Does it mean you request the credentials from the security provider each time you are establishing a database connection for instance?\n \n\u003e If you mean using this to manage a private key, **no**. First, production private keys shouldn\u0027t be in the repository simply from a management perspective (never mind the security reasons). Even non-prod keys can be dicey. For local development many frameworks have fallback configs that should be used instead.\n\nI didn\u0027t say to put it in the repository. You are right this folder should not be under version control. I would like to point out: The interface which will be used here is the DataProtectionAPI from MS which was build for decryption and encryption. You could use a hardware dongle where you are not able to extract the private key if you like.\n",
                                           "updatedAt":  "2025-03-05T11:53:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ujMag",
                                           "createdAt":  "2023-12-13T21:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nDear community,\r\n\r\nI came up with the idea to extend the Microsoft.Extensions.Options model to support a secured value decryption of dedicated configuration properties marked with SecuredValueAttribute. Handling with sensitive information in application settings is very difficult and error prone. Because every API developer and third party library authors knows what sensitive information are it is very easy to mark it with deserving protection.\r\n\r\nThe idea is to encrypt the sensitive information in the application settings with e.g. IDataProtector on design time (via IDE would be awesome) and decrypt it when the application started. This has the advantage that you can check in you configuration without to be afraid that the sensitive information are in the repository.\r\n\r\nThe idea would be to have a provider based approach and supporting other security provider for AWS, MS Azure and so on.\r\n\r\nThank you for reading.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nusing System;\r\nusing Microsoft.AspNetCore.DataProtection;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Microsoft.Extensions.Options;\r\n\r\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)]\r\npublic class SecuredValueAttribute : Attribute\r\n{\r\n}\r\n\r\npublic static class OptionsWithSecuredValueDecryptionComposition\r\n{\r\n    public static void Register(IServiceCollection serviceCollection)\r\n    {\r\n        if (serviceCollection is null) throw new ArgumentNullException(nameof(serviceCollection));\r\n\r\n        serviceCollection.AddSingleton(typeof(IPostConfigureOptions\u003c\u003e), typeof(SecuredValueDecryptionConfigureOptions\u003c\u003e));\r\n    }\r\n}\r\n\r\npublic sealed class SecuredValueDecryptionConfigureOptions\u003cTOptions\u003e : IPostConfigureOptions\u003cTOptions\u003e where TOptions : class\r\n{\r\n    private readonly IHostEnvironment _hostEnvironment;\r\n    private readonly Lazy\u003cIDataProtector\u003e _dataProtectorLazy;\r\n\r\n    public SecuredValueDecryptionConfigureOptions(IHostEnvironment hostEnvironment, IServiceProvider serviceProvider)\r\n    {\r\n        _hostEnvironment = hostEnvironment ?? throw new ArgumentNullException(nameof(hostEnvironment));\r\n        if (serviceProvider is null) throw new ArgumentNullException(nameof(serviceProvider));\r\n\r\n        _dataProtectorLazy = new Lazy\u003cIDataProtector\u003e(() =\u003e\r\n            serviceProvider.GetRequiredService\u003cIDataProtectionProvider\u003e().CreateProtector(\"SecuredValueDecryption\")\r\n        );\r\n    }\r\n\r\n    public void PostConfigure(string? name, TOptions options)\r\n    {\r\n        if (_hostEnvironment.IsDevelopment()) return;\r\n\r\n        // Detect encrypted configuration properties and decrypt them here if the environment is not Development.\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\ninternal class Program\r\n{\r\n    static void Main(string[] arguments)\r\n    {\r\n        IHostBuilder hostBuilder = Host.CreateDefaultBuilder(arguments);\r\n        hostBuilder.ConfigureServices((hostBuilderContext, serviceCollection) =\u003e\r\n        {\r\n            OptionsWithSecuredValueDecryptionComposition.Register(serviceCollection);\r\n            serviceCollection.Configure\u003cServiceSettings\u003e(\r\n                hostBuilderContext.Configuration.GetSection(typeof(ServiceSettings).FullName!)\r\n            );\r\n        });\r\n\r\n        using IHost host = hostBuilder.Build();\r\n        host.Run();\r\n    }\r\n}\r\n\r\n[SecuredValue]\r\npublic class ServiceSettings\r\n{\r\n    public string UserName { get; set; } = string.Empty;\r\n\r\n    [SecuredValue]\r\n    public string Password { get; set; } = string.Empty;\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThis is additive and every developer can decide to use it or not. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eHHobeck\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-13T21:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5upFNf",
                                           "createdAt":  "2023-12-14T17:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Okay for sure this is operation system optimication stuff which I have no insides. I can just say that from the language point of view string are object types and just the address pointers are stored on the stack and will be copied. Just curious: Can you tell me where the different is of your proposal when injecting the sensitive information on deployment time or get it from a security provider? Is it not stored in memory?\r\n\r\nNo, this is C# runtime stuff.  It\u0027s not the address of the string you have to worry about, the actual memory contents of the string (on the heap) can be copied by the runtime for a variety of reasons.\r\n\r\nThe data is still stored in memory.  The problem is that you generally can\u0027t prevent in-process access to your own memory, so isolating it from yourself is difficult or impossible, so doing things like including it as an environment variable doesn\u0027t much decrease your security.\r\n\r\n\u003e But on the non-production environment they should be able to access ;).\r\n\r\nAccess, yes.  Impersonate the deployed service, ideally no.\r\n\r\n\u003e Can you please explain this in more detail? I\u0027m curios and open for any other solutions. How would you provide the credentials to the application to e.g. connect to the database? You mean not to inject it in the configuration system via environment variable or secret files right? Does it mean you request the credentials from the security provider each time you are establishing a database connection for instance?\r\n\r\nFor the most part, the various frameworks handle this transparently for you.  For developer situations this usually means that after login (eg, `az login`) a secrets file gets written with time-limited access tokens, to a user-data location, or otherwise modifies the user environment.  I\u0027m less sure what happens during actual cloud deployment, but this may still be written as an environment variable.\r\nIn either case you don\u0027t have to manually manage or retrieve the secret in application code, as the injection is part of the spin-up of the resource.\r\n\r\nThis tends to also include things like loading secrets straight from key vaults, too.",
                                           "updatedAt":  "2023-12-14T17:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uv4_z",
                                           "createdAt":  "2023-12-15T15:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HHobeck",
                                           "body":  "\u003e \u003e As long as you are not concatenating the string you have the sensitive information exactly one time in memory.\r\n\u003e \r\n\u003e This is false. The memory manager is free to make copies of a string at any time, to enable things like heap compaction. Depending on how your parse/decrypt is implemented, you\u0027ll have partial or whole copies of the raw data in byte arrays.\r\n\r\nIt\u0027s just a matter of time until this holds true: \r\n- https://github.com/dotnet/runtime/issues/10480",
                                           "updatedAt":  "2023-12-15T15:19:47Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Support of secured value decryption configuration options",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97575",
        "createdAt":  "2024-01-26T21:50:05Z",
        "number":  97575,
        "author":  "MikeAlhayek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODM8Blw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Piedone",
                                            "createdAt":  "2024-01-26T21:56:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2025-02-27T11:34:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KiraPF",
                                            "createdAt":  "2025-07-14T12:58:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mroskamp",
                                            "createdAt":  "2025-08-27T21:41:27Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-01-28T00:05:28Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am using [OrchardCore CMS](https://github.com/OrchardCMS/OrchardCore) as a SaaS solution to support multi-tenants. \r\n\r\nConfiguring options in OrchardCore is typically done by doing a database lookup (Single lookup per tenant per startup). After the single lookup, we read the same object from memory so the 2+ calls to configure options will not block the main thread but the first one does.\r\n\r\nWhen you have many tenants and a frequent tenant reload/startup, this cause a frequent block that affect requests made to other tenants. \r\n\r\nSix years ago similar request was denied without real explanation of why not dotnet/aspnetcore#2381 so the reason why not is not clear.\n\n### Describe the solution you\u0027d like\n\nI think there is a need to `IConfigureOptionsAsync\u003c\u003e` to allow us to configure options asynchronously and eliminate the need to block the main thread while trying to configure the options.\r\n\r\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcgjPeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yA3R8",
                                           "createdAt":  "2024-01-26T23:36:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am using [OrchardCore CMS](https://github.com/OrchardCMS/OrchardCore) as a SaaS solution to support multi-tenants. \r\n\r\nConfiguring options in OrchardCore is typically done by doing a database lookup (Single lookup per tenant per startup). After the single lookup, we read the same object from memory so the 2+ calls to configure options will not block the main thread but the first one does.\r\n\r\nWhen you have many tenants and a frequent tenant reload/startup, this cause a frequent block that affect requests made to other tenants. \r\n\r\nSix years ago similar request was denied without real explanation of why not dotnet/aspnetcore#2381 so the reason why not is not clear.\n\n### Describe the solution you\u0027d like\n\nI think there is a need to `IConfigureOptionsAsync\u003c\u003e` to allow us to configure options asynchronously and eliminate the need to block the main thread while trying to configure the options.\r\n\r\n\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMikeAlhayek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-26T23:36:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yA_Yt",
                                           "createdAt":  "2024-01-27T00:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUSQEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-01-27T00:43:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I appreciate the issue but it’s this isn’t possible with the existing options design. You need everything to be async so this proposal needs to be more fleshed out.",
                                           "updatedAt":  "2024-01-27T00:21:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yCMYT",
                                           "createdAt":  "2024-01-27T14:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Piedone",
                                           "body":  "Can you please shed some light on the reasons for closing this so quickly? Especially after https://github.com/dotnet/aspnetcore/issues/2381 was closed without explanation. Surely, it needs design (but so does every feature request I guess) and yes, everything using this needs to be async, but that\u0027s kind of the point. We\u0027re forced to do sync-over-async currently, which is less than ideal.",
                                           "updatedAt":  "2024-01-27T14:48:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yCM95",
                                           "createdAt":  "2024-01-27T14:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It’s fine to leave it open @tarekgh. ",
                                           "updatedAt":  "2024-01-27T14:59:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add `IAsyncConfigureOptions` to allow configuring options asyncronosly",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104723",
        "createdAt":  "2024-07-11T10:54:21Z",
        "number":  104723,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-11T16:04:00Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=736643\nBuild error leg or test failing: Microsoft.Gen.OptionsValidation.Unit.Test.EmitterTests.ProduceDiagnosticFromOtherAssemblyTest\nPull request: https://github.com/dotnet/runtime/pull/102655\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"process cannot access\",  \"Microsoft.Gen.OptionsValidation.Unit\" ], \n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=736643\r\n**Error message validated:** `[process cannot access Microsoft.Gen.OptionsValidation.Unit`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/11/2024 10:56:50 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[736643](https://dev.azure.com/dnceng-public/public/_build/results?buildId=736643)|dotnet/runtime|[Microsoft.Gen.OptionsValidation.Unit.Test.EmitterTests.ProduceDiagnosticFromOtherAssemblyTest](https://dev.azure.com/dnceng-public/public/_build/results?buildId=736643\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18568188\u0026resultId=153372)|dotnet/runtime#102655|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|1|1|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhHuHtA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Eeo66",
                                           "createdAt":  "2024-07-11T10:54:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-11T10:54:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ee4e0",
                                           "createdAt":  "2024-07-11T11:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-11T11:30:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.Gen.OptionsValidation.Unit.Test.EmitterTests.ProduceDiagnosticFromOtherAssemblyTest failed in CI",
        "labels":  [
                       "blocking-clean-ci",
                       "area-Extensions-Options",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106931",
        "createdAt":  "2024-08-25T05:15:05Z",
        "number":  106931,
        "author":  "aetos382",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-25T18:14:41Z",
        "body":  "### Background and motivation\r\n\r\nTo configure `IOptions\u003cT\u003e` for `IServiceCollection`, the `OptionsServiceCollectionExtensions` class provides the `Configure` / `PostConfigure` / `ConfigureAll` / `PostConfigureAll` methods.\r\nBut, there is no validation API except for `AddOptionsWithValidateOnStart`.\r\nIn particular, there is no function to configure validation for all `TOptions` types regardless of the option name (such as `ValidateAll`).\r\n\r\nWe can validate all `TOptions` by writing as follows.\r\nBut this is not documented and is not intuitive.\r\n\r\n```cs\r\nservices.AddSingleton\u003cIValidateOptions\u003cTOptions\u003e\u003e(\r\n    new ValidateOptions\u003cTOptions\u003e(\r\n        name: null,\r\n        validation: static options =\u003e /* validation logic */,\r\n        failureMessage: \"validation failed\"));\r\n```\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic static class OptionsServiceCollectionExtensions\r\n{\r\n    public static IServiceCollection Validate\u003cTOptions\u003e(this IServiceCollection services, Action\u003cTOptions, ValidateOptionsResult\u003e validation);\r\n\tpublic static IServiceCollection Validate\u003cTOptions\u003e(this IServiceCollection services, string? name, Action\u003cTOptions, ValidateOptionsResult\u003e validation);\r\n\tpublic static IServiceCollection ValidateAll\u003cTOptions\u003e(this IServiceCollection services, Action\u003cTOptions, ValidateOptionsResult\u003e validation);\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar services = new ServiceCollection();\r\n\r\nservices\r\n    .Configure\u003cMyOptions\u003e(static options =\u003e /* configuration */)\r\n    .Validate(static options =\u003e\r\n        MyValidationLogic(options, out var messages)\r\n            ? ValidateOptionsResult.Success\r\n            : ValidateOptionsResult.Fail(messages));\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nIt is also possible to design the delegate to return a `bool` type instead of a `ValidateOptionResult`, and to take the error message in the case where its result is false as another argument (as in the constructor of the `ValidateOptions\u003cTOptions\u003e` class).\r\n\r\n```cs\r\npublic static IServiceCollection Validate\u003cTOptions\u003e(this IServiceCollection services, Action\u003cTOptions, bool\u003e validation, string failureMessage);\r\n```\r\n\r\n---\r\n\r\nAnother possibility is the method names `ValidateOptions` and `ValidateAllOptions`. This is because the name `Validate` does not sufficiently express what is being validated for `IServiceCollection`.\r\n\r\nHowever, this problem also exists with the existing `Configure` and `PostConfigure`. Therefore, those APIs will also be renamed to `ConfigureOptions` and `PostConfigureOptions`, and the existing APIs will be marked as `[Obsolete]`.\r\n\r\n---\r\n\r\nThere is a proposal to use `OptionsBuilder\u003cTOptions\u003e` to configure all options.\r\n\r\nCurrently, even if written as follows, only unnamed options can be configured, and it is not possible to configure both named and unnamed options with a single `OptionsBuilder\u003cTOptions\u003e`.\r\n\r\n```cs\r\nservices.AddOptions\u003cMyOptions\u003e(null).Configure(...).Validate(...);\r\n```\r\n\r\nSince we can\u0027t change the behavior of `AddOptions\u003cMyOptions\u003e(null)`, we\u0027ll probably introduce a new method like the following.\r\n\r\n```cs\r\npublic static class OptionsServiceCollectionExtensions\r\n{\r\n    public static OptionsBuilder\u003cTOptions\u003e AddOptionsForAll\u003cTOptions\u003e(this IServiceCollection services);\r\n}\r\n```\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiZtWsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Jm1az",
                                           "createdAt":  "2024-08-25T05:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-25T05:15:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Option validation features for `IServiceCollection`",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107849",
        "createdAt":  "2024-09-15T20:00:26Z",
        "number":  107849,
        "author":  "ElanHasson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7DcTQ==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-16T17:53:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-16T17:54:07Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-13T00:14:19Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_Note: I initially thought this could fit well into aspire, but as I was typing this up, I realized it may be a better fit for `dotnet` proper. Feel free to move this issue there._\r\n\r\nI wish there was a better story around User Secrets for teams or even just new machines.\r\n\r\nI got a new computer, cloned my repo, started my project and got an `OptionsVaidator` exception and it took me a few min to figure out _what_ was missing. \r\n\r\nI\u0027ve invested some time setting up Aspire just right and the project, so it didn\u0027t rely on external values for things-- easy to get started day one for new team members: clone repo, F5.\r\n\r\nThen I realized it was my User Secrets that were missing-- they\u0027re pretty much set and forget-- and they stay on the local machine for obvious reasons.\r\n\r\nSo, new machine, I have to set them. One more thing to remember to do. One more document to write. One more document to keep in sync. 😢 \n\n### Describe the solution you\u0027d like\n\nI\u0027d love to see a way to provide a default `secrets.json` for an Aspire project (or even a `csproj` as this would benefit non-aspire projects as well).\r\n\r\nI do not think we need a new mechanism for this as I _think_  this would fit well into the `csproj` and this could probably implemented via a MSBuild task.\r\n\r\n ```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n\t\t\u003c!--Exists Today--\u003e\r\n\t\t\u003cUserSecretsId\u003e37913f03-ffcc-4c77-9904-6b7241929494\u003c/UserSecretsId\u003e\r\n\t\t\u003c!--Proposed--\u003e\r\n\t\t\u003cUserSecrets\u003e\r\n\t\t\t{\r\n\t\t\t\"clientId\": \"\",\r\n\t\t\t\"clientSecret\": \"\" // Get creds from https://my-intranet/provision-client,\r\n                        \"secret_tokens\": []\r\n                        \"complexSecrets\": {\r\n                           \"userId\": 43110,\r\n\t\t\t}\r\n\t\t\u003c/UserSecrets\u003e\r\n\t\u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n## How would it work?\r\n\r\nThe point here is not to require a schema be specified, but only structural validation. The assumption is all values are required, values and types aren\u0027t validated, the exception is for properties that are object types: we would validate the path exists (`$.complexSecrets.userId` using above sample). \r\n\r\n### Non-Aspire\r\n\r\nWhen you open a project in VS or Code, the host would see the `UserSecrets` element and see the current user secrets specified by `UserSecretsId` do not match the template specified in the `csproj` and alert the user that they are required and show them the template.\r\n\r\nWhen you use the CLI, validation would occur at build time and the problem would be surfaced there.\r\n\r\n### Aspire \r\n\r\nI\u0027m not sure what this would look like in aspire, perhaps the above Non-Aspire workflow is better suited to be implemented as a `UserSecrets` resource that performs the validation. \r\n\r\nI think it maybe makes sense to do so as Aspire is responsible for downstream config injection to the projects and user secrets do get injected via a different pipeline outside of Aspire.\n\n### Additional context\n\nRelated Issues: https://github.com/dotnet/aspire/issues/4035 https://github.com/dotnet/aspire/pull/2953#issuecomment-2004259054\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq1dEtA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MQtSi",
                                           "createdAt":  "2024-09-16T15:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-security, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-16T15:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MRW2P",
                                           "createdAt":  "2024-09-16T16:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "If these are shared/well-known \"local development only\" secrets (eg, the password for the Cosmos DB Emulator), you can just put them into the standard development-only properties file, `\u003cProjectFolder\u003e/Properties/launchSettings.json`, and just persist them in the repo.  These properties are hydrated into the normal config system on debug launch, but aren\u0027t published when the application is packaged.\r\n\r\nFor accessing a shared (probably cloud) resource, in many cases tooling is able to source login credentials from the local user profile (eg, from `~/.azure` for those APIs).  Written code doesn\u0027t explicitly have configuration for a password or other secret, but automatically grabs the user token from there, which is way more ergonomic since it allows for \"just using\" what would be the managed identity token when deployed (no development vs deploy code changes for user code)",
                                           "updatedAt":  "2024-09-16T16:16:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MSIWL",
                                           "createdAt":  "2024-09-16T17:59:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "While I understand where the author is coming from here, I don\u0027t think this is a good solution, if only because of how general purpose the `IConfiguration` system is and the fact that user secrets is just another source for that.\r\n\r\nIf the problem is that \"I lost settings when moving from computer A to computer B\", I\u0027d rather have a solution where the secrets were _not_ sourced from the machine, but instead from, say, Azure Key Vault.\r\n\r\nIt would be nice if it was possible for user secrets to be stored in an instance of KeyVault on Azure and tied to the user\u0027s account in Visual Studio, so that they would be downloaded seamlessly as needed and would persist across machines, using the same GUIDs that are used today to identify the projects.",
                                           "updatedAt":  "2024-09-16T17:59:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MW3xv",
                                           "createdAt":  "2024-09-17T07:55:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-17T07:55:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rNgoB",
                                           "createdAt":  "2025-05-12T12:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "I agree with @julealgon i don\u0027t like the proposed approach of polluting the csproj file and much more in favour of the key vault approach.\n\nAs such what I would like to see is the introduction of `Microsoft.Extensions.Vault` that offers `ISecretStore` which behaves similar to `Microsoft.Extensions.Configuration` but tailored for handling secrets. \n\nWhat I mean by this is:\n- Providers/vaults can be added ie Azure Key Vault, Json\n- A secret can be obtained from the vault\n- A secret can be added/updated in the vault\n- Data can be encrypted using a key in the vault\n- Data can be decrypted using a key in the vault\n\nQ\u0027s\n- Should we include a freshness value for secrets?",
                                           "updatedAt":  "2025-05-12T13:41:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rVt8I",
                                           "createdAt":  "2025-05-12T23:55:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ElanHasson",
                                           "body":  "👋🏼, OP here.\n\nI do agree,  the proposed solution isn\u0027t the best.\n\nI was trying to express the need for a \"user secrets schema\" that tells you what is needed. That\u0027s a key pain point right there. Currently, you have to guess and read lots of code to figure out what\u0027s needed, what format, etc.\n\n\nAs for storage, \nI understand the desire to have a Azure key vault provider, but I feel like a secret gist provider could also be useful to non-cloud people.\n\n\nMaybe it\u0027s as simple as having `dotnet user-secretd sync gist.github.com/ElanHasson/717481984691863719737194717` can use `gh-cli` under the hood to auth.",
                                           "updatedAt":  "2025-05-12T23:55:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rV0S0",
                                           "createdAt":  "2025-05-13T00:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "The same pain point can exist for configuration depending on your implementation.\n\nWith my approach for the vault which resembles configuration you could have it throw an exception if the json store can not be found when not in production. We could even have the launchsettings.json as an optional store hence greatest flexibility. Key thing being multiple stores which could even include github gist.",
                                           "updatedAt":  "2025-05-13T00:14:18Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Improvements to User Secrets",
        "labels":  [
                       "area-Extensions-Options",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109274",
        "createdAt":  "2024-10-28T08:47:30Z",
        "number":  109274,
        "author":  "BernhardNinaus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8NW2Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-28T14:02:57Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-28T15:57:14Z",
        "body":  "### Description\n\nHello.\n\nI\u0027ve found, that IOptionsMonitor is the only interface which is missing the generic type constraint \"where TOptions : class\" opposed to the other \"IOptions\" interfaces.\n\n### Reproduction Steps\n\nMissing on [IOptionsMonitor](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Options/src/IOptionsMonitor.cs)\nPressent on:\n- [IOptions](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Options/src/IOptions.cs)\n- [IOptionsSnapshot](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Options/src/IOptionsSnapshot.cs)\n- [IOptionsMonitorCache](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Options/src/IOptionsMonitorCache.cs)\n\n### Expected behavior\n\nGeneric Type constraint just like other interfaces.\n\n### Actual behavior\n\nNo Generic Type constraint.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkX0png==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RfSme",
                                           "createdAt":  "2024-10-28T08:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-28T08:48:01Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IOptionsMonitor missing generic type constraint \"where TOptions : class\"",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109445",
        "createdAt":  "2024-11-01T09:03:04Z",
        "number":  109445,
        "author":  "petrroll",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFdlJQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-11-04T15:23:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abdes",
                                            "createdAt":  "2024-11-09T21:07:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-28T05:01:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ombrenomade",
                                            "createdAt":  "2025-06-18T16:00:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "evgenyfedorov2",
                                            "createdAt":  "2025-07-02T15:30:31Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-04T10:42:41Z",
        "body":  "`IOptionsMonitor\u003cT\u003e` is the .NET abstraction to handle dynamically changing configuration. That means changes to config file on filesystem during development but also potentially frequent changes through a dynamic config service s.a. Microsoft\u0027s internal ones or others. \n\nIt provides an option to register callback `IOptionsMonitor\u003cT\u003e.OnChange(...)` which is fired when the configuration that\u0027s bound to T changes. \n\nOne would assume that the callback is only called when the config section specific to the `IOptionsMonitor` changes. As the [docs don\u0027t say otherwise](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.ioptionsmonitor-1.onchange?view=net-8.0).\n\nThat is, however, not true (see [github issue](https://github.com/dotnet/extensions/issues/2671)). The .OnChange callbacks can be invoked even if an unrelated section for some other T changes. Essentially as long as any part of configuration changes, all `IOptionsMonitorcan` trigger their `.OnChange` callbacks. \n\nIt wouldn\u0027t be a problem if everyone handled this correctly and actually did rebuilding only if the config actually changes. But regrettably that\u0027s not happening. \n\nI think it\u0027s not happening because it\u0027s almost impossible to not fall into this pit of failure as nothing in the API suggests it would be necessary. And furthermore, doing the right thing is surprisingly, if not difficult, then cumbersome. OnChange for some reason doesn\u0027t surface last version of config, only current; so anyone wanting to properly guard against non-changes needs to save the old version themselves, ... .\n\nIt\u0027s not a huuuuge problem because usually it\u0027s just recreating stuff. In case of polly a stateful policies there might be some impact but genenerally it should be functionally ok. The issue is that if all components start rebuilding with each update, service owners will see spikes that don\u0027t make much sense. \n\nWhat to do with it (some random ideas): \n\n- Update docs to make sure this caveat is documented. Ideally added as remark even for intellisense on that method.\n- Surface old version of config objects on the callback (separate overload, for backwards compatibility).\n- ?Provide better API for config providers to only raise the event for relevant sub-sections?\n- ?If T is IComparible\u003cT\u003e then only raise the event if something actually changed?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtO5Onw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SJSE6",
                                           "createdAt":  "2024-11-01T13:51:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-01T13:51:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SKKbU",
                                           "createdAt":  "2024-11-01T16:08:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5Vwkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-04T15:22:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-04T15:30:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003eProvide better API for config providers to only raise the event for relevant sub-sections?\n\nThis applies in general to the _entirety_ of `Microsoft.Extensions.Configuration` and how it manages its data into \u0027sections\u0027 - because the entire approach is flawed at its core.\n\nSections aren\u0027t actually sections. There is no tree of them to speak of.\nAll they are, are real-time filtered projections into a linear list of fully composed keys.\n\nThis also means that things like collection binding, in particular for large pools of items, has to also iterate linearly over **EVERY** key in the entire config system, up from the root to the leaf, and has to manually perform a `StartsWith` check on a prefix, followed by an index or dictionary key value.\n\nIt can be an **incredibly** big performance killer, and has in fact been reported before as such in #65885.\nSadly, that issue has been left hanging in the past because any adjustments to make the system more sane and perfomant, would\u0027ve meant breaking vaunted backward compatibility.\n\n(Meanwhile, the .NET ecosystem _did_ get things like the binding behavior for collections suddenly changing from shallow clones to deep clones dropped down in its lap like it meant nothing. So hopefully everyone will forgive me if I have problems seeing that as little more than a very poor excuse on the maintainers part for trying to dodge out of the responsibility of having to clean up the messes that were made. In any case it speaks of some very poor and disjoint application of policies wrt backwards compatibility.)\n",
                                           "updatedAt":  "2024-11-04T08:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60fZ1i",
                                           "createdAt":  "2025-07-02T14:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEY79RQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-07-02T19:19:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "petrroll",
                                           "body":  "Yet again, another code was written that doesn\u0027t take this into account. This time any config change evicts caches of all logging samplers which can have rather nontrivial perf impact in terms of sudden hiccups:\n\nhttps://source.dot.net/#Microsoft.Extensions.Telemetry/Sampling/RandomProbabilisticSampler.cs,365c43912fa08496,references",
                                           "updatedAt":  "2025-07-02T14:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc606But",
                                           "createdAt":  "2025-07-04T09:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@petrroll might be worth raising a separate issue for that one",
                                           "updatedAt":  "2025-07-04T09:13:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc607k6f",
                                           "createdAt":  "2025-07-04T10:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZoEMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akoeplinger",
                                                                               "createdAt":  "2025-07-07T16:08:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "petrroll",
                                           "body":  "My point wasnt to raise the issue about that code being written differently. For that I engaged the author directly internally :) \n\nMy point was to illustrate that the api design currently is unfortunate. ",
                                           "updatedAt":  "2025-07-04T10:42:41Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "IOptionsMonitor\u003cT\u003e.OnChange is fired whenever anything changes in IConfiguration - pit of failure",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109446",
        "createdAt":  "2024-11-01T09:06:25Z",
        "number":  109446,
        "author":  "petrroll",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-09T07:06:13Z",
        "body":  "`OptionsMonitor\u003cT\u003e.Current` is not a field, it invokes a get on `ConcurrentDictionary`. In some codebases this can be used a lot. Sure, caching the current value is possible but the API surface doesn\u0027t make it obvious that it should be done.\n\nI understand it\u0027s for simplicity allowing the same codepath to be used for named Config values as well as the default named `string.Empty` (which this property getter accesses) but it might be worth it to special case for the most common scenario and cache current value in a normal field so that access is essentially free (and inlinable and all that).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOteEUpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SJSGF",
                                           "createdAt":  "2024-11-01T13:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-01T13:51:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XbjrH",
                                           "createdAt":  "2024-12-13T05:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Do you have a performance profile show where this ends up being a problem? We can optimize but is there a real problem or just browsing the implementation?",
                                           "updatedAt":  "2024-12-13T05:27:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cEuus",
                                           "createdAt":  "2025-01-28T09:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petrroll",
                                           "body":  "@davidfowl I completely missed the reply, apologies. It was mainly triggered by checking the implementation when we were migrating from custom runtime config solution to IConfiguration. But no, checking right now, we don\u0027t see it in perf traces much less see it as problem.\n\nFeel free to close.",
                                           "updatedAt":  "2025-01-28T09:56:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61U5Sa",
                                           "createdAt":  "2025-07-06T16:10:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hayohayo",
                                           "body":  "I am seeing this call in the profiles across many services. Stacks are not very accurate, because I see cache and dictionary operations at the same level as `OptionsMonitor\u003cTOptions\u003e.Get`, but it\u0027s somewhere in the range of 0.25%-0.5%.\n\nI thought that this could be solved by registering a custom cache, but `OptionsMonitor` has a special case for `OptionsCache\u003cTOptions\u003e`: https://github.com/dotnet/runtime/blob/9e5e6aa7bc36aeb2a154709a9d1192030c30a2ef/src/libraries/Microsoft.Extensions.Options/src/OptionsMonitor.cs#L91\n\nAnd the alternative would require an allocation of a lambda.",
                                           "updatedAt":  "2025-07-06T16:10:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61yT5O",
                                           "createdAt":  "2025-07-08T18:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petrroll",
                                           "body":  "Cc I prepared some PoC for a fix. Please someone check it out and let me know if it would be possible to have it merged despite limited data the perf impact to be impactful (that said ^^).",
                                           "updatedAt":  "2025-07-08T18:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc614RSl",
                                           "createdAt":  "2025-07-09T07:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petrroll",
                                           "body":  "Added some preliminary benchmark results to the PR.",
                                           "updatedAt":  "2025-07-09T07:06:13Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "IOptionsMonitor.Current always go though ConcurrentDictionary getter - perf?",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111761",
        "createdAt":  "2025-01-23T20:18:53Z",
        "number":  111761,
        "author":  "jbudbo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFs8rw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-07-04T10:02:47Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-28T10:07:14Z",
        "body":  "### Background and motivation\n\nWhen using `BindConfiguration\u003c\u003e` on Options of the same type, downstream `IOptionsMonitor\u003c\u003e` instances will see multiple invocations of `OnChange` when the underlying configuration changes. Wouldn\u0027t this cause issues with library authors in instances in which implementors may previously register options? If the options being bound are the same object type, wouldn\u0027t the desired outcome be for only a single change callback to happen?\n\nFor example:\n\nSay I\u0027m loading/binding the following options within my application\n```csharp\nclass SampleOptions\n{\n    public DateTime AsOf { get; set; }\n\n    public Guid OptionsID { get; set; }\n}\n```\nand I have a service consuming these options, but also paying attention to change notifications as so\n```csharp\nclass MyBackgroundWork(IOptionsMonitor\u003cSampleOptions\u003e optionsAccessor, ILogger\u003cMyBackgroundWork\u003e logger)\n        : BackgroundService\n{\n    private readonly IDisposable? _changeWatch = optionsAccessor.OnChange((opts, name) \n        =\u003e logger.LogInformation(\"Options Have Changed!!!! (id: {id}, as of {when})\", opts.OptionsID, opts.AsOf));\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        logger.LogInformation(\"Background service has started with options (id: {id}, as of {when})\", optionsAccessor.CurrentValue.OptionsID, optionsAccessor.CurrentValue.AsOf);\n\n        // Do work here\n        await Task.Delay(TimeSpan.FromDays(1), stoppingToken);\n    }\n\n    public override void Dispose()\n    {\n        _changeWatch?.Dispose();\n        base.Dispose();\n    }\n}\n```\nAnd I bootstrap my application similar to:\n```csharp\nvar builder = Host.CreateApplicationBuilder(args);\n\n//  Contrived configuration source/provider that simulates configuration changes every 5 seconds\nbuilder.Configuration.Add\u003cTimedConfigurationSource\u003e(null);\n\nbuilder.Services\n    .AddOptions\u003cSampleOptions\u003e()\n    .BindConfiguration(string.Empty);\n\n//  Here I call into a library which does additional work on my provided\n//  options object. Without reviewing, I don\u0027t really know what it\u0027s doing\n//  but there is always the chance it binds on my behalf\nbuilder.Services.AddLibraryServices\u003cSampleOptions\u003e();\n\nbuilder.Services.AddHostedService\u003cMyBackgroundWork\u003e();\n\nvar app = builder.Build();\n\napp.Run();\n```\nWhen the application is run I get my initial set of options as expected\n```\ninfo: MyBackgroundWork[0]\n      Background service has started with options (id: cabf66a1-f30d-4c74-aeb9-86fbfe95f229, as of 01/23/2025 14:53:11)\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n```\nhowever, each time the app configuration is reloaded I get duplicate onchange notifications\n```\ninfo: MyBackgroundWork[0]\n      Options Have Changed!!!! (id: 1a803db7-4a0c-4159-b29a-963083a69ad1, as of 01/23/2025 14:53:16)\ninfo: MyBackgroundWork[0]\n      Options Have Changed!!!! (id: 1a803db7-4a0c-4159-b29a-963083a69ad1, as of 01/23/2025 14:53:16)\ninfo: MyBackgroundWork[0]\n      Options Have Changed!!!! (id: 6c3ee57d-ff48-47bc-99c6-44d68f96ce76, as of 01/23/2025 14:53:21)\ninfo: MyBackgroundWork[0]\n      Options Have Changed!!!! (id: 6c3ee57d-ff48-47bc-99c6-44d68f96ce76, as of 01/23/2025 14:53:21)\n```\nCome to find out that the reason for this is that the library I\u0027m using is also binding options on my behalf:\n```csharp\ninternal static class EXT\n{\n    public static IServiceCollection AddLibraryServices\u003cTOptions\u003e(this IServiceCollection services)\n        where TOptions : class\n    {\n        services.AddOptions\u003cTOptions\u003e()\n            .BindConfiguration(string.Empty);\n\n        //  Do other work to bootstrap services specific to this library\n\n        return services;\n    }\n}\n```\nand for better or worse may be doing so because it is registering more services that rely on those options.\n\nFrom what I can tell, the reason this is happening is because the `BindConfiguration` extension is registering an IOptionsChangeTokenSource as a singleton with every call to the method\n![Image](https://github.com/user-attachments/assets/d06082bc-b315-45a4-8642-c0b0ff8f0e50)\nwhich ends up registering multiple change listeners downstream.\n\nDoesn\u0027t this break with the other options patterns in place elsewhere a little in which these methods can be called numerous times without having to worry about duplication of registration and things? For example, I can call AddOptions on the same class over and over and I\u0027ll only ever see a single instance of the various Options services registered in my DI:\n\n![Image](https://github.com/user-attachments/assets/ccabe078-ae09-4b3a-8e3a-96c10da8b2d9)\n\nWhat is the downside to being able to call `AddOptions\u003c\u003e().BindConfiguration()` numerous times and expect only a single onchange call to be expected (assuming options type and maybe name are the same)?\n\n![Image](https://github.com/user-attachments/assets/72e7f5ad-84bd-4041-87d9-76dda7e9658c)\n\n\n### API Proposal\n\nBasically, just proposing changing this from using `AddSingleton` to something more like `TryAddSingleton`\n\n```csharp\n// Same as OptionsBuilder\u003cTOptions\u003e.BindConfiguration\npublic static OptionsBuilder\u003cTOptions\u003e SingleBindConfiguration\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] TOptions\u003e(\n        this OptionsBuilder\u003cTOptions\u003e optionsBuilder,\n        string configSectionPath,\n        Action\u003cBinderOptions\u003e? configureBinder = null)\n        where TOptions : class\n{\n    optionsBuilder.Configure\u003cIConfiguration\u003e((opts, config) =\u003e\n    {\n        IConfiguration section = string.Equals(\"\", configSectionPath, StringComparison.OrdinalIgnoreCase)\n            ? config\n            : config.GetSection(configSectionPath);\n        section.Bind(opts, configureBinder);\n    });\n\n    //  Only register a single instance (not sure how I\u0027d take options name into account)\n    optionsBuilder.Services.TryAddSingleton\u003cIOptionsChangeTokenSource\u003cTOptions\u003e\u003e(sp =\u003e\n    {\n        return new ConfigurationChangeTokenSource\u003cTOptions\u003e(optionsBuilder.Name, sp.GetRequiredService\u003cIConfiguration\u003e());\n    });\n\n    return optionsBuilder;\n}\n```\nBorrowing from the above description, the resulting change would yield a single call despite numerous calls to BindConfiguration\n\n![Image](https://github.com/user-attachments/assets/49fbd6a3-775b-4d21-ad68-1c07391cace6)\n\n### API Usage\n\nEssentially unchanged from the existing implementation\n```csharp\nvar builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Services.AddOptions\u003cSampleOptions\u003e().BindConfiguration(string.Empty);\nbuilder.Services.AddOptions\u003cSampleOptions\u003e().BindConfiguration(string.Empty);\nbuilder.Services.AddOptions\u003cSampleOptions\u003e().BindConfiguration(string.Empty);\nbuilder.Services.AddOptions\u003cSampleOptions\u003e().BindConfiguration(string.Empty);\n\nvar app = builder.Build();\n\napp.Run();\n```\n\n\n### Alternative Designs\n\nI suppose, alternatively one could borrow from the direction that ServiceDescription has gone and add a new extension that allows callers to depend on a different set of expectations. Something like:\n```csharp\npublic static OptionsBuilder\u003cTOptions\u003e TryBindConfiguration\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] TOptions\u003e(\n        this OptionsBuilder\u003cTOptions\u003e optionsBuilder,\n        string configSectionPath,\n        Action\u003cBinderOptions\u003e? configureBinder = null)\n        where TOptions : class\n{\n    optionsBuilder.Configure\u003cIConfiguration\u003e((opts, config) =\u003e\n    {\n        IConfiguration section = string.Equals(\"\", configSectionPath, StringComparison.OrdinalIgnoreCase)\n            ? config\n            : config.GetSection(configSectionPath);\n        section.Bind(opts, configureBinder);\n    });\n\n    //  Only register a single instance (not sure how I\u0027d take options name into account)\n    optionsBuilder.Services.TryAddSingleton\u003cIOptionsChangeTokenSource\u003cTOptions\u003e\u003e(sp =\u003e\n    {\n        return new ConfigurationChangeTokenSource\u003cTOptions\u003e(optionsBuilder.Name, sp.GetRequiredService\u003cIConfiguration\u003e());\n    });\n\n    return optionsBuilder;\n}\n```\nThis would follow other DI patters but deviate away from Options a bit\n\n### Risks\n\nSeems like the risks would be if anything were actually relying on the duplicate calls should this use case be needed. Though I can\u0027t really think of a scenario where I\u0027d want to handle the same change event more than once.\n\nFurther, this change would have to be aware of named options changes I\u0027d assume ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnBPa5Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bn7kx",
                                           "createdAt":  "2025-01-23T20:19:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-23T20:19:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boAkX",
                                           "createdAt":  "2025-01-23T20:31:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/109445",
                                           "updatedAt":  "2025-01-23T20:31:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boC2G",
                                           "createdAt":  "2025-01-23T20:36:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jbudbo",
                                           "body":  "I did find that one but only seems related. From what I read there, @petrroll is calling out the desire to only reload changes under a given section if data in that section has changed right? Where as I\u0027m calling out what I believe to be an oddity in which options or reloaded an unexpected number of times. ",
                                           "updatedAt":  "2025-01-23T20:36:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boFfD",
                                           "createdAt":  "2025-01-23T20:42:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDzr_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jbudbo",
                                                                               "createdAt":  "2025-01-23T20:44:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@jbudbo I added the link to the other issue as it is related. I am not saying it is duplicate, otherwise I would close it 😄 ",
                                           "updatedAt":  "2025-01-23T20:42:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boGZy",
                                           "createdAt":  "2025-01-23T20:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jbudbo",
                                           "body":  "phew thanks @tarekgh, 🤝 ",
                                           "updatedAt":  "2025-01-23T20:44:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cE9rl",
                                           "createdAt":  "2025-01-28T10:07:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petrroll",
                                           "body":  "@jbudbo just fwiw, I\u0027m calling out generally that the OnChange API is confusing and might be invoked way more often than expected. I.e. I\u0027d consider this issue to also be a problem (had I known about it, I\u0027d also mention it) :)",
                                           "updatedAt":  "2025-01-28T10:07:13Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Using BindConfiguration N times results in N calls to IOptionsMonitor.OnChange calls",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112127",
        "createdAt":  "2025-02-04T13:04:17Z",
        "number":  112127,
        "author":  "Tragetaschen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-04T20:49:08Z",
        "body":  "### Description\n\nWe have an Orleans cluster and in the silo, each grain depends on global configuration. Since that can change during runtime, we are using `IOptionsMonitor` and when the grain is done, we dispose the handle we got from the `OnChange` call. That last dispose call is the lone source of some hefty LOH allocations. The grains come and go constantly and at a certain load on the silo (around 2500 grains), LOH allocations start to happen.\n\nAs far as I can tell, `IOptionsMonitor.Dispose` only deregisters from the internal multicast delegate and this deregistration is the main culprit: The multicast delegate allocates a new invocation list for each `-=`, so memory consumption becomes O(n) while it\u0027s amortized O(1) for `+=` due to exponential growth.\n\nThis small benchmark shows the problem. The allocations grow with the number of already registered delegates.\n\n```csharp\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\n\nBenchmarkRunner.Run\u003cBenchmark\u003e();\n\n[SimpleJob(iterationCount: 5)]\n[MemoryDiagnoser]\npublic class Benchmark\n{\n    private Action? _methods;\n\n    [Params(8, 10, 12, 14)]\n    public int Power { get; set; }\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        _methods += Method;\n        for (var i = 0; i \u003c Power; ++i)\n        {\n            _methods += _methods;\n        }\n    }\n\n    [Benchmark]\n    public void AddRemove()\n    {\n        var m = new Action(Method);\n        _methods += m;\n        _methods -= m;\n    }\n\n    private void Method() { }\n}\n```\n\n```\n| Method    | Power | Mean       | Error      | StdDev     | Gen0     | Gen1     | Gen2     | Allocated |\n|---------- |------ |-----------:|-----------:|-----------:|---------:|---------:|---------:|----------:|\n| AddRemove | 8     |   1.512 us |  0.8605 us |  0.2235 us |   0.7629 |   0.0172 |        - |   6.23 KB |\n| AddRemove | 10    |   5.376 us |  2.8169 us |  0.4359 us |   2.9602 |   0.1831 |        - |  24.23 KB |\n| AddRemove | 12    |  18.840 us |  1.0445 us |  0.1616 us |  11.7493 |   1.4648 |        - |  96.23 KB |\n| AddRemove | 14    | 135.817 us | 74.9703 us | 19.4695 us | 124.8779 | 124.8779 | 124.8779 | 384.28 KB |\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnQ859w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dBVYG",
                                           "createdAt":  "2025-02-04T15:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@MihaZupan this issue is complaining about the perf of the delegate registration and deregistration. It is not related to the extension\u0027s options. ",
                                           "updatedAt":  "2025-02-04T15:48:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBawo",
                                           "createdAt":  "2025-02-04T15:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "A multicast delegate is immutable. Adding/removing items will be slow as the collection grows.\nMaybe there\u0027s room for improvement, but I wouldn\u0027t expect things to fundamentally change complexity-wise.\n\nThe issue is complaining that registering and unregistering from `IOptionsMonitor` many times is extremely slow once you have lots of callbacks.\nIf this is a scenario that extension options wants to improve, it should likely be using a different mechanism, e.g. a `Dictionary` (hence why I switched the areas).",
                                           "updatedAt":  "2025-02-04T16:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBhLG",
                                           "createdAt":  "2025-02-04T16:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Maybe there\u0027s room for improvement, but I wouldn\u0027t expect things to fundamentally change complexity-wise.\n\nFrom the benchmark numbers, it looks to me the allocated memory is exponentially growing as you increase the registration/deregistration. Sure, we can optimize the Options part, but this is not going to help in the general case for users using such multicast delegates. ",
                                           "updatedAt":  "2025-02-04T16:06:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBjNd",
                                           "createdAt":  "2025-02-04T16:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "The benchmark is increasing the number of registered baseline delegates exponentially (2^`Power`). The memory growth for the individual deregistration is only linear in the number of registered delegates.",
                                           "updatedAt":  "2025-02-04T16:14:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBmNh",
                                           "createdAt":  "2025-02-04T16:13:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "Since the multicast delegate is immutable, there is an optimization along the `+=` path where an existing invocation list is reused and shared between different immutable instances as long as there is room in the underlying array.",
                                           "updatedAt":  "2025-02-04T16:13:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBr51",
                                           "createdAt":  "2025-02-04T16:22:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Tragetaschen does your concern regarding `IOptionsMonitor` only?  ",
                                           "updatedAt":  "2025-02-04T16:22:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBuHo",
                                           "createdAt":  "2025-02-04T16:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "In our scenario, this turned up only along the `OptionsMonitor.ChangeTrackerDisposable.Dispose` call chain.",
                                           "updatedAt":  "2025-02-04T16:26:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dCJmU",
                                           "createdAt":  "2025-02-04T17:13:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-04T17:13:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dCTgA",
                                           "createdAt":  "2025-02-04T17:31:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "```csharp\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\n\nBenchmarkRunner.Run\u003cBenchmark\u003e();\n\n[SimpleJob(iterationCount: 5)]\n[MemoryDiagnoser]\npublic class Benchmark\n{\n    private IOptionsMonitor\u003cMyOptions\u003e _optionsMonitor = null!;\n\n    [Params(256, 1024, 4096, 8192)]\n    public int BaseRegistrations { get; set; }\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        var collection = new ServiceCollection();\n        collection.AddOptions\u003cMyOptions\u003e();\n        collection.Configure\u003cMyOptions\u003e(x =\u003e x.Value = 42);\n        var services = collection.BuildServiceProvider();\n\n        _optionsMonitor = services.GetRequiredService\u003cIOptionsMonitor\u003cMyOptions\u003e\u003e();\n\n        for (var i = 0; i \u003c BaseRegistrations; ++i)\n        {\n            // Registrations don\u0027t need to be removed\n            _optionsMonitor.OnChange(new Action\u003cMyOptions\u003e(Method));\n        }\n    }\n\n    [Benchmark]\n    public void AddRemove()\n    {\n        var registration = _optionsMonitor.OnChange(new Action\u003cMyOptions\u003e(Method));\n        registration?.Dispose();\n    }\n\n    private void Method(MyOptions _) { }\n\n    private class MyOptions\n    {\n        public int Value { get; set; }\n    }\n}\n```\n\n```\n| Method    | BaseRegistrations | Mean       | Error     | StdDev     | Gen0    | Gen1    | Gen2    | Allocated |\n|---------- |------------------ |-----------:|----------:|-----------:|--------:|--------:|--------:|----------:|\n| AddRemove | 256               |   1.603 us |  1.455 us |  0.3780 us |  0.7915 |  0.0191 |       - |   6.48 KB |\n| AddRemove | 1024              |   5.316 us |  2.997 us |  0.7783 us |  2.9831 |  0.2670 |       - |  24.48 KB |\n| AddRemove | 4096              |  20.829 us |  9.453 us |  2.4549 us | 11.7493 |  2.9297 |       - |  96.48 KB |\n| AddRemove | 8192              | 121.139 us | 39.831 us | 10.3440 us | 41.6260 | 41.6260 | 41.6260 | 192.49 KB |\n```",
                                           "updatedAt":  "2025-02-04T17:31:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dDt8v",
                                           "createdAt":  "2025-02-04T20:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e this is not going to help in the general case for users using such multicast delegates.\n\nMulticast delegates are not optimized for this scenario by design. Optimizing multicast delegates for this scenario would be very difficult and it would hurt the common multicast delegate use cases with just a few subscribers that are not changing frequently.\n\n",
                                           "updatedAt":  "2025-02-04T20:30:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dDzn3",
                                           "createdAt":  "2025-02-04T20:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I already tagged the issue back with Options area and will be scoped to `IOptionsMonitor` case.",
                                           "updatedAt":  "2025-02-04T20:39:43Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Bad LOH allocations when deregistering from IOptionsMonitor",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115200",
        "createdAt":  "2025-04-30T17:04:02Z",
        "number":  115200,
        "author":  "89netraM",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-30T17:22:07Z",
        "body":  "### Background and motivation\n\nSince the introduction of compile-time generated options validators that are NativeAOT compatible, more developers will want to add this kind of validator instead of the reflection-based validators. Adding the reflection-based validator is easy with a fluent `OptionsBuilder` method, but adding a \"user defined\" (either implemented by a user or compile-time generated) requires manually adding the validator to the service collection.\n\nI propose a new overload to the `Validate` method on `OptionsBuilder` that provides a fluent way of adding validator types for validating an option. Introducing this method would not only make users code more concise but make the way of adding validators more discoverable, since the `OptionsBuilder` is already the place where most users add validation (often via the `ValidateDataAnnotations` method).\n\n### API Proposal\n\n```csharp\nnamespace Microsoft.Extensions.Options;\n\npublic class OptionsBuilder\u003cTOptions\u003e where TOptions : class\n{\n    public virtual OptionsBuilder\u003cTOptions\u003e Validate\u003cTValidateOptions\u003e() where TValidateOptions : class, IValidateOptions\u003cTOptions\u003e;\n}\n```\n\nI\u0027ve made the method `virtual` because most other methods in `OptionsBuilder` are. But I don\u0027t see the need for it.\n\n### API Usage\n\nIt would be used in a similar way to how the `Validate(Func\u003cTOptions, bool\u003e validation)` or `ValidateDataAnnotations()` for example are used.\n\n```csharp\nservices.AddOptions\u003cMyOption\u003e()\n    .Validate\u003cMyOptionValidator\u003e();\n\nclass MyOption\n{\n    [Required]\n    public required string Config { get; set; }\n}\n\n[OptionsValidator]\npartial class MyOptionValidator : IValidateOptions\u003cMyOption\u003e;\n```\n\n### Alternative Designs\n\nInstead of being an overload to `Validate` this method could get its own name, like `ValidateWithValidator` or something similar, which could help with discoverability. (Or the `Validate` overload might be more discoverable. When looking for this method before realizing it doesn\u0027t exist, I looked for a `Validate` overload, but that\u0027s just a sample size of one.)\n\n---\n\nThe same thing can already be achieved with this (slightly more verbose) code snippet, and the new method might not be necessary.\n\n```csharp\nservices.AddOptions\u003cMyOption\u003e();\nservices.AddTransient\u003cIValidateOptions\u003cMyOption\u003e, MyOptionValidator\u003e();\n\nclass MyOption\n{\n    [Required]\n    public required string Config { get; set; }\n}\n\n[OptionsValidator]\npartial class MyOptionValidator : IValidateOptions\u003cMyOption\u003e;\n```\n\n### Risks\n\nThe only risk I can see is the increased API surface. I cannot imagine any security risks introducing this API since it is syntactical sugar over the already existing way of doing the same thing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqXC6QA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6pb6Uy",
                                           "createdAt":  "2025-04-30T17:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-30T17:04:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pcBjP",
                                           "createdAt":  "2025-04-30T17:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "89netraM",
                                           "body":  "\u003e Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations See info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\nI think a better fit would be @dotnet/area-extensions-options. This is only related to `DataAnnotations` in the sense that the compile-time generated validator uses them, but this proposal is more related to the registration of validators not the generation of them.",
                                           "updatedAt":  "2025-04-30T17:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pcLpA",
                                           "createdAt":  "2025-04-30T17:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-30T17:22:06Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add a fluent `OptionsBuilder` method that adds validator types",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115347",
        "createdAt":  "2025-05-06T20:39:02Z",
        "number":  115347,
        "author":  "jander-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCZibA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sbomer",
                                            "createdAt":  "2025-05-06T20:56:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2025-05-15T04:29:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-07T18:52:46Z",
        "body":  "Using the following example source:\n\n```cs\npublic interface IMyValidationService { }\n\npublic sealed class MyOptions : IValidatableObject\n{\n    public IEnumerable\u003cValidationResult\u003e Validate(ValidationContext validationContext)\n    {\n        // This will throw since an IServiceProvider is not available in the ValidationContext\n        _ = validationContext.GetRequiredService\u003cIMyValidationService\u003e();\n        return [];\n    }\n}\n\n[OptionsValidator]\npublic sealed partial class MyValidateOptions :\n    IValidateOptions\u003cMyOptions\u003e\n{\n}\n```\n\nwould generate an options validation implementation that looks like:\n\n```C#\npartial class MyValidateOptions\n{\n    /// \u003csummary\u003e\n    /// Validates a specific named options instance (or all when \u003cparamref name=\"name\"/\u003e is \u003csee langword=\"null\" /\u003e).\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"name\"\u003eThe name of the options instance being validated.\u003c/param\u003e\n    /// \u003cparam name=\"options\"\u003eThe options instance.\u003c/param\u003e\n    /// \u003creturns\u003eValidation result.\u003c/returns\u003e\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Options.SourceGeneration\", \"10.0.12.23009\")]\n    #if !NET10_0_OR_GREATER\n    [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage(\"Trimming\", \"IL2026:RequiresUnreferencedCode\",\n            Justification = \"The created ValidationContext object is used in a way that never call reflection\")]\n    #endif\n    public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.MyOptions options)\n    {\n        global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;\n        #if NET10_0_OR_GREATER\n        string displayName = string.IsNullOrEmpty(name) ? \"MyOptions.Validate\" : $\"{name}.Validate\";\n        var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);\n        #else\n        var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options);\n        #endif\n\n        context.MemberName = \"Validate\";\n        context.DisplayName = string.IsNullOrEmpty(name) ? \"MyOptions.Validate\" : $\"{name}.Validate\";\n        (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));\n\n        return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();\n    }\n}\n```\n\nNote that the construction of the `ValidationContext` passes null for the `IServiceProvider` parameter.\n\nIt appears that the generator does not consider if an `IServiceProvider` is available: https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Options/gen/Emitter.cs#L697\n\nThis prevents `IValidatableObject` implementations from using the `ValidationContext.GetService` method because it will always return null. Here are a few examples where .NET Monitor uses this and would prevent it from adopting options validation source generation:\n- https://github.com/dotnet/dotnet-monitor/blob/main/src/Tools/dotnet-monitor/CollectionRules/Options/ValidationHelper.cs#L40\n- https://github.com/dotnet/dotnet-monitor/blob/main/src/Tools/dotnet-monitor/CollectionRules/Options/Actions/ValidateEgressProviderAttribute.cs#L25\n\nNot to necessarily prescribe the solution, but it would be nice if the source generator would detect an `IServiceProvider` parameter from the primary constructor or possibly a field from the `IValidateOptions\u003cT\u003e` implementation and pass that instance when constructing the `ValidationContext`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrsPqpA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6qOeIW",
                                           "createdAt":  "2025-05-06T20:39:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-06T20:39:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qOiC2",
                                           "createdAt":  "2025-05-06T20:47:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-06T20:47:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qOnAa",
                                           "createdAt":  "2025-05-06T20:56:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This is currently a limitation in the options source gen. I am wondering, can\u0027t you have the `MyOptions` created with the service provider?  ",
                                           "updatedAt":  "2025-05-06T20:56:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uwz92",
                                           "createdAt":  "2025-06-02T18:46:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Not sure if I understand the suggestion - we can have `MyOptions` ctor take the service provider, but the issue is that the generated code passes `null` as the service provider when creating the `ValidationContext`. If the generator could pick up the ctor parameter and pass it along, that would fix it, but without this the workaround requires writing the `IValidateOptions` implementation by hand.",
                                           "updatedAt":  "2025-06-02T18:47:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uw-qk",
                                           "createdAt":  "2025-06-02T19:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEU9FtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-06-02T19:08:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sbomer",
                                           "body":  "@tarekgh clarified offline that the suggested workaround is to retrieve the service collection from `MyOptions` directly inside of the `IValidatableObject` implementation (thanks!). That might work - recursively validatable types would all need to take the service collection though.",
                                           "updatedAt":  "2025-07-07T18:52:46Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Options validation source generator doesn\u0027t consider constructing ValidationContext with an IServiceProvider",
        "labels":  [
                       "area-Extensions-Options",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115496",
        "createdAt":  "2025-05-12T22:33:13Z",
        "number":  115496,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-13T01:16:43Z",
        "body":  "When a `[Required]` property is missing, the DataAnnotations validator produces an error like: `The \u003cpropertyname\u003e field is required`. When using named options with the validation source generator, it instead produces an error like `\u003cpropertyname\u003e: the \u003coptionname\u003e.\u003cpropertyname\u003e field is required.`\n\nThis looks wrong because the optionname should not be used in place of a type name. It would also be nice if it matched the old error message.\n\n```csharp\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\n\npublic class AppSettings\n{\n    [Required]\n    public string ConnectionString { get; set; }\n}\n\npublic class AppSettingsValidator : IValidateOptions\u003cAppSettings\u003e\n{\n    public ValidateOptionsResult Validate(string name, AppSettings options)\n    {\n        var validationContext = new ValidationContext(options);\n        var results = new System.Collections.Generic.List\u003cValidationResult\u003e();\n\n        bool isValid = Validator.TryValidateObject(\n            options, validationContext, results, validateAllProperties: true);\n\n        if (isValid)\n        {\n            return ValidateOptionsResult.Success;\n        }\n\n        var errors = new System.Text.StringBuilder();\n        foreach (var result in results)\n        {\n            errors.AppendLine(result.ErrorMessage);\n        }\n\n        return ValidateOptionsResult.Fail(errors.ToString());\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var services = new ServiceCollection();\n\n        services.AddOptions\u003cAppSettings\u003e(\"MySettings\")\n            .Configure(options =\u003e\n            {\n            })\n            .Services.AddSingleton\u003cIValidateOptions\u003cAppSettings\u003e, AppSettingsValidator\u003e();\n\n        var provider = services.BuildServiceProvider();\n\n        var optionsMonitor = provider.GetRequiredService\u003cIOptionsMonitor\u003cAppSettings\u003e\u003e();\n\n        try\n        {\n            var options = optionsMonitor.Get(\"MySettings\");\n            Console.WriteLine($\"ConnectionString: {options.ConnectionString}\");\n        }\n        catch (OptionsValidationException ex)\n        {\n            Console.WriteLine(\"Validation failed:\");\n            foreach (var failure in ex.Failures)\n            {\n                Console.WriteLine($\"- {failure}\");\n            }\n        }\n    }\n}\n```\n\nThis shows:\n```\nValidation failed:\n- The ConnectionString field is required.\n```\n\nIf I change the repro to use the source generator:\n```csharp\n[OptionsValidator]\npublic partial class AppSettingsValidator : IValidateOptions\u003cAppSettings\u003e\n{\n}\n```\n\nIt shows:\n```\nValidation failed:\n- ConnectionString: The MySettings.ConnectionString field is required.\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq1i7QQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rWLtB",
                                           "createdAt":  "2025-05-13T01:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-13T01:08:25Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Options validation source generator uses named option name as type name",
        "labels":  [
                       "area-Extensions-Options",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115601",
        "createdAt":  "2025-05-15T04:58:58Z",
        "number":  115601,
        "author":  "aetos382",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODK4vfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jcracknell",
                                            "createdAt":  "2025-08-12T15:57:24Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-19T03:07:28Z",
        "body":  "### Description\n\nGenerated option validators do not check the contents of `Dictionary\u003cK, V\u003e` types.\n\n### Reproduction Steps\n\n```cs\nusing System.ComponentModel.DataAnnotations;\n\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Options;\n\nvar appBuilder = Host.CreateApplicationBuilder(args);\n\nvar configuration = appBuilder.Configuration;\n\nconfiguration[\"AppOptions:ComplexOptions:Foo:Value\"] = \"1\";\nconfiguration[\"AppOptions:ComplexOptions:Bar:Value\"] = \"200\";\n\nvar services = appBuilder.Services;\n\nservices\n    .AddOptionsWithValidateOnStart\u003cAppOptions, AppOptionsValidator\u003e()\n    .BindConfiguration(\"AppOptions\");\n\nusing var host = appBuilder.Build();\n\nawait host.StartAsync().ConfigureAwait(false);\n\nvar appOptions = host.Services.GetRequiredService\u003cIOptions\u003cAppOptions\u003e\u003e().Value;\n\nforeach (var (key, value) in appOptions.ComplexOptions)\n{\n    Console.WriteLine($\"{key}={value.Value}\");\n}\n\nawait host.StopAsync().ConfigureAwait(false);\n\nclass AppOptions\n{\n    [Required]\n    [ValidateObjectMembers]\n    [ValidateEnumeratedItems]\n    public Dictionary\u003cstring, NestedOptions\u003e ComplexOptions { get; set; } = [];\n}\n\nclass NestedOptions\n{\n    [Range(1, 100)]\n    public int Value { get; set; }\n}\n\n[OptionsValidator]\npartial class AppOptionsValidator :\n    IValidateOptions\u003cAppOptions\u003e\n{\n}\n```\n\n### Expected behavior\n\nA validation error occurs for `AppOptions:ComplexOptions:Bar:Value`.\n\n### Actual behavior\n\nNo validation errors occurred.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```diff\nclass AppOptions\n{\n    [Required]\n-   [ValidateObjectMembers]\n-   [ValidateEnumeratedItems]\n    public Dictionary\u003cstring, NestedOptions\u003e ComplexOptions { get; set; } = [];\n\n+   [ValidateEnumeratedItems]\n+   public ICollection\u003cNestedOptions\u003e ComplexOptionValues =\u003e ComplexOptions.Values;\n}\n```\n\n### Configuration\n\nproject:\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFrameworks\u003enet8.0;net9.0\u003c/TargetFrameworks\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"9.0.5\" /\u003e\n  \u003c/ItemGroup\u003e\n\n\u003c/Project\u003e\n```\n\n\u003cdetails\u003e\n\u003csummary\u003edotnet --info\u003c/summary\u003e\nPS\u003e dotnet --info\n\n.NET SDK:\n Version:           9.0.300\n Commit:            15606fe0a8\n Workload version:  9.0.300-manifests.87b8cca8\n MSBuild version:   17.14.5+edd3bbf37\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.300\\\n\n.NET workloads installed:\n [android]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    35.0.61/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.android\\35.0.61\\WorkloadManifest.json\n   Install Type:              Msi\n\n [aspire]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    8.2.2/8.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.2.2\\WorkloadManifest.json\n   Install Type:              Msi\n\n [ios]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    18.4.9289/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.ios\\18.4.9289\\WorkloadManifest.json\n   Install Type:              Msi\n\n [maccatalyst]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    18.4.9289/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.maccatalyst\\18.4.9289\\WorkloadManifest.json\n   Install Type:              Msi\n\n [maui-windows]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    9.0.51/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.maui\\9.0.51\\WorkloadManifest.json\n   Install Type:              Msi\n\n [wasm-tools]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    9.0.5/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.workload.mono.toolchain.current\\9.0.5\\WorkloadManifest.json\n   Install Type:              Msi\n\n [wasm-tools-net8]\n   Installation Source: SDK 9.0.300, VS 17.14.36109.1\n   Manifest Version:    9.0.5/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.workload.mono.toolchain.net8\\9.0.5\\WorkloadManifest.json\n   Install Type:              Msi\n\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.5\n  Architecture: x64\n  Commit:       e36e4d1a8f\n\n.NET SDKs installed:\n  9.0.300 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n\u003c/details\u003e\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrDoGqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6r2BBN",
                                           "createdAt":  "2025-05-15T08:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "If workloads such as the following are not adopted, even DataAnnotations that are not source generators do not seem to validate the contents of the Dictionary.\n\n```cs\n[ValidateEnumeratedItems]\npublic ICollection\u003cNestedOptions\u003e ComplexOptionValues =\u003e ComplexOptions.Values;\n```\n\nTherefore, other than adding such ugly members, I need to implement custom validation attribute or `IValidateOptions\u003cT\u003e`.\n\nHowever, since binding values to a Dictionary is supported out of the box, I would like validation to be supported as well.\n",
                                           "updatedAt":  "2025-05-15T08:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6r6ypJ",
                                           "createdAt":  "2025-05-15T15:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@aetos382 Why is the specified workaround not sufficient for your needs?\n\nWe understand there\u0027s a current limitation: `Dictionary\u003cTKey, TValue\u003e` implements `IEnumerable\u003cKeyValuePair\u003cTKey, TValue\u003e\u003e`, but `KeyValuePair\u003cTKey, TValue\u003e` does not support validation attributes. As a result, it does not undergo validation, and we don\u0027t have any special handling in place for this scenario.\n\nSimilar issue: https://github.com/dotnet/runtime/issues/94173",
                                           "updatedAt":  "2025-05-15T15:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6r_awV",
                                           "createdAt":  "2025-05-16T03:18:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "@tarekgh \n\u003e Why is the specified workaround not sufficient for your needs?\n\nThis member is for verification purposes only and does not need to be made public to users.\nHowever, if the visibility of this member is set to anything other than `public`, error SYSLIB1206 will occur.",
                                           "updatedAt":  "2025-05-16T03:18:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sE8WZ",
                                           "createdAt":  "2025-05-16T15:01:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e This member is for verification purposes only and does not need to be made public to users.\n\nYes, I understand that. I just wanted to clarify—are you saying this workaround isn\u0027t acceptable in your specific case, or are you speaking more generally? I\u0027m not denying the current limitation; I was simply asking whether the workaround would be acceptable until a proper fix is implemented in the future.\n",
                                           "updatedAt":  "2025-05-16T15:01:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sOgaq",
                                           "createdAt":  "2025-05-19T03:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESklKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-05-19T04:15:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aetos382",
                                           "body":  "I believe that such members should not exist ideally, and that this is a workaround that should be avoided if possible. But it is not impossible to take this approach.",
                                           "updatedAt":  "2025-05-19T03:07:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Generated option validators do not check the contents of dictionaries.",
        "labels":  [
                       "area-Extensions-Options",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117888",
        "createdAt":  "2025-07-21T16:18:47Z",
        "number":  117888,
        "author":  "lol768",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-21T16:35:30Z",
        "body":  "### Background and motivation\n\nToday, if I create a `record` with `required` properties for my configuration type, and bind from a configuration section to that record type, I still need to write my own `IValidateOptions` to do null-checks by hand, or I need to apply `System.ComponentModel.DataAnnotations` attributes to every member to duplicatively mark it as required.\n\nConsider this concrete example:\n\n\n```c#\npublic record MyConfigurationType\n{\n    public required string RequiredMember { get; init; }\n}\n```\n\n```c#\nservices.AddOptions\u003cMyConfigurationType\u003e()\n    .Bind(configuration.GetSection(\"MyConfiguration\"))\n    .ValidateOnStart();\n```\n\n```json\n{\n  \"MyConfiguration\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\nThe application will start without any errors, despite `RequiredMember` not being set.\n\nI can make it work by writing:\n\n```c#\npublic class MyConfigurationTypeConfigurationValidation : IValidateOptions\u003cMyConfigurationType\u003e\n{\n    public ValidateOptionsResult Validate(string name, MyConfigurationType options)\n    {\n        if (options.RequiredMember == null)\n        {\n            return ValidateOptionsResult.Fail(\"RequiredMember must be provided\");\n        }\n\n        return ValidateOptionsResult.Success;\n    }\n}\n```\n\nand then registering this `IValidateOptions`, but it\u0027s cumbersome to have to do this for every property.\n\nYou basically want something like this, that is generic:\n\n```c#\npublic class MyConfigurationTypeConfigurationValidation : IValidateOptions\u003cMyConfigurationType\u003e\n{\n    public ValidateOptionsResult Validate(string name, MyConfigurationType options)\n    {\n        var type = options.GetType();\n        foreach (var property in type.GetProperties()\n                     .Where(p =\u003e p.GetCustomAttributes(typeof(RequiredMemberAttribute), false).Any()))\n        {\n            var value = property.GetValue(options);\n            if (value == null)\n            {\n                return ValidateOptionsResult.Fail(\n                    $\"The property \u0027{property.Name}\u0027 is required but was not provided.\");\n            }\n        }\n\n        return ValidateOptionsResult.Success;\n    }\n}\n```\n\n\n### API Proposal\n\n```\npublic static OptionsBuilder\u003cTOptions\u003e ValidateRequiredMembers\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicProperties | DynamicallyAccessedMemberTypes.NonPublicProperties)] TOptions\u003e(this OptionsBuilder\u003cTOptions\u003e optionsBuilder) where TOptions : class\n```\n\n### API Usage\n\n```csharp\nservices.AddOptions\u003cMyConfigurationType\u003e()\n    .Bind(configuration.GetSection(\"MyConfiguration\"))\n    .ValidateRequiredMembers() // looks for RequiredMemberAttribute\n    .ValidateOnStart();\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuKAUdw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64nrOP",
                                           "createdAt":  "2025-07-21T16:19:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-21T16:19:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64n-Nh",
                                           "createdAt":  "2025-07-21T16:32:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lol768",
                                           "body":  "Quick implementation sketch:\n\n```c#\npublic static OptionsBuilder\u003cTOptions\u003e ValidateRequiredMembers\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicProperties | DynamicallyAccessedMemberTypes.NonPublicProperties)] TOptions\u003e(this OptionsBuilder\u003cTOptions\u003e optionsBuilder) where TOptions : class\n{\n    optionsBuilder.Services.AddSingleton\u003cIValidateOptions\u003cTOptions\u003e\u003e(new RequiredMembersTypeConfigurationValidation\u003cTOptions\u003e());\n    return optionsBuilder;\n}\n```\n\nand\n\n```c#\npublic class RequiredMembersTypeConfigurationValidation\u003cTOptions\u003e : IValidateOptions\u003cTOptions\u003e where TOptions : class\n{\n    public ValidateOptionsResult Validate(string? name, TOptions options)\n    {\n        var type = options.GetType();\n        foreach (var property in type.GetProperties()\n                     .Where(p =\u003e p.GetCustomAttributes(typeof(RequiredMemberAttribute), false).Any()))\n        {\n            var value = property.GetValue(options);\n            if (value == null)\n            {\n                return ValidateOptionsResult.Fail(\n                    $\"The property \u0027{property.Name}\u0027 is required but was not provided.\");\n            }\n        }\n\n        return ValidateOptionsResult.Success;\n    }\n}\n```",
                                           "updatedAt":  "2025-07-21T16:32:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64oBR3",
                                           "createdAt":  "2025-07-21T16:35:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-21T16:35:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: ValidateRequiredMembers support for Microsoft.Extensions.Options",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118195",
        "createdAt":  "2025-07-30T05:15:49Z",
        "number":  118195,
        "author":  "soul-soft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T02:47:33Z",
        "body":  "### Background and motivation\n\n\u003cimg width=\"1287\" height=\"170\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c37319d4-26ae-4522-9b36-bf7b1e78e844\" /\u003e\n\n\nI\u0027d like to suggest adding an overload to Options that supports passing in an IServiceProvider. Having implemented this in another programming language, I found the impact to be very minor.\nI\u0027m sharing this feedback with the community and would appreciate your thoughts.\n\n### API Proposal\n\n```csharp\nnamespace System.Collections.Generic;\n\npublic static class OptionsServiceCollectionExtensions\n{\n    public static IServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection  services, Func\u003cTOptions, IServiceProvider\u003e configureOptions)\n    {\n        //...\n\n    }\n}\n```\n\n\n### API Usage\n\n```csharp\n\nserivces.Configure\u003cJwtBearerOptions\u003e((options,sp) =\u003e\n{\n     options.SaveToken = sp.getRequiredService\u003cIConfiguration\u003e().GetValue\u003cString\u003e(\"Jwt:SaveToken\")\n})\n```\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuxAKZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc66234J",
                                           "createdAt":  "2025-07-30T05:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "justindbaur",
                                           "body":  "This is actually already achievable, you just have to go through the [`OptionsBuilder`](https://github.com/dotnet/runtime/blob/main/src%2Flibraries%2FMicrosoft.Extensions.Options%2Fsrc%2FOptionsBuilder.cs#L65) object. You can do it like this:\n\n```c#\nservices.AddOptions\u003cJwtBearerOptions\u003e()\n     // Or any service you want, even IServiceProvider\n    .Configure\u003cIConfiguration\u003e((options, config) =\u003e \n    {\n        options.SaveToken = config[\"Jwt:SaveToken\"];\n    });\n```\n\nAlso worth pointing out, there is also [`BindConfiguration`](https://github.com/dotnet/runtime/blob/main/src%2Flibraries%2FMicrosoft.Extensions.Options.ConfigurationExtensions%2Fsrc%2FOptionsBuilderConfigurationExtensions.cs#L64). So if you want to bind all the properties from a config section you can do this:\n\n```c#\nservices.AddOptions\u003cJwtBearerOptions\u003e()\n     .BindConfiguration(\"Jwt\");\n```\n",
                                           "updatedAt":  "2025-07-30T06:05:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6625NF",
                                           "createdAt":  "2025-07-30T05:59:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "soul-soft",
                                           "body":  "\u003e 这实际上已经可以实现，你只需要通过 [`OptionsBuilder`](https://github.com/dotnet/runtime/blob/main/src%2Flibraries%2FMicrosoft.Extensions.Options%2Fsrc%2FOptionsBuilder.cs#L65) 对象即可。可以这样操作：\n\u003e \n\u003e services.AddOptions\u003cJwtBearerOptions\u003e()\n\u003e      // Or any service you want, even IServiceProvider\n\u003e     .Configure\u003cIConfiguration\u003e((options, config) =\u003e \n\u003e     {\n\u003e         options.SaveToken = config[\"JwtSaveToken];\n\u003e     });\n\nWhat I want to express is that this will be more universal",
                                           "updatedAt":  "2025-07-30T06:02:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66294p",
                                           "createdAt":  "2025-07-30T06:08:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "justindbaur",
                                           "body":  "That is fair I guess, I\u0027d recommend changing the title from asking for support for something to asking for a more convenient method for using services in the configure method then.",
                                           "updatedAt":  "2025-07-30T06:08:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66-TzX",
                                           "createdAt":  "2025-07-30T15:46:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-30T15:46:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66-j_H",
                                           "createdAt":  "2025-07-30T16:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-30T16:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66_YTW",
                                           "createdAt":  "2025-07-30T17:08:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This is nice to have API, but it is easy to have extension method in your app to do it. Something like the following:\n\n```C#\n    public static IServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, string? name, Action\u003cTOptions, IServiceProvider\u003e configureOptions) where TOptions : class\n    {\n        ArgumentNullException.ThrowIfNull(services);\n        ArgumentNullException.ThrowIfNull(configureOptions);\n\n        services.AddOptions();\n        services.AddSingleton\u003cIConfigureOptions\u003cTOptions\u003e\u003e(serviceProvider =\u003e\n            new ConfigureNamedOptions\u003cTOptions, IServiceProvider\u003e(\n                name,\n                serviceProvider,\n                configureOptions));\n        \n        return services;\n    }\n```\n\nWe can watch if we see a demand on such API and then we can consider adding it. ",
                                           "updatedAt":  "2025-07-30T17:08:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67EApl",
                                           "createdAt":  "2025-07-31T02:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "soul-soft",
                                           "body":  "\u003e 这是个不错的 API 功能，但在应用中通过扩展方法实现也很容易。类似如下代码：\n\u003e \n\u003e     public static IServiceCollection Configure\u003cTOptions\u003e(this IServiceCollection services, string? name, Action\u003cTOptions, IServiceProvider\u003e configureOptions) where TOptions : class\n\u003e     {\n\u003e         ArgumentNullException.ThrowIfNull(services);\n\u003e         ArgumentNullException.ThrowIfNull(configureOptions);\n\u003e \n\u003e         services.AddOptions();\n\u003e         services.AddSingleton\u003cIConfigureOptions\u003cTOptions\u003e\u003e(serviceProvider =\u003e\n\u003e             new ConfigureNamedOptions\u003cTOptions, IServiceProvider\u003e(\n\u003e                 name,\n\u003e                 serviceProvider,\n\u003e                 configureOptions));\n\u003e         \n\u003e         return services;\n\u003e     }\n\u003e 我们可以观察对此类 API 的需求情况，再考虑是否添加。\n\nThis API, I believe, is more in line with the usage habits of .NET developers.",
                                           "updatedAt":  "2025-07-31T02:47:33Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]:Options support configuring parsing IServiceProvider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Options"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118476",
        "createdAt":  "2025-08-07T07:45:24Z",
        "number":  118476,
        "author":  "dobri-popov-tiebreak-solutions",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-07T15:41:50Z",
        "body":  "### Description\n\nThe OptionsValidatorGenerator from Microsoft.Extensions.Options.SourceGeneration emits attributes like this:\n\n`    namespace XXX\n{\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Options.SourceGeneration\", \"9.0.12.31616\")]\n    internal sealed partial class __AppSettingsValidator__\n    {\n        /// \u003csummary\u003e\n        /// Validates a specific named options instance (or all when \u003cparamref name=\"name\"/\u003e is \u003csee langword=\"null\" /\u003e).\n        /// \u003c/summary\u003e\n        /// \u003cparam name=\"name\"\u003eThe name of the options instance being validated.\u003c/param\u003e\n        /// \u003cparam name=\"options\"\u003eThe options instance.\u003c/param\u003e\n        /// \u003creturns\u003eValidation result.\u003c/returns\u003e\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Options.SourceGeneration\", \"9.0.12.31616\")]\n        [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage(\"Trimming\", \"IL2026:RequiresUnreferencedCode\",\n             Justification = \"The created ValidationContext object is used in a way that never call reflection\")]`\n\n\n\n### Reproduction Steps\n\nIf the consuming project has a namespace like XXX.System, the generated code fails to compile\n`The type or namespace name \u0027Diagnostics\u0027 does not exist in the namespace \u0027XXX.System\u0027 (are you missing an assembly reference?)`\n\n```C#\nnamespace XXX;\n\n[OptionsValidator]\npublic partial class AppSettingsValidator : IValidateOptions\u003cAppSettings\u003e\n{\n}\n```\n\n```C#\nnamespace XXX.System\npublic class SomeOtherClass {}\n```\n\n### Expected behavior\n\nThe generator should emit the attribute as:\n`[global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage(...)]`\n\n### Actual behavior\n\nThe generator emits the attribute as:\n`[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage(...)]`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvIafBg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68hp8G",
                                           "createdAt":  "2025-08-07T07:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T07:46:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "OptionsValidatorGenerator emits ambiguous System.Diagnostics reference — should use global::System.Diagnostics",
        "labels":  [
                       "area-Extensions-Options"
                   ]
    }
]
