[
    {
        "url":  "https://github.com/dotnet/runtime/issues/4873",
        "createdAt":  "2015-12-29T21:13:05Z",
        "number":  4873,
        "author":  "kyulee1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T21:24:23Z",
        "body":  "ILDASM incorrectly reconstruct EH clauses when fTryInCode is true. \nA part of reason is due to sort which shouldn\u0027t be applied -- https://github.com/dotnet/coreclr/blob/master/src/ildasm/dis.cpp#L352\nIn addition, inserting \".try\" clauses into source is not properly implemented. \nNote passing \"-raweh\" to just display raw EH tables at the end of method works correctly.\n\nThe followings are example assembly. Try ilasm followed by ildasm then EH clauses are reversed -- catching ArithmeticException  followed by DivideByZeroException.\n\n```\n.class public _div {\n.method public static   int32 _div(int32,int32) {\n.locals     (class [mscorlib]System.Exception,int32)\n.maxstack       3\ntry_start:\n    ldarg   0\n    ldarg   1\n    div\n    stloc.1\n    leave.s try_end\ntry_end:\n    ldloc.1\n    br              END\narithmetic:\n    isinst          [mscorlib]System.ArithmeticException\n    stloc   0\n    leave           AEEnd\nAEEnd:\n\n    ldloc   0\n    brfalse         FAIL\n    ldc.i4          0xAE\n    br              END\ndivbyzero:\n    isinst          [mscorlib]System.DivideByZeroException\n    stloc   0\n    leave           DBZEnd\nDBZEnd:\n\n    ldloc   0\n    brfalse         FAIL\n    ldc.i4          0xDB0E\n    br              END\nFAIL:\n    ldc.i4          0x00000000\n    br              END\nEND:\n    ret\n.try try_start to try_end catch [mscorlib]System.DivideByZeroException handler divbyzero to DBZEnd\n.try try_start to try_end catch [mscorlib]System.ArithmeticException handler arithmetic to AEEnd\n}\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKb2CEQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwNjQ0NDQ1Nw==",
                                           "createdAt":  "2016-04-06T16:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "russellhadley",
                                           "body":  "@kyulee1 If this is not a regression against desktop would you put it in the Future milestone?\n",
                                           "updatedAt":  "2016-04-06T16:09:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwNjQ0NTMyNA==",
                                           "createdAt":  "2016-04-06T16:11:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kyulee1",
                                           "body":  "Changed it for futher since it\u0027s the existing issue in desktop as well.\n",
                                           "updatedAt":  "2016-04-06T16:11:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMDI4NTQ1Nw==",
                                           "createdAt":  "2020-09-28T21:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "briansull",
                                           "body":  "Not clear if this issue needs to be fixed.\r\nIL catch clause are processed in the order that they are specified and the first one that handled the Object kind \r\nhandles the exception.  It is illegal in C# to have multiple catch clauses that can handle the exception.\r\n\r\nAs noted the Desktop IL assembler also has this behavior and no one has filed a bug on this .\r\n",
                                           "updatedAt":  "2020-09-28T21:15:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ILDASM incorrectly reconstruct EH clauses",
        "labels":  [
                       "bug",
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9355",
        "createdAt":  "2017-11-30T09:37:52Z",
        "number":  9355,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAlCfAg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2019-03-14T21:12:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-04-24T21:31:54Z",
        "body":  "The existing behaviors are inconsistent with each other and frustrating at best:\r\n\r\n- [ ] Command line argument asking to produce a PDB is silently ignored\r\n- [ ] Command line argument asking to strong name sign an assembly produces an error\r\n- [ ] Security directives (`.permission`) fail with a cryptic error message (`Failed to define security attribute set for 0x20000001`).\r\n\r\nILAsm should either stick to warnings or errors or silent ignorance.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHDJmzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzA2NTE2NA==",
                                           "createdAt":  "2019-03-14T21:12:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Any news on this?  Lack of PDB is something that we *notice* since we ship System.Runtime.CompilerServices.Unsafe built with ILAsm.",
                                           "updatedAt":  "2019-03-14T21:12:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Define the behavior of ILAsm for unspported features",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11233",
        "createdAt":  "2018-10-12T20:21:30Z",
        "number":  11233,
        "author":  "dseefeld",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T21:31:30Z",
        "body":  "When running ildasm with files with long paths, ildasm fails when the -out parameter specifies a file path length \u003e 260 with the error:\r\nUnable to open \u0027\u003cfilename\u003e\u0027 for output.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJCBlfw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTk5MTU3MA==",
                                           "createdAt":  "2019-04-04T17:31:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "glenn-slayden",
                                           "body":  "related, same issue on ILAsm:  https://github.com/dotnet/coreclr/issues/2306",
                                           "updatedAt":  "2019-04-04T17:32:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjEwMjkxMQ==",
                                           "createdAt":  "2020-03-30T16:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jashook",
                                           "body":  "@BruceForstall ",
                                           "updatedAt":  "2020-03-30T16:26:42Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ildasm unable to output to filename with path over 260 chars",
        "labels":  [
                       "enhancement",
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11412",
        "createdAt":  "2018-11-05T23:20:12Z",
        "number":  11412,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB1hYJA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-08-08T18:49:32Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-04-24T22:09:14Z",
        "body":  "As mentioned in dotnet/coreclr#20818, ilasm delegates out a step of the resource-embedding process to a process named CvtRes.exe. We don\u0027t ship CvtRes.exe with .NET Core (it\u0027s also not OSS). So, we need to come up with a plan that allows us to enable resource embedding of *.res files with ilasm on .NET Core.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWqb_Cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5apm_K",
                                           "createdAt":  "2023-04-24T21:33:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Are there any customers blocked by this issue?",
                                           "updatedAt":  "2023-04-24T21:33:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5apnsm",
                                           "createdAt":  "2023-04-24T21:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "We have some tests that we can\u0027t enable while this issue is present since the lack of this feature means that App Manifests are dropped in the ilasm-ildasm round-trip tests. There are no customers that have asked for this feature specifically though.",
                                           "updatedAt":  "2023-04-24T21:36:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5apn-D",
                                           "createdAt":  "2023-04-24T21:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6fzgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TIHan",
                                                                               "createdAt":  "2023-04-24T21:53:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Actually, looking at the issue reference logs above, https://github.com/dotnet/runtime/issues/48046 is a customer request for this feature (it\u0027s just about the ilasm flag, not the underlying feature). One of these can be closed as a duplicate of the other.",
                                           "updatedAt":  "2023-04-24T21:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aptSo",
                                           "createdAt":  "2023-04-24T21:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Not sure how quickly we could add support for this, I imagine it would take some time and the only immediate gain would be enabling some of those round-trip tests.",
                                           "updatedAt":  "2023-04-24T21:57:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5apv8K",
                                           "createdAt":  "2023-04-24T22:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4H9HQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "gerhard17",
                                                                               "createdAt":  "2023-04-26T06:52:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JulieLeeMSFT",
                                                                               "createdAt":  "2024-10-25T19:06:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Roslyn already has a managed port of CvtRes, so we could port their OSS port back to C++. Or I could eventually have time to finish my managed port of ILAsm and we could use the Roslyn version as-is.",
                                           "updatedAt":  "2023-04-24T22:09:14Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Enable embedding *.res resources via ilasm",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12055",
        "createdAt":  "2019-02-15T23:51:39Z",
        "number":  12055,
        "author":  "iskiselev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:11:16Z",
        "body":  "Currently ILAsm always treat \"System.Enum\", \"System.Object\" and \"System.ValueType\" as classes defined in base library checking only their names.\r\nSo, next IL code will create ValueType from \"NotValueType\", instead of just creating class that extends `System.ValueType` from current assembly:\r\n```il\r\n.class public System.ValueType {}\r\n.class public NotValueType extends System.ValueType {}\r\n```\r\nSo next C# code could not be round-trip with ILDAsm/ILAsm:\r\n```c#\r\nnamespace System\r\n{\r\n    public class ValueType { }\r\n}\r\npublic class NotValueType : System.ValueType  { }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWqcEww==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjE2MTQ2OA==",
                                           "createdAt":  "2021-04-01T20:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mletterle",
                                           "body":  "Duplicate of #7769",
                                           "updatedAt":  "2021-04-01T20:44:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5apoe_",
                                           "createdAt":  "2023-04-24T21:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Is there anyone blocked by this issue?\r\n\r\nWhile I definitely think this should be round-trip-able, I don\u0027t think it is a priority.",
                                           "updatedAt":  "2023-04-24T21:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5app88",
                                           "createdAt":  "2023-04-24T21:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iskiselev",
                                           "body":  "I tried to implement test to validate that CLR profiler will correctly identify value and reference types, and tried to create edge case test using IL to produce assembly - and it have not worked.",
                                           "updatedAt":  "2023-04-24T21:43:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5apwTD",
                                           "createdAt":  "2023-04-24T22:11:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Thanks @iskiselev - I will bump-up the priority on this. I don\u0027t know when it will get done, but it will take precedence over most of the iltools issues at least.",
                                           "updatedAt":  "2023-04-24T22:11:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ILAsm special meaning classes",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12132",
        "createdAt":  "2019-02-26T19:50:08Z",
        "number":  12132,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T21:40:04Z",
        "body":  "Roslyn can do full-signing on CoreCLR, ILAsm should do the same.  https://github.com/dotnet/roslyn/issues/8210\r\n\r\n/cc @jkotas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKgxw8Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzU5MTIzMA==",
                                           "createdAt":  "2019-02-26T20:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not think it makes sense to build full strong name signing into .NET Core ilasm.\r\n\r\nIf we need a full-signing in .NET Core build tooling for some reason, it should be built as separate managed tool that will handle this for all compilers.",
                                           "updatedAt":  "2019-02-26T20:05:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzU5NTM2Ng==",
                                           "createdAt":  "2019-02-26T20:14:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I noticed this when playing around with ILproj projects.  Our default is sign new assemblies with the open key which contains a public/private pair and this failed.  We can workaround it for sure, but I felt like the \"right fix\" was to address it in the tool.",
                                           "updatedAt":  "2019-02-26T20:14:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTQ1NTIxMw==",
                                           "createdAt":  "2020-10-08T09:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gerhard17",
                                           "body":  "As a proof of concept I started migrating our .net framework infrastructure to .net 5 (rc1). We post process some assemblies with ildasm and ilasm. And I ran in exactly in this problem. \r\n\r\nRemark: All of our assemblies are signed with a strong key, which is even checked by Anti-Maleware inside the company.",
                                           "updatedAt":  "2020-10-08T09:39:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTQ1ODQxNw==",
                                           "createdAt":  "2020-10-08T09:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gerhard17",
                                           "body":  "Btw...\r\nIs delay-signing possible for ilasm?\r\nToo bad I found no documentation for ildasm/ilasm nuget packages. Only the documentation in \".NET Framework Tools\" hosted at microsoft.",
                                           "updatedAt":  "2020-10-08T09:45:55Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ILAsm should support full signing",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12418",
        "createdAt":  "2019-04-04T07:38:19Z",
        "number":  12418,
        "author":  "glenn-slayden",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T21:49:27Z",
        "body":  "**ILAsm.exe** incorrectly opens a C-style block comment `/*  ... */` when the opening sequence `/*` appears in a **string literal** that occurs within the disabled portion(s) of an `#ifdef ... #else ... #endif` preprocessor block.\r\n\r\nThe two code examples shown below are identical except the latter contains an `#ifdef` block illustrating the problem. The first example works correctly, but the second causes **ILAsm.exe** to fail.\r\n\r\nIn the second example, since the symbol `__NOT_DEFINED__` is not defined, the first part of the `#ifdef` block should be ignored. The excluded part of the `#ifdef` block contains a string literal which happens to contain the block comment opening sequence `/*`. \r\n\r\n\r\n\u003chr\u003e\r\n\r\n**`app_ok.il`** :\r\n\r\n    .assembly extern mscorlib { .ver 4:0:0:0 auto }\r\n    .assembly app_ok { }\r\n    .module app_ok.exe\r\n    .class Program\r\n    {\r\n        .method static void Main()\r\n        {\r\n            .entrypoint\r\n            \r\n            ldstr \"foo /* bar\"\r\n            call void [mscorlib]System.Console::WriteLine(string)\r\n            ret\r\n        }\r\n    }\r\n\r\n**result - ok** :\r\n\r\n\u003e     D:\\\u003eilasm /nologo /quiet app_ok.il\r\n\u003e     D:\\\u003eapp_ok.exe\r\n\u003e     foo /* bar\r\n\u003e     D:\\\u003e\r\n\r\n\u003chr\u003e\r\n\r\n**`app_fail.il`** :\r\n\r\n    .assembly extern mscorlib { .ver 4:0:0:0 auto }\r\n    .assembly app_fail { }\r\n    .module app_fail.exe\r\n    .class Program\r\n    {\r\n        .method static void Main()\r\n        {\r\n            .entrypoint\r\n    \r\n    #ifdef __NOT_DEFINED__\r\n            ldstr \"foo /* bar\"\r\n    #else\r\n            ldstr \"etc. (doesn\u0027t matter)\"\r\n    #endif\r\n            call void [mscorlib]System.Console::WriteLine(string)\r\n            ret\r\n        }\r\n    }\r\n\r\n**result - failure** :\r\n\r\n\u003e     D:\\\u003eilasm /nologo /quiet app_fail.il\r\n\u003e     app_fail.il(23) : error : syntax error at token \u0027\u0027 in:\r\n\u003e     \r\n\u003e     ***** FAILURE *****\r\n\u003e     D:\\\u003e\r\n\r\n\u003chr\u003e\r\n\r\n**Error:**\u003cbr\u003e***ILAsm.exe incorrectly considers the text \"`/*`\", which appears within the string literal, to be an active block comment opening sequence.***\r\n\r\nThis only occurs within *disabled* preprocessor blocks. If the `/*` portion of the text is removed from the failure example, or if the (incorrectly-opened) block comment is \"properly\" closed via a `*/` sequence within the disabled section (this can be either within the string literal or subsequently), then the error goes away and the **ILAsm.exe** command succeeds.\r\n\r\n**Expected:**\u003cbr\u003eThe happenstance contents of a string literal should not affect the success or failure of an **ILAsm.exe** invocation.\r\n\r\n**Notes:**\u003cbr\u003eWithin preprocessor blocks that are _enabled_ (active), string literals containing the comment sequence are handled correctly (not interpreted).\r\n\r\nThe same failure also occurs when the `/*` sequence appears *outside* of a string literal within a disabled preprocessor block, but this condition seems less obviously erroneous.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWqa3VQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTkyNzg1OQ==",
                                           "createdAt":  "2019-04-04T14:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKeldorph",
                                           "body":  "Thanks.  Very nice analysis.  I assume it\u0027s been that way forever, so not a high priority to fix, but we\u0027ll probably accept a PR for it.",
                                           "updatedAt":  "2019-04-04T14:46:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTk4MjcxNw==",
                                           "createdAt":  "2019-04-04T17:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "glenn-slayden",
                                           "body":  "ILAsm currently cannot be built by outsiders due to a [dependency on a Microsoft-internal tool](https://github.com/dotnet/coreclr/issues/2305) \"VCBU Internal YACC,\" so this might make PR more difficult...",
                                           "updatedAt":  "2019-04-04T17:30:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDAwOTM5NQ==",
                                           "createdAt":  "2019-04-04T18:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKeldorph",
                                           "body":  "@glenn-slayden dotnet/runtime#4776 has some info on using `btyacc` to prototype a fix.  If the PR is otherwise correct, we\u0027d be happy to regenerate the yacc output using the internal tool if we have to.  Obviously, we should figure out how to fix this yacc dependency, but it\u0027s not high on the priority list, unfortunately.",
                                           "updatedAt":  "2019-04-04T18:21:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDAyNTU2NA==",
                                           "createdAt":  "2019-04-04T19:09:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "glenn-slayden",
                                           "body":  "Fixing this may be subtle. The current **ILAsm** behavior is that block-style comments `/* ... */` generally trump everything (except single line comment `// ...`). For the particular case here, `/*  #if...  */` will always vacate the preprocessor directive (regardless of, i.e., sequential order-of-appearance between the two, meaning `#if /* ... #endif */` leaves the preprocessor dangling). Though perhaps not entirely ideal, this greedy design is at least defensible.\r\n\r\nBut I digress. As described in the issue, what\u0027s unexpected is that string literals are not interpreted at all when `/* ...`  is searching for its closing `*/`, and that seems patently wrong.\r\n\r\nThe caution I wanted to add was that **_there\u0027s no requirement that any appearance of the double-quote character within a block-comment be delimiting some well-formed string literal_**. For example, the following currently works fine, a behavior which probably shouldn\u0027t be changed:\r\n\r\n    ldstr /* \"incomplete string */ \"foo bar\"\t\t// ok\r\n\r\nSo for fixing this issue: Searching for the closing `*/` within a (formative) block comment should only exclude (skip over) the contents of string literals which can be deemed \"well-formed\" according to some appropriately weak notion.\r\n\r\nOther examples:\r\n\r\n1. `/*` and `*/` are evaluated in disabled `#ifdef` blocks (the 2nd `#endif` is required in the following):\r\n\r\n       ldarg #ifdef __EXCLUDE__  /* #endif */ garbage #endif the_arg  // ok  --\u003e  \u0027ldarg the_arg\u0027\r\n\r\n2. `#if...` directives are *never* evaluated within `/*  ... */` (i.e., don\u0027t need any `#endif` in the following):\r\n\r\n       ldarg /* #ifdef __EXCLUDE__  */ the_arg       // ok\r\n\r\n3. The problem described above does not occur with single-line comments. All of the following are ok:\r\n\r\n        ldc.i4.0  // \"foo /* foo\"        // ok\r\n        ldc.i4.0  // foo /* foo          // ok\r\n        ldc.i4.0  // foo /* \"foo         // ok\r\n\r\n        #ifdef __EXCLUDE__\r\n        ldc.i4.0  // \"foo /* foo\"        // ok (excluded)\r\n        ldc.i4.0  // foo /* foo          // ok (excluded)\r\n        ldc.i4.0  // foo /* \"foo         // ok (excluded)\r\n        #endif\r\n\r\n4. So single-line comment is the only way to hide `/*` (no block comment is opened in the following):\r\n\r\n       ldarg the_arg    //   foo /*     ok\r\n\r\n5. But, block comment can hide `//` (closing `*/` is effective in the following):\r\n\r\n        ldarg /* foo // */\r\n        the_arg                    // ok\r\n\r\n        //  ...and not...\r\n        \r\n        ldarg /* foo // */         // NO\r\n        */ t                       // excess block-comment close\r\n\r\nHints of \"rock-paper-scissors?\" Points (4) and (5) show that single-line comments have the same precedence as block comments. Only between these two is the relative priority established by forward processing according to sequential order of appearance in the source file.\r\n",
                                           "updatedAt":  "2019-10-04T23:12:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDAzMjEyNw==",
                                           "createdAt":  "2019-04-04T19:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvNtGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2019-08-26T02:02:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2019-08-26T02:02:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "glenn-slayden",
                                           "body":  "\u003e Obviously, we should figure out how to fix this yacc dependency, but it\u0027s not high on the priority list, unfortunately.\r\n\r\n@RussKeldorph Actually, I\u0027d say that **IL(D)Asm** are both long overdue for full modernization / re-implementation from scratch in C#. Is ***that*** a PR you\u0027d accept?",
                                           "updatedAt":  "2019-04-04T19:31:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDEwMDI4OQ==",
                                           "createdAt":  "2019-04-04T23:37:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKeldorph",
                                           "body":  "@glenn-slayden I think so.  We\u0027ve certainly talked about it for years.  As long as it came with sufficient tests to verify near-conformance (possibly even bug-for-bug compat in some cases) with existing tools, we\u0027d love to get rid of this unnecessarily native baggage.  It would make it more convenient to integrate these tools into the SDK, and it would probably be easier for repos like Roslyn that use `ILAsm` as a validation tool.\r\n\r\nFYI @jaredpar says https://github.com/mono/mono/tree/master/mcs/ilasm is pretty far from full conformance with ilasm corner cases, but it might be a place to start.  If that became conformant, I assume it would become the \"one true\" ilasm and we could delete the source entirely from this repo.\r\n\r\n/cc: @jkotas in case I\u0027m too far into wishful thinking",
                                           "updatedAt":  "2019-04-04T23:37:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU1NzI0MA==",
                                           "createdAt":  "2019-04-07T04:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "glenn-slayden",
                                           "body":  "After doing some preliminary investigations on this, it occurs to me that perhaps **F#** rather than **C#** might be a more elegant choice for implementing an (e.g.,) [LALR parser](https://en.wikipedia.org/wiki/LALR_parser) such as (e.g.,) **ILAsm**, perhaps because the functional programming approach _itself_ more closely models the declarative form of a BNF--or, more generally, any \"formal\"--language grammar?\r\n\r\nAs with the .NET **ILAsm**, the mono version that @jaredpar pointed to is fundamentally Yacc-based. I [cleaned up](http://www.blobule.com/webshare/mcs-ilasm.7z) that **C#**-based IL assembler source quite a bit for **vs2017** and it builds, runs, and then builds PEs that work fine on .NET Framework 4.7.2, at least for the simple tests I\u0027ve tried so far. The snapshot I linked consolidates all minimal dependencies; in particular it includes the complete/updated/working C sources and `vcxproj` for the `jay.exe` tool which generates the **C#** parser source file `ILParser.jay.cs` from the declarative grammar definition file `ILParser.jay`.\r\n\r\nAlthough that code will be a useful reference, I\u0027m not sure I will be able to fully use it as a starting point for what I\u0027m working on, where I\u0027m hoping to build and maintain a mutable [Abtract Semantic Graph](https://en.wikipedia.org/wiki/Abstract_semantic_graph) that\u0027s bidirectionally associated with the \"live\" IL source. That goal appears to need fundamentally different data structures and design, as compared to the traditional grammar approach which focuses on the (very different) one-time, one-way parsing scenario, and around which the Yacc tools and traditions have evolved.",
                                           "updatedAt":  "2019-04-07T04:02:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMDI4NjExOA==",
                                           "createdAt":  "2020-09-28T21:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "briansull",
                                           "body":  "Fixing this would require rewriting the assembler in a new language other that MS yacc/lex.\r\n",
                                           "updatedAt":  "2020-09-28T21:17:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aprdV",
                                           "createdAt":  "2023-04-24T21:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Using a different YACC tool, as mentioned from https://github.com/dotnet/runtime/issues/4776 , we might be able to address this more easily depending on how flexible the tool is.",
                                           "updatedAt":  "2023-04-24T21:49:12Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "ILAsm: Fail on string literals containing \"... /* ...\" within disabled #ifdef block",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13340",
        "createdAt":  "2019-08-29T20:48:02Z",
        "number":  13340,
        "author":  "bhenn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T21:59:46Z",
        "body":  "Is there any specific reason why there is a limit of 1024 files in ilasm ?\r\n\r\nI\u0027m trying to use ilasm in a large solution and Im getting this error",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVXDNfA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VcM18",
                                           "createdAt":  "2023-02-16T17:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ikozhi",
                                           "body":  "Got it figured out?",
                                           "updatedAt":  "2023-02-16T17:30:42Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "MAX_MANIFEST_RESOURCES = 1024",
        "labels":  [
                       "enhancement",
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13535",
        "createdAt":  "2019-10-05T10:54:45Z",
        "number":  13535,
        "author":  "castholm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA-Hvwg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "abelbraaksma",
                                            "createdAt":  "2020-03-14T01:18:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-04-24T22:01:21Z",
        "body":  "I\u0027ve noticed that when building .ilproj projects using the Release configuration, branch instructions (`brfalse`, `br`, etc.) do not get optimized to their short equivalents (`brfalse.s`, `br.s`). Other instructions with short equivalents like `ldarg` or `ldc.i4` get optimized, but not branch instructions. I believe this is a bug.\r\n\r\nI have a static class with two static methods defined as follows:\r\n```\r\n.class public auto ansi abstract sealed beforefieldinit Foo extends [netstandard]System.Object\r\n{\r\n    .method public hidebysig static int32 Bar(int32 \u0027value\u0027) cil managed\r\n    {\r\n        .maxstack 2\r\n\r\n    if_value_is_negative:\r\n        ldarg \u0027value\u0027\r\n        ldc.i4 0\r\n        bge if_value_is_five\r\n\r\n        ldc.i4 1\r\n        br return\r\n\r\n    if_value_is_five:\r\n        ldarg \u0027value\u0027\r\n        ldc.i4 5\r\n        bne.un else\r\n\r\n        ldc.i4 2\r\n        br return\r\n\r\n    else:\r\n        ldc.i4 3\r\n\r\n    return:\r\n        ret\r\n    }\r\n\r\n    .method public hidebysig static int32 BarManuallyOptimized(int32 \u0027value\u0027) cil managed\r\n    {\r\n        .maxstack 2\r\n\r\n    if_value_is_negative:\r\n        ldarg.0\r\n        ldc.i4.0\r\n        bge.s if_value_is_five\r\n\r\n        ldc.i4.1\r\n        br.s return\r\n\r\n    if_value_is_five:\r\n        ldarg.0\r\n        ldc.i4.5\r\n        bne.un.s else\r\n\r\n        ldc.i4.2\r\n        br.s return\r\n\r\n    else:\r\n        ldc.i4.3\r\n\r\n    return:\r\n        ret\r\n    }\r\n}\r\n```\r\n\r\nWhen building the project with `dotnet build -c Release` (which I believe invokes ILAsm with the `/optimize` option behind the scenes) and opening the resulting .dll in ILDAsm, I get the following output:\r\n\r\n```\r\n.class public abstract auto ansi sealed beforefieldinit Foo\r\n       extends [netstandard]System.Object\r\n{\r\n  .method public hidebysig static int32  Bar(int32 \u0027value\u0027) cil managed\r\n  {\r\n    // Code size       28 (0x1c)\r\n    .maxstack  2\r\n    IL_0000:  ldarg.0\r\n    IL_0001:  ldc.i4.0\r\n    IL_0002:  bge        IL_000d\r\n\r\n    IL_0007:  ldc.i4.1\r\n    IL_0008:  br         IL_001b\r\n\r\n    IL_000d:  ldarg.0\r\n    IL_000e:  ldc.i4.5\r\n    IL_000f:  bne.un     IL_001a\r\n\r\n    IL_0014:  ldc.i4.2\r\n    IL_0015:  br         IL_001b\r\n\r\n    IL_001a:  ldc.i4.3\r\n    IL_001b:  ret\r\n  } // end of method Foo::Bar\r\n\r\n  .method public hidebysig static int32  BarManuallyOptimized(int32 \u0027value\u0027) cil managed\r\n  {\r\n    // Code size       16 (0x10)\r\n    .maxstack  2\r\n    IL_0000:  ldarg.0\r\n    IL_0001:  ldc.i4.0\r\n    IL_0002:  bge.s      IL_0007\r\n\r\n    IL_0004:  ldc.i4.1\r\n    IL_0005:  br.s       IL_000f\r\n\r\n    IL_0007:  ldarg.0\r\n    IL_0008:  ldc.i4.5\r\n    IL_0009:  bne.un.s   IL_000e\r\n\r\n    IL_000b:  ldc.i4.2\r\n    IL_000c:  br.s       IL_000f\r\n\r\n    IL_000e:  ldc.i4.3\r\n    IL_000f:  ret\r\n  } // end of method Foo::BarManuallyOptimized\r\n\r\n} // end of class Foo\r\n```\r\n\r\nAs you can see, the branch instructions in the `Bar` method are not optimized. I would have expected both methods to have the same bytecode representation.\r\n\r\nAttached is a tiny sample project which reproduces the problem. Simply extract it, run `dotnet build -c Release` and open the built .dll in ILDAsm.\r\n\r\n[unoptimized-il.zip](https://github.com/dotnet/coreclr/files/3693134/unoptimized-il.zip)\r\n\r\nIf it matters, the exact version of ILAsm that is resolved is \"runtime.win-x64.microsoft.netcore.ilasm 3.0.0-preview-27318-01\".",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "ILAsm /optimize does not optimize branch instructions",
        "labels":  [
                       "enhancement",
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13740",
        "createdAt":  "2019-11-05T18:28:09Z",
        "number":  13740,
        "author":  "Tyrrrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-15T20:01:42Z",
        "body":  "OS: Windows 10\r\nHead: 46bc2ab4d\r\n\r\nIf you clone the repository to a directory that has spaces in the path, the build will fail 5-15 minutes in with error code `MSB3073: The command \"ilasm...\" exited with code 9009`.\r\n\r\nA few lines before that it actually says `Could not find a part of the path ...` with the full path truncated at the occurrence of the whitespace.\r\n\r\nIt seems this issue was also reported almost 4 years ago in dotnet/corefx#451 and seemingly fixed but I can reproduce it on the latest master as of the time of writing.\r\n\r\nAt the very least, it would be nice to mention this in the installation instructions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJmCaxw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDA5MTc5NA==",
                                           "createdAt":  "2019-11-06T00:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA0YPAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrrz",
                                                                               "createdAt":  "2019-11-06T08:26:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Hi @Tyrrrz I guess almost everyone working on the repo has no spaces in their path, so it regresses, then someone notices and it fixes, .. \r\n\r\nWe\u0027d be happy to take a PR, if you\u0027re interested.\r\n\r\nI suspect it is actually in this file, which is in another repo and we consume via Nuget\r\n\r\nhttps://github.com/dotnet/coreclr/blob/833493193a849311b56026303bec2eaf11eb7d67/src/.nuget/Microsoft.NET.Sdk.IL/targets/Microsoft.NET.Sdk.IL.targets#L135\r\n\r\n` \u003cExec Command=\"$(_IlasmDir)ilasm $(_IlasmSwitches) $(_OutputTypeArgument) $(IlasmFlags) -OUTPUT=\u0026quot;@(IntermediateAssembly)\u0026quot; $(_KeyFileArgument) @(Compile, \u0027 \u0027)\"\u003e`\r\nshould probably be\r\n` \u003cExec Command=\"\u0026quot;$(_IlasmDir)ilasm\u0026quot; $(_IlasmSwitches) $(_OutputTypeArgument) $(IlasmFlags) -OUTPUT=\u0026quot;@(IntermediateAssembly)\u0026quot; $(_KeyFileArgument) @(Compile, \u0027 \u0027)\"\u003e`",
                                           "updatedAt":  "2019-11-06T00:55:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDIwMDg3Mg==",
                                           "createdAt":  "2019-11-06T08:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tyrrrz",
                                           "body":  "Thanks for the insight, I will take a look at that file and see how I can substitute the targets to test it out.",
                                           "updatedAt":  "2019-11-06T08:28:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDIzMTM1OQ==",
                                           "createdAt":  "2019-11-06T09:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tyrrrz",
                                           "body":  "It actually turned out there are multiple instances of unquoted paths in the target file, besides the one you pointed out. I have fixed them one by one and it builds successfully now. Will submit a PR shortly.",
                                           "updatedAt":  "2019-11-06T09:47:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MjEwODY1OA==",
                                           "createdAt":  "2019-11-09T15:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Fix reverted in https://github.com/dotnet/coreclr/pull/27793",
                                           "updatedAt":  "2019-11-09T15:09:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzQ3OTk2MQ==",
                                           "createdAt":  "2020-06-12T20:56:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "logiclrd",
                                           "body":  "Can confirm this is still happening.",
                                           "updatedAt":  "2020-06-12T20:56:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzQ4NjkwMA==",
                                           "createdAt":  "2020-06-12T21:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@logiclrd we can accept more fixes, but the build is complex and apparently few people work with spaces in their path, including PR validation, so realistically this will keep breaking. Can you clone to a path without spaces?",
                                           "updatedAt":  "2020-06-12T21:17:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzUxMDY0Mg==",
                                           "createdAt":  "2020-06-12T22:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQUekg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vcsjones",
                                                                               "createdAt":  "2020-09-14T15:29:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "logiclrd",
                                           "body":  "It\u0027s actually my user profile path that has a space in it. There is a build targets file that generates a call to `ildasm` based on the user profile path and doesn\u0027t quote it. I ended up here from the closed issue #35785, and didn\u0027t read through it super carefully, since it was after all identified as a duplicate.\r\n\r\nI believe what\u0027s going on is that the tool it is trying to run is inside a NuGet package, and back when this issue was made, that NuGet package was in a `packages` cache folder alongside the repo working copy. Now, with `\u003cPackageReference\u003e`, the V3 cache folder is shared, inside the user profile instead of inside the repo.\r\n```\r\n  \u0027C:\\Users\\Jonathan\u0027 is not recognized as an internal or external command,\r\n  operable program or batch file.\r\nC:\\Users\\Jonathan Gilbert\\.nuget\\packages\\microsoft.net.sdk.il\\5.0.0-preview.4.20202.18\\targets\\Microsoft.NET.Sdk.IL.targets(96,5): error MSB3073: The command \"C:\\Users\\Jonathan Gilbert\\.nuget\\packages\\\\runtime.win-x64.microsoft.netcore.ildasm\\5.0.0-preview.4.20202.18\\runtimes\\win-x64\\native/ildasm \"C:\\code\\runtime\\artifacts\\bin\\ref\\net5.0\\System.Runtime.CompilerServices.Unsafe.dll\" /OUT=\"C:\\code\\runtime\\artifacts\\obj\\System.Runtime.CompilerServices.Unsafe\\net5.0-Debug\\/System.Runtime.CompilerServices.Unsafe.ref.il\"\" exited with code 9009. [C:\\code\\runtime\\src\\libraries\\System.Runtime.CompilerServices.Unsafe\\src\\System.Runtime.CompilerServices.Unsafe.ilproj]\r\n```\r\nI have created a local user account with no spaces in the name to try to move forward, but now that NuGet packages are coming out of the user profile path, it\u0027s not so simple for people to just change what path they\u0027re working with.",
                                           "updatedAt":  "2020-06-12T22:42:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mzg2NTI4Nw==",
                                           "createdAt":  "2020-06-15T02:11:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "logiclrd",
                                           "body":  "Confirmed that with a user profile in `C:\\Users\\Jonathan` instead of `C:\\Users\\Jonathan Gilbert`, `build` runs through to completion with no errors.",
                                           "updatedAt":  "2020-06-15T02:11:13Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Build fails with MSB3073 if there are spaces in the path",
        "labels":  [
                       "help wanted",
                       "area-ILTools-coreclr",
                       "Priority:2",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13823",
        "createdAt":  "2019-11-24T18:47:21Z",
        "number":  13823,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKSOow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2019-11-24T21:34:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2019-11-24T21:52:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevenaw",
                                            "createdAt":  "2019-11-25T02:55:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yyjdelete",
                                            "createdAt":  "2019-11-25T03:14:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2019-11-25T10:54:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2019-11-25T14:28:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2019-12-14T16:55:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lambdageek",
                                            "createdAt":  "2020-02-11T19:01:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mletterle",
                                            "createdAt":  "2020-02-21T23:45:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2021-09-06T09:56:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fhelwanger",
                                            "createdAt":  "2022-01-07T16:46:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HarryGifford",
                                            "createdAt":  "2022-01-24T05:11:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2022-05-11T18:13:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jonpryor",
                                            "createdAt":  "2022-05-11T18:42:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pjcollins",
                                            "createdAt":  "2022-05-11T18:49:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jonathanpeppers",
                                            "createdAt":  "2022-05-11T18:58:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grendello",
                                            "createdAt":  "2022-05-11T21:30:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "escalonn",
                                            "createdAt":  "2022-05-17T08:48:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2022-06-25T19:57:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-02-24T13:39:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Visne",
                                            "createdAt":  "2023-03-23T03:45:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sk0va",
                                            "createdAt":  "2023-08-21T13:24:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "worldbeater",
                                            "createdAt":  "2024-09-13T17:02:14Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "worldbeater",
                                            "createdAt":  "2024-09-13T17:02:18Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "worldbeater",
                                            "createdAt":  "2024-09-13T17:02:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arizvisa",
                                            "createdAt":  "2025-07-30T17:42:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrzVlad",
                                            "createdAt":  "2025-08-07T13:44:16Z"
                                        }
                                    ],
                          "totalCount":  27
                      },
        "updatedAt":  "2025-06-19T19:05:15Z",
        "body":  "For example, acquisition and usage of https://www.nuget.org/packages/dotnet-format/ is quite simple:\r\n\r\n```\r\ndotnet tool install --global dotnet-format\r\n```\r\n\r\n```\r\ndotnet-format --files MyModel.cs\r\n```\r\n\r\nIt would be handy if IL-related tools are also packaged as [.NET Core Global tools](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools-how-to-create) and following the installation instructions on nuget.org page (`dotnet tool install ..`) is sufficient.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsieR1g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NzkyNjc0OA==",
                                           "createdAt":  "2019-11-24T20:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Ildasm (at least) is Windows specific right now. If there were global tools ideally they’d be cross platform.\r\n\r\n@safern didn’t you mention you wrote a cross platform ildasm?",
                                           "updatedAt":  "2019-11-24T20:52:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NzkyODIwMw==",
                                           "createdAt":  "2019-11-24T21:08:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "With the current master, it seems to be building on Unix, e.g.:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/a9f3fc16483eecfc47fb79c362811d870be02249/src/ildasm/exe/CMakeLists.txt#L12-L18\r\n\r\nwe get `coreclr/bin/Product/Linux.x64.Debug/ildasm` executable.",
                                           "updatedAt":  "2019-11-24T21:08:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Nzk0Njc5Ng==",
                                           "createdAt":  "2019-11-25T00:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Ildasm (at least) is Windows specific right now\r\n\r\nildasm is not Windows specific. Did you mean to say platform specific?",
                                           "updatedAt":  "2019-11-25T00:36:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Nzk3NTk3NQ==",
                                           "createdAt":  "2019-11-25T03:54:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jkotas I meant it’s a Win32 UI app isn’t it? At least the original one I’m used to. I guess I’m out of date?",
                                           "updatedAt":  "2019-11-25T03:56:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1ODE2Njc0Mw==",
                                           "createdAt":  "2019-11-25T13:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The .NET Framework one is a dual command line tool and Win32 UI app. The .NET Core one is a regular (unmanaged) command line tool. We did not bother to open source the Win32 UI.",
                                           "updatedAt":  "2019-11-25T13:56:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1ODE5MzAyNQ==",
                                           "createdAt":  "2019-11-25T14:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarcoRossignoli",
                                           "body":  "@jkotas ILVerify is the one in corert repo?Will be moved to new repo?",
                                           "updatedAt":  "2019-11-25T14:59:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1ODIyNjExMw==",
                                           "createdAt":  "2019-11-25T16:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, I think it would make sense. Opened https://github.com/dotnet/coreclr/issues/27939",
                                           "updatedAt":  "2019-11-25T16:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Faca",
                                           "createdAt":  "2021-08-27T18:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We can actually leverage this feature to package platform-specific tools: https://github.com/dotnet/sdk/blob/main/documentation/general/signing-global-tool-packages.md\r\n\r\n@Petermarcu let me know that @wli3 came up with this suggestion for some Azure tools a few months back.  It just occurred to me that it might be nice to use for ILAsm/ILDasm.",
                                           "updatedAt":  "2021-08-27T18:21:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Fa9S",
                                           "createdAt":  "2021-08-27T18:24:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB_kGdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2021-09-06T09:57:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2021-10-23T17:36:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Moving this to 7.0.0 as I think we can meaningfully improve the customer experience here with small effort.",
                                           "updatedAt":  "2021-08-27T18:24:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47H8HH",
                                           "createdAt":  "2021-12-12T17:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Hi guys, what specifically should be done here, I half time spend on Linux and even if I have that runtime built locally, I prefer have it as separate tool.",
                                           "updatedAt":  "2021-12-12T17:23:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DAO9B",
                                           "createdAt":  "2022-05-11T18:15:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCiV1Ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "arizvisa",
                                                                               "createdAt":  "2022-05-11T19:37:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TIHan",
                                                                               "createdAt":  "2022-06-17T00:12:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "As a workaround you can download and unzip this nuget package: https://www.nuget.org/packages/runtime.linux-x64.Microsoft.NETCore.ILDAsm (change the `linux-x64` to match your RID).\r\n\r\nIt contains an `ildasm` binary in `runtimes/\u003cRID\u003e/native/ildasm`",
                                           "updatedAt":  "2022-05-11T18:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DAisT",
                                           "createdAt":  "2022-05-11T19:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arizvisa",
                                           "body":  "Since they\u0027re a great pair, you can find ilasm similarly at: https://www.nuget.org/packages/runtime.linux-x64.Microsoft.NETCore.ILAsm\r\nIf you want an explicit version (like if you\u0027re fetching with curl) just suffix it: https://www.nuget.org/packages/runtime.linux-x64.Microsoft.NETCore.ILAsm/6.0.0\r\n",
                                           "updatedAt":  "2022-05-11T19:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XVUvq",
                                           "createdAt":  "2023-03-12T14:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQUr1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanxpetrov",
                                                                               "createdAt":  "2023-12-21T18:39:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "glenn-slayden",
                                           "body":  "\u003e We did not bother to open source the Win32 UI.\r\n\r\nIs that expected to be the permanent state-of-affairs? That GUI was horrible, but useful nevertheless.",
                                           "updatedAt":  "2023-03-12T14:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5apvpa",
                                           "createdAt":  "2023-04-24T22:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Since there are workarounds for this, I don\u0027t see this as a priority.\r\n\r\nHowever, @ericstj mentioned it would only be some small effort to do. Who is the right person/team to handle adding new global tools to the dotnet command-line?",
                                           "updatedAt":  "2023-04-24T22:08:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aqIk-",
                                           "createdAt":  "2023-04-25T00:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6gHtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2023-04-25T00:35:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "The owners of those tools (ILAsm/ILDasm).  Global tools can be built by anyone.  This can be fixed with just the right packaging in the dotnet/runtime repo.\r\n\r\nAdding things to the official `dotnet` cli is different -- that\u0027s the SDK.  I\u0027m not seeing that as part of the ask here.",
                                           "updatedAt":  "2023-04-25T00:32:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aupUR",
                                           "createdAt":  "2023-04-25T17:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "\u003e The owners of those tools (ILAsm/ILDasm)\r\n\r\nWell, that would be me. 😅\r\n\r\n\u003e Adding things to the official dotnet cli is different -- that\u0027s the SDK. I\u0027m not seeing that as part of the ask here.\r\n\r\nSure, that makes sense. I wasn\u0027t familiar with how global tools work in correlation with the CLI, but I think I understand now.\r\n\r\n\u003e This can be fixed with just the right packaging in the dotnet/runtime repo.\r\n\r\nI\u0027ll spend some time on this next month as I do think it would be useful. I\u0027ll up the priority.",
                                           "updatedAt":  "2023-04-25T17:45:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzUCK",
                                           "createdAt":  "2024-07-31T22:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "We will not have time to do this in .NET9. Moving to .NET 10.",
                                           "updatedAt":  "2024-07-31T22:51:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P7Vin",
                                           "createdAt":  "2024-10-15T18:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@amanasifkhalid, reassigned the ILAsm/ILDasm issue to you. ",
                                           "updatedAt":  "2024-10-15T18:12:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yJ5HW",
                                           "createdAt":  "2025-06-19T19:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amanasifkhalid",
                                           "body":  "I\u0027m unlikely to get to this in .NET 10.",
                                           "updatedAt":  "2025-06-19T19:05:06Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "ilasm/ildasm as dotnet global tools",
        "labels":  [
                       "area-ILTools-coreclr",
                       "feature-request",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38506",
        "createdAt":  "2020-06-28T17:28:47Z",
        "number":  38506,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:13:43Z",
        "body":  "With:\r\n```\r\nset COMPlus_TieredCompilation=0\r\nset RunningIlasmRoundTrip=1\r\n\r\n\u003epushd c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Release\\JIT\\jit64\\verif\\sniff\\fg\\ver_fg_13\r\n\u003ecall c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Release\\JIT\\jit64\\verif\\sniff\\fg\\ver_fg_13\\ver_fg_13.cmd -coreroot c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\r\n\r\nBEGIN EXECUTION\r\nc:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\\ildasm.exe /raweh /out=ver_fg_13.dasm.il ver_fg_13.dll\r\nc:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\\ilasm.exe /output=ver_fg_13.asm.dll -QUIET -NOLOGO -DEBUG=OPT -OPTIMIZE ver_fg_13.dasm.il\r\nver_fg_13.dasm.il(94) : error : Unable to find forward reference label \u0027IL_000e\u0027 called from PC=36\r\nver_fg_13.dasm.il(94) : error : Method \u0027test2\u0027 compilation failed.\r\n***** FAILURE *****\r\nEXECUTION OF ILASM - FAILED 1\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS11-0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LXX7R",
                                           "createdAt":  "2022-10-01T16:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "Test seems to intentionally have invalid IR\r\n\r\n```\r\n...\r\n\t\tleave -22\r\n...\r\n```\r\n\r\nin a method called from `Main`, which catches `InvalidProgramException`.\r\n\r\nThe `-22` seems to be an explicit relative IL offset (from the *next* instruction) rather than the usual use of a label in manually written IL files.  However, `-22` doesn\u0027t line up with an instruction.\r\n\r\nThis `ilasm`s fine in the test tree, but `ildasm` attempts to write a label `IL_000e` as the destination rather than `-22`.  My guess is that the emitter needs to check if the target exists before writing a label.  Since `ildasm` creates a label for every instruction, presumably the assumption was that targets would always be there.\r\n\r\nNote that this is hard to see in the original il file because the instructions aren\u0027t labeled, but you can see the `-22` in the original file and then the `IL_000e` in the `disasm` version.",
                                           "updatedAt":  "2022-10-01T16:55:13Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Test failure: ilasm round-trip ver_fg_13",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38508",
        "createdAt":  "2020-06-28T18:00:03Z",
        "number":  38508,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:14:17Z",
        "body":  "With:\r\n```\r\nset COMPlus_TieredCompilation=0\r\nset RunningIlasmRoundTrip=1\r\n\r\n\u003epushd c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Release\\Loader\\\\classloader\\\\MethodImpl\\\\CovariantReturns\\\\UnitTest\\\\CompatibleWithTest\r\n\r\nc:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Release\\Loader\\classloader\\MethodImpl\\CovariantReturns\\UnitTest\\CompatibleWithTest\u003ecall c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Release\\Loader\\\\classloader\\\\MethodImpl\\\\CovariantReturns\\\\UnitTest\\\\CompatibleWithTest\\\\CompatibleWithTest.cmd -coreroot c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\r\nBEGIN EXECUTION\r\nc:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\\ildasm.exe /raweh /out=CompatibleWithTest.dasm.il CompatibleWithTest.dll\r\nc:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\\ilasm.exe /output=CompatibleWithTest.asm.dll -QUIET -NOLOGO -OPTIMIZE CompatibleWithTest.dasm.il\r\n \"c:\\gh\\runtime\\artifacts\\tests\\coreclr\\Windows_NT.x64.Debug\\tests\\Core_Root\\corerun.exe\" CompatibleWithTest.asm.dll\r\nC1\r\nSucceeded\r\nC2: override int32[] by IList\u003cint32\u003e\r\nUnhandled exception. System.MissingMethodException: Method not found: \u0027System.Collections.Generic.IList`1\u003cInt32\u003e C1.M1()\u0027.\r\n   at Main.RunTestC2()\r\n   at Main.Main(String[] args)\r\nEND EXECUTION OF IL{D}ASM BINARY - FAILED -532462766 vs 100\r\nFAILED\r\n```\r\n\r\nNote that the non-round-trip test catches an expected exception here and continues:\r\n```\r\nCaught expected TypeLoadException:\r\nSystem.TypeLoadException: Return type in method \u0027C2.M1()\u0027 on type \u0027C2\u0027 from assembly \u0027UnitTest, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027 is not compatible with base type method \u0027C1.M1()\u0027.\r\n   at Main.RunTestC2()\r\n   at Main.Main(String[] args)\r\n```\r\n\r\nIt looks like the exception being thrown is different.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Test failure: ilasm round-trip CompatibleWithTest",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43671",
        "createdAt":  "2020-10-21T00:35:23Z",
        "number":  43671,
        "author":  "BruceForstall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-13T13:41:21Z",
        "body":  "In the ilasm round-trip test pipeline in Azure DevOps, I see the ildasm command as \r\n```\r\nC:\\h\\w\\B90F0A37\\p\\ilasm.exe /output=hugeSimpleExpr1.asm.dll  hugeSimpleExpr1.dasm.il\r\n```\r\n(e.g., https://dev.azure.com/dnceng/public/_build/results?buildId=857488\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27443456\u0026resultId=102009\u0026paneView=dotnet-dnceng.dnceng-build-release-tasks.helix-test-information-tab)\r\n\r\nWhen I run a test locally, e.g., JIT\\IL_Conformance\\Old\\Base\\blt\\blt.cmd, I see:\r\n```\r\n%CORE_ROOT%\\ilasm.exe /output=blt.asm.dll -QUIET -NOLOGO -DEBUG=OPT -OPTIMIZE blt.dasm.il\r\n```\r\n\r\nThe difference is that my local build passes various switches and the CI does not. These switches are set in `src\\tests\\Common\\CLRTest.Jit.targets`:\r\n```\r\n\"$CORE_ROOT/ilasm\" -output=$(TargetAssemblyName) $(_IlasmSwitches) $(DisassemblyName) \r\n```\r\n\r\nAnd `_IlasmSwitches` appears to be set in `src\\coreclr\\src\\.nuget\\Microsoft.NET.Sdk.IL\\targets\\Microsoft.NET.Sdk.IL.targets`. But it appears to not be set in the CI build.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Discrepancy in ilasm round-trip testing versus local",
        "labels":  [
                       "area-ILTools-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46328",
        "createdAt":  "2020-12-22T16:13:34Z",
        "number":  46328,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:17:51Z",
        "body":  "### Description\r\n\r\nILAsm throws the following error: \r\n\r\n`\"Could not create output file, error code=0x80004005\"` \r\n\r\nwhen the input source file includes a **_partly-defined_** .line directive, for example:\r\n\r\n\u003e .method public hidebysig static int32 Foo(int32 a) cil managed\r\n{\r\n     .line 15:3 \u0027some_external_file.ext\u0027\r\n     IL_0000:    nop\r\n     IL_0001:    ret\r\n}\r\n\r\n**_Partly-defined_** .line directives are those which do not specify all of the optional start/end line/column parameters.\r\n\r\n### Configuration\r\n.NET 5.0 ilasm\r\n\r\n### Other information\r\n\r\nThere are two problems related to this issue in the ilasm implementation:\r\n\r\n## 1. .line directive rules\r\n\r\nFor .NET Core there is a discrepancy between ILAsm and Portable PDB specification and requirements for .line directive.\r\n* ILASM specification [Expert .NET 2.0 IL Assembler - CHAPTER 19 MULTILANGUAGE PROJECTS page: 407]\r\n   .line \u003cstart_line\u003e, \u003cend_line\u003e : \u003cstart_col\u003e, \u003cend_col\u003e \u0027\u003cfile_name\u003e\u0027\r\n   All parameters except the \u003cstart_line\u003e may be omitted; in this case they are replaced with the following default values:\r\n     \r\n\r\n\u003e \u003cend_line\u003e = \u003cstart_line\u003e\r\n\u003e      \u003cend_col\u003e = \u003cstart_col\u003e\r\n\u003e      \u003cstart_col\u003e = 1\r\n\u003e      \u003cfile_name\u003e = taken from the previous .line directive\r\n\r\n* Portable PDB https://github.com/dotnet/runtime/blob/master/docs/design/specs/PortablePdb-Metadata.md\r\n   The values of non-hidden sequence point must satisfy the following constraints\r\n\r\n\u003e    ...\r\n\u003e    End Line is greater or equal to Start Line.\r\n\u003e    If Start Line is equal to End Line then End Column is greater than Start Column.\r\n\r\nAs it can be seen Portable PDB requires EndColumn to be greater than StartColumn in cases when StartLine==EndLine,\r\nwhich is different from the ILAsm specification.\r\n\r\n**Suggested approach**: My suggestion is to follow the ILAsm rules with the exception for EndColumn, where Portable PDB rule should be applied.\r\n\r\n## 2. ilasm behavior on invalid .line directives\r\n\r\nIf a malformed .line directive is detected, ilasm rudely throws an error without generating the assembly file nor the PDB.\r\n\r\n**Suggested approach**: In case of PDB generation errors ilasm should indeed refuse to generate the PDB file, but I think that assemblies should still be generated with a proper warning message indicating that the PDB generation has failed.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLNYpIw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTYyODkyNQ==",
                                           "createdAt":  "2020-12-22T16:18:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@jkotas \r\nI am not sure who should be included from the MS team regarding the above-mentioned problems (and suggested approaches). \r\nCould you please tag those who would be interested to comment?\r\nThank you in advance.",
                                           "updatedAt":  "2020-12-22T16:18:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTY0NDk4Ng==",
                                           "createdAt":  "2020-12-22T16:40:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Portable PDB https://github.com/dotnet/runtime/blob/master/docs/design/specs/PortablePdb-Metadata.md\r\nThe values of non-hidden sequence point must satisfy the following constraints\r\n\r\n@tmat Where is this requirement coming from? How does this work for classic PDBs?\r\n\r\n\u003e I think that assemblies should still be generated with a proper warning message indicating that the PDB generation has failed\r\n\r\nI do not think it is a good idea to generate .dll without .pdb. We can either:\r\n- Treat the malformed line directive as warning: The .pdb should be still generated, with the malformed line directive omitted.\r\n- Or Treat the malformed line directives as errors: Nothing should be generated in this case\r\n\r\nIn either case, we should print better error message.",
                                           "updatedAt":  "2020-12-22T16:40:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTY0NTI2NA==",
                                           "createdAt":  "2020-12-22T16:40:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @briansull ",
                                           "updatedAt":  "2020-12-22T16:40:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTY3NTkyMg==",
                                           "createdAt":  "2020-12-22T17:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "An additional note:\r\n\r\n\u003e In either case, we should print better error message.\r\n\r\nSorry, I did not provide you with the full ilasm output. \r\nWhen I was implementing portable PDB support, I\u0027ve added reporting of warning messages for these cases, which results with the following:\r\n\r\n\u003e warning : Sequence point at line: [0xf] and offset: [0x0] in method \u0027Foo\u0027 is not valid!\r\n\u003e Error: failed to emit body of \u0027Foo\u0027\r\n\u003e Could not create output file, error code=0x80004005\r\n\r\nPerhaps warnings should be promoted to errors or something like that. \r\nLet me know what you think.\r\n",
                                           "updatedAt":  "2020-12-22T17:30:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTczNjY1MQ==",
                                           "createdAt":  "2020-12-22T19:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBawBbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2020-12-22T20:03:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think we should produce warning, but still emit the invalid sequence point (ie do not treat the warning as error).\r\n\r\nIt is a feature that ilasm can create invalid binaries. It is very useful for testing.",
                                           "updatedAt":  "2020-12-22T19:34:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTc1MDY4Mg==",
                                           "createdAt":  "2020-12-22T20:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "I agree. \r\nI can do the fix once there is a clarification/agreement on the **_.line directive rules_** problem.",
                                           "updatedAt":  "2020-12-22T20:04:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MDI5Nzg5MQ==",
                                           "createdAt":  "2020-12-23T13:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e My suggestion is to follow the ILAsm rules with the exception for EndColumn, where Portable PDB rule should be applied.\r\n\r\nWhat do you propose to set EndColumn to by default?",
                                           "updatedAt":  "2020-12-23T13:20:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MDMxNTQ0Nw==",
                                           "createdAt":  "2020-12-23T14:07:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "I would adapt the ILAsm rules for default values in the following way (bolded text refers to the portable PDB requirement):\r\n\r\n\u003e \u003cend_line\u003e = \u003cstart_line\u003e\r\n\u003e \u003cend_col\u003e =  **(\u003cend_line\u003e == \u003cstart_line\u003e) ? \u003cstart_col\u003e + 1** : \u003cstart_col\u003e\r\n\u003e \u003cstart_col\u003e = 1\r\n\u003e \u003cfile_name\u003e = taken from the previous .line directive\r\n",
                                           "updatedAt":  "2020-12-23T14:07:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MTM5NzM3MQ==",
                                           "createdAt":  "2020-12-26T21:22:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The ilasm with classic PDBs produced EndColumn=0. Can we do that for ilasm, for both regular sequence points and as the default for line directives?\r\n\r\nThe current scheme where ilasm produces endColumn=2 by default produces a bit odd debugging experience:\r\n\r\nClassic PDBs: ![image](https://user-images.githubusercontent.com/6668460/103159267-47242500-477c-11eb-9960-ab161e7abc8d.png)\r\n\r\nPortable PDBs: \r\n![image](https://user-images.githubusercontent.com/6668460/103159306-bbf75f00-477c-11eb-84c7-e5bb4f88d23e.png)\r\n\r\nNotice the odd single character yellow highlight with Portable PDBs.",
                                           "updatedAt":  "2020-12-26T21:22:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MTY3MDM0Mw==",
                                           "createdAt":  "2020-12-28T10:46:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "If that is acceptable by portable pdb standard, I am fine with it. I was just pointing out the rule which states the opposite ",
                                           "updatedAt":  "2020-12-28T10:47:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MTc1Nzg5Nw==",
                                           "createdAt":  "2020-12-28T15:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We should update the portable pdb doc as part of this.",
                                           "updatedAt":  "2020-12-28T15:46:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MTgwNzkwMg==",
                                           "createdAt":  "2020-12-28T17:54:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Unfortunately, these kinds of sequence points are not supported by Portable PDB. \r\n\r\n\u003e If Start Line is equal to End Line then End Column is greater than Start Column.\r\n\r\nThis rule is important for the delta encoding. If Start Line = End Line (ΔLine = 0) and Start Column = End Column (ΔColumn = 0) then such value encodes a [hidden sequence point](https://github.com/dotnet/runtime/blob/master/docs/design/specs/PortablePdb-Metadata.md#hidden-sequence-point-record).\r\n\r\nThe format expects all sequence points to be associated with a text span spanning the corresponding source code.",
                                           "updatedAt":  "2020-12-28T17:57:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MTgxMjQxNg==",
                                           "createdAt":  "2020-12-28T18:07:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Could ILASM determine the precise span of the instruction source?\r\n\r\nIt does not help with the explicit line directives with missing column information. The length of instruction source is irrelevant for explicit line directives. C# `.line` directives have the same problem. Would it make sense to emit max column value for these?",
                                           "updatedAt":  "2020-12-28T18:07:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MTgyNzU1OQ==",
                                           "createdAt":  "2020-12-28T18:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "C# currently does not allow to specify column. It uses the start and end columns from the current source and sets the line to the one specified with the `.line` directive. \r\n\r\nFor some scenarios (like Razor), this is not good enough. We might need to change the language/compiler to allow specifying a column range. In any case, we wouldn\u0027t have a scenario when the column is undefined in C#.\r\n\r\nIf we think it\u0027s worth the effort we could use a special value (e.g. the current max+1: `0x10000`) to represent an undefined column. The encoder/[decoder](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Reflection.Metadata/src/System/Reflection/Metadata/PortablePdb/SequencePointCollection.cs) could interpret this value as undefined column. The metadata reader APIs would need to be updated to allow for unspecified column (e.g. returning -1, which is what SymReader APIs are using for Windows PDBs for undefined columns). The debugger already interprets -1 as undefined column and does not highlight the span (only displays yellow arrow).\r\n\r\n",
                                           "updatedAt":  "2020-12-28T18:54:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MjEyNTEzMA==",
                                           "createdAt":  "2020-12-29T15:35:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I have done some ad-hoc testing and the max end column value (0xffff) works nicely. There is no odd single character yellow highlight, the whole line is highlighted.\r\n\r\nI think we should emit undefined end column as 0xffff in ilasm. Does it sound reasonable?\r\n\r\n\u003e If we think it\u0027s worth the effort we could use a special value (e.g. the current max+1: 0x10000) \r\n\r\nI think we would want to consider this only if emitting undefined end column as 0xffff proves to be insufficient for some reason.\r\n\r\n\u003e In any case, we wouldn\u0027t have a scenario when the column is undefined in C#.\r\n\r\nI believe that there are quite a few situations out there where the columns are undefined. In particular, anything generated by C or C-like preprocessor does not track columns.",
                                           "updatedAt":  "2020-12-29T15:36:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MjIzMjczOQ==",
                                           "createdAt":  "2020-12-29T20:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbIObg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2020-12-30T05:08:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmat",
                                           "body":  "I think 0xffff is reasonable as a workaround.",
                                           "updatedAt":  "2020-12-29T20:35:23Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "ilasm throws an error when partly-defined .line directives are used",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50435",
        "createdAt":  "2021-03-30T17:42:21Z",
        "number":  50435,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:20:00Z",
        "body":  "`DumpMethod` allocates `pszArgname` on the heap:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dasm.cpp#L3709\r\n\r\nThis is only deallocated at the end of the method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dasm.cpp#L3954-L3961\r\n\r\nHowever, there are a number of places where this method can return earlier. For example:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dasm.cpp#L3797-L3802\r\n\r\nIt\u0027s possible that the memory is leaked in one of those error-paths.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Possible memory leak in dasm.cpp DumpMethod",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50436",
        "createdAt":  "2021-03-30T17:48:19Z",
        "number":  50436,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:21:09Z",
        "body":  "`DumpBody` is an argument to `DumpMethod`.\r\n\r\nThe `DumpMethod` method checks if the argument is false. If the argument is false, it returns:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dasm.cpp#L3615-L3620\r\n\r\nThere\u0027s some funny code after this point, though. For example, a few lines later:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dasm.cpp#L3624-L3625\r\n\r\nThis `if` statement is guaranteed to be true, right?\r\n\r\nThen, a little further down:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dasm.cpp#L3789-L3793\r\n\r\nThis condition can never be true, right?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Some no-op code in dasm.cpp DumpMethod that could be simplified",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50448",
        "createdAt":  "2021-03-30T20:25:20Z",
        "number":  50448,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:20:30Z",
        "body":  "`ildasm/dis.cpp`\u0027s `Disassemble` method uses an array named `LineCode` allocated on the heap:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dis.cpp#L928\r\n\r\nThe variable `pLCD` also points to this variable.\r\n\r\nThere are a couple of places in the `Disassemble` method were the code simply returns, without deallocating this memory:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dis.cpp#L993-L1005\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dis.cpp#L1077-L1089\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dis.cpp#L1363-L1368\r\n\r\nThe memory is only deallocated on the non-error path, at the end of the method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b23205f59ab3853e4b6b43f91a7ca3900c0cc7d0/src/coreclr/ildasm/dis.cpp#L1949",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMFAS6g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMDU1NDA5MA==",
                                           "createdAt":  "2021-03-30T20:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-30T20:25:23Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Possible memory leak in idasm\u0027s Disassemble method",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50556",
        "createdAt":  "2021-04-01T12:53:42Z",
        "number":  50556,
        "author":  "RevensofT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:24:02Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### First notice problem\r\nI found out after update VS 2019 latest patch an array create from dll I compile with ilasm.exe can\u0027t be debug.\r\n![image](https://user-images.githubusercontent.com/7234852/113294509-4376e000-9321-11eb-9e88-b7e8a23e54bd.png)\r\n\r\nThis is code in il file.\r\n![image](https://user-images.githubusercontent.com/7234852/113295055-e596c800-9321-11eb-86e8-4736034fc976.png)\r\n\r\n```\r\n.class public sequential ansi sealed beforefieldinit Forge.array`1\u003cT\u003e\r\n       extends [System.Runtime]System.ValueType\r\n{\r\n  .pack 0\r\n  .size 1\r\n\r\n  .field static public initonly !T[] data\r\n\r\n  .method private specialname rtspecialname static \r\n          void .cctor() cil managed\r\n    {\r\n      .maxstack  1\r\n\r\n      //Debug an error from metadata between static field array on other dll and in house array.\r\n      ldc.i4.3\r\n      newarr     !T[]\r\n      stsfld     !T[] valuetype Forge.array`1\u003c!T\u003e::data\r\n\r\n      ret\r\n    } // end of method array`1::.cctor\r\n}\r\n```\r\n\r\nMetadata on il file.\r\n```\r\n// Metadata version: v4.0.30319\r\n.assembly extern System.Runtime\r\n{\r\n  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:\r\n  .ver 5:0:0:0\r\n}\r\n.assembly extern Microsoft.VisualBasic.Core\r\n{\r\n  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:\r\n  .ver 10:0:6:0\r\n}\r\n.assembly extern System.Reflection.Primitives\r\n{\r\n  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A )                         // .?_....:\r\n  .ver 5:0:0:0\r\n}\r\n```\r\n\r\n### Notice what\u0027s happening.\r\nWhen I compare between array I got from dll compile from ilasm, new create array and Array.Empty(Of T), I found out array from has miss match metadata of type with other like this.\r\n\r\n\u003e 140711661200968\r\n\u003e 140711661154432\r\n\u003e 140711661154432\r\n\r\n### Other information\r\nI don\u0027t find any problem on class or interface, only array type has this problem, I think `newarr` maybe has some problem.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMGRn2A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMTg4NjU1Mg==",
                                           "createdAt":  "2021-04-01T12:53:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-01T12:53:45Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Metadata miss match between array type from VS 2019 and ILASM compile.",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53822",
        "createdAt":  "2021-06-07T17:48:51Z",
        "number":  53822,
        "author":  "dsyme",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6scEA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vzarytovskii",
                                            "createdAt":  "2021-06-07T17:50:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leppie",
                                            "createdAt":  "2024-09-02T07:06:08Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-02-05T02:09:50Z",
        "body":  "\r\nThe is either a question or a bug report.  Basically does the `/linenum` flag of ILDASM work with .NET Core?\r\n\r\nContext: We use ILDASM in the F# repo from package “Microsoft.NETCore.ILDAsm\". However I can’t get the “/linenum” option to workm, e.g. to show the PDB file contents in terms of sequence points.  We use this to lock down our debugging experience, which is quite important one way or another.  I could dump the sequence points from the compiler but it’s really convenient to have them showing with the IL code.\r\n\r\nRepro: \r\n\r\n- Compile something with portable symbols\r\n- run `ildasm /linenum /text  foo.dll`\r\n\r\ne.g. in F# repo:\r\n\r\n    ildasm.exe artifacts\\bin\\FSharp.Core\\Debug\\netstandard2.0\\FSharp.Core.dll /linenum\r\n\r\nExpected: output include `.line`\r\nActual: no `.line` observed\r\n\r\nWe\u0027ve tried lots of variations like embedded symbols etc., we can\u0027t find a configuration that works.\r\n\r\ncc @vzarytovskii, @brettfo \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnRczmQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjYyODMzMw==",
                                           "createdAt":  "2021-06-16T18:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@EgorBo PTAL.",
                                           "updatedAt":  "2021-06-16T18:52:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_pTE2",
                                           "createdAt":  "2022-03-15T10:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCiVuRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TIHan",
                                                                               "createdAt":  "2022-06-16T23:50:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "When ilasm received the support for portable PDB, ildasm was left out https://github.com/dotnet/runtime/pull/37702#issuecomment-653255368. It is more of a feature request than a bug report. 😄\r\n\r\nNote that once portable PDB parser is plugged into ildasm, this condition will start to satisfy: https://github.com/dotnet/runtime/blob/abb7df59eb4f8c813c07ddd6f46f94e59604577d/src/coreclr/ildasm/dis.cpp#L1132 in the statement `fInsertSourceLines = g_fInsertSourceLines;` under `if (g_pSymReader)` condition, `g_fInsertSourceLines` is 1 with `/linenum` or `-linenum` argument, otherwise 0; but that statement is unreachable because `g_pSymReader` is always null in ildasm.",
                                           "updatedAt":  "2022-03-15T10:06:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FCi-L",
                                           "createdAt":  "2022-06-16T23:57:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsUNtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-06-17T08:34:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2022-09-15T22:09:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "TIHan",
                                           "body":  "@am11 Thank you for the added context here, it\u0027s very helpful.\r\n\r\nWe should definitely support portable PDBs for this; it would help make F# debug testing a bit easier.",
                                           "updatedAt":  "2022-06-16T23:57:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KbWYW",
                                           "createdAt":  "2022-09-15T22:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtWkaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2022-09-15T22:09:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vzarytovskii",
                                                                               "createdAt":  "2022-09-15T22:16:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "renerod",
                                                                               "createdAt":  "2022-10-05T16:07:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Hello, I decided to work on this (as I worked on the ilasm support for portable PDB as well :)) as part of the hackathon project. \r\nAssigning myself",
                                           "updatedAt":  "2022-09-15T22:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NXwZy",
                                           "createdAt":  "2022-11-01T06:10:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mirkomaty",
                                           "body":  "@ivanpovazan: Is there any progress on this issue? We use ILASM/ILDASM roundtrips for an assembly enhancer with C# (see www.netdataobjects.de). ILDASM doesn\u0027t generate .line statements with .Net Standard DLLs. That\u0027s really bad, because users can\u0027t debug enhanced DLLs.",
                                           "updatedAt":  "2022-11-01T06:10:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ns5lm",
                                           "createdAt":  "2022-11-04T14:11:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "@mirkomaty I made some initial progress like reading the document table, but had to switch to some other higher priority issues.\r\nI will probably get back to this later in November. \r\nIf you need assistance earlier, maybe @TIHan or someone from the team, could pick this up sooner.",
                                           "updatedAt":  "2022-11-04T14:11:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NtMwj",
                                           "createdAt":  "2022-11-04T15:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvDBfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-11-04T15:19:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mirkomaty",
                                           "body":  "@ivanpovazan: Thanks a lot for your answer. The problem is not so urgent, because currently I tell my users to use \r\n\r\n`\u003cDebugType\u003efull\u003c/DebugType\u003e`\r\n\r\nBut since .NET Core will be the dominant platform in the future, there is little point in having my users insert that line into their project files all the time.\r\n\r\nI\u0027m not able to customize ILDasm myself, so I appreciate you taking the time to do so. ;-) If it happens this year, it is perfect for me. Thanks again.",
                                           "updatedAt":  "2022-11-04T15:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zYrRk",
                                           "createdAt":  "2024-02-09T12:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Unfortunately, I will not have enough cycles to look further into this in the near future. Will remain at disposal if anyone needs help or has questions around this.",
                                           "updatedAt":  "2024-02-09T12:32:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58twau",
                                           "createdAt":  "2024-05-03T06:12:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mirkomaty",
                                           "body":  "Hello, is there any progress in this area?\r\n\r\nI created a simple project with this project file:\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003edisable\u003c/Nullable\u003e\r\n\t  \u003cDebugMode\u003efull\u003c/DebugMode\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"ndo.dll\" Version=\"5.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\nI took ILDasm from the package `runtime.win-x64.microsoft.netcore.ilasm` in the version 8.0.0.0.\r\nDisassembling with Dasm with /LINENUM switch doesn\u0027t provide any line numbers regardless of the TargetFramework (netstandard 2.0 or net6.0).  \r\n\r\nEDIT: Same with v. 9.0.0-preview.3.24172.9\r\n\r\nILDasm from the .NET Fx Tools 4.8 does the trick. It seems, as if the full pdb support has been removed in order to replace it with portable pdb support, which never happened. It would help a lot to get the pdb support back as long as portable pdb is not implemented.",
                                           "updatedAt":  "2024-05-03T09:19:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P7bi1",
                                           "createdAt":  "2024-10-15T18:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Reassigned to @amanasifkhalid. ",
                                           "updatedAt":  "2024-10-15T18:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dFzOZ",
                                           "createdAt":  "2025-02-05T02:09:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFR4Og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-05T02:19:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "antlersoft",
                                           "body":  "You can find a fork here: [https://github.com/antlersoft/runtime/tree/Issue-53822_ildasm_portable_pdb_linenum](https://github.com/antlersoft/runtime/tree/Issue-53822_ildasm_portable_pdb_linenum)\n\nthat addressed this particular issue.  The update as-is is unlikely to be merged, but if build-it-yourself will solve your problem, you might try it.\n\nThere are a number of limitations: most notably, we don\u0027t\n    try to use the Debug_Information table to find the pdb file;\n    we just look for a file with the same name as the executable\n    and replace the extension with .pdb.\n    \n    No effort is made to read the scope/local variable table.\n    \n    To build ildasm from this branch, from src/coreclr\n    \n    ./build-runtime.sh -component iltools\n\n\n\n",
                                           "updatedAt":  "2025-02-05T02:09:48Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "ILDASM /linenum support?",
        "labels":  [
                       "area-ILTools-coreclr",
                       "feature-request",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62030",
        "createdAt":  "2021-11-24T22:17:15Z",
        "number":  62030,
        "author":  "jsahaj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:26:23Z",
        "body":  "netcore ilasm /debug on an IL file with 65539 methods (each having locals) unexpectedly reports error \"Failed to write PDB file, error code=0x80070057\".  This is a serious limitation on an assembly for code generated projects.\r\n\r\nTo repro compile enclosed C# code in netcore project(add missing methods).  Then disassemble resulting assembly (ildasm /linenum my.dll \u003e j.il).  then run the netcore\u0027s ilasm /debug on il file (ilasm /debug j.il)\r\n```\r\nusing System;\r\nnamespace ns1 {\r\n  public class TestClass {\r\n  public void meth1() { int val; int val2; int val3=3; val = val2= val3; }\r\n  public void meth2() { int val; int val2; int val3=3; val = val2= val3; }\r\n  public void meth3() { int val; int val2; int val3=3; val = val2= val3; }\r\n  (methods meth4 to meth65535 excluded due to comment limitation for reporting an issue)\r\n  public void meth65536() { int val; int val2; int val3=3; val = val2= val3; }\r\n  public void meth65537() { int val; int val2; int val3=3; val = val2= val3; }\r\npublic static void Main(){}\r\n  }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPOfR1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46UDa0",
                                           "createdAt":  "2021-11-24T22:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnetcore ilasm /debug on an IL file with 65539 methods (each having locals) unexpectedly reports error \"Failed to write PDB file, error code=0x80070057\".  This is a serious limitation on an assembly for code generated projects.\r\n\r\nTo repro compile enclosed C# code in netcore project(add missing methods).  Then disassemble resulting assembly (ildasm /linenum my.dll \u003e j.il).  then run the netcore\u0027s ilasm /debug on il file (ilasm /debug j.il)\r\n```\r\nusing System;\r\nnamespace ns1 {\r\n  public class TestClass {\r\n  public void meth1() { int val; int val2; int val3=3; val = val2= val3; }\r\n  public void meth2() { int val; int val2; int val3=3; val = val2= val3; }\r\n  public void meth3() { int val; int val2; int val3=3; val = val2= val3; }\r\n  (methods meth4 to meth65535 excluded due to comment limitation for reporting an issue)\r\n  public void meth65536() { int val; int val2; int val3=3; val = val2= val3; }\r\n  public void meth65537() { int val; int val2; int val3=3; val = val2= val3; }\r\npublic static void Main(){}\r\n  }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejsahaj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-24T22:17:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46qiNT",
                                           "createdAt":  "2021-12-02T02:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "CC @dotnet/jit-contrib.",
                                           "updatedAt":  "2021-12-02T02:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46qigA",
                                           "createdAt":  "2021-12-02T02:16:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "65539 is awfully close to 65535 and there is a known problem with the ECMA file format with that number in certain metadata tables (https://github.com/dotnet/coreclr/pull/20865). Could be related because the portable PDB debug format uses the same metadata format.",
                                           "updatedAt":  "2021-12-02T02:16:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46qkg-",
                                           "createdAt":  "2021-12-02T02:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "When a type has over 65520 methods, runtime throws TypeLoadException. I think limits in that range are imposed by more components in the toolchain than just the ilasm. (C# compiler also (intermittently?) fails around those numbers).",
                                           "updatedAt":  "2021-12-02T02:36:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4859HU",
                                           "createdAt":  "2022-01-26T03:20:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Pushing this to future until the known issue is resolved. \r\n\r\n\u003e 65539 is awfully close to 65535 and there is a known problem with the ECMA file format with that number in certain metadata\r\n\r\n",
                                           "updatedAt":  "2022-01-26T03:20:32Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "netcore ilasm /debug on IL file with large number of methods unexpectedly reports 0x80070057",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72695",
        "createdAt":  "2022-07-22T19:41:43Z",
        "number":  72695,
        "author":  "MichalPetryka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T20:11:57Z",
        "body":  "### Description\r\n\r\nILAsm currently errors out when encountering IL containing the `no.` prefix, while ILDAsm disassemblers it into output that isn\u0027t valid.\r\n\r\n### Reproduction Steps\r\n\r\nFor ILDAsm: Create an assembly containing `no.` with some value (possible with Cecil) and try to disassemble it.\r\n\r\nFor ILAsm: Try to assemble:\r\n```cil\r\nldarg.0\r\nldc.i4.0\r\nno. 0x06\r\nldelem.u1\r\nret\r\n```\r\n\r\n### Expected behavior\r\n\r\nBoth are correctly handled.\r\n\r\n### Actual behavior\r\n\r\nILDasm gives this for `no.` with 0x06:\r\n```cil\r\nldarg.0\r\nldc.i4.0\r\nunused\r\nldloc.0\r\nldelem.u1\r\nret\r\n```\r\n\r\nILAsm errors out with `error : syntax error at token \u0027no\u0027 in:     IL_0002:  no. 0x02`.\r\n\r\n### Regression?\r\n\r\nVS ILDasm seems to have the same behaviour.\r\n\r\n### Known Workarounds\r\n\r\nUsing Cecil to create the instruction.\r\n\r\n### Configuration\r\n\r\n.Net 7-preview 6 ILDasm \u0026 ILAsm\r\n\r\n### Other information\r\n\r\nFixing this is required for creation of tests for eventual runtime support for the instruction which is tracked by #10112.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvVlB-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HGfSm",
                                           "createdAt":  "2022-07-22T19:41:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nILAsm currently errors out when encountering IL containing the `no.` prefix, while ILDAsm disassemblers it into output that isn\u0027t valid.\n\n### Reproduction Steps\n\nFor ILDAsm: Create an assembly containing `no.` with some value (possible with Cecil) and try to disassemble it.\r\n\r\nFor ILAsm: Try to assemble:\r\n```cil\r\nldarg.0\r\nldc.i4.0\r\nno. 0x06\r\nldelem.u1\r\nret\r\n```\n\n### Expected behavior\n\nBoth are correctly handled.\n\n### Actual behavior\n\nILDasm gives for `no.` with 0x06:\r\n```cil\r\nldarg.0\r\nldc.i4.0\r\nunused\r\nldloc.0\r\ndelem.u1\r\nret\r\n```\r\n\r\nILAsm errors out with `error : syntax error at token \u0027no\u0027 in:     IL_0002:  no. 0x02`.\n\n### Regression?\n\nVS ILDasm seems to have the same behaviour.\n\n### Known Workarounds\n\nUsing Cecil to create the instruction.\n\n### Configuration\n\n.Net 7-preview 6 ILDasm \u0026 ILAsm\n\n### Other information\n\nFixing this is required for creation of tests for eventual runtime support for the instructions with is tracked by #10112.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalPetryka\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-22T19:41:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HGqTQ",
                                           "createdAt":  "2022-07-22T20:55:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCoPXFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-07-25T04:49:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Nothing in current .NET supports the `no.` prefix. ",
                                           "updatedAt":  "2022-07-22T20:55:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HJIMV",
                                           "createdAt":  "2022-07-25T04:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @TIHan ",
                                           "updatedAt":  "2022-07-25T04:49:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HLfRV",
                                           "createdAt":  "2022-07-25T15:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "Just to give context. \r\n\r\nFrom the [EMCA 335 6th edition Specification](https://www.ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf) page 318.\r\n\r\n```\r\nThis prefix (no.) indicates that the subsequent instruction need not perform the specified fault check\r\nwhen it is executed. The byte that follows the instruction code indicates which checks can\r\noptionally be skipped. This instruction is not verifiable.\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-07-25T15:22:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzUYS",
                                           "createdAt":  "2024-07-31T22:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "We will not have time to work on this in .NET 9. Moving to .NET 10.",
                                           "updatedAt":  "2024-07-31T22:52:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69WUH6",
                                           "createdAt":  "2025-08-11T20:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Moving to .NET 11.",
                                           "updatedAt":  "2025-08-11T20:11:52Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ILDAsm and ILAsm don\u0027t handle the `no.` prefix",
        "labels":  [
                       "area-ILTools-coreclr",
                       "feature-request",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76773",
        "createdAt":  "2022-10-08T00:42:58Z",
        "number":  76773,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2Gefg==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2022-10-09T00:16:57Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2024-02-25T11:24:13Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-05-31T00:11:20Z",
        "body":  "There was a discussion about rewriting ilasm/ildasm in C#. If that is not happening in a near future, it would be nice to combine `ilasm/main.cpp` and `ildasm/windasm.cpp` main() functions and the arguments parsing code (1.5K LOC), to make the PAL-like code refactoring easier.\r\n\r\n_Originally posted by @am11 in https://github.com/dotnet/runtime/pull/76771#discussion_r990561863_\r\n\r\ncc @AaronRobinsonMSFT, @jkoritzinsky\r\n      ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS9Pt1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5L0-3W",
                                           "createdAt":  "2022-10-08T00:43:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere was a discussion about rewriting ilasm/ildasm in C#. If that is not happening in a near future, it would be nice to combine `ilasm/main.cpp` and `ildasm/windasm.cpp` main() functions and the arguments parsing code (1.5K LOC), to make the PAL-like code refactoring easier.\r\n\r\n_Originally posted by @am11 in https://github.com/dotnet/runtime/pull/76771#discussion_r990561863_\r\n\r\ncc @AaronRobinsonMSFT, @jkoritzinsky\r\n      \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eam11\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-08T00:43:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consolidate ilasm/main.cpp and ildasm/windasm.cpp",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81487",
        "createdAt":  "2023-02-01T16:56:13Z",
        "number":  81487,
        "author":  "crummel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-20T15:06:35Z",
        "body":  "In order to make source-build simpler, the runtime started shipping targeting packs every patch release even when there were no changes, so that, for example, the 6.0.1 targeting pack was released even when it was identical to 6.0.0 except for the version number. We now see a similar issue with ILAsm and ILDasm in 7.0 servicing - there was no 7.0.1 version of these released and source-build has no way to reliably know what the \"last known good\" version is.  Is it possible to release these tools the same way so source-build can use the most current version number without having to maintain LKG version numbers?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVXc27g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UL117",
                                           "createdAt":  "2023-02-01T16:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-02-01T16:56:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UL8fY",
                                           "createdAt":  "2023-02-01T17:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn order to make source-build simpler, the runtime started shipping targeting packs even patch release even when there were no changes, so that, for example, the 6.0.1 targeting pack was released even when it was identical to 6.0.0 except for the version number. We now see a similar issue with ILAsm and ILDasm in 7.0 servicing - there was no 7.0.1 version of these released and source-build has no way to reliably know what the \"last known good\" version is.  Is it possible to release these tools the same way so source-build can use the most current version number without having to maintain LKG version numbers?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecrummel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`, `source-build`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-01T17:12:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U62Gu",
                                           "createdAt":  "2023-02-09T19:37:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmitche",
                                           "body":  "@crummel There are a number of packages that runtime incrementally services. What makes ILAsm/ILDasm different than them? Is it that the IL* tools are foundational inputs to the runtime build and so we need to know what version to use from the previously source-built artifacts?\r\n\r\n@JulieLeeMSFT I believe the ask would be evaluate any downsides of shipping these packages every month. If we decided to do so, then we\u0027d switch to simply producing the ILAsm/ILDasm packages on every runtime servicing cycle, rather than selectively. I do not know how this is done for these packages.\r\n\r\n/cc @carlossanlop.",
                                           "updatedAt":  "2023-02-09T19:37:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vdzbu",
                                           "createdAt":  "2023-02-16T23:25:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crummel",
                                           "body":  "Yes, this causes problems when bootstrapping - since source-build assumes that the version available in previously-source-built is also publicly available, when we try to bootstrap e.g. version 7.0.103 we look for ILAsm 7.0.102 which doesn\u0027t exist.  The problem with having source-build only produce the 7.0.0 is that then servicing is no longer an N-1 issue for maintainers - it\u0027s an N-1 and N-3 and N-7 (or wherever the necessary packages are) issue.  We\u0027ve talked about carrying these types of packages forward into the next previously-source-built but that makes poisoning harder to enforce and likely would not be considered source-build-clean by distros.",
                                           "updatedAt":  "2023-02-16T23:25:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "coreclr-tools (ILAsm/ILDasm) should be released every version similar to targeting packs",
        "labels":  [
                       "area-ILTools-coreclr",
                       "source-build",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82373",
        "createdAt":  "2023-02-19T19:41:52Z",
        "number":  82373,
        "author":  "ltrzesniewski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:45:07Z",
        "body":  "### Description\r\n\r\nI believe the following code:\r\n\r\n```\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 )\r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 )\r\n```\r\n\r\nis supposed to apply two attributes on the interface implementation.\r\n\r\nWhen round-tripped through `ilasm`/`ildasm`, this code is turned into:\r\n\r\n```\r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 ) \r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 ) \r\n```\r\n\r\nWhich means:\r\n\r\n- `Test1Attribute` is applied on the interface implementation (metadata table `09`)\r\n- `Test2Attribute` is applied on the type definition (metadata table `02`)\r\n\r\nThe `CustomAttribute` metadata table shows that `ildasm` is correct here:\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/219970280-37b9bd29-4d6c-4bfc-b574-52a0581e1977.png)\r\n\r\nIn addition, note that the following code produces the desired effect in `ilasm`:\r\n\r\n```\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 )\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 )\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/219970532-43bc3876-6bbe-4800-9866-3b91d254ca68.png)\r\n\r\nBut in that case, `ildasm` decompiles it to:\r\n\r\n```\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 ) \r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 ) \r\n```\r\n\r\nWhich doesn\u0027t round-trip.\r\n\r\n### Reproduction Steps\r\n\r\nHere is a test file, `Test.il`:\r\n\r\n```\r\n.assembly extern mscorlib\r\n{\r\n\t.publickeytoken = ( b7 7a 5c 56 19 34 e0 89\t)\r\n\t.ver 4:0:0:0\r\n}\r\n.assembly Test\r\n{\r\n\t.hash algorithm 0x00008004 // SHA1\r\n\t.ver 1:0:0:0\r\n}\r\n\r\n.module Test.dll\r\n.imagebase 0x10000000\r\n.file alignment 0x00000200\r\n.stackreserve 0x00100000\r\n.subsystem 0x0003 // WindowsCui\r\n.corflags 0x00000001 // ILOnly\r\n\r\n.class private auto ansi \u0027\u003cModule\u003e\u0027\r\n{\r\n}\r\n\r\n.class public auto ansi beforefieldinit TestType\r\n    extends [mscorlib]System.Object\r\n\timplements ITestInterface\r\n{\r\n    .interfaceimpl type ITestInterface\r\n    .custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 )\r\n    .custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 )\r\n\r\n    .method public hidebysig specialname rtspecialname\r\n        instance void .ctor () cil managed\r\n    {\r\n        .maxstack 8\r\n\r\n        IL_0000: ldarg.0\r\n        IL_0001: call instance void [mscorlib]System.Object::.ctor()\r\n        IL_0006: ret\r\n    }\r\n}\r\n\r\n.class interface public auto ansi abstract ITestInterface\r\n{\r\n}\r\n\r\n.class public auto ansi beforefieldinit Test1Attribute\r\n    extends [mscorlib]System.Attribute\r\n{\r\n    .method public hidebysig specialname rtspecialname\r\n        instance void .ctor () cil managed\r\n    {\r\n        .maxstack 8\r\n\r\n        IL_0000: ldarg.0\r\n        IL_0001: call instance void [mscorlib]System.Attribute::.ctor()\r\n        IL_0006: ret\r\n    }\r\n}\r\n\r\n.class public auto ansi beforefieldinit Test2Attribute\r\n    extends [mscorlib]System.Attribute\r\n{\r\n    .method public hidebysig specialname rtspecialname\r\n        instance void .ctor () cil managed\r\n    {\r\n        .maxstack 8\r\n\r\n        IL_0000: ldarg.0\r\n        IL_0001: call instance void [mscorlib]System.Attribute::.ctor()\r\n        IL_0006: ret\r\n    }\r\n}\r\n```\r\n\r\n- Compile it with `ilasm /DLL Test.il`\r\n- Decompile it with `ildasm /OUT=TestOut.il Test.dll`\r\n\r\n\r\n### Expected behavior\r\n\r\n- Both `Test1Attribute` and `Test2Attribute` should be applied on the interface implementation (metadata table `09`: `InterfaceImpl`)\r\n- This shouldn\u0027t change when the code is round-tripped through `ilasm`/`ildasm`\r\n\r\n### Actual behavior\r\n\r\n- `Test1Attribute` is applied on the interface implementation (metadata table `09`: `InterfaceImpl`)\r\n- `Test2Attribute` is applied on the type definition (metadata table `02`: `TypeDef`)\r\n\r\n### Regression?\r\n\r\nNot as far as I can tell.\r\n\r\n### Known Workarounds\r\n\r\nRepeat `.interfaceimpl type` for each `.custom instance` to apply the custom attribute to the interface implementation.\r\n\r\nNo workaround for the round-trip inconsistency though.\r\n\r\n### Configuration\r\n\r\nTested with `ilasm`/`ildasm` from:\r\n- the current main: 5ac3de1a03020a49b1ff5ce5e41bce561fd20961\r\n- `Microsoft.NETCore.ILAsm`/`Microsoft.NETCore.ILDAsm` NuGet packages v6.0.0\r\n\r\n(why are the v7.0.0 packages empty BTW?)\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVpkXlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VmPew",
                                           "createdAt":  "2023-02-19T20:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI believe the following code:\r\n\r\n```\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 )\r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 )\r\n```\r\n\r\nis supposed to apply two attributes on the interface implementation.\r\n\r\nWhen round-tripped through `ilasm`/`ildasm`, this code is turned into:\r\n\r\n```\r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 ) \r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 ) \r\n```\r\n\r\nWhich means:\r\n\r\n- `Test1Attribute` is applied on the interface implementation (metadata table `09`)\r\n- `Test2Attribute` is applied on the type definition (metadata table `02`)\r\n\r\nThe `CustomAttribute` metadata table shows that `ildasm` is correct here:\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/219970280-37b9bd29-4d6c-4bfc-b574-52a0581e1977.png)\r\n\r\nIn addition, note that the following code produces the desired effect in `ilasm`:\r\n\r\n```\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 )\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 )\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/219970532-43bc3876-6bbe-4800-9866-3b91d254ca68.png)\r\n\r\nBut in that case, `ildasm` decompiles it to:\r\n\r\n```\r\n.interfaceimpl type ITestInterface\r\n.custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 ) \r\n.custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 ) \r\n```\r\n\r\nWhich doesn\u0027t round-trip.\r\n\r\n### Reproduction Steps\r\n\r\nHere is a test file, `Test.il`:\r\n\r\n```\r\n.assembly extern mscorlib\r\n{\r\n\t.publickeytoken = ( b7 7a 5c 56 19 34 e0 89\t)\r\n\t.ver 4:0:0:0\r\n}\r\n.assembly Test\r\n{\r\n\t.hash algorithm 0x00008004 // SHA1\r\n\t.ver 1:0:0:0\r\n}\r\n\r\n.module Test.dll\r\n.imagebase 0x10000000\r\n.file alignment 0x00000200\r\n.stackreserve 0x00100000\r\n.subsystem 0x0003 // WindowsCui\r\n.corflags 0x00000001 // ILOnly\r\n\r\n.class private auto ansi \u0027\u003cModule\u003e\u0027\r\n{\r\n}\r\n\r\n.class public auto ansi beforefieldinit TestType\r\n    extends [mscorlib]System.Object\r\n\timplements ITestInterface\r\n{\r\n    .interfaceimpl type ITestInterface\r\n    .custom instance void Test1Attribute::.ctor() = ( 01 00 00 00 )\r\n    .custom instance void Test2Attribute::.ctor() = ( 01 00 00 00 )\r\n\r\n    .method public hidebysig specialname rtspecialname\r\n        instance void .ctor () cil managed\r\n    {\r\n        .maxstack 8\r\n\r\n        IL_0000: ldarg.0\r\n        IL_0001: call instance void [mscorlib]System.Object::.ctor()\r\n        IL_0006: ret\r\n    }\r\n}\r\n\r\n.class interface public auto ansi abstract ITestInterface\r\n{\r\n}\r\n\r\n.class public auto ansi beforefieldinit Test1Attribute\r\n    extends [mscorlib]System.Attribute\r\n{\r\n    .method public hidebysig specialname rtspecialname\r\n        instance void .ctor () cil managed\r\n    {\r\n        .maxstack 8\r\n\r\n        IL_0000: ldarg.0\r\n        IL_0001: call instance void [mscorlib]System.Attribute::.ctor()\r\n        IL_0006: ret\r\n    }\r\n}\r\n\r\n.class public auto ansi beforefieldinit Test2Attribute\r\n    extends [mscorlib]System.Attribute\r\n{\r\n    .method public hidebysig specialname rtspecialname\r\n        instance void .ctor () cil managed\r\n    {\r\n        .maxstack 8\r\n\r\n        IL_0000: ldarg.0\r\n        IL_0001: call instance void [mscorlib]System.Attribute::.ctor()\r\n        IL_0006: ret\r\n    }\r\n}\r\n```\r\n\r\n- Compile it with `ilasm /DLL Test.il`\r\n- Decompile it with `ildasm /OUT=TestOut.il Test.dll`\r\n\r\n\r\n### Expected behavior\r\n\r\n- Both `Test1Attribute` and `Test2Attribute` should be applied on the interface implementation (metadata table `09`: `InterfaceImpl`)\r\n- This shouldn\u0027t change when the code is round-tripped through `ilasm`/`ildasm`\r\n\r\n### Actual behavior\r\n\r\n- `Test1Attribute` is applied on the interface implementation (metadata table `09`: `InterfaceImpl`)\r\n- `Test2Attribute` is applied on the type definition (metadata table `02`: `TypeDef`)\r\n\r\n### Regression?\r\n\r\nNot as far as I can tell.\r\n\r\n### Known Workarounds\r\n\r\nRepeat `.interfaceimpl type` for each `.custom instance` to apply the custom attribute to the interface implementation.\r\n\r\nNo workaround for the round-trip inconsistency though.\r\n\r\n### Configuration\r\n\r\nTested with `ilasm`/`ildasm` from:\r\n- the current main: 5ac3de1a03020a49b1ff5ce5e41bce561fd20961\r\n- `Microsoft.NETCore.ILAsm`/`Microsoft.NETCore.ILDAsm` NuGet packages v6.0.0\r\n\r\n(why are the v7.0.0 packages empty BTW?)\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eltrzesniewski\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-19T20:42:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WeibG",
                                           "createdAt":  "2023-03-01T21:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "cc @TIHan, PTAL. ",
                                           "updatedAt":  "2023-03-01T21:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WmReW",
                                           "createdAt":  "2023-03-03T02:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Will look at this tomorrow.",
                                           "updatedAt":  "2023-03-03T02:42:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ilasm does not apply multiple custom attributes on interface implementations",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83074",
        "createdAt":  "2023-03-07T07:37:47Z",
        "number":  83074,
        "author":  "LyricChuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:47:35Z",
        "body":  "Branch release/7.0\r\nTesting Mono runtime\r\nfollow the steps in PowerShell\r\n1）./build.cmd mono+libs                       **_#success_**\r\n2）./build.cmd clr.hosts -c debug           **_#success_**\r\n3）cd src/tests\r\n     ./build.cmd mono debug                   **_#success_**\r\n4）./run.cmd Debug                               **_#fail_**\r\n\r\nSummary\r\nTests run: 2191 — Failures: 3\r\n\r\nFailed tests\r\n ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd\r\nReturn code:      1\r\nRaw output file:      D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Reports\\\\ilasm.PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\\corerun.exe\\\"   IlasmPortablePdbTests.dll \r\n\r\nAssembling \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.dll\u0027\r\nSource file is UTF-8\r\n\r\nAssembled method TestPdbDebugDirectoryType::Foo\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:TestPdbDebugDirectoryType\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nFailed to write output file, error code=0x80070020\r\n\r\nWriting PDB file: D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.pdb\r\n\r\n***** FAILURE ***** \r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTesterCommon.cs:line 48\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTester.cs:line 38\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\XUnitWrapperGenerator\\\\XUnitWrapperGenerator.XUnitWrapperGenerator\\\\SimpleRunner.g.cs:line 3\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\r\n\u003e D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd\r\nExpected: True\r\nActual:   False\r\n   at ilasm_PortablePdb._IlasmPortablePdbTests_IlasmPortablePdbTests_._IlasmPortablePdbTests_IlasmPortablePdbTests_cmd() in D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\TestWrappers\\ilasm.PortablePdb\\ilasm.PortablePdb.XUnitWrapper.cs:line 149\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\nOutput:\r\nReturn code:      1\r\nRaw output file:      D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Reports\\ilasm.PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\"   IlasmPortablePdbTests.dll \r\n\r\nAssembling \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.dll\u0027\r\nSource file is UTF-8\r\n\r\nAssembled method TestPdbDebugDirectoryType::Foo\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:TestPdbDebugDirectoryType\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nFailed to write output file, error code=0x80070020\r\nWriting PDB file: D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.pdb\r\n\r\n***** FAILURE ***** \r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTesterCommon.cs:line 48\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTester.cs:line 38\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\XUnitWrapperGenerator\\XUnitWrapperGenerator.XUnitWrapperGenerator\\SimpleRunner.g.cs:line 3\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\r\n\u003e D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.cmd\r\nTraits:\r\nTestGroup\tilasm.PortablePdb\r\n\r\n======================================================================================\r\n\r\nilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd_windows_x64_Debug.cmd\r\nReturn code:      1\r\nRaw output file:      D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Reports\\\\ilasm.PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd_windows_x64_Debug.output.txt\r\nRaw output:\r\nCore_Root is set to: \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\"\r\ncall D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\\\\\PortablePdb\\\\\\\\IlasmPortablePdbTests\\\\\\\\IlasmPortablePdbTests.cmd\r\nBEGIN EXECUTION \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\\corerun.exe\\\"   IlasmPortablePdbTests.dll \r\n\r\nAssembling \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.dll\u0027\r\nSource file is UTF-8\r\n\r\nAssembled method TestPdbDebugDirectoryType::Foo\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:TestPdbDebugDirectoryType\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nWriting PDB file: D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.pdb\r\nFailed to write PDB file, error code=0x80070020\r\n***** FAILURE ***** \r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTesterCommon.cs:line 48\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTester.cs:line 38\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\XUnitWrapperGenerator\\\\XUnitWrapperGenerator.XUnitWrapperGenerator\\\\SimpleRunner.g.cs:line 3\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\r\n\u003e D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd_windows_x64_Debug.cmd\r\nExpected: True\r\nActual:   False\r\n   at ilasm_PortablePdb._IlasmPortablePdbTests_IlasmPortablePdbTests__windows_x64_Debug_._IlasmPortablePdbTests_IlasmPortablePdbTests_cmd_windows_x64_Debug_cmd() in D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\TestWrappers\\ilasm.PortablePdb\\ilasm.PortablePdb.XUnitWrapper.cs:line 248\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\nOutput:\r\nReturn code:      1\r\nRaw output file:      D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Reports\\ilasm.PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.cmd_windows_x64_Debug.output.txt\r\nRaw output:\r\nCore_Root is set to: \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\"\r\ncall D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd\r\nBEGIN EXECUTION\r\n \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\"   IlasmPortablePdbTests.dll \r\n\r\nAssembling \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.dll\u0027\r\nSource file is UTF-8\r\n\r\nAssembled method TestPdbDebugDirectoryType::Foo\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:TestPdbDebugDirectoryType\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nWriting PDB file: D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.pdb\r\nFailed to write PDB file, error code=0x80070020\r\n\r\n***** FAILURE ***** \r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTesterCommon.cs:line 48\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTester.cs:line 38\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\XUnitWrapperGenerator\\XUnitWrapperGenerator.XUnitWrapperGenerator\\SimpleRunner.g.cs:line 3\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\r\n\u003e D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.cmd_windows_x64_Debug.cmd\r\nTraits:\r\nTestGroup\tilasm.PortablePdb\r\n\r\n======================================================================================\r\n\r\nilasm\\\\System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd_windows_x64_Debug.cmd\r\n\r\nReturn code:      1\r\nRaw output file:      D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Reports\\\\ilasm.System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd_windows_x64_Debug.output.txt\r\nRaw output:\r\nCore_Root is set to: \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\"\r\ncall D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\\\\\System\\\\\\\\Runtime\\\\\\\\CompilerServices\\\\\\\\MethodImplOptionsTests\\\\\\\\MethodImplOptionsTests.cmd\r\nBEGIN EXECUTION\r\n\\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\\corerun.exe\\\"   MethodImplOptionsTests.dll \r\nAggressiveOptimizationTest\r\n\r\nAssembling \u0027MiAggressiveOptimization.il\u0027  to DLL --\u003e \u0027MiAggressiveOptimization.dll\u0027\r\nSource file is UTF-8\r\nSource file is UTF-8\r\nSource file is UTF-8\r\nAssembled method Program::Main\r\nCreating PE file\r\nEmitting classes:\r\nClass 1:Program\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nFailed to write output file, error code=0x80070020\r\n\r\n***** FAILURE ***** \r\nilasm failed with exit code: 1\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\r\n\u003e D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd_windows_x64_Debug.cmd\r\nExpected: True\r\nActual:   False\r\n   at ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests__windows_x64_Debug_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_cmd_windows_x64_Debug_cmd() in D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\TestWrappers\\ilasm.System\\ilasm.System.XUnitWrapper.cs:line 248\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\nOutput:\r\nReturn code:      1\r\nRaw output file:      D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Reports\\ilasm.System\\Runtime\\CompilerServices\\MethodImplOptionsTests\\MethodImplOptionsTests.cmd_windows_x64_Debug.output.txt\r\nRaw output:\r\nCore_Root is set to: \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\"\r\ncall D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\\\System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd\r\nBEGIN EXECUTION\r\n \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\"   MethodImplOptionsTests.dll \r\nAggressiveOptimizationTest\r\n\r\nAssembling \u0027MiAggressiveOptimization.il\u0027  to DLL --\u003e \u0027MiAggressiveOptimization.dll\u0027\r\nSource file is UTF-8\r\n\r\nSource file is UTF-8\r\n\r\nSource file is UTF-8\r\n\r\nAssembled method Program::Main\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:Program\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nFailed to write output file, error code=0x80070020\r\n\r\n***** FAILURE ***** \r\nilasm failed with exit code: 1\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\r\n\u003e D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\System\\Runtime\\CompilerServices\\MethodImplOptionsTests\\MethodImplOptionsTests.cmd_windows_x64_Debug.cmd\r\nTraits:\r\nTestGroup\tilasm.System\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVuKqcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5W4qA9",
                                           "createdAt":  "2023-03-07T07:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBranch release/7.0\r\nTesting Mono runtime\r\nfollow the steps in PowerShell\r\n1）./build.cmd mono+libs                       #success\r\n2）./build.cmd clr.hosts -c debug           #success\r\n3）cd src/tests\r\n     ./build.cmd mono debug                   #success\r\n4）./run.cmd Debug                               #fail\r\n\r\nSummary\r\nTests run: 2191 — Failures: 3\r\n\r\nFailed tests\r\n ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd\r\n\\r\\nReturn code:      1\\r\\nRaw output file:      D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Reports\\\\ilasm.PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.output.txt\\r\\nRaw output:\\r\\nBEGIN EXECUTION\\r\\n \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\\corerun.exe\\\"   IlasmPortablePdbTests.dll \\r\\n\\r\\nAssembling \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.dll\u0027\\r\\nSource file is UTF-8\\r\\n\\r\\nAssembled method TestPdbDebugDirectoryType::Foo\\r\\nCreating PE file\\r\\n\\r\\nEmitting classes:\\r\\nClass 1:TestPdbDebugDirectoryType\\r\\n\\r\\nEmitting fields and methods:\\r\\nGlobal \\r\\nClass 1Methods: 1;\\r\\n\\r\\nEmitting events and properties:\\r\\nGlobal \\r\\nClass 1\\r\\nWriting PE file\\r\\nFailed to write output file, error code=0x80070020\\r\\nWriting PDB file: D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.pdb\\r\\n\\r\\n***** FAILURE ***** \\r\\nXunit.Sdk.EqualException: Assert.Equal() Failure\\r\\nExpected: 0\\r\\nActual:   1\\r\\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\\r\\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\\r\\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTesterCommon.cs:line 48\\r\\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTester.cs:line 38\\r\\n   at Program.\u003cMain\u003e$(String[] args) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\XUnitWrapperGenerator\\\\XUnitWrapperGenerator.XUnitWrapperGenerator\\\\SimpleRunner.g.cs:line 3\\r\\nExpected: 100\\r\\nActual: 101\\r\\nEND EXECUTION - FAILED\\r\\nFAILED\\r\\nTest Harness Exitcode is : 1\\r\\nTo run the test:\\r\\n\u003e set CORE_ROOT=D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\r\\n\u003e D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd\\r\\nExpected: True\\r\\nActual:   False\r\n   at ilasm_PortablePdb._IlasmPortablePdbTests_IlasmPortablePdbTests_._IlasmPortablePdbTests_IlasmPortablePdbTests_cmd() in D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\TestWrappers\\ilasm.PortablePdb\\ilasm.PortablePdb.XUnitWrapper.cs:line 149\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\nOutput:\r\nReturn code:      1\r\nRaw output file:      D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Reports\\ilasm.PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\"   IlasmPortablePdbTests.dll \r\n\r\nAssembling \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.dll\u0027\r\nSource file is UTF-8\r\n\r\nAssembled method TestPdbDebugDirectoryType::Foo\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:TestPdbDebugDirectoryType\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nFailed to write output file, error code=0x80070020\r\nWriting PDB file: D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.pdb\r\n\r\n***** FAILURE ***** \r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTesterCommon.cs:line 48\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTester.cs:line 38\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\XUnitWrapperGenerator\\XUnitWrapperGenerator.XUnitWrapperGenerator\\SimpleRunner.g.cs:line 3\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\r\n\u003e D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.cmd\r\nTraits:\r\nTestGroup\tilasm.PortablePdb\r\n\r\n======================================================================================\r\n\r\nilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd_windows_x64_Debug.cmd\r\n\\r\\nReturn code:      1\\r\\nRaw output file:      D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Reports\\\\ilasm.PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd_windows_x64_Debug.output.txt\\r\\nRaw output:\\r\\nCore_Root is set to: \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\"\\r\\ncall D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\\\\\PortablePdb\\\\\\\\IlasmPortablePdbTests\\\\\\\\IlasmPortablePdbTests.cmd\\r\\nBEGIN EXECUTION\\r\\n \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\\corerun.exe\\\"   IlasmPortablePdbTests.dll \\r\\n\\r\\nAssembling \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.dll\u0027\\r\\nSource file is UTF-8\\r\\n\\r\\nAssembled method TestPdbDebugDirectoryType::Foo\\r\\nCreating PE file\\r\\n\\r\\nEmitting classes:\\r\\nClass 1:TestPdbDebugDirectoryType\\r\\n\\r\\nEmitting fields and methods:\\r\\nGlobal \\r\\nClass 1Methods: 1;\\r\\n\\r\\nEmitting events and properties:\\r\\nGlobal \\r\\nClass 1\\r\\nWriting PE file\\r\\nWriting PDB file: D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\TestFiles\\\\TestPdbDebugDirectory1.pdb\\r\\nFailed to write PDB file, error code=0x80070020\\r\\n\\r\\n***** FAILURE ***** \\r\\nXunit.Sdk.EqualException: Assert.Equal() Failure\\r\\nExpected: 0\\r\\nActual:   1\\r\\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\\r\\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\\r\\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTesterCommon.cs:line 48\\r\\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTester.cs:line 38\\r\\n   at Program.\u003cMain\u003e$(String[] args) in D:\\\\Work_DotNet\\\\runtime\\\\src\\\\tests\\\\ilasm\\\\PortablePdb\\\\XUnitWrapperGenerator\\\\XUnitWrapperGenerator.XUnitWrapperGenerator\\\\SimpleRunner.g.cs:line 3\\r\\nExpected: 100\\r\\nActual: 101\\r\\nEND EXECUTION - FAILED\\r\\nFAILED\\r\\nTest Harness Exitcode is : 1\\r\\nTo run the test:\\r\\n\u003e set CORE_ROOT=D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\r\\n\u003e D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd_windows_x64_Debug.cmd\\r\\nExpected: True\\r\\nActual:   False\r\n   at ilasm_PortablePdb._IlasmPortablePdbTests_IlasmPortablePdbTests__windows_x64_Debug_._IlasmPortablePdbTests_IlasmPortablePdbTests_cmd_windows_x64_Debug_cmd() in D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\TestWrappers\\ilasm.PortablePdb\\ilasm.PortablePdb.XUnitWrapper.cs:line 248\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\nOutput:\r\nReturn code:      1\r\nRaw output file:      D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Reports\\ilasm.PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.cmd_windows_x64_Debug.output.txt\r\nRaw output:\r\nCore_Root is set to: \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\"\r\ncall D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\\\PortablePdb\\\\IlasmPortablePdbTests\\\\IlasmPortablePdbTests.cmd\r\nBEGIN EXECUTION\r\n \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\"   IlasmPortablePdbTests.dll \r\n\r\nAssembling \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.il\u0027  to DLL --\u003e \u0027D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.dll\u0027\r\nSource file is UTF-8\r\n\r\nAssembled method TestPdbDebugDirectoryType::Foo\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:TestPdbDebugDirectoryType\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nWriting PDB file: D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\TestFiles\\TestPdbDebugDirectory1.pdb\r\nFailed to write PDB file, error code=0x80070020\r\n\r\n***** FAILURE ***** \r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual, IEqualityComparer`1 comparer) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 101\r\n   at Xunit.Assert.Equal[Int32](Int32 expected, Int32 actual) in /_/src/xunit.assert/Asserts/EqualityAsserts.cs:line 63\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTesterCommon.Assemble(String ilasmFullPath, String ilSrc, String testDir, String\u0026 dll, String\u0026 pdb) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTesterCommon.cs:line 48\r\n   at IlasmPortablePdbTests.IlasmPortablePdbTester.TestPortablePdbDebugDirectory(String ilSource) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\IlasmPortablePdbTester.cs:line 38\r\n   at Program.\u003cMain\u003e$(String[] args) in D:\\Work_DotNet\\runtime\\src\\tests\\ilasm\\PortablePdb\\XUnitWrapperGenerator\\XUnitWrapperGenerator.XUnitWrapperGenerator\\SimpleRunner.g.cs:line 3\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\r\n\u003e D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\PortablePdb\\IlasmPortablePdbTests\\IlasmPortablePdbTests.cmd_windows_x64_Debug.cmd\r\nTraits:\r\nTestGroup\tilasm.PortablePdb\r\n\r\n======================================================================================\r\n\r\nilasm\\\\System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd_windows_x64_Debug.cmd\r\n\\r\\nReturn code:      1\\r\\nRaw output file:      D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Reports\\\\ilasm.System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd_windows_x64_Debug.output.txt\\r\\nRaw output:\\r\\nCore_Root is set to: \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\"\\r\\ncall D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\\\\\System\\\\\\\\Runtime\\\\\\\\CompilerServices\\\\\\\\MethodImplOptionsTests\\\\\\\\MethodImplOptionsTests.cmd\\r\\nBEGIN EXECUTION\\r\\n \\\"D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\\\corerun.exe\\\"   MethodImplOptionsTests.dll \\r\\nAggressiveOptimizationTest\\r\\n\\r\\nAssembling \u0027MiAggressiveOptimization.il\u0027  to DLL --\u003e \u0027MiAggressiveOptimization.dll\u0027\\r\\nSource file is UTF-8\\r\\n\\r\\nSource file is UTF-8\\r\\n\\r\\nSource file is UTF-8\\r\\n\\r\\nAssembled method Program::Main\\r\\nCreating PE file\\r\\n\\r\\nEmitting classes:\\r\\nClass 1:Program\\r\\n\\r\\nEmitting fields and methods:\\r\\nGlobal \\r\\nClass 1Methods: 1;\\r\\n\\r\\nEmitting events and properties:\\r\\nGlobal \\r\\nClass 1\\r\\nWriting PE file\\r\\nFailed to write output file, error code=0x80070020\\r\\n\\r\\n***** FAILURE ***** \\r\\nilasm failed with exit code: 1\\r\\nExpected: 100\\r\\nActual: 101\\r\\nEND EXECUTION - FAILED\\r\\nFAILED\\r\\nTest Harness Exitcode is : 1\\r\\nTo run the test:\\r\\n\u003e set CORE_ROOT=D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\Tests\\\\Core_Root\\r\\n\u003e D:\\\\Work_DotNet\\\\runtime\\\\artifacts\\\\tests\\\\coreclr\\\\windows.x64.Debug\\\\ilasm\\\\System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd_windows_x64_Debug.cmd\\r\\nExpected: True\\r\\nActual:   False\r\n   at ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests__windows_x64_Debug_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_cmd_windows_x64_Debug_cmd() in D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\TestWrappers\\ilasm.System\\ilasm.System.XUnitWrapper.cs:line 248\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\nOutput:\r\nReturn code:      1\r\nRaw output file:      D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Reports\\ilasm.System\\Runtime\\CompilerServices\\MethodImplOptionsTests\\MethodImplOptionsTests.cmd_windows_x64_Debug.output.txt\r\nRaw output:\r\nCore_Root is set to: \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\"\r\ncall D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\\\System\\\\Runtime\\\\CompilerServices\\\\MethodImplOptionsTests\\\\MethodImplOptionsTests.cmd\r\nBEGIN EXECUTION\r\n \"D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\\corerun.exe\"   MethodImplOptionsTests.dll \r\nAggressiveOptimizationTest\r\n\r\nAssembling \u0027MiAggressiveOptimization.il\u0027  to DLL --\u003e \u0027MiAggressiveOptimization.dll\u0027\r\nSource file is UTF-8\r\n\r\nSource file is UTF-8\r\n\r\nSource file is UTF-8\r\n\r\nAssembled method Program::Main\r\nCreating PE file\r\n\r\nEmitting classes:\r\nClass 1:Program\r\n\r\nEmitting fields and methods:\r\nGlobal \r\nClass 1Methods: 1;\r\n\r\nEmitting events and properties:\r\nGlobal \r\nClass 1\r\nWriting PE file\r\nFailed to write output file, error code=0x80070020\r\n\r\n***** FAILURE ***** \r\nilasm failed with exit code: 1\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\u003e set CORE_ROOT=D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\Tests\\Core_Root\r\n\u003e D:\\Work_DotNet\\runtime\\artifacts\\tests\\coreclr\\windows.x64.Debug\\ilasm\\System\\Runtime\\CompilerServices\\MethodImplOptionsTests\\MethodImplOptionsTests.cmd_windows_x64_Debug.cmd\r\nTraits:\r\nTestGroup\tilasm.System\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLyricChuan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-07T07:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W4qpy",
                                           "createdAt":  "2023-03-07T07:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LyricChuan",
                                           "body":  "Testing Libraries\r\nfollow the steps in PowerShell                                                \r\n1）./build.cmd -subset clr+libs -rc Release                                **_#success_**\r\n2）./build.cmd -subset mono+libs -rc Release                          **_#success_**\r\n3）./build.cmd -subset libs.tests                                                **_#success_**\r\n4）./build.cmd -subset libs.tests -test -testnobuild                   **_#fail_**\r\n\r\n\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Sys\r\ntem.DirectoryServices.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\System.DirectoryServices.Tests\\Debug\\ne\r\nt7.0-windows\\testResults.xml for details! [D:\\Work_DotNet\\runtime\\src\\libraries\\System.DirectoryServices\\tests\\System.D\r\nirectoryServices.Tests.csproj::TargetFramework=net7.0-windows]\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Sys\r\ntem.Drawing.Common.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\System.Drawing.Common.Tests\\Debug\\net7.0-w\r\nindows\\testResults.xml for details! [D:\\Work_DotNet\\runtime\\src\\libraries\\System.Drawing.Common\\tests\\System.Drawing.Co\r\nmmon.Tests.csproj::TargetFramework=net7.0-windows]\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Sys\r\ntem.Diagnostics.Process.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\System.Diagnostics.Process.Tests\\Debu\r\ng\\net7.0-windows\\testResults.xml for details! [D:\\Work_DotNet\\runtime\\src\\libraries\\System.Diagnostics.Process\\tests\\Sy\r\nstem.Diagnostics.Process.Tests.csproj::TargetFramework=net7.0-windows]\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Sys\r\ntem.Net.Quic.Functional.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\System.Net.Quic.Functional.Tests\\Debu\r\ng\\net7.0-windows\\testResults.xml for details! [D:\\Work_DotNet\\runtime\\src\\libraries\\System.Net.Quic\\tests\\FunctionalTes\r\nts\\System.Net.Quic.Functional.Tests.csproj::TargetFramework=net7.0-windows]\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Mic\r\nrosoft.Extensions.FileProviders.Physical.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\Microsoft.Extensions\r\n.FileProviders.Physical.Tests\\Debug\\net7.0\\testResults.xml for details! [D:\\Work_DotNet\\runtime\\src\\libraries\\Microsoft\r\n.Extensions.FileProviders.Physical\\tests\\Microsoft.Extensions.FileProviders.Physical.Tests.csproj::TargetFramework=net7\r\n.0]\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Lib\r\nraryImportGenerator.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\LibraryImportGenerator.Tests\\Debug\\net7.0\r\n\\testResults.xml for details! [D:\\Work_DotNet\\runtime\\src\\libraries\\System.Runtime.InteropServices\\tests\\LibraryImportG\r\nenerator.Tests\\LibraryImportGenerator.Tests.csproj]\r\nD:\\Work_DotNet\\runtime\\eng\\testing\\tests.targets(181,5): error : One or more tests failed while running tests from \u0027Icu\r\nAppLocal.Tests\u0027. Please check D:\\Work_DotNet\\runtime\\artifacts\\bin\\IcuAppLocal.Tests\\Debug\\net7.0\\testResults.xml for d\r\netails! [D:\\Work_DotNet\\runtime\\src\\libraries\\System.Globalization\\tests\\IcuAppLocal\\IcuAppLocal.Tests.csproj]\r\n    0 warning\r\n    7 error\r\n\r\nBuild failed with exit code 1. Check errors above.\r\nSome builds failed:\r\n        Configuration: Debug, Architecture: x64",
                                           "updatedAt":  "2023-03-07T09:30:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Testing Mono runtime and Testing Libraries failed on Windows X64",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83254",
        "createdAt":  "2023-03-10T10:59:10Z",
        "number":  83254,
        "author":  "bnago",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-15T18:27:21Z",
        "body":  "According to the [documentation](https://learn.microsoft.com/en-us/dotnet/framework/tools/ildasm-exe-il-disassembler):\r\n\r\n    If you provide Ildasm.exe with a PEfilename argument that contains embedded resources, the tool produces multiple output files: a text file that contains IL code and, for each embedded managed resource, a .resources file produced using the resource\u0027s name from metadata.\r\n\r\nRunning the command \"ildasm inputfile.dll -out=outputfile.il\" on Windows outputs .il file and resource files as expected. Running the same on WSL Ubuntu22.04 outputs only .il file.\r\nIs this behavior expected/documented?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj-3Gcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XPUiH",
                                           "createdAt":  "2023-03-10T10:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAccording to the [documentation](https://learn.microsoft.com/en-us/dotnet/framework/tools/ildasm-exe-il-disassembler):\r\n\r\n    If you provide Ildasm.exe with a PEfilename argument that contains embedded resources, the tool produces multiple output files: a text file that contains IL code and, for each embedded managed resource, a .resources file produced using the resource\u0027s name from metadata.\r\n\r\nRunning the command \"ildasm inputfile.dll -out=outputfile.il\" on Windows outputs .il file and resource files as expected. Running the same on WSL Ubuntu22.04 outputs only .il file.\r\nIs this behavior expected/documented?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebnago\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-ILTools-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-10T10:59:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XSAKo",
                                           "createdAt":  "2023-03-10T19:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3nWkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TIHan",
                                                                               "createdAt":  "2023-03-10T20:23:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "cc @TIHan PTAL.",
                                           "updatedAt":  "2023-03-10T19:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P7cZz",
                                           "createdAt":  "2024-10-15T18:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Reassigned to @amanasifkhalid. ",
                                           "updatedAt":  "2024-10-15T18:27:19Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Ildasm on Ubuntu does not output resource files",
        "labels":  [
                       "area-ILTools-coreclr",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116204",
        "createdAt":  "2025-06-02T08:01:19Z",
        "number":  116204,
        "author":  "dariogriffo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDOYKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2025-06-02T18:34:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2025-06-02T18:43:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scorpion28",
                                            "createdAt":  "2025-06-02T19:15:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aymenhta",
                                            "createdAt":  "2025-06-02T22:52:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sanamhub",
                                            "createdAt":  "2025-06-03T05:57:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elfpie",
                                            "createdAt":  "2025-06-03T19:10:21Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-06-20T16:18:40Z",
        "body":  "Propose to include the IL Disassembler (ILDasm) directly within the .NET SDK for Linux distributions.\n\nCurrently, Linux users need to install ILDasm separately via a NuGet package [runtime.linux-x64.Microsoft.NETCore.ILDAsm]. Bundling it with the SDK would make this essential tool readily available for developers.\n\nILDasm is a vital tool, letting us inspect the Intermediate Language (IL) of assemblies. On Linux, this is especially helpful for:\n\n- Debugging \u0026 Diagnostics: Quickly understanding how code translates to IL helps fix bugs and performance issues.\n- Learning \u0026 Education: It\u0027s a great way for new .NET developers on Linux to understand how things work under the hood.\n\n_Benefits_\n\n- Better Developer Experience: Instant access to a key diagnostic tool on Linux.\n- Less Setup Friction: Reduces an extra step, for linux users who want to get started with .NET\n- Increased Productivity: Faster debugging and analysis for Linux-targeted apps.\n\n_Things to Consider_\n\n- Maintenance: The .NET SDK team would handle its distribution, potentially simplifying updates for Linux users.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOslkMfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6umrG3",
                                           "createdAt":  "2025-06-02T08:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-02T08:17:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6umsiz",
                                           "createdAt":  "2025-06-02T08:19:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVCF1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dariogriffo",
                                                                               "createdAt":  "2025-06-02T08:39:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sanamhub",
                                                                               "createdAt":  "2025-06-03T05:56:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "This is not specific to Linux. The ildasm from .NET Framework SDK on Windows is outdated and doesn\u0027t understand new constructs.",
                                           "updatedAt":  "2025-06-02T08:19:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6unADm",
                                           "createdAt":  "2025-06-02T08:39:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dariogriffo",
                                           "body":  "\u003e This is not specific to Linux. The ildasm from .NET Framework SDK on Windows is outdated and doesn\u0027t understand new constructs.\n\nProbably both can be addressed together, but as of today the linux sdk does not have the ildasm at all",
                                           "updatedAt":  "2025-06-02T08:39:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uuaKL",
                                           "createdAt":  "2025-06-02T16:03:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reflectronic",
                                           "body":  "For the overwhelming majority of .NET developers who don\u0027t need these tools, putting ilasm and ildasm into the SDK directly is wasted disk space.  \n\nPublishing the Microsoft ilasm and ildasm as .NET tools (https://github.com/dotnet/runtime/issues/13823) is a less complicated way of making them accessible. It would require some work in the SDK, since .NET tools currently must be .NET programs, and ilasm and ildasm are written in C++. But, it seems like they are planning to lift this limitation (https://github.com/dotnet/sdk/issues/40931).",
                                           "updatedAt":  "2025-06-02T16:03:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uzUPk",
                                           "createdAt":  "2025-06-02T22:12:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Washi1337",
                                           "body":  "I agree ilasm/ildasm are tools that can be incredibly useful. However, as someone that mains Linux and has worked for many years on a daily basis with .NET binaries on many levels of abstraction (from raw PE to .NET metadata and CIL), I don\u0027t think they have been _vital_ for my developer\u0027s workflow. While I acknowledge my experiences are purely anecdotal, I hardly ever use or need them and I would guess the average C# developer cares even less about viewing their CIL. In the rare event that I do need something like ildasm, there are options available in `dotnet tool` or third parties like ILSpy / CSharpRepl / sharplab / godbolt. \n\nAn updated .NET tool installable via `dotnet tool install` would be nice to have though (the current one under the name `dotnet-ildasm` afaik is not maintained by MS / the dotnet team).",
                                           "updatedAt":  "2025-06-02T22:15:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xesM7",
                                           "createdAt":  "2025-06-16T18:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amanasifkhalid",
                                           "body":  "I agree with @reflectronic\u0027s points. @dariogriffo would having a .NET tool be a sufficient improvement over your current workflow?",
                                           "updatedAt":  "2025-06-16T18:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yWQx9",
                                           "createdAt":  "2025-06-20T16:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dariogriffo",
                                           "body":  "\u003e I agree with [@reflectronic](https://github.com/reflectronic)\u0027s points. [@dariogriffo](https://github.com/dariogriffo) would having a .NET tool be a sufficient improvement over your current workflow?\n\nI think a dotnet tool should suffice, it is important then to make sure this comes as first result on searches and in the docs.\nSince at the moment there is non official tool suggested when doing Google search or in any LLM",
                                           "updatedAt":  "2025-06-20T16:18:40Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Proposal: Integrate ILDasm Directly into .NET SDK for Linux Distributions",
        "labels":  [
                       "area-ILTools-coreclr"
                   ]
    }
]
