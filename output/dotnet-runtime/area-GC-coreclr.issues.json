[
    {
        "url":  "https://github.com/dotnet/runtime/issues/4024",
        "createdAt":  "2015-03-06T19:21:19Z",
        "number":  4024,
        "author":  "ala53",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrU2VQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vbfox",
                                            "createdAt":  "2016-06-16T13:37:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xen2",
                                            "createdAt":  "2016-07-07T11:17:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephenmcd1",
                                            "createdAt":  "2016-09-13T22:02:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m0sa",
                                            "createdAt":  "2016-09-29T12:39:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fiigii",
                                            "createdAt":  "2016-11-07T23:30:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "XaveScor",
                                            "createdAt":  "2016-12-07T16:28:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2017-04-08T18:25:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chinhodado",
                                            "createdAt":  "2017-05-09T16:56:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksuo",
                                            "createdAt":  "2018-06-06T17:33:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "worldbeater",
                                            "createdAt":  "2018-12-07T19:43:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "github-john-doe",
                                            "createdAt":  "2020-02-05T19:14:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "playXE",
                                            "createdAt":  "2020-08-14T16:03:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-12-07T20:10:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2021-10-11T17:25:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryuuc",
                                            "createdAt":  "2022-03-16T12:10:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hueifeng",
                                            "createdAt":  "2022-11-06T13:24:31Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2022-02-22T18:34:22Z",
        "body":  "Per (the nightmarish) PR dotnet/coreclr#403, it was recommended I open an issue to discuss reorganizing gc.cpp.\n\nFor those that aren\u0027t familiar, gc.cpp is a 36,000 line file which seems to contain the entire garbage collector and gcpriv.h is a 4,000 line header which seems to correspond to gc.cpp.\n\nSo, what would be the best way to split gc.cpp into its components.\n\nWe could split by function: allocator/ mark phase / sweep phase / deallocator / etc.\nWe could split by class: gcstatistics / gcmechanisms / gcallocator / etc.\nWe could split into allocator, deallocator, and garbage collector.\nOr something not mentioned here...\n\nWhat I\u0027ve identified so far:\n- There are 11 commented `#defines` for the same function (dprintf).\n- max_generation, something seemingly globally needed, is a private enum hidden in gc.h.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPnimFw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NjQ3OTY2",
                                           "createdAt":  "2015-03-06T22:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "FYI - @Maoni0 \n",
                                           "updatedAt":  "2015-03-06T22:27:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzYzOTg5",
                                           "createdAt":  "2015-03-08T17:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lucasmeijer",
                                           "body":  "fwiw, imo it would be very beneficial to the understanding of newcomers to the code to split up gc.cpp into different seperately digestible parts. It\u0027s a complicated beast, and a 1mb+ cpp file is really not helping :).    @ala53 is not the only one who has run into this problem.\n",
                                           "updatedAt":  "2015-03-08T17:48:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzY5NTQ2",
                                           "createdAt":  "2015-03-08T19:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "@lucasmeijer, @ala53  suggested a few different approaches. Do any of those resonate with you, or you\u0027ll wait and see as the conversation progresses? \n",
                                           "updatedAt":  "2015-03-08T19:34:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NzcxMDYy",
                                           "createdAt":  "2015-03-08T20:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lucasmeijer",
                                           "body":  "@richlander, I don\u0027t have a good enough overview yet to have an opinion on how to best split it up.  I mostly added my comment because https://github.com/dotnet/coreclr/pull/403 was closed with the reason \"we wont do PR\u0027s that just move stuff around\".  this code could definitely use some moving around :).   how to do it in a way that conceptually makes sense, and does not regress on performance is something I hope others will have good opinions on.\n",
                                           "updatedAt":  "2015-03-08T20:05:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTIyMzU5",
                                           "createdAt":  "2015-03-09T19:16:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVLhxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "vbfox",
                                                                               "createdAt":  "2016-06-16T13:38:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Oceanswave",
                                                                               "createdAt":  "2016-06-16T17:37:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2016-06-16T18:58:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "LeanderK",
                                                                               "createdAt":  "2017-03-24T17:04:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "MarcSteene",
                                                                               "createdAt":  "2017-03-24T17:05:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScatteredRay",
                                                                               "createdAt":  "2017-03-24T20:20:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chinhodado",
                                                                               "createdAt":  "2017-05-09T16:58:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ghuntley",
                                                                               "createdAt":  "2018-06-07T08:41:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "griwes",
                                                                               "createdAt":  "2019-01-30T07:32:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "rajsite",
                                                                               "createdAt":  "2019-02-01T05:19:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2019-02-18T07:07:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "github-john-doe",
                                                                               "createdAt":  "2020-02-05T19:15:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "DustinKingen",
                                                                               "createdAt":  "2020-05-26T00:12:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "maxious",
                                                                               "createdAt":  "2020-05-26T00:34:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "amzuko",
                                                                               "createdAt":  "2020-05-26T00:59:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gergoerdi",
                                                                               "createdAt":  "2020-05-26T01:40:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "TomasHubelbauer",
                                                                               "createdAt":  "2020-05-26T05:06:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "alex-min",
                                                                               "createdAt":  "2020-05-26T06:10:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sesm",
                                                                               "createdAt":  "2020-05-26T10:17:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nlieb",
                                                                               "createdAt":  "2020-05-26T19:22:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "inikulin",
                                                                               "createdAt":  "2020-10-31T19:52:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "celluj34",
                                                                               "createdAt":  "2021-01-14T20:37:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Timmmm",
                                                                               "createdAt":  "2021-01-14T20:42:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-03-21T16:41:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2021-07-05T12:11:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2021-10-11T17:27:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "axvr",
                                                                               "createdAt":  "2024-12-24T11:06:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-06-03T19:53:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  28
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "Hi @ala53, I really appreciate your interest in the GC, but we would prefer not to take these kinds of source file refactoring changes. We’ve had the current structure since CLR started so it is familiar and efficient for those who have worked on it the most. From the guidelines:\n\n**please do give priority to the current style of the project or file you\u0027re changing**\n\nAlso splitting up code into multiple files, as Brian pointed out in your PR, would fall under ‘formatting changes’ guidelines:\n\n**Formatting changes**\n\n**Because the code is mirrored with our internal source control system we would like to keep these kinds of changes to a minimum to avoid unnecessary merge conflicts … formatting changes are likely going to be turned down.**\n\nThe dprintf macros you pointed out are strictly only for logging. I left multiple versions there because I use different versions for different things all the time. If you want to add a comment that explains why these different versions are there, that type of change could improve clarity while having very low impact on other branches and we could take it. \n\nI hope this isn’t too discouraging. In the future we can discuss other proposed changes in github issues to avoid investing time in changes we are unlikely to accept.\n",
                                           "updatedAt":  "2015-03-09T19:16:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTMzMzE2",
                                           "createdAt":  "2015-03-09T20:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVLhwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyplo",
                                                                               "createdAt":  "2017-04-11T06:06:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-06-03T19:53:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hbarrington",
                                           "body":  "@Maoni0 not to beat a dead horse, but is there any kind of internal effort at Microsoft to break this up? I understand merge conflicts increase if lots of outside developers are reorganizing code, but it is incredibly hard to read. I\u0027d be surprised if internal teams actually _preferred_ this one-file structure.\n",
                                           "updatedAt":  "2015-03-09T20:19:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTQ0Mzg2",
                                           "createdAt":  "2015-03-09T21:16:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eyas",
                                           "body":  "@Maoni0 also, this is not necessarily a task item or work item, nor is it an active pending change (say, a PR), but rather a place to brainstorm about what should happen to GC code.\n\nThe arguments for closing that I see here are arguments against accepting a PR right now, not arguments against having this discussion, which would be actionable at a future time.\n\nWould you be able to provide an argument why a **discussion** is harmful? It seems like the answers are (1) we **never** want to split up GC, or (2) we already have a plan.\n\nI\u0027d be curious about the arguments/reasonings for both.\n",
                                           "updatedAt":  "2015-03-09T21:16:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTU1NDgz",
                                           "createdAt":  "2015-03-09T22:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9zuvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chinhodado",
                                                                               "createdAt":  "2017-05-09T16:59:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "worldbeater",
                                                                               "createdAt":  "2018-12-07T19:45:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "griwes",
                                                                               "createdAt":  "2019-01-30T07:33:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2019-09-05T00:01:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrunoZell",
                                                                               "createdAt":  "2020-10-15T21:31:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "celluj34",
                                                                               "createdAt":  "2021-01-14T20:39:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manishjh",
                                                                               "createdAt":  "2021-01-27T17:07:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xparadoxical",
                                                                               "createdAt":  "2021-10-11T17:35:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "ala53",
                                           "body":  "@Maoni0 \n\n\u003e I hope this isn\u0027t too discouraging. In the future we can discuss other proposed changes in github issues to avoid investing time in changes we are unlikely to accept.\n\nThis discussion was my way of doing so: I wanted to discuss possible ways to clean up gc.cpp. The issue-pull request-issue actually stemmed from me trying to understand how garbage collectors work but the current organization of the GC provides a high barrier to entry/it isn\u0027t very easy to understand.\n\nI have no problem with you wanting to avoid merge conflicts and such, but I (as well as some others) think that splitting the functionality of the GC into different files (not reorganizing functionality) would be beneficial. As @Eyas said, why is it a bad idea to discuss how to do so in the future? That\u0027s why this is an _issue_, not a _pull request_: the best method can be discussed without changing the code until a good solution (refactoring strategy) is found. \n\n\u003e We’ve had the current structure since CLR started so it is familiar and efficient for those who have worked on it the most.\n\nI understand not wanting to restructure old code, but I\u0027m not talking about changing the structure. If you look at the PR, I wanted to move existing classes (such as the allocator) into their own files so it would be easier to work on one part without having to deal with others, not changing class names and such (which would ruin the current structure of the code).\n\n\u003e **Because the code is mirrored with our internal source control system we would like to keep these kinds of changes to a minimum to avoid unnecessary merge conflicts … formatting changes are likely going to be turned down.**\n\nOn this part, I\u0027d think it would actually _reduce_ merge conflicts. Say me and a fictional \"Bob\" both have changes that improve the performance of the GC. Mine focuses on better root tracing, while his focuses on more efficient allocation. In the current structure, once mine is accepted, his will be invalid (merge conflict) as the entire 36,000 line file will have changed. If it is restructured to split functionality, then both changes will be non-interacting and be able to be merged.\n",
                                           "updatedAt":  "2015-03-09T22:14:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTYxMjMz",
                                           "createdAt":  "2015-03-09T22:47:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Apologies for closing the issue. As you know we are new to open source, so things are a bit bumpy and we are learning as we go. We didn\u0027t realize right away that issues are used also for design-style discussions ... I am reopening the issue for the purpose of continued discussion.\n",
                                           "updatedAt":  "2015-03-09T22:47:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTYyNzE4",
                                           "createdAt":  "2015-03-09T22:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@Eyas discussion is not harmful. Currently we do not have plans to split up the GC code (and we do not even have plans for the plans). Top need for GC work is currently x-plat (see e.g. dotnet/coreclr#138) - any help there would be very appreciated.\n",
                                           "updatedAt":  "2015-03-09T22:58:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3OTk5ODI3",
                                           "createdAt":  "2015-03-10T05:53:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shahid-pk",
                                           "body":  "@karelz  this is encouraging and constructive we all want the gc to be cross platform first then other things but this discussion could help the community to know why the structure of the gc is what it is and why it is staying that way. We understand the current priority is cross platform first. \n",
                                           "updatedAt":  "2015-03-10T05:53:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDE0Nzk1",
                                           "createdAt":  "2015-03-10T08:46:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBFiiVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2020-05-27T17:12:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "@shahid-pk Makes sense. Let me try to answer your questions to my best knowledge (and some guess work):\nWhy it is this way? ... Partly historical reasons (it is this way since the start). Partly because devs working on it didn\u0027t feel the urge to refactor it. Partly because splitting of gc.cpp is non-trivial and risky and because it does not bring too big value (ramp up in the code base can be gained also in the combination of reading BOTR and debugging the code).\nWhy it is staying this way? ... Cost/benefit/risk ratio is IMO not in favor of a change here.\n\nFew additional thoughts:\nAm I happy that there is only 1 large file? No, but it doesn\u0027t hurt me much either.\nDo I see the disadvantages of large file? Yes, but I don\u0027t think they are huge. More like minor annoyances with easy workarounds.\nAnd to turn it around: Do you see the risk of any changes here? Do you see the cost of extra careful code reviews to mitigate the risk?\n\nStrictly technically, we truly believe this is a formatting change. If it was simple to split it up and if it would be low risk and if it would be very easy to review, it might be worth the \u0027minor\u0027 improvements mentioned above ... but I don\u0027t see that combo happening (not on a noticeable scale in gc.cpp).\nOn a personal note: I also trust CLR team that if all these three things were true, the refactoring would have happened long time ago.\n\nHopefully this helps to give some insight into our view point ...\n",
                                           "updatedAt":  "2015-03-10T08:46:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDUyNTI3",
                                           "createdAt":  "2015-03-10T13:30:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAJRDyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chinhodado",
                                                                               "createdAt":  "2017-05-09T17:02:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Eyas",
                                           "body":  "@karelz your points are valid and I expected as much.\n\nTo provide a perspective on why continuing the conversation is useful, I think it is illuminating to look over at what the folks over at CoreFX are doing with their GitHub issues. This might be an interesting place to get towards. Especially, see how issues are tagged with different priority levels, one of which is `\u00270 - Backlog\u0027` (idea \"good to go but unplanned\"), and some are not tagged with anything yet.\n\nHere\u0027s one way I see the discussion can move forward. The question \"Should the GC code be reorganized\" will either by answered by \"No, never\" or \"Yes\" (now/later/maybe never). If No, then an informative answer on \"Why\" is incredibly useful (for the community to contribute to a project owned by the CoreCLR team, understanding subtle aspects of their reasoning is helpful in making sure the community can actually help, rather than slow you guys down).\n\nIf Yes, there are two interesting questions that come up at this point: (1) How would one ideally go about this? (2) How important/urgent is it? Note that (1) and (2) inform each other. If this is urgent but the ideal way is difficult, then we look for another way, but a way of going about it that is less elegant would also make it less desirable.\n\nIn the case of this discussion, @karelz mentions some reasons that oppose action and encourage caution that apply for **any** attempt. It seems that (2) is settled as \"not now, and not soon\"-- which is great. Others might continue to disagree and they might have a point, but this answer is totally valid as is.\n\n\"Not now, and not soon\" is sometimes an exciting answer for some, I feel; it means you can discuss an ideal solution without having to worry about implementing it under any constraints!\n\nEvery time someone works on the GC, whether from the CoreCLR team or an external contributor, that person might notice a trend, a line of abstraction, or another structural unit that could be factored around, and they would be able to document it here.\n",
                                           "updatedAt":  "2015-03-10T13:30:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDUyOTUz",
                                           "createdAt":  "2015-03-10T13:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eyas",
                                           "body":  "Onto the specifics here, I do agree that reorganizing and refactoring is a formatting change in this case.\n",
                                           "updatedAt":  "2015-03-10T13:33:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDU1ODE5",
                                           "createdAt":  "2015-03-10T13:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "d-kr",
                                           "body":  "In dotnet/runtime#4022 @cnblogs-dudu  referenced a post explaining that the GC was machine-generated from LISP. Since `gc.cpp` is not a real source code (just intermediate code), but the lisp code is, should it be more useful to publish the lisp source and the transpiler (Source-to-source compiler) for LISP -\u003e CPP?\n",
                                           "updatedAt":  "2015-03-10T13:49:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDYyMzgx",
                                           "createdAt":  "2015-03-10T14:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbarrington",
                                           "body":  "@Eyas :+1: \n",
                                           "updatedAt":  "2015-03-10T14:20:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDgxMDIy",
                                           "createdAt":  "2015-03-10T15:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@d-kr The LISP conversion might have happened before v1, just once (most likely). Current gc.cpp is \"the source\". There is no additional magic we use.\n",
                                           "updatedAt":  "2015-03-10T15:42:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDgxNDM4",
                                           "createdAt":  "2015-03-10T15:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@Eyas Thanks for understanding.\nThe tagging is interesting idea and I bet that @richlander @terrajobst will make it happen here once it settles in corefx project.\n",
                                           "updatedAt":  "2015-03-10T15:44:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTE5NDI4",
                                           "createdAt":  "2015-03-10T18:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBFiivg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2020-05-27T17:13:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ala53",
                                           "body":  "@karelz That makes sense. It\u0027s an issue of cost-benefit. Reorganizing the GC may cause a bunch of subtle bugs and wouldn\u0027t help the people who work on it a lot. Like @Eyas, I vote the discussion be left open so that (a) people won\u0027t post more issues of \"WHY IS GC ONE HUGE FILE?!?!?!!,\" as the reasoning is documented here and (b) so people can document little things they find that could be factored out eventually.\n\nI wonder if adding something to the BOTR documentation would help - specifically a mention that the GC is by design in one file and see (link to here) for the reasoning. \n\nAnyways, I see the point behind not touching the GC and it is definitely not a functional change so it should not (even remotely) be a focus for the people working on it right now.\n\n@Eyas: Virtual +:100:  to you. On your questions, (2) is definitely settled: get x-platform working well and then come back to readability changes. (1) is what this discussion should eventually converge on. Like you said, people who work on the GC can document any ideas here, without having to worry about any implementation details so that (maybe) a perfect solution is found. \n\nI do, however, question if some of the work could be done as part of the general changes to the GC. For example, if someone makes a really big change to the allocator, perhaps they could split it out as they do so. This way, we avoid doing unnecessary formatting changes and since the component would be mostly rewritten (like I said, a **big** change), it would not be much extra work to factor out into its own file.\n\nA small note: GitHub could use an \"internet arguments and discussions\" section for things that don\u0027t focus on implementation.\n",
                                           "updatedAt":  "2015-03-10T18:43:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNjQ2NDAxOQ==",
                                           "createdAt":  "2016-06-16T11:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  true,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAGSbvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "khellang",
                                                                               "createdAt":  "2016-06-16T12:04:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akamsteeg",
                                                                               "createdAt":  "2016-06-16T12:19:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EmptyKeys",
                                                                               "createdAt":  "2016-06-16T12:29:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krontogiannis",
                                                                               "createdAt":  "2016-06-16T12:36:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silvath",
                                                                               "createdAt":  "2016-06-16T12:37:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ghuntley",
                                                                               "createdAt":  "2016-06-16T12:38:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattwarren",
                                                                               "createdAt":  "2016-06-16T12:40:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jasper-Bekkers",
                                                                               "createdAt":  "2016-06-16T12:58:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joaomello-zz",
                                                                               "createdAt":  "2016-06-16T12:58:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stdray",
                                                                               "createdAt":  "2016-06-16T12:58:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pebezo",
                                                                               "createdAt":  "2016-06-16T12:59:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndreyAkinshin",
                                                                               "createdAt":  "2016-06-16T13:01:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "plantain-00",
                                                                               "createdAt":  "2016-06-16T13:03:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aggieben",
                                                                               "createdAt":  "2016-06-16T13:03:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DavidKarlas",
                                                                               "createdAt":  "2016-06-16T13:06:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shrayasr",
                                                                               "createdAt":  "2016-06-16T13:07:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rejjin",
                                                                               "createdAt":  "2016-06-16T13:07:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "veikkoeeva",
                                                                               "createdAt":  "2016-06-16T13:09:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dhhoang",
                                                                               "createdAt":  "2016-06-16T13:09:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ebalders",
                                                                               "createdAt":  "2016-06-16T13:12:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PBeckerr",
                                                                               "createdAt":  "2016-06-16T13:17:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2016-06-16T13:19:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreyctkn",
                                                                               "createdAt":  "2016-06-16T13:30:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vbfox",
                                                                               "createdAt":  "2016-06-16T13:40:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Decad",
                                                                               "createdAt":  "2016-06-16T13:47:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LetMeCodeThis",
                                                                               "createdAt":  "2016-06-16T13:58:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "attilah",
                                                                               "createdAt":  "2016-06-16T14:42:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ssgonell",
                                                                               "createdAt":  "2016-06-16T14:45:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "discosultan",
                                                                               "createdAt":  "2016-06-16T15:05:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shahid-pk",
                                                                               "createdAt":  "2016-06-16T15:11:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aleks-sidorenko",
                                                                               "createdAt":  "2016-06-16T15:29:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NickCraver",
                                                                               "createdAt":  "2016-06-16T15:42:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "flaxed",
                                                                               "createdAt":  "2016-06-16T16:56:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "evkaky",
                                                                               "createdAt":  "2016-06-16T17:05:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manu-st",
                                                                               "createdAt":  "2016-06-16T23:50:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jakesays-old",
                                                                               "createdAt":  "2016-06-17T01:33:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexandrnikitin",
                                                                               "createdAt":  "2016-06-17T07:30:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benaadams",
                                                                               "createdAt":  "2016-06-20T18:47:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Romanx",
                                                                               "createdAt":  "2016-06-20T19:23:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oyshole",
                                                                               "createdAt":  "2016-06-21T12:03:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aL3891",
                                                                               "createdAt":  "2016-06-21T12:15:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "M0ns1gn0r",
                                                                               "createdAt":  "2016-06-21T13:46:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilexp",
                                                                               "createdAt":  "2016-06-21T17:49:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sqmgh",
                                                                               "createdAt":  "2016-06-22T20:19:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2016-06-25T15:18:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarkusSintonen",
                                                                               "createdAt":  "2016-07-03T13:59:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenmcd1",
                                                                               "createdAt":  "2016-09-13T21:27:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m0sa",
                                                                               "createdAt":  "2016-09-29T12:45:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dVakulen",
                                                                               "createdAt":  "2017-01-16T15:10:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xen2",
                                                                               "createdAt":  "2017-01-25T06:25:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  70
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Maintaining the status quo regarding this issue is frankly disappointing.\n\n\u003e the current structure since CLR started so it is familiar and efficient for those who have worked on it the most\n\nefficient only because familiar. For those who are not familiar, the current structure of the code breaks any attempt at efficiency.\n\nFor such a critical component in the runtime, I would really love to hear that there is a roadmap/work planned to progressively restructure the code. Consider restructuring as just a formatting process which would not bring any value is seriously misleading. Among the things this could bring:\n- lower the cost for people _not familiar_ with the GC code to jump more easily into it: CoreCLR is now open-source, and the key to its success is to welcome contributions, as long as they improve the quality of the product. Disallowing this because there is some internal/legacy way of working is not really constructive (to say the least) and a welcoming attitude to the .NET community. \n- improve the cost of maintenance (by getting more people familiar with it), Easier merge conflicts on small files rather than a big blob/locked file.\n- allow and encourage for improvements, new implementation ideas\n- make it a reference code for all students and professors, to help them study it, experience with it, understand and challenge the trade-off between theory and practicality\n- there are many performance challenges ahead for .NET to stay relevant, and the GC is a key component of this challenge: making the code more modular and manageable will help more people to tackle this challenge\n\nSo please, reconsider this issue, we are willing to help! \n",
                                           "updatedAt":  "2016-06-16T14:57:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNjUyMjEzMA==",
                                           "createdAt":  "2016-06-16T15:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOABh8dQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jakesays-old",
                                                                               "createdAt":  "2016-06-17T01:33:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "shahid-pk",
                                           "body":  "Adding to @xoofx the gc is the only feature/code currently which seems like no one outside Microsoft understands because other parts of coreclr are getting active contributions for example ports of the run time like Linux arm port , Mac port , FreeBSD port , NetBSD port  and for RyuJit @mikedn and others deep understanding of it and contributing to it. Its actually a surprise no one from the community understands gc\u0027s code that much well which shows that the .net team need to come up with a plan to make it easy for people to understand gc at least if contributions to it understandably is more risky.  \n",
                                           "updatedAt":  "2016-06-16T15:31:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNjY1OTI4Ng==",
                                           "createdAt":  "2016-06-17T01:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKnsvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "makirby",
                                                                               "createdAt":  "2017-03-24T23:39:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2017-04-08T18:35:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chinhodado",
                                                                               "createdAt":  "2017-05-09T17:06:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2019-09-26T03:07:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "guillaume86",
                                                                               "createdAt":  "2020-05-26T14:23:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "simchavos",
                                                                               "createdAt":  "2021-01-23T22:46:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Kuinox",
                                                                               "createdAt":  "2023-10-23T10:36:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "jakesays-old",
                                           "body":  "@xoofx @shahid-pk well do something about it. Start refactoring and submit some PR\u0027s. The code is open. You just might learn something in the process ;)\n",
                                           "updatedAt":  "2016-06-17T01:33:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNjY2MTc0NA==",
                                           "createdAt":  "2016-06-17T01:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e @xoofx @shahid-pk well do something about it. Start refactoring and submit some PR\u0027s. The code is open. You just might learn something in the process ;)\n\n@jakesays no, we can\u0027t do something about it, Have you carefully read all the posts above? It is stated `formatting changes are likely going to be turned down.` and a refactoring is considered as a formatting. So usually, you don\u0027t start to work on something when you know that It will get rejected, unless you want to fork the whole project. \n\nThe code is certainly open, but currently not enough open for contributions, that\u0027s the whole point of the discussion.\n",
                                           "updatedAt":  "2016-06-17T01:54:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNjcwMDkzOQ==",
                                           "createdAt":  "2016-06-17T07:34:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrnikitin",
                                           "body":  "@jakesays FYI, there were few attempts to refactor the code but they were declined: e.g. https://github.com/dotnet/coreclr/pull/403#issuecomment-77583808\n",
                                           "updatedAt":  "2016-06-17T07:34:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzIyMjMzOQ==",
                                           "createdAt":  "2016-06-20T18:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAF_bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shahid-pk",
                                                                               "createdAt":  "2016-06-20T18:27:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2016-06-25T15:24:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "loic-sharma",
                                                                               "createdAt":  "2016-07-04T16:45:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenmcd1",
                                                                               "createdAt":  "2016-09-13T22:00:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhowlett",
                                                                               "createdAt":  "2017-03-25T04:38:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "griwes",
                                                                               "createdAt":  "2019-01-30T07:36:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-01-31T20:54:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ghost2238",
                                                                               "createdAt":  "2020-01-26T22:55:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "DustinKingen",
                                                                               "createdAt":  "2020-05-26T00:15:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "maxious",
                                                                               "createdAt":  "2020-05-26T00:35:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gergoerdi",
                                                                               "createdAt":  "2020-05-26T01:43:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "TomasHubelbauer",
                                                                               "createdAt":  "2020-05-26T05:05:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joukevandermaas",
                                                                               "createdAt":  "2020-05-26T10:48:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nlieb",
                                                                               "createdAt":  "2020-05-26T19:27:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2020-05-27T17:15:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "inikulin",
                                                                               "createdAt":  "2020-10-31T19:58:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-12-19T23:00:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoahTheDuke",
                                                                               "createdAt":  "2021-01-14T17:27:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "axvr",
                                                                               "createdAt":  "2024-12-24T11:07:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  19
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "We do appreciate your interest in our GC. Our goal is to enable people who work on this code the most to be efficient and to find ways to make a larger group of people efficient working on the code base over time. We’re going to wait to make GC codebase usability changes until after other people start contributing to it and have specific feedback based on making multiple changes. This way we have a better chance of maintaining a positive cost/benefit ratio for our efforts. We hold the belief that the primary barrier to making GC changes is experience with the domain not the structure of our codebase. That’s the primary motivation for our approach.\n\nThe GC is written in portable C++ code and relies on the PAL for OS services. It doesn’t need to be updated to port CoreCLR to FreeBSD, for example.\n\nWe took a look at other challenging parts of CoreCLR to see how they compare to the GC.\n\nAssembly loading, for example, is spread over many different files and is very non-approachable. The community effort to implement collectible assemblies was unfortunately unsuccessful, see [issue 552](https://github.com/dotnet/coreclr/issues/552). Whether something is monolithic or split into multiple files doesn’t seem to directly inform approachability.\n\nAnother case is the JIT. @mikedn is a codegen/compiler person and has had success contributing to the JIT. JIT has files that have the same order of magnitude of lines as gc.cpp, e.g. https://github.com/dotnet/coreclr/blob/master/src/jit/importer.cpp. Thanks @mikedn!\n\nWe do want to expand the set of folks contributing to the GC. For example, we would love to see academics using this GC implementation for their research. I believe if there are GC folks who’re interested in contributing to our GC, they would be able to find their way around our GC code just fine, like @mikedn did with our JIT. Once devs make contributions to the GC, we’ll naturally take their feedback and preferences into consideration and will move forward.\n",
                                           "updatedAt":  "2016-06-20T18:09:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzM1ODQ0Ng==",
                                           "createdAt":  "2016-06-21T07:10:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB60peg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2016-06-21T07:13:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LetMeCodeThis",
                                                                               "createdAt":  "2016-06-21T07:33:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vkocjancic",
                                                                               "createdAt":  "2016-06-21T09:16:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Oceanswave",
                                                                               "createdAt":  "2016-06-21T12:09:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aL3891",
                                                                               "createdAt":  "2016-06-21T12:18:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "M0ns1gn0r",
                                                                               "createdAt":  "2016-06-21T13:42:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "n0rev",
                                                                               "createdAt":  "2016-06-21T16:36:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2016-06-25T15:24:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarkusSintonen",
                                                                               "createdAt":  "2016-07-03T13:57:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dVakulen",
                                                                               "createdAt":  "2016-09-15T12:13:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NickCraver",
                                                                               "createdAt":  "2017-01-11T11:29:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RikkiGibson",
                                                                               "createdAt":  "2017-03-24T21:49:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeanderK",
                                                                               "createdAt":  "2017-03-25T18:19:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RichiCoder1",
                                                                               "createdAt":  "2017-03-27T16:04:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyplo",
                                                                               "createdAt":  "2017-04-11T06:12:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gryff",
                                                                               "createdAt":  "2017-04-11T08:47:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sky7drake",
                                                                               "createdAt":  "2018-01-15T07:55:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidroth",
                                                                               "createdAt":  "2018-07-12T15:25:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "griwes",
                                                                               "createdAt":  "2019-01-30T07:36:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pawchen",
                                                                               "createdAt":  "2019-08-29T06:43:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "J-Swift",
                                                                               "createdAt":  "2020-05-25T23:57:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "inikulin",
                                                                               "createdAt":  "2020-10-31T19:58:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Timmmm",
                                                                               "createdAt":  "2021-01-14T20:43:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LukaszRozmej",
                                                                               "createdAt":  "2021-01-20T21:11:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manishjh",
                                                                               "createdAt":  "2021-01-27T17:18:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loic-sharma",
                                                                               "createdAt":  "2021-09-17T16:19:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  26
                                                         },
                                           "author":  "FransBouma",
                                           "body":  "@Maoni0 That\u0027s all well and good, and sorry if I sound harsh, but your arguments sound like you keep it this way as a bit of a filter on who will work on it. If the code is incomprehensible to a person who isn\u0027t familiar with the inner workings (but other than that a skilled engineer) it can be a serious hurdle to work on the codebase. If the code is easy to understand for such a person, more people are likely to be able to contribute. The easier it is to work on a codebase, the more maintainable the codebase is. Sure it\u0027s maintainable for the people who work on it now, but that group is very small, and what if they move on to another team within Microsoft or if they\u0027re a 3rd party contributor lose interest, or don\u0027t have enough time? Who will take over? As it\u0027s not _easy_ to participate in the project. \n\nOf course the domain is complex too, but that\u0027s a given regardless of the codebase state: to be able to contribute to a GC, you have to be familiar with research on that topic. That already takes some time and effort, and if the codebase is complex on its own and hard to maintain, it\u0027ll take even more time and effort to contribute. Who will do that? I mean, who has so much time and energy as a 3rd party, non-paid volunteer(!), to contribute to this project? \n\nKeeping the codebase as one big file will not help getting more input from the community, on the contrary: how is someone from the community going to contribute if a deep study to how the _complete_ code is even organized is needed before a single statement can be added? If a codebase is properly organized, it\u0027s not needed to know the entire codebase before a contribution can be made. Isn\u0027t the goal for Open Source software to make it as much as possible for others to contribute? If only a select view are able to contribute (namely the people who invest serious time to learn the _entire_ codebase), the amount of contributions worth having is only coming from those select view, and we then thus all depend on them to come up with noteworthy contributions. \n\nI don\u0027t think that\u0027s a sustainable future. \n",
                                           "updatedAt":  "2016-06-21T07:10:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzYzMjc3Ng==",
                                           "createdAt":  "2016-06-22T03:20:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAF_cQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Kryptos-FR",
                                                                               "createdAt":  "2016-06-25T15:28:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mestefy",
                                                                               "createdAt":  "2016-07-08T11:56:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephenmcd1",
                                                                               "createdAt":  "2016-09-13T22:02:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "LeanderK",
                                                                               "createdAt":  "2017-03-25T18:19:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2017-04-08T18:38:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2018-06-07T17:34:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "griwes",
                                                                               "createdAt":  "2019-01-30T07:36:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-01-31T20:55:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moritzuehling",
                                                                               "createdAt":  "2019-09-24T12:57:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ghost2238",
                                                                               "createdAt":  "2020-01-26T22:55:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "DustinKingen",
                                                                               "createdAt":  "2020-05-26T00:16:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gergoerdi",
                                                                               "createdAt":  "2020-05-26T01:43:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AB-ArithmeticBird",
                                                                               "createdAt":  "2020-05-26T04:40:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joukevandermaas",
                                                                               "createdAt":  "2020-05-26T11:04:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2020-05-27T17:16:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "playXE",
                                                                               "createdAt":  "2020-08-14T16:04:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "inikulin",
                                                                               "createdAt":  "2020-10-31T19:58:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NoahTheDuke",
                                                                               "createdAt":  "2021-01-14T17:28:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "celluj34",
                                                                               "createdAt":  "2021-01-14T20:42:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Timmmm",
                                                                               "createdAt":  "2021-01-14T20:44:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "LukaszRozmej",
                                                                               "createdAt":  "2021-01-20T21:13:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "reflectronic",
                                                                               "createdAt":  "2021-07-05T12:11:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "axvr",
                                                                               "createdAt":  "2024-12-24T11:07:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  23
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I personally find that when you have the source and can build and run it, you are in an excellent position of understanding the code. What I did, with the GC code or anything else where I had these available, was just to build it, run it with a small test program and step into the code. I outlined the code flow in the [GC BotR chapter](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/garbage-collection.md) (in “Physical Architecture” section) and you can set breakpoints on the top level functions; when those are hit you can step in and see what they do. I believe this should be very helpful to understanding the code. \n",
                                           "updatedAt":  "2016-06-22T03:20:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-eDu0",
                                           "createdAt":  "2022-02-22T18:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCP6Z3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2022-02-22T23:28:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of the experimental [issue cleanup initiative](https://github.com/dotnet/runtime/issues/60288) we are currently trialing. Please share any feedback you might have in the linked issue.",
                                           "updatedAt":  "2022-02-22T18:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-eKYX",
                                           "createdAt":  "2022-02-22T18:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVLgOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2022-02-24T00:51:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NJCCJohnWatson",
                                                                               "createdAt":  "2022-03-13T13:53:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Atulin",
                                                                               "createdAt":  "2025-06-03T19:51:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "janhenke",
                                           "body":  "I still consider this a worthwhile topic that should be addressed in the long term.",
                                           "updatedAt":  "2022-02-22T18:34:19Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "Discussion on reorganizing gc.cpp",
        "labels":  [
                       "area-GC-coreclr",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/4076",
        "createdAt":  "2015-03-25T02:04:39Z",
        "number":  4076,
        "author":  "ygc369",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvQReg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "redknightlois",
                                            "createdAt":  "2017-07-26T16:37:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ygc369",
                                            "createdAt":  "2017-10-22T10:37:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "seanmars",
                                            "createdAt":  "2019-01-29T06:18:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sgf",
                                            "createdAt":  "2022-07-23T15:58:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hueifeng",
                                            "createdAt":  "2023-01-01T10:33:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamiG42",
                                            "createdAt":  "2023-04-03T13:01:43Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-05-30T04:58:47Z",
        "body":  "I think I\u0027ve found an effective way to compress LOH: \nIf CLR always alloc every large object at the beginning of a RAM page(usually 4KB per page)，then the large object heap(LOH) can be compressed without much cost: CLR can compress LOH by modifying RAM page table and TLB instead of copying data. If so, small fragmentation maybe still exist (less then a memory page size per fragment), but there would be no large fragmentation, and compressing would be very fast because of no copying. To do this, OS support may be needed, fortunately Windows OS and Visual Studio are both Microsoft\u0027s softwares, so Microsoft can implement this at least on Windows.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf2N2JA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Nzg1ODMx",
                                           "createdAt":  "2015-03-25T02:11:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @Maoni0 \n",
                                           "updatedAt":  "2015-03-25T02:11:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODMxNzU5",
                                           "createdAt":  "2015-03-25T04:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kangaroo",
                                           "body":  "To clairfy, by \u0027modify RAM page table\u0027, your idea here is that if the CLR could determine a page was \u0027free\u0027 in LOH, we could modify the PTE to point to a new physical page?\n",
                                           "updatedAt":  "2015-03-25T04:52:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODUyMDc1",
                                           "createdAt":  "2015-03-25T05:32:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJGGbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ldematte",
                                                                               "createdAt":  "2020-07-01T15:19:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "Thanks for your interest in the GC, @ygc369. The feature you are talking about is called VA remapping or swapping - it\u0027s something that needs to be implemented in the VMM. We talked to the OS guys about it a few years ago. We don\u0027t have it yet. \n",
                                           "updatedAt":  "2015-03-25T05:33:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODYxNDIy",
                                           "createdAt":  "2015-03-25T06:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@Maoni0 This is a great feature, not only GC, many other operations which need copy large amount of memory can also benefit from it. I think you should talk to the OS guys about it again.It will obviously improve the performance of many programs without modifying the source code.\n",
                                           "updatedAt":  "2015-03-25T06:01:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDEwMTQy",
                                           "createdAt":  "2015-03-25T12:41:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zgxnet",
                                           "body":  "I like the idea very much. Yes, LOH is likely to have fragments, and memory for large objects should be allocated directly, rather than have a managed heap for it. It is much better to do the address mapping in OS level than copy and move.\n",
                                           "updatedAt":  "2015-03-25T12:41:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4NjQ2NTEw",
                                           "createdAt":  "2015-04-01T22:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omariom",
                                           "body":  ":+1:\n",
                                           "updatedAt":  "2015-04-01T22:04:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0ODU1MTg0Nw==",
                                           "createdAt":  "2015-10-15T23:35:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "Also I would suggest filing feature requests with the Linux and *BSD kernel teams.\n\nI believe (but could be wrong) that the last attempt to get this feature into Linux was tainted by association with the Azul Zing JVM, which \u0026ndash; being proprietary and patent-encumbered \u0026ndash; was looked down upon by the Linux team.  The feature appeared to be only useful for a single, proprietary piece of software.\n\nThe FOSS *nix kernel developers might be much more interested if they saw that a free software VM would actually use address remapping.\n",
                                           "updatedAt":  "2015-10-15T23:37:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0ODU3NDg4Mw==",
                                           "createdAt":  "2015-10-16T01:59:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@drbo \nDoes Windows OS have this feature already?\n",
                                           "updatedAt":  "2015-10-16T01:59:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0OTExNzY1Mw==",
                                           "createdAt":  "2015-10-19T06:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "Is this feature very hard to realize?\n",
                                           "updatedAt":  "2015-10-19T06:44:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE2MTg2MTA2MQ==",
                                           "createdAt":  "2015-12-04T03:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DemiMarie",
                                           "body":  "@ygc369 I don\u0027t know \u0026ndash; I was referring to the now-defunct Managed Runtime Initiative, which (I believe) only ever managed to submit a patch to Linux.  Azul has since resorted to shipping a custom proprietary kernel module.\n",
                                           "updatedAt":  "2015-12-04T03:18:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwODcxNzExMQ==",
                                           "createdAt":  "2016-04-12T05:42:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "Virtual Machine softwares have already used this feature, I don\u0027t think it is too hard to realize.\n",
                                           "updatedAt":  "2016-04-12T05:42:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzA1NzYwOA==",
                                           "createdAt":  "2016-06-20T06:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "Nobody is interested in this?\n",
                                           "updatedAt":  "2016-06-20T06:10:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzIyNjUzMQ==",
                                           "createdAt":  "2016-06-20T18:24:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "I don\u0027t want to comment directly on the merits of pursuing this proposal, but I will mention that on a 64 bit machine, fragmentation is not as problematic as you might assume.    The GC does not touch freed memory and since every object on the large object heap is \u003e 85K (thus 42 pages), most of the pages simply drop out of the working set and don\u0027t \u0027hurt\u0027 real memory consumption (only address space consumption, which is significantly cheaper).  \n\nI don\u0027t want to make the statement that fragmentation of the large object heap does not matter, but my observation above suggests we need some data that suggests that large object heap fragmentation is a problem in interesting scenarios.  \n",
                                           "updatedAt":  "2016-06-20T18:24:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzMxNTkxMQ==",
                                           "createdAt":  "2016-06-21T01:22:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@vancem \nThis proposal is not only for fragmentation problem, it can also collect garbage large objects earlier.\nThe cost of compressing LOH with traditional way is too much, so we can\u0027t do it frequently. But if we can compress LOH with the way I mentioned, the cost would be less. Thus we can collect garbage large objects in time.\n",
                                           "updatedAt":  "2016-06-21T01:22:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzM1MTQyMg==",
                                           "createdAt":  "2016-06-21T06:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "Not compacting LOH does not mean we do not collect garbage on LOH. We just don\u0027t compact (unless you specifically tell us to). We can collect LOH as often as we need if we think it\u0027s productive.\n\nAs I mentioned above, we already talked to the OS group a few years ago about doing this and the OS has yet to implement the VA remapping feature. I will talk to them again but feel free to bring this up with the Windows group and other OS groups as @drbo mentioned.\n",
                                           "updatedAt":  "2016-06-21T06:26:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyNzM1OTU3Ng==",
                                           "createdAt":  "2016-06-21T07:16:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@Maoni0 \nThank you for commenting on this. \nIt seems that GC on LOH only happens during GC of Generation 2, so it may not happen often.\nEven though the garbage objects on LOH are Generation 0, they would not be collected until next GC of Generation 2.\n",
                                           "updatedAt":  "2016-06-21T07:16:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODc5OTA2OA==",
                                           "createdAt":  "2017-06-15T16:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRainer",
                                           "body":  "I don\u0027t want to leave a comment on \"How it would be better to compress LOH\", but i want to ask if its even neccessary?\r\n\r\nIt is a lot of work for the GC and for this reason it will be done not as much at it should be done to work in a efficient way for the memory management.\r\n\r\nWhat comes to my mind is a type of `self defragmenting LOH`.\r\nI was reading this very good article on LOH Fragmenting https://www.codeproject.com/Articles/1191534/To-Heap-or-not-to-Heap-That-s-the-Large-Object-Que and if the problem is still the same, i have a different idea.\r\n\r\nThe reason for the fragmentation is the search for a free gap, and that a large object must have a size less (or equals) then this gap. so over time big gaps will be filled by smaller objects and a lot of small gaps are remaining.\r\n\r\nit would be much better if LOH uses `Pages` with a constant Size as well, for example like uppon a 4KB PageSize.\r\nI\u0027m not talking about the RAM Page, it can match RAM Page size but its not required.\r\nAt the end of each page the last 64bit (for x64) will store a pointer to the next used page.\r\nthis way each gap contains always same sized free blocks, and its not any more required to allocate large memory in one block.\r\n\r\ncause of LOH is used only on large memory allocations the performance impact and the fragmentation from not consuming a entire 4K block would be much less then the actual fragmentation.\r\n\r\nthe additional memory consumption py the 8Byte pointer on a 4K page would be ~8.4MB on a 4GB memory allocation.\r\n\r\nreading the memory could be a tiny bit slower, but this way the GC doesn\u0027t needs to reorganize the LOH any more.\r\n\r\nif this is not enought it could maybe be optimized by using the first byte of any page to determinate if the page should be read entirely and continued to read the next page (like on actual LOH) or if the last 8Bytes are used as reference to the next Page.\r\n\r\nthis would improve performance and memory usage for a usecase with a lot of free memory or only a few LOH objects ",
                                           "updatedAt":  "2017-06-15T16:46:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODgwMDI0OQ==",
                                           "createdAt":  "2017-06-15T16:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@FlorianRainer Wouldn\u0027t that break `unsafe` code? For example, I can allocate 1 GB `byte[]` and then use `fixed` to access the whole array directly using pointers. I don\u0027t think that would work with the approach you proposed.",
                                           "updatedAt":  "2017-06-15T16:49:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwODgwMzc2NA==",
                                           "createdAt":  "2017-06-15T17:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRainer",
                                           "body":  "@svick thats true, for unsafe code and if you are working with pointers this will not work.\r\nBut maybe the idea to build some type of self defragmention (or not even fragmenting) LOH, instead of reorganizing it by the GC could be usefull? even if my approach is not so usefull.\r\n",
                                           "updatedAt":  "2017-06-15T17:00:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTE5MTY0Mw==",
                                           "createdAt":  "2017-06-17T04:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@FlorianRainer\r\n@svick \r\nMy idea could work with unsafe code, and I think that compressing LOH in my way would not have more cost than compressing SOH, if OS and CPU could support it (GC thread can modify Page Table).\r\nEven for safe code, I don\u0027t think FlorianRainer\u0027s idea has more advantages than mine. Assuming 4KB per page in his idea, if I allocate 1GB memory and want to access the last byte, then the CPU has to access memory 256 times to get only one byte!",
                                           "updatedAt":  "2017-06-17T04:03:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MzIzNjM5Mw==",
                                           "createdAt":  "2018-03-15T02:08:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5Tj_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sgf",
                                                                               "createdAt":  "2023-04-05T16:59:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@Maoni0 \r\nI find that Windows OS seems to have VA remapping already.\r\nSee this: [Address Windowing Extensions](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366527(v=vs.85).aspx)\r\n\u003eAWE provides a very fast remapping capability. Remapping is done by manipulating virtual memory tables, not by moving data in physical memory.\r\n\r\n\r\n",
                                           "updatedAt":  "2018-03-15T05:44:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTU0NjExMw==",
                                           "createdAt":  "2020-03-29T02:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5TkHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sgf",
                                                                               "createdAt":  "2023-04-05T16:59:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@Maoni0 \r\nIs there any progress about this feature?\r\nIf OS has not supported VA remapping yet, I wonder why and how virtual machine softwares have it.\r\nBesides, I think windows OS has supported it, look this:\r\n\r\n\u003e AWE provides a very fast remapping capability. Remapping is done by manipulating virtual memory tables, not by moving data in physical memory.\r\n\r\nfrom [Address Windowing Extensions](https://msdn.microsoft.com/en-us/library/windows/desktop/aa366527(v=vs.85).aspx)\r\n",
                                           "updatedAt":  "2020-03-29T02:02:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTU1MzU5Mg==",
                                           "createdAt":  "2020-03-29T03:38:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "AWE has existed since Server 2003. it\u0027s not new. the APIs are quite awkward for this purpose and likely not fast enough (what I talked about with the OS folks was much more targeted at the GC usage); feel free to experiment with them. \r\n\r\nLinux has mremap which seems much more suitable for the usage. I haven\u0027t gotten around to experimenting with it yet. ",
                                           "updatedAt":  "2020-03-29T03:38:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTUyNjMxNg==",
                                           "createdAt":  "2020-06-17T17:52:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5TkWA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2020-07-28T13:15:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sgf",
                                                                               "createdAt":  "2023-04-05T17:00:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I recently saw a CppCon talk where a clever technique for compacting heaps was presented. The key idea was to map the same physical page at multiple virtual locations. As long as objects on those virtual locations do not overlap physically, zero-copy compaction can be performed without relocating objects. It\u0027s not a full compaction. Rather, it uses suitable opportunities for this technique. Apparently, the authors found this to be a valuable optimization overall.\r\n\r\nThis technique is different from simply releasing free space \"holes\" by decommitting the pages.\r\n\r\nI\u0027m posting this here for consideration of the GC team.\r\n\r\nhttps://www.youtube.com/watch?v=XRAP3lBivYM\r\n",
                                           "updatedAt":  "2022-02-11T12:53:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTU4MzE4NQ==",
                                           "createdAt":  "2020-06-17T19:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5TkXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-06-27T18:12:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ldematte",
                                                                               "createdAt":  "2020-07-01T15:22:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sgf",
                                                                               "createdAt":  "2023-04-05T17:00:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "yeah, saw this when Emery\u0027s paper was published. I have considered it for GC usage. ",
                                           "updatedAt":  "2020-06-17T19:42:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49j13L",
                                           "createdAt":  "2022-02-08T16:22:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Would Regions help with this?",
                                           "updatedAt":  "2022-02-08T16:22:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HHf2r",
                                           "createdAt":  "2022-07-23T16:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgf",
                                           "body":  "its 2022,with more 3 years,thats will be 10 years,.net team will be do something for .net\u0027s ZGC?",
                                           "updatedAt":  "2022-07-23T16:04:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HK8wc",
                                           "createdAt":  "2022-07-25T13:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "\u003e Would Regions help with this?\r\n\r\nI also want to ask this question, will Regions help with this? @Maoni0 ",
                                           "updatedAt":  "2022-07-25T13:30:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_Y3Yk",
                                           "createdAt":  "2024-05-29T11:51:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsX31w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BoyBaykiller",
                                                                               "createdAt":  "2024-08-01T03:14:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@Maoni0\r\nAny progress about this topic?",
                                           "updatedAt":  "2024-05-29T11:51:45Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "An effective way to compress Large Object Heap",
        "labels":  [
                       "area-GC-coreclr",
                       "hard-problem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/5633",
        "createdAt":  "2016-04-15T16:47:01Z",
        "number":  5633,
        "author":  "GSPP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODChUYg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2016-04-15T17:30:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2016-06-10T09:09:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yufeih",
                                            "createdAt":  "2016-07-03T08:27:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoshan12345",
                                            "createdAt":  "2016-12-01T19:01:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KurtLoeffler",
                                            "createdAt":  "2017-10-14T23:39:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmitriyse",
                                            "createdAt":  "2018-03-21T15:49:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rokups",
                                            "createdAt":  "2018-05-30T17:57:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hypeartist",
                                            "createdAt":  "2018-06-26T06:52:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bawNg",
                                            "createdAt":  "2019-03-08T11:06:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wojmik",
                                            "createdAt":  "2019-04-27T21:22:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Wojmik",
                                            "createdAt":  "2019-04-27T21:26:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "DQRC69420",
                                            "createdAt":  "2020-10-13T18:31:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DQRC69420",
                                            "createdAt":  "2020-10-16T05:33:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2020-10-31T17:06:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2023-03-30T09:03:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2023-03-30T09:03:46Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Flutterish",
                                            "createdAt":  "2023-12-21T00:24:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Flutterish",
                                            "createdAt":  "2023-12-21T00:24:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "lakani",
                                            "createdAt":  "2024-05-18T23:43:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2024-09-13T17:45:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gerhard17",
                                            "createdAt":  "2025-05-19T07:19:59Z"
                                        }
                                    ],
                          "totalCount":  21
                      },
        "updatedAt":  "2024-05-18T23:50:25Z",
        "body":  ".NET only supports automatic lifetime for managed objects. The GC cleans up. This is fantastic for productivity. Sometimes, developers need tight control over latency, though. The GC can interfere with that goal.\n\nThis has been discussed at length in many place. I believe the team is aware of this issue. Although great strides have been made improving the GC this is still an important concern. It is not clear that the GC can ever fully resolve this.\n\nAs a workaround we can place data in manually allocated memory and use pointers to access that data. But that data can never be a managed object. I cannot pass that data to other non-aware code. If I want to allocate an unmanaged buffer I cannot pass that buffer as a `byte[]` to other code. This is terrible for composability.\n\n**Please implement unsafe _managed_ objects with user controlled lifetime.** Like this:\n\n```\nallocated class SomeData {\n public int X;\n //...\n}\n\nSomeData someData = Activator.CreateObject\u003cSomeData\u003e(myCustomHeap);\n\nsomeData.X = 1234;\nDoWork(someData);\n\nActivator.DeleteObject(someData, myCustomHeap); //This!\n```\n\nI can ask the runtime to create and destroy objects on a custom allocator that I provide. An allocator is just a custom class:\n\n```\nabstract class Allocator {\n IntPtr Allocate(IntPtr numberOfBytes);\n void Deallocate(IntPtr address);\n}\n```\n\nUsing this API developers can manage memory without involving the GC. They can devise their own lifetime schemes.\n\n**Benefits:**\n- It\u0027s possible to avoid the GC\n- These are totally normal .NET objects that work like any other object (composability)\n- Deterministic memory consumption (no need to wait for the GC or trigger it)\n- Finalizer is called deterministically\n- If there are no finalizers there is no need to even call `DeleteObject`. The allocator can destroy all objects in constant time (arena allocation).\n\n**The usual perils of unsafe memory management apply:**\n- Need to ensure that there are no leaks and no double-frees.\n- Cannot reference deleted objects.\n- Memory corruption can result if contract broken.\n\nThis scheme lends itself to **arena allocation**. A game engine can allocate all per-frame objects in an arena and constant-time delete all of them at frame end. A REST service can arena allocate all data per-request. An XML parser can allocate all temporary buffers (temp strings, etc.) in a per-parse arena.\n\n**This proposal achieves very nice integration of unsafe memory management into an otherwise managed application.** The idea is that most code is safe and managed but there are performance-critical islands of unmanaged memory that interoperate nicely.\n\nThe only **CLR change required** would be to teach the GC to ignore such custom objects. This could be done through a bit in the object header or based on type. I have left it open whether classes need to be declared as custom-allocated or whether any class can be allocated unsafely.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfk3fgw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU0NTUzNg==",
                                           "createdAt":  "2016-04-15T16:55:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Destructible Types? https://github.com/dotnet/roslyn/issues/161\n",
                                           "updatedAt":  "2016-04-15T16:55:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU0NzgyNg==",
                                           "createdAt":  "2016-04-15T17:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "That proposal seems to be safe, automatic resource management. My proposal is unsafe and manual all the way. This is about giving maximum control.\n\nThanks for pointing out the \"near duplicate\", though. It is useful to contrast the two. @benaadams @stephentoub \n",
                                           "updatedAt":  "2016-04-15T17:04:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU0OTc4NQ==",
                                           "createdAt":  "2016-04-15T17:09:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTWpaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Unknown6656",
                                                                               "createdAt":  "2016-06-10T09:16:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DQRC69420",
                                                                               "createdAt":  "2020-10-13T18:32:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e The only CLR change required would be to teach the GC to ignore such custom objects. This could be done through a bit in the object header or based on type.\n\nIn any case this will be a very minor change, maybe even no change. The GC can already differ between its own objects and objects it does not own - it is specified in ECMA-335 that this must be allowed:\n\n``` csharp\nclass Program\n{\n    int _value;\n\n    static unsafe void Main(string[] args)\n    {\n        IntPtr mem = Marshal.AllocHGlobal(4);\n        Method(ref *(int*)mem);\n\n        Program p = new Program();\n        Method(ref p._value);\n    }\n\n    static void Method(ref int value)\n    {\n        value = 25;\n    }\n}\n```\n\nHere the GC has to update the managed pointer passed to `Method` only if it points into an object it owns, which it obviously doesn\u0027t in the first case, but does in the second case.\n",
                                           "updatedAt":  "2016-04-15T17:09:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU1NjEyMw==",
                                           "createdAt":  "2016-04-15T17:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@Janiels I did not even know that `ref` can do that! Is this _supposed_ to work or a compiler bug? I did not find anything in the spec that specifies what exactly can follow `ref`. See §5.4 and §7.5.1.\n\nYou are right. Here, `value` could point to anything: Unmanaged memory, stack, heap field, array element. The GC must deal with all of that already.\n",
                                           "updatedAt":  "2016-04-15T17:29:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU2MDEyNg==",
                                           "createdAt":  "2016-04-15T17:41:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "@GSPP I don\u0027t know whether it is supposed to work on the C# side of things, but in the CLI it definitely is. ECMA-335 states:\n\n\u003e III.1.1.5.1 Unmanaged pointers\n\u003e ...\n\u003e - Unverified code can pass an unmanaged pointer to a method that expects a managed\n\u003e   pointer. This is safe only if one of the following is true:\n\u003e   1. The unmanaged pointer refers to memory that is not in memory managed by\n\u003e      the garbage collector.\n\u003e   2. The unmanaged pointer refers to a field within an object.\n\u003e   3. The unmanaged pointer refers to an element within an array.\n\u003e   4. The unmanaged pointer refers to the location where the element following the\n\u003e      last element in an array would be located.\n\nI have personally used this feature in C++/CLI for clean wrapper code that can work with both unmanaged and managed memory (since a `pin_ptr` pointing to unmanaged memory is specified to work and be ignored by the GC).\n",
                                           "updatedAt":  "2016-04-15T17:41:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU2NTU3Mw==",
                                           "createdAt":  "2016-04-15T17:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Alright. Does this not mean that we can immediately write this allocator system on the current CLR using a tiny C++/CLI library or using `ILGenerator` to generate tiny helper functions to do this?\n\nThis crashes with internal corruption errors, though:\n\n```\n    public static void Main()\n    {\n        try\n        {\n            var lib = LoadLibrary(\"kernel32.dll\");\n            var x = GetProcAddress(lib, \"GetProcAddress\");\n            Console.WriteLine(x);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n        }\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    class C2 { public int X; }\n\n    [DllImport(\"kernel32.dll\")]\n    static extern C2 GetTickCount64();\n\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n    static extern IntPtr LoadLibrary(string libFilename);\n\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]\n    [return: MarshalAs(UnmanagedType.LPStruct)]\n    static extern C2 GetProcAddress(IntPtr hModule, string methodName);\n```\n\nI tried type-punning the code of some library as a `C2` instance. I had hoped that this code would at least limp along to be able to access `X` (it should read as the first 4 bytes of the x86 code of this native function).\n\nThe `Activator.Allocate` function would need to properly format that memory (object header, zero-init of fields, optionally call ctor). I don\u0027t think that can be emulated using code.\n",
                                           "updatedAt":  "2016-04-15T17:58:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU2NjM4NA==",
                                           "createdAt":  "2016-04-15T18:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikedn",
                                           "body":  "\u003e ECMA-335 states ...\n\nUnmanaged/managed pointers and object references are not the same thing. It\u0027s true that managed pointers can point to unmanaged memory but that doesn\u0027t imply that object reference too can do that. I suspect that it is more or less technically possible but I don\u0027t think there\u0027s anything that allows this in the current ECMA spec.\n\n\u003e Please implement unsafe managed objects with user controlled lifetime. Like this: allocated class SomeData \n\nI don\u0027t think that this should be a property of the type. Not only that this prevents allocating existing reference types outside of the GC heap but it\u0027s quite useless because you can mostly do this today with value types and unsafe code.\n",
                                           "updatedAt":  "2016-04-15T18:01:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU2OTI0MA==",
                                           "createdAt":  "2016-04-15T18:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "@mikedn I\u0027m aware of that. What I\u0027m saying is that the ECMA-335 states that unmanaged pointers can be converted to managed pointers. For this to be supported the CLR has to be able to answer the question I quoted from the feature request - whether the GC owns an object at the specified address. \n\n@GSPP Maybe so. I know you can reinterpret objects with a structure with Explicit layout, however that doesn\u0027t quite allow you to examine the object representation. It could probably be done with some `TypedReference` hacking.\n",
                                           "updatedAt":  "2016-04-15T18:12:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDU5NDg0Mg==",
                                           "createdAt":  "2016-04-15T18:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "As a POC, this seems to work on desktop CLR:\n\n``` csharp\ninternal class ArenaAllocator : IDisposable\n{\n    private readonly IntPtr _mem;\n    private IntPtr _cur;\n\n    public ArenaAllocator()\n    {\n        _mem = Marshal.AllocHGlobal(0x100000);\n        _cur = _mem;\n    }\n\n    public unsafe T Allocate\u003cT\u003e() where T : class\n    {\n        *(IntPtr*)_cur = typeof(T).TypeHandle.Value;\n        IntPtr ptr = _cur;\n        TypedReference reference = default(TypedReference);\n        ((IntPtr*)\u0026reference)[0] = (IntPtr)(\u0026ptr);\n        ((IntPtr*)\u0026reference)[1] = typeof(T).TypeHandle.Value;\n\n        return __refvalue(reference, T);\n    }\n\n    public void Dispose()\n    {\n        Marshal.FreeHGlobal(_mem);\n    }\n}\n```\n\nIt\u0027s missing getting the size of T (not sure how -- probably through the type handle somehow), and sync block indices are not handled at all (I think these are negative offsets).\n\nOn CoreCLR I don\u0027t think `TypedReference` is implemented, so this way won\u0027t work there.\n\nEDIT: And of course it\u0027s missing constructor invocation too, and does not handle special classes (`string`, array types).\n",
                                           "updatedAt":  "2016-04-15T18:53:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDYwODI5Ng==",
                                           "createdAt":  "2016-04-15T19:31:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "\u003e I don\u0027t think that this should be a property of the type. Not only that this prevents allocating existing reference types outside of the GC heap\n\nI agree with that now. @mikedn \n\n@Janiels That is a really nasty hack :) My next idea for a hack would have been to use `ILGenerator` to emit `T ToRef\u003cT\u003e(IntPtr ptr) { ldarg.0; ret; } where T : class`. Also, you\u0027d need a \"template\" instance of `T` to copy over the object header! This makes `GetType()` and `lock` work. This is fun :) Probably breaks dozens of .NET CLR invariants.\n\nI feel we should not derail this ticket further with meaningless chatter. I\u0027m looking forward to the team responding. I also encourage anyone to post comments for why this would help their code and to +1 the opening post.\n\nAnyone doing games might be interested. The Stack Exchange folks posted about unsafe code tricks they did to make the tag engine perform acceptably. Would this help you, @mgravell? Or was it @mattwarren? Sorry for summoning everyone.\n",
                                           "updatedAt":  "2016-04-15T19:34:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDYxMTcxMg==",
                                           "createdAt":  "2016-04-15T19:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "You could construct an object perfectly but you can\u0027t call new with it...I am not aware if there\u0027s a way to tell new to goto your own allocator. \n\nRegardless this still doesn\u0027t integrate. If you assign this to an object field, obj.x = something_I_constructed_that_looks_like_a_managed_object, GC will attempt to trace through it and it will fail. Unless this is passed as a special type that tells GC to ignore its references. But that again doesn\u0027t make it seamless.\n\nI am thinking about isolated heaps (that allow GCs on them individually instead of per process) though. I will post something hopefully soon.\n",
                                           "updatedAt":  "2016-04-15T19:40:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDYxMTg4OQ==",
                                           "createdAt":  "2016-04-15T19:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikedn",
                                           "body":  "\u003e For this to be supported the CLR has to be able to answer the question I quoted from the feature request - whether the GC owns an object at the specified address.\n\nYes, it has to be able to answer that and it does that. But managed pointers are quite restricted, they can live only on the stack. That makes them rather uncommon and so are any potential perf issues associated with answering the question.\n\n\u003e EDIT: And of course it\u0027s missing constructor invocation too, and does not handle special classes ( string , array types).\n\nIt also has a good chance of corrupting memory or crashing as soon as you try to store a reference into such an object.\n\n\u003e I feel we should not derail this ticket further with meaningless chatter.\n\nThe issue is derailed from the beginning like all other similar issues because it fails to take into account various technical realities, existing possibilities and use cases.\n",
                                           "updatedAt":  "2016-04-15T19:45:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDYxNzE1Ng==",
                                           "createdAt":  "2016-04-15T19:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTr6-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DQRC69420",
                                                                               "createdAt":  "2020-10-16T05:43:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SunnyWar",
                                           "body":  "@mikedn \n\n\u003e The issue is derailed from the beginning like all other similar issues because it fails to take into account various technical realities, existing possibilities and use cases.\n\nI\u0027ve heard things like this before on many projects. It amounts to \"we can\u0027t do it because we don\u0027t do it now\" which is self-limiting. Never let historical decisions dictate future possibilities.\n",
                                           "updatedAt":  "2016-04-15T19:55:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDYxOTEwNw==",
                                           "createdAt":  "2016-04-15T20:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikedn",
                                           "body":  "\u003e I\u0027ve heard things like this before on many projects. It amounts to \"we can\u0027t do it because we don\u0027t do it now\" which is self-limiting. Never let historical decisions dictate future possibilities.\n\nNeah, this only has to do with people getting overly enthusiastic and claiming that a solution for a problem exists when even the problem is not understood, much less the solution.\n",
                                           "updatedAt":  "2016-04-15T20:00:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDYyMTUwNw==",
                                           "createdAt":  "2016-04-15T20:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e Neah, this only has to do with people getting overly enthusiastic and claiming that a solution for a problem exists when even the problem is not understood, much less the solution.\n\nI\u0027ll definitely admit it wasn\u0027t well tested. I didn\u0027t do much more than a few allocations and GCs. And I definitely won\u0027t argue with @Maoni0 whether it will work or not. :smile:\nAt least it was interesting to me that the object reinterpretation worked with `TypedReference`. But yes, as @GSPP says, now we\u0027re getting off-topic. I\u0027ll eagerly await @Maoni0\u0027s post.\n",
                                           "updatedAt":  "2016-04-15T20:13:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDk3MTY0Mw==",
                                           "createdAt":  "2016-04-17T07:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "Just to respond to an explicit mention:\n\n\u003e Would this help you, @ https://github.com/mgravellmgravell\n\u003e https://github.com/mgravell?\n\nNot really. In general when I have data with this problem, I have **lots**\nof them, so a block alloc (managed or unmanaged) is more interesting than\nindividual allocs. In the specific case of tag-engine, we\u0027re in the process\nof a fundamental v2 overhaul/rewrite, with a view to making it work on GPUs\n(with CPU fallback, but not shared code), so any allocation needs to be\ndone in a very specific way (unmanaged on fixed pages issued by the GPU\ndriver) for it to be compatible with the fastest data transfers.\n\nBut I share and echo the sentiment that the problem needs to be fully\nunderstood and documented before getting excited about specific solutions.\n\nMarc\nOn 15 Apr 2016 9:11 p.m., \"Jakob Botsch Nielsen\" notifications@github.com\nwrote:\n\n\u003e Neah, this only has to do with people getting overly enthusiastic and\n\u003e claiming that a solution for a problem exists when even the problem is not\n\u003e understood, much less the solution.\n\u003e \n\u003e I\u0027ll definitely admit it wasn\u0027t well tested. I didn\u0027t do much more than a\n\u003e few allocations and GCs. And I definitely won\u0027t argue with @Maoni0\n\u003e https://github.com/Maoni0 whether it will work or not. [image: :smile:]\n\u003e At least it was interesting to me than the object reinterpretation worked\n\u003e with TypedReference. But yes, as @GSPP https://github.com/GSPP says,\n\u003e now we\u0027re getting off-topic. I\u0027ll eagerly await @Maoni0\n\u003e https://github.com/Maoni0\u0027s post.\n\u003e \n\u003e —\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly or view it on GitHub\n\u003e https://github.com/dotnet/coreclr/issues/4365#issuecomment-210621507\n",
                                           "updatedAt":  "2016-04-17T07:46:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMTAxNDcyMQ==",
                                           "createdAt":  "2016-04-17T13:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@mgravell you could still block-allocate those objects. Downside is they now waste 16 bytes on the object header each. Upside is you have normal managed references. No need to pass indexes and arrays around, or pointers. To clarify: This would not involve the GC at all.\n\nYou also could have managed objects living in memory shared with the GPU.\n\nI think we could make those objects copyable though memcpy if we disable any managed function based on the object header. That would be locking and the identity hash code I think. Those operations would throw. Also, this would obviate the need to call \"`Activator.Allocate`\". You could manually write the object header after asking the CLR what bits to write. The bits are the same for each object (basically just the type pointer).\n",
                                           "updatedAt":  "2016-04-17T13:14:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxOTAzMDkwOQ==",
                                           "createdAt":  "2017-07-31T10:33:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTr7eA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "griels",
                                                                               "createdAt":  "2017-07-31T11:10:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2017-07-31T16:33:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wanton7",
                                                                               "createdAt":  "2017-08-01T06:43:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2017-08-01T12:26:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ufcpp",
                                                                               "createdAt":  "2017-10-23T02:47:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DQRC69420",
                                                                               "createdAt":  "2020-10-16T05:45:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "mattwarren",
                                           "body":  "It *seems* like you may be able to achieve this if/when the work being done in the Snowflake project arrives in CoreCLR, see [Project Snowflake: Non-blocking safe manual memory management in .NET\r\nJuly 26, 2017](https://www.microsoft.com/en-us/research/publication/project-snowflake-non-blocking-safe-manual-memory-management-net/) for more info.\r\n\r\nThe code sample below is from the paper, if shows the usages of `Shield\u003cT\u003e` which implies that the allocation is on a different heap (i.e. no GC) and can be cleaned up when it\u0027s safe to do so:\r\n\r\n``` csharp\r\nT Find(Predicate\u003cT\u003e match) \r\n{\r\n    using (Shield\u003cT[]\u003e s_items = _items.Defend())\r\n    {\r\n        for (int i = 0; i \u003c _size; i++) \r\n        {\r\n            if (match(s_items.Value[i]))\r\n                return s_items.Value[i];\r\n        } \r\n    }\r\n    return default(T);\r\n}\r\n```",
                                           "updatedAt":  "2017-07-31T10:33:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTcwMjQ3OA==",
                                           "createdAt":  "2018-06-23T19:24:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roterdam",
                                           "body":  "\u003e Regardless this still doesn\u0027t integrate. If you assign this to an object field, obj.x = something_I_constructed_that_looks_like_a_managed_object, GC will attempt to trace through it and it will fail. Unless this is passed as a special type that tells GC to ignore its references. But that again doesn\u0027t make it seamless.\r\n\r\n@Maoni0 can you explain \"fail\"? I see the code @jakobbotsch working fine.",
                                           "updatedAt":  "2018-06-23T19:24:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTkzMDQ2OA==",
                                           "createdAt":  "2018-06-25T12:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@Maoni0 Custom objects could have a bit set in the object header marking them as such to the GC. That would be a cheap way to activate custom GC behavior on a per-instance (nor per-type) basis. Would that work?",
                                           "updatedAt":  "2018-06-25T12:14:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTk2NDc0MQ==",
                                           "createdAt":  "2018-06-25T14:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjp41",
                                           "body":  "@GSPP so there are several pieces of meta-data the GC keeps about objects.  If these aren\u0027t backed by actual allocations things can go wrong\r\n\r\n  1. Card Table  (Used by WriteBarrier to maintain set of cross generation pointer)\r\n  2. Concurrent Mark Array (Used by background mark phase)\r\n  3. Segment lookup (find details of this part of memory the GC controls)\r\n  4. Brick table (find start of object)\r\n\r\nNow, placing a bit in the header requires the operations to know where the header is.  This is not always the case for pointers from the stack into the heap. In particular, the write barrier does not know the header of the object it is updating, so cannot check this bit.  That means you are likely to get random segfaults when you try to write to non-existent card table.\r\n\r\nThe other data structures can also get touched based on the address, and may or may not exist for the address range you have allocated.\r\n We found it took about 1000 line addition to gc.cpp to just to maintain the relevant other data structures, and prevent the GC tracing our objects incorrectly.\r\n\r\nIf you didn\u0027t want the card table to cover the range you are managing it would be much simpler.",
                                           "updatedAt":  "2018-06-25T14:08:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAxMzIwNw==",
                                           "createdAt":  "2018-06-25T16:27:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roterdam",
                                           "body":  "@mjp41 as long as the object is allocated outside of the GC ranges, shouldn\u0027t it \"just\" work? The GC code has to check if it is within range or not no? Also what happens if you would do this for an object with no fields like strings could that work?",
                                           "updatedAt":  "2018-06-25T16:27:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAzODI3OQ==",
                                           "createdAt":  "2018-06-25T17:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTr8OA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NinoFloris",
                                                                               "createdAt":  "2018-06-29T20:27:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DQRC69420",
                                                                               "createdAt":  "2020-10-16T05:48:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mjp41",
                                           "body":  "There are of the order of 30 places that simply follow managed pointers by \r\n1. Checking if it is not null,\r\n2. Determining which heap it is on (for ServerGC)\r\n3. Performing some operation on that object\r\n\r\nSome bits do check if it is in the range of the heap, but not all of them. Many bits assume it will be able to find the GC heap/segment.\r\n\r\nIf you restrict to types that do not contain GC references (blittable types), then you would not need to deal with the card table, so it would be changing just these traversal pieces. \r\n\r\nOur prototype put everything in separate address spaces for manually managed and GC managed, which lead to a quick cheap check.  Looking in the header on every step of tracing could be expensive, and affect performance of code not using this feature.   \r\n",
                                           "updatedAt":  "2018-06-26T14:03:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RYPR-",
                                           "createdAt":  "2022-12-26T18:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-12-26T18:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ReWu1",
                                           "createdAt":  "2022-12-28T20:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiUDlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2022-12-29T03:04:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamiG42",
                                                                               "createdAt":  "2023-03-30T08:37:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-10-08T04:57:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lakani",
                                                                               "createdAt":  "2024-05-18T23:48:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I\u0027ll go ahead and keep this issue alive. This seems to be something that people are interested in.",
                                           "updatedAt":  "2022-12-28T20:58:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Td-D",
                                           "createdAt":  "2024-05-18T23:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lakani",
                                           "body":  "Ms, What are you waiting for to start on this issue or even the outcome of Snowflake project ",
                                           "updatedAt":  "2024-05-18T23:50:23Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Heap objects with custom allocator and explicit delete",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/5638",
        "createdAt":  "2016-04-16T21:49:41Z",
        "number":  5638,
        "author":  "discostu105",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAjC4pA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Misterhex",
                                            "createdAt":  "2019-02-10T10:51:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-07T01:04:33Z",
        "body":  "Let\u0027s say, you have a profiler which is loaded inside of the process via Profiling API. Let\u0027s say you want to capture the impact the GC has on your process (just the CLR in the process your profiler is loaded in). Stats that would be interesting are: Gen0,1,2,LOH collection count and duration. Which native API would I use to properly get such statistics periodically with low overhead?\n\nSome thoughts:\n- In full framework, this would be very possible via CLR Memory Performance counter metrics (\"% Time in GC\", \"gen X collections\", ect). However, perfcounters have been removed for CoreCLR.\n- Yes, there are callbacks from the Profiling API (`ICorProfilerCallback::RuntimeSuspendStarted`) that indicate \"suspensions\". However, these callbacks don\u0027t give much details on the reason of suspension (e.g. no info about which generation is being collected). Also, I am unsure about background/concurrent GC. I guess those won\u0027t trigger runtime suspensions (in all cases).\n- Then there is ETW. At first, it does not give you nice statistics, but events instead. So, you can capture events such as GCStart, GCEnd and you have to calculate the timings you want yourself. So far so good, but it seems that efficiently capturing ETW events from _within_ the process (via native API) is not an easy thing. One way seem to be \"private sessions\", but apparently, they only work via log-files that need to be parsed [0]. That seems much too complicated and too much overhead (file-IO) for _just_ getting some GC-stats.\n- In ETW, there are also so called \"real time sessions\", which seem to be more what I want (no file IO, just in-memory buffers). However, there\u0027s a global limit of how many such sessions can be active, and also it requires admin-privileges to create them. Not optimal either.\n- Browsing through the sources, I\u0027ve found `COR_GC_STATS` to be an interesting datastructure. It contains pretty much what I am looking. It\u0027s available via `CorGCHost::GetStats`. Is there any way for a profiler to get to a CorGCHost instance (if the CLR is not self-hosted)?\n\n[0] https://social.msdn.microsoft.com/Forums/en-US/2664a9cf-172a-45c3-81cc-5a4b93b3be7d/etw-private-session-without-logfile?forum=clr\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtWO29g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDkyMDczMg==",
                                           "createdAt":  "2016-04-16T22:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "discostu105",
                                           "body":  "Btw: I\u0027m not sure if it\u0027s better to ask such questions on StackOverflow or on Github. Please let me if I should use SO instead.\n",
                                           "updatedAt":  "2016-04-16T22:55:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMTcyOTU5OA==",
                                           "createdAt":  "2016-04-19T05:00:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @Maoni0 \n",
                                           "updatedAt":  "2016-04-19T05:00:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjA2MzI5NQ==",
                                           "createdAt":  "2016-04-19T18:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODea8Ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "juwens",
                                                                               "createdAt":  "2024-04-16T23:51:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "If you look deeper in some of the categories you\u0027ve mentioned, there\u0027s more info. perf counters is an exception as we made a decision to not invest more in perf counters when we did background GC in 4.0. So you get whatever support it offered before (which means not much support for background GC) when it\u0027s enabled. COR_GC_STATS works off of the perf counter info so is also not available if perf counter is not enabled.\n\nFor both profiling and ETW, you can certainly get more info -\n\nFor profiling, ICorProfilerCallback2::GarbageCollectionStarted/Finished tells you exactly when a GC starts and finishes and with a bunch of other info - the generation it collects, generation bounds and etc. \n\nFor ETW, it\u0027s a low level mechanism so by design it does not give you statistics (unless of course you are firing stats info in your events). That\u0027s why we have tools that build on top of this mechanism to give you stats. Take a look at [TraceEvent](https://blogs.msdn.microsoft.com/vancem/2013/08/15/traceevent-etw-library-published-as-a-nuget-package/) and [PerfView](https://www.microsoft.com/en-in/download/details.aspx?id=28567) which let you capture/interpret the events (in managed code) and look at stats. \n\nLet me know if these still do not solve your problems.\n",
                                           "updatedAt":  "2016-04-19T18:42:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjE0MDUyMw==",
                                           "createdAt":  "2016-04-19T21:39:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "discostu105",
                                           "body":  "Although _ICorProfilerCallback2::GarbageCollectionStarted/Finished_ would provide the information I\u0027m looking for, I know for a fact that it causes too much overhead. It needs to have a certain profiler capability enabled (_COR_PRF_MONITOR_GC_). Just by enabling it, Concurrent GC is disabled for example. Since I\u0027m looking for a low-overhead solution, this is not a (good) option for me.\n\nToo bad, _COR_GC_STATS_ does not fit, it looked so good :). Thanks for your info by the way. Also, I did not know that perfcounters don\u0027t provide good values when background GC is active, so thanks for that as well.\n\n_TraceEvent_ looks like a nice managed library for certain ETW event sources (also CLR event\u0027s I am looking for). Maybe we can extract what we need from there. Does it use [_private logger sessions_](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363689%28v=vs.85%29.aspx)? Does it apply to all other limitations of ETW (mentioned in my initial post)?\n\nWe did some fair research on ETW, and there is an in-memory mode ([real-time mode](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364080%28v=vs.85%29.aspx)), where events can be processed from memory and do not need to go to a file (which is great). But unfortunately such real-time mode session can only be made system-wide and there is a limitation of 64 sessions per system (what if I want to monitor more than 64 .net processes?). Unfortunately, that mode is not combineable with [_private logger sessions_](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363689%28v=vs.85%29.aspx) which on the other hand does not require special permissions, and where you can make isolated sessions for each process, and there is no 64 session limit. I\u0027m starting to get the feeling that ETW was not exactly made for my requirements :).\n",
                                           "updatedAt":  "2016-04-19T21:39:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjE1NjU0MQ==",
                                           "createdAt":  "2016-04-19T22:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "@brianrob \n\nWe have some tentative plans to wire all current ETW events back into managed code so that they look like and EventSource.    The idea is that events like GCStats would be available to you in-proc.  \n\nHowever this does not help you today.   As you have discovered, ETW does not really work well for \u0027self-monitoring\u0027 scenarios.     \n\nAnother possibility is that it is also reasonable for use to have a profiler API that gets called any time an ETW event happens.  This does not exist, but is reasonably straightforward addition.  With this you could use the profiler API to get at the information you want in-proc.\n\nBoth of these options requires new code to be written in coreclr, but that is what pull requests are about.  If you want to pursue either of these there should be some discussion about the details of the design first. \n",
                                           "updatedAt":  "2016-04-19T22:37:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjE1Nzg2Mg==",
                                           "createdAt":  "2016-04-19T22:43:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I have been advocating that we should have a low overhead GC profiling mode (but haven\u0027t succeeded :-) apparently this hasn\u0027t been an urgent thing to have for most of our customers who use the profiling API) - for some people it\u0027s enough to know some stats that are very cheap for the runtime to provide (eg, they don\u0027t need the root reference, or moved references and etc). And profiling has the very nice attribute of being real time. It shouldn\u0027t be much work to allow an additional mode that gives you a subset of things GC profiling currently offers (you don\u0027t have to disable concurrent GC - it was just work that hasn\u0027t been done to enable it). If you want, you are certainly welcome to open an issue for it to discuss if someone (could be yourself :)) wants work on it.\n",
                                           "updatedAt":  "2016-04-19T22:43:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjYwOTEzNA==",
                                           "createdAt":  "2016-04-20T21:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "discostu105",
                                           "body":  "All in all, it seems like there are not perfect options which will help me short-term. I guess we\u0027ll need to go with ETW for now (with it\u0027s limitations). Looking forward, the ideas you mentioned are definitively interesting to explore for future versions.\n\n@vancem \n\n\u003e We have some tentative plans to wire all current ETW events back into managed code so that they look like and EventSource. The idea is that events like GCStats would be available to you in-proc.\n\nThat certainly sounds interesting. My profiler has native+managed parts, so I could also consume stuff managed. Though, I have a slight preference for consuming such an API natively, because pure native threads are not subject to GC suspensions themself, so they would be (a little bit) more deterministic.\n\n\u003e Another possibility is that it is also reasonable for use to have a profiler API that gets called any time an ETW event happens. This does not exist, but is reasonably straightforward addition. With this you could use the profiler API to get at the information you want in-proc.\n\nSounds cool. In order to control overhead, some up-front filtering mechanism would be needed I guess. Given such a fine-grained filtering mechanism, this approach would be very flexible (and thus useful for my specific use-case). Also (not knowing the internals of ETW) my naive mind asks: where do the buffers live and how large will they be? Would this still go through Windows Kernel?\n\n@Maoni0 \n\n\u003e I have been advocating that we should have a low overhead GC profiling mode (but haven\u0027t succeeded :-) apparently this hasn\u0027t been an urgent thing to have for most of our customers who use the profiling API) - for some people it\u0027s enough to know some stats that are very cheap for the runtime to provide (eg, they don\u0027t need the root reference, or moved references and etc). And profiling has the very nice attribute of being real time. It shouldn\u0027t be much work to allow an additional mode that gives you a subset of things GC profiling currently offers (you don\u0027t have to disable concurrent GC - it was just work that hasn\u0027t been done to enable it). If you want, you are certainly welcome to open an issue for it to discuss if someone (could be yourself :)) wants work on it.\n\nWe\u0027ve actually used those detailed infos that the Profiling API provides (root references, moved references, ...), but for a very different use-case. In that use-case we would only enable COR_PRF_MONITOR_GC for a short period of time, then disable it again (which actually works since some .NET version - thanks for that :)).\n\nBut the use-case I am aiming for right now, is to know only the very basic metrics (gen x collection count, duration and as well size of all heaps). I just want to report these metrics periodically (every X seconds), that\u0027s it. So, some API which just gives me a struct with those values would be sufficient.\n\nOne question by the way: If any of those features discussed here would be implemented for CoreCLR, would it flow back to Full CLR and be released with some future version? Is it basically the same code with different ifdef definitions or is there a very separate repository for it?\n",
                                           "updatedAt":  "2016-04-20T21:18:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjczMjcwOA==",
                                           "createdAt":  "2016-04-21T04:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "Whether a feature flows back to full clr is determined case by case - it\u0027s all based on how much value it can bring to full clr customers and how much work it takes to flow back.\n",
                                           "updatedAt":  "2016-04-21T04:19:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTUwNzA3Mw==",
                                           "createdAt":  "2018-04-07T23:42:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mleenhardt",
                                           "body":  "I wanted to bump this and ask whether anything had changed on this topic? Specifically, is there any way to get GC stats from within the process? My environment is .NET Core running on Linux.\r\n\r\nI\u0027m aware of `GC.CollectionCount` which does provide some info. I was however interested in collecting metrics on the amount of time and percentage of total CPU time spent in the GC. These seem to be  really important data points that you\u0027d want to be able to monitor over time when working on performance sensitive applications and I was surprised to not have this available. \r\n\r\nMy current plan is to have a side care process running a profiling session and reporting various metrics (using perf and LTTng) about the monitored process. Is there an easier way that I missed to go about doing this? Being used to simply querying Performance counters on Windows, I really wish there was.",
                                           "updatedAt":  "2018-07-26T05:04:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTgwODU0NA==",
                                           "createdAt":  "2018-04-09T16:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@lmeenhardt, using perf and/or LTTng is a reasonable way to go about this, especially if you want very detailed information.  This has been done before by others as well.  There are APIs to get the collection count as well as the amount of memory that has been allocated on the current thread, but if you want data per-GC then LTTng is likely your best bet.  Note that if you don\u0027t care about collecting CPU and/or blocked time stacks then you just need LTTng.  It can give you all of the runtime events as well as kernel events without stacks.\r\n\r\nAlso, as @vancem noted above, we are moving towards making all of the runtime events, including GC events, available in-process through EventListeners.  There has been much work done on the internals of the runtime and logging infrastructure to make this possible, but we are not there yet.  You can read some about the plans at https://github.com/dotnet/designs/blob/master/accepted/cross-platform-performance-monitoring.md.",
                                           "updatedAt":  "2018-04-09T16:16:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODQxMTIwNA==",
                                           "createdAt":  "2018-06-19T14:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cesna",
                                           "body":  "@mleenhardt did your plan worked? (side care process with LTTng) Or maybe you found an easier solution? I am facing same challenge now. Looking for ways to get  GC \"perf counters\" on Linux.  ",
                                           "updatedAt":  "2018-06-19T14:06:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODQ1MDU2Mg==",
                                           "createdAt":  "2018-06-19T15:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mleenhardt",
                                           "body":  "Haven\u0027t gotten around working on this yet but unless there is now something better, that\u0027s still the plan.",
                                           "updatedAt":  "2018-06-19T15:54:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODU4NDUwNQ==",
                                           "createdAt":  "2018-06-20T00:14:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "The work I described above around exposing runtime data through EventListener is in-progress and so hopefully by the time you\u0027re ready it will be as well.  I don\u0027t have an ETA yet though.",
                                           "updatedAt":  "2018-06-20T00:14:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNzQwNDM5NQ==",
                                           "createdAt":  "2018-07-24T13:22:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ocoster-ff",
                                           "body":  "I have a need for a similar feature as @mleenhardt - I will need to collect different GC stats in-proc in a cross platform manner (so a side-car LTTng process won\u0027t *quite* cut it...).",
                                           "updatedAt":  "2018-07-24T13:22:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNzk2OTYwOA==",
                                           "createdAt":  "2018-07-26T04:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "can you tell me how you would use the CPU time spent in GC if it was available? obviously, some of this CPU time was consumed while the user threads were running while the rest wasn\u0027t. if you can tell me the usage scenario it would be helpful to understand if the CPU time spent in GC is the right thing to provide.",
                                           "updatedAt":  "2018-07-26T04:02:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzUzMzgzNA==",
                                           "createdAt":  "2020-08-13T15:07:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kalikin",
                                           "body":  "In our native (`ICorProfilerCallback`) profiler we want to collect stats, like GC count and generation sizes, in real time. \r\nIt seems, the easiest way to do that, is to enable `COR_PRF_MONITOR_GC` or `COR_PRF_HIGH_BASIC_GC` flags and call [GetGenerationBounds](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo2-getgenerationbounds-method) in [GarbageCollectionFinished](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method) callback.  \r\n\r\nI am concerned that permanently enabled `COR_PRF_MONITOR_GC` flag may introduce significant overhead on runtimes where the newer flag is not supported  (https://github.com/dotnet/coreclr/pull/22866). After reading comments here I assumed, that ETW can be a good alternative.  But I heard that some ETW events also have overhead.  \r\n\r\nMy question is does enabling ETW session and listening events hurt CLR performance in any way, or it\u0027s overhead on the runtime is much lower than of `COR_PRF_MONITOR_GC`. I\u0027m only interested in *GCStart/Stop*, *GCHeapStats*; real time mode.\r\n",
                                           "updatedAt":  "2020-08-13T15:07:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzYzMDgyMw==",
                                           "createdAt":  "2020-08-13T18:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "If you just capture GC events, then I would expect that the overhead of the ETW events is going to be much lower than using the profiler API, which is much more invasive in how it impacts runtime execution.  The cost of ETW events on the process is directly proportional to how many events are emitted and the cost of producing the payload to be emitted.  These GC events are quite low in verbosity, and the arguments don\u0027t cost much to produce.  There are others, such as the GC heap survival and movement events that are much more verbose, and also extend GC pauses.  This would be an example of an event that has a much higher impact.  But for what you\u0027re trying to do, expect the overhead to be minimal.",
                                           "updatedAt":  "2020-08-13T18:10:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4ODQxNDUzMg==",
                                           "createdAt":  "2020-09-07T16:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kalikin",
                                           "body":  "Is it possible, using native profiler API or ETW, get the measurement, which corresponds to the **# Total committed Bytes**  [performance counter](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/performance-counters#memory-performance-counters)?\r\n\u003e Displays the amount of virtual memory, in bytes, currently committed by the garbage collector.  \r\n\u003e Committed memory is the physical memory for which space has been reserved in the disk paging file.\r\n\r\nAs I understand, this value represents heap memory allocated by the GC for all generations. \r\nThat\u0027s what we would like to show in our memory chart together with used heap memory.\r\nIt seems that neither *GCHeapStats* event in ETW nor [GetGenerationBounds](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo2-getgenerationbounds-method) provides this information. Thanks in advance.\r\n",
                                           "updatedAt":  "2020-09-07T16:08:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTEwMjE1Ng==",
                                           "createdAt":  "2020-09-08T19:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "there is something in the ETW event that tells you this info, it\u0027s called [ExtraGen0Commit](https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Parsers/ClrTraceEventParser.cs#L5131) in the per heap history event. this is how much is committed on top of the heap size info you already get (ie, on the GCHeapStats). please note that in .NET 5 we may decommit memory while the user threads are running. so this was the data at the end of a GC, you can think of it as the peak committed usage before that GC happened. \r\n\r\nif you are using .NET 5 there\u0027s another way to get this data which is the TotalCommittedBytes property of the `GCMemoryInfo` struct. You can get this by calling the GC.GetGCMemoryInfo API but only the 5.0 version provides this info.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-09-08T19:54:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjgxNDgyOQ==",
                                           "createdAt":  "2020-09-22T15:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@discostu105 @kalikin does the new property on GCMemoryInfo help with your requirements? ",
                                           "updatedAt":  "2020-09-22T15:59:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMTQxMjkxNA==",
                                           "createdAt":  "2020-09-30T14:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kalikin",
                                           "body":  "@mangod9 I haven\u0027t researched this feature yet, because it is a managed API and, aside from a few instrumentations, our profiler is unmanaged. And I\u0027m not sure how and when to start a managed thread from a profiler - is there an official documentation on that topic?",
                                           "updatedAt":  "2020-09-30T14:05:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTA5MjM4NQ==",
                                           "createdAt":  "2020-12-21T17:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonso4",
                                           "body":  "It looks like there is a now a way to get GC events in-process through the new runtime event source. However, how can I get the duration of a GC? I can\u0027t seem to find a way to correlate the GCEnd events and the GCStart events. I would like to get \"percent time in GC\" like the counter that is available in .NET Framework.",
                                           "updatedAt":  "2020-12-21T17:17:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Mjg4MDY0MQ==",
                                           "createdAt":  "2020-12-31T07:56:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "Maybe the runtime GC events would help, see the docs for details \u003chttps://docs.microsoft.com/en-us/dotnet/fundamentals/diagnostics/runtime-garbage-collection-events\u003e, and you can take this project as an example.",
                                           "updatedAt":  "2020-12-31T07:56:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Mzc1MzQ0Nw==",
                                           "createdAt":  "2021-01-04T04:47:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e I would like to get \"percent time in GC\" like the counter that is available in .NET Framework.\r\n\r\n@jonso4 there are various ways you can get it -\r\n\r\n+ TraceEvent calculates the [GC pause duration](https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Computers/TraceManagedProcess.cs#L1812) for each GC. and you\u0027ll need to then calculate the % yourself.\r\n\r\n+ GetGCMemoryInfo (the 5.0 version) has a [PauseTimePercentage property](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/GCMemoryInfo.cs#L196). this is the closest to the \"% time in GC\" counter but more accurate for BGC.\r\n\r\nif you can\u0027t use either you\u0027ll need to calculate it yourself - the event sequence is described [here](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#gc-event-sequence) and you can look at TraceEvent src to see how it calculate it. for blocking GCs this is trivial; for BGCs not so much.",
                                           "updatedAt":  "2021-01-04T04:47:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61Y7b2",
                                           "createdAt":  "2025-07-07T01:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  ".NET 9 introduced runtime metrics, it may be helpful\n\nhttps://learn.microsoft.com/en-us/dotnet/core/diagnostics/built-in-metrics-runtime#metric-dotnetgccollections",
                                           "updatedAt":  "2025-07-07T01:04:19Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Profiling: How to get GC Metrics in-process",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/5931",
        "createdAt":  "2016-05-24T21:02:37Z",
        "number":  5931,
        "author":  "JeffCyr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDsQkQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Danthar",
                                            "createdAt":  "2016-05-25T07:52:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alxbl",
                                            "createdAt":  "2016-05-25T12:08:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2016-05-26T10:32:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "karaziox",
                                            "createdAt":  "2016-08-04T14:01:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kparadis",
                                            "createdAt":  "2016-08-04T14:28:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stonkie",
                                            "createdAt":  "2016-08-04T14:28:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asik",
                                            "createdAt":  "2016-08-04T16:07:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tannergooding",
                                            "createdAt":  "2017-07-21T20:29:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vermorel",
                                            "createdAt":  "2019-02-12T11:18:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmitriyse",
                                            "createdAt":  "2020-01-11T21:45:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PathogenDavid",
                                            "createdAt":  "2021-03-16T17:46:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Charlieface",
                                            "createdAt":  "2025-06-11T23:41:57Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-09-11T05:57:10Z",
        "body":  "There are some optimizations not available with managed code in .Net because there are currently no ways to enforce a memory alignment greater than the pointer size:\n- Interlocked 64bit in x86 process when the underlying OS is 64bit (See discussion in issue dotnet/runtime#4811)\n- Interlocked 128bit\n- Cache line alignment optimizations\n\nI have no idea if this is easy or hard in the current coreclr design, but it would be nice to have a `MemoryAlignmentAttribute` that could specify alignment minimally on class type and possibly on any class/struct/field.\n\nMy motivation for this feature would be to implement an UnfairSemaphore (#2383) that isn\u0027t randomly inefficient in x86 when its 64bit state crosses a cache line boundary.\n\nI have created a gist to isolate the consequences of unaligned Interlocked:\nhttps://gist.github.com/JeffCyr/9e162f440e30b567507cc95b6ba5a4a4\n\nOn my machine, unaligned Interlocked operation can be 61x slower.\n\r\ncategory:proposal\r\ntheme:alignment\r\nskill-level:expert\r\ncost:large\r\nimpact:medium",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw2RvMw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMTQwNzIwNg==",
                                           "createdAt":  "2016-05-24T21:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@JeffCyr, what about `[StructLayout(LayoutKind.Sequential, Pack = 16)]` (types are in the `System.Runtime.InteropServices` namespace)?\n",
                                           "updatedAt":  "2016-05-24T21:29:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMTQxMDQzOA==",
                                           "createdAt":  "2016-05-24T21:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffCyr",
                                           "body":  "@tannergooding The Pack parameter won\u0027t affect the base address of the object.\n",
                                           "updatedAt":  "2016-05-24T21:42:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxOTE1NTU4MA==",
                                           "createdAt":  "2017-07-31T18:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I created a proposal on the CoreFX side here: https://github.com/dotnet/corefx/issues/22790",
                                           "updatedAt":  "2017-07-31T18:29:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNTg5MTY2Mw==",
                                           "createdAt":  "2017-10-11T17:44:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffCyr",
                                           "body":  "It has been mentioned that this feature would require major changes to implement in the GC.\r\n\r\nDo you think it would worth it to have a global App.Config setting to force 8 byte alignment of all ref types for x86 process running in a x64 OS?\r\n\r\nThis should be a lot simpler to implement and it resolves the random perf of Int64 in x86 processes. (e.g. dotnet/runtime#4811)",
                                           "updatedAt":  "2017-10-11T17:44:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNTg5NTc2OQ==",
                                           "createdAt":  "2017-10-11T17:58:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "As I understand, @Maoni0 and @swgillespie are the GC people to tag on these issues",
                                           "updatedAt":  "2017-10-11T17:58:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNTk1MDIxMg==",
                                           "createdAt":  "2017-10-11T21:13:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "if you want all objects to have a different alignment that\u0027s trivial to implement - we have an Align function that enforces the alignment and is called by every place that calculates the size of an object but does introduce perf penalty as the alignment is no longer a const; if you want the alignment to be a property of a type (which is what FEATURE_STRUCTALIGN implements) that\u0027s certainly much more work (the implementation of FEATURE_STRUCTALIGN is incomplete right now) but also has perf penalty as already pointed out on the other thread.\r\n\r\nthere needs to be a cost-benefit analysis.",
                                           "updatedAt":  "2017-10-11T21:13:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNTk1NDk1OA==",
                                           "createdAt":  "2017-10-11T21:32:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffCyr",
                                           "body":  "What about just changing the x86 alignment to 8-bytes instead of 4-bytes? The memory increase should be marginal no? And since x86 processors don\u0027t really exist anymore, all x86 app could perform better if the alignment match the processor architecture.",
                                           "updatedAt":  "2017-10-11T21:32:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjMxNDQ2NQ==",
                                           "createdAt":  "2017-10-13T00:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hanblee",
                                           "body":  "\u003e What about just changing the x86 alignment to 8-bytes instead of 4-bytes? \r\n\r\nThis seems to be an overkill for what you are trying to achieve, and I don\u0027t think the memory increase would be marginal. Moreover, this would not help with \"Cache line alignment optimizations\" goal listed above.\r\n\r\n\u003e And since x86 processors don\u0027t really exist anymore, all x86 app could perform better if the alignment match the processor architecture.\r\n\r\nI don\u0027t follow this statement. For best performance, the recommendation is to align data on natural alignment boundaries.\r\n\r\n",
                                           "updatedAt":  "2017-10-13T00:07:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjMyNzgyNw==",
                                           "createdAt":  "2017-10-13T01:48:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeffCyr",
                                           "body":  "@hanblee \r\n\u003eThis seems to be an overkill for what you are trying to achieve, and I don\u0027t think the memory increase would be marginal\r\n\r\nI don\u0027t see how changing to 8-bytes alignment in x86 could increase the memory usage significantly. The worst case is +4 bytes per object, so 4MB per million objects.\r\n\r\n\u003eI don\u0027t follow this statement. For best performance, the recommendation is to align data on natural alignment boundaries.\r\n\r\nI meant that nowadays, all x86 application run on a x64 CPU. So if all objects base address is 8-byte aligned, it guarantees that all 8 byte types are 8-byte aligned matching the underlying x64 CPU natural alignment.\r\n\r\nAnyway, you\u0027re right that this proposition doesn\u0027t address the original issue, this conversation could be continued in another issue.",
                                           "updatedAt":  "2017-10-13T01:48:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNjMzMTQ2NQ==",
                                           "createdAt":  "2017-10-13T02:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e I don\u0027t see how changing to 8-bytes alignment in x86 could increase the memory usage significantly. The worst case is +4 bytes per object, so 4MB per million objects.\r\n\r\nthe average size of objects on x86, according to analysis we did, was about 35 bytes, so a 4-byte increase is \u003e10%. that is significant. ",
                                           "updatedAt":  "2017-10-13T02:17:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNzEwODIxNg==",
                                           "createdAt":  "2017-10-17T03:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Drawaes",
                                           "body":  "Worst case, if its 4 byte aligned and the law of large numbers kicks in then its 2 bytes average so ~ 5.7% still possibly significant... ",
                                           "updatedAt":  "2017-10-17T03:35:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RNAXT",
                                           "createdAt":  "2022-12-22T03:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere are some optimizations not available with managed code in .Net because there are currently no ways to enforce a memory alignment greater than the pointer size:\n- Interlocked 64bit in x86 process when the underlying OS is 64bit (See discussion in issue dotnet/runtime#4811)\n- Interlocked 128bit\n- Cache line alignment optimizations\n\nI have no idea if this is easy or hard in the current coreclr design, but it would be nice to have a `MemoryAlignmentAttribute` that could specify alignment minimally on class type and possibly on any class/struct/field.\n\nMy motivation for this feature would be to implement an UnfairSemaphore (#2383) that isn\u0027t randomly inefficient in x86 when its 64bit state crosses a cache line boundary.\n\nI have created a gist to isolate the consequences of unaligned Interlocked:\nhttps://gist.github.com/JeffCyr/9e162f440e30b567507cc95b6ba5a4a4\n\nOn my machine, unaligned Interlocked operation can be 61x slower.\n\r\ncategory:proposal\r\ntheme:alignment\r\nskill-level:expert\r\ncost:large\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJeffCyr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `design-discussion`, `area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-22T03:28:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DR-sJ",
                                           "createdAt":  "2025-09-10T19:36:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitry-azaraev",
                                           "body":  "\u003e Worst case, if its 4 byte aligned and the law of large numbers kicks in then its 2 bytes average so ~ 5.7% still possibly significant...\n\nIs not worst case at all. Worst case - is what alignment is needed to avoid false sharing on same cache line. .NET libraries in such cases simply put enermous paddings, in size (e.g. padding twice bigger than cache line), and this caused only because allocator is 4-byte aligned instead of follow normal alignment rules. Both ways are not ideal, but there is serious issue: code which fight with false sharing - definitely want atomic read, but invalid alignment prevent do it. On result (sorry, i forget which type exactly), instead of 64 x 3 bytes tooks 256 x 3 or so. It is idiotical situation, where workaround saves from false sharing by cost of compactness and allow read value from two cache lines at once, what again incorrect. All of this solves with using correct alignment on heap, which fits type requirements.",
                                           "updatedAt":  "2025-09-10T19:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSMXu",
                                           "createdAt":  "2025-09-10T19:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Oversizing an allocation makes no impact to false sharing.\n\nIf you do a regular (temporal) read, no matter how small, the CPU will pull a full cache line. A write will likewise only write what you require (but may combine neighboring writes to the same cache line for efficiency), so as long as you aren\u0027t writing those extra \"padding\" bytes as part of your operation then it isn\u0027t an issue.\n\nSharing issues come from two cores touching the same cache line, which is why such allocations are oversized to prevent said sharing concerns because it ensures each core only gets one cache line. If it\u0027s truly perf critical, many options such as `NativeMemory.AlignedAlloc` exist.\n\n",
                                           "updatedAt":  "2025-09-10T19:58:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSRv0",
                                           "createdAt":  "2025-09-10T20:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitry-azaraev",
                                           "body":  "\u003e Oversizing an allocation makes no impact to false sharing.\n\nIt surely has. Imagine you need 3 non-shared fields. To achieve efficiently this - you need align fields on cache-line size. Current .NET code simply put additional padding between fields effectively oversizing really required type size. This is because current (released versions) have no alignment. Paddings are save from false sharing but don\u0027t save from reads in-between cache lines because of object alloc alignment.",
                                           "updatedAt":  "2025-09-10T20:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSU9t",
                                           "createdAt":  "2025-09-10T20:12:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitry-azaraev",
                                           "body":  "\u003e Sharing issues come from two cores touching the same cache line, which is why such allocations are oversized to prevent said sharing concerns because it ensures each core only gets one cache line. If it\u0027s truly perf critical, many options such as `NativeMemory.AlignedAlloc` exist.\n\nAnyone can alloc native memory without special APIs. But you can\u0027t have gc refs here, so please, it is not argument. It is even not workaround, and in fact most of time such solutions doesnt work really better, than using .NET heap, the only thing is topic - some things needs alignment. What you argue? Can it work without? Yes. Effectively - absolutely not.",
                                           "updatedAt":  "2025-09-10T20:12:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DS3-h",
                                           "createdAt":  "2025-09-10T20:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Current .NET code simply put additional padding between fields effectively oversizing really required type size\n\nYes, and provided you don\u0027t write the padding (which you shouldn\u0027t be) then there is no false sharing. Each field gets its own cache line, the same as you would have for explicit alignment and you only write the bytes for the fields in question (not the unused padding space), again the same as you would for explicit alignment. \n\nThe only difference is \"where\" the padding bytes are. With explicit alignment you always have `_field` starting at offset 0 of the cache line and then you have `sizeof(CacheLine) - sizeof(_field)` padding bytes. With the manual padding definition, you may end up with those padding bytes split around the `_field` since it could appear \"anywhere\" in the cache line instead.\n\n\u003e But you can\u0027t have gc refs here\n\nWhich is fine for the majority of scenarios. There are plenty of alternative workarounds for the scenarios that do require GC refs and when done properly they behave with the exact same efficiency as explicit alignment would allow; it just requires a bit more effort to achieve.",
                                           "updatedAt":  "2025-09-10T20:53:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DYxNl",
                                           "createdAt":  "2025-09-11T05:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavelCibulka",
                                           "body":  "Does the GC already handle alignment for Vector512? When C# supports union structs, would it be possible to use a union struct containing a Vector512 to ensure proper alignment?",
                                           "updatedAt":  "2025-09-11T05:46:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DZG8z",
                                           "createdAt":  "2025-09-11T05:57:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The .NET GC doesn\u0027t do alignment over 8 bytes today. The stack will end up correctly aligning vector types in most scenarios and they will be padded correctly for both value and reference type scenarios.\n\nC# unions may not end up allowing or guaranteeing overlapping fields and doing such things typically pessimize memory and other accesses more than it benefits, so it likely wouldn\u0027t be desirable to do that even if it did happen to work.",
                                           "updatedAt":  "2025-09-11T05:57:10Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Add support for memory alignment",
        "labels":  [
                       "enhancement",
                       "design-discussion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/5933",
        "createdAt":  "2016-05-24T21:38:23Z",
        "number":  5933,
        "author":  "wtgodbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-24T12:33:21Z",
        "body":  "We need this script to update info in the Versions github repo when we publish packages to myget.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSzFLKQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMTQwOTQ4Mw==",
                                           "createdAt":  "2016-05-24T21:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "https://github.com/dotnet/coreclr/pull/5199 should resolve this\n",
                                           "updatedAt":  "2016-05-24T21:38:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBFhg",
                                           "createdAt":  "2022-09-26T20:19:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trylek",
                                           "body":  "@dotnet/gc - @eduardo-vp\u0027s PR\r\n\r\nhttps://github.com/dotnet/runtime/pull/75363/files\r\n\r\ntries to remove this closed issue and hits failures in the previously disabled tests:\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=28045\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=599430\u0026resultId=110132\u0026paneView=debug\r\n\r\nThis issue is pretty old, could someone familiar with these tests take a look and try to assess whether the failures in the tests still hit this old issue or something new?\r\n\r\nThanks a lot\r\n\r\nTomas",
                                           "updatedAt":  "2022-09-26T20:19:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LMQgK",
                                           "createdAt":  "2022-09-28T21:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trylek",
                                           "body":  "I\u0027m reopening this issue for tracking purposes before the new failure is triaged and understood so that Eduardo can finish his PR I believe to be general goodness.",
                                           "updatedAt":  "2022-09-28T21:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LMUsp",
                                           "createdAt":  "2022-09-28T22:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trylek",
                                           "body":  "Example failures on Linux x64 without CG2:\r\n\r\n\u003cpre\u003e\r\n    GC/LargeMemory/API/gc/getgeneration/getgeneration.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.LargeMemory/API/gc/getgeneration/getgeneration.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false getgeneration.dll \u00272048\u0027\r\n      getGeneration passed\r\n      0\r\n      getGenerationWR failed\r\n      Test failed\r\n      Expected: 100\r\n      Actual: 0\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n    GC/Features/LOHFragmentation/lohfragmentation/lohfragmentation.sh [FAIL]\r\n      /root/helix/work/workitem/e/GC/Features/LOHFragmentation/lohfragmentation/lohfragmentation.sh: line 412: 10449 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Features/LOHFragmentation/lohfragmentation/lohfragmentation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false lohfragmentation.dll \u0027\u0027\r\n      Expected: 100\r\n      Actual: 137\r\n      END EXECUTION - FAILED\r\n\u003c/pre\u003e\r\n\r\n\u003cpre\u003e\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Coverage/271010/271010.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false 271010.dll \u0027\u0027\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Coverage/271010/271010.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Coverage._271010_271010_._271010_271010_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n      Output:\r\n        \r\n        Return code:      1\r\n\u003c/pre\u003e\r\n\r\nThere are some more cases that manifest as timeouts, it\u0027s unclear to me at this moment whether the timeouts are infrastructural or also somehow related to this problem.",
                                           "updatedAt":  "2022-09-28T22:20:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Port UpdatePublishedVersions.ps1 from corefx to coreclr",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/6051",
        "createdAt":  "2016-06-07T02:36:53Z",
        "number":  6051,
        "author":  "sergiy-k",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-09T23:21:01Z",
        "body":  "On Windows GC receives Low Memory notifications from the OS. Such functionality does not seem to exist on Unix. We need to investigate ideas how to deliver such information to the GC (user-mode polling strategy?) to help alleviate OOM and/or changes to allocation behaviors to reduce our OOM killer score on the process.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIGOkRQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NjMxMjAwMw==",
                                           "createdAt":  "2016-09-12T10:46:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "It looks like there is no low memory notification API in Linux and the only way is to poll /proc/meminfo regularly.\n",
                                           "updatedAt":  "2016-09-12T10:46:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMDYyMzExNw==",
                                           "createdAt":  "2017-08-07T10:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "itsjbe",
                                           "body":  "The Same thing is happening on LXD. I had a quick chat with @janvorli at WUG Brno last week and he had pointed this issue out. Should I report it as a different issue?\r\n```\r\nroot@brnpreQA:~# lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 16.04.2 LTS\r\nRelease:        16.04\r\nCodename:       xenial\r\n```\r\n\r\n```\r\nroot@brnpreQA:~# lxc version\r\n2.12\r\n```",
                                           "updatedAt":  "2017-08-07T10:03:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjE0NTE4Nw==",
                                           "createdAt":  "2017-08-14T09:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@jbednarik1 actually, I was thinking about your issue after we\u0027ve met and I\u0027ve realized in your case, it might be a different issue that was fixed for 2.0.0. But I am not sure if you\u0027ve said you were hitting it with 2.0.0 or with previous versions.",
                                           "updatedAt":  "2017-08-14T09:40:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNTE4NzMyOQ==",
                                           "createdAt":  "2017-08-27T09:29:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "itsjbe",
                                           "body":  "Hi @janvorli. It seems to me we have solved our issue by setting GC to workstation mode. \r\nFeel free to check https://github.com/dotnet/coreclr/issues/9719, if you\u0027d be interested. Thank you anyway. Cheers!",
                                           "updatedAt":  "2017-08-27T09:29:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MjA0MzQ2Nw==",
                                           "createdAt":  "2018-05-25T12:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEJnfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ciprianpopask",
                                                                               "createdAt":  "2018-08-21T22:12:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shahid-pk",
                                                                               "createdAt":  "2018-10-10T09:34:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omajid",
                                                                               "createdAt":  "2020-05-13T23:37:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "janvorli",
                                           "body":  "We can add the polling into the finalizer thread\u0027s `FinalizerThread::WaitForFinalizerEvent` where we check the low memory notification event for windows. On Linux, the `WaitForMultipleObjectsEx` already has a timeout that\u0027s used for heap dump trigger checks. This timeout is currently set to 10 seconds. We could change it to a lower value (e.g. 100ms - this would need to be determined experimentally based on the impact on the CPU load) and then poll the memory consumption each time it timeouts. We would also need to change the `#ifdef` to just `FEATURE_PAL`. If we find that the consumption is approaching the physical memory limit, we would do the same thing that we do for the `kLowMemoryNotification` event.\r\nWe would still want to keep the heap dump trigger to be checked with the original frequency of 10 secs (but only for `defined(__linux__) \u0026\u0026 defined(FEATURE_EVENT_TRACE)` to keep the behavior unchanged). This can be easily achieved by a counter counting the timeouts of the wait and checking the `g_TriggerHeapDump` only when the counter multiplied by the new timeout would reach the 10 secs. Or we can make it more responsive to the `g_TriggerHeapDump` - instead of checking it on a fixed interval, we would check it on each timeout, unless the previous heap dump was triggered less than 10 secs ago.\r\n\r\nFor polling the current memory consumption, we can use the `PAL_GetWorkingSetSize` function.\r\nFor getting the physical memory limit, we can use the `PAL_GetRestrictedPhysicalMemoryLimit`. This function works correctly even in docker container with physical memory limit being set. But it is quite heavy in parsing the cgroups files and so we should read it just once and keep it for the whole lifetime of coreclr.\r\n\r\nAs for the threshold to trigger GC, we should probably use a percentage of the physical memory limit. We could make the percentage configurable via a new COMPlus_xxxx variable. We can try to set the default to something like 75%.\r\n\r\nTo test the effect of the change, a simple application that allocates e.g. a byte array of a large size (e.g. 10 MB) in a loop and assigns it to the same variable, waiting for say 0.5 secs between the allocations would probably work. Running this application in a docker container with memory limited to e.g. 100MB on a host system with swap disabled and OOM killer enabled would result in the application getting killed without this change, but should result in its infinite survival with this change.",
                                           "updatedAt":  "2018-05-25T12:31:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MDAzMjgxMQ==",
                                           "createdAt":  "2018-11-19T20:35:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kriskalish",
                                           "body":  "Is there any plan to assign a milestone for this? I believe low memory notifications would resolve issues I\u0027m having while running services in Docker that deal with a high volume of requests. \r\n\r\nI\u0027m currently working around it by invoking the garbage collector manually on a schedule.",
                                           "updatedAt":  "2018-11-19T20:36:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMjU1NDYxNA==",
                                           "createdAt":  "2019-08-19T12:41:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alefranz",
                                           "body":  "Has anything changed around this in .NET Core 3.0?\r\nLooking at the issue tracker I get the impression that some work has been done for docker, but what about regular servers/VMs?\r\nIs there any special setting needed to have the GC invoked and avoid the memory to grow until it get OOM-killed?\r\n",
                                           "updatedAt":  "2019-08-19T12:41:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDU1MTc3Mg==",
                                           "createdAt":  "2019-08-24T13:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvMZ3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2019-08-25T01:33:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alefranz",
                                           "body":  "OK, I was wrong, the GC is taking by default into accounts memory limits outside of containers as well, as pointed out to me by @Maoni0 on Twitter https://twitter.com/maoni0/status/1164939641352404992?s=20",
                                           "updatedAt":  "2019-08-24T13:50:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MzQwMTAyOQ==",
                                           "createdAt":  "2019-10-17T23:08:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEJoHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omajid",
                                                                               "createdAt":  "2020-05-13T23:39:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "been talking to @lpereira about the PSI stuff on linux and he believes we can implement the low mem notification on linux that way. CC @janvorli ",
                                           "updatedAt":  "2019-10-17T23:08:57Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Low memory notifications for GC on Unix",
        "labels":  [
                       "Hackathon",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77618",
        "createdAt":  "2016-10-30T14:19:31Z",
        "number":  77618,
        "author":  "mogmios",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-22T15:45:33Z",
        "body":  "In .NET or C# is there any standard cross-platform way to receive a low memory notice before actually running out of memory? With Xamarin you can use DidReceiveMemoryWarning and there seems to be a couple methods specific to Windows that appear to throw mystery errors when I try to use them.\n\nI thought there might be some sort of event I could listen for but I\u0027m not finding one. Simply marking fields with some sort of LowMemoryAction attribute seemed a possibility also but didn\u0027t find anything like that either.\n\nFor example, I have an object that computes an expensive operation for a FileSystemInfo object and which will run recursively to children if it represents a directory. I cache the result of the operation to speed up repeated calls but the operation can be redone without problem if need be. I\u0027d like to be able to clear this cache if memory gets low. Currently using MemoryCache but it\u0027s not a very good solution.\n\nA standard way to handle this and other system events seems important as .NET appears to be moving towards being much more cross-platform friendly.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWDQkwA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyOTU0NjcyMjk=",
                                           "createdAt":  "2016-10-30T18:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iam3yal",
                                           "body":  "This is the Roslyn repo aka \".NET Compiler Platform\" and what you\u0027re asking is kinda irrelevant to this repo, however, you can try this repo [CoreFx](https://github.com/dotnet/corefx/issues) or even this [CoreCLR](https://github.com/dotnet/coreclr/issues).\n\nI don\u0027t know why Xamarin throws, well you probably refer to Mono not Xamarin but on Windows there\u0027s a low-level API called `CreateMemoryResourceNotification`, you can try that.\n",
                                           "updatedAt":  "2016-10-30T18:07:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyOTU0NjcyMzM=",
                                           "createdAt":  "2016-11-01T15:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mogmios",
                                           "body":  "Ok, I\u0027ll look at those places. And will look at CreateMemoryResourceNotification.\n\nJust for completeness, it was MemoryManager AppMemoryUsageDecreased and most of the related functionality that would compile ok but then throw errors at runtime that didn\u0027t seem to make any sense. Happened when registering any of the events and with most method calls.\n",
                                           "updatedAt":  "2016-11-01T15:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NN0L7",
                                           "createdAt":  "2022-10-28T21:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-28T21:06:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NRFpQ",
                                           "createdAt":  "2022-10-30T18:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn .NET or C# is there any standard cross-platform way to receive a low memory notice before actually running out of memory? With Xamarin you can use DidReceiveMemoryWarning and there seems to be a couple methods specific to Windows that appear to throw mystery errors when I try to use them.\n\nI thought there might be some sort of event I could listen for but I\u0027m not finding one. Simply marking fields with some sort of LowMemoryAction attribute seemed a possibility also but didn\u0027t find anything like that either.\n\nFor example, I have an object that computes an expensive operation for a FileSystemInfo object and which will run recursively to children if it represents a directory. I cache the result of the operation to speed up repeated calls but the operation can be redone without problem if need be. I\u0027d like to be able to clear this cache if memory gets low. Currently using MemoryCache but it\u0027s not a very good solution.\n\nA standard way to handle this and other system events seems important as .NET appears to be moving towards being much more cross-platform friendly.\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emogmios\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-30T18:47:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNCTA",
                                           "createdAt":  "2023-03-22T15:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cshung ",
                                           "updatedAt":  "2023-03-22T15:45:32Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Low memory handling?",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/6919",
        "createdAt":  "2016-11-01T16:07:03Z",
        "number":  6919,
        "author":  "mogmios",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-09T09:27:42Z",
        "body":  "In CLR / .NET / C# is there any standard cross-platform way to receive a low memory notice before actually running out of memory? With Xamarin you can use DidReceiveMemoryWarning and there seems to be a couple methods specific to Windows that don\u0027t seem to work even on Windows.\r\n\r\nMemoryManager AppMemoryUsageDecreased and most of the related functionality will compile ok but then throw mystery errors at runtime that don\u0027t seem to make any sense or be explained by Googling. Happened when registering any of the events and with most method calls.\r\n\r\nI thought there might be some sort of event I could listen for but I\u0027m not finding one. Simply marking fields with some sort of LowMemoryAction attribute seemed a possibility also but didn\u0027t find anything like that either.\r\n\r\nFor example, I have an object that computes an expensive operation for a FileSystemInfo object and which will run recursively to children if it represents a directory. I cache the result of the operation to speed up repeated calls but the operation can be redone without problem if need be. I\u0027d like to be able to clear this cache if memory gets low. Currently using MemoryCache but it\u0027s not a very good solution.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPBjawA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1ODk5Njg3Nw==",
                                           "createdAt":  "2016-11-07T23:26:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "We don\u0027t provide anything like this from the GC. As you noticed, there are things from other higher level components that chose to provide such notifications themselves which may or may not work for you. \n\nI am not aware of any xplat ways. You could of course detect memory load on the machine yourself (on Windows this is via GlobalMemoryStatusEx which is what GC uses). \n",
                                           "updatedAt":  "2016-11-07T23:26:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTgwMzExNQ==",
                                           "createdAt":  "2016-11-10T20:48:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Note that in Linux, for example, there is no way for the system to warn you that it is running out of memory.\nInstead, it will start swapping and then killing processes to free memory\n",
                                           "updatedAt":  "2016-11-10T20:48:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTgwMzE5MA==",
                                           "createdAt":  "2016-11-10T20:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "Pretty much the only way we found to do that on Linux was to poll for memory status and raise our own events.\n",
                                           "updatedAt":  "2016-11-10T20:48:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDIwMzIxNA==",
                                           "createdAt":  "2017-03-05T03:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "Is there anything actionable here?",
                                           "updatedAt":  "2017-03-05T03:49:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDI2NzcxNw==",
                                           "createdAt":  "2017-03-05T22:16:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "nothing actionable from the GC side.",
                                           "updatedAt":  "2017-03-05T22:16:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDI5OTgzOQ==",
                                           "createdAt":  "2017-03-06T04:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "Should the issue be closed in that case?",
                                           "updatedAt":  "2017-03-06T04:24:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDMyNjM0MA==",
                                           "createdAt":  "2017-03-06T07:58:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think it\u0027s worth investigating what this event would look like from a cross platform POV. We recently had some design meetings about the ASP.NET cache where we decided to separate the detection of memory pressure from the cache itself. A cross platform component that can detect \"low memory\" would be super valuable for many scenarios. Do we know if other languages/platfprms/runtimes offer anything here?\r\n\r\n@ayende what did you end up doing? Did you make it a library?",
                                           "updatedAt":  "2017-03-06T07:58:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDMyODQ4Mw==",
                                           "createdAt":  "2017-03-06T08:10:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "@davidfowl I\u0027m polling: https://github.com/ravendb/ravendb/blob/v4.0/src/Raven.Server/ServerWide/LowMemoryNotification/PosixLowMemoryNotification.cs#L29\r\n\r\nNote that I absolutely agree that a generic component will be useful here.\r\nNote that it also need to handle such things as containers\u0027 limited memory / jobs limited memory. \r\n",
                                           "updatedAt":  "2017-03-06T08:10:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDMzMTgzNA==",
                                           "createdAt":  "2017-03-06T08:28:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "on a related note, with hosting APIs (which unfortunately only exist on desktop) you can implement a pattern that says \"as a host I decide that this is a low memory situation, so I will do all the clean up type of things (in the cache case it might mean to expire a bunch of cached entries), then I will inform the GC it should consider it a low memory situation\", this helps the subsequent GC to reclaim more memory. ",
                                           "updatedAt":  "2017-03-06T08:28:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDMzMjA3MA==",
                                           "createdAt":  "2017-03-06T08:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "/cc @KKhurin ",
                                           "updatedAt":  "2017-03-06T08:29:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDMzOTc1MQ==",
                                           "createdAt":  "2017-03-06T09:07:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ayende",
                                           "body":  "@Maoni0 Yes, if we can be notified by the host that we are running out of memory, or that a big GC is about to happen, we can do quite a lot to make it more efficient (removed pinned memory, for example), clear caches, etc.",
                                           "updatedAt":  "2017-03-06T09:07:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDQ3ODg3MQ==",
                                           "createdAt":  "2017-03-06T18:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "@Maoni0 Are you suggesting that folks needing this notification write their own, instead of using the .NEt Core Host?\r\n\r\nIMHO, .NET Core host should not participate in Runtime\u0027s policy of memory management or notification and this infrastructure is something that should be built into the runtime, enabling any future hosts to be able to take advantage of it.",
                                           "updatedAt":  "2017-03-06T18:02:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4NDUyMDU5NQ==",
                                           "createdAt":  "2017-03-06T20:23:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "to be clear, it\u0027s not the host *infrastructure* that would participate in deciding what low memory looks like. it\u0027s the host that implements the hosting interface that decides when it wants the runtime to consider it\u0027s low memory. with hosting API you would register a ICLRMemoryNotificationCallback* with the IHostMemoryManager::RegisterMemoryNotificationCallback method. and the host would indicate if it wants the CLR to think it\u0027s low, normal or high on memory by implementing ICLRMemoryNotificationCallback::OnMemoryNotification. so when ICLRMemoryNotificationCallback::OnMemoryNotification says it\u0027s eMemoryAvailableLow, the finalizer thread will trigger a GC right away and GC will recognize this as \"we are in low memory situation and should be more aggressive about doing GCs\". additionally, the host can also implement IHostMemoryManager::GetMemoryLoad Method which tells GC what the percentage of memory load it wants the GC to think is. \r\n\r\nI imagine this was how SQL used it (as most of these hosting interfaces were made for them). that was before my time. I am certainly open to revamping these interfaces if the current ones aren\u0027t sufficient/user friendly enough. of course to revamp hosting interfaces it would need collaboration from folks who own hosting. ",
                                           "updatedAt":  "2017-03-06T20:23:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjgzNjU4OA==",
                                           "createdAt":  "2020-09-22T16:33:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "would something like this https://github.com/dotnet/runtime/issues/6051 satisfy this requirement? ",
                                           "updatedAt":  "2020-09-22T16:33:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48GNrA",
                                           "createdAt":  "2022-01-09T09:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnrIGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoelDavidLang",
                                                                               "createdAt":  "2024-06-28T13:45:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "timcassell",
                                           "body":  "If/when this makes it into the runtime, would it then make sense to add a `SoftReference\u003cT\u003e` type? Similar to `WeakReference\u003cT\u003e`, but only collects on low memory instead of any GC. This would be useful for an unlimited-timeout memory cache (as opposed to `MemoryCache`).",
                                           "updatedAt":  "2022-01-09T09:27:42Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Low memory handling?",
        "labels":  [
                       "design-discussion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/7780",
        "createdAt":  "2017-04-01T18:23:57Z",
        "number":  7780,
        "author":  "wizzard0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAPFFNw==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "adamsitnik",
                                            "createdAt":  "2017-04-01T18:39:50Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "mattwarren",
                                            "createdAt":  "2017-04-01T18:48:17Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "Rattenkrieg",
                                            "createdAt":  "2017-11-06T00:39:19Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-04-09T07:52:51Z",
        "body":  "Proposal: create a No-op GC, selectable at application start (via app manifest, command line option, putting Local GC library next to the executable, etc).\r\n\r\nRationale is about the same as for the [Epsilon GC](http://openjdk.java.net/jeps/8174901):\r\n\r\n- Performance testing, to be able to separate GC-induced performance variations\r\n- Functional testing, e.g. to quickly detect allocation rate spikes in applications that are supposed to run with low allocation rate\r\n- Example GC for developing/integrating other GC engines\r\n- Squeezing the last bit of performance where the app is either short-lived (e.g. request handler) or already has low to none allocation rate, by removing memory barrier overheads and so on.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQTHgxw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDk0MTE1NA==",
                                           "createdAt":  "2017-04-01T19:17:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "`TryStartNoGCRegion` might be good enough for this? https://msdn.microsoft.com/en-us/library/system.gc.trystartnogcregion(v=vs.110).aspx\r\n\r\n/cc @Maoni0 ",
                                           "updatedAt":  "2017-04-01T19:17:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDk0MTg2OA==",
                                           "createdAt":  "2017-04-01T19:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "as soon as this is implemented I add the support to BenchmarkDotNet for it ;)",
                                           "updatedAt":  "2017-04-01T19:29:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDk0NzAzNA==",
                                           "createdAt":  "2017-04-01T21:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAPFFOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wizzard0",
                                                                               "createdAt":  "2017-04-01T21:04:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2017-04-01T21:05:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2017-04-01T21:16:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattwarren",
                                                                               "createdAt":  "2017-04-04T08:47:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rattenkrieg",
                                                                               "createdAt":  "2017-11-06T00:39:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This type of cutting edge GC improvements is exactly what we are hoping to enable with the [local GC project](https://github.com/dotnet/coreclr/projects/3).",
                                           "updatedAt":  "2017-04-01T21:02:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDk0NzEwMg==",
                                           "createdAt":  "2017-04-01T21:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wizzard0",
                                           "body":  "@davidfowl TryStartNoGCRegion was a great start, but last time I checked it only gets you up to 256 MB of heap for small objects + 256 mb LOH max.\r\n\r\nAnd memory barriers and associated overhead remain the same (I am aware that compacting GC may actually increase performance compared to no GC at all in some scenarios)",
                                           "updatedAt":  "2017-04-01T21:07:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDk1Njc0Ng==",
                                           "createdAt":  "2017-04-02T00:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I believe having the API that allows you to specify a NoGC region is a much better choice for the majority of our customers than having a totally separate GC that does no GC because you have the flexibility to revert back to doing normal GCs when you need to. \r\n\r\nYou can certainly allocate more than that if you use Server GC for SOH. For LOH you can already allocate more than 256mb even with Workstation GC. If this is not what you are observing please provide a repro and I can take a look (I just verified and I can definitely allocate much more). You can also increase the segment size so you can allocate more for SOH even with Workstation GC but this config (GCSegmentSize) is currently only available on Desktop. We can add it on Core if needed. Also we can just not have the limit about the SOH wrt segment size. We don\u0027t have a theoretical limit today - it\u0027s just that so far we\u0027ve always had the same segment size for SOH. We just need to do some testing to make sure that having different seg sizes doesn\u0027t cause problems (I don\u0027t think it would but I\u0027d still like to do some testing to make sure). \r\n\r\nYour point about the cost of overhead (which is in the write barrier) is valid and is also completely solvable for NoGC region - it\u0027s not even hard to do. Whether/when we want to implement this would completely depend on how much it\u0027s needed - it\u0027s very rare that I get complaints about the write barrier cost from folks. But if you have a valid scenario I\u0027d like to hear it.",
                                           "updatedAt":  "2017-04-02T00:40:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDk3MzYyOA==",
                                           "createdAt":  "2017-04-02T08:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAISQfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hyh",
                                                                               "createdAt":  "2017-04-02T09:09:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RichiCoder1",
                                                                               "createdAt":  "2017-04-04T20:16:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wizzard0",
                                           "body":  "@Maoni0 Thanks for the detailed explanation! I will repeat my TryStartNoGCRegion/GCSegmentSize experiments and post the results/repro here, maybe i\u0027ve missed something obvious :)\r\n\r\nI agree having it runtime-configurable is definitely more flexible, too.\r\n\r\nAnd, while we\u0027re on that -- are there any plans on further improvements in the latency land? I would gladly trade 20% of mutator performance for limiting worst-case latency to 1-3 milliseconds (==games, VR, in-memory databases [databases because 1 blocked request actually raises latency for many requests that got queued during the GC time]) \r\n\r\nor 50-60% for \u003c10 microseconds (robotics, avionics, packet routing, algorithmic trading, sound processing etc). \r\n\r\nMaybe with some cheats like thread-local heaps (blocking 1 thread and having to copy messages across threads is much better than blocking entire server) or something.\r\n\r\nAh, and I\u0027m assuming about 50% heap utilization (live %) and heap sizes around 16 gb ... 1024 gb, and no numbers on allocation rate because currently to deal with these problems you have to avoid allocations like a plague %) but having that luxury would definitely increase developer productivity :)",
                                           "updatedAt":  "2017-04-02T08:57:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MTI3NjU1MQ==",
                                           "createdAt":  "2017-04-03T21:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@wizzard0 latency is something we always try to improve. Obviously there are many different scenarios and we have to prioritize our work. If you would like to tell me more details on the product you are working on, I\u0027d be happy to understand the specific scenarios you care about to see what we could do to help. Feel free to email me with some description if you like.",
                                           "updatedAt":  "2017-04-03T21:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMN9L",
                                           "createdAt":  "2022-04-09T06:01:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of the experimental [issue cleanup initiative](https://github.com/dotnet/runtime/issues/60288) we are currently trialing. Please share any feedback you might have in the linked issue.",
                                           "updatedAt":  "2022-04-09T06:01:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMP2C",
                                           "createdAt":  "2022-04-09T06:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wizzard0",
                                           "body":  "welll… still relevant!",
                                           "updatedAt":  "2022-04-09T06:13:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMak1",
                                           "createdAt":  "2022-04-09T07:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "with regions we don\u0027t have a limit for NoGC anymore - as long as you have that much memory to commit you can specify as big as a limit as you like. @cshung did the work for regions to support NoGC in .net 7. ",
                                           "updatedAt":  "2022-04-09T07:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMboy",
                                           "createdAt":  "2022-04-09T07:36:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wizzard0",
                                           "body":  "ah, great! is there a place to read more about those changes? i skimmed notes for .net7 preview in [dotnet/core/#7108](https://github.com/dotnet/core/issues/7108) and dotnet/runtime/#43844 and had no idea this scenario was affected %)",
                                           "updatedAt":  "2022-04-09T07:37:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMci-",
                                           "createdAt":  "2022-04-09T07:44:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the doc isn\u0027t there yet because we *just* enabled regions in main and the build isn\u0027t even out yet. I wanted to wait a bit before we put in the doc change just to be sure that we don\u0027t need to revert the regions feature on the off chance that something very unexpected happens. ",
                                           "updatedAt":  "2022-04-09T07:44:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMeDH",
                                           "createdAt":  "2022-04-09T07:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXLvlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2022-04-09T07:59:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wizzard0",
                                           "body":  "Makes sense. Looking forward for the release then %) \r\n\r\nThank you for the prompt reply!",
                                           "updatedAt":  "2022-04-09T07:52:51Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Null (allocate-only) GC proposal",
        "labels":  [
                       "area-GC-coreclr",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12255",
        "createdAt":  "2017-05-15T07:38:45Z",
        "number":  12255,
        "author":  "kpreisser",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqKCVQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "t-mustafin",
                                            "createdAt":  "2021-03-16T14:36:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2022-08-16T21:26:05Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-09-03T15:33:24Z",
        "body":  "Hi,\r\n\r\nI found an odd behavior of `System.Runtime.CompilerServices.ConditionalWeakTable\u003cTKey, TValue\u003e` in both .NET Core and .NET Framework which looks like a bug to me: If you create multiple instances of the `ConditionalWeakTable` and store a key-value pairs in them, where the key stays alive and the value contains a reference to the `ConditionalWeakTable`, the values are not garbage-collected after they (and the `ConditionalWeakTable`s) are no longer referenced.\r\n\r\nFor example, create a .NET Core Console application with the following code:\r\n```c#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            object key = new object();\r\n            while (true) {\r\n                var table = new ConditionalWeakTable\u003cobject, Tuple\u003cobject, byte[]\u003e\u003e();\r\n                table.Add(key, new Tuple\u003cobject, byte[]\u003e(table, new byte[1000000]));\r\n\r\n                GC.Collect();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nExpected behavior: The memory consumption of the program should stay in the same area, because when a new `ConditionalWeakTable` instance is created, there are no more references to the previous `ConditionalWeakTable` and its `Tuple` value, so they should be able to be reclaimed by the Garbage Collector.\r\n\r\nActual behavior: The memory consumption rises rapidly (4 GB after some seconds) until an `OutOfMemoryException` is thrown, as the byte arrays are not reclaimed by the garbage collector.\r\n\r\nHowever, if you remove the reference to the table by replacing `table.Add(...)` with `table.Add(key, new Tuple\u003cobject, byte[]\u003e(null, new byte[1000000]))`, the problem disappears.\r\n\r\nIf the algorithm cannot be implemented such that it can detect that there are no more references to the table and its values, I think the `ConditionalWeakTable` should implement a `Dispose()` method that allows to clear all key-value-pairs.\r\n\r\nThe behavior is the same for .NET Core (.NETCoreAPP 1.1) and .NET Framework 4.6.2.\r\n\r\nThanks!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONmI8xA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTQ5MDcyNw==",
                                           "createdAt":  "2017-05-15T14:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @Maoni0 ",
                                           "updatedAt":  "2017-05-15T14:23:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTYwMDA4OA==",
                                           "createdAt":  "2017-05-15T20:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "You are inducing gen2 GCs, so GC doesn\u0027t participate in deciding what\u0027s live and what\u0027s dead - it\u0027s purely determined by the user code. If you use the !gcroot sos command, it should shed some light as to what\u0027s holding an object alive.",
                                           "updatedAt":  "2017-05-15T20:47:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTc5Mzg3MA==",
                                           "createdAt":  "2017-05-16T14:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kpreisser",
                                           "body":  "Hi @Maoni0,\r\nsorry, I\u0027m not sure I understand you correctly. I included the `GC.Collect()` call just to show that even after an explicit GC the objects are not collected, but the behavior is the same when you remove this line.\r\n\r\nYou can reproduce the leak by running the above code as a .NET Core Console Application (VS target \".NETCoreApp 1.1\") on Windows: After some seconds, the programm will crash.\r\n\r\nThanks!",
                                           "updatedAt":  "2017-05-16T14:08:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTg4OTYyNA==",
                                           "createdAt":  "2017-05-16T19:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJjP_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "qwertie",
                                                                               "createdAt":  "2020-02-15T17:39:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ashleysmart",
                                                                               "createdAt":  "2021-07-13T05:28:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mayorovp",
                                                                               "createdAt":  "2023-10-13T11:11:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "In a blocking gen2 GC, GC does not participate in determining object\u0027s lifetime at all. So if a blocking gen2 does not collect something, it means that something is held alive by user code. The fact that you keep doing blocking gen2\u0027s and the object is not going away, it simply means GC is being told that it\u0027s alive. Does this make sense? I was trying to help you to find out who\u0027s holding it live. You can use !gcroot (I think gcroot does look at the dependent handles); !gchandles will show you what handles there are and what objects they hold onto.",
                                           "updatedAt":  "2017-05-16T19:27:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTg5OTQzOA==",
                                           "createdAt":  "2017-05-16T20:05:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBjpQ4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qwertie",
                                                                               "createdAt":  "2020-02-15T17:41:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "t-mustafin",
                                                                               "createdAt":  "2021-03-16T15:36:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@maonis There is no user (ie non-framework) code keeping anything alive in the example above. The ConditionalWeakTable is keeping itself alive because of how it is implemented using conditional handles.\r\n\r\n@kpreisser You should be able to workaround the issue by storing the back-references to ConditionalWeakTable in another weak reference, like `table.Add(key, new Tuple\u003cobject, byte[]\u003e(new WeakReference(table), new byte[1000000]));`.",
                                           "updatedAt":  "2017-05-16T20:05:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTkyNjQ1Ng==",
                                           "createdAt":  "2017-05-16T21:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODatSAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "OwnageIsMagic",
                                                                               "createdAt":  "2024-03-15T12:38:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@jkotas by user code I just meant not GC code...",
                                           "updatedAt":  "2017-05-16T21:52:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjAwMDAzNQ==",
                                           "createdAt":  "2017-05-17T06:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kpreisser",
                                           "body":  "Hi @Maoni0,\r\nYes, it makes sense, thank you. But note: In my report I did not want to say that there\u0027s a problem with GC (in that it would not collect objects to which no more references exist) - I think GC is working correctly. Rather, it is the `ConditionalWeakTable` which somehow keeps references to the value objects alive even if no more non-framework code contains references to them and to the table, thus preventing GC from collecting the objects. This is what I wanted to show in the report.\r\nI will try to see if I can run the commands which you suggested, thanks!\r\n\r\nHi @jkotas,\r\nthank you. The above example code is only a simplified reproduction which I observed in a more complex application (although in .NET Framework, but the behavior is the same as on .NET Core on Windows), where the value objects need a reference to the table in order to get access to other attached objects.\r\nUntil now, I worked-around the issue by calling the internal `ConditionalWeakTable.Clear()` method using reflection, but with using your tip I was able to resolve the issue by clearing-out the references to the `ConditionalWeakTable` in the value objects after I no longer need the table, which is cleaner than using reflection. (Simply using a `WeakReference` to store the table would not have worked in my case, as I would need to ensure the table is not collected until I no longer need it, so I would have to store a strong reference to it on some other place).\r\n\r\nThanks!",
                                           "updatedAt":  "2017-05-17T11:58:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjA5NzQxNQ==",
                                           "createdAt":  "2017-05-17T13:54:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I worked-around the issue by calling the internal `ConditionalWeakTable.Clear()` method using reflection,\r\n\r\nBTW: The Clear method was added as public API in .NET Core 2.0.",
                                           "updatedAt":  "2017-05-17T13:54:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTMxMDI5OQ==",
                                           "createdAt":  "2018-04-30T04:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Torvin",
                                           "body":  "@kpreisser  I don\u0027t see this as a bug. I think it works exactly as expected. The whole purpose of `ConditionalWeakTable` is to tie the life time of the \"right\" part of the table to the life time of its \"left\" part. You effectively tied your `table` to your `key`, and since the object referenced by `key` is still alive - so is `table`.\r\n\r\nThe purpose of `ConditionalWeakTable` is to add an \u0027extension\u0027 field to an arbitrary object that would work the same way normal fields work. So in your case, if your `key` simply had a normal field referencing your `table` - you would observe the same \u0027leak\u0027.\r\n\r\nWhat you are doing - you are basically relying on the fact that when `ConditionalWeakTable` is collected - it will remove all the stored key-value associations and thus would allow the collection of the \u0027values\u0027. While it\u0027s logical to assume that, I wouldn\u0027t rely on it. I don\u0027t think it was intended to be used in this way. It\u0027s not even documented.",
                                           "updatedAt":  "2018-04-30T04:15:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTM5NjAwMw==",
                                           "createdAt":  "2018-04-30T13:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQ-WPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2018-04-30T13:59:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Therzok",
                                                                               "createdAt":  "2019-01-02T19:43:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "geoff-m",
                                                                               "createdAt":  "2019-04-06T22:46:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2021-04-11T20:40:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-06-03T19:59:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrSensor",
                                                                               "createdAt":  "2022-03-02T05:00:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "kpreisser",
                                           "body":  "Hi @Torvin,\r\nthanks for your reply!\r\n\r\nHowever, I\u0027m not sure if I follow: If it is expected that the value (right part) is tied to the life time of the key (left part), then I would have expected that the leak would also occur even if the value doesn\u0027t reference the `ConditionalWeakTable`, because the value would still reference the byte array and the key is still reachable.\r\n\r\nHowever, if you change the line in the above code:\r\n```c#\r\ntable.Add(key, new Tuple\u003cobject, byte[]\u003e(table, new byte[1000000]));\r\n```\r\nto\r\n```c#\r\ntable.Add(key, new Tuple\u003cobject, byte[]\u003e(null, new byte[1000000]));\r\n```\r\n(so that the value doesn\u0027t contain a reference to the table), then the leak doesn\u0027t occur, meaning that the values are garbage-collected even though the key is still alive.\r\nBut as this behavior only occurs in a special circumstance (when the value contains a reference to the `ConditionalWeakTable` in which the value is stored), it seems like a bug to me.\r\n\r\nAdditionally, from reading the documentation of `ConditionalWeakTable`, I don\u0027t read it to mean that values are attached to keys permanently and are therefore not GCed even if the `ConditionalWeakTable` is CGed. Rather, it should only look like values being attached to keys, while internally they are stored in a separate dictionary/table to which the keys don\u0027t have any relation/reference.\r\n\r\nNote, that ECMAScript (JavaScript) defines a [`WeakMap`](https://www.ecma-international.org/ecma-262/8.0/#sec-weakmap-objects) that has a similar concept like the `ConditionalWeakTable` in .NET: It allows to store key-value-pairs, where an entry in the `WeakMap` doesn\u0027t prevent the key from being garbage-collected (even if the value has a reference to the key):\r\n\u003e If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap.\r\n\r\nHowever, if run the same test in ECMAScript implementations like SpiderMonkey (Mozilla Firefox) and V8 (Google Chrome, also used in [Node.js](https://nodejs.org/en/)), a leak doesn\u0027t occur (except for **Chakra** (Microsoft Edge) which funnily seems to have exactly the same behavior as in .NET where a leak only occurs if the value has a reference to the `WeakMap`):\r\n```javascript\r\nlet key = new Object();\r\n\r\nwhile (true) {\r\n    let map = new WeakMap();\r\n    map.set(key, [map, new ArrayBuffer(1000000)]);\r\n}\r\n```\r\n\r\nNow, because the `WeakMap` in ECMAScript has a similar concept like the `ConditionalWeakTable` in .NET, it is used e.g. by [Jurassic](https://github.com/paulbartrum/jurassic), a JavaScript Engine for .NET, to implement the [WeakMap](https://github.com/paulbartrum/jurassic/blob/master/Jurassic/Library/WeakMap/WeakMapInstance.cs). Unfortunately, this means when running the above JavaScript code in Jurassic, a memory leak will also occur here.\r\n\r\nThanks!",
                                           "updatedAt":  "2018-04-30T13:25:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTU0OTMxMw==",
                                           "createdAt":  "2018-04-30T22:36:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "when you do this:\r\n\r\n```csharp\r\ntable.Add(key, new Tuple\u003cobject, byte[]\u003e(table, new byte[1000000]));\r\n```\r\n\r\na GC handle of the dependent type is created with its primary value as key and secondary value as the tuple obj. and this GC handle needs to be cleaned up by something - in the CWT case it\u0027s either by the finalizer or setting the primary of this handle to null (if you remove an entry). if you don\u0027t do either it\u0027ll stay and hold the secondary object live which means table will be alive. key can still be alive but if the handle is freed or if it\u0027s cleared as the primary for the GC handle it will not hold the secondary (tuple obj) alive. ",
                                           "updatedAt":  "2018-04-30T22:36:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTY1NTU4OQ==",
                                           "createdAt":  "2018-05-01T12:00:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Torvin",
                                           "body":  "@kpreisser \r\n\u003e However, if you change the line in the above code (so that the value doesn\u0027t contain a reference to the table), then the leak doesn\u0027t occur, meaning that the values are garbage-collected even though the key is still alive.\r\n\r\nWhat I\u0027m saying is - this behaviour (when collection of CWT also removes the GC handles) isn\u0027t documented and if I were you I wouldn\u0027t rely on it.",
                                           "updatedAt":  "2018-05-01T12:00:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODcwMTk4Mg==",
                                           "createdAt":  "2018-06-20T10:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAhBZwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nshibano",
                                                                               "createdAt":  "2018-09-18T03:53:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Therzok",
                                                                               "createdAt":  "2019-01-02T19:43:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kpreisser",
                                           "body":  "Hi @Torvin (sorry for the late reply),\r\n\r\nOK, so this would mean that I need to clear the `ConditionalWeakTable` once I don\u0027t need it any more.\r\nBut this requires using reflection for .NET Framework (up to 4.7.2) since the `.Clear()` method is not public there (while for  .NET Core it is). Also, as an API consumer, I would expect `ConditionalWeakTable` to implement `IDisposable` in such a case.\r\n\r\nOtherwise, I don\u0027t think it is unreasonable to expect that GCing the table will also GC the handles since this is an implementation detail and the documentation doesn\u0027t indicate that special handling is required.\r\n\r\nThanks!",
                                           "updatedAt":  "2018-06-21T11:00:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMTk2Mjk3MQ==",
                                           "createdAt":  "2018-08-10T03:14:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "@jkotas @Maoni0 we could fix this in relatively simple way by creating a new struct to replace CWT usage of `DependsHandle` as the holder for key and value . This alternative struct could have a weak GCHandle to the key and a reference to the value. This way the change to the code will be very localized. At minimum some perf tests needs to be added to see how perf \u0026 mem will be affected, besides that, any concerns with this approach? Any gotchas that I should be aware?  ",
                                           "updatedAt":  "2018-08-10T03:14:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMTk2OTc1OA==",
                                           "createdAt":  "2018-08-10T04:10:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e This alternative struct could have a weak GCHandle to the key and a reference to the value.\r\n\r\nI do not think you would be able to maintain the CWT contract with this structure. It would be keeping the `value` alive for much longer (potentially infinitely long) once the entry becomes dead.",
                                           "updatedAt":  "2018-08-10T04:10:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMTk3NzU0NA==",
                                           "createdAt":  "2018-08-10T05:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "Ops, you\u0027re right: while the CWT is not collected values will still be alive. Since it is a very particular case it seems better to document the behavior and close the issue. ",
                                           "updatedAt":  "2018-08-10T05:15:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NjI5MDUwMg==",
                                           "createdAt":  "2019-04-24T15:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I think it makes sense for this code to leak memory under the following view: CWT is meant to act as if it attached additional fields to existing objects. So `key` behaves as if it had additional fields. `key` is alive and it\u0027s \"field\" references the value and the table. So those are kept alive as well.",
                                           "updatedAt":  "2019-04-24T15:26:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTI2NDUxMQ==",
                                           "createdAt":  "2019-07-08T15:06:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBA0l7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luandersonn",
                                                                               "createdAt":  "2020-01-31T04:31:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meldim",
                                                                               "createdAt":  "2020-02-15T14:31:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodeForCSharp",
                                                                               "createdAt":  "2020-04-11T17:58:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "zipswich",
                                           "body":  "I wonder if a memory leak of a UWP app is related to this.  Whenever I open and close a page of a production app, ConditionalWeakTable count increases by 1k+.  This is very consistent.  I cannot find any instance of the page class in memory snapshots after it is closed, so I assume the page is disposed correctly.\r\n![image](https://user-images.githubusercontent.com/6095671/60820684-f4ae0d80-a16f-11e9-8f78-bf1e938791a7.png)\r\n\r\nI created [a repo with a few blank pages](https://github.com/zipswich/Debug/tree/master/UWPDebug). Navigating among the pages keeps increasing ConditionalWeakTable count in memory snapshots. \r\n",
                                           "updatedAt":  "2020-04-15T02:41:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDY0NzMzOQ==",
                                           "createdAt":  "2020-01-31T09:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wufus",
                                                                               "createdAt":  "2020-02-13T11:54:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zipswich",
                                                                               "createdAt":  "2020-04-15T02:42:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "curia-damiano",
                                           "body":  "Hi all,\r\nI have the same behavior of zipswich and I can provide a repro project as well.\r\nRegards, Damiano",
                                           "updatedAt":  "2020-01-31T09:04:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjQ4Mjk5OQ==",
                                           "createdAt":  "2020-04-11T18:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTMQXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zipswich",
                                                                               "createdAt":  "2020-04-15T02:42:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Psykobal",
                                                                               "createdAt":  "2020-10-12T14:11:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CodeForCSharp",
                                           "body":  "Meet the same problem of @zipswich ,but have no idea to fix it.\r\nWho can provide a solution?",
                                           "updatedAt":  "2020-04-11T18:22:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzM4MDg1Ng==",
                                           "createdAt":  "2021-04-11T22:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "@jkotas Could you let us know the status of this issue please? Is it blocked by some other work, or just of low priority?\r\n\r\nIn terms of implementation, I wonder whether it would solve the problem if we change the `DependentHandle` to not only depend on one object, but instead on two objects. For the CWT, we need both the table and the key to be alive in order to keep the value alive. If any of them is not marked, the value remain unmarked and should be collected. I am not sure whether this change would be possible with affordable overhead added within the current GC framework. What do you think?\r\n\r\nI came into this issue when I was trying to implement the weak table of Lua on top of CLR. I think it\u0027s basically the same as the JS weak table problem mentioned above. Currently there is really no existing tool for us to do that. If there is, please let me know. Note that making the reference to the table a weakref won\u0027t solve this issue in general.\r\n\r\nThanks!",
                                           "updatedAt":  "2021-04-11T22:11:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzQzNjI0Mw==",
                                           "createdAt":  "2021-04-12T02:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@acaly I agree that there is no way to implement full fidelity equivalent of JavaScript and Lua weak table in .NET.\r\n\r\n\u003e I wonder whether it would solve the problem if we change the DependentHandle to not only depend on one object, but instead on two objects. For the CWT, we need both the table and the key to be alive in order to keep the value alive. If any of them is not marked, the value remain unmarked and should be collected. I am not sure whether this change would be possible with affordable overhead added within the current GC framework. What do you think?\r\n\r\nYes, it would work but it looks expensive as you have pointed out. Is it how the weak table is implemented in JavaScript GCs?",
                                           "updatedAt":  "2021-04-12T02:27:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzgxNTg2MA==",
                                           "createdAt":  "2021-04-12T13:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e Is it how the weak table is implemented in JavaScript GCs?\r\n\r\nSorry, I am not familiar with the internals of JavaScript, but obviously they also had a difficult time when deciding how WeakMap should be implemented in JavaScript. I saw some people saying that the standard intentionally allows the implementation of WeakMap to directly associate the value to the key\u0027s storage (inverted mapping) ([StackOverflow comment](https://stackoverflow.com/questions/35102399#comment106731072_35102399)). There is an issue in ECMAScript spec on GitHub: https://github.com/tc39/ecma262/issues/1657#issuecomment-518916579, which I would like quote here:\r\n\r\n\u003e I have long advocated for the inverted mapping, so that the case that is by far more common could be more efficient: when the weakmap lifetime exceeds the key lifetime. But the obligation is symmetric. **Whichever representation you choose, you must do full ephemeron collection for the case not optimized by that representation**.\r\n\u003e\r\n\u003e Today, zero of the browser engines do the right thing. v8, FF, and JSC all use the non-inverted representation, making WeakMaps so terribly and needlessly expensive that too many people have learned to avoid them. But at least they are correct.\r\n\u003e\r\n\u003e Chakra does the inverted representation, making the common case efficient. However, they do not backstop it with ephemeron collection. Since the spec can only mandate conservative collection, this is not observably incorrect, but it does violate expectations.\r\n\r\nSo unlike the current CWT in .NET, they do have an additional obligation (or expectation) that requires the table to be collected somehow when only the value references the table. \r\n\r\nToday .NET already has DependentHandle, which I think should be more close to the full ephemeron collection method mentioned in the comment (compared to the inverted mapping method that store a reference to the value object inside an internal list of the key object that could be directly discovered by GC). The only problem is this handle does not depend on the liveness of the table.",
                                           "updatedAt":  "2021-04-12T13:33:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzkwNDQ5Ng==",
                                           "createdAt":  "2021-04-12T15:25:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Hmmm, there do not seem to be good obvious ways to implement it. I do not think that it would be acceptable to make dependent handle 50% more expensive for a rare scenario. To answer your original question, I expect that this will remain unresolved unless somebody comes up with a better way to implement it.",
                                           "updatedAt":  "2021-04-12T15:25:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODMxNTQ1Ng==",
                                           "createdAt":  "2021-04-12T23:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "@jkotas Thanks for clarifying that. \r\n\r\nIf making the .NET implementation of CWT to release the circular-referenced tables is too hard, I am thinking again whether it is really impossible to make another implementation of CWT to do that, no matter how slow it is. In any case, it is really annoying for me if I cannot fully obey the specification of Lua when making a Lua interpreter.\r\n\r\nI spent whole day on this, and it seems that it is possible. Please see this gist: https://gist.github.com/acaly/380fb7ee48998983384ff10107a40e78.\r\n\r\nHere the key value pair is not kept alive by anyone from GC root, but from a short-lived object that recreates itself to resurrect the pair again and again, in every collection. It seems ugly but it works... It should work even if someone resurrects the key or the table in another finalizer object.\r\n\r\nCould you please have a brief look at the code to help me check whether there is any problem that I missed about the \"correctness\"? Specifically, could you explain:\r\n* Which generation the key value pair will finally be put in if it is resurrected in every collection? I think it should be in gen0?\r\n* Is it necessary to make the reference from the `DoubleDependentObject` to its load as a strong handle instead of a field (to avoid the load being put into the finalizer list)? It seems the finalizer of `DoubleDependentObject` (if I add one) will be called once even it\u0027s resurrected.\r\n\r\nThank you so much!\r\n\r\n**EDIT** Seems I cannot use strong handle, as it will completely prevent the load from being collected.",
                                           "updatedAt":  "2021-04-13T00:46:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODM2NDU3MQ==",
                                           "createdAt":  "2021-04-13T01:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "Seems that the code in my previous comment does not work at all. The weak handle (tracking resurrection) to the `DoubleDependentObject` is correctly zeroed, which I assumed indicates that the object is collected, but it is actually not. 😕\r\n\r\nI think the `DoubleDependentObject` is working. For the `WeakTable`, maybe it\u0027s because the `WeakTable`\u0027s CWT\u0027s finalizer is not properly executed when it is finally collected, because it has previously survived a GC through resurrection?",
                                           "updatedAt":  "2021-04-13T01:43:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTExOTkzNQ==",
                                           "createdAt":  "2021-04-13T23:42:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Ouch. The problem here is that DependentHandles are weaker than a proper ephemeron.\r\n\r\nIn a proper ephemeron implementation, the stuff in its value pointer cannot be the only thing keeping the ephemeron strongly reachable. The value pointer of an ephemeron is (strongly) reachable only if **both** the object pointed to by the key pointer **and** the ephemeron itself are strongly reachable.\r\n\r\nThe ephemeron GC algorithm for finding strongly referenced objects is:\r\n1. Put all the normal roots into a queue of roots.\r\n2. Trace through from roots in queue, marking objects as reachable. If any ephemeron is encountered mark it as reachable, and place it in queue of reachable ephemerons, but do not trace into it. \r\n3. Iterate though the list of ephemerons. For each that has a key that is already known to be reachable, add the value pointer as a new root, and remove ephemeron from list. Those whose keys have yet to be marked reachable should remain in the list to be scanned the next time this step is run.\r\n4. If list of new roots in non-empty, goto step 2.\r\n\r\nAt this point you have traced out all strongly referenced objects. [Footnote 1]\r\n\r\nThe above algorithm is quite similar to what DependentHandle does, except DependentHandle always scans the full list of DependentHandles each time in step 3, rather than just the ones previously found to be reachable. This is unavoidable, since these handles don\u0027t require a managed reification, so you can\u0027t track the reachability of the handle itself.\r\n\r\nA DependentHandle variation where two objects need to be referenced for the value to be considered referenced is at least as powerful as an ephemeron, and in some ways slightly more general (as the second object need not be a managed reification of the handle, allowing the handle to remain a struct for things like ConditionalWeakTable where the handle remains internal). \r\n\r\nAnd we probably do want to have either proper ephemeron or a doubly dependant handle if we ever expose this to user code (like is requested in #30759).  The people asking for that almost certainly want to create custom weak keyed mappings, and would surely not be expecting that values that point back at the collection would keep the collection alive if any of the keys were still around.\r\n\r\n----\r\n\r\nFootnote:\r\n[1] The original paper describing them talks about another pass afterwards, marking the weakly reachable objects, but that is an artifact of a fundamentally different approach to finalization: one where weakly referenced objects were kept alive, but the holder of the weak pointer was informed that it was pointing at something that was no longer strongly referenced, allowing it to run finalization logic and then null out the pointer itself. Under that approach to, for example, close a file handle/descriptor, the IO module would keep a weak pointer to the File Object, and when informed that there where no more strong references to it, it could close the close the file handle/descriptor.",
                                           "updatedAt":  "2021-04-14T21:08:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTMwMDQxNA==",
                                           "createdAt":  "2021-04-14T07:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "\u003e The people asking for that almost certainly want to create custom weak keyed mappings\r\n\r\nDefinitely not the main point for me, the point is that you don\u0027t want the overhead of a collection/mapping when you want to store a single reference directly in an object. It probably would suffer from the same flaws if the containing object is reachable from the value?\r\n\r\nConsidering `ConditionalWeakReference` is proposed as a class a `DependentHandle` taking two keys could implicitly pass the `ConditionalWeakReference` as second key to fix this issue, I assume. Only when you expose it as a struct you\u0027d need to expose access to both keys.",
                                           "updatedAt":  "2021-04-14T07:36:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTQ4NzA4OQ==",
                                           "createdAt":  "2021-04-14T12:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Fair enough, I should have said that many of those who want that feature likely want to create custom collections.\r\n\r\nAnd yeah, with the current Dependent Handle implementation, if the key is still reachable, everything on the value side is reachable, even if the object that owns the DependentHandle is only reachable through the value side.\r\n\r\nBut I think I was mistaken. It turns out that the dependent handle is logically equally as powerful as an ephemeron, because you can construct one from such handles. But doing that is definitely not as efficient as a native doubly dependent handle. I will post more details this evening. This is definitely not an approach the team would really want to implement, but it is possible.",
                                           "updatedAt":  "2021-04-14T17:28:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTY2OTM0OQ==",
                                           "createdAt":  "2021-04-14T16:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e It turns out that the conditional handle is logically equally as powerful as an ephemeron, because you can construct one from such handles. \r\n\r\nDid you mean that without introducing a double dependent handle, the current DependentHandle alone can be used to implement a ephemeron? I can\u0027t think of how that can be done.",
                                           "updatedAt":  "2021-04-14T16:55:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTY5MTg5OQ==",
                                           "createdAt":  "2021-04-14T17:30:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "**Edit: This whole post appears to be incorrect**\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to see the old content\u003c/summary\u003e\r\n\u003e \u003e It turns out that the conditional handle is logically equally as powerful as an ephemeron, because you can construct one from such handles.\r\n\u003e \r\n\u003e Did you mean that without introducing a double dependent handle, the current DependentHandle alone can be used to implement a ephemeron? I can\u0027t think of how that can be done.\r\n\r\nI started off by trying to prove that a double dependent handle could be implemented with ephemerons. (To prove they are equally powerful, since going the other direction is easy enough.) It did not take me long to realize this is not hard. Just chain them. Have the value pointer of one ephemeron point to another. As long as there are no other references to that second ephemeron, the value of the second one is dependent on the keys of both.\r\n\r\nBut then I realized that technically that also works with DependentHandle. Which means it is possible to implement a double dependent handle, and thus implement an ephemeron. So I\u0027ve put together some code to both reproduce the memory leak from the first post using a single DependentHandle, and then show how it goes away if implemented with an ephemeron.\r\n\r\n-------------\r\n\r\nTo prove that ephemerons can be implemented with DependentHandle, let\u0027s start by recreating the memory leak from the parent issue using a class that is one of the simplest possible wrappers for a Dependent Handle.\r\n\r\nWe start off by creating a version of the DependentHandle struct that is not internal, using private reflection to access the ECalls. See the gist linked at the end to see the source for this part, but it extremely straightforward.\r\n\r\nNow let us create a really simple wrapper class around DependentHandle:\r\n\r\n```C#\r\npublic static class DependentHandleExtensions\r\n{\r\n    public static object? GetSecondary(this DependentHandle handle)\r\n    {\r\n        handle.GetPrimaryAndSecondary(out var secondary);\r\n        return secondary;\r\n    }\r\n}\r\n\r\npublic sealed class DependentHandleWrapper : IDisposable\r\n{\r\n    private DependentHandle handle;\r\n\r\n    public DependentHandleWrapper(object key, object? value) =\u003e\r\n        handle = new DependentHandle(key, value);\r\n\r\n    public object? Key =\u003e handle.GetPrimary();\r\n\r\n    public object? Value\r\n    {\r\n        get =\u003e handle.GetSecondary();\r\n        set =\u003e handle.SetSecondary(value);\r\n    }\r\n\r\n    ~DependentHandleWrapper() =\u003e\r\n        handle.Free();\r\n\r\n    public void Dispose()\r\n    {\r\n        handle.Free();\r\n        GC.SuppressFinalize(this);\r\n    }\r\n}\r\n\r\n```\r\n\r\nFinally, we can use this to verify the memory leak. This is basically the code from the first post with slight modifications to account for using the Wrapper Class instead of CWT. I\u0027ve also hange the loop to just a limited number of iterations, and have it print memory usage after each iteration. \r\n\r\n```C#\r\nvoid Main()\r\n{\r\n    object key = new object();\r\n    \r\n    for (int i = 0; i \u003c 100; i++)\r\n    {\r\n        var handle = new DependentHandleWrapper(key, null);\r\n        handle.Value = new Tuple\u003cobject, byte[]\u003e(handle, new byte[10000000]);\r\n        \r\n        GC.Collect();\r\n        Console.WriteLine(GC.GetTotalMemory(forceFullCollection: true));\r\n    }\r\n}\r\n```\r\n\r\nRunning this, and it is pretty clear we are leaking memory. Change the tuple to have null instead of referening the handle wrapper, and voila, the memory goes flat. So we clearly have the same behavior occuring.\r\n\r\nSo let\u0027s implment a proper emphemeron class, by chaining two dependent handles. The first handle has the real key, and points to the owner of the second handle. The second handle has the owner of the first handle in its key. This results in needing to reach both the key, and the owner of the first handle in order to reach the value. \r\n\r\nThe implementation is not very complex:\r\n```c#\r\npublic sealed class Ephemeron : IDisposable\r\n{\r\n    private DependentHandle handle;\r\n\r\n    public Ephemeron(object key, object? value) =\u003e\r\n        handle = new DependentHandle(key, new DependentHandleWrapper(this, value));\r\n\r\n    private DependentHandleWrapper? Secondary =\u003e (DependentHandleWrapper?)handle.GetSecondary();\r\n\r\n    public object? Key =\u003e handle.GetPrimary();\r\n\r\n    public object? Value\r\n    {\r\n        get =\u003e Secondary?.Value;\r\n        set\r\n        {\r\n            var secondary = Secondary;\r\n            if (secondary != null)\r\n                secondary.Value = value;\r\n        }\r\n    }\r\n\r\n    ~Ephemeron() =\u003e\r\n        handle.Free();\r\n\r\n    public void Dispose()\r\n    {\r\n        Secondary?.Dispose();\r\n        handle.Free();\r\n        GC.SuppressFinalize(this);\r\n    }\r\n}\r\n```\r\n\r\nChanging the main method to use this new class instead, and memory stays flat. (You can also tweak the finalizers to write to the console to prove they actually run when you expect, etc.)\r\n\r\nSee [this gist for the full source](https://gist.github.com/KevinCathcart/f7fc9e6c95cc2f049ce17d3e464842bd). (Note: I was running this in LINQPad, so I\u0027m probably missing some using directives).\r\n\r\nI really doubt that the team would actually want to use this sort of technique for CWT. The needing two handles, and an extra allocation for the owner of the second handle will hurt both memory and performance. But unless I am totally missing something it would work.\r\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-14T21:12:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTc4MTIxNQ==",
                                           "createdAt":  "2021-04-14T19:36:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "~~Nice work. While it may not be a desireable implementation it proves that its easily implementable using the current GC algorithm, and doesn\u0027t require something entirely new. They just need to chain together two indirections on the native side and be done.~~ [edit] apparently doesn\u0027t work that easily\r\n\r\nThat said, in the other issue about exposing DependentHandle, it was mentioned that the current implementation is very inefficient and they don\u0027t like to extend it, rather rewrite it. Since there are currently no resources available for that it may take a while until someone touches this :(",
                                           "updatedAt":  "2021-04-14T23:00:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTgyNDMyMw==",
                                           "createdAt":  "2021-04-14T20:52:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "@KevinCathcart I doubt it would work as a correct weak table. If the table is alive and the value directly references the key, then the key would be reachable and won\u0027t be collected.",
                                           "updatedAt":  "2021-04-14T20:52:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTgzMzM2MQ==",
                                           "createdAt":  "2021-04-14T21:07:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinCathcart",
                                           "body":  "Ouch, I think you are right. This just reverses the problem. I guess the dependent handle really is weaker than a double dependent handle. I was so focused on the reverse case, that I forgot about making sure the forward case still worked.",
                                           "updatedAt":  "2021-04-14T21:07:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Ygjh",
                                           "createdAt":  "2021-09-03T09:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kornelpal",
                                           "body":  "Edit: As @acaly pointed out, this results in incorrect behavior too.\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to see the old content\u003c/summary\u003e\r\n\r\nInspired by the double dependency ideas in comments, I created a [`DoubleConditionalWeakTable`](https://gist.github.com/kornelpal/6cde329b2994c2e280321aa699f1bff0) wrapper around `ConditionalWeakTable` that adds an extra layer of dependency on the table itself.\r\n\r\nSome basic testing shows that this resolves the memory leak. The new `DependentHandle` in .NET 6 makes it very simple, but the same effect can be achieved on older versions (including .NET Framework 4.x) using `ConditionalWeakTable` instances with one item as the value within the outer table.\r\n\r\nI hope that the code demonstrating the concept is useful, but please note that I have not tested it extensively.\r\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-03T15:33:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42YjzE",
                                           "createdAt":  "2021-09-03T09:43:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB4_1rA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kornelpal",
                                                                               "createdAt":  "2021-09-03T15:27:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "acaly",
                                           "body":  "@kornelpal I believe you made the same mistake above: the value will keep key alive, making it no longer a weak dictionary.\r\n\r\nI think this really cannot be done with `DependentHandle`, given that it only has one source. To make it possible, you need at least two, i.e., only when **both** soucres are alive, make the target alive. With a two-source implementation, one can easily chain and make three, four, etc., but you really can\u0027t start from one.",
                                           "updatedAt":  "2021-09-03T09:43:33Z"
                                       }
                                   ],
                         "totalCount":  36
                     },
        "title":  "ConditionalWeakTable causes a memory leak if one of their values references the table",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/8718",
        "createdAt":  "2017-08-09T17:26:13Z",
        "number":  8718,
        "author":  "kvochko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-27T13:48:30Z",
        "body":  "We are currently working on minimizing memory footprint of CoreCLR. Our common scenario is a mobile Xamarin.Forms application for Tizen, test cases can be found [here](https://developer.tizen.org/development/tizen-.net-preview/samples). One of the areas we are looking at is the garbage collector. We have tried several things and found that, for example, setting [g_bLowMemoryFromHost](https://github.com/dotnet/coreclr/blob/0372174871c1e27f483c9877c2c5181720be8722/src/gc/gccommon.cpp#L56) to 1 and ephemeral budget to a fixed small value reduces the peak private dirty memory by up to ~1200K.\r\n\r\n```\r\n\r\nApplication         | Original peak      | Modified peak      | Difference\r\n                    | Private_Dirty, Kb  | Private_Dirty, Kb  |\r\n\r\nHelloWorld          | 14744              | 13588              | 1156\r\nApplicationStoreUI  | 14816              | 14668              | 148\r\nGalleryUI           | 46456              | 46264              | 192\r\nSNSUI               | 21872              | 21724              | 148\r\nCalculator          | 17944              | 17588              | 356\r\n\r\n```\r\n\r\n\r\n```\r\n\r\nApplication         | Original startup   | Modified startup   | Difference\r\n                    | CPU time (jiffies) | CPU time (jiffies) |\r\n\r\nHelloWorld          | 135                | 146                | 11\r\nApplicationStoreUI  | 192                | 192                | 0\r\nGalleryUI           | 251                | 259                | 8\r\nSNSUI               | 447                | 452                | 5\r\nCalculator          | 290                | 295                | 5\r\n\r\n```\r\n\r\nAs discussed [previously](https://github.com/dotnet/coreclr/pull/12973#issuecomment-317112584), exposing knobs like these as runtime configuration options is not desirable. What would be the best way to implement such changes? There seems to be a concept of [performance scenarios](https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/vm/perfdefaults.cpp#L9), but it\u0027s not clear if this code is used anywhere, and if so - how to use it, and it\u0027s still a question whether it is the right place to implement such changes. Any help is greatly appreciated.\r\n\r\n@Maoni0 @swgillespie \r\nCC @ruben-ayrapetyan @gbalykov @Dmitri-Botcharnikov ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORcSqCA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTMzMzE4Ng==",
                                           "createdAt":  "2017-08-09T17:57:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ruben-ayrapetyan",
                                           "body":  "Related issue: dotnet/runtime#7694",
                                           "updatedAt":  "2017-08-09T17:57:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTQ0MzE5NA==",
                                           "createdAt":  "2017-08-10T03:51:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@kvochko thanks for the data. I have the following observations:\r\n\r\n1) All your non-Hello World scenarios showed at best 2% improvement for peak private dirty memory. The Helloworld one showed 8% improvement. Since the changes only affect when GC runs, it means this Helloworld scenario actually triggered at least one GC. I presume this is a UI Helloworld in Xamarin.Forms. \r\n\r\n2) Almost all your scenarios showed regression in CPU usage (I guess this \"jiffies\" is some sort of time unit that\u0027s equivalent to a certain # of ms specific to your system) and the degree of regression is larger than that of peak private dirty memory. \r\n\r\nIf we only have these 2 data points it\u0027s hard to say if this change is worth doing at all. Our perf investigation doesn\u0027t stop at this point though - usually the next step is to figure out where the perf improvement/regression comes from and see how that can show up in real world scenarios. Have you looked at Helloworld more closely to see why it showed a much bigger change than other scenarios?",
                                           "updatedAt":  "2017-08-10T03:51:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTU0NzI2Nw==",
                                           "createdAt":  "2017-08-10T13:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kvochko",
                                           "body":  "@Maoni0 while it is true that the 2% improvement is relatively small, we are continuing to tune the garbage collector for our scenario, and it\u0027s possible that there will be other changes like these. Right now we would just like to know in what form these changes can be submitted to the mainline when improvements are good enough.",
                                           "updatedAt":  "2017-08-10T13:14:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTcyOTUwNg==",
                                           "createdAt":  "2017-08-11T04:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "This is how I envision how the changes would be reflected - we have a few different levels that you can use to say how much you care about each aspect - memory footprint, throughput or latency. Level 1 through 4 look like the following:\r\n\r\n| level        | optimization goals | latency characteristics |\r\n| ------------- |:-------------:|:-----|\r\n| 1 | memory footprint |pauses can be long and more frequent|\r\n| 2|throughput|pauses are unpredictable and not very frequent, and might be long |\r\n| 3|a balance between pauses and throughput|  pauses are more predictable and more frequent. The longest pauses are shorter than 2|\r\n| 4 |short pauses|pauses are more predictable and more frequent. The longest pauses are shorter than 3|\r\n\r\nYou can specify the level you want via an application config. So for example for your scenario if memory footprint is what you care about the most you can specify level 1.",
                                           "updatedAt":  "2017-08-11T04:23:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjIxNjM5MQ==",
                                           "createdAt":  "2017-08-14T15:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kvochko",
                                           "body":  "@Maoni0 Thanks! I\u0027ve measured private dirty memory used only by the managed heap, and it seems that the 1156Kb gain in HelloWorld is coming from elsewhere.\r\n\r\nHere are the latest memory gains for all apps (peak private dirty for GC only), with the following changes relative to the master:\r\n* `g_bLowMemoryFromHost` set to 1, \r\n* `fragmentation_burden_limit` set to 0.15 for gen1 and gen2, \r\n* a fixed small ephemeral budget\r\n* reduced slack space after decommit\r\n\r\n\r\n```\r\nApplication         | Original peak      | Modified peak      | Difference\r\n                    | Private_Dirty, Kb  | Private_Dirty, Kb  |\r\n\r\nHelloWorld          | 364                | 216                | 148\r\nPuzzle              | 684                | 468                | 216\r\nApplicationStoreUI  | 628                | 372                | 256\r\nGalleryUI           | 516                | 336                | 180\r\nAppCommon           | 660                | 516                | 144\r\nSNSUI               | 2156               | 1624               | 532\r\nCalculator          | 1024               | 660                | 364\r\n```\r\nPerformance degradation:\r\n```\r\nApplication         | Original startup   | Modified startup   | Difference\r\n                    | CPU time (jiffies) | CPU time (jiffies) |\r\n\r\nHelloWorld          | 135                | 143                | 8\r\nApplicationStoreUI  | 192                | 219                | 27\r\nGalleryUI           | 251                | 251                | 0\r\nSNSUI               | 447                | 458                | 11\r\nCalculator          | 290                | 299                | 9\r\n\r\n```",
                                           "updatedAt":  "2017-08-14T15:07:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjMwODg4Nw==",
                                           "createdAt":  "2017-08-14T21:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@kvochko, thanks for the data. @swgillespie will be working with you on this. We need to do the following:\r\n\r\n1. Set different sets of tuning parameters according to latency levels - things like  g_bLowMemoryFromHost might be removed completely on core as there\u0027s no hosting;\r\n\r\n2. Run a lot more tests with more data collected so we understand the perf characteristics better - unfortunately on Linux it\u0027s a lot harder to get perf data so we can start by running perf tests on windows;\r\n\r\nWe also need to clearly document what the goal for each latency level is - for example, for the memory footprint level I think we\u0027d definitely care about steady state perf too, not just startup.\r\n",
                                           "updatedAt":  "2017-08-14T21:41:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMjQxODA3Ng==",
                                           "createdAt":  "2017-08-15T09:04:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ruben-ayrapetyan",
                                           "body":  "CC @lemmaa @egavrin ",
                                           "updatedAt":  "2017-08-15T09:04:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMzM3OTg2MA==",
                                           "createdAt":  "2017-08-18T15:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "We have continued our research and got the next results.\r\n\r\nResults for the forced compacting (`gcForceCompact`) and LOH compacting (`GCLOHCompact`) enabled (measured on a set of Tizen Xamarin GUI applications).\r\n\r\nPrivate_Dirty memory used only by the managed heap:\r\n\r\nApplication|Original, Peak, Private_Dirty, Kb|Modified, Peak, Private_Dirty, Kb|Difference\r\n-----------|---------------------------------|---------------------------------|----------\r\nHelloWorld|300|284|16 (5.33%)\r\nBoxViewClock|1388|1284|104 (7.49%)\r\nPuzzle|940|780|160 (17.02%)\r\nApplicationStoreUI|668|548|120 (17.96%)\r\nGalleryUI|564|444|120 (21.28%)\r\nAppCommon|708|612|96 (13.56%)\r\nSNSUI|2428|1715|712 (29.32%)\r\nCalculator|1064|1008|56 (5.26%)\r\n\r\nAverage reduction of GC heap - 14.65%\r\n\r\nStartup time difference is:\r\n\r\nApplication|Original, Application startup real (wall-clock) time, seconds|Modified, Application startup real (wall-clock) time, seconds|Difference\r\n-----------|-------------------------------------------------------------|-------------------------------------------------------------|----------\r\nHelloWorld|0.94|0.97|0.03 (3.19%)\r\nBoxViewClock|1.11|1.12|0.01 (0.90%)\r\nPuzzle|1.36|1.36|0\r\nApplicationStoreUI|1.42|1.42|0\r\nGalleryUI|1.3|1.31|0.01 (0.77%)\r\nAppCommon|1.72|1.73|0.01 (0.58%)\r\nSNSUI|3.96|4.01|0.05 (1.25%)\r\nCalculator|2.34|2.34|0\r\n\r\nAverage increase of startup time - 0.83%\r\n\r\nWhy are `gcForceCompact` and `GCLOHCompact` options marked as UNSUPPORTED? Are they planned to be removed in future?\r\n\r\nCurrently we are concentrated on memory consumption for Tizen and we could add two GC optimization levels: \"default\", which would be the same as now, and \"memory footprint\", which we will tune according to our investigations on Tizen.\r\n\r\nWhat do you think about the results?",
                                           "updatedAt":  "2017-08-22T16:52:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNDA1NTg4NA==",
                                           "createdAt":  "2017-08-22T15:06:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "We have continued our research further and got the next results for the next GC options (measured on a set of Tizen Xamarin GUI applications):\r\n\r\n- LOH compaction (`GCLOHCompact`)\r\n- forced compacting (`gcForceCompact`)\r\n- `g_bLowMemoryFromHost` set to 1\r\n\r\nPrivate_Dirty memory used only by the managed heap:\r\n\r\nApplication|Original, Peak, Private_Dirty, Kb|Modified, Peak, Private_Dirty, Kb|Difference\r\n-----------|---------------------------------|---------------------------------|----------\r\nHelloWorld|372|292|80 (21.51%)\r\nBoxViewClock|1372|744|628 (45.77%)\r\nPuzzle|868|572|296 (34.10%)\r\nApplicationStoreUI|636|420|216 (33.96%)\r\nGalleryUI|532|360|172 (32.33%)\r\nAppCommon|700|552|148 (21.14%)\r\nSNSUI|2172|1624|548 (25.23%)\r\nCalculator|1032|696|336 (32.56%)\r\n\r\nAverage reduction of GC heap - 30.83%\r\n\r\nStartup time difference (startup time measurement was done with the new start point):\r\n\r\nApplication|Original, Application startup real (wall-clock) time, seconds|Modified, Application startup real (wall-clock) time, seconds|Difference\r\n-----------|-------------------------------------------------------------|-------------------------------------------------------------|----------\r\nHelloWorld|1.6095|1.6185|0.0090 (0.56%)\r\nBoxViewClock|1.7677|1.7777|0.0100 (0.57%)\r\nPuzzle|2|2|0\r\nApplicationStoreUI|2.0620|2.0771|0.0151 (0.73%)\r\nGalleryUI|1.9640|1.9699|0.0059 (0.30%)\r\nAppCommon|2.3904|2.4123|0.0219 (0.92%)\r\nSNSUI|4.6215|4.7529|0.1314 (2.84%)\r\nCalculator|2.9938|3.0470|0.0532 (1.78%)\r\n\r\nAverage increase of startup time - 0.96%\r\n\r\n@Maoni0 @swgillespie Is it possible to add \"memory footprint\" option with this configuration?",
                                           "updatedAt":  "2017-08-24T11:28:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNDEwODU4Mw==",
                                           "createdAt":  "2017-08-22T18:13:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swgillespie",
                                           "body":  "@gbalykov level 1 of Maoni\u0027s proposed GC configuration would be optimizing for memory footprint, if that\u0027s what you\u0027re asking. I started a branch the other day with some work towards this feature: https://github.com/swgillespie/coreclr/tree/feature-gc-latency-levels. (very bare bones)\r\n\r\nSetting LOH compaction + force compaction is potentially dangerous for steady-state perf - we\u0027ll need to do a lot of performance testing and tuning to arrive at the correct internal \"knobs\" that we need to be turning to get better memory footprints without compromising too heavily on the other aspects of runtime perf. \r\n\r\nAt the moment, our infrastructure for getting these sorts of questions answered (running perf tests and collecting data) is lacking a little bit. I\u0027m working on making this better as I write this so I\u0027m looking forward to be able to use it to test this feature.",
                                           "updatedAt":  "2017-08-22T18:13:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNDE3OTY2Nw==",
                                           "createdAt":  "2017-08-22T23:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@gbalykov would you please collect some ETW events for your perf runs? it would be really helpful to actually see the GC characteristics. The instructions are [here](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/linux-performance-tracing.md).",
                                           "updatedAt":  "2017-08-22T23:30:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNDQxNzczNQ==",
                                           "createdAt":  "2017-08-23T18:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@Maoni0 @swgillespie  We agree that general case \"memory footprint\" GC optimization level should be tested and tuned on the wide spectrum of applications. Our current goal is more specific - memory consumption on Tizen GUI applications, so we would like to be able to specify GC configuration, which was tuned for this specific scenario. How could this be implemented in CoreCLR?\r\n\r\n[SNSUI.trace.zip](https://github.com/dotnet/coreclr/files/1246452/SNSUI.trace.zip) is the result of the `./perfcollect collect SNSUI -gconly` for SNSUI Tizen Xamarin application. We were able to open result with Trace Compass tool.\r\n\r\nAlso here are the results for two GC heavy GUI applications, which we have tested:\r\n\r\nPrivate_Dirty memory used only by the managed heap:\r\n\r\nApplication|Original, Peak, Private_Dirty, Kb|Modified, Peak, Private_Dirty, Kb|Difference\r\n-----------|---------------------------------|---------------------------------|----------\r\norg.tizen.example.gc1.Tizen|4188|4044|144 (3.44%)\r\norg.tizen.example.gc2.Tizen|237104|125844|111260 (46.92%)\r\n\r\nStartup time difference:\r\n\r\nApplication|Original, Application startup real (wall-clock) time, seconds|Modified, Application startup real (wall-clock) time, seconds|Difference\r\n-----------|-------------------------------------------------------------|-------------------------------------------------------------|----------\r\norg.tizen.example.gc1.Tizen|7.236|8.639|1.403 (19.39%)\r\norg.tizen.example.gc2.Tizen|75.304|87.563|12.259 (16.28%)\r\n\r\nCurrently we consider this results as possibly fully satisfying for Tizen GUI profile.\r\n",
                                           "updatedAt":  "2017-08-23T18:11:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNDYwOTQ0OA==",
                                           "createdAt":  "2017-08-24T11:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "We have refined the way of memory consumption measurement for managed heap and the results were updated https://github.com/dotnet/coreclr/issues/13292#issuecomment-324055884",
                                           "updatedAt":  "2017-08-24T11:34:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNTgyNDI2Mg==",
                                           "createdAt":  "2017-08-29T22:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@brianrob is what perfcollect collected supposed to be viewable with PerfView? I just opened the trace @gbalykov mentioned in [this comment](https://github.com/dotnet/coreclr/issues/13292#issuecomment-324417735) and PerfView just gives me some incomplete events with totally bogus info, eg: there\u0027s GCStart and no GCEnd events. for a GCStart it gives me this as its fields:\r\n\r\nProcess(1981834595) (1981834595)\tThreadID=\"543,451,503\" Count=\"828,400,494\" Reason=\"41\" Depth=\"1,043,341,628\" Type=\"2031616\" ClrInstanceID=\"0\" ClientSequenceNumber=\"154,618,822,656\" |\r\n\r\nI\u0027ll take a look at the PR.\r\n\r\n\r\n",
                                           "updatedAt":  "2017-08-29T22:36:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNTgyOTU5OQ==",
                                           "createdAt":  "2017-08-29T23:05:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@Maoni0, I\u0027m not sure what\u0027s up and why PerfView doesn\u0027t like this data file.  I will look, but it will take me some time to get to this.\r\n\r\nIn the meantime, you may have better luck opening the trace on Linux and looking at the individual events.  You can do so by unzipping the file and then running babeltrace SNSUI.trace/lttngTrace | grep GC | more.  The results when opening on Linux look more sane to me.",
                                           "updatedAt":  "2017-08-29T23:05:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNTgzNDAwNw==",
                                           "createdAt":  "2017-08-29T23:32:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "thanks @brianrob ",
                                           "updatedAt":  "2017-08-29T23:32:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNTgzNjg1Mg==",
                                           "createdAt":  "2017-08-29T23:51:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@gbalykov we definitely don\u0027t want call something \"unstable perf\" which is not explainable. Could you please explain your perf goal here? The startup throughput perf does take a significant hit (this is not unstable - you are just aiming for a different perf goal). Also do you not care about your steady state at all? \u0027cause I haven\u0027t seen any steady state data. I can see some of these apps naturally only have a start up phase like calculator. what about puzzle or galleryUI? I would think users would want to keep these running for a while and switch between different apps during that process. ",
                                           "updatedAt":  "2017-08-29T23:51:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNTk2Nzc5OQ==",
                                           "createdAt":  "2017-08-30T11:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@Maoni0 Our perf goal is to not slow down Tizen Xamarin GUI applications noticeably. \r\n\r\nAmong .NET GUI applications, which could be launched on Tizen or Linux, we know only Tizen Xamarin GUI applications. They do almost all of the work during startup, that\u0027s why we measured startup time. GC GUI benchmarks (which we used as emulation of GC heavy applications) also do all of the work during startup, i.e. startup time is the total execution time of GC benchmark. We assume that behaviour in steady state will be between the simple startup-only GUI applications and GC heavy emulation applications.\r\n\r\nSo, unfortunately, we do not have actual GUI applications, which do significant work after the startup, and so could be used to measure steady state. Could you, please, suggest a Linux benchmark or application to measure performance of steady state on it?",
                                           "updatedAt":  "2017-08-30T11:54:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNjYzNjY3NA==",
                                           "createdAt":  "2017-09-01T17:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@Maoni0 As according to our assumption the behaviour in steady state will be between the simple startup-only GUI applications and GC heavy emulation applications, we have removed `_unstable_perf` suffix, now it is just `latency_level_small_memory_footprint`. What do you think about that? \r\n\r\nStraightforward measurement of steady state certainly is more desirable, and we will do that when the appropriate application appears.",
                                           "updatedAt":  "2017-09-01T17:18:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNzM0MjI4MQ==",
                                           "createdAt":  "2017-09-06T00:45:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@gbalykov I must apologize that I haven\u0027t been very responsive as I really just haven\u0027t had much time to think about this. I am very cautious because this is part of the public surface which means we\u0027d need to support it for a long time. I\u0027m actually quite swamped this week as well but I am hoping I can spend time on this next week. Thanks for your patience!",
                                           "updatedAt":  "2017-09-06T00:45:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyOTcwNDE5Ng==",
                                           "createdAt":  "2017-09-15T07:27:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "dotnet/coreclr#13625 ",
                                           "updatedAt":  "2017-09-15T07:27:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMTE2MTAxNQ==",
                                           "createdAt":  "2017-09-21T13:45:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ettery",
                                           "body":  "How does the GC/CoreCLR view the machine specs when running in a Docker container? Does every run-time think it has use of all the host resources? I ask because I\u0027m running a number of simple APIs (microservices) on Docker on Ubuntu (ASP.NET Core 1.1.2), and each container is consuming 500-900 Mb of memory. It\u0027s not a powerful server - 16Gb/4 cores at the moment. CPU usage is under 5% but I\u0027m hitting memory limits. I\u0027ve not been able to find a solution yet. I can tell Docker to limit the memory available to each container, but what I see is that they don\u0027t seem to use less memory, they just start using swap space, which will hurt their performance.\r\n\r\n",
                                           "updatedAt":  "2017-09-21T13:48:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMTIwMTk2Mw==",
                                           "createdAt":  "2017-09-21T15:59:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA6boHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gladskih",
                                                                               "createdAt":  "2020-01-31T14:06:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Ettery .NET core reads process memory limits from the corresponding cgroups, but there was a bug that caused it to not to work properly in docker. This bug is fixed in the upcoming 2.0.2 release and as an addition, CPU count limits will be honored too.",
                                           "updatedAt":  "2017-09-21T15:59:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMTIzNTQ5Nw==",
                                           "createdAt":  "2017-09-21T18:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOATOL9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeesCBakker",
                                                                               "createdAt":  "2018-02-27T17:49:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Ettery",
                                           "body":  "@janvorli - Interesting, thank you!  Look forward to that.  Meantime `\u003cServerGarbageCollection\u003efalse\u003c/ServerGarbageCollection\u003e` seems to be working for me, I don\u0027t have high concurrency at the moment.",
                                           "updatedAt":  "2017-09-21T18:03:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMTc1OTMwNw==",
                                           "createdAt":  "2018-07-02T10:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dan-True",
                                           "body":  "Is this still being investigated? I just made en entirely new ASP.NET project using \u0027dotnet new vue\u0027 and after first request to the backend, memory use was already 103.7 MB - which seems like a lot to listen on a single port and host a single endpoint.\r\n\r\nIs this asp.net or the clr eating up that memory?\r\n\r\nIs there anything I can do to help this investigation/fix/feature? I haven\u0027t meddled in the dotnet repo before, but would love to help if I can.",
                                           "updatedAt":  "2018-07-02T10:37:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMTgzNTQ3OA==",
                                           "createdAt":  "2018-07-02T15:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAca2qw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dan-True",
                                                                               "createdAt":  "2018-07-02T20:55:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dstj",
                                                                               "createdAt":  "2018-09-22T00:42:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Is this asp.net or the clr eating up that memory?\r\n\r\nYou would need to profile to get the answer. The memory use of basic ASP.NET app (dotnet new web) after first request is \u003c15MB. So the remaining ~85MB are likely result of whatever the vue template is doing.\r\n\r\nYou can try turning off server garbage collector using  `\u003cServerGarbageCollection\u003efalse\u003c/ServerGarbageCollection\u003e` as suggested above and see whether it makes a difference.",
                                           "updatedAt":  "2018-07-02T15:03:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMzcwNjYxMA==",
                                           "createdAt":  "2018-09-22T01:18:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dstj",
                                           "body":  "@janvorli mentioned a fix in 2.0.2, but as of 2.1.402, I can confirm that setting `\u003cServerGarbageCollection\u003efalse\u003c/ServerGarbageCollection\u003e` can still have a huge impact on memory consumption.\r\n\r\nHere\u0027s a graph from my dotnet core app (dotnet core + Angular) running on a Heroku Dyno. It\u0027s limited to 512MB and I constantly hit the limit before setting `ServerGarbageCollection` to `false`. It has no volume whatsoever since it\u0027s a staging app. I was the only one hitting the site.\r\n\r\n![image](https://user-images.githubusercontent.com/467692/45911539-97182280-bde2-11e8-9844-31642b84bc0b.png)\r\n",
                                           "updatedAt":  "2018-09-22T01:18:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjE3ODYzMQ==",
                                           "createdAt":  "2018-11-06T09:01:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmNKnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hpbieker",
                                                                               "createdAt":  "2018-11-06T19:48:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pavel-THL",
                                                                               "createdAt":  "2018-11-07T01:08:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcelion",
                                                                               "createdAt":  "2018-11-08T14:14:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johnsonlu",
                                                                               "createdAt":  "2018-12-06T09:15:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "effyteva",
                                                                               "createdAt":  "2019-01-05T22:07:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tsu1980",
                                                                               "createdAt":  "2019-01-10T01:19:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oleg-makaruk",
                                                                               "createdAt":  "2019-04-03T08:11:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "theberserker",
                                           "body":  "For us this is a big issue under docker on linux host (Debian 9), using images `dotnet:2.1-sdk` (builder), `dotnet:2.1-aspnetcore-runtime` (runner). We had memory consumption of a fairly simple MVC app as high as 50GB in a few days of running the service! After setting `ServerGarbageCollection=false` it went to the area of 60MB. Additionally I was unable to reproduce the issue locally on Windows development machine without Docker.\r\nThere was this issue in the past already https://github.com/aspnet/aspnet-docker/issues/300 but that was supposed to be fixed already. \r\nIs this known and tracked already somewhere under better issue? What additional info would be required for you to check this in more detail? ",
                                           "updatedAt":  "2018-11-06T09:01:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjk2MzE2Nw==",
                                           "createdAt":  "2018-11-08T11:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "cc: @Maoni0 ",
                                           "updatedAt":  "2018-11-08T11:27:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzAxNDAyNw==",
                                           "createdAt":  "2018-11-08T14:34:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Aniel",
                                           "body":  "Could this be related to https://github.com/aspnet/AspNetCore/issues/3409?",
                                           "updatedAt":  "2018-11-08T14:34:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MTY5NTA2OQ==",
                                           "createdAt":  "2019-01-05T22:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "effyteva",
                                           "body":  "\u003e For us this is a big issue under docker on linux host (Debian 9), using images `dotnet:2.1-sdk` (builder), `dotnet:2.1-aspnetcore-runtime` (runner). We had memory consumption of a fairly simple MVC app as high as 50GB in a few days of running the service! After setting `ServerGarbageCollection=false` it went to the area of 60MB. Additionally I was unable to reproduce the issue locally on Windows development machine without Docker.\r\n\u003e There was this issue in the past already [aspnet/aspnet-docker#300](https://github.com/aspnet/aspnet-docker/issues/300) but that was supposed to be fixed already.\r\n\u003e Is this known and tracked already somewhere under better issue? What additional info would be required for you to check this in more detail?\r\n\r\n+1 for this, we suffer from the same issue on 2.2",
                                           "updatedAt":  "2019-01-05T22:07:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mzk4NTQzNA==",
                                           "createdAt":  "2019-03-18T16:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "We also have the same problem, any solutions to this except\r\n```\u003cServerGarbageCollection\u003efalse\u003c/ServerGarbageCollection\u003e```",
                                           "updatedAt":  "2019-03-18T16:19:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDExMTk2OQ==",
                                           "createdAt":  "2019-03-18T21:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "could you please give us more detail on your container setup? what limits did you set on your container? \r\n",
                                           "updatedAt":  "2019-03-18T21:38:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDExNDA5Mw==",
                                           "createdAt":  "2019-03-18T21:46:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "I\u0027ve been using .NET Core 2.1.6 and running dotnet watch run *.csproj inside my container\nI\u0027ve tried to set no limits and each of my containers reached 700mb, by adding a 150mb mem_limit the microservices never manage to fully build as it is so slow, each request is raising memory usage by 1mb and at some point (roughly 15min after) it went down to 250mb (which is still extremely high for an almost blank project API ",
                                           "updatedAt":  "2019-03-18T21:46:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDE2NjkxNA==",
                                           "createdAt":  "2019-03-19T01:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I\u0027m not sure what to expect for \"an almost blank project API\". but it\u0027s odd that you could even go up to 250mb in a container with the mem_limit as only 150mb. \r\n\r\nwe\u0027ll need to collect some data to see what\u0027s going on. would it be possible to collect a trace with the instructions mentioned [here](https://github.com/dotnet/coreclr/blob/66009329a187634dc432854cdd7c893d972156eb/Documentation/project-docs/linux-performance-tracing.md)? you can pass in the -gccollectonly commandline arg.",
                                           "updatedAt":  "2019-03-19T01:53:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDM0NzI5NQ==",
                                           "createdAt":  "2019-03-19T12:47:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "Actually it is correctly limited to 150 mb and never raises to 250 mb, I said that for the first case, when limiting to 150 mb it literally take ages fo the command dotnet watch run to complete (which seems very similar to a slowness linked to lack of memory)\r\n\r\nI\u0027ll collect the data required today and will post there",
                                           "updatedAt":  "2019-03-19T12:47:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDQyNzUwOQ==",
                                           "createdAt":  "2019-03-19T15:34:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "Following procedure for collecting trace doesn\u0027t seem to work, it says that my .NET Core process is not running while running `ps aux` show all of the dotnet commands running\r\n\r\n```\r\nStarting post-processing. This may take some time.\r\n\r\nzero-sized file (perf.data), nothing to do!\r\nGenerating native image symbol files\r\nzero-sized file (perf.data), nothing to do!\r\nlibcoreclr.so not found in perf data. Please verify that your .NET Core process is running and consuming CPU.\r\nSaving native symbols\r\nzero-sized file (perf.data), nothing to do!\r\n...FINISHED\r\nExporting perf.data file\r\n...FINISHED\r\nCompressing trace files\r\n...FINISHED\r\nCleaning up artifacts\r\n...FINISHED\r\n\r\nTrace saved to sampleTrace.trace.zip\r\nroot@d15928a78650:/src/Authentication/Authentication# \r\nroot@d15928a78650:/src/Authentication/Authentication# ps aux   \r\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot         1  0.0  0.0   4276   796 ?        Ss   15:23   0:00 /bin/sh -c dotnet watch run --urls=http://+:80\r\nroot         6  0.1  0.1 3137464 57796 ?       SLl  15:23   0:00 dotnet watch run --urls=http://+:80\r\nroot        24  1.3  0.0 4837284 40952 ?       SLl  15:23   0:07 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/DotnetTools/dotnet-watch/2.2.0/tools/netcoreapp2.2/any/dotnet-watch.dllroot        84  0.4  0.1 3950672 93664 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       101  0.3  0.1 4155492 88064 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       120  0.3  0.1 4081744 85356 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       142  0.3  0.1 4016208 85084 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       162  0.3  0.1 4081744 83640 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       183  0.3  0.1 4221012 86564 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       202  0.4  0.1 4024404 92676 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       225  0.3  0.1 4024404 87204 ?       SLl  15:23   0:02 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       335  0.1  0.1 3334352 85608 ?       SLl  15:23   0:01 /usr/share/dotnet/dotnet run --urls=http://+:80\r\nroot       468  0.3  0.1 3740624 81952 ?       SLl  15:23   0:01 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /usr/share/dotnet/sdk/2.2.105/MSBuild.dll /nologo /nodemoderoot       505  1.8  0.6 20673588 347108 ?     SLl  15:23   0:10 /usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.2.105/Roslyn/bincore/VBCSCompiler.dll -pipename:root.F.Id9n6W13pgGW8gTi+C2KZtroot       613  972  0.1 21465172 93096 ?      SLl  15:23  90:47 dotnet exec /src/Authentication/Authentication/bin/container/Debug/netcoreapp2.1/Authentication.dll --urls=http://+:80\r\nroot      2248  1.2  0.0 902460  6260 ?        Ssl  15:28   0:03 lttng-sessiond --daemonize\r\nroot      2258  0.0  0.0  82964   560 ?        S    15:28   0:00 lttng-runas    --daemonize\r\nroot      2279  0.0  0.0 539296  5872 ?        Sl   15:28   0:00 lttng-consumerd  -u --consumerd-cmd-sock /var/run/lttng/ustconsumerd64/command --consumerd-err-sock /var/run/lttng/ustconsumerroot      2281  0.0  0.0  80268   540 ?        S    15:28   0:00 lttng-runas      -u --consumerd-cmd-sock /var/run/lttng/ustconsumerd64/command --consumerd-err-sock /var/run/lttng/ustconsumerroot      3272  0.1  0.0  18184  3364 pts/0    Ss   15:32   0:00 /bin/bash\r\nroot      3586  0.0  0.0  36632  2872 pts/0    R+   15:33   0:00 ps aux\r\n```",
                                           "updatedAt":  "2019-03-19T15:34:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDQ1MDIyNw==",
                                           "createdAt":  "2019-03-19T16:13:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "It seems like if I limit the container to only have half of a core of a CPU the memory usage drops to a stable 300MB, (which is still extremly high)",
                                           "updatedAt":  "2019-03-19T16:13:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDQ1MjA3Mg==",
                                           "createdAt":  "2019-03-19T16:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "I\u0027ve tried to reduce it down to 0.1 cpu but now it takes half an hour to boot up, also the improvements in memory usage is not that big since it only drops to 250mb, doesn\u0027t seem to be a good solution",
                                           "updatedAt":  "2019-03-19T16:17:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDQ4NTMyOA==",
                                           "createdAt":  "2019-03-19T17:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@Rakiah Could you try it with a preview net core 3.0 sdk container? There have been some decent wins around memory usage in 3.0.\r\n\r\nAlso I\u0027m curious why you need to build/watch a project in a container that you then also give a memory limit? The scenario these low memory limits were optimized for are mainly production usage, a plain runtime container (no dotnet sdk) that just boots your published directory entrypoint dll. Do you have a specific reason why you cannot go with the normal publish scenario?\r\n",
                                           "updatedAt":  "2019-03-19T17:35:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDQ5MzI5OA==",
                                           "createdAt":  "2019-03-19T17:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "I just tried the memory limit to mitigate the 700mb ram usage:\r\n\r\nLet me explain my cases: we\u0027re running a micro-services architecture, my developpers run on machines with 16 gb of ram, If they boot up our currently 10 (but growing) microservices it takes just 8 GB of ram for this to work, but they also run Kafka \u0026 a Unity frontend, this is already a problem and will be a bigger problem soon enough, i\u0027ll try with .NET Core 3.0 SDK container tomorrow as I have to leave now:\r\n\r\nAlso, I\u0027ve just ran this using .NET Core 2.1 SDK For Linux\r\n`dotnet new web`\r\nand added this dockerfile:\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR /vsdbg\r\nRUN apt-get update \\\r\n    \u0026\u0026 apt-get install -y --no-install-recommends \\\r\n            unzip \\\r\n    \u0026\u0026 rm -rf /var/lib/apt/lists/* \\\r\n    \u0026\u0026 curl -sSL https://aka.ms/getvsdbgsh \\\r\n        | bash /dev/stdin -v latest -l /vsdbg\r\n\r\nENV DOTNET_USE_POLLING_FILE_WATCHER 1\r\n\r\nWORKDIR /src\r\n\r\nENTRYPOINT dotnet watch run --urls=http://+:80\r\n```\r\nbuilding it like so:\r\n`docker build -t test .`\r\nand finally running it like so:\r\n`docker run -v \"$(pwd):/src\" test`\r\nI get a service using 180mb of RAM\r\n",
                                           "updatedAt":  "2019-03-19T17:49:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDUxNjgxOA==",
                                           "createdAt":  "2019-03-19T18:35:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@tommcdon would it be possible to have someone from your team to look at the problem of collecting traces on linux that @Rakiah is [encountering](https://github.com/dotnet/coreclr/issues/13292#issuecomment-474427509)?",
                                           "updatedAt":  "2019-03-19T18:35:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDczMDQzMA==",
                                           "createdAt":  "2019-03-20T08:17:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rakiah",
                                           "body":  "Doesn\u0027t seem very trivial to go from 2.1.6 to 3.0.0-preview4 @NinoFloris \r\nI get error at bootup for my code (however, for the small time that the container is running (before any of my code is running basically, it raises to 280 mb of RAM))",
                                           "updatedAt":  "2019-03-20T08:17:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTQ4NTAzNQ==",
                                           "createdAt":  "2019-03-22T03:50:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "also looping in @noahfalk for the perfcollect issue [above](https://github.com/dotnet/coreclr/issues/13292#issuecomment-474427509). \r\n",
                                           "updatedAt":  "2019-03-22T03:50:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTU4NDIxNw==",
                                           "createdAt":  "2019-03-22T11:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e Following procedure for collecting trace doesn\u0027t seem to work...\r\n\r\n@Rakiah Very sorry to see you have been having trouble with this. Could you share that sampleTrace.trace.zip file that was generated with us? There is a [logfile inside](https://github.com/dotnet/corefx-tools/blob/master/src/performance/perfcollect/perfcollect#L1559) which might have useful diagnostic information in it about why the collection had problems.\r\n\r\nDespite the ominous sounding zero-size warnings, the zip may also have trace data in it that @Maoni0 could use. Perfcollect script is running two collection tools in parallel, perf and lttng. Perf collects sampled callstacks that are useful for CPU investigations whereas lttng collects runtime instrumentation, such as events produced by the GC. Even if the perf portion has been lost for whatever reason, the lttng portion might still have very useful GC information in it.",
                                           "updatedAt":  "2019-03-22T11:23:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjgzMTY2NA==",
                                           "createdAt":  "2020-09-22T16:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @kvochko, @Rakiah this issue seems to have stalled trying to collect logs on linux? Is there anything actionable as part of this? Also would be ideal to check the behavior on .net 5. Thanks",
                                           "updatedAt":  "2020-09-22T16:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-1dyI",
                                           "createdAt":  "2022-02-28T12:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "code99",
                                           "body":  "Hi @noahfalk and @msftgits - has this been addressed in .net 6?",
                                           "updatedAt":  "2022-02-28T12:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-1vx9",
                                           "createdAt":  "2022-02-28T13:50:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I was only helping with the perfcollect tooling issues. You probably want to ask the GC folks like @mangod9 or @Maoni0. ",
                                           "updatedAt":  "2022-02-28T13:50:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-12ZR",
                                           "createdAt":  "2022-02-28T14:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "code99",
                                           "body":  "Thank you, @noahfalk.\r\n\r\nHi @mangod9 and @Maoni0 - Can you please confirm the status of this issue in .net 6? Thanks.",
                                           "updatedAt":  "2022-02-28T14:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FxKoI",
                                           "createdAt":  "2022-06-29T21:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "majid-sharif-soleimani",
                                           "body":  "I have written a project to fetch some data from database, process them and send a message to a server. It runs fine on my laptop (which runs Windows 10). On my computer, the project consumes less than 200 megabytes of memory. However, when I deploy it on a t3.small ec2 machine using docker and docker-compose, it consumes more than 1.5 GB of RAM and makes the machine unresponsive. Can anyone help with this?",
                                           "updatedAt":  "2022-06-29T21:36:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FxaZI",
                                           "createdAt":  "2022-06-29T23:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "we can, but we\u0027d need perf data. to begin with, collect a top level trace. described [here](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#how-to-collect-top-level-gc-metrics). if it doesn\u0027t get you to the right section (sometimes it doesn\u0027t and I dunno why) you can  search for \"how to collect\" in the doc.",
                                           "updatedAt":  "2022-06-29T23:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N0bQg",
                                           "createdAt":  "2024-09-27T13:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Can we conclude DATAS (https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/datas) has solved this problem sufficiently and close the issue?",
                                           "updatedAt":  "2024-09-27T13:48:29Z"
                                       }
                                   ],
                         "totalCount":  52
                     },
        "title":  "Reduce CoreCLR memory footprint",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9022",
        "createdAt":  "2017-09-27T00:34:54Z",
        "number":  9022,
        "author":  "vancem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQP5dg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2017-09-27T00:36:38Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "danmoseley",
                                            "createdAt":  "2017-09-27T00:36:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidfowl",
                                            "createdAt":  "2017-09-27T00:46:04Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "davidfowl",
                                            "createdAt":  "2017-09-27T00:46:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2017-09-27T14:14:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FSou1",
                                            "createdAt":  "2017-09-27T16:49:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2017-09-28T11:26:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "redknightlois",
                                            "createdAt":  "2017-09-29T14:21:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aL3891",
                                            "createdAt":  "2017-09-29T17:22:59Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Rattenkrieg",
                                            "createdAt":  "2017-10-01T11:18:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joaofbantunes",
                                            "createdAt":  "2017-10-02T12:10:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "clarkis117",
                                            "createdAt":  "2017-11-21T03:28:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ErikSchierboom",
                                            "createdAt":  "2017-11-21T07:39:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lillo42",
                                            "createdAt":  "2018-03-26T10:10:57Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2018-09-30T14:37:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2018-09-30T14:37:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yufeih",
                                            "createdAt":  "2018-10-02T05:02:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2018-10-02T12:23:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KvanTTT",
                                            "createdAt":  "2018-11-07T23:47:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2018-11-21T15:18:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "redknightlois",
                                            "createdAt":  "2018-11-29T15:37:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IanYates",
                                            "createdAt":  "2018-11-30T10:40:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "popcatalin81",
                                            "createdAt":  "2019-01-15T12:26:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2020-05-25T21:50:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HurricanKai",
                                            "createdAt":  "2020-06-19T05:04:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CyrusNajmabadi",
                                            "createdAt":  "2020-09-21T18:34:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markusschaber",
                                            "createdAt":  "2020-09-26T08:29:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2020-12-04T03:06:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2021-06-10T16:21:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mvarblow",
                                            "createdAt":  "2021-07-30T18:08:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveSenn",
                                            "createdAt":  "2021-11-07T21:31:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "botinko",
                                            "createdAt":  "2021-12-11T02:47:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "botinko",
                                            "createdAt":  "2021-12-11T02:47:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2023-07-28T01:21:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "IS4Code",
                                            "createdAt":  "2024-03-21T19:44:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tanveerbadar",
                                            "createdAt":  "2024-03-29T05:51:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-10-16T02:45:17Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "fowl2",
                                            "createdAt":  "2025-04-30T01:45:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2025-09-13T00:56:52Z"
                                        }
                                    ],
                          "totalCount":  39
                      },
        "updatedAt":  "2023-08-12T04:54:05Z",
        "body":  "It has been noted that for some applications (notably applications like MSBuild or Visual Studio) that manipulate many file paths, or deserialize large text-based payloads (e.g. JSON or XML), tend to have many duplicated strings.    We could reduce the size of the GC heap by interning them (that is using the same string for all instances of a particular string value).   The runtime already does this for string literals, but strings that are constructed at runtime do not benefit.  \r\n\r\nTo implement this you need a table that remembers all the existing strings that is indexed by string value.  While you COULD do this table lookup check when strings are first created, this is not likely to be a good approach because MANY strings have very short lifetimes, and it would slow down ALL strings creation.   \r\n\r\nInstead the idea is to do the interning check when as part of promoting the object from GC generation 1 to GC generation 2.    This is a nice place to do it because\r\n\r\n1. Most strings die before reaching Gen 2\r\n2. However if they do make it, they are \u0027expensive\u0027 strings in that they are likely to live a long time. \r\n3. Thus it makes sense to de-dup at that point\r\n\r\nAnother nice aspect of this feature is that it does not need to be perfect (you dont\u0027 HAVE to dedup everything).   Thus the hash table you keep can be of fixed size with \u0027replace on collision\u0027 semantics, which is simple and bounded, and tends to favor younger strings (all good things).  \r\n\r\nThe expectation is that typical  apps have 20% of their GC heap be strings.   Some measurements we have seen is that for at least some applications, 10-30% of strings all may be duplicated, so this might save 2-3% of the GC heap.   Not huge, but the feature is not that difficult either.  \r\n\r\nThe first step to build enough of a prototype, so that we can run it on a number of interesting apps and get a feel for how much GC space would save us and how much overhead this would add to (gen 1 and gen 2) GCs.  \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY-EelA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjM3OTYwNg==",
                                           "createdAt":  "2017-09-27T01:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdB4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2018-11-21T15:19:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jhudsoncedaron",
                                                                               "createdAt":  "2018-11-29T21:11:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kasthack",
                                                                               "createdAt":  "2022-01-03T04:21:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2023-04-14T10:41:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T19:44:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "sharwell",
                                           "body":  "⚠️ This would make the `lock (someString)` syntax subject to arbitrary and uncontrollable collisions.",
                                           "updatedAt":  "2017-09-27T01:11:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjM4NzEwMg==",
                                           "createdAt":  "2017-09-27T02:02:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swgillespie",
                                           "body":  "I feel like we already have this problem, since you can intern arbitrary strings already with `string.Intern`. Though you can query whether or not a string is interned with `string.IsInterned`, so it\u0027s perhaps a bit less arbitrary than this, locking on interned strings can cause behavior just as surprising as this.",
                                           "updatedAt":  "2017-09-27T02:02:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjM5MTE5NQ==",
                                           "createdAt":  "2017-09-27T02:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdCZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2018-11-21T15:20:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:41:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T19:45:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "sharwell",
                                           "body":  "@swgillespie That is a very different problem, which can be described as \"If you are going to lock on a string, don\u0027t intern it.\" This is easily understandable and avoidable if locking on a string is something you intend to do. The problem this proposal would introduce is \"Don\u0027t lock on a string because someone else may randomly intern it even if you don\u0027t.\"\r\n\r\n⚠️ This proposal also breaks sentinel strings which serve some intentional purpose through reference equality, such as the implementation discussed in comments in antlr/stringtemplate4#132.",
                                           "updatedAt":  "2017-09-27T02:33:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjQwMDYwNQ==",
                                           "createdAt":  "2017-09-27T03:45:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDOHNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2017-09-27T14:35:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rattenkrieg",
                                                                               "createdAt":  "2017-10-01T13:25:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ygc369",
                                                                               "createdAt":  "2020-02-09T08:21:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-06-03T15:01:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "miroslavp",
                                                                               "createdAt":  "2023-08-09T20:23:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@sharwell presumably we could add an app-level opt out for rare cases where a library depends on that.\r\n\r\nI note that Java interns the backing char array, not the object, and note that avoids the problem of locking on the string (http://openjdk.java.net/jeps/192). @vancem is that possible? It could reduce the locality of the string object and the char array.",
                                           "updatedAt":  "2017-09-27T03:45:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjQwMTYzNg==",
                                           "createdAt":  "2017-09-27T03:55:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We do not use separate arrays for strings like Java does. The string payload is inline (it is smaller that way).",
                                           "updatedAt":  "2017-09-27T03:55:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU1MzkyNQ==",
                                           "createdAt":  "2017-09-27T15:10:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "For the purpose of deserializing text-based payloads, we can parse and compare numbers and property names directly from UTF8 binary to reduce heap allocations. For instance [this Utf8Json library](https://github.com/neuecc/Utf8Json) can deserialize JSON texts with very small allocations.",
                                           "updatedAt":  "2017-09-27T15:10:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU2NzU2NA==",
                                           "createdAt":  "2017-09-27T15:51:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQ_YoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2019-05-04T13:45:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:42:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "sharwell",
                                           "body":  "\u003e presumably we could add an app-level opt out for rare cases where a library depends on that.\r\n\r\nHow would a user know? The example is part of a publicly distributed library, and is an implementation detail which is never intended to be part of the public documentation/usage requirements.",
                                           "updatedAt":  "2017-09-27T15:51:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU4MzkzMQ==",
                                           "createdAt":  "2017-09-27T16:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtSp1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T08:31:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-06-03T15:01:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vancem",
                                           "body":  "The possibility of someone using lock on a string object that @sharwell  is something we would have to at least worry about.    It was already a bad idea to use strings as lock object (because of literal interning), and we would want to make that very clear by adding a compiler error (it can\u0027t be perfect, but it is likely to catch most/all real world usage of strings as lock objects).    Part of the investigation would be to see how common it is (and in particular does it really ever happen that the SAME string value is used for lock objects).     There are mitigations (don\u0027t intern when we notice the string has been used for a lock), but hopefully the simpler solution of enforcing \u0027don\u0027t do that\u0027 will be enough...   \r\n\r\nI don\u0027t think this issue should block the prototype, but if someone wantsto run an analyzer over all nuget packages looking for locks on strings, that would be useful information to have.  \r\n",
                                           "updatedAt":  "2017-09-27T16:46:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU4NDEzMA==",
                                           "createdAt":  "2017-09-27T16:47:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e This would make the lock (someString) syntax subject to arbitrary and uncontrollable collisions.\r\n\r\nLocking on a string can be problematic; if you use that string in as a dictionary key, or do anything else that calls `GetHashcode` on it will mutate its syncblock and change from being able to have fast locks to needing slow locks (though `string`\u0027s syncblock is weirder than the others anyway as it stores isAscii and things, so may already be a slow lock object?)\r\n\r\nA good candidate for a lock is a vanilla object e.g. `object _lock = new object();` that\u0027s not used for anything else - unless you are string to save space; when an object that `GetHashcode()` definitely isn\u0027t called on works too.\r\n\r\n\u003e This proposal also breaks sentinel strings which serve some intentional purpose through reference equality, such as the implementation discussed in comments in antlr/stringtemplate4#132.\r\n\r\nThere is no `String(string s)` .ctor in .NET and at compile time any string in source is interned; you need to construct it from a `char[]` to avoid it. e.g. `new String(\"key\".ToCharArray())`\r\n\r\nEven have [some tests confirming this behaviour](https://github.com/aspnet/KestrelHttpServer/blob/c10ac85cf2cf510f2d6ad6b3f41a446339f8e76e/test/Kestrel.Core.Tests/HttpUtilitiesTest.cs#L81-L133) - to ensure `object.ReferenceEquals(s0, s1)` can be called on 2 different strings specified in different places in source using quotes e.g. `\"a string\"` and elsewhere `\"a string\"`\r\n\r\ne.g. \r\n```csharp\r\nReferenceEquals(\"a string\", \"a string\")\r\n```\r\nWill return `true`",
                                           "updatedAt":  "2017-09-27T16:48:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU4NjI1MQ==",
                                           "createdAt":  "2017-09-27T16:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQ_ZZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yzorg",
                                                                               "createdAt":  "2017-09-29T21:43:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2019-12-10T11:23:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:44:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vancem",
                                           "body":  "@benaadams  - just FYI, literal strings are OFTEN interned, but are not guaranteed to be interned.   In particular literal strings that are precompiled but live in different modules will not be interned (since at compile time we don\u0027t know about the other and we don\u0027t want to do the extra work at runtime to make interning perfect).  \r\n\r\nFor quite a while we have wanted to get off this \u0027locks are on object\u0027 convention.  The idea is that we make up a real \u0027Lock\u0027 object and you use that.   This avoids all the weird sync-block stuff.     We should probably open an issue on that as well.   \r\n\r\nBut for now, the issue @sharwell  brings up is valid, but there are mitigations (although not perfect).  ",
                                           "updatedAt":  "2017-09-27T16:54:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU4NzAzMw==",
                                           "createdAt":  "2017-09-27T16:57:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FSou1",
                                           "body":  "@vancem Should the GC to remove strings from this table when they become into the 2nd generation and won\u0027t be used later?",
                                           "updatedAt":  "2017-09-27T17:01:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU4ODA0MA==",
                                           "createdAt":  "2017-09-27T17:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "@FSou1 would do that as is normal now? \r\n\r\nI assume the idea is to catch a string before it moves to Gen2; and either replace its reference with one already in Gen2 or one about to move to Gen2 (so only one string is promoted - rest are collected).",
                                           "updatedAt":  "2017-09-27T17:01:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjU5NTc2Nw==",
                                           "createdAt":  "2017-09-27T17:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "\u003e@vancem Should the GC to remove strings from this table when they become into the 2nd generation and won\u0027t be used later?\r\n\r\nThe table would hold weak handles to the strings.   Thus when the strings die they naturally also die in the table (but there is logic necessary to reuse the weak handles).   \r\n\r\n ",
                                           "updatedAt":  "2017-09-27T17:28:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjYwOTI3OA==",
                                           "createdAt":  "2017-09-27T18:12:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQ_ZwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:45:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "The topic of string de-dup had come up before. The reasons why we didn\u0027t implement it included the following:\r\n\r\n1) the benefit is not so obvious as folks already pointed out so far on this thread.\r\n\r\n2) java\u0027s strings\u0027 payload is separated from the header object which allows most of the de-dup work to happen on a background thread; we can\u0027t do that because ours is inline and increasing the stop-the-world pause is something we are reluctant to do unless there is a strong justification.",
                                           "updatedAt":  "2017-09-27T18:12:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY0NjQ1Nw==",
                                           "createdAt":  "2017-09-27T20:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdWyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:45:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "CyrusNajmabadi",
                                                                               "createdAt":  "2020-09-21T18:36:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T20:23:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "sharwell",
                                           "body":  "⚠️ This could also break code where users intentionally or unintentionally modify string contents in unsafe code. It\u0027s been a long time now, but I have seen an application before that used unsafe to turn strings mutable as part of some allocation-reducing operation that for some reason wasn\u0027t using `StringBuilder`.",
                                           "updatedAt":  "2017-09-27T20:32:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY1MDUwNA==",
                                           "createdAt":  "2017-09-27T20:48:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtSrWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2017-09-27T21:09:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "exyi",
                                                                               "createdAt":  "2017-11-21T12:45:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clarkis117",
                                                                               "createdAt":  "2017-11-22T03:03:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "worldbeater",
                                                                               "createdAt":  "2018-11-03T12:30:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2018-11-03T14:41:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "weltkante",
                                                                               "createdAt":  "2018-11-29T09:57:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "airbreather",
                                                                               "createdAt":  "2019-11-15T22:10:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-02-08T05:27:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cklutz",
                                                                               "createdAt":  "2020-07-17T09:54:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CyrusNajmabadi",
                                                                               "createdAt":  "2020-09-21T18:36:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saucecontrol",
                                                                               "createdAt":  "2020-12-04T03:09:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-06-03T15:03:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "vancem",
                                           "body":  "\u003e This could also break code where users intentionally or unintentionally modify string contents in unsafe code.\r\n\r\nModifying string contents is actually speced to be illegal (since strings are speced to be immutable, code does depend on this immutability).   While I understand that it might still happen, I don\u0027t think we should be blocking improvements for the sake of illegal code.  \r\n",
                                           "updatedAt":  "2017-09-27T20:48:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY1MTQ3MA==",
                                           "createdAt":  "2017-09-27T20:51:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1Lx_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "airbreather",
                                                                               "createdAt":  "2019-11-15T22:10:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e seen an application before that used unsafe to turn strings mutable...\r\n\r\nIs normally done at creation, so would be a Gen0 string? \r\n\r\ne.g.\r\n```csharp\r\nstring s = new string(\u0027\\0\u0027, length);\r\nfixed (char* pS = s)\r\n{\r\n```\r\nAs soon as the string gets used its \"gone bad\" as far as immutability is concerned; as flags get set on it which change code paths (like aforementioned `IsAscii` flag)",
                                           "updatedAt":  "2017-09-27T20:51:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY1NjEwNA==",
                                           "createdAt":  "2017-09-27T21:09:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Is normally done at creation, so would be a Gen0 string?\r\n\r\nNot guaranteed. The GC can kick in right after `string s = new string(\u0027\\0\u0027, length);` and move the string to Gen 2.\r\n\r\nThe CoreLib code that does this would need to be changed accordingly - to exclude strings being created from de-duping. That\u0027s fine because of this code is part of the runtime and fully under our control.",
                                           "updatedAt":  "2017-09-27T21:09:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY3OTk1Ng==",
                                           "createdAt":  "2017-09-27T23:03:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbc_bA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "exyi",
                                                                               "createdAt":  "2017-11-21T12:46:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T08:35:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T19:38:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Don\u0027t dedupe strings that start with a null `\\0` or dedupe to strings that are currently pinned?",
                                           "updatedAt":  "2017-09-27T23:04:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY4MTQwNQ==",
                                           "createdAt":  "2017-09-27T23:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "It is true that strings need to be mutable when they are first created (via copy etc), and we want to exclude strings that are not done being mutated.   We can probably cover most of the cases, but not de-duping any string that ends with a \u0027\\0\u0027.   Since I think all initializations of strings we do we do a memcpy to fill, when the last character has been initialized we can assume it is stable.   \r\n\r\nBut you can see that there is some subtlety here...",
                                           "updatedAt":  "2017-09-27T23:22:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjY4MjUzMA==",
                                           "createdAt":  "2017-09-27T23:19:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Subtleties aside; intrigued to see how a prototype plays out\r\n\r\nNot sure how much of the SO 30,703,367 \"System.String\" objects (4,120.10 MB) strings are dupes https://github.com/dotnet/coreclr/issues/7083; might be some :)",
                                           "updatedAt":  "2017-09-27T23:19:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzEzOTAzMA==",
                                           "createdAt":  "2017-09-29T14:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRDG7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CyrusNajmabadi",
                                                                               "createdAt":  "2020-09-21T18:37:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "redknightlois",
                                           "body":  "@sharwell We are using that, but as @benaadams and @vancem said, as it is known and explicit knowledge that mutating strings is illegal, therefore you know you are \"in for a bumpy ride\" if you do that. Not now, because we essentially built our own ```String``` class called ```ByteString``` that works with a backing of unmanaged memory, but the overload of dupes was the reason why we are not using ```String``` anymore if we can avoid it.\r\n\r\nIMHO this approach shouldnt be dismissed on the grounds of \"what if\" and a thorough investigation should be pursued with prototyping and actual field measurement. The potential is huge for most of the codebases I have worked over the years. Allocations are usually dominated by the string class, and when you look at the instances on dumps, allocations runs rampant with duplicates which in many cases are too risky to decide to intern for the general case. Something the runtime has information to deal with.",
                                           "updatedAt":  "2017-09-29T14:19:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzE3MzIyOQ==",
                                           "createdAt":  "2017-09-29T16:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colgreen",
                                           "body":  "The situation around certain file formats having lots of repeated strings can be addressed within specific libraries for handling those formats, i.e. by using String.Itern() during parsing. In fact I think System.Xml already does this to some extent, e.g. XmlNameTable(?) (not sure if it uses String.Intern or it\u0027s own dictionary of strings). \r\n\r\nThe GC approach sounds potentially problematic because although we may expect the address of an object to change (that\u0027s fundamental to using a managed environment), we don\u0027t currently expect that obj1 == obj2 will evaluate differently seemingly at random times. To me that seems like it could unleash a bunch of unintended consequences, i.e. break code where that assumption has been made.\r\n\r\nInteresting idea though.",
                                           "updatedAt":  "2017-09-29T16:26:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzE4NDU5MQ==",
                                           "createdAt":  "2017-09-29T17:14:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRnOAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "redknightlois",
                                                                               "createdAt":  "2017-09-29T17:48:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T08:36:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "benaadams",
                                           "body":  "If the string values are equal than `obj1 == obj2` will evaluate to true whether or not they are the same object. If the two string are infact the same object then the equality will fast path through object reference equals rather than comparing every char, so it may be an extra win there also.",
                                           "updatedAt":  "2017-09-29T17:14:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzE5NDgxOA==",
                                           "createdAt":  "2017-09-29T17:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAfnxqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevingosse",
                                                                               "createdAt":  "2017-09-29T19:55:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2018-09-30T14:44:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2018-11-29T05:11:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "redknightlois",
                                           "body":  "@colgreen The issue with ```.Intern()``` and it should be deal with care is that whenever you decide you are done, there is nothing else you can do about it... So, you can have spikes of similar stuff that you decide to stay and that eventually means that there is no reclamation policy. You cannot ```.Unintern()``` it later, something the GC can. Very bad for servers that must have long uptimes. \r\n\r\nAlso the documentation sais (emphasis is mine): \r\n\r\n\u003e First, the memory allocated for interned String objects is not likely be released until the common language runtime (CLR) terminates. The reason is that the CLR\u0027s reference to the interned String object **can persist after your application, or even your application domain, terminates**. Second, to intern a string, you must first create the string. The memory used by the String object must still be allocated, even though the memory will eventually be garbage collected.\r\n\r\nIn this case the second will still happen for Gen0 but whenever you are going to move it up, you are a lookup away to do the right thing. With the added benefit that if you are running a Gen2 collection and the reference is dead, you can reclaim that spot for someone else.\r\n\r\nThere is little downside (mostly on already illegal constructs or just absurdly dangerous like not using a sync-root), and a lot of upside to let the GC deal with interning automatically. ",
                                           "updatedAt":  "2017-09-29T17:59:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzIyODc0Mg==",
                                           "createdAt":  "2017-09-29T20:18:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRnOGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2018-10-02T12:26:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T08:37:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "colgreen",
                                           "body":  "@benaadams Point taken. The equality test will however have taken different execution paths, i.e. I should have said \"object.ReferenceEquals(obj1, obj2) will evaluate differently seemingly at random times\".\r\n\r\n\u003e equality will fast path ... so it may be an extra win there also.\r\n\r\nYeh fair point.",
                                           "updatedAt":  "2017-09-29T20:19:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzIzMDk3Ng==",
                                           "createdAt":  "2017-09-29T20:28:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colgreen",
                                           "body":  "\u003e There is little downside (mostly on already illegal constructs or just absurdly dangerous like not using a sync-root)\r\n\r\nI certainly agree that any issue around sync locks on string objects are moot, i.e. it\u0027s a horrible pattern that I can\u0027t see being a problem if it\u0027s made into a compile time warning or error, or perhaps even a runtime check.",
                                           "updatedAt":  "2017-09-29T20:28:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzIzNTk2Ng==",
                                           "createdAt":  "2017-09-29T20:50:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdXVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colgreen",
                                                                               "createdAt":  "2017-09-29T21:17:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2018-11-29T05:11:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-02-08T17:43:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T20:23:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "mikedn",
                                           "body":  "\u003e The situation around certain file formats having lots of repeated strings can be addressed within specific libraries for handling those formats, i.e. by using String.Itern() during parsing. In fact I think System.Xml already does this to some extent, e.g. XmlNameTable(?) (not sure if it uses String.Intern or it\u0027s own dictionary of strings).\r\n\r\nYes, SystemXml does avoid creating duplicates via \"name tables\". No, it doesn\u0027t use `String.Intern`. Overall it does a pretty good job IMO, a job that can be replicated by any other library that works with lots of strings that have a high chance of being duplicated:\r\n\r\n* `String.Intern` is problematic due to lifetime issue. SystemXml\u0027s manual interning doesn\u0027t have such issues.\r\n* To use `String.Intern` you have to have a string in the first place. And if you don\u0027t? Well, you allocate a string and then intern it. SystemXml\u0027s manual interning also works with `char[]`. \r\n* SystemXml\u0027s manual interning allows it to use reference equality on strings. The automated solution discussed here cannot be relied upon because interning is randomly delayed.\r\n* SystemXml\u0027s manual interning chooses what to intern (e.g. XML element names, attribute names), strings that are likely to be duplicated and are relatively small in size. Automated string interning has no clue what it is doing, it may very well end up doing busy work.",
                                           "updatedAt":  "2017-09-29T20:50:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzI1NTQ4Nw==",
                                           "createdAt":  "2017-09-29T22:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "redknightlois",
                                           "body":  "@mikedn True, it may be busy work. However copy stuff that is already there to Gen2 is busy work too. So that begs the question, which one is the most efficient busy work in the general case. That is what should be studied and act upon. ",
                                           "updatedAt":  "2017-09-29T22:40:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MDkzNTk0NA==",
                                           "createdAt":  "2017-10-31T23:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Just wanted to note this is marked as up-for-grabs as we believe this is something that need not require someone on the .NET team. Anyone interested? Could be rewarding/interesting.",
                                           "updatedAt":  "2017-10-31T23:23:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0MTIzNjA1NA==",
                                           "createdAt":  "2017-11-01T20:42:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rattenkrieg",
                                           "body":  "@danmosemsft actually I have been working on it already about a month on evenings :p\r\nDesigned an algorithm polite to STW and did about 1k lines.",
                                           "updatedAt":  "2017-11-01T20:45:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MDcxNDQwMg==",
                                           "createdAt":  "2018-11-21T15:49:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pentp",
                                           "body":  "The locking issue can be somewhat mitigated by not de-duping strings that have locking and/or hashcode info set in the sync-block (`BIT_SBLK_IS_HASH_OR_SYNCBLKINDEX` is set).\r\nThis avoids any observable changes for `RuntimeHelpers.GetHashCode` (used in object identity based dictionaries for example) and locking issues are mitigated, but not entirely avoided by this (thin locks could have been used on the object already).",
                                           "updatedAt":  "2018-11-21T16:05:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjgxNjkwMg==",
                                           "createdAt":  "2018-11-29T12:31:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bill-godfrey-celaton",
                                           "body":  "Could this be extended to other classes in addition to System.String?\r\n\r\n- If an object\u0027s class includes a function with an attribute, have the GC call that function when it moves that object into a different generation.\r\n- Allow code to request that the framework find all references to object A and replace them with references to duplicate object B.",
                                           "updatedAt":  "2018-11-29T12:31:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0Mjk5NjAxMg==",
                                           "createdAt":  "2018-11-29T21:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdXdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T20:24:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "In reading all of this, I feel the best way to maintain compatibility is to institute the rule \"don\u0027t deduplicate a string create from String.Copy()\"\r\n\r\nOnce long ago I used to construct strings with Spc(number) [hint: Microsoft.VisualBasic.dll] than proceed to manipulate the memory arena before passing the strings to other modules. That code doesn\u0027t exist anymore, but it kinda serves a point now.  There aren\u0027t any really good heuristics for when a string is going to be stomped on, except for String.Copy() which pretty much says I\u0027m going to. And even then there\u0027ll be some mistakes.",
                                           "updatedAt":  "2018-11-29T21:16:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMyNjY5Mw==",
                                           "createdAt":  "2019-05-04T13:22:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdXiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2019-05-04T13:55:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "qqeekk",
                                                                               "createdAt":  "2019-05-04T16:16:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "qqeekk",
                                                                               "createdAt":  "2019-05-04T16:16:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:52:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2023-04-14T10:42:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T20:24:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T20:24:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "GSPP",
                                           "body":  "This feature would introduce non-determinism in the sense that any reference of type `string` or `object` can now change between any two instructions. `!ReferenceEquals(a, b) \u0026\u0026 ReferenceEquals(a, b)` can now be `true`. References inside of hash tables can change. The resulting bugs are extremely hard to find and non-intuitive.\r\n\r\nThis feels very much against the spirit of .NET. We want deterministic and platform agnostic code.\r\n\r\nMaybe this is valuable as an opt-in for power users who know what they are doing and require the performance gain.\r\n\r\nMaybe we can instead expose a managed API that can be used to enumerate the heap and replace object references. That way this can be implemented as a library. But then again I wonder... do we even want to expose such an API? We don\u0027t want this to be abused. We don\u0027t want to encourage brittle programming paradigms such as enumerating the heap and mutating it. Who knows what atrocities will be committed using such an API.",
                                           "updatedAt":  "2019-05-04T13:22:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMyODE4Mg==",
                                           "createdAt":  "2019-05-04T13:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e References inside of hash tables can change. \r\n\r\nThey do anyway unless they are pinned with a GCHandle, the GC moves them around. `.GetHashCode()` and `.Equals` however will return the same since its based on the contents of the `string`.",
                                           "updatedAt":  "2019-05-04T13:41:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMyODQ5OQ==",
                                           "createdAt":  "2019-05-04T13:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@benaadams this is invisible at the managed code level. `GetHashCode` and `Equals` always behave deterministically even for `new object()`. Anything else would be a disaster.",
                                           "updatedAt":  "2019-05-04T13:45:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMyOTIyOA==",
                                           "createdAt":  "2019-05-04T13:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQ_chQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2019-05-04T13:57:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:53:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mikedn",
                                           "body":  "\u003e .GetHashCode() and .Equals however will return the same since its based on the contents of the string.\r\n\r\nAssuming you\u0027re using `String`\u0027s own `GetHashCode` and `Equals`. One can build a custom equality comparer that relies on object identity instead (`RuntimeHelpers.GetHashCode`) assuming that the keys are strings that have been interned using a custom scheme, other than `String.Intern`. De-duping strings will probably break this and do so non-deterministically (e.g. if you\u0027re lucky your interned string will survive and other will be replaced by it).",
                                           "updatedAt":  "2019-05-04T13:55:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMyOTk1MQ==",
                                           "createdAt":  "2019-05-04T14:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e One can build a custom equality comparer that relies on object identity instead  \r\n\r\n`RuntimeHelpers.GetHashCode` changes the Object Header and I\u0027d assume object headers state would be considered when deduping",
                                           "updatedAt":  "2019-05-04T14:05:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTMzNDI2OA==",
                                           "createdAt":  "2019-05-04T14:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbdX3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-05-04T16:06:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T09:42:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IS4Code",
                                                                               "createdAt":  "2024-03-21T20:24:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "weltkante",
                                           "body":  "The scenario @GSPP was concerned about is probably not the GC moving things around, but the GC changing object identity. If the value of ReferenceEquals changes thats observable and may break code, for example hashtable using ReferenceEquals to resolve collisions.\r\n\r\nSo you have to assume strings having a hashcode in the Object Header means that RuntimeHelpers.GetHashCode has been called and the strings can\u0027t be merged. Otherwise, even if the hash code happened to be the same (for whatever reason), ReferenceEquals would have returned false before the merge, meaning hashtables would have considered it a collision. After the merge ReferenceEquals would return true and the hashtable would be broken even if the hashcode didn\u0027t change, because it now has two slots with the same object in it when it shouldn\u0027t have.\r\n\r\nFor what it\u0027s worth this pattern (identity based hashtables) is common in caching and the framework even has a builtin class [ObjectIDGenerator](https://github.com/Microsoft/referencesource/blob/master/mscorlib/system/runtime/serialization/objectidgenerator.cs) for it.",
                                           "updatedAt":  "2019-05-04T15:01:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTM0MDEyNw==",
                                           "createdAt":  "2019-05-04T16:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRnTgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benaadams",
                                                                               "createdAt":  "2019-05-04T16:07:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T09:43:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pentp",
                                           "body":  "Identify based dictionaries are not a problem at all because this can be detected from the object header and not de-duped: https://github.com/dotnet/coreclr/issues/14208#issuecomment-440714402",
                                           "updatedAt":  "2019-05-04T16:06:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTM0MDY3Mg==",
                                           "createdAt":  "2019-05-04T16:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRnTmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2020-09-21T10:54:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2020-09-26T09:44:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Hash tables are one thing. But I find it very troubling that `ReferenceEquals(a, b)` can flip from false to true at any time. Breaking object identity is a fundamental change to the runtime.\r\n\r\nIf we determine that we want string deduping we can dedupe other things as well:\r\n\r\n* Boxed primitives and custom structs (could dedupe them at creation time as well)\r\n* Empty arrays\r\n* Custom application objects\r\n* Immutable collections\r\n\r\nJust throwing some ideas into the ring... This would be possible with a heap enumeration API as a library. Also, heap enumeration could be used for custom cache eviction schemes as an alternative to GC handles. You can recycle an object if user code no longer references it. But you can retain your own reference normally.\r\n",
                                           "updatedAt":  "2019-05-04T16:16:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTM0MjcyOQ==",
                                           "createdAt":  "2019-05-04T16:37:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e Boxed primitives \r\n\r\nYes; hence the concerns around `Unsafe.Unbox` returning a writable reference https://github.com/dotnet/corefx/issues/34258\r\n\r\n\u003e custom structs (could dedupe them at creation time as well)\r\n\r\nNo; because they are the data not a pointer to the data. If you create on in a method it takes up stack space directly it doesn\u0027t point to somewhere which can be shared. Likewise if you have on in a class it takes up space directly in the object, it doesn\u0027t point somewhere which can be shared. Except boxed structs which are pointers as you outlined above.",
                                           "updatedAt":  "2019-05-04T16:37:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTM1MDk2NA==",
                                           "createdAt":  "2019-05-04T18:10:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@benaadams yes, I did not phrase that well. I meant boxed custom structs. Also, any immutable DTO style class would be a candidate.\r\n\r\nI have created a tickets for this: [Add a managed API to enumerate and mutate the heap](https://github.com/dotnet/coreclr/issues/24395)\r\n",
                                           "updatedAt":  "2019-05-04T18:10:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MzcwNDQzMg==",
                                           "createdAt":  "2020-02-08T05:19:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDdNoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "pentp",
                                                                               "createdAt":  "2020-02-09T15:24:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "wanton7",
                                                                               "createdAt":  "2020-05-03T09:41:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "CyrusNajmabadi",
                                                                               "createdAt":  "2020-09-21T18:39:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2021-06-03T15:09:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "yufeih",
                                                                               "createdAt":  "2021-12-13T03:59:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "rampaa",
                                                                               "createdAt":  "2023-08-12T05:03:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2023-08-12T12:56:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Design doc: #31971",
                                           "updatedAt":  "2020-02-08T05:19:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDIwNzA5NQ==",
                                           "createdAt":  "2020-02-10T16:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Please don\u0027t auto-dedupe boxed custom structs. I use writable structs all the time.",
                                           "updatedAt":  "2020-02-10T16:25:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NDIyMzY3OA==",
                                           "createdAt":  "2020-02-10T16:59:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weltkante",
                                           "body":  "I don\u0027t think that was part of the discussion/proposal, so I don\u0027t think you have to worry about that.",
                                           "updatedAt":  "2020-02-10T17:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j4R6U",
                                           "createdAt":  "2023-08-12T04:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rampaa",
                                           "body":  "I\u0027ve an app that deals with large quantity of long-living duplicate strings. I\u0027m currently using the [StringPool class from the Community Toolkit](https://learn.microsoft.com/en-us/dotnet/api/microsoft.toolkit.highperformance.buffers.stringpool) to mitigate the memory inefficiency partially but it\u0027s not as effective/efficient as this proposal would be. So a +1 from me.",
                                           "updatedAt":  "2023-08-12T04:54:04Z"
                                       }
                                   ],
                         "totalCount":  48
                     },
        "title":  "Improve Density of GC heap by String Interning  (de-duping)  on Gen2 GC ",
        "labels":  [
                       "help wanted",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10480",
        "createdAt":  "2018-06-08T22:55:31Z",
        "number":  10480,
        "author":  "bartonjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKS1UA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2019-08-19T07:09:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benaadams",
                                            "createdAt":  "2019-08-21T18:03:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GrabYourPitchforks",
                                            "createdAt":  "2019-08-21T18:30:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2019-08-21T18:30:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2019-09-10T10:36:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pleonex",
                                            "createdAt":  "2020-01-09T07:09:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Aron4u",
                                            "createdAt":  "2020-04-16T08:50:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NojanNavab",
                                            "createdAt":  "2020-06-22T14:42:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GregDomzalski",
                                            "createdAt":  "2020-06-26T18:48:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChrisMcKee",
                                            "createdAt":  "2021-01-27T12:05:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexey-gusarov",
                                            "createdAt":  "2021-08-28T16:06:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MartyIX",
                                            "createdAt":  "2021-12-27T23:02:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattcargile",
                                            "createdAt":  "2022-03-23T23:41:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mertsch",
                                            "createdAt":  "2022-08-05T09:46:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Socolin",
                                            "createdAt":  "2022-11-18T17:18:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenjaminAbt",
                                            "createdAt":  "2023-03-16T11:47:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HHobeck",
                                            "createdAt":  "2023-12-15T15:14:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samuel-lucas6",
                                            "createdAt":  "2024-02-03T12:02:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidvmckay",
                                            "createdAt":  "2024-10-09T19:16:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fMichaleczek",
                                            "createdAt":  "2025-01-16T02:49:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-08-07T14:32:36Z"
                                        }
                                    ],
                          "totalCount":  21
                      },
        "updatedAt":  "2023-08-02T23:03:13Z",
        "body":  "During GC heap compaction a copy of data is made.  In cases where there was no practical way to pin data (e.g. a returned `byte[]`) it isn\u0027t possible to ensure that the data has been adequately cleared because of the extra copy created compaction.\r\n\r\nHaving the GC clear the memory on compaction improve the security of applications for which heap dumps and in-memory probes are within their scope of threat, given some guidelines:\r\n* A secret allocated to a caller is the caller\u0027s responsibility to clear (e.g. RSA.Decrypt).\r\n  * Current: Returned objects can\u0027t be pinned in a practical manner, API would have to also emit a GCHandle.\r\n* A secret held by an IDisposable object should be cleared on Dispose, and it is the owner\u0027s responsibility to call Dispose (e.g. KeyedHashAlgorithm)\r\n  * Current: existing classes which have `byte[]` fields would need to use GCHandle and add a finalizer to ensure that the handle got cleared.\r\n* A temporary copy of a secret must be cleared by the creator/owner (e.g. addition/removal of symmetric encryption padding)\r\n\r\nIf the GC can guarantee that pinning is no longer required to ensure that Span.Clear() removes the data from the heap then a good amount of defensive pinning can be eliminated from current BCL security code (theoretically reducing heap fragmentation?).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONE2VHg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNTIyNzAzMQ==",
                                           "createdAt":  "2019-06-25T00:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I apologize - looks like we\u0027ll not be able to fit this one in 3.0 since we had other more urgent items for this release...we\u0027ll need to see whether this could possibly fit in the next 3.x milestone.",
                                           "updatedAt":  "2019-06-25T00:11:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMjM1MDA1NQ==",
                                           "createdAt":  "2019-08-18T19:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yuhong",
                                           "body":  "On crash dumps: https://devblogs.microsoft.com/oldnewthing/20161104-00/?p=94645",
                                           "updatedAt":  "2019-08-18T19:51:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzQ5OTY3OA==",
                                           "createdAt":  "2021-07-09T23:02:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hoping this will be enabled as part of Regions work. ",
                                           "updatedAt":  "2021-07-09T23:02:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "GC Heap Compaction should clear the source data",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10529",
        "createdAt":  "2018-06-16T01:20:15Z",
        "number":  10529,
        "author":  "bartonjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAYINhQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GrabYourPitchforks",
                                            "createdAt":  "2018-06-16T19:01:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ygc369",
                                            "createdAt":  "2018-06-19T09:49:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2018-06-19T15:42:07Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-11-02T06:03:46Z",
        "body":  "There are workstreams which have higher than average requirements about being defensive against in-memory sniffing and heapdumps.  For those customers, the clear-on-use behavior of the garbage collector may be a reason that they cannot use .NET, or may cause them a lot of regulatory/compliance paperwork to use .NET.\r\n\r\nWhile the primary responsibility of clearing sensitive data would fall on the application, there\u0027s a fair amount of platform code which makes temporaries and leaves them to the GC.  Additionally, immutable types (such as `string`) have no \"good\" mechanism for clearing their data.\r\n\r\nRather than making the majority of applications have a performance penalty of a lot of small memory clears, this behavior would be behind an opt-in.\r\n\r\nWhen in the aggressively clearing mode, the GC would clear the memory assigned to an object when that object has been declared to be \"garbage\", and calling applications would be able to get a moderate cleanup of potentially sensitive data by manually invoking `GC.Collect()`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOarMWpg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Nzc3ODc0OA==",
                                           "createdAt":  "2018-06-16T01:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The classic malloc/free has the similar \"clear on use\" characteristic. Is there an example of prior art how this is done for malloc/free ?",
                                           "updatedAt":  "2018-06-16T01:59:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Nzc3OTYxNg==",
                                           "createdAt":  "2018-06-16T02:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "Some libraries allow the use of custom allocators/deallocators, and a user of that library could change the allocator to be one which does the equivalent of SecureZeroMemory before deferring to free.\r\n\r\nUsing mallopt to lower the trim threshold would make malloc more aggressively give memory back to the OS, which would have a clearing effect.\r\n\r\nAnd, as a really big hammer, a specific machine/image could have a build of glibc/musl which has edited free to clear the memory.",
                                           "updatedAt":  "2018-06-16T02:16:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzgzMjkzOQ==",
                                           "createdAt":  "2018-06-16T19:05:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "As part of the overall scenario, are there other GC knobs we\u0027d want to provide to applications which desire this opt-in behavior? For example, would an application that wants aggressive clearing of garbage memory also want more frequent GCs to reduce the window of time that a secret may be held in memory?",
                                           "updatedAt":  "2018-06-16T19:05:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODYwNjYyMg==",
                                           "createdAt":  "2018-06-20T02:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "morganbr",
                                           "body":  "I\u0027d think the more frequent GCs should be triggered by the application since it\u0027s more likely to know when it\u0027s done with secrets.",
                                           "updatedAt":  "2018-06-20T02:43:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTIyODk0MA==",
                                           "createdAt":  "2018-06-21T20:16:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nmain",
                                           "body":  "Would this be instead of dotnet/runtime#10480?",
                                           "updatedAt":  "2018-06-21T20:16:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qswl9",
                                           "createdAt":  "2023-11-02T06:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-11-02T06:01:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qsxam",
                                           "createdAt":  "2023-11-02T06:03:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "Oh, it\u0027s most definitely still wanted :smile:",
                                           "updatedAt":  "2023-11-02T06:03:41Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Add an aggressively-clear GC mode",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/10547",
        "createdAt":  "2018-06-19T23:53:03Z",
        "number":  10547,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-31T07:55:56Z",
        "body":  "When the processor affinity is set in explicit way `GC.GetAllocatedBytesForCurrentThread` always  returns 0. Even is something was allocated.\r\n\r\n```cs\r\nusing System;\r\n\r\nnamespace gcstats\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var before = System.GC.GetAllocatedBytesForCurrentThread();\r\n            Console.WriteLine(\"Hello World!\");\r\n            var after = System.GC.GetAllocatedBytesForCurrentThread();\r\n            Console.WriteLine($\"after - before = {after - before}\");\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```log\r\nstart /affinity 1 dotnet.exe run\r\nHello World!\r\nafter - before = 0\r\n\r\nstart dotnet.exe run\r\nHello World!\r\nafter - before = 7552\r\n\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n```\r\n\r\n@jkotas @Maoni0 is this expected behavior? am I doing something wrong? \r\n\r\nI am porting CoreCLR benchmarks from xunit-performance to BenchmarkDotNet and I have faced this issue today when I was comparing the results of some unstable benchmarks with affinity set and without.\r\n\r\n/cc @jorive \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVAmigw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODU4Mjc0MA==",
                                           "createdAt":  "2018-06-20T00:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAYLHVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2018-06-20T00:08:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndreyAkinshin",
                                                                               "createdAt":  "2018-06-20T11:10:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, this is how the API was implemented. Setting affinity to single proc will disable allocation contexts, that in turn makes this API to always return 0. \r\n\r\nI have pointed this non-intuitive behavior when this API was introduced: https://github.com/dotnet/coreclr/pull/6953#discussion_r76631905.  I agree that the current behavior does not sound right: ",
                                           "updatedAt":  "2018-06-20T00:03:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODcwNzIyOA==",
                                           "createdAt":  "2018-06-20T10:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@jkotas once again big thanks for help!\r\n\r\nI am going to close this issue and open a new one with a list of requirements that we have once I finish porting all repositories and the requirements are crystal clear.",
                                           "updatedAt":  "2018-06-20T10:49:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODc4NzMzMQ==",
                                           "createdAt":  "2018-06-20T15:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think we should keep this issue opened. It is a bug that we should look into fixing.",
                                           "updatedAt":  "2018-06-20T15:12:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNTUzNTI3MQ==",
                                           "createdAt":  "2019-06-25T17:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Compared to other issues, this is not a ship-stopper for 3.0 \r\nAt this point this should be Future.",
                                           "updatedAt":  "2019-06-25T17:06:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41HnIn",
                                           "createdAt":  "2021-08-02T17:07:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "moving to 7",
                                           "updatedAt":  "2021-08-02T17:07:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UCaKD",
                                           "createdAt":  "2023-01-31T07:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD84cJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "a-stankevich",
                                                                               "createdAt":  "2024-11-28T15:40:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MikeStall",
                                           "body":  "Fyi - this appears to affect all Azure Websites. \r\n",
                                           "updatedAt":  "2023-01-31T07:55:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "GC.GetAllocatedBytesForCurrentThread always returns 0 when processor affinity is set to single proc",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11533",
        "createdAt":  "2018-11-21T23:00:12Z",
        "number":  11533,
        "author":  "davmason",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-23T20:23:45Z",
        "body":  "The global variable `g_dwHandles` is used in the handle table, and is incremented/decremented on each operation. This will likely cause bus contention for many core machines.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORh_cKQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjgzOTY4Mg==",
                                           "createdAt":  "2020-09-22T16:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "probably look at this as part of handle table perf improvement. ",
                                           "updatedAt":  "2020-09-22T16:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GH9wp",
                                           "createdAt":  "2022-07-06T17:29:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "Lets consider investigating this in 8.0",
                                           "updatedAt":  "2022-07-06T17:29:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Potential bus contention on many core machines in the handle table code",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11733",
        "createdAt":  "2019-01-02T14:29:54Z",
        "number":  11733,
        "author":  "lucabol",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxCa3w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattwarren",
                                            "createdAt":  "2019-01-03T09:37:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OlegKarasik",
                                            "createdAt":  "2019-01-03T23:35:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "szehetner",
                                            "createdAt":  "2019-01-07T12:36:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manigandham",
                                            "createdAt":  "2019-01-14T17:35:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Alan5142",
                                            "createdAt":  "2019-01-14T23:50:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "heronbpv",
                                            "createdAt":  "2019-10-23T14:06:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WenceyWang",
                                            "createdAt":  "2020-06-16T08:49:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2023-06-30T15:22:45Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2022-03-03T07:55:50Z",
        "body":  "## The problem\r\n`TryStartNoGCRegion` silently resumes garbage collection when more than totalSize bytes have been allocated. Certain categories of applications (i.e.  real time, tick by tick financial, embedded systems, ...) or certain codepaths inside an app cannot tolerate GC pauses.\r\n\r\nFor such applications, silently resuming GC is not desirable. They need to perform some app-specific action at that point (i.e. exiting the process, allocating more memory in one shot, notify a support engineer, etc …). \r\n\r\n## The proposal\r\nAdd a delegate parameter to the API:\r\n```C#\r\n    public static bool TryStartNoGCRegion(long totalSize, Action actionWhenAllocatedMore)\r\n```\r\nThe system simply calls the callback. The callback writer can then put the GC in whatever state he likes inside the callback code (i.e. enter another NoGc region, enable standard GC, do a GC and put it back in NoGc region, …).\r\n\r\nOne can move to more complex solutions if the above simple one proves problematic (i.e. have the callback return a value indicating how the GC should be from then on, other …). This proposal is not intended as a comprehensive design doc, but as a general request to enable the scenario.\r\n\r\n## Workaround\r\nI have coded a hacky workaround [here](https://github.com/lucabol/LNativeMemory/blob/master/LNativeMemory/GC2.cs) using ETW events, mostly as a proof of concept.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPwxWUg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDk5MDAxMQ==",
                                           "createdAt":  "2019-01-02T21:25:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "this seems reasonable to me.",
                                           "updatedAt":  "2019-01-02T21:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_DEJt",
                                           "createdAt":  "2022-03-03T07:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lucabol",
                                           "body":  "@Maoni0 : you now have three requests for basically the same thing. Time to take another look? :-)",
                                           "updatedAt":  "2022-03-03T07:48:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_DEky",
                                           "createdAt":  "2022-03-03T07:50:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "that\u0027s why @cshung is working on the API proposal 😂",
                                           "updatedAt":  "2022-03-03T07:50:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_DFHH",
                                           "createdAt":  "2022-03-03T07:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCRMwSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2022-03-03T07:55:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lucabol",
                                           "body":  "Sorry :-)",
                                           "updatedAt":  "2022-03-03T07:54:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_DFZS",
                                           "createdAt":  "2022-03-03T07:55:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "NP :)",
                                           "updatedAt":  "2022-03-03T07:55:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Proposal: Add delegate to TryStartNoGCRegion to be invoked when user allocates more than totalSize bytes",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11775",
        "createdAt":  "2019-01-08T19:11:24Z",
        "number":  11775,
        "author":  "mjsabby",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAl--Uw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leons727",
                                            "createdAt":  "2019-03-27T23:45:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Epp-code",
                                            "createdAt":  "2019-03-29T22:17:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-05-04T22:40:49Z",
        "body":  "To do continuous monitoring of an application where you would like MethodLoad events for jitted code to support symbolic lookup, and would also like GC events you end up getting AllocationTicks as well because the GC Keyword\u0027s verbosity level 5 gives you that data.\r\n\r\nI\u0027m proposing we add a new GCLowVolume keyword so that we can get verbose data for MethodLoads and continue to have GC monitoring that does not impact performance (due to the high event volume).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHVMomg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTQ4MDAzNQ==",
                                           "createdAt":  "2019-01-31T19:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "cc @Maoni0 @andy-ms  @noahfalk @jorive ",
                                           "updatedAt":  "2019-01-31T19:45:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTUwNTE2Nw==",
                                           "createdAt":  "2019-01-31T21:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "it sounds like what you are asking is the ability to specify different levels for different keywords. from a feature area\u0027s POV, there\u0027s nothing that prevents you from doing that - each event will check if it\u0027s enabled based on keyword + level already. I\u0027m curious - @vancem is there a way currently to specify to collect with different levels for different keywords with perfview?",
                                           "updatedAt":  "2019-01-31T21:02:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTYyNDg0Nw==",
                                           "createdAt":  "2019-02-01T06:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "It maybe that the event does that, but as far as I know ETW does not allow per event verbosity levels, and only supports verbosity at the provider level.\r\n\r\nYou could image going the other way, i.e. make a new keyword for Method Load data being available in a new keyword at non verbose levels, and that will be fine with me as well. I had to pick one direction.",
                                           "updatedAt":  "2019-02-01T06:48:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDM4NDQ3Ng==",
                                           "createdAt":  "2019-02-04T19:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "@mjsabby quiet a while ago (years now), we moved the Method*Verbose events (which have the symbolic information) from the Verbose level to the Informational level, for precisely the reason you state.  I allows you to get symbols information for the JIT compiled code without having to have verbose events (in particular the GCAllocationTick event), if you desire that.  \r\n\r\nDoes that solve your problem?    It is already there (and has been for a while).   You can simply turn your verbosity down it Informational to avoid the verbose GC events.   \r\n ",
                                           "updatedAt":  "2019-02-04T19:42:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDkzOTg1OQ==",
                                           "createdAt":  "2019-02-06T08:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "It does, but I don\u0027t see that actually occurring so I\u0027ll have to confirm. If I recall not setting the level to verbose caused the dynamic methods not to be emitted.",
                                           "updatedAt":  "2019-02-06T08:31:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTE0NzI1Nw==",
                                           "createdAt":  "2019-02-06T19:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vancem",
                                           "body":  "If there are bugs, we should fix them (but I would not have expected dynamic methods to be treated differently, so I am surprised it would not just work).   We should confirm.  ",
                                           "updatedAt":  "2019-02-06T19:07:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDMwODk1Mg==",
                                           "createdAt":  "2019-04-18T00:21:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@mjsabby could you please verify if you are seeing the designed behavior (Method events on information level)? if not we should fix that.",
                                           "updatedAt":  "2019-04-18T00:21:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDMzMDM2NQ==",
                                           "createdAt":  "2019-04-18T02:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "On information level we see `Microsoft-Windows-DotNETRuntime/Method/Load`, whereas on verbose we see `Microsoft-Windows-DotNETRuntime/Method/LoadVerbose`. The verbose events carry the method name, namespace \u0026 signature. The regular events do not.\r\n\r\nI still think that it makes sense to add a new keyword for GC like GCLowVolume because it may be that there are other verbose events that are useful like JIT inlining information, and it is fine to want them because eventually an application reaches steady state but the GC events continue to be voluminous.\r\n\r\nFurthermore, it is probably a regression to do this at Information level. Because one could argue that even at Level 4 of Method events there is enough information being emitted that in conjunction with ModuleLoad events you could open the PE file and read the method name, method namespace and signature from the metadata.",
                                           "updatedAt":  "2019-04-18T02:19:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTQ2MjgwMQ==",
                                           "createdAt":  "2019-05-11T00:19:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "I looked into implementing this and it would require a lot of changes to the GC events. Instead maybe we can add a SupressGCAllocationTick keyword that will suppress the AllocationTicks. This way the change is only in a single place in the GC. @Maoni0 thoughts?",
                                           "updatedAt":  "2019-05-11T00:19:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTk4OTE0Ng==",
                                           "createdAt":  "2019-05-13T21:13:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "@mjsabby - I am guessing there is going to be a general pattern here of people wanting verbose events from one keyword and not from another. I want to make sure that if we do something we are following a path that scales towards a general solution, even if we only implement a little part of it to start. My instinct is that GCLowVolume could probably be generalized but SupressGCAllocationTick feels very one-off (not any significant analysis behind this, just a hunch). The team is really heads down trying to get 3.0 wrapped up and with all the work in flight I don\u0027t think we\u0027ve got time to engage on the design for this right now. I\u0027m going to suggest we let this one rest for now and return to it once we\u0027ve got fewer features in-progress.",
                                           "updatedAt":  "2019-05-13T21:13:34Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "New GCLowVolume keyword for ETW/EventPipe events when verbose events are enabled for other keywords",
        "labels":  [
                       "enhancement",
                       "area-GC-coreclr",
                       "area-Tracing-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12809",
        "createdAt":  "2019-06-05T01:50:34Z",
        "number":  12809,
        "author":  "kkokosa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsN8Xw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2019-06-05T05:19:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "8ggmaker",
                                            "createdAt":  "2019-06-05T06:46:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vchirikov",
                                            "createdAt":  "2019-06-05T09:17:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mstyura",
                                            "createdAt":  "2019-06-05T12:43:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2019-06-05T13:47:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ygc369",
                                            "createdAt":  "2019-06-08T01:22:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hueifeng",
                                            "createdAt":  "2023-01-12T11:50:28Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2023-12-14T14:55:03Z",
        "body":  "Current GC API to support creating custom GCs is nice but lacks one important feature: possibility to enumerate all the references inside an object.\r\n\r\n`IGCToCLR` interface provides already methods to suspend/restart managed threads and stack root scanning. So we can write the simplest implementation as follows:\r\n\r\n```\r\nScanContext sc;\r\ngcToCLR-\u003eSuspendEE(SUSPEND_FOR_GC);\r\ngcToCLR-\u003eGcScanRoots(UpsilonGCHeap::MarkReachableRoot, 0, 0, \u0026sc);\r\n// discover other roots\r\ngcToCLR-\u003eRestartEE(true);\r\n```\r\n\r\nWhere provided callback is as simple as:\r\n\r\n```\r\nvoid UpsilonGCHeap::MarkReachableRoot(Object** ppObject, ScanContext* sc, uint32_t flags)\r\n{\r\n\tObject* obj = *ppObject;\r\n\tif (obj == nullptr)\r\n\t\treturn;\r\n\tMarkObjectTransitively(obj, sc, flags);\r\n}\r\n\r\nvoid UpsilonGCHeap::MarkObjectTransitively(Object* obj, ScanContext* sc, uint32_t flags)\r\n{\r\n\tif (obj-\u003eIsMarked())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tobj-\u003eSetMarked();\r\n\tMarkOutgoingReferences(obj, UpsilonGCHeap::MarkObjectTransitively);\r\n}\r\n```\r\n\r\nUnfortunately, implementing `MarkOutgoingReferences` from inside custom GC is very tedious and requires implementation-heavy details of the runtime itself. Currently, knowledge about discovering outgoing references from an object is \"hidden\" inside macros like `go_through_object_cl` and `go_through_object`, that depends on quite many macros and types defined inside `gc.cpp` file (like `CObjectHeader`).\r\n\r\nI would love to see in `IGCToCLR` something like:\r\n\r\n```\r\ninline void GcEnumerateReferences(Object* obj, enumerate_func* fn);\r\n```\r\n\r\nwhich uses runtime\u0027s knowledge about the object layout and just allows to call a specific callback on each discovered outgoing reference (if any).\r\n\r\nWith the current GC API, I do not imagine any custom GC implementation that so heavily depends on decoding `GCDesc` info. It is deep implementation detail and may change in time. \r\n\r\nI was able to provide such method implementation quite easily by reusing the above-mentioned macro (snippet from `gcenv.ee.cpp` file):\r\n\r\n```\r\nvoid GCToEEInterface::GcEnumerateReferences(Object* obj, enumerate_func* fn)\r\n{\r\n    size_t s = size(obj);\r\n    uint8_t* o = (uint8_t*)obj;\r\n    go_through_object_cl(method_table(o), o, s, poo,\r\n        {\r\n            fn((Object*)*poo);\r\n        }\r\n    );\r\n}\r\n```\r\n\r\nHowever, it required quite a lot of copy-pasting from `gc.cpp`:\r\n* macros: `size`, `go_through_object_cl`, `get_class_object`, `go_through_object_nostart`, `go_through_object`, `method_table`, `header` and `plug_skew`\r\n* inline methods `my_get_size`\r\n\r\nAs none of this code contains GC-related knowledge, where they should be moved to make it reusable both grom `gc.cpp` and `gcenv.ee.cpp`?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObqBNxg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5OTM1MzI5OQ==",
                                           "createdAt":  "2019-06-06T05:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "@kkokosa Do you really need to copy the code? There already is an API on the GCEE interface that enumerates refs for diagnostics. I would have thought it would be simple to extend it to LocalGC based on a recent reading of the code.",
                                           "updatedAt":  "2019-06-06T05:26:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5OTQ5NDMyMg==",
                                           "createdAt":  "2019-06-06T13:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The API on the GC-EE interface may be sufficient to make things work. It is not sufficient to implement a high-performance heap scanning on par with the current GC. The high-performance heap scanning needs the macros above.",
                                           "updatedAt":  "2019-06-06T13:30:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDY5Mzk1MQ==",
                                           "createdAt":  "2019-06-11T05:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkokosa",
                                           "body":  "@jkotas thanks. In my humble opinion, GC API support must be on par with the current GC, as otherwise, it is pointless to have GC API at all. So, I would like to prepare an appropriate PR if you don\u0027t mind.",
                                           "updatedAt":  "2019-06-11T05:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uO0VK",
                                           "createdAt":  "2023-12-11T06:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-12-11T06:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5umgbu",
                                           "createdAt":  "2023-12-14T10:30:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kkokosa",
                                           "body":  "@jkotas any further plans for GC-EE interface? ",
                                           "updatedAt":  "2023-12-14T10:30:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uoE3G",
                                           "createdAt":  "2023-12-14T14:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The GC-EE interface evolves incrementally as needed. I do not think we have any grand plans for it.",
                                           "updatedAt":  "2023-12-14T14:55:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Local GC API to support object scanning",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13737",
        "createdAt":  "2019-11-05T23:10:19Z",
        "number":  13737,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T15:28:42Z",
        "body":  "NoGC feature is tied to SOH/LOH distinction at the API level. \r\n\r\nWe should think how that applies to POH, or if it does not document it as such.\r\n\r\nRight now POH ignores NoGC. - If user makes POH allocation, it may cause GC.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Pinned Object Heap] Need to generalize NoGC regions or explicitly not support.",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2407",
        "createdAt":  "2019-11-27T01:08:06Z",
        "number":  2407,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-27T15:44:57Z",
        "body":  "The `GC.RegisterForFullGCNotification` API takes a separate parameter for LOH. Most likely need another overload for POH",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIVLijA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1OTA3NTUwNA==",
                                           "createdAt":  "2019-11-27T12:53:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygc369",
                                           "body":  "@VSadov\r\nWhat does \"POH\" or \"UOH\" mean?\r\nWill GC have a big change?",
                                           "updatedAt":  "2019-11-27T12:53:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1OTA4MDA3Ng==",
                                           "createdAt":  "2019-11-27T13:08:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "@ygc369 POH means Pinned Object Heap as the titel suggests, you can find its design notes here https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/PinnedHeap.md",
                                           "updatedAt":  "2019-11-27T15:56:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Pinned Object Heap] Need to generalize GC notification API",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36796",
        "createdAt":  "2020-05-21T01:26:28Z",
        "number":  36796,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T16:23:53Z",
        "body":  "The underlying `GC.AddMemoryPressure`/`GC.RemoveMemoryPressure` implementations were updated in https://github.com/dotnet/runtime/pull/36767. The existing testing was questionable already and does nothing for this other algorithm. Deferring adding equivalent testing for now since this code path is _not_ new but has been around since .NET Framework.\r\n\r\nhttps://github.com/dotnet/runtime/blob/4eaccd61b1a2a4b078140f8b36f2b45ab5980e8e/src/coreclr/tests/src/GC/API/GC/AddMemoryPressureTest.cs#L136-L159\r\n\r\n/cc @VSadov ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONRTPaA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTgyMzc5Ng==",
                                           "createdAt":  "2020-05-21T01:26:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @Maoni0\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-21T01:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41FM9o",
                                           "createdAt":  "2021-08-01T17:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Moving to 7 since this is not a blocker. ",
                                           "updatedAt":  "2021-08-01T17:11:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add triggering test for GC.AddMemoryPressure/GC.RemoveMemoryPressure",
        "labels":  [
                       "increase-code-coverage",
                       "help wanted",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37693",
        "createdAt":  "2020-06-10T06:52:51Z",
        "number":  37693,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBUk78w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2020-06-10T07:02:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "angelobreuer",
                                            "createdAt":  "2020-10-24T16:01:19Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-04-24T02:23:34Z",
        "body":  "## Background and Motivation\r\n\r\nThere are several APIs that hardcode the 85K threshold to avoid landing data on the LOH (usually for ephemeral operations):\r\n\r\n- https://github.com/dotnet/runtime/blob/e2ed3631b9a2a97de10991e4b548f63086cdc67a/src/libraries/System.Private.CoreLib/src/System/IO/Stream.cs#L31-L34\r\n- https://github.com/dotnet/aspnetcore/blob/66dd4919dafcb21c57a923a661cdbb0ff351713d/src/Razor/Microsoft.AspNetCore.Razor.Language/src/RazorSourceDocument.cs#L16\r\n- https://github.com/dotnet/aspnetcore/blob/76d197f0dd0d0835585d82540f35acde9db5a0d5/src/Middleware/ResponseCaching/src/Streams/StreamUtilities.cs#L13-L16\r\n\r\nAs it turns out, you can change this value https://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#large-object-heap-threshold. I\u0027d love to update these locations to use the configured value (or less than that).\r\n\r\n## Proposed API\r\n\r\n\r\n```diff\r\nnamespace System\r\n{\r\n    public class GC \r\n    {\r\n+      public long LargeObjectHeapThreshold { get; }    \r\n    }\r\n```\r\n\r\ncc @Maoni0 \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQgX8PA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTc2OTA0MA==",
                                           "createdAt":  "2020-06-10T06:52:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @Maoni0\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-10T06:52:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTc3MjIwMQ==",
                                           "createdAt":  "2020-06-10T06:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCaVSFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-04-28T14:52:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "we should have an API that just reads config values in general - \r\n\r\n`int GetConfigValue (string configName);`\r\n\r\nthis may belong to some more general place than the GC class as we have other configs too. it can also make sense just being in the GC class as we know that GC configs are the most frequently used. \r\n\r\nI think I mentioned this to @stephentoub some time ago. any opinions?",
                                           "updatedAt":  "2020-06-10T06:58:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjI5Mzk3OQ==",
                                           "createdAt":  "2020-06-10T22:10:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "also CCing @jkotas ",
                                           "updatedAt":  "2020-06-10T22:10:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjI5NjQ5Nw==",
                                           "createdAt":  "2020-06-10T22:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Regardless of whether a general configuration reader is exposed, the original LargeObjectHeapThreshold proposal sounds reasonable to me.\r\n\r\nPresumably the comment in Stream about it being the largest multiple of 4096 under the LOH limit would then be codified into initializing a readonly static instead of using a const (we\u0027d also want to make sure it remained under the cap at which ArrayPool pools)?",
                                           "updatedAt":  "2020-06-10T22:17:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjI5OTgxMg==",
                                           "createdAt":  "2020-06-10T22:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@stephentoub I\u0027m supportive of exposing this. my question for you and @jkotas was more how we are going to expose this. I wouldn\u0027t want to expose an API for each config value the user might want to query. that seems messy and non scalable. do you have any thoughts on a general API to get config values?",
                                           "updatedAt":  "2020-06-10T22:26:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjMwMTM1Nw==",
                                           "createdAt":  "2020-06-10T22:30:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This particular one is a value that\u0027s been around since the beginning of .NET and that\u0027s hardcoded in multiple places in one way, shape, or form.  Having an explicit API for it, assuming we expect there\u0027s always going to be such a threshold, makes sense to me; otherwise all call sites will need to know the magic config setting name to supply, which from my perspective is fine for more obscure things but not great for the most prominent settings.\r\n\r\nAs for a more general API, what are some examples from the GC and outside of the GC that this would read?",
                                           "updatedAt":  "2020-06-10T22:31:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjMwNDc0Ng==",
                                           "createdAt":  "2020-06-10T22:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We do have a general purpose configuration API today: `AppContext.GetData`. \r\n\r\nI know we had discussion about GC returning GC-specific configurations that would return all GC tuning arguments, both explicit ones and the discovered ones. I think that would be fine. I expect the primary use for this would be high-end perf diagnostic.\r\n\r\nFor large object heap threshold specifically, I think it is anti-pattern to use large object heap threshold to take different paths or tune buffer sizes. It is ok to take use different implementations for small vs. big inputs, but the thresholds should not be based on GC tuning. It makes the GC tuning non-elastic and hard to reason about.\r\n\r\nI do not think that the code that picks buffer sizes in Stream actually works the way comments suggest. The array pool will round it up to 128kB and so the allocation will be on the LOH. Also, this default was invented before the code used array pool so the reasons behind that tuning may not be applicable anyway.",
                                           "updatedAt":  "2020-06-10T22:45:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjMwNTE3MA==",
                                           "createdAt":  "2020-06-10T22:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I do not think that the code that picks buffer sizes in Stream actually works the way comments suggest. The array pool will round it up to 128kB and so the allocation will be on the LOH.\r\n\r\nGood point; we should fix that.",
                                           "updatedAt":  "2020-06-10T22:42:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjMxNjUyOQ==",
                                           "createdAt":  "2020-06-10T23:20:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e I know we had discussion about GC returning GC-specific configurations that would return all GC tuning arguments, both explicit ones and the discovered ones. I think that would be fine. I expect the primary use for this would be high-end perf diagnostic.\r\n\r\nright, this is for folks who do high end perf diag and it\u0027s reasonable to expect them to know the names of the configs that they care about. so something like \r\n\r\n```csharp\r\n\r\nstruct ConfigInfo\r\n{\r\n    string name;\r\n    // although we do have 2 GC configs with a string value - GCName and GCHeapAffinitizeRanges\r\n    int value; \r\n};\r\n\r\nstatic ConfigInfo[] GetConfigValues();\r\n```",
                                           "updatedAt":  "2020-06-10T23:20:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjMyNjA0NA==",
                                           "createdAt":  "2020-06-10T23:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e For large object heap threshold specifically, I think it is anti-pattern to use large object heap threshold to take different paths or tune buffer sizes. It is ok to take use different implementations for small vs. big inputs, but the thresholds should not be based on GC tuning. It makes the GC tuning non-elastic and hard to reason about.\r\n\r\nWhat should we do in practice? If we some of the allocations are ephemeral and end up on the LOH that could be problematic right? What would we do instead?",
                                           "updatedAt":  "2020-06-10T23:55:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjM0Mzk2MA==",
                                           "createdAt":  "2020-06-11T01:02:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCaVhcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-04-28T15:08:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It is unfortunate that there is a step function in the GC behavior around the LOH threshold. Let\u0027s assume that there would not be a step function like this and the change in behavior would be smooth as far as the GC is concerned (there are other performance step functions caused by cache sizes or thresholds in other subsystem).\r\n\r\nHow would you choose your buffer sizes for the best performance if there was no step function around the LOH threshold?",
                                           "updatedAt":  "2020-06-11T01:02:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjM1NjM3Nw==",
                                           "createdAt":  "2020-06-11T01:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e How would you choose your buffer sizes for the best performance if there was no step function around the LOH threshold?\r\n\r\nTest a variety of numbers sizes numbers based on 32/64 bit and measure the throughput (RPS) and working set and GC behavior, % time in GC, and number of collections. \r\n\r\nI think generally it comes down to a tradeoff between CPU and memory:\r\n- Small buffers mean more operations and more CPU time\r\n- Bigger buffers mean less operations, which results in potentially more memory waste and less operations\r\n",
                                           "updatedAt":  "2020-06-11T01:48:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjQwMjU1OA==",
                                           "createdAt":  "2020-06-11T04:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right, that\u0027s how we should be choosing the right thresholds. We should not assume that the LOH threshold is the right magic number.\r\n\r\n\u003e Small buffers mean more operations and more CPU time\r\n\r\nNot necessarily. There are secondary effects:\r\n- Small buffers have better cache locality. Better cache locality means less CPU time.\r\n- Small buffers are typically reused more. The cost of acquiring them is amortized better.\r\n\r\nFor example, let\u0027s say that somebody configured the LOH threshold to 32MB and the stream copying blindly used a chunk size that is close to LOH threshold. I would be easy to come up with examples that shows significant stream copying throughput regressions with the large LOH threshold.",
                                           "updatedAt":  "2020-06-11T04:43:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Mzc5MjU1MQ==",
                                           "createdAt":  "2020-07-04T17:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Maybe add `Bytes` so that it becomes `LargeObjectHeapThresholdBytes`? Other GC info APIs have been added recently where this was done.\r\n\r\n\u003e Having an explicit API for it, assuming we expect there\u0027s always going to be such a threshold, makes sense to me\r\n\r\nIn the future, the threshold could be different for different types. Or it could be dynamically adjusted at runtime. That would break the meaning of this exposed GC setting.",
                                           "updatedAt":  "2020-07-04T17:36:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CBfw8",
                                           "createdAt":  "2022-04-24T02:23:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx5xAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ao57772",
                                                                               "createdAt":  "2022-09-12T08:32:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divyeshio",
                                                                               "createdAt":  "2022-12-29T12:24:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I still think we should add this API.",
                                           "updatedAt":  "2022-04-24T02:23:34Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Add API for reading the LOH size threshold",
        "labels":  [
                       "api-suggestion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38221",
        "createdAt":  "2020-06-22T17:58:48Z",
        "number":  38221,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-03T16:38:38Z",
        "body":  "In particular we need to address the \r\n- allocation budget and \r\n- hard limit behavior.\r\n\r\nCurrently POH uses same tuning.\r\n\r\nAs was mentioned in PR review for https://github.com/dotnet/runtime/pull/34215\r\n\u003e LOH and POH are not necessarily that similar - LOH is compacted by default for hardlimit and POH can\u0027t be compacted; LOH has in general much larger object sizes.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJprhWA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzY4NDQ0MA==",
                                           "createdAt":  "2020-06-22T17:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @Maoni0\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-22T17:58:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Pinned Object Heap] POH perf tuning",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41675",
        "createdAt":  "2020-09-01T14:37:37Z",
        "number":  41675,
        "author":  "RalfKornmannEnvision",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBPFMhw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamsitnik",
                                            "createdAt":  "2020-09-01T14:59:38Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-19T15:24:34Z",
        "body":  "I am in the process of getting CoreRT running on the Nintendo Switch. Most thins are already working. While getting the background GC working I run in a little issue with the way the GC commits the memory for the background GC mark array.\r\nThe mark array is reserved together with other management data but the actual commit is postponed until the first background GC is running. This triggers a second commit on the same reserve. But as the mark array is not aligned to a page boundary the first page of this second commit overlaps with the last page that was already committed. The GC code now expect that any additional page is zeroed but the first one should not be touched.\r\n\r\nUnfortunately the virtual memory manager I can use is not smart enough for this. Therefore it either let additional pages uninitialized or clears everything.\r\n\r\nFor performances reasons I would prefer to not implement a tracking for the already committed pages on top of the virtual memory manager. \r\n\r\nA possible fix that would help me could be if the GC avoid this overlapping commit for the background gc mark array. This could be done very easily in the gc_heap::commit_mark_array_by_range function. I already prototyped it on my system and it allows me to get the background GC running even with a virtual memory manager that doesn\u0027t behave that nice when it comes to multi commits of the same page.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKOLhow==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NDkwMjIzOQ==",
                                           "createdAt":  "2020-09-01T14:37:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-01T14:37:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTAwOTUwOQ==",
                                           "createdAt":  "2020-09-01T17:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@RalfKornmannEnvision would you mind linking the PR of the prototype? Assume you are asking for a fix in CoreRT, not .net core? ",
                                           "updatedAt":  "2020-09-01T17:14:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTA1NjI2Nw==",
                                           "createdAt":  "2020-09-01T18:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "CoreRT/NativeAOT is using the exact same GC as CoreCLR. We do not want the implementation to diverge. Also, we want all GC fixes to be submitted via dotnet/runtime repo. \r\n\r\nThe root cause of the issue is that GC commits same region of memory multiple times today. The Windows and Linux memory managers deal with it gracefully, but the Switch memory manager does not.\r\n\r\nCan the GC be fixed so that it always commits given region exactly once?",
                                           "updatedAt":  "2020-09-01T18:31:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTA1NzQ3NQ==",
                                           "createdAt":  "2020-09-01T18:33:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "\u003e CoreRT/NativeAOT is using the exact same GC as CoreCLR. We do not want the implementation to diverge. Also, we want all GC fixes to be submitted via dotnet/runtime repo.\r\n\r\nOk, thanks for the clarification. ",
                                           "updatedAt":  "2020-09-01T18:33:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTMyNTM3MA==",
                                           "createdAt":  "2020-09-02T06:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RalfKornmannEnvision",
                                           "body":  "Created a draft PR (https://github.com/dotnet/runtime/pull/41728) with the small change that would be needed to fix this issue.\r\n\r\nAll it does is changing the start page for the commit of the mark array. So far it always committed starting with the page that contains at least a part of the mark array. The change ensure that it starts with the first page that only contains mark array data. The page that contains although other data has always been already committed at this point as part of the initial commit that happens directly after the memory has been reserved. This initial reserve only exclude the full mark array. There will be nothing behind the mark array therefore we don\u0027t need to considerate that the last page of the mark array might be already committed, too. The edge case here is when the mark array actually starts on a page boundary. In this case there will be no page that contains  mixed data. The new align_upper_page helper function ensures that the address will not change if it is already on the start of a page. Therefore the whole mark array will be committed in the edge case, too.\r\n\r\nAfter the commit the function runs a check (in the debug version) to see if the whole mark array has been zeroed. This check will although validate that all pages of the mark array have been committed. \r\n",
                                           "updatedAt":  "2020-09-02T06:11:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTQwMzQ4OA==",
                                           "createdAt":  "2020-09-02T07:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RalfKornmannEnvision",
                                           "body":  "I take it back. It seems I have overlooked something here. Beside of a full commit of the whole mark array there seems to be a use case were it is only partially committed. In this case my whole approach to fix this issue break down.",
                                           "updatedAt":  "2020-09-02T07:16:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTQyMDI1NQ==",
                                           "createdAt":  "2020-09-02T07:49:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "even without partial commit it doesn\u0027t work - you could have a new segment that\u0027s fully in range and is close enough to an existing fully in range segment that it shares the first page of its mark array with the mark array for the existing segment.\r\n\r\nyou can make this work by looking to see if there\u0027s a seg that would share such a page with the range you want to commit and if that page has been committed based on the old BGC range. \r\n\r\nwhat kind of apps do you run on the switch that uses corert? do you actually need BGC? if these apps have very small heaps you can just disable BGC altogether.",
                                           "updatedAt":  "2020-09-02T07:49:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTQyODg4Nw==",
                                           "createdAt":  "2020-09-02T08:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RalfKornmannEnvision",
                                           "body":  "I am aware that I can disable the BGC. Actually I just have activated it by implementing FEATURE_MANUALLY_MANAGED_CARD_BUNDLES and FEATURE_USE_SOFTWARE_WRITE_WATCH_FOR_GC_HEAP for CoreRT on ARM64. This was when I noticed the issue. \r\n\r\nWe might get away without the BGC but as the long term plan is to get other Switch developer access to the sources, too there might be people who are more in need.  But for now it might be the best to disable the BGC until there is a better solution\r\n\r\nSorry for wasting your time.",
                                           "updatedAt":  "2020-09-02T08:05:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTgzMDEyNA==",
                                           "createdAt":  "2020-09-02T15:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Thanks @RalfKornmannEnvision for raising this issue. We will leave this issue on the backlog, but given that you have a workaround for now, it might be a lower priority. If BGC need arises again please feel free to contribute a change and we will evaluate it for .net 6. Thx!",
                                           "updatedAt":  "2020-09-02T15:55:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTk1NzUzOQ==",
                                           "createdAt":  "2020-09-02T19:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0Joyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2020-09-02T19:53:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2021-07-28T07:54:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@RalfKornmannEnvision no need to apologize! and thanks for bringing to this to our attention.",
                                           "updatedAt":  "2020-09-02T19:45:11Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "GC memory commit issue with currently not supported OS (Nintendo Switch)",
        "labels":  [
                       "enhancement",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41708",
        "createdAt":  "2020-09-01T21:44:07Z",
        "number":  41708,
        "author":  "mangod9",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBPLDJA==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "adamsitnik",
                                            "createdAt":  "2020-09-02T08:44:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-02T23:03:23Z",
        "body":  "There was a bug specific for Alpine Linux where `PAL_GetLogicalProcessorCacheSizeFromOS` would return 0. We should add a unittest or an assert to ensure we dont regress this behavior. \r\n\r\nThe fix was part of this PR: https://github.com/dotnet/runtime/pull/41532",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKNsnIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTE1MDI4OQ==",
                                           "createdAt":  "2020-09-01T21:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-01T21:44:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTQ1MTA0MQ==",
                                           "createdAt":  "2020-09-02T08:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@mangod9 thank you!",
                                           "updatedAt":  "2020-09-02T08:44:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Create a unit test for PAL_GetLogicalProcessorCacheSizeFromOS",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42743",
        "createdAt":  "2020-09-25T17:36:16Z",
        "number":  42743,
        "author":  "mgasparel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-26T09:44:56Z",
        "body":  "### Description\r\n\r\nThis week our application crashed with an access violation error. We were able to retrieve an automatic crash dump, and it appears that this exception originated in the GC at `coreclr!SVR::GCHeap::DiagTraceGCSegments+0x94 [f:\\workspace\\_work\\1\\s\\src\\gc\\gcee.cpp @ 444]`\r\n\r\n\r\n### Configuration\r\n\r\nCLR Version: 4.700.20.36602\r\n\r\nOS_VERSION: 10.0.14393.2430\r\n\r\nOSPLATFORM_TYPE: x64\r\n\r\nOSNAME: Windows 10\r\n\r\n\r\n### Other information\r\n\r\nI did some digging around in this repos issues and could not find anything that seemed relevant to this case.\r\n\r\ncrash dump analysis from windbg below:\r\n```\r\n0:415\u003e !analyze -v\r\n*******************************************************************************\r\n* *\r\n* Exception Analysis *\r\n* *\r\n*******************************************************************************\r\nFailed to request MethodData, not in JIT code range\r\nKEY_VALUES_STRING: 1\r\nKey : AV.Fault\r\n Value: Read\r\nKey : Analysis.CPU.Sec\r\n Value: 22\r\nKey : Analysis.DebugAnalysisProvider.CPP\r\n Value: Create: 8007007e on [omitted]\r\nKey : Analysis.DebugData\r\n Value: CreateObject\r\nKey : Analysis.DebugModel\r\n Value: CreateObject\r\nKey : Analysis.Elapsed.Sec\r\n Value: 21\r\nKey : Analysis.Memory.CommitPeak.Mb\r\n Value: 322\r\nKey : Analysis.System\r\n Value: CreateObject\r\nKey : CLR.Engine\r\n Value: CORECLR\r\nKey : CLR.Version\r\n Value: 4.700.20.36602\r\nKey : Timeline.OS.Boot.DeltaSec\r\n Value: 194834\r\nKey : Timeline.Process.Start.DeltaSec\r\n Value: 194540\r\n\r\nNTGLOBALFLAG: 0\r\nPROCESS_BAM_CURRENT_THROTTLED: 0\r\nPROCESS_BAM_PREVIOUS_THROTTLED: 0\r\nAPPLICATION_VERIFIER_FLAGS: 0\r\nCONTEXT: (.ecxr)\r\nrax=0000000000000000 rbx=000001600c5f0000 rcx=0000015a189796a0\r\nrdx=0000015efded1000 rsi=0000000000000010 rdi=0000000000000002\r\nrip=00007ff867f2eda4 rsp=000000617b07f0e0 rbp=0000015a18930360\r\n r8=000000000ffff000 r9=0000000000000000 r10=00000fff0cfe5da2\r\nr11=0000000400000000 r12=0000000000003f00 r13=0000000000000001\r\nr14=0000000000000001 r15=0000000000000000\r\niopl=0 nv up ei pl nz na po nc\r\ncs=0033 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010206\r\ncoreclr!SVR::GCHeap::DiagTraceGCSegments+0x94:\r\n00007ff8`67f2eda4 488b5320 mov rdx,qword ptr [rbx+20h] ds:00000160`0c5f0020=????????????????\r\nResetting default scope\r\nEXCEPTION_RECORD: (.exr -1)\r\nExceptionAddress: 00007ff867f2eda4 (coreclr!SVR::GCHeap::DiagTraceGCSegments+0x0000000000000094)\r\n ExceptionCode: c0000005 (Access violation)\r\n ExceptionFlags: 00000000\r\nNumberParameters: 2\r\n Parameter[0]: 0000000000000000\r\n Parameter[1]: 000001600c5f0020\r\nAttempt to read from address 000001600c5f0020\r\nPROCESS_NAME: [omitted].exe\r\nREAD_ADDRESS: 000001600c5f0020\r\nERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\r\nEXCEPTION_CODE_STR: c0000005\r\nEXCEPTION_PARAMETER1: 0000000000000000\r\nEXCEPTION_PARAMETER2: 000001600c5f0020\r\nSTACK_TEXT:\r\n00000061`7b07f0e0 00007ff8`67e2e173 : 00000000`80000000 00000061`7b07f231 00000000`00000001 00000000`00000001 : coreclr!SVR::GCHeap::DiagTraceGCSegments+0x94\r\n00000061`7b07f120 00007ff8`67e363e5 : 00000000`00000000 00000000`00000001 00000000`00000001 00000000`00000001 : coreclr!ETW::GCLog::GCSettingsEvent+0x127\r\n00000061`7b07f170 00007ff8`67e3690c : 00000000`00010000 00007ff8`6812d690 00000000`00000001 00000000`00000001 : coreclr!EtwCallback+0x14d\r\n00000061`7b07f280 00007ff8`88875d8d : 00000000`00000004 00000061`7b07f400 00000000`00000000 00000000`00000000 : coreclr!McGenControlCallbackV2+0x12c\r\n00000061`7b07f2d0 00007ff8`88875a15 : 0000015e`a909b2b0 00000061`7b07f7f8 0000015a`183c19d0 00007ff8`87784f49 : ntdll!EtwpEventApiCallback+0xbd\r\n00000061`7b07f360 00007ff8`8884c9fb : 0000015a`183c1900 00000000`00000101 00000061`7b07f438 00007ff8`8778002d : ntdll!EtwpUpdateEnableInfoAndCallback+0xb9\r\n00000061`7b07f3a0 00007ff8`8884c7bb : 0000015a`183c19d0 00000000`00000000 00000000`00000000 00000000`00000100 : ntdll!EtwpProcessNotification+0x43\r\n00000061`7b07f3d0 00007ff8`8884c4ec : 0000015e`9e980800 00000061`00000000 00000000`00000178 00000061`7b07f470 : ntdll!EtwDeliverDataBlock+0x8b\r\n00000061`7b07f430 00007ff8`88885b70 : 0000015a`18330980 00000061`7b07f7f8 0000015a`18330980 00000000`00000000 : ntdll!EtwpNotificationThread+0x6c\r\n00000061`7b07f5a0 00007ff8`8886a073 : 0000015a`18330b08 0000015e`a52e7910 00000000`00000000 00000000`00000010 : ntdll!TppExecuteWaitCallback+0x8c\r\n00000061`7b07f5e0 00007ff8`860384d4 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!TppWorkerThread+0x923\r\n00000061`7b07f9e0 00007ff8`888ae871 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14\r\n00000061`7b07fa10 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21\r\n\r\nFAULTING_SOURCE_LINE: f:\\workspace\\_work\\1\\s\\src\\gc\\gcee.cpp\r\nFAULTING_SOURCE_FILE: f:\\workspace\\_work\\1\\s\\src\\gc\\gcee.cpp\r\nFAULTING_SOURCE_LINE_NUMBER: 444\r\nSYMBOL_NAME: coreclr!SVR::GCHeap::DiagTraceGCSegments+94\r\nMODULE_NAME: coreclr\r\nIMAGE_NAME: coreclr.dll\r\nSTACK_COMMAND: ~415s ; .ecxr ; kb\r\nFAILURE_BUCKET_ID: INVALID_POINTER_READ_ETWCALLBACK_c0000005_coreclr.dll!SVR::GCHeap::DiagTraceGCSegments\r\nOS_VERSION: 10.0.14393.2430\r\nBUILDLAB_STR: rs1_release_inmarket_aim\r\nOSPLATFORM_TYPE: x64\r\nOSNAME: Windows 10\r\nFAILURE_ID_HASH: {f5456149-b552-c332-6b94-272446e7c6e7}\r\nFollowup: MachineOwner\r\n---------\r\n0:415\u003e ~415s ; .ecxr ; kb\r\nntdll!NtWaitForMultipleObjects+0x14:\r\n00007ff8`888e6554 c3 ret\r\nrax=0000000000000000 rbx=000001600c5f0000 rcx=0000015a189796a0\r\nrdx=0000015efded1000 rsi=0000000000000010 rdi=0000000000000002\r\nrip=00007ff867f2eda4 rsp=000000617b07f0e0 rbp=0000015a18930360\r\n r8=000000000ffff000 r9=0000000000000000 r10=00000fff0cfe5da2\r\nr11=0000000400000000 r12=0000000000003f00 r13=0000000000000001\r\nr14=0000000000000001 r15=0000000000000000\r\niopl=0 nv up ei pl nz na po nc\r\ncs=0033 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010206\r\ncoreclr!SVR::GCHeap::DiagTraceGCSegments+0x94:\r\n00007ff8`67f2eda4 488b5320 mov rdx,qword ptr [rbx+20h] ds:00000160`0c5f0020=????????????????\r\n *** Stack trace for last set context - .thread/.cxr resets it\r\n # RetAddr : Args to Child : Call Site\r\n00 00007ff8`67e2e173 : 00000000`80000000 00000061`7b07f231 00000000`00000001 00000000`00000001 : coreclr!SVR::GCHeap::DiagTraceGCSegments+0x94 [f:\\workspace\\_work\\1\\s\\src\\gc\\gcee.cpp @ 444]\r\n01 00007ff8`67e363e5 : 00000000`00000000 00000000`00000001 00000000`00000001 00000000`00000001 : coreclr!ETW::GCLog::GCSettingsEvent+0x127 [f:\\workspace\\_work\\1\\s\\src\\vm\\eventtrace.cpp @ 449]\r\n02 00007ff8`67e3690c : 00000000`00010000 00007ff8`6812d690 00000000`00000001 00000000`00000001 : coreclr!EtwCallback+0x14d [f:\\workspace\\_work\\1\\s\\src\\vm\\eventtrace.cpp @ 4512]\r\n03 00007ff8`88875d8d : 00000000`00000004 00000061`7b07f400 00000000`00000000 00000000`00000000 : coreclr!McGenControlCallbackV2+0x12c [f:\\workspace\\_work\\1\\s\\bin\\obj\\windows_nt.x64.release\\src\\inc\\etw\\clretwall.h @ 226]\r\n04 00007ff8`88875a15 : 0000015e`a909b2b0 00000061`7b07f7f8 0000015a`183c19d0 00007ff8`87784f49 : ntdll!EtwpEventApiCallback+0xbd\r\n05 00007ff8`8884c9fb : 0000015a`183c1900 00000000`00000101 00000061`7b07f438 00007ff8`8778002d : ntdll!EtwpUpdateEnableInfoAndCallback+0xb9\r\n06 00007ff8`8884c7bb : 0000015a`183c19d0 00000000`00000000 00000000`00000000 00000000`00000100 : ntdll!EtwpProcessNotification+0x43\r\n07 00007ff8`8884c4ec : 0000015e`9e980800 00000061`00000000 00000000`00000178 00000061`7b07f470 : ntdll!EtwDeliverDataBlock+0x8b\r\n08 00007ff8`88885b70 : 0000015a`18330980 00000061`7b07f7f8 0000015a`18330980 00000000`00000000 : ntdll!EtwpNotificationThread+0x6c\r\n09 00007ff8`8886a073 : 0000015a`18330b08 0000015e`a52e7910 00000000`00000000 00000000`00000010 : ntdll!TppExecuteWaitCallback+0x8c\r\n0a 00007ff8`860384d4 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!TppWorkerThread+0x923\r\n0b 00007ff8`888ae871 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14\r\n0c 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21\r\n0:415\u003e !address 000001600c5f0020\r\nUsage: \u003cunknown\u003e\r\nBase Address: 0000015f`ff9b2000\r\nEnd Address: 00000160`1c5f0000\r\nRegion Size: 00000000`1cc3e000 ( 460.242 MB)\r\nState: \u003cinfo not present at the target\u003e\r\nProtect: \u003cinfo not present at the target\u003e\r\nType: \u003cinfo not present at the target\u003e\r\nAllocation Base: \u003cinfo not present at the target\u003e\r\nAllocation Protect: \u003cinfo not present at the target\u003e\r\n\r\nContent source: 0 (invalid), length: fffffe0\r\n0:415\u003e !heap -s\r\n************************************************************************************************************************\r\n NT HEAP STATS BELOW\r\n************************************************************************************************************************\r\nLFH Key : 0x96cf1311aace65df\r\nTermination on corruption : ENABLED\r\n Heap Flags Reserv Commit Virt Free List UCR Virt Lock Fast\r\n (k) (k) (k) (k) length blocks cont. heap\r\n-------------------------------------------------------------------------------------\r\n0000015a18330000 00000002 146068 137564 145868 10636 1033 18 4 e549 LFH\r\n0000015a18170000 00008000 64 4 64 2 1 1 0 0\r\n0000015a18310000 00001002 3324 2208 3124 183 36 3 0 0 LFH\r\n0000015a18da0000 00001002 64168 48340 63968 77 247 8 1 1 LFH\r\n0000015a18d20000 00041002 60 8 60 5 1 1 0 0\r\n0000015ea5f50000 00041002 60 8 60 2 1 1 0 0\r\n0000015e993e0000 00001002 1280 88 1080 20 10 2 0 0 LFH\r\n0000015a10470000 00001002 1280 148 1080 12 4 2 0 0 LFH\r\n-------------------------------------------------------------------------------------\r\n```\r\n\r\nHappy to assist if you need any further information or analysis on the dump.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ2z2Gw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTA1OTcyNA==",
                                           "createdAt":  "2020-09-25T17:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-25T17:36:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTA5OTk1NA==",
                                           "createdAt":  "2020-09-25T19:00:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-25T19:00:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTEwMDM3OA==",
                                           "createdAt":  "2020-09-25T19:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@mgasparel I don\u0027t have a CLR version- release version mapping handy. What version of .NET Core / .NET 5 is this?",
                                           "updatedAt":  "2020-09-25T19:01:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTEyMDM2OA==",
                                           "createdAt":  "2020-09-25T19:44:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgasparel",
                                           "body":  "@danmosemsft This should be 3.1.7",
                                           "updatedAt":  "2020-09-25T19:44:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTE2NDg4Ng==",
                                           "createdAt":  "2020-09-25T21:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@mgasparel, where is the dump?",
                                           "updatedAt":  "2020-09-25T21:30:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTIwMjkwOA==",
                                           "createdAt":  "2020-09-25T23:01:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@mgasparel one possible secure way to submit a dump to @cshung is to open a dummy feedback issue here https://developercommunity.visualstudio.com/spaces/61/index.html and share the ID.",
                                           "updatedAt":  "2020-09-25T23:01:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDk1NjQ5Mg==",
                                           "createdAt":  "2020-10-07T14:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgasparel",
                                           "body":  "@danmosemsft Our security team has indicated that we can not share the raw dump. Is there anything we can do without sharing the dump? Any specific commands/analysis you would want to run? I\u0027m happy to be your remote hands and provide output/results.",
                                           "updatedAt":  "2020-10-07T14:00:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDk1ODQ0MQ==",
                                           "createdAt":  "2020-10-07T14:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@mgasparel i will let @cshung guide you as he’s the area owner.",
                                           "updatedAt":  "2020-10-07T14:03:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzgyMzE1NQ==",
                                           "createdAt":  "2020-10-21T19:25:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I had a call with Mike, and he indicated that:\r\n\r\n1. The dump is not currently accessible.\r\n2. They are going to move to Linux.\r\n3. It might be hard to reproduce this bug.\r\n\r\nFor now, there is not much we can do, and we are closing this issue for now. We can revisit it if it happens again or when we have more information to work on.",
                                           "updatedAt":  "2020-10-21T19:25:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMTI5NDgxMg==",
                                           "createdAt":  "2020-11-03T18:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "The customer reported back that he can access the dump again. We will take a look and see if it is actionable.",
                                           "updatedAt":  "2020-11-03T18:13:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDcyMDMxMQ==",
                                           "createdAt":  "2021-03-04T15:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgasparel",
                                           "body":  "Just wanted to let you know that we had this issue on another server this week\r\n- We don\u0027t have the dump but the dll and the failure offset pointed to the exactly same line\r\n- Again, we were collecting PV at the time of the exception\r\n- We can share the collected PV that contains the error stack if there is any value in that.\r\n\r\nPerfView arguments:\r\n```\r\nPerfView.exe collect -CollectMultiple=1000000 -MaxCollectSec=10 -AcceptEULA -NoView -NoGui -CircularMB=1024 -BufferSize=1024 -CPUSampleMSec:10 -ClrEvents=JITSymbols+GC+GCHeapSurvivalAndMovement+Stack+Exception -KernelEvents=process+thread+ImageLoad+Profile+ThreadTime -DotNetAllocSampled -NoNGenRundown -NoV2Rundown -LogFile:perfviewlog-$timestamp.txt -DataFile:PerfView-$timestamp.etl\r\n```",
                                           "updatedAt":  "2021-03-04T15:55:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTUxNDczMQ==",
                                           "createdAt":  "2021-03-05T16:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgasparel",
                                           "body":  "@cshung\r\n\r\n- Is there currently a fix planned for this issue? \r\n- Do you have any thoughts on whether the same issue could occur on linux when running something like perfcollect?",
                                           "updatedAt":  "2021-03-05T16:04:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MzEzNzQwOA==",
                                           "createdAt":  "2021-03-08T22:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "The bug is understood.\r\n\r\nWhen a new ETW session is established, `coreclr!EtwCallback` will be called on a thread. Under certain conditions, `coreclr!EtwCallback` calls `coreclr!ETW::GCLog::GCSettingsEvent` which then calls `GCHeap::DiagTraceGCSegments`. It will access the segment list without synchronizing with the GC. By chance, we might hit a case where the GC alters the segment list (e.g. when the GC decommit a segment), and that would cause an access violation as we witness in this issue.\r\n\r\nWith regard to whether or not it will repro with `perfcollect`, can you check if you have a similar call to `coreclr!ETW::GCLog::GCSettingsEvent` when `perfcollect` happens?\r\n\r\n@dotnet/dotnet-diag ",
                                           "updatedAt":  "2021-03-08T22:41:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzA0MjQ2Ng==",
                                           "createdAt":  "2021-03-11T20:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@cshung \r\nCould you please confirm if this is considered PerfView issue or the framework\u0027s (GC) or both? If the framework\u0027s: is it going to be resolved by 6.0, or earlier in the version 5 of the framework?\r\n",
                                           "updatedAt":  "2021-03-11T20:54:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzA3MDQ0OA==",
                                           "createdAt":  "2021-03-11T21:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sywhang",
                                           "body":  "\u003e With regard to whether or not it will repro with perfcollect, can you check if you have a similar call to coreclr!ETW::GCLog::GCSettingsEvent when perfcollect happens?\r\n\r\nAs far as I can tell `GCLog::GCSettingsEvent` is only called from `EtwCallback`. Using `perfcollect` or EventPipe does not trigger the runtime to call back into `EtwCallback` as this callback is specifically for ETW only.\r\n\r\n",
                                           "updatedAt":  "2021-03-11T21:45:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzA4MDE3Ng==",
                                           "createdAt":  "2021-03-11T22:03:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@baal2000 The bug is in the runtime.\r\n@mangod9 can help with the question about when and where we will deliver the fix.",
                                           "updatedAt":  "2021-03-11T22:03:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjIyNTAzMA==",
                                           "createdAt":  "2021-03-18T19:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 Is there an ETA on this issue update?",
                                           "updatedAt":  "2021-03-18T19:25:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjI1MzIzMA==",
                                           "createdAt":  "2021-03-18T20:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @baal2000, we hope to get to it in the next few .net 6 previews. Hope that works for you? ",
                                           "updatedAt":  "2021-03-18T20:08:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzIzMTY2NQ==",
                                           "createdAt":  "2021-03-20T02:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 Ideally this is fixed in version 5 because preview frameworks are not for production use. The hope is that the fix is narrow enough to not represent much of a regression risk. Thank you.",
                                           "updatedAt":  "2021-03-20T02:47:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDEzNzI5Nw==",
                                           "createdAt":  "2021-03-22T15:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Yeah once we have a fix ready we can determine risk of a backport. Thx. ",
                                           "updatedAt":  "2021-03-22T15:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41FNR5",
                                           "createdAt":  "2021-08-01T17:20:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cshung, is this issue and/or fix well understood? ",
                                           "updatedAt":  "2021-08-01T17:20:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41HnDM",
                                           "createdAt":  "2021-08-02T17:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Moving to 7 since this is a corner case. ",
                                           "updatedAt":  "2021-08-02T17:06:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GPMpE",
                                           "createdAt":  "2022-07-08T00:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I don\u0027t think we have time for this 7.0. moving this out; let me know if you disagree.",
                                           "updatedAt":  "2022-07-08T00:07:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GPMrd",
                                           "createdAt":  "2022-07-08T00:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "(sorry accidentally closed)",
                                           "updatedAt":  "2022-07-08T00:07:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRkBd",
                                           "createdAt":  "2022-07-08T13:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "I disagree this is a corner case.",
                                           "updatedAt":  "2022-07-08T13:46:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nbPYb",
                                           "createdAt":  "2023-09-26T09:44:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "indy-singh",
                                           "body":  "Hi,\r\n\r\nWe rolled out PerfView to help with [this issue](https://github.com/dotnet/aspnetcore/issues/50317) and one of the things we\u0027ve seen is that PerfView on occasion itself causes the app the crash:\r\n\r\n![access-violation-exception](https://github.com/dotnet/runtime/assets/1906778/bcd63a68-5173-47cd-bb33-e3e7b9742020)\r\n\r\nThis isn\u0027t great. Probably happens once every two weeks.\r\n\r\nI don\u0027t know if it is the runtime or PerfView at fault here.\r\n\r\nCheers,\r\nIndy",
                                           "updatedAt":  "2023-09-26T09:44:56Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Access Violation Error in GC DiagTraceGCSegments",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43654",
        "createdAt":  "2020-10-20T19:54:57Z",
        "number":  43654,
        "author":  "mangod9",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T16:23:14Z",
        "body":  "Tracking Epic for POH Tuning in .net 6\r\n\r\n- [x] Add support in GC Perf infrastructure to be able to drill into per GC data\r\nhttps://github.com/dotnet/performance/pull/1594\r\n- [x] Fixing PerfView to support POH properly so that we can use it to analyze POH performance. \r\nhttps://github.com/microsoft/perfview/pull/1295\r\nhttps://github.com/microsoft/perfview/pull/1379\r\nhttps://cshung.github.io/posts/poh-tuning-1/\r\n- [x] Fix GCPerfSim for allocating in POH \r\nhttps://github.com/dotnet/performance/pull/1561\r\n- [x] Fix GCPerfSim to allocate on POH with the right proportion ()\r\nhttps://github.com/dotnet/performance/pull/1582\r\nhttps://github.com/dotnet/performance/pull/1704\r\nhttps://cshung.github.io/posts/poh-tuning-2/\r\n- [x] Experiment, understand and describe the object lifetime for objects allocated in the GCPerfSim.\r\nhttps://cshung.github.io/posts/poh-tuning-3/\r\n- [ ] Initial experiment to compare pinning using GCHandle, and pinning using POH\r\n- [ ] Experiment, understand and describe the performance characteristics of the GC when the survival ratio changes.\r\n- [x] Using POH to improve performance for static and string literals.\r\nhttps://github.com/dotnet/runtime/pull/47651\r\nhttps://github.com/dotnet/runtime/pull/48371",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKoES8Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzEwMjA2NQ==",
                                           "createdAt":  "2020-10-20T19:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-20T19:54:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Epic: Pinned Object Heap tuning",
        "labels":  [
                       "area-GC-coreclr",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44683",
        "createdAt":  "2020-11-14T08:22:31Z",
        "number":  44683,
        "author":  "luithefirst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7-zdw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2024-10-20T08:55:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-08T17:02:28Z",
        "body":  "I\u0027m using a lot of ConditionalWeakTable entries to store computations and runtime data attached to some input data structure. It turned out the total number of entries can get quite large (\u003e500k) and it turned out that they are causing disturbing GC stalls in the application. I could isolate the behavior in a small test project you can find here (using .NET Core 3.1.9): https://github.com/luithefirst/WeakTableGCStall\r\n\r\nThe procedure adds 10k weak table entries every second and continuously does some computation with a small data allocation that triggers a Gen0 collection every several hundredth iteration. The time of the computation is measured and outliers are reported. The number of outliers matches the value of the \"gen-0-gc-count\" `EventCounter `quite well. The magnitude of the outlier increases linearly with the number of weak table entries:\r\n| Entries | Outlier (GC time) |\r\n|---------|---------|\r\n| 100k | 2.5ms |\r\n| 200k | 3.0ms |\r\n| 300k | 4.4ms |\r\n| 400k | 5.9ms |\r\n| 500k | 7.4ms |\r\n| 600k | 8.8ms |\r\n| 700k | 10.5ms |\r\n\r\nThe actual system does a real-time rendering using the Aardvark Platform (https://github.com/aardvark-platform) where we have an attribute grammar system that caches attributes using a weak table. We also use it to attach callbacks in FSharp.Data.Adaptive (https://github.com/fsprojects/FSharp.Data.Adaptive) to adaptive computations. In an application with a huge scene graph there are random frame time spikes caused by GC stalls due to a large number of weak entries. In a scene that was using about 500k of such entries and a lot of other stuff, the frame time is typically 10ms (i7 8700K + GTX 1070 Ti) / 4ms (i7 4700K + RTX 2080 Ti) when only moving the camera (no heavy computations or new entries) and interrupted by spikes of about 20ms / 40ms. \r\n\r\nWith the new insight, I will try to reduce the usage of the ConditionalWeakTable, but it would be great if optimization in its internal implementation could be made. I\u0027m looking forward to your input on this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfTsP5A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzE2NjUxNg==",
                                           "createdAt":  "2020-11-14T08:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-11-14T08:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzE2NzQwNg==",
                                           "createdAt":  "2020-11-14T08:28:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003csummary\u003eIssue Details\u003c/summary\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eDescription:\u003c/th\u003e\n    \u003ctd\u003e\n\nI\u0027m using a lot of ConditionalWeakTable entries to store computations and runtime data attached to some input data structure. It turned out the total number of entries can get quite large (\u003e500k) and I suspect that this is causing noticeable GC stalls at random points in the application. I could isolate the behavior in a small test project you can find here (using .NET Core 3.1.9): https://github.com/luithefirst/WeakTableGCStall\r\n\r\nThe procedure adds 10k weak table entries every second and continuously does some computation with a small data allocation that (I assume) triggers a Gen0 collection every several hundredth iteration. The time of the computation is measured and outliers are reported. You can see that the magnitude of the outlier increases linearly with the number of weak table entries:\r\n| Entries | Outlier (GC time) |\r\n|---------|---------|\r\n| 100k | 2.5ms |\r\n| 200k | 3.0ms |\r\n| 300k | 4.4ms |\r\n| 400k | 5.9ms |\r\n| 500k | 7.4ms |\r\n| 600k | 8.8ms |\r\n| 700k | 10.5ms |\r\n\r\nThe actual system does a real-time rendering using the Aardvark Platform (https://github.com/aardvark-platform) where we have an attribute grammar system that caches attributes using a weak table. We also use it to attach callbacks in FSharp.Data.Adaptive (https://github.com/fsprojects/FSharp.Data.Adaptive) to adaptive computations. In an application with a huge scene graph there are random frame time spikes and I would now conclude that they are caused by GC stalls due to the large number of weak entries. In a scene that was using about 500k of such entries and a lot of other stuff, the spikes are about 20ms when only moving the camera (no heavy computations or new entries). \r\n\r\nOf course, with the new insight I will try to reduce the usage of the ConditionalWeakTable, but it would be also great if optimization in its internal implementation could be made. I\u0027m looking forward to your input on this issue.\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eluithefirst\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-14T08:28:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODY3Mjg5Nw==",
                                           "createdAt":  "2020-11-17T04:05:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "it would be great if this showed the actual GC pause instead of just the count. you could either collect a trace which would tell you definitively how long the GCs are, or use the new GetGCMemoryInfo API in 5.0 which shows the last ephemeral GC pause (you can see examples of using it in [its test](https://github.com/dotnet/runtime/blob/master/src/tests/GC/API/GC/GetGCMemoryInfo.cs)).",
                                           "updatedAt":  "2020-11-17T04:05:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTMxMzgxNA==",
                                           "createdAt":  "2020-11-18T01:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luithefirst",
                                           "body":  "Thanks, the .NET 5 API is very helpful. I\u0027ve added a `GetGCMemoryInfo` query to the outlier iterations. After a short startup time, basically with every outlier, there is a new GC Info available. Shortly before reaching 1mio entries, the program output then looks like: `Update Time Outlier (Iteration=2662685): 13.8ms (x747, Mean=18us) GCPause: 13.8ms GCIndex=7283`,  with about 70% time spent in GC.\r\n\r\nYou can see a huge difference and everything running absolutely smoothly by commenting this line: https://github.com/luithefirst/WeakTableGCStall/blob/master/WeakTableGCStall/Program.cs#L37\r\n",
                                           "updatedAt":  "2020-11-18T01:19:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDA3NDAzMg==",
                                           "createdAt":  "2020-11-19T01:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "thanks for adding the pause time; and thanks @cshung for verifying the behavior. \r\n\r\nso I took a brief look. you are hitting basically the worst usage you could get with CWT. there are 2 factors at play here -\r\n\r\n1) your GCs occur very frequently because the survival is very small - you are allocating mostly temporary objects, only 0.5% survived with your list. so we are at the minimal gen0 [budget](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#The-allocation-budget) which means [GCs will be triggered very often](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#the-one-rule-to-remember).\r\n\r\n2) each GC\u0027s majority cost is going through the CWT. so as the # of elements in your CWT increase this will increase proportionally. so when you get to almost 1 million elements in your CWT this will take a while. \r\n\r\nessentially this is a test of going through a CWT because it doesn\u0027t really do much else at all (gen0 allocations are very cheap when they are almost pure temporary objects). so yes the GC pauses will be your major cost. ",
                                           "updatedAt":  "2020-11-19T01:55:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDE1NTE4OQ==",
                                           "createdAt":  "2020-11-19T06:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luithefirst",
                                           "body":  "Thanks for your detailed analysis! It confirms some assumptions I had about the GC requiring to check CWT entries in every collection. Yes, the benchmark is the absolute worst case. In our real-time rendering application, the overall GC time is about 3%, but about every second there is a frame time spike when the GC runs. On a system with a fast GPU and a slower CPU, it becomes more noticeable. For some reason, the stalls are longer than I could measure in the benchmark, maybe also the number of CWTs is a factor, but I did not validate the actual GC time with `GetGCMemoryInfo`. I already avoided some unnecessary CWT use cases, but the majority still remains at the moment. I also did a quick test and temporarily replaced a CWT by a Dictionary and could immediately cut the stall time in half. Unfortunately, the real solution to avoid the CWT and this case and also most other could not be implemented that simple. The CWT allows for very convenient implementation without using \"Manager\" classes. It would be great if they would not come with this performance drawback.\r\n\r\nIt looks like this is something that cannot be solved by simply making the CWT checking within the GC faster and requires a new concept of managing those entries. I hope you see our scenario as a valid use case and are able to reduce the overhead of CWTs in the future.",
                                           "updatedAt":  "2020-11-19T06:17:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDE2MTE5MQ==",
                                           "createdAt":  "2020-11-19T06:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e the stalls are longer than I could measure in the benchmark, maybe also the number of CWTs is a factor, but I did not validate the actual GC time with `GetGCMemoryInfo`. \r\n\r\nI would say validating the actual GC time with `GetGCMemoryInfo` would still be useful so you can confirm your suspicion. the only other thing I would add is if your secondary objects have references, it could potentially make the scanning a lot more expensive (\u0027cause they then make some primary objects live and now we have to scan those again). so if it\u0027s feasible to make those be less reference rich it would help. \r\n\r\n\u003e I hope you see our scenario as a valid use case and are able to reduce the overhead of CWTs in the future.\r\n\r\nit\u0027s definitely a valid use case. the good news is I already did a design for concurrently scanning dependent handles \u0027cause I knew it would be a problem for some scenarios (when CWT was added I knew scanning dependent handles could be a real perf problem \u0027cause it just made using dependent handles too easy and DH scanning was just not something we optimized). when we switch to scanning them concurrently you wouldn\u0027t have this problem anymore. the bad news is I can also tell you this will not happen in .NET 6 \u0027cause our .NET 6 schedule is already fully booked... sorry.... :crying_cat_face: :crying_cat_face: ",
                                           "updatedAt":  "2020-11-19T06:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc442hqf",
                                           "createdAt":  "2021-10-28T12:57:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "I\u0027m bumping this out of interest, since I\u0027m guessing the planning for .NET 7 has probably started 😃 \r\n\r\nIn the Datadog tracer, there are situation where CWT would be useful, but we\u0027re not using it because of the known performance issues (not that we have observed them, but given that we ship as a library we have to consider the worst-case scenario). I\u0027m definitely looking forward to any improvement in that area.",
                                           "updatedAt":  "2021-10-28T12:57:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Ow_k",
                                           "createdAt":  "2024-05-08T17:02:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luithefirst",
                                           "body":  "Here is an update from my side.\r\n\r\nI\u0027ve just revisited my stress test on net8.0. The performance characteristics do not seem to have improved, possibly gotten slightly worse (I did not backtest with net 5).\r\n\r\nI currently get 18ms GC stalls with 700k entries.",
                                           "updatedAt":  "2024-05-08T17:02:27Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Excessive GC time caused by ConditionalWeakTable entries",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48937",
        "createdAt":  "2021-03-02T02:24:10Z",
        "number":  48937,
        "author":  "peppy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1eo_Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nietras",
                                            "createdAt":  "2021-03-03T12:29:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gonzalo-Bruna",
                                            "createdAt":  "2021-03-05T14:44:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RedlineTriad",
                                            "createdAt":  "2021-10-25T14:36:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "acid-chicken",
                                            "createdAt":  "2022-09-23T15:21:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-08-17T04:35:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "developomp",
                                            "createdAt":  "2024-01-28T10:47:58Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2021-08-25T12:00:15Z",
        "body":  "## Overview\r\nWhen allocating many objects with a finalizer present, there is a non-negligible overhead on GC gen0 collects, even if the finalizer has been suppressed via `GC.SuppressFinalize`. The hypothesis is that this is due to the emptying of the finalizer queue.\r\n\r\nThis is causing our real-time application to hitch on every gen0 collection (around 5-10ms pause time). These gen0 collections only happen every 20-60 seconds.\r\n\r\n## Use Case\r\nA bit more information on our situation, in case it helps to put things into perspective.\r\n\r\nOur team develops a rhythm game/framework which requires sustained very low latency execution. We have recently been [tracking](https://github.com/ppy/osu/issues/11800) user reports of occasional high frame times which align with GC invocation, specifically gen0 collections.\r\n\r\nHaving worked with .NET (framework / core) for several decades, I have a general idea of what to expect in terms of gen0 collection performance, and the numbers we are seeing are much higher than expected, in the range of 5-15ms per collection with low (\u003c1MB/s) alloc throughput and near zero promotion.\r\n\r\nOne cause turned out to be a texture upload class we have, which rents memory from `ArrayPool` and returns on disposal. This class may be constructed every frame for streaming texture data. While we do our best to explicitly dispose after consumption, it has a finalizer implemented as a safety measure, to ensure the memory is returned to the `ArrayPool` no matter what (I think this is a pretty common practice).\r\n\r\nWith our findings here, it seems that finalizers should be avoided in such cases, where objects are constructed in abundance. This is our [general direction](https://github.com/ppy/osu-framework/issues/4229) to resolve this issue, for what it\u0027s worth.\r\n\r\n## Reproduction\r\n```csharp\r\nusing System;\r\n\r\nnamespace TestBasicAllocs\r\n{\r\n    public static class Class1\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            bool finalizers = args[0] == \"1\";\r\n\r\n            for (int i = 0; i \u003c 10000000; i++)\r\n            {\r\n                if (finalizers)\r\n                {\r\n                    var thing = new FinalizingThing();\r\n                    GC.SuppressFinalize(thing);\r\n                }\r\n                else\r\n                    new NonFinalizingThing();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class NonFinalizingThing\r\n    {\r\n        public NonFinalizingThing()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class FinalizingThing\r\n    {\r\n        public FinalizingThing()\r\n        {\r\n        }\r\n\r\n        ~FinalizingThing()\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Results\r\n\r\n`dotnet-trace collect -- .\\bin\\Debug\\net5.0\\TestBasicAllocs.exe  0`\r\n\r\n![Photo Mar 2, 2021 05809](https://user-images.githubusercontent.com/191335/109586763-33fd4f00-7b49-11eb-895f-e38f1511d812.jpg)\r\n\r\n\r\n`dotnet-trace collect -- .\\bin\\Debug\\net5.0\\TestBasicAllocs.exe  1`\r\n\r\n![Photo Mar 2, 2021 05818](https://user-images.githubusercontent.com/191335/109586766-365fa900-7b49-11eb-94f5-ce4cf188487a.jpg)\r\n\r\nI am writing this issue up without a clear distinction of whether this should be considered a bug, performance issue, or an accepted (and potentially better-documented) hidden overhead of finalizers. I have read through [.NET memory performance analysis](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#Top-level-GC-metrics) documentation, which does mention that finalizers should be avoided, but also that calling `GC.SuppressFinalize` should recover all but the allocation overhead. Similar information is present in \"official\" documentation and user comments, but I have been unable to find anything referencing a gen0 collection-time overhead.\r\n\r\nAlso worth noting that while memory analysis guides and profilers like Jetbrains dotMemory will highlight finalizers that were not suppressed, it cannot provide visibility and does not find issue with large numbers of allocations of objects with finalizers present in general. Maybe in the majority of cases this pause overhead is considered acceptable, but do consider that the above benchmarks are cases where gen0s are happening quite regularly. In our actual usage we have seen pause times as long as 30-50ms due to the same underlying issue, which implies that this overhead is not part of the consideration as to how often to *run* gen0 collects.\r\n\r\nI have tested against net472, .net core 3.1/3.2/5.0 and this is not a regression.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONfeIkQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODUyNjM5NQ==",
                                           "createdAt":  "2021-03-02T02:24:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-02T02:24:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODU0OTY2Ng==",
                                           "createdAt":  "2021-03-02T03:22:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Overview\r\nWhen allocating many objects with a finalizer present, there is a non-negligible overhead on GC gen0 collects, even if the finalizer has been suppressed via `GC.SuppressFinalize`. The hypothesis is that this is due to the emptying of the finalizer queue.\r\n\r\nThis is causing our real-time application to hitch on every gen0 collection (around 5-10ms pause time). These gen0 collections only happen every 20-60 seconds.\r\n\r\n## Use Case\r\nA bit more information on our situation, in case it helps to put things into perspective.\r\n\r\nOur team develops a rhythm game/framework which requires sustained very low latency execution. We have recently been [tracking](https://github.com/ppy/osu/issues/11800) user reports of occasional high frame times which align with GC invocation, specifically gen0 collections.\r\n\r\nHaving worked with .NET (framework / core) for several decades, I have a general idea of what to expect in terms of gen0 collection performance, and the numbers we are seeing are much higher than expected, in the range of 5-15ms per collection with low (\u003c1MB/s) alloc throughput and near zero promotion.\r\n\r\nOne cause turned out to be a texture upload class we have, which rents memory from `ArrayPool` and returns on disposal. This class may be constructed every frame for streaming texture data. While we do our best to explicitly dispose after consumption, it has a finalizer implemented as a safety measure, to ensure the memory is returned to the `ArrayPool` no matter what (I think this is a pretty common practice).\r\n\r\nWith our findings here, it seems that finalizers should be avoided in such cases, where objects are constructed in abundance. This is our [general direction](https://github.com/ppy/osu-framework/issues/4229) to resolve this issue, for what it\u0027s worth.\r\n\r\n## Reproduction\r\n```csharp\r\nusing System;\r\n\r\nnamespace TestBasicAllocs\r\n{\r\n    public static class Class1\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            bool finalizers = args[0] == \"1\";\r\n\r\n            for (int i = 0; i \u003c 10000000; i++)\r\n            {\r\n                if (finalizers)\r\n                {\r\n                    var thing = new FinalizingThing();\r\n                    GC.SuppressFinalize(thing);\r\n                }\r\n                else\r\n                    new NonFinalizingThing();\r\n            }\r\n        }\r\n    }\r\n\r\n    public class NonFinalizingThing\r\n    {\r\n        public NonFinalizingThing()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class FinalizingThing\r\n    {\r\n        public FinalizingThing()\r\n        {\r\n        }\r\n\r\n        ~FinalizingThing()\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Results\r\n\r\n`dotnet-trace collect -- .\\bin\\Debug\\net5.0\\TestBasicAllocs.exe  0`\r\n\r\n![Photo Mar 2, 2021 05809](https://user-images.githubusercontent.com/191335/109586763-33fd4f00-7b49-11eb-895f-e38f1511d812.jpg)\r\n\r\n\r\n`dotnet-trace collect -- .\\bin\\Debug\\net5.0\\TestBasicAllocs.exe  1`\r\n\r\n![Photo Mar 2, 2021 05818](https://user-images.githubusercontent.com/191335/109586766-365fa900-7b49-11eb-94f5-ce4cf188487a.jpg)\r\n\r\nI am writing this issue up without a clear distinction of whether this should be considered a bug, performance issue, or an accepted (and potentially better-documented) hidden overhead of finalizers. I have read through [.NET memory performance analysis](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#Top-level-GC-metrics) documentation, which does mention that finalizers should be avoided, but also that calling `GC.SuppressFinalize` should recover all but the allocation overhead. Similar information is present in \"official\" documentation and user comments, but I have been unable to find anything referencing a gen0 collection-time overhead.\r\n\r\nAlso worth noting that while memory analysis guides and profilers like Jetbrains dotMemory will highlight finalizers that were not suppressed, it cannot provide visibility and does not find issue with large numbers of allocations of objects with finalizers present in general. Maybe in the majority of cases this pause overhead is considered acceptable, but do consider that the above benchmarks are cases where gen0s are happening quite regularly. In our actual usage we have seen pause times as long as 30-50ms due to the same underlying issue, which implies that this overhead is not part of the consideration as to how often to *run* gen0 collects.\r\n\r\nI have tested against net472, .net core 3.1/3.2/5.0 and this is not a regression.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epeppy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-02T03:22:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODU4NTk5NQ==",
                                           "createdAt":  "2021-03-02T04:58:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBh1gjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tornhoof",
                                                                               "createdAt":  "2021-03-02T05:18:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it has a finalizer implemented as a safety measure, to ensure the memory is returned to the ArrayPool no matter what (I think this is a pretty common practice).\r\n\r\nThe typical pattern that we use in the core libraries is to just let garbage collector to take care of cleaning up after rare error cases. I do not think we have any place in the core libraries where we have a finalizer just to return memory to the array pool.",
                                           "updatedAt":  "2021-03-02T04:58:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODYwNDYwMw==",
                                           "createdAt":  "2021-03-02T05:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peppy",
                                           "body":  "@jkotas That is what I could see in my investigation (the lack of finalizer), ~~but could you explain how the clean-up is done in this case? Will the arraypool eventually assume the array isn\u0027t being returned and stop tracking it?~~ Figured this out (memory is only added back on `Return`).\r\n\r\nWe have a few other cases where we do use finalizers for non-`ArrayPool.Return` reasons (although are currently looking to remove them as a result of this investigation). Another example where the finalizer is there for safety is a texture upload which is handling unmanaged (ffmpeg) memory handles, for instance.\r\n\r\nIs it safe to say that your advice here is that finalizers should be avoided at all costs, even when `SuppressFinalizer` is correctly used? Is this referenced somewhere in documentation or usage guidelines that I have somehow missed? If not, it might be a worthwhile addition to warn  others that potentially see finalizers as a method of  running clean-up logic, expecting there to be a negligible overhead with correct (seldomly-invoked) usage.\r\n",
                                           "updatedAt":  "2021-03-02T05:36:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODYyOTU1MA==",
                                           "createdAt":  "2021-03-02T05:43:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEI_rEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-03-02T08:03:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nietras",
                                                                               "createdAt":  "2021-03-03T12:31:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-03-08T00:14:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The pooled arrays are just regular arrays. Once they become unreachable, they will get collected just like regular array. Of course, you do not want to depend on the pooled arrays getting collected all the time since it would effectively disable pooling. It is fine to depend on GC to collect the pooled array in rare circumstances.\r\n\r\nFinalizers make sense on types that are holding unmanaged resources if you would like to make these types robust against incorrect use. For public types, .NET design guidelines recommend using SafeHandles for unmanaged resource lifetime management. SafeHandles take care of finalization if resource is not disposed properly, but also protect against race conditions between use and disposal.",
                                           "updatedAt":  "2021-03-02T05:44:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODYzMjYzOA==",
                                           "createdAt":  "2021-03-02T05:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBiDceQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nietras",
                                                                               "createdAt":  "2021-03-03T12:31:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "Having worked with wincrypt and other unmanaged apis, my 2 cents is that you should only use finalizers when it\u0027s absolutely necessary.\n\n For example, when array is not returned to pool there is no risk of application blowing up, only risk of a slowdown and that could be detected by some kind of script runner and collecting GC/fps/other info in your building system. But when unmanaged resources are not released it could lead to memory leaks, dangling handles, unexpected failures. Those are much harder to detect and debug afterwards. And on top of that, I understand gamedev imposes very harsh requirements on latency and execution speed.\n\nI would recommend using some kind of ref struct wrappers and few self made analyzers to detect their proper usage.",
                                           "updatedAt":  "2021-03-02T05:50:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4ODg4ODk2OA==",
                                           "createdAt":  "2021-03-02T12:56:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "Hi, I\u0027m working on the same project referenced in the OP.\r\n\r\nOne case that we\u0027ve recently discovered is `WeakReference\u003cT\u003e`. We\u0027re using ImageSharp\u0027s memory allocator to allocate buffers in the hopes that we can keep texture-related data using the same pool.\r\nAs it turns out, ImageSharp\u0027s [`ArrayPoolMemoryAllocator`](https://github.com/SixLabors/ImageSharp/blob/master/src/ImageSharp/Memory/Allocators/ArrayPoolMemoryAllocator.cs) allocates [`Buffer\u003cT\u003e`](https://github.com/SixLabors/ImageSharp/blob/master/src/ImageSharp/Memory/Allocators/ArrayPoolMemoryAllocator.Buffer%7BT%7D.cs)s which allocate `WeakReference\u003cT\u003e`s, which has a finalizer and triggers the same case as in the OP.\r\n\r\nThis was being done for graphing runtime work diagnostics, and thus we\u0027d like to keep this a real-time/per-frame process.\r\n\r\nThe biggest problem we\u0027re having is that there\u0027s very little visibility on this, besides the raw number of objects allocated. We can get close by using ETW events and inspecting the types to see if they have finalizers, but it\u0027s by no means an exhaustive solution considering `GCAllocationTick` only occurs every ~100KB (this is our current path). We can write a compile-time analyzer but that\u0027s also pretty non-trivial if we have to inspect other assemblies and .NET internals like this. And finally, we can also look into having an automated test harness inspect GC pause times for any weirdness in a bunch of scenarios, but that\u0027s also tricky to do for various reasons though this is a long-term goal for general regression tests.\r\n\r\nFor example, if PerfView provided a count of finalizable objects at GC time, it would help track these issues down. If `GCFinalizersEnd` provided the type name (of just the last type name, as per the other ETW events), that may even be better since we can analyse logs received from users and see if this is the cause. That\u0027s just a few ideas that would help, if this overhead is otherwise unavoidable.",
                                           "updatedAt":  "2021-03-02T12:58:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTM1MjQ0MQ==",
                                           "createdAt":  "2021-03-03T01:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEI_rew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-03-08T00:17:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "hi @peppy, thanks for your report. a comment -\r\n\r\n\u003e  I have read through .NET memory performance analysis documentation, which does mention that finalizers should be avoided, but also that calling GC.SuppressFinalize should recover all but the allocation overhead.\r\n\r\nso that\u0027s not exactly what I said in the doc 😃 this is what I said in the [Finalizers section](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#finalizers) -\r\n\r\n\u003e However, if you suppress the finalizer with GC.SuppressFinalize, what you tell the GC is you don\u0027t need to run the finalizer of this object. So **GC would have no reason to promote it.** It will be reclaimed when GC finds it dead.\r\n\r\nit just says GC will not need to promote it. it doesn\u0027t say GC would not need to scan it, and this text is about scanning -\r\n\r\n\u003e When a GC happens, it will discover the objects that are still live and promote them. Then it will check with objects on the finalize queue to see if they are promoted - if an object is not promoted it means it\u0027s dead, even though it can\u0027t be reclaimed (see why in the next paragraph). If you have tons of finalizable objects in the generations being collected, **this cost alone could be noticeable**.\r\n\r\nhaving said that, I completely agree we should make this more diagnosable. I did talk about the internals of finalization [in this blog post](https://devblogs.microsoft.com/dotnet/finalization-implementation-details/) where I mentioned the method names related to scanning are mentioned - you could look those up before we provide an easier solution. we can provide this time via events like we already do in the mark phase for other types of scanning (stack, handle table, etc). would that be sufficient for you?\r\n\r\nhi @smoogipoo, right now we do [log](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/eventtrace.cpp#L2544) the type of the object that\u0027s being finalized in the [FinalizeObject](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/ClrEtwAll.man#L3110) event if you have [the type keyword enabled on informational level](https://github.com/dotnet/runtime/blob/main/src/coreclr/vm/eventtrace.cpp#L3264). can you please try that and see if the type for those objects show up for you? of course for your specific case, you will not see these events for WeakReference because for WeakReference we don\u0027t actually run their finalizers - GC just take a shortcut and frees the handle right away. what I mentioned above was we could fire an event that tells us how much time we spent in the finalization related scanning. that\u0027s another way. we can also include how many objects we scanned.",
                                           "updatedAt":  "2021-03-03T01:24:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTM3Mzk4Mg==",
                                           "createdAt":  "2021-03-03T02:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peppy",
                                           "body":  "@Maoni0 Thanks for your reply; glad you found this issue (and thanks for your guide, it is a great read). Also apparently I am blind since I missed that specific part about scanning. I think the structure of the document may have played part in that – the \"Finalizer\" section header is a weird bullet point and is also smaller than the sub-headers following it, making them look like a new section.",
                                           "updatedAt":  "2021-03-03T02:26:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTM3ODc5OA==",
                                           "createdAt":  "2021-03-03T02:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@peppy I agree - I really struggled with the formatting since markdown offers pretty primitive options. I tried to make the line that says Finalizer part be more prominent by adding some kind of symbol but then it wouldn\u0027t let me make it a link *sigh* :) maybe I\u0027ll get one of the folks on my team who\u0027s better at this stuff to help me with formatting this better.",
                                           "updatedAt":  "2021-03-03T02:29:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4OTQ2MTI2MA==",
                                           "createdAt":  "2021-03-03T06:05:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "@Maoni0 Thanks for letting me know about the `FinalizeObject` event, it\u0027s already come in handy.\r\n\r\n\u003e we could fire an event that tells us how much time we spent in the finalization related scanning\r\n\r\nThis would definitely help, as we\u0027re still trying to determine whether all remaining overhead is related to finalizers or not - they\u0027re just the biggest clue we have right now. Part of it is that we don\u0027t have full coverage due to WeakReference not being output as you mentioned, which is unfortunate given one of the core parts of the project is data bindings via WeakReference. Having time spent in finalization scanning would tell us if we\u0027re being led astray by this.",
                                           "updatedAt":  "2021-03-03T06:05:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTgzMDEwNw==",
                                           "createdAt":  "2021-03-06T01:30:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBie_Mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smoogipoo",
                                                                               "createdAt":  "2021-03-06T10:52:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@smoogipoo, @ivdiazsa and @cshung  will be working on adding this info to the GC events.",
                                           "updatedAt":  "2021-03-06T01:30:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDMyNTU0Nw==",
                                           "createdAt":  "2021-05-13T05:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "@Maoni0 Just coming back to this issue, I\u0027ve tried quite a few things to get an idea of what\u0027s going wrong.\r\n\r\nOne thing that I found was your blog post which mentioned using PerfView: https://devblogs.microsoft.com/dotnet/you-should-never-see-this-callstack-in-production/\r\nUnfortunately I can\u0027t seem to get this to work with our game (`osu`), I\u0027m running:\r\n```\r\n.\\PerfView64.exe EnableKernelStacks\r\n\r\n.\\PerfView64.exe /nogui /accepteula /BufferSizeMB:4096 /CircularMB:2000 /CollectMultiple:3 /StopOnGcOverMsec:10 /DelayAfterTriggerSec:0 /KernelEvents:Memory,VirtualAlloc,Default /Process:\"osu!\" /OnlyProviders:\"ClrPrivate:1:5,Clr:0x40000001:5\" /NoRundown /NoNGenRundown /NoClrRundown /Merge:true /Zip:true collect\r\n```\r\n\r\nThe most I can drill down to is `coreclr!JIT_New`, but I assume there\u0027s some blocking GC operation inside it that doesn\u0027t show up:\r\n![image](https://user-images.githubusercontent.com/1329837/118080536-563b0500-b3f5-11eb-9848-f5d900794c71.png)\r\n\r\nI suspect this may be because we\u0027re getting 97% broken stacks, with the tool suggesting to either:\r\n- NGEN the exe\r\n    - This doesn\u0027t exist for CoreCLR does it? I\u0027ve tried to publish R2R with no improvement.\r\n- Run with x86\r\n    - Reduces broken stacks to 22% (also running with non-x64 PerfView).\r\n    -  It seems like we don\u0027t get the same GC spikes of 28+ms Gen0 - all GC pause times are around 4ms which is admittedly still quite high for us but more acceptable.\r\n    - It still doesn\u0027t give any GC stacks:  \r\n![image](https://user-images.githubusercontent.com/1329837/118083332-aa47e880-b3f9-11eb-959d-1b92619e4000.png)\r\n- Run with Windows 8\r\n    - I haven\u0027t tried this yet, is this a valid solution if I\u0027m on Windows 10?\r\n\r\nHowever, PerfView does give GC stats when run as above on just the game framework itself (`osu.framework`), even with 97% broken stacks and without R2R:\r\n![image](https://user-images.githubusercontent.com/1329837/118083804-8e911200-b3fa-11eb-81ce-e10a0b9385d3.png)\r\nNote that the above stacks are useless in this context, because I\u0027ve induced this by intentionally allocating and doesn\u0027t represent the real-world case we\u0027re seeing with the game itself.\r\nThere\u0027s nothing different between the runtime configuration of the game and the game framework, so I don\u0027t know why this difference exists.\r\n\r\nLast time I tried it, `dotnet-trace` doesn\u0027t give native callstacks so it can\u0027t be used to dig into GC internals like this.\r\n\r\nAm I missing something with PerfView? Is there an issue that I can report somewhere?",
                                           "updatedAt":  "2021-05-13T06:16:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDM0NzI0NA==",
                                           "createdAt":  "2021-05-13T06:38:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "what are you trying to do exactly? if you want to see the CPU samples while a GC is happening broken stacks shouldn\u0027t matter since you just care about the native part of the stacks. if perfview doesn\u0027t show the native stacks maybe @brianrob could take a look but he\u0027s OOF this week. also if possible, it would help if you could share the trace. ",
                                           "updatedAt":  "2021-05-13T06:38:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDQxNTI4NA==",
                                           "createdAt":  "2021-05-13T08:44:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "\u003e what are you trying to do exactly?\r\n\r\nThe primary question I\u0027m trying to answer is why there\u0027s a large spike in Gen1 time in very similar application states. If I can answer this then I can start digging into the GC myself and check for reasons why that path may be getting hotter:\r\n![image](https://user-images.githubusercontent.com/1329837/118099109-c0f93a00-b40f-11eb-80ae-db3ccf4a39a0.png)\r\n![image](https://user-images.githubusercontent.com/1329837/118099143-ca82a200-b40f-11eb-9876-8821779bc93b.png)\r\n![image](https://user-images.githubusercontent.com/1329837/118099165-d4a4a080-b40f-11eb-831b-7a3c17575ec4.png)\r\n\r\n... Or why it\u0027s even hot in the first place (see below). I can\u0027t repro these results in an isolated context no matter how much Gen0/1 allocations I do, so I don\u0027t think it\u0027s related to the small 10MB/s being allocated.\r\n\r\nAdditionally, I\u0027ve had a suspicion for some time that it\u0027s due to our extensive use of `WeakReference`s, because finalizables are promoted directly into Gen1 and we\u0027ve previously discovered finalizables as a cause of issues that have since been mostly removed. There\u0027s two remaining hot places where `WeakReference`s are used:\r\n1. Deep data bindings between objects (I can theorise why this would cause problems with finding GC roots).\r\n2. Some unoptimised logic that currently uses ImageSharp array pools (which use `WeakReference` internally) and has relatively high churn rate.\r\n\r\nThis is all theoretical at the moment because I don\u0027t know where to look without the native stacks.\r\n\r\n\u003e if you want to see the CPU samples while a GC is happening broken stacks shouldn\u0027t matter\r\n\r\nRight. So then the issue is just that I\u0027m not getting GC native stacks. Here\u0027s the traces I used for this post: [PerfViewData.zip](https://github.com/dotnet/runtime/files/6471346/PerfViewData.zip)",
                                           "updatedAt":  "2021-05-13T09:16:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDgzOTAwOA==",
                                           "createdAt":  "2021-05-13T21:14:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "puzzling...I\u0027m looking at your perfviewdata.etl,zip and I can see the callstacks just fine - this is showing the stacks for GC#158, a gen1 GC that took 24.5ms -\r\n\r\n![image](https://user-images.githubusercontent.com/10837357/118185980-06a70a00-b3f2-11eb-8dee-91b676346780.png)\r\n\r\nin general your gen1 GCs are taking longer because they simply survived a lot more. it\u0027s interesting that find_first_object is taking a significant amount of time. another puzzling thing with the trace is I don\u0027t see a FileVersion event for the coreclr.dll you are using in the osu! process, could you please let me know which version you are using? the trace shows that you are using this version of coreclr.dll in one of the dotnet processes (pid: 7776) -\r\n\r\n\u003cHTML\u003e\r\n\u003cBODY\u003e\r\n\u003c!--StartFragment--\u003e\u003cTABLE\u003e\u003cTR\u003e\u003cTD\u003eEvent Name \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/TD\u003e\u003cTD\u003eTime MSec\u003c/TD\u003e\u003cTD\u003eProcess Name \u003c/TD\u003e\u003cTD\u003eRest \u0026nbsp;\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003eKernelTraceControl/ImageID/FileVersion\u003c/TD\u003e\u003cTD\u003e \u0026nbsp;127.470\u003c/TD\u003e\u003cTD\u003edotnet (7776)\u003c/TD\u003e\u003cTD\u003eThreadID=\u0026quot;-1\u0026quot; ProcessorNumber=\u0026quot;4\u0026quot; ImageSize=\u0026quot;5,255,168\u0026quot; TimeDateStamp=\u0026quot;1,607,740,589\u0026quot; BuildTime=\u0026quot;12/11/2020 6:36:29 PM\u0026quot; OrigFileName=\u0026quot;CoreCLR.dll\u0026quot; FileDescription=\u0026quot;Microsoft .NET Runtime\u0026quot; FileVersion=\u0026quot;5,0,220,61120 @Commit: cb5f173b9696d9d00a544b953d95190ab3b56df2\u0026quot; BinFileVersion=\u0026quot;5.0.220.61120\u0026quot; VerLanguage=\u0026quot;1033\u0026quot; ProductName=\u0026quot;Microsoft\u0026#174; .NET\u0026quot; CompanyName=\u0026quot;Microsoft Corporation\u0026quot; ProductVersion=\u0026quot;5,0,220,61120 @Commit: cb5f173b9696d9d00a544b953d95190ab3b56df2\u0026quot; FileId=\u0026quot;\u0026quot; ProgramId=\u0026quot;\u0026quot; \u003c/TD\u003e\u003c/TR\u003e\u003c/TABLE\u003e\r\n\u003c!--EndFragment--\u003e\r\n\u003c/BODY\u003e\r\n\u003c/HTML\u003e\r\n\r\nof course you could be using a different version in the osu! process. we did do some improvement in 5.0 that would help with the perf of find_first_object but we could do more but the biggest reason is as I pointed out above that GC just needed to do more work. \r\n\r\nto make progress on this it would be very useful to step back a bit and help me understand what your perf goals are - do you care mostly about the GCs that are \u003e10ms which really means your gen1 GCs, or do you care about the long gen1 GCs? also another question is would it be possible to run your workload on the current 6.0 build? that would allow us to do experiments a lot more easily if we need to.",
                                           "updatedAt":  "2021-05-13T21:14:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDkxNzU2MQ==",
                                           "createdAt":  "2021-05-14T00:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peppy",
                                           "body":  "\u003e to make progress on this it would be very useful to step back a bit and help me understand what your perf goals are - do you care mostly about the GCs that are \u003e10ms which really means your gen1 GCs, or do you care about the long gen1 GCs?\r\n\r\nTaking a look from a high level:\r\n- We have internal goals of (as close to) zero allocs during a normal gameplay frame loop. Large allocations generally occur during loading sequences or \"break\" time (for incremental loading).\r\n- Throughout the game we have no blocking load screens, so hope to place as little load on the GC as possible to avoid user identifiable \"stutter\" frames during the complete application lifetime. That is what we are attempting to address in this issue. With users running 60-240hz displays, this can mean a single blocking GC \u003e4-16ms long is noticeable.\r\n\r\nSo i guess you could say we care about any single GC operations that run longer than 4ms, optimally. Not specifically gen1 but any blocking GC calls.\r\n\r\n\u003e also another question is would it be possible to run your workload on the current 6.0 build? that would allow us to do experiments a lot more easily if we need to.\r\n\r\nYes, we can run on 6.0 releases without issue.\r\n",
                                           "updatedAt":  "2021-05-14T00:38:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTA0NjkyNg==",
                                           "createdAt":  "2021-05-14T06:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "@Maoni0 It looks like the reason I wasn\u0027t seeing the GC stacks is an issue on my side - PerfView automatically populates the \"GroupPats\" textbox which filters them out.\r\n\r\nI\u0027m now able to see the GC stacks after clearing that textbox :)\r\n\r\n\u003e could you please let me know which version you are using\r\n\r\nLooks to match the event you have there:\r\n![Capture](https://user-images.githubusercontent.com/1329837/118223692-d0828c80-b4bc-11eb-83b9-5129b0d0e979.PNG)\r\n\r\n\u003e also another question is would it be possible to run your workload on the current 6.0 build\r\n\r\nI\u0027ve done some more profiling. As requested, I\u0027ve done this also for net6.0. This time I have two versions:\r\n- A normal version, taken similarly to the above.\r\n- A \"+mania-pooling\" version which reduces the overall gen2 size and potentially some allocations throughout the process.\r\n\r\n[net5.zip](https://github.com/dotnet/runtime/files/6476629/net5.zip)\r\n[net5+mania-pooling.zip](https://github.com/dotnet/runtime/files/6476631/net5%2Bmania-pooling.zip)\r\n[net6.zip](https://github.com/dotnet/runtime/files/6476632/net6.zip)\r\n[net6+mania-pooling.zip](https://github.com/dotnet/runtime/files/6476633/net6%2Bmania-pooling.zip)\r\n\r\nAll captures were taken with roughly the same reproduction steps, so they should be comparable. There doesn\u0027t seem to be much of a difference between net5 and net6 as far as I\u0027m seeing, but I\u0027ll defer to you on that.\r\n\r\nI\u0027ve written a small test program which allocates ~10MB/sec with varying numbers of finalizable objects and posted the results here: https://gist.github.com/smoogipoo/4c44af65bbf6fb4cbaea3fae29bef504\r\nIt seems like with 10MB/sec of plain old objects, you\u0027re very hard pressed to get below 16ms GC time. As you add finalizable objects, the gen1 time starts to get spikey and experiences large variance after around ~1MB/sec of finalizable objects (n=10), even with very little survival rates.\r\nSo it seems like the path forward here for us is to make sure no finalizable objects are churned through and that allocations are generally kept very low, pretty much around 3MB/sec looks to be the maximum that we\u0027re able to do to meet our performance goal of 4ms GCs.\r\nDoes that sound about right, or am I completely off the mark?",
                                           "updatedAt":  "2021-05-14T06:46:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTA4NzEyNg==",
                                           "createdAt":  "2021-05-14T08:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "it looks like you have concurrent GC disabled, is that the case?",
                                           "updatedAt":  "2021-05-14T08:07:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTExMjQwMg==",
                                           "createdAt":  "2021-05-14T08:57:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "I thought that concurrent GC was turned on by default (that\u0027s what this doc says: https://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector). Is that not the case anymore?\r\n\r\nWe don\u0027t turn it off, the only setting we change is `GCSettings.LatencyMode = GCLatencyMode.SustainedLowLatency;`.\r\n\r\nI\u0027ve forced `\u003cConcurrentGarbageCollection\u003etrue\u003c/ConcurrentGarbageCollection\u003e` in our exe csproj, does this look more like what you expect?: [with_concurrent.zip](https://github.com/dotnet/runtime/files/6477692/with_concurrent.zip)\r\n\r\nEdit: As for the latency mode, we\u0027re currently discussing because it looks like for during important sections `LowLatency` may be better suited for us, though we experience practically no difference with `SustainedLowLatency` vs `Interactive` and is mostly a historical thing.",
                                           "updatedAt":  "2021-05-14T09:02:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTEyMTQ1Ng==",
                                           "createdAt":  "2021-05-14T09:13:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "it is on by default. but somehow it\u0027s turned off for you. the gen0 budget is supposed to be 6mb max for workstation GC but yours is 32MiB. do you have any GC configs set? can you take a look under the debugger if wks::gc_heap::gc_can_use_concurrent is true or false?",
                                           "updatedAt":  "2021-05-14T09:13:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTE0MTA1MA==",
                                           "createdAt":  "2021-05-14T09:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "It looks to be turned on:\r\n![image](https://user-images.githubusercontent.com/1329837/118253162-8b725080-b4e4-11eb-8743-2e3378f0c4ee.png)\r\nNo GC configs set.\r\n\r\nIf it makes any difference, I\u0027m running this under a VMWare VM:\r\n```\r\nOS Name\tMicrosoft Windows 10 Home\r\nVersion\t10.0.19041 Build 19041\r\nOther OS Description \tNot Available\r\nOS Manufacturer\tMicrosoft Corporation\r\nSystem Name\tDESKTOP-4EBGNSC\r\nSystem Manufacturer\tVMware, Inc.\r\nSystem Model\tVMware7,1\r\nSystem Type\tx64-based PC\r\nSystem SKU\t\r\nProcessor\tAMD Ryzen 9 3950X 16-Core Processor, 3700 Mhz, 8 Core(s), 8 Logical Processor(s)\r\nBIOS Version/Date\tVMware, Inc. VMW71.00V.16722896.B64.2008100651, 8/10/2020\r\nSMBIOS Version\t2.7\r\nEmbedded Controller Version\t255.255\r\nBIOS Mode\tUEFI\r\nBaseBoard Manufacturer\tIntel Corporation\r\nBaseBoard Product\t440BX Desktop Reference Platform\r\nBaseBoard Version\tNone\r\nPlatform Role\tDesktop\r\nSecure Boot State\tOff\r\nPCR7 Configuration\tBinding Not Possible\r\nWindows Directory\tC:\\Windows\r\nSystem Directory\tC:\\Windows\\system32\r\nBoot Device\t\\Device\\HarddiskVolume1\r\nLocale\tUnited States\r\nHardware Abstraction Layer\tVersion = \"10.0.19041.906\"\r\nUser Name\tDESKTOP-4EBGNSC\\smgi\r\nTime Zone\tTokyo Standard Time\r\nInstalled Physical Memory (RAM)\t8.00 GB\r\nTotal Physical Memory\t8.00 GB\r\nAvailable Physical Memory\t4.04 GB\r\nTotal Virtual Memory\t9.25 GB\r\nAvailable Virtual Memory\t4.79 GB\r\nPage File Space\t1.25 GB\r\nPage File\tC:\\pagefile.sys\r\nKernel DMA Protection\tOff\r\nVirtualization-based security\tNot enabled\r\nDevice Encryption Support\tReasons for failed automatic device encryption: TPM is not usable, PCR7 binding is not supported, Hardware Security Test Interface failed and device is not Modern Standby, Un-allowed DMA capable bus/device(s) detected, TPM is not usable\r\nA hypervisor has been detected. Features required for Hyper-V will not be displayed.\t\r\n```\r\nHost:\r\n```\r\nKernel: x86_64 Linux 5.10.30-1-MANJARO\r\n```",
                                           "updatedAt":  "2021-05-14T10:00:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTUyODcxNg==",
                                           "createdAt":  "2021-05-14T22:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "my bad - I\u0027m doing this\r\n```\r\n    gen0_max_size = max (gen0_min_size, gen0_max_size);\r\n```\r\nI mistakenly thought I was capping this the other way (max to min). usually folks run client apps on machines with small cache sizes. so that means your gen0_min_size is larger than 6mb then. one thing you could do is to limit the gen0 max budget with the `COMPlus_GCGen0MaxBudget` env var (note that it reads the value as a hex number, so if you specify it as 600000 it would be 6mb. would you mind trying this and capturing another trace? it\u0027s not gonna help with gen1 much (if at all) but it\u0027d be useful to see the result of that before digging more into gen1s.\r\n",
                                           "updatedAt":  "2021-05-14T22:13:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjA1MjY3NA==",
                                           "createdAt":  "2021-05-17T06:49:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "@Maoni0: Sorry for the wait, it looks much better with 6MB max Gen0. Here\u0027s a log (GDrive link because GitHub seems to not like the 28MB zip): https://drive.google.com/file/d/1CcGcbHCD4a4Rx727InxzFnHbXkmTiBY1/view?usp=sharing\r\n\r\nI did some frame time analysis with different budgets:\r\n![image](https://user-images.githubusercontent.com/1329837/118432093-be019080-b712-11eb-9a04-221d5e25579a.png)\r\nIt definitely looks like 6MB is where we\u0027d like to be.\r\n\r\nI\u0027m not sure if this is related, but I noticed that up to 32MB Gen0 is allocated from the very start of the application during which only some EFCore population + loading and JIT compilation is taking place (checked via dotMemory/dotTrace):\r\n![image](https://user-images.githubusercontent.com/1329837/118443772-4558ff00-b727-11eb-848f-0761effc66f3.png)\r\nEdit: Slightly incorrect - there seems to also be a few other processes using the TPL and larger reflection logic.",
                                           "updatedAt":  "2021-05-17T06:59:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MjcxMDI3NQ==",
                                           "createdAt":  "2021-05-17T23:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e It definitely looks like 6MB is where we\u0027d like to be.\r\n\r\nthat\u0027s great to hear! I do have a couple of other observations -\r\n\r\n+ your trace doesn\u0027t contain any gen2 GCs so I can\u0027t tell how big the gen2 budget is - I can see that gen2\u0027s free list is basically already used up (by the end it\u0027s 9% and I\u0027m sure most of the space on the free list would be quite small so not very useful to fit gen1 survivors). this in itself is not necessarily a bad thing - if you have memory GC could choose to use it for a client app we\u0027d like to be not so aggressive about using memory. however, client apps also have their own perf heuristics that differ from server which is they may not need to stay up for that long. I see your trace is about a min long. how long do you think your process usually stays up for? if it\u0027s much longer then you may want to capture a [GCCollectOnly trace](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#how-to-collect-top-level-gc-metrics) (which is very lightweight and can be kept on all the time) for the whole duration so you don\u0027t get surprising behavior later. the trace you shared last time was not merged so I can\u0027t look at the CPU samples anyway.\r\n\r\n+ it\u0027d be interesting to know what gets promoted to gen2 \u0027cause that becomes your long lived data. you could use the generational aware analysis we introduced in .NET 5 (explained [here](https://cshung.github.io/posts/generation-aware-analysis/), you don\u0027t need to do the Analyzing part the same - it uses our perf infra but you already have a trace so you could just follow the Capturing part and specify bytes/index based on what you see in GCStats - essentially you just want to specify the promoted bytes in a gen1 GC which is a lot larger than in gen0 GCs as COMPLUS_GCGenAnalysisBytes and an index that\u0027s large enough to get into steady state for COMPLUS_GCGenAnalysisIndex]. then you can open it up in PerfView like it says.",
                                           "updatedAt":  "2021-05-17T23:30:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjA4ODIwMA==",
                                           "createdAt":  "2021-06-01T12:34:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "I\u0027ve attempted to do the gen aware analysis, but I\u0027ve run into a few problems. I also tested with the blog post\u0027s code and here\u0027s what I found:\r\n1. Is this supposed to work on linux? I\u0027ve tested with net5.0 and net6.0 and the `.nettrace` files don\u0027t get generated at all.\r\n2. (Testing on Windows now) I\u0027ve had to change the analysis index from `3E8` to `64` as it wouldn\u0027t complete the analysis.\r\n3. I don\u0027t see the \"walkable objects\" listing in PerfView:  \r\n![image](https://user-images.githubusercontent.com/1329837/120291739-9a3b6e80-c2fe-11eb-9758-6410beb56499.png)\r\nHow do I drill down into the heap snapshot item? Here\u0027s the trace from the screenshot: [gcgenaware.nettrace.zip](https://github.com/dotnet/runtime/files/6574663/gcgenaware.nettrace.zip)\r\n\r\n\u003e I see your trace is about a min long. how long do you think your process usually stays up for? if it\u0027s much longer then you may want to capture a GCCollectOnly trace (which is very lightweight and can be kept on all the time) for the whole duration so you don\u0027t get surprising behavior later\r\n\r\nThis is quite hard to answer because the application has many stages. It\u0027s a game so the time that any individual user keeps it open is variable, but generally not longer than 48hrs.  \r\nHowever there\u0027s many parts to the game such as menus and overlays, which aren\u0027t \"gameplay\" but in which users could still spend a lot of time, equal to that and maybe exceeding the time spent in gameplay.  \r\nGameplay itself generally lasts anywhere from 30 seconds to 10 minutes, with exceptions. Users can (and generally do) jump in and out of gameplay sessions very often, even so far as to spend as little as 5 seconds in a session at any one time. All of this without closing the application itself.\r\n\r\nStutters in menus and overlays are not desirable but understandable. For example, when loading online data to display in an overlay, it\u0027s understandable that the GC would collect/promote more.  \r\nFor this reason, the traces above were captured only during gameplay which is the single area that we require 0 stutters and where we\u0027re trying really hard to remove all allocations in an effort to achieve this.\r\n\r\nRegardless, here\u0027s a few GCCollectOnly traces I captured:\r\n| trace | description |\r\n| --- | --- |\r\n| [trace.nettrace.zip](https://github.com/dotnet/runtime/files/6576253/trace.nettrace.zip) | 6 minutes of gameplay only |\r\n| [trace.nettrace.zip](https://github.com/dotnet/runtime/files/6576365/trace.nettrace.zip) | A bit longer including multiple gameplay sessions and menus, with the last 6 minutes of gameplay as per the trace above. Gameplay is slightly different though so may not be directly comparable. |\r\n| [trace.nettrace.zip](https://github.com/dotnet/runtime/files/6576525/trace.nettrace.zip) | Multiple gameplay sessions and menus as per the above, except with 6MB gen0 limit. Last 6 minutes matches the above. |\r\n\r\nNot sure what I should be looking at here to move forward.",
                                           "updatedAt":  "2021-06-01T13:25:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjQ0Mzk2Mw==",
                                           "createdAt":  "2021-06-01T21:04:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@cshung could you please help @smoogipoo?",
                                           "updatedAt":  "2021-06-01T21:04:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzE2NzM2MA==",
                                           "createdAt":  "2021-06-08T21:25:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@smoogipoo I think I figured out what is going on with the generational aware analysis. It looks like the view is guarded against the `AppLog.InternalUsers` check here.\r\n\r\nhttps://github.com/microsoft/perfview/blob/06942acdd711b5156b671f5f0528d437c748e865/src/PerfView/PerfViewData.cs#L8247-L8277\r\n\r\nAnd the `InternalUser` flag itself is determined by whether a machine named `clrMain` exists\r\n\r\nhttps://github.com/microsoft/perfview/blob/06942acdd711b5156b671f5f0528d437c748e865/src/PerfView/App.cs#L1184-L1195\r\n\r\nFor the short term, we should be able to workaround that limitation. A cleaner approach is to build your own PerfView with that check removed. If building is too much work, we might be able to fake PerfView by adding `clrMain` to the host file so that PerfView believes that machine exists. Either way would work.\r\n\r\nLonger term, ~@brianrob, do we really need to guard those views under `AppLog.InternalUsers`, can we just expose them?~ the next release of PerfView will work as expected.",
                                           "updatedAt":  "2021-06-08T23:14:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzE3NzU3OQ==",
                                           "createdAt":  "2021-06-08T21:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@cshung, no I don\u0027t think that these views need to be under this check.  Feel free to post a PR to remove the check.",
                                           "updatedAt":  "2021-06-08T21:36:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzU4OTkyNw==",
                                           "createdAt":  "2021-06-09T10:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "First of all, thanks everyone for your continued interest and support in this issue. I have compiled PerfView myself and looked into the gen-aware analysis. This is going to be a long one - I have some promising and instructive results but still not 100% sure what the path forward is.\r\n\r\n(note: In all of the following, the Gen1 with large Pause Time is the one that was gen-aware analysed)\r\n\r\n## Data\r\nTraces: https://drive.google.com/file/d/1mJUfpnmxswdejP5HaYpsPPnpRDITyVQ9/view?usp=sharing\r\n(contains ~500MB of traces analysed below)\r\n\r\nRelevant osu-framework branch: https://github.com/smoogipoo/osu-framework/tree/custom-vbo-array-pool\r\nRelevant osu branch: https://github.com/smoogipoo/osu/tree/gc-debug\r\n\r\n## Initial gen-aware analysis\r\nFirst I did a gc-gen aware analysis on our master/mainline branches:\r\n![Screenshot_2021-06-09_18-28-31](https://user-images.githubusercontent.com/1329837/121330262-cf743c00-c950-11eb-9a7f-f946e116f6b4.png)\r\n![Screenshot_2021-06-09_18-29-05](https://user-images.githubusercontent.com/1329837/121330271-d0a56900-c950-11eb-8bc2-01ac30d96605.png)\r\n```\r\n$env:COMPLUS_GCGenAnalysisIndex=\"14\"\r\n$env:COMPLUS_GCGenAnalysisBytes=\"7A1200\"\r\n```\r\n(data: `mainline`)\r\n\r\nThis makes sense, the top two entires are related to `QuadVertexBuffer`, which I\u0027d previosly mentioned in this thread is an unoptimal piece of our code that\u0027s using ImageSharp\u0027s pools. Optimising this has been on our mind for quite a long time, so I thought to start there.\r\n\r\nPerhaps instructive: Note the difference in magnitudes of the `Inc Ct.` column at this point.\r\n\r\n## Replacing ImageSharp pools with unmanaged memory\r\nInitial replacement of the ImageSharp pools with .NET pools didn\u0027t lead to a noteworthy improvement, so I took it a step further and converted this particular code to use unmanaged memory that\u0027s completely hidden away from the GC (apart from add/remove memory pressure which my experience tells me is good practice when using `Marhsal.AllocHGlobal()` like this).\r\n![Screenshot_2021-06-09_18-34-01](https://user-images.githubusercontent.com/1329837/121330903-62ad7180-c951-11eb-8332-5e82cdb62340.png)\r\n![Screenshot_2021-06-09_18-34-42](https://user-images.githubusercontent.com/1329837/121330912-64773500-c951-11eb-9c34-2f749d45fc58.png)\r\n```\r\n$env:COMPLUS_GCGenAnalysisIndex=\"14\"\r\n$env:COMPLUS_GCGenAnalysisBytes=\"5B8D80\"\r\n```\r\n(data: `mainline+unmanaged-vbo`)\r\n\r\nNothing much seems to have changed here. We\u0027re promoting much less now (less than half of `mainline`), but still have very high gen1 numbers.\r\n\r\nI also tested with not applying memory pressure, which didn\u0027t lead to any Gen1 difference other than induced Gen2s not occurring (which seem to be costly here) (data: `mainline+unmanaged-vbo-no-memory-pressure`).\r\n\r\nAfter reaching this dead end, I decided to look into the root `System.Object[]` which includes `PoolableSkinnableSample`.\r\n\r\n## Disabling PoolableSkinnableSample\r\nIt\u0027s not quite easy for us to \"fix\" `PoolableSkinnableSample` - in-fact, I\u0027m not sure what the fix there is yet. To move things along, I decided to test with it completely disabled.\r\n![Screenshot_2021-06-09_18-53-45](https://user-images.githubusercontent.com/1329837/121333833-1d3e7380-c954-11eb-925f-2eaf5b2e4453.png)\r\n![Screenshot_2021-06-09_18-54-14](https://user-images.githubusercontent.com/1329837/121333845-1e6fa080-c954-11eb-8be4-b204219e3e32.png)\r\n```\r\n$env:COMPLUS_GCGenAnalysisIndex=\"14\"\r\n$env:COMPLUS_GCGenAnalysisBytes=\"3D0900\"\r\n```\r\n(data: `mainline+no-poolable-samples`)\r\n\r\nThis looks promising. The Gen1 times are getting very close to acceptable levels (keep in mind we\u0027re aiming for 4ms). And combining this change with the unmanaged arrays from above:\r\n![Screenshot_2021-06-09_19-03-44](https://user-images.githubusercontent.com/1329837/121335395-82469900-c955-11eb-8d78-0352efebf85f.png)\r\n![Screenshot_2021-06-09_19-04-11](https://user-images.githubusercontent.com/1329837/121335399-8377c600-c955-11eb-896c-5052b4df2e61.png)\r\n```\r\n$env:COMPLUS_GCGenAnalysisIndex=\"14\"\r\n$env:COMPLUS_GCGenAnalysisBytes=\"1E8480\"\r\n```\r\n(data: `mainline+unmanaged-vbo-no-memory-pressure+no-poolable-samples`)\r\n\r\nThere\u0027s still a few spikes - the above traces show Gen1s taking \u003e8ms later in the snapshots, but this is definitely better.\r\n\r\n## Conclusion\r\nThis is where my analysis stops, anything more from here is extremely challenging and requires significant re-architecting of our code to test.\r\n\r\nBut the main takeaway from the above is that, if I\u0027m understanding the data correctly, the _count_ of objects promoted (`Inc Ct.` column) seems to be a better indicator than the _amount_ of data promoted (`Inc` column).\r\n\r\nAm I correct in thinking that `Inc Ct.` (and `Exc. Ct` for that matter) indicate the count of objects promoted? This is quite important because it\u0027s very weird that almost 1700 `PoolableSkinnableSample` objects are promoted (see the initial analysis) - there should only be 2 magnitudes less than that in Gen1 at any point in time. I\u0027ll have to look into this to see if it\u0027s possible from our side.\r\nAlso, if these are counts, does the count include objects alive outside of the walkable tree seen there? I.e. if there are already objects in Gen2, would they be included in the counts?\r\n\r\nI\u0027ll definitely report back on our progress and with further questions and detailings - I\u0027m not entirely sure how to fix even `PoolableSkinnableSample` right now and the `DrawNode[]`/`Drawable[]` structures at the bottom of those traces are not insignificant (count-wise) and probably are the cause of remaining issues, but are even more challenging to test.",
                                           "updatedAt":  "2021-06-09T11:14:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Nzg3OTQ3MA==",
                                           "createdAt":  "2021-06-09T17:13:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBuFwPw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2021-06-09T21:17:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cshung",
                                           "body":  "These `Action` objects are curious:\r\n![image](https://user-images.githubusercontent.com/3410332/121397824-8e0c6e00-c909-11eb-9204-7678b20d2261.png)\r\n\r\nI suspect somewhere in the code we have a delegate (which could look like a lambda) being set to a static field, the delegate itself is an instance method, leading the system also rooting the object hosting the method as its closure. This is a typical reason why memory is leaked.\r\n\r\n\u003e This is quite important because it\u0027s very weird that almost 1700 PoolableSkinnableSample objects are promoted (see the initial analysis) - there should only be 2 magnitudes less than that in Gen1 at any point in time\r\n\r\nWith your comment, I suspect the whole pool is leaked into gen2 through the above mechanism.\r\n\r\nIf you could take a crash dump, using `!DumpHeap` to find some random `PoolableSkinnableSample` objects and trace its `!gcroots`, you might be able to figure out what delegate that is.\r\n\r\nWe could just bet on a random dump, but if we are wanted to increase the odds of finding it, here is the perfect time to capture that dump. At this point, the gen-aware analysis reaches the point it captured the spiking GC. If we have a leaking delegate, the delegate is set right before this GC.\r\n\r\nhttps://github.com/dotnet/runtime/blob/27baae9f91d2c2e6f5309dba1de641dbb7546849/src/coreclr/vm/gcenv.ee.cpp#L1644-L1662\r\n",
                                           "updatedAt":  "2021-06-09T17:13:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODI5OTIxNQ==",
                                           "createdAt":  "2021-06-10T04:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "You\u0027re right, this is just an event handler local to a parenting class.\r\n\r\nThese `PoolableSkinnableSample` objects are absolutely being leaked into gen2, but I can guarantee that we\u0027re not leaking them in the traditional sense as we regularly go in with tools like JetBrains dotMemory to check the state of the application/check for anything that\u0027s live longer than intended. I\u0027ve verified this again by taking a snapshot around the same time as the traces above:\r\n\r\n![image](https://user-images.githubusercontent.com/1329837/121464031-15331200-c9ee-11eb-8ea8-341a629973d5.png)\r\n![image](https://user-images.githubusercontent.com/1329837/121464067-24b25b00-c9ee-11eb-97f5-74b0af0aadde.png)\r\n81 total objects, with 6 of them in gen1. The pools also only contain these objects at most, not more. Internal logging that we have set up confirms these counts.\r\n\r\nThe event handler is this one: https://github.com/ppy/osu/blob/2b4649a3ea2a919f8869a2e66854448b05780d01/osu.Game/Skinning/SkinProvidingContainer.cs#L22\r\n\r\nHere\u0027s a simplified form of what\u0027s going on:\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Demo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var samplePool = new DrawablePool\u003cPoolableSkinnableSample\u003e(0);\r\n            var skinProvidingContainer = new SkinProvidingContainer();\r\n\r\n            // We have a recursive data structure of Drawable objects.\r\n            var hierarchy = new Drawable\r\n            {\r\n                Children =\r\n                {\r\n                    new Drawable\r\n                    {\r\n                        Children =\r\n                        {\r\n                            //... This continues on nesting with different Drawable types for a while, and at some point:\r\n                            skinProvidingContainer,\r\n                            samplePool,\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Some time passes...\r\n            // Note: At this point you can assume that everything above here is guaranteed to be in Gen2.\r\n\r\n            // Objects are retrieved from the pool and added to the hierarchy.\r\n            skinProvidingContainer.Children.Add(samplePool.Get());\r\n            skinProvidingContainer.Children.Add(samplePool.Get());\r\n\r\n            // Within a few seconds afterwards, they\u0027re removed from the hierarchy and returned to the pool.\r\n            // Note: event subscriptions aren\u0027t removed here. This is intentional.\r\n            //   We have methods on get/return where we could move the subscriptions/unsubscriptions to, however since there are very little objects in total we think it\u0027s better to\r\n            //   forego this and any additional handling required as a result, such as what if the event was called before it was re-bound to, just for simplicity.\r\n            var children = skinProvidingContainer.Children.OfType\u003cPoolableSkinnableSample\u003e().ToArray();\r\n            skinProvidingContainer.Children.Clear();\r\n            foreach (var c in children)\r\n                samplePool.Return(c);\r\n\r\n            // Note that there are two ways which the samples could have leaked into Gen2 here:\r\n            //   1. Via the event handler subscription.\r\n            //   2. Via them being returned to the pool.\r\n\r\n            // Immediately, or within a few seconds afterwards, they\u0027re retrieved from the pool and added back to the hierarchy.\r\n            skinProvidingContainer.Children.Add(samplePool.Get());\r\n            skinProvidingContainer.Children.Add(samplePool.Get());\r\n\r\n            // The above process repeats many times...\r\n\r\n            // And much, much later on everything clears up and all events unbound/etc.\r\n            // Note: This never occurs in the traces I provided. It\u0027s intentional as I\u0027m not really interested this far out (only within the 3 minute windows provided).\r\n            hierarchy.Dispose();\r\n        }\r\n    }\r\n\r\n    public class Drawable : IDisposable\r\n    {\r\n        public readonly List\u003cDrawable\u003e Children = new List\u003cDrawable\u003e();\r\n\r\n        public void Dispose()\r\n        {\r\n            GC.SuppressFinalize(this);\r\n            Dispose(true);\r\n\r\n            foreach (var child in Children)\r\n                child.Dispose();\r\n            Children.Clear();\r\n        }\r\n\r\n        protected virtual void Dispose(bool isDisposing)\r\n        {\r\n        }\r\n    }\r\n\r\n    public class DrawablePool\u003cT\u003e : Drawable\r\n        where T : Drawable, new()\r\n    {\r\n        private readonly Stack\u003cT\u003e pool = new Stack\u003cT\u003e();\r\n\r\n        public DrawablePool(int initialSize)\r\n        {\r\n            for (int i = 0; i \u003c initialSize; i++)\r\n                pool.Push(new T());\r\n        }\r\n\r\n        public T Get()\r\n        {\r\n            if (pool.TryPop(out var obj))\r\n                return obj;\r\n\r\n            return new T();\r\n        }\r\n\r\n        public void Return(T obj) =\u003e pool.Push(obj);\r\n\r\n        protected override void Dispose(bool isDisposing)\r\n        {\r\n            base.Dispose(isDisposing);\r\n\r\n            foreach (var pooledChild in pool)\r\n                pooledChild.Dispose();\r\n        }\r\n    }\r\n\r\n    public class SkinProvidingContainer : Drawable\r\n    {\r\n        public event Action SourceChanged;\r\n\r\n        // ... Other logic in this class\r\n    }\r\n\r\n    public class PoolableSkinnableSample : Drawable\r\n    {\r\n        private SkinProvidingContainer parentSkinProvidingContainer;\r\n\r\n        // Assume this is automatically called sometime after ctor() and definitely before Dispose(), via our dependency-injection mechanism.\r\n        private void load(SkinProvidingContainer parentSkinProvidingContainer)\r\n        {\r\n            this.parentSkinProvidingContainer = parentSkinProvidingContainer;\r\n            parentSkinProvidingContainer.SourceChanged += sourceChanged;\r\n        }\r\n\r\n        private void sourceChanged()\r\n        {\r\n            // Do something.\r\n        }\r\n\r\n        protected override void Dispose(bool isDisposing)\r\n        {\r\n            base.Dispose(isDisposing);\r\n\r\n            if (parentSkinProvidingContainer != null)\r\n                parentSkinProvidingContainer.SourceChanged -= sourceChanged;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI don\u0027t know how to improve this process because there\u0027s two leaks to Gen2:\r\n1. Via the event handler.\r\n    * This _could_ be avoided.\r\n2. Via them being added to a Gen2 hierarchy.\r\n    * This can\u0027t be avoided.\r\n\r\nOptions I\u0027m seeing right now include:\r\n1. Reduce the size of these objects.\r\n    * Very hard to do.\r\n    * I\u0027m unsure whether this would resolve the issue - these objects aren\u0027t the largest seen in that trace, and removal of the largest ones (the `QuadVertexBuffer`s) didn\u0027t prove to be fruitful. If it\u0027s the count of objects that\u0027s more important, then this won\u0027t really achieve that much.\r\n2. Pool these objects more aggressively ahead of time.\r\n    * This only really works around the problem - can\u0027t really assume perfect pooling in all scenarios and there\u0027s limits we want to apply anyway to not have the pools be too large on mobile platforms.\r\n    * This is a pretty common scenario we have in general, where such objects can spontaneously get added to a Gen2 hierarchy. It sounds infeasible to have this never be a thing.\r\n\r\nRealistically I don\u0027t think we can resolve this at our end with local optimisations without considerable effort or resorting to the `LowLatency` GC mode.",
                                           "updatedAt":  "2021-06-10T06:23:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDg2NDQ4Nw==",
                                           "createdAt":  "2021-06-14T17:35:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@Maoni0 spotted that in the `mainline+unmanaged-vbo-no-memory-pressure+no-poolable-sample` case we have two interesting GCs (id = 24, id = 34) to compare against. The XML are obtained through the `Raw Data XML file (for debugging)` link on the top of the GCStat page on PerfView, the attribute `MarkStack =\"0.199(56)\"` means 0.199 milliseconds is spent on marking 56 bytes on the stack, other values are interpreted similarly.\r\n\r\n```\r\nid = 20, PauseTime = 2.382\r\n\u003cPerHeapHistory MarkStack =\"0.199(56)\" MarkFQ =\"0.001(0)\" MarkHandles =\"0.005(0)\" MarkOldGen =\"0.801(588210)\"\u003e\r\n\r\nid = 24 PauseTime = 8.395\r\n\u003cPerHeapHistory MarkStack =\"5.351(420)\" MarkFQ =\"0.001(0)\" MarkHandles =\"0.005(0)\" MarkOldGen =\"1.154(1233772)\"\u003e\r\n\r\nid = 34 PauseTime = 201.724\r\n\u003cPerHeapHistory MarkStack =\"0.230(208)\" MarkFQ =\"0.000(0)\" MarkHandles =\"0.009(1136)\" MarkOldGen =\"2.476(3892528)\"\u003e\r\n\r\nid = 46 PauseTime = 5.463\r\n\u003cPerHeapHistory MarkStack =\"0.190(0)\" MarkFQ =\"0.000(0)\" MarkHandles =\"0.008(568)\" MarkOldGen =\"2.092(2000712)\"\u003e\r\n```\r\n\r\nGC 34 is an obvious outlier, it is true that we are having about 3 times more objects and 2 times more bytes than the previous GC, but that doesn\u0027t explain why we are pausing for 30x amount of time.\r\n\r\nThe rest look more normal, although we see there can be an occasional spike in `MarkStack` as well.\r\n\r\nIf we see cases like id = 34 happen consistently, we might want to drill deeper to see what happens there. Maybe we should consider taking CPU samples to figure out what happened exactly during that 200ms.",
                                           "updatedAt":  "2021-06-14T17:35:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTEwMzQxNw==",
                                           "createdAt":  "2021-06-15T01:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "That pause (id = 34) is so long only because it\u0027s the one which gen aware analysis triggered on.",
                                           "updatedAt":  "2021-06-15T02:19:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTc5Nzc1Mw==",
                                           "createdAt":  "2021-06-15T20:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@smoogipoo what is your current goal? are you aiming to make the other gen1 GCs with higher than usual pause times shorter? or just all gen1 GCs shorter? right now you have at least 3 gen0 GCs for 1 gen1 GC. you could experiment with making the gen1 budget smaller (we don\u0027t expose this as a config right now) but I think you are already building the runtime right? so you could experiment with this. I don\u0027t generally advise folks to mess with this but if you are in a very controlled environment you can experiment (essentially the LowLatency mode is setting gen0/gen1 budgets very small but they are too small for you). in `init_static_data` you could set `static_data_table[i][1].max_size` to say 2mb. ",
                                           "updatedAt":  "2021-06-15T20:09:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mjk3Mjg4MA==",
                                           "createdAt":  "2021-06-17T06:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "\u003e what is your current goal?\r\n\r\nThe goal is for GC pauses to not take longer than 4ms, regardless of collected generation. The lower we can go without completely crippling the GC, the better. I\u0027ve focused a lot on Gen1 because those collections are the outliers, but the Gen0 times we\u0027re seeing are also quite significant.\r\n\r\nIdeally we\u0027d like to have a completely time-bounded GC. For example, Unity recently released an \"[incremental GC](https://blog.unity.com/technology/feature-preview-incremental-garbage-collection)\" where you can set a [time slice](https://docs.unity3d.com/2019.1/Documentation/ScriptReference/Scripting.GarbageCollector-incrementalTimeSliceNanoseconds.html) for each increment, however I understand that this is a huge feat and (probably?) not in the scope of .NET in the short or long-term future.  \r\n\r\nSo instead, I want to understand why GC pauses are taking so long in the first place, and whether it\u0027s something we can improve on from our side:\r\n  * Should we be doing even fewer allocations?\r\n  * Should we be reducing individual object size?\r\n  * Is there a disproportionate effect from a deeply nested object graph as opposed to a more linear list containing the same objects?\r\n    * For example, describing a house as a nested relationship of objects, as opposed to simply just listing all objects without any relations. Is there a significant difference between these two models in terms of GC pause time?\r\n\r\nAs you\u0027ve said and we\u0027ve discovered previously, it does seem like the bulk of our issues come down to gen0/gen1 budgets. The problem is that this isn\u0027t something we can set at runtime, and as this is a user-facing game, we can\u0027t tell each and every user to adjust their GCGen0MaxBudget. Our only path forward would be to create a custom loader for our application, which feels a bit ugly.\r\n\r\nThe Java G1 GC has a `MaxGCPauseMillis` knob for a soft-target pause time. It sounds like the reverse concept to `GCGen0MaxBudget` but instead gives the GC the responsibility to get to that value however it wants. I assume the GC is a lot more flexible this way - our application goes through many different stages and it\u0027s possible (actually, definitely the case) that a pause time of 4ms or a max budget of 6MB is not optimal at all times.  \r\nIs this something that may be possible with the .NET GC?\r\n\r\n\u003e but I think you are already building the runtime right?\r\n\r\nI\u0027m not currently building the runtime, but I\u0027ll look into it.",
                                           "updatedAt":  "2021-06-17T06:46:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mjk5NDY2NA==",
                                           "createdAt":  "2021-06-17T07:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvEhGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smoogipoo",
                                                                               "createdAt":  "2021-06-17T07:32:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e Unity recently released an \"incremental GC\" where you can set a time slice for each increment, however I understand that this is a huge feat and (probably?) not in the scope of .NET in the short or long-term future.\r\n\r\nUnity\u0027s GC is non generational and non compacting. doing incremental on such a GC isn\u0027t that much work. our GC is both generational and compacting which makes doing incremental a much, much harder job (a mark and sweep only GC wouldn\u0027t be able to handle the kinds of workload we get on .NET). having said that, it doesn\u0027t mean we don\u0027t have a goal to do it. you are correct of course in saying that specifying a max budget is not as flexible as specifying a pause limit. our regions work in .NET 6 is to build a foundation for future work like providing a soft target pause time. G1 uses regions.\r\n\r\nto understand the cost of a GC, I recommend to read [this](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#the-one-rule-to-remember) and [this](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#what-makes-an-object-survive) section in mem-doc. \r\n\r\n\u003e Our only path forward would be to create a custom loader for our application, which feels a bit ugly.\r\n\r\nis there a reason why you can\u0027t use configs to specify these (right now they are not specifiable with runtimeconfig but we can make it so you can specify them that way. it\u0027s trivial amount of work. that\u0027s the standard way you add configs to .net core apps)?\r\n\r\n",
                                           "updatedAt":  "2021-06-17T07:17:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzAwMTczOA==",
                                           "createdAt":  "2021-06-17T07:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvEidg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2021-06-17T07:34:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "Great to hear progress is being made in this area! Using runtimeconfig sounds like a good solution.",
                                           "updatedAt":  "2021-06-17T07:29:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzAxNTc2Mg==",
                                           "createdAt":  "2021-06-17T07:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvEygQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smoogipoo",
                                                                               "createdAt":  "2021-06-17T07:57:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@smoogipoo let me know if you hit problems building coreclr yourself. feel free to send me email if you need help (my email alias at work is maonis). ",
                                           "updatedAt":  "2021-06-17T07:52:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzA5ODY2NQ==",
                                           "createdAt":  "2021-06-17T09:50:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "Just to confirm one last thing that\u0027s been on our minds - if we have 2 million objects in gen2, could this in any way affect the performance of promotions from gen0/gen1 to gen2 (via the leaking seen above), just due to the count of objects already in gen2 alone?",
                                           "updatedAt":  "2021-06-17T09:50:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTc5OTU0MA==",
                                           "createdAt":  "2021-06-22T09:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "Here\u0027s more data as requested. These measurements are a little different from the above in terms of the state of the game and pressure on the GC, but the same results are exhibited. The first and last 5 seconds of the traces can be mostly discarded as load times.\r\n\r\nBase: [base.nettrace.zip](https://github.com/dotnet/runtime/files/6692696/base.nettrace.zip)\r\nLimiting Gen0 to 6MB: [gen0_6MB.nettrace.zip](https://github.com/dotnet/runtime/files/6692697/gen0_6MB.nettrace.zip)\r\nLimiting Gen1 to 2MB: [gen1_2MB.nettrace.zip](https://github.com/dotnet/runtime/files/6692699/gen1_2MB.nettrace.zip)\r\nLimiting Gen0 to 6MB and Gen1 to 2MB: [gen0_6MB_+_gen1_2MB.nettrace.zip](https://github.com/dotnet/runtime/files/6692698/gen0_6MB_%2B_gen1_2MB.nettrace.zip)\r\n\r\nAll above are with `SustainedLowLatency`.\r\n\r\nBase with `LowLatency`: [lowlatency.nettrace.zip](https://github.com/dotnet/runtime/files/6692857/lowlatency.nettrace.zip)\r\n\r\n- Limiting Gen1 by itself has very little/no effect.\r\n- Limiting Gen0 has the greatest effect.\r\n- Limiting Gen0 + Gen1 results in slightly smaller Gen1 pause times, at the expense of slightly longer Gen2 times as expected (but also much less frequent, so a worthwhile tradeoff). It looks to be fine in this scenario.\r\n  - I say \"in this scenario\" because we recently tried to use `LowLatency` (trace provided above) and encountered large Gen2 pauses exceeding 100ms at times. This is just as you said, G0/G1 budgets are too small, and (I assume?) a lot more data is promoting to G2 that would have otherwise have died earlier.\r\n\r\nLastly, I also gave regions a shot, and you probably don\u0027t want to hear about it yet since it\u0027s still WIP, but I\u0027ll document my findings anyway:\r\n- I encountered a few segfaults/unexpected nullrefs. Let me know if this is something I should be reporting.\r\n- In the few tests I managed to run, I was still getting large G1 pauses, but I don\u0027t have any traces to show. Again, let me know if this is actually of interest at this point and I\u0027ll see if I can get a traceable repro.",
                                           "updatedAt":  "2021-06-22T09:20:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzE1OTEzMw==",
                                           "createdAt":  "2021-06-23T21:06:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e * I encountered a few segfaults/unexpected nullrefs. Let me know if this is something I should be reporting.\r\n\r\nThis is definitely interesting, I would love to be able to reproduce these failures and get them fixed.",
                                           "updatedAt":  "2021-06-23T21:06:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzI0MTUzOA==",
                                           "createdAt":  "2021-06-24T00:23:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBv9VOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smoogipoo",
                                                                               "createdAt":  "2021-06-24T04:47:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e 1. Is this supposed to work on Linux? I\u0027ve tested with net5.0 and net6.0 and the `.nettrace` files don\u0027t get generated at all.\r\n\r\nI finally figure out a potential reason why it doesn\u0027t work for you. On Linux, the environment variables are case-sensitive, the right casing is `COMPlus` instead of `COMPLUS`. On Windows, it won\u0027t matter.\r\n\r\nAlthough my blog post is Windows-centric, I updated the environment variable part so that if someone follows along and wanted to experiment on Linux, they will copy the right casing there.",
                                           "updatedAt":  "2021-06-24T00:23:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4194iR",
                                           "createdAt":  "2021-08-25T11:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "Recently, I\u0027ve noticed that we\u0027re getting different performance characteristics on Linux and Windows on identical hardware (AMD Ryzen 3950x).\r\n\r\nI\u0027ve run tests similar to the above in an even more isolated environment to attempt to reproduce the results. The most telling (to me) was the difference in frame times (how many milliseconds a game\u0027s render loop takes):\r\n| linux | windows |\r\n| --- | --- |\r\n| ![Linux frametimes(2)](https://user-images.githubusercontent.com/1329837/130786725-5fd2f9af-d853-4c29-b9de-d808443ee01b.png) | ![Windows frametimes(2)](https://user-images.githubusercontent.com/1329837/130786758-c37b2dd3-9a9a-4972-b07c-78de16688a59.png) |\r\n\r\nAs above, the `win-6mb` and `linux-6mb` variants are a result of `COMPlus_GCGen0MaxBudget=600000`. I mentioned in previous testing that this 6MB Gen0 limit is where we\u0027d like to sit, which looks to bring Linux performance in-line with Windows (a good thing).\r\n\r\nHere\u0027s the traces:\r\n`win-master`: [trace.nettrace.zip](https://github.com/dotnet/runtime/files/7046196/trace.nettrace.zip)\r\n`win-6mb`: [trace.nettrace.zip](https://github.com/dotnet/runtime/files/7046200/trace.nettrace.zip)\r\n`linux-master`: [trace.nettrace.zip](https://github.com/dotnet/runtime/files/7046203/trace.nettrace.zip)\r\n`linux-6mb`: [trace.nettrace.zip](https://github.com/dotnet/runtime/files/7046208/trace.nettrace.zip)\r\n\r\nCollected with `dotnet trace collect --profile gc-collect`. I can re-run with other profiles/more info if needed, as I\u0027m unsure of how to read the PerfView logs to find out the exact Gen0 size to confirm things.\r\n\r\nIs this a potential issue with the GC tuning too aggressively on Linux?\r\n\r\n\u003e This is definitely interesting, I would love to be able to reproduce these failures and get them fixed.\r\n\r\nI took another look into this since I\u0027ve been following the recent GC-related PRs, and can still repro it. Here\u0027s a script to reproduce with: https://gist.github.com/smoogipoo/1b87b3b518095199db0993133550abbe\r\n\r\nIt should crash within 30 seconds - I\u0027ve had it both segfault and exception at multiple areas.",
                                           "updatedAt":  "2021-08-25T12:00:15Z"
                                       }
                                   ],
                         "totalCount":  44
                     },
        "title":  "High gen0 collect overhead with (suppressed) finalizer objects",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50134",
        "createdAt":  "2021-03-19T03:02:25Z",
        "number":  50134,
        "author":  "liujiyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-03-24T04:21:45Z",
        "body":  "We have a Dot.Net Core 3.1 app running in ubuntu container and its working set memory keep increasing but gc heap size keep stable. \r\nI think .net core code can\u0027t manage working set memory. Does working set is managed by dotnet runtime? Does working set will decrease automatic?\r\nThis article that https://docs.microsoft.com/en-us/dotnet/core/diagnostics/debug-memory-leak just introduce how to analyze gc heap size not working set.\r\n\r\n![appStart](https://user-images.githubusercontent.com/7908738/111725639-61b0fa80-88a2-11eb-93e2-ff2ca75764e5.png)\r\n![appRunafter50m](https://user-images.githubusercontent.com/7908738/111725676-73929d80-88a2-11eb-905c-54befbcb67e2.png)\r\n![appafter8H](https://user-images.githubusercontent.com/7908738/111725710-81e0b980-88a2-11eb-83ca-c7a49589fbf7.png)\r\n![apprunaftreraday](https://user-images.githubusercontent.com/7908738/111725719-87d69a80-88a2-11eb-9f39-60682548e3f6.png)\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMAKYLw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjUwNzQ0Ng==",
                                           "createdAt":  "2021-03-19T03:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2021-03-19T03:02:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTMwODg0Mg==",
                                           "createdAt":  "2021-03-23T22:28:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have a Dot.Net Core 3.1 app running in ubuntu container and its working set memory keep increasing but gc heap size keep stable. \r\nI think .net core code can\u0027t manage working set memory. Does working set is managed by dotnet runtime? Does working set will decrease automatic?\r\nThis article that https://docs.microsoft.com/en-us/dotnet/core/diagnostics/debug-memory-leak just introduce how to analyze gc heap size not working set.\r\n\r\n![appStart](https://user-images.githubusercontent.com/7908738/111725639-61b0fa80-88a2-11eb-93e2-ff2ca75764e5.png)\r\n![appRunafter50m](https://user-images.githubusercontent.com/7908738/111725676-73929d80-88a2-11eb-905c-54befbcb67e2.png)\r\n![appafter8H](https://user-images.githubusercontent.com/7908738/111725710-81e0b980-88a2-11eb-83ca-c7a49589fbf7.png)\r\n![apprunaftreraday](https://user-images.githubusercontent.com/7908738/111725719-87d69a80-88a2-11eb-9f39-60682548e3f6.png)\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eliujiyuan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emarcpopMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-23T22:28:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTQ3NjM5OQ==",
                                           "createdAt":  "2021-03-24T04:21:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @liujiyuan, do you have a standalone repro for this? Thx",
                                           "updatedAt":  "2021-03-24T04:21:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Why does .net core app working set memory keep increasing in linux docker?",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50683",
        "createdAt":  "2021-04-03T08:08:47Z",
        "number":  50683,
        "author":  "karlra",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T17:15:02Z",
        "body":  "### Description\r\n\r\nI have an application that uses the TransactionScope class to control SQL transactions. We also use the same library to do mathematical simulations, but in this case it injects a dummy repository to stop the persistence to SQL. When doing this I noticed that performance became progressively worse, and eventually the app crashed with OOM errors.\r\n\r\nI had previously created a bug report here: https://github.com/dotnet/runtime/issues/1419 but it was closed because it was determined that this is a GC issue and not a TransactionScope issue. \r\n\r\nTake this code:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading;\r\nusing System.Transactions;\r\n\r\nnamespace TestTrxScope\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            int i = 0;\r\n            double lastElapsed = 0;\r\n            Stopwatch sw = new Stopwatch();\r\n            sw.Start();\r\n            while(true)\r\n            {\r\n                using(var scope = CreateTransactionScope())\r\n                {\r\n                    scope.Complete();\r\n                    i++;\r\n                    if(i % 1_000_000 == 0)\r\n                    {\r\n                        Console.WriteLine($\"1m took {sw.Elapsed.TotalSeconds - lastElapsed}\");\r\n                        lastElapsed = sw.Elapsed.TotalSeconds;\r\n                        //GC.Collect(2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public static TransactionScope CreateTransactionScope()\r\n        {\r\n            //Memory grows constantly\r\n            return new TransactionScope(TransactionScopeOption.Suppress, new TransactionOptions() { }, TransactionScopeAsyncFlowOption.Enabled);\r\n\r\n            //This version doesn\u0027t constantly grow in memory usage\r\n            //return new TransactionScope();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis program\u0027s memory usage will grow forever, and the time it takes to complete 1 million TransactionScopes will also grow forever.\r\n\r\n![image](https://user-images.githubusercontent.com/14310157/113472298-960be580-9462-11eb-90c8-cb99e7368cad.png)\r\n\r\n![image](https://user-images.githubusercontent.com/14310157/113472318-b9cf2b80-9462-11eb-98e7-16703ed62154.png)\r\n\r\n![image](https://user-images.githubusercontent.com/14310157/113472520-239c0500-9464-11eb-8de8-9f1388bfe74f.png)\r\n\r\nUncommenting the GC.Collect(2) fixes the ever increasing memory issue, but for some reason the GC does not run on its own in this program. You might think that this is a contrived example but I found this issue in production code, where we have console apps that do extremely heavy calculations.\r\n\r\nNote that even if GC.Collect(2) is called manually, the performance per 1 million rounds still gets worse by 75% or so until it evens out. This suggests that our data access code is impacted by this even in situations when the GC might run level 2 collections on its own due to other allocations causing it.\r\n\r\n### Configuration\r\n\r\n.net core 3.1, Windows 10 x64\r\n\r\n### Regression?\r\n\r\nThis does not seem to happen on .net framework.\r\n\r\n### Other information\r\n\r\nThe situation improves somewhat with .net 5 as I haven\u0027t managed to get OOM errors but it still gets massively progressively worse.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkEHPAw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjgzMjA3Nw==",
                                           "createdAt":  "2021-04-03T08:08:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-03T08:08:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PMxwJ",
                                           "createdAt":  "2022-11-28T09:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karlra",
                                           "body":  "Any chance I could get an update on this? There is a pretty serious leak in TransactionScope with TransactionScopeAsyncFlowOption.Enabled.",
                                           "updatedAt":  "2022-11-28T09:06:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PPdxF",
                                           "createdAt":  "2022-11-28T17:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@karlra, out of curiosity, does omitting `TransactionScopeAsyncFlowOption.Enabled` affect the problem?\r\n\r\nI\u0027m also curious if .NET 7 (current latest) makes any difference.\r\n\r\nFinally, what about .NET 7 with `\u003cTieredPGO\u003eTrue\u003c/TieredPGO\u003e` in the running application\u0027s csproj?",
                                           "updatedAt":  "2022-11-28T17:12:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PPkF6",
                                           "createdAt":  "2022-11-28T17:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwTiXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Timovzl",
                                                                               "createdAt":  "2022-11-28T18:10:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karlra",
                                           "body":  "Yes, that\u0027s the whole point, omitting TransactionScopeAsyncFlowOption.Enabled fixes the issue (but then TransactionScope is unusable with async code). \r\n\r\nI just tested with net7 and there is no appreciable difference vs net6. TieredPGO also makes no difference.\r\n\r\nThis is with TransactionScopeAsyncFlowOption.Enabled. The GC does run, but it doesn\u0027t collect whatever is being leaked here:\r\n\r\n![image](https://user-images.githubusercontent.com/14310157/204343215-019fd39e-2f25-40af-bec2-2ebe25d6c976.png)\r\n\r\nThis is without TransactionScopeAsyncFlowOption.Enabled. GC runs often, but RAM usage is stable.\r\n\r\n![image](https://user-images.githubusercontent.com/14310157/204343392-02eff726-7feb-49c4-8c8d-0dbdb57f856a.png)\r\n\r\n",
                                           "updatedAt":  "2022-11-28T17:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PdBhR",
                                           "createdAt":  "2024-10-11T07:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Note similarity with #108762.\n\nAm going to go ahead and close this issue as it has been open for a while, and there\u0027s no evidence of a **leak**: growing memory usage in itself is not a problem, and only means that the GC hasn\u0027t yet decided to reclaim that memory. An actual leak would mean that  an OutOfMemoryException would be thrown eventually; that has been flagged in #108762 for Android only; if someone can put together a repro that shows an OOM for non-mobile .NET, that would indeed be interesting and we\u0027d want to look into it.",
                                           "updatedAt":  "2024-10-11T07:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PdTX6",
                                           "createdAt":  "2024-10-11T08:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karlra",
                                           "body":  "Interesting attitude. And you don\u0027t feel like it\u0027s a problem that performance gets worse by 800% in this example?",
                                           "updatedAt":  "2024-10-11T08:04:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PesBi",
                                           "createdAt":  "2024-10-11T11:12:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@karira first, I put together a quick BenchmarkDotNet test. When filing issues on performance and/or memory issues, please always include such a BenchmarkDotNet benchmark rather than a Stopwatch-based benchmark - that greatly helps ensuring you\u0027re seeing correct results and not e.g. getting skewed by warm-up problems (it generally helps getting your issue to be addressed more quickly etc.).\n\nHere are the results (code just below):\n\n```\nBenchmarkDotNet=v0.13.0, OS=macOS 14.6.1 (23G93) [Darwin 23.6.0]\nApple M2 Max, 1 CPU, 12 logical and 12 physical cores\n.NET SDK=8.0.203\n  [Host]     : .NET 8.0.3 (8.0.324.11423), Arm64 RyuJIT\n  DefaultJob : .NET 8.0.3 (8.0.324.11423), Arm64 RyuJIT\n\n\n|                                  Method |     Mean |   Error |  StdDev |  Gen 0 |  Gen 1 |  Gen 2 | Allocated |\n|---------------------------------------- |---------:|--------:|--------:|-------:|-------:|-------:|----------:|\n|                                 Default | 164.6 ns | 0.82 ns | 0.77 ns | 0.0746 | 0.0138 |      - |     624 B |\n| TransactionScopeAsyncFlowOption_Enabled | 524.1 ns | 6.03 ns | 5.64 ns | 0.0944 | 0.0086 | 0.0038 |     777 B |\n```\n\n\u003cdetails\u003e\n\u003csummary\u003eBenchmark code\u003c/summary\u003e\n\n```c#\nBenchmarkRunner.Run\u003cBenchmark\u003e();\n\n[MemoryDiagnoser]\npublic class Benchmark\n{\n    [Benchmark]\n    public void Default()\n    {\n        using (new TransactionScope())\n        {\n            // Do nothing\n        }\n    }\n\n    [Benchmark]\n    public void TransactionScopeAsyncFlowOption_Enabled()\n    {\n        using (new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))\n        {\n            // Do nothing\n        }\n    }\n}\n```\n\n\u003c/details\u003e\n\nIn other words, from TransactionScope is indeed x3.5 slower with TransactionScopeAsyncFlowOption.Enabled, and also allocates more memory, with some of it living long enough to get into gen2. While it may be possible to optimize TransactionScopeAsyncFlowOption.Enabled handling, the benchmark doesn\u0027t show a problem per se.\n\nI read through #1419, and if I understand correctly, this issue is basically a duplicate of that, which you opened because #1419 was closed. I essentially agree with what @mconnew wrote there: there\u0027s no evidence of a problem with TransactionScope itself - and certainly no memory leak as you\u0027ve indicated above - although there may be a GC issue lurking here.\n\nI\u0027ll reopen and tag this as a GC issue, hopefully someone from the GC team and chime in (I recommend also looking at #1419 as well for previous discussion). Am also happy to try and help if I can.",
                                           "updatedAt":  "2024-10-11T11:13:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PesSA",
                                           "createdAt":  "2024-10-11T11:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-11T11:13:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Pe-rg",
                                           "createdAt":  "2024-10-11T11:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karlra",
                                           "body":  "I hear what you are saying, however, I don\u0027t agree that this is a case where Benchmark.NET is appropriate or useful. The problem is that the performance gets progressively worse and in the end the application will use all RAM available on the system without doing anything at all. Those issues don\u0027t come through at all in your benchmarks.",
                                           "updatedAt":  "2024-10-11T11:59:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PfH4V",
                                           "createdAt":  "2024-10-11T12:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "The point of the BenchmarkDotNet benchmark here is to show exactly what\u0027s happening at the TransactionScope level, i.e. how much time it\u0027s taking, how much memory it\u0027s allocating, and whether that memory stays around or not. It serves precisely to help isolate things, as we\u0027re suspecting a GC issue etc.",
                                           "updatedAt":  "2024-10-11T12:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PyiEj",
                                           "createdAt":  "2024-10-14T21:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2Nsig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-15T13:27:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "markples",
                                           "body":  "I have a partial explanation for this - will try to post later today.",
                                           "updatedAt":  "2024-10-14T21:41:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QGuNO",
                                           "createdAt":  "2024-10-16T18:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQupTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-16T19:33:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-10-16T20:06:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "frencsi",
                                                                               "createdAt":  "2024-10-23T17:59:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Timovzl",
                                                                               "createdAt":  "2025-05-04T17:24:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "markples",
                                           "body":  "I believe that there are many pieces that fit together to cause this problem.  Unfortunately, each part makes sense on its own.  I\u0027ll attempt to describe it all here.\n- `TransactionScope` is only relevant in that it uses `ConditionalWeakTable` (CWT).  A similar repro that does\n    ``` c#\n    object obj = new();\n    cwt.Add(obj, value);\n    cwt.Remove(obj);\n    ```\n    exhibits similar behavior.\n- `CWT` has a design point that it takes no locks on read access, so all updates are constrained in what they can do.  One specific impact is that the `Remove` can\u0027t fully deallocate the entry internally because a concurrent read might be happening.\n- `CWT` has an internal table (`Container`).  Entries aren\u0027t reused (see the previous point), so it is periodically replaced, though (as before) we can\u0027t immediately deallocate the internal entries.  Also, the `Containers` are linked in order to manage ownership of entries that end up shared across `Containers`.\n- The final cleanup work for a `Container` is left to a finalizer because at that point we know that those concurrent read operations must be done (since they would have references to the `Container`).  However, the possibility of object resurrection (of an object with a reference to a `CWT`) means that new read operations could have been started.  I\u0027ll avoid the details for now, but the end result is that a _second_ finalization pass is good enough.\n- Two stage finalization means that that `Containers` must get garbage collected twice and go through the finalization queue twice, so these objects end up in gen2.  Because of the links, they end up being roots for future `Containers`.  This means that eventually the `Containers` can\u0027t even start the cleanup process until a gen2, so they pile up.\n- On top of this, in the microbenchmark scenario, there is a risk of creating finalization work faster than it can be completed.  The order of finalization isn\u0027t guaranteed, so it\u0027s possible that a \"bad\" order could make things worse.  I haven\u0027t looked for this or seen evidence either way.  However, once a `Container` is in the finalization queue, no more `Containers` from the same `CWT` will be added because they will be rooted by the original one.  Therefore, there should a bit of self-correction is that we\u0027ll eventually get to the oldest one, and so on.",
                                           "updatedAt":  "2024-10-16T18:58:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QG1q-",
                                           "createdAt":  "2024-10-16T19:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3xW-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-10-16T20:06:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "frencsi",
                                                                               "createdAt":  "2024-10-23T17:59:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "markples",
                                           "body":  "I\u0027ve experimented locally with several changes to `CWT`.  Some of them improve the performance of the microbenchmark, but I believe that all of them are unsound.  The problematic case that often breaks things is the following:\n- Object `X` has a `CWT` and both are collected.\n- `X` has a finalizer that starts using the `CWT` again.  (Probably this happens by storing the reference to `X` and/or the `CWT` to some location and having another thread pick up the work so that the finalizer thread can continue to other objects.)\n- `CWT` may have an internal resize operation and has read operations happening.\n- A `Container` finalizer starts executing while the above is happening.\n\nNote also that the `CWT` can\u0027t tell the difference between an operation happening \"normally\" or under an object resurrection scenario.  One thing that I tried was some cleanup during the resize operation so that only one finalization pass would be needed.  This doesn\u0027t work if the resize happens during an object resurrection.\n\nNote: \"during an object resurrection\" is sloppy here - the point is that the `Container` strategy depends on learning that no references exist, which the GC determines during a collection.  Some of these cleanup strategies depend on doing something before that point and something else after that point.  When finalization leads to more operations, references \"reappear\" after that GC.",
                                           "updatedAt":  "2024-10-16T19:08:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QHF4y",
                                           "createdAt":  "2024-10-16T19:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e * `TransactionScope` is only relevant in that it uses `ConditionalWeakTable` (CWT).  A similar repro that does\n\u003e   object obj = new();\n\u003e   cwt.Add(obj, value);\n\u003e   cwt.Remove(obj);\n\u003e       \n\u003e         \n\u003e       \n\u003e   \n\u003e         \n\u003e       \n\u003e   \n\u003e       \n\u003e     \n\u003e   exhibits similar behavior.\n\n@markples after this bit, I kept reading to see if you\u0027d mention the `async` part, but it doesn\u0027t seem like you did.\n\nWhy does this behavior trigger for `TransactionScope`s in `async` mode, but not for non-`async` ones? Does the non-async `TransactionScope` not use a `CWT` (I\u0027m assuming that must be the case here)? If so, why is that the case? Could the implementation for the `async` flow be changed in a way that it stopped depending on `CWT` perhaps, thus avoiding this issue at its root?\n\nJust asking for clarification.",
                                           "updatedAt":  "2024-10-16T19:38:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QHORJ",
                                           "createdAt":  "2024-10-16T19:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2nXvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-16T20:05:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "markples",
                                           "body":  "\u003e Why does this behavior trigger for `TransactionScope`s in `async` mode, but not for non-`async` ones? Does the non-async `TransactionScope` not use a `CWT` (I\u0027m assuming that must be the case here)? If so, why is that the case? Could the implementation for the `async` flow be changed in a way that it stopped depending on `CWT` perhaps, thus avoiding this issue at its root?\n\nThe source code does seem to show that the behavior is async-vs-not.\n``` c#\n            if (AsyncFlowEnabled)\n            {\n                Debug.Assert(ContextKey != null);\n                // Async Flow is enabled and CallContext will be used for ambient transaction.\n                _threadContextData = CallContextCurrentData.CreateOrGetCurrentData(ContextKey);\n...\n        public static ContextData CreateOrGetCurrentData(ContextKey contextKey)\n        {\n            s_currentTransaction.Value = contextKey;\n            return s_contextDataTable.GetValue(contextKey, (env) =\u003e new ContextData(true));\n        }\n...\n        private static readonly ConditionalWeakTable\u003cContextKey, ContextData\u003e s_contextDataTable = new ConditionalWeakTable\u003cContextKey, ContextData\u003e();\n```\n\nI assume that this is due to additional bookkeeping needed to make the async scenario work, but I don\u0027t know any details here.  @roji is this something that you can answer?",
                                           "updatedAt":  "2024-10-16T19:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QHSwE",
                                           "createdAt":  "2024-10-16T20:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "There are two remaining things on my list:\n- The internal mechanism for linking `Containers` is to handle the case where an entry is copied from one `Container` to another.  In this microbenchmark, each entry is immediately removed after being added, so the `Container` replacements always happen with no live entries.  My conjecture is that the link is not needed in this case, and that this is independent of finalizer timing, etc., so it is safe to do.  #108941 has this possible change.  In my experiments, this almost works but the finalizer queue ends up being overloaded.  If I add a small delay to the microbenchmark (very short spin loop), then the finalizer thread can keep up and memory usage stays low and constant.  (but a big caveat - I\u0027ve eventually found a problem with every other proposed fix I\u0027ve come up with)\n- Promoting a finalizable object to a higher generation is unfortunate.  Often this doesn\u0027t matter much as the finalizer can run (nearly) immediately, which handles the important cleanup, and only the memory is left to the higher generation.  However, in this case, the double finalization means that the important cleanup is delayed (potentially by _a lot_), and the links cause other objects to not be eligible for finalization (again, potentially by _a lot_).  Unfortunately, we don\u0027t manage objects individually at this level, but one thing that I can try is to check if a significant fraction of the entire gen0 is finalizable and if so, leave all of it in gen0.  Theoretically this could solve the generation problems and allow the collection and finalization process to make better progress.",
                                           "updatedAt":  "2024-10-16T20:00:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QHY2r",
                                           "createdAt":  "2024-10-16T20:13:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2nkmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-16T20:29:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@markples thanks for doing the deep dive here, very interesting stuff...!\n\n\u003e I assume that this is due to additional bookkeeping needed to make the async scenario work, but I don\u0027t know any details here. @roji is this something that you can answer?\n\nUnfortunately not, not without some investigation...\n\nI will note that the code has been this way for a very long time, basically since TransactionScopeAsyncFlowOption.Enabled was introduced (I\u0027m almost certain the same logic exists on .NET Framework). I\u0027ll also note that in general, the bar for changing things in System.Transactions is quite high - this isn\u0027t a part of .NET that\u0027s being actively evolved (and in any case, unless we say that using CWT is discouraged and should be removed, I\u0027m not sure there\u0027s an actionable Sys.Tx-side thing to do...).\n\n",
                                           "updatedAt":  "2024-10-16T20:13:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QIa8M",
                                           "createdAt":  "2024-10-16T23:18:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2qGMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-10-17T01:07:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "markples",
                                           "body":  "Thanks @roji.  Given some of the details in #1419, it looks like the performance problem has been around for a very long time as well.  It looks like the CWT implementation was changed between framework and .net core.  The previous version locked on reads, which slows them, but then cleanup is much simpler (can be immediate).  I don\u0027t know the history of that change (though it\u0027s certainly understandable to not want a lock for reads).\n\nIt\u0027s possible that one or both of the above ideas will handle real scenarios.  It would certainly be possible to build a microbenchmark that defeats them, so I worry a bit that a real scenario could still hit trouble.  It would be interesting to try these are @karlra\u0027s workload.\n\nCloning the entries into a new `Container` would allow use to break the link in general but with definite cost for other scenarios.",
                                           "updatedAt":  "2024-10-16T23:18:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQZVC",
                                           "createdAt":  "2024-10-17T18:11:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aromaa",
                                           "body":  "There seems to be a comment in the relevant code that mentions multiple app domains and remoting which .NET Core does not support. Is this no longer useful and could this be removed to mitigate the issue?\n\nhttps://github.com/dotnet/runtime/blob/43813ac73242fa78c463d456bf755e3a6622b5d7/src/libraries/System.Transactions.Local/src/System/Transactions/Transaction.cs#L1053-L1057",
                                           "updatedAt":  "2024-10-17T18:11:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QQc8D",
                                           "createdAt":  "2024-10-17T18:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2ymrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aromaa",
                                                                               "createdAt":  "2024-10-17T18:22:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@aromaa thanks for looking into it... That may be true, I\u0027m not sure - there may still be scenarios where the CWT usage is needed etc. This would require deeper investigation, and as I said, the bar on doing changes in System.Transactions is relatively high.\n\nIn any case, I\u0027m still not convinced we should be necessarily working in the direction of dropping CWT from Sys.Tx; the issues analyzed by @markples above are general to CWT, so we should be thinking about them regardless of Sys.Tx (unless the decision is made that CWT is now discouraged etc.).",
                                           "updatedAt":  "2024-10-17T18:19:15Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "GC doesn\u0027t run when using TransactionScope + async",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50902",
        "createdAt":  "2021-04-08T12:36:21Z",
        "number":  50902,
        "author":  "PeterSolMS",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-20T14:04:14Z",
        "body":  "## Background and Motivation\r\n\r\nIn some cases, it\u0027s desirable for GC to reduce memory usage at the possible expense of increased GC pause times.\r\n\r\nThe best tradeoff between memory usage and GC pause time will depend on the scenario, so what is proposed below is a dial where a value of 0 specifies the default behavior, and higher values specify increasingly aggressive measures to keep GC heap size low.\r\n\r\n## Proposed API\r\n\r\n``` C#\r\n    public static partial class GCOptimizationGoal\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// This property is a dial that tells GC to try to reduce memory usage.\r\n        /// A value of 0 specifies the default behavior.\r\n        /// Values 1 through 9 specify increasingly aggressive behavior to reduce\r\n        /// memory usage, at the possible expense of increased GC pause time.\r\n        /// \u003c/summary\u003e\r\n        public static int Memory { get; set; }\r\n    }\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\n// Example 1:\r\n// Keep heap size fairly low\r\nGCOptimizationGoal.Memory = 7;\r\n\r\n// Example 2:\r\n// save setting\r\nint savedMemorySetting = GCOptimizationGoal.Memory;\r\ntry\r\n{\r\n    // Relax memory goal for the following to reduce pause times\r\n    GCOptimizationGoal.Memory = 0;\r\n    // do work\r\n}\r\nfinally\r\n{\r\n    // restore setting\r\n    GCOptimizationGoal.Memory = savedMemorySetting;\r\n}\r\n\r\n```\r\n--\u003e\r\n\r\n## Alternative Designs\r\n\r\nA plausible alternative would be to add a static property to the GCSettings class instead, for example:\r\n\r\n``` C#\r\n    public static partial class GCSettings\r\n    {\r\n        // ... existing members ...\r\n\r\n        /// \u003csummary\u003e\r\n        /// This property is a dial that tells GC to try to reduce memory usage.\r\n        /// A value of 0 specifies the default behavior.\r\n        /// Values 1 through 9 specify increasingly aggressive behavior to reduce\r\n        /// memory usage, at the possible expense of increased GC pause time.\r\n        /// \u003c/summary\u003e\r\n        public static int OptimizeMemory { get; set; }\r\n    }\r\n```\r\n\r\n## Risks\r\n\r\nThe risks can be kept fairly low by making sure the default behavior stays the same. As mentioned above, at the higher settings GC pause times will increase.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP_igxw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTc3MjU5NA==",
                                           "createdAt":  "2021-04-08T12:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nIn some cases, it\u0027s desirable for GC to reduce memory usage at the possible expense of increased GC pause times.\r\n\r\nThe best tradeoff between memory usage and GC pause time will depend on the scenario, so what is proposed below is a dial where a value of 0 specifies the default behavior, and higher values specify increasingly aggressive measures to keep GC heap size low.\r\n\r\n## Proposed API\r\n\r\n``` C#\r\n    public static partial class GCOptimizationGoal\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// This property is a dial that tells GC to try to reduce memory usage.\r\n        /// A value of 0 specifies the default behavior.\r\n        /// Values 1 through 9 specify increasingly aggressive behavior to reduce\r\n        /// memory usage, at the possible expense of increased GC pause time.\r\n        /// \u003c/summary\u003e\r\n        public static int Memory { get; set; }\r\n    }\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\n// Example 1:\r\n// Keep heap size fairly low\r\nGCOptimizationGoal.Memory = 7;\r\n\r\n// Example 2:\r\n// save setting\r\nint savedMemorySetting = GCOptimizationGoal.Memory;\r\ntry\r\n{\r\n    // Relax memory goal for the following to reduce pause times\r\n    GCOptimizationGoal.Memory = 0;\r\n    // do work\r\n}\r\nfinally\r\n{\r\n    // restore setting\r\n    GCOptimizationGoal.Memory = savedMemorySetting;\r\n}\r\n\r\n```\r\n--\u003e\r\n\r\n## Alternative Designs\r\n\r\nA plausible alternative would be to add a static property to the GCSettings class instead, for example:\r\n\r\n``` C#\r\n    public static partial class GCSettings\r\n    {\r\n        // ... existing members ...\r\n\r\n        /// \u003csummary\u003e\r\n        /// This property is a dial that tells GC to try to reduce memory usage.\r\n        /// A value of 0 specifies the default behavior.\r\n        /// Values 1 through 9 specify increasingly aggressive behavior to reduce\r\n        /// memory usage, at the possible expense of increased GC pause time.\r\n        /// \u003c/summary\u003e\r\n        public static int OptimizeMemory { get; set; }\r\n    }\r\n```\r\n\r\n## Risks\r\n\r\nThe risks can be kept fairly low by making sure the default behavior stays the same. As mentioned above, at the higher settings GC pause times will increase.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePeterSolMS\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-08T12:36:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTgyODMyMw==",
                                           "createdAt":  "2021-04-08T13:33:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBmc3PA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-04-08T13:46:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "YairHalberstadt",
                                           "body":  "GCOptimizationGoal.Memory isn\u0027t a very a clear name - I would in fact assume that higher amounts meant use more memory.\r\n\r\nI think an enum would be clearer.\r\n\r\nWhat if you want to go the opposite way? Use as much memory as you want to increase performance? I presume the server GC is tuned for that anyways so there\u0027s no need.\r\n\r\nI think with 10 levels it\u0027s very difficult to decide which one to pick. Maybe 2 modes are all that\u0027s really necessary? Optimize space vs Optimize performance?",
                                           "updatedAt":  "2021-04-08T13:33:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjEwNjY5Mg==",
                                           "createdAt":  "2021-04-08T19:38:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBmmUXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-04-09T06:39:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ygc369",
                                                                               "createdAt":  "2021-04-09T12:25:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e GCOptimizationGoal.Memory isn\u0027t a very a clear name - I would in fact assume that higher amounts meant use more memory.\r\n\u003e Optimize space vs Optimize performance?\r\n\r\nthat\u0027s interesting, when we talk about memory performance, it generally has 3 aspects, space (or more commonly referred to as memory size) is one of them. the other 2 are throughput/time and pause duration. this is explained [here](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#know-what-your-perf-goal-is). \r\n\r\nwhen folks talk about optimizing for an aspect, the convention from most folks I\u0027ve worked with seems to be -\r\n\r\nmemory -\u003e lower is better\r\ntime -\u003e lower is better (which means throughput -\u003e higher is better)\r\npause -\u003e shorter is better\r\n\r\nso when someone talks about \"I want to optimize for memory\" they mean \"I want to use less memory\". \r\n\r\ninterested to hear what other people think of this. ",
                                           "updatedAt":  "2021-04-08T19:38:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODA0NjA1Ng==",
                                           "createdAt":  "2021-04-12T18:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@richlander since this is related to https://github.com/dotnet/core/issues/5488. Perhaps we can broaden the knobs. ",
                                           "updatedAt":  "2021-04-12T18:47:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODczNzI2MA==",
                                           "createdAt":  "2021-04-13T13:30:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PeterSolMS",
                                           "body":  "I think that having a dial is preferable over an enum because it allows for more fine-grained adjustment. Of course, some experimentation and measurement will be required to arrive at a suitable setting for each scenario, but a setting in the middle of the range (say 4 to 6) will be a reasonable starting point in most cases.\r\n\r\nI am open to imroving the naming to reduce potential misunderstanding.",
                                           "updatedAt":  "2021-04-13T13:30:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTAwMzkxOQ==",
                                           "createdAt":  "2021-04-13T19:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "since there haven\u0027t been many comments I think we can take this to API review folks to figure out the naming/convention/etc so I\u0027ve set it to ready for review.",
                                           "updatedAt":  "2021-04-13T19:40:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTIwMzk2Nw==",
                                           "createdAt":  "2021-04-14T03:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "This is interesting. The problem with these sorts of APIs is ensuring that it fits within an actual functioning app. For example, what\u0027s the data that would inform an app that it should `++` the value? If that data rich enough? We should get feedback from   teams who run big sites (1P and 3P). I\u0027m happy to help get that feedback.",
                                           "updatedAt":  "2021-04-14T03:34:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTQ3MjY0Nw==",
                                           "createdAt":  "2021-04-14T12:16:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BreyerW",
                                           "body":  "Would it be possible to actually reduce gc pauses at the expense of bigger memory consumption compared to current default? I mean lets say increase allowed level to 11-15 and default level would be 2-5 and that would mean current behaviour while values lower than default would make gc \"lazier\" than now. Or there wont be any meangiful gains because gc is already as \"lazy\" as possible?",
                                           "updatedAt":  "2021-04-14T22:28:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDU2NjEwNQ==",
                                           "createdAt":  "2021-04-15T16:31:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e A plausible alternative would be to add a static property to the GCSettings class instead\r\n\r\nThis looks better to me as it is similar to the existing `GCSettings.LatencyMode` property. We try to avoid having types that have just a single or very few members.",
                                           "updatedAt":  "2021-04-15T16:31:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDY2MjQyMg==",
                                           "createdAt":  "2021-04-15T19:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCO7Pdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madhub",
                                                                               "createdAt":  "2022-02-16T11:21:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=ZyivxqIt4Zk\u0026t=1h13m47s)\r\n\r\n* We changed the int 0-9 to a double 0-1\r\n* We moved it onto GCSettings and renamed it.\r\n* Otherwise, looks good.\r\n\r\n```C#\r\nnamespace System.Runtime\r\n{\r\n    partial static class GCSettings\r\n    {\r\n        // NaN represents \"there is no goal\"\r\n        // Setter throws for things outside the range [0, 1] union NaN\r\n        public static double MemoryOptimizationGoal { get; set; }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-04-15T20:12:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzczMTQxMA==",
                                           "createdAt":  "2021-06-24T15:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Doesn\u0027t seem like this is implemented yet. @PeterSolMS is this still on track of .NET 6?",
                                           "updatedAt":  "2021-06-24T15:27:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ElNQ",
                                           "createdAt":  "2022-02-16T11:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madhub",
                                           "body":  "Any update ?, is it planned for .NET 7\r\nHow does it related to Workstation or Server GC setting ? Does it automatically select GC mode based on this setting ?\r\n",
                                           "updatedAt":  "2022-02-16T11:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ht69",
                                           "createdAt":  "2022-02-23T17:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "@madhub It needs real implementation in GC. We don\u0027t want to expose such API in advance with no actual effect.\r\n\r\n\u003e How does it related to Workstation or Server GC setting ? Does it automatically select GC mode based on this setting ?\r\n\r\nI don\u0027t think they should be related. There are more behavior difference between workstation and server GC.",
                                           "updatedAt":  "2022-02-23T17:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_cT5-",
                                           "createdAt":  "2022-03-10T18:53:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e [Video](https://www.youtube.com/watch?v=ZyivxqIt4Zk\u0026t=1h13m47s)\r\n\u003e \r\n\u003e     * We changed the int 0-9 to a double 0-1\r\n\u003e \r\n\u003e     * We moved it onto GCSettings and renamed it.\r\n\u003e \r\n\u003e     * Otherwise, looks good.\r\n\u003e \r\n\u003e \r\n\u003e ```cs\r\n\u003e namespace System.Runtime\r\n\u003e {\r\n\u003e     partial static class GCSettings\r\n\u003e     {\r\n\u003e         // NaN represents \"there is no goal\"\r\n\u003e         // Setter throws for things outside the range [0, 1] union NaN\r\n\u003e         public static double MemoryOptimizationGoal { get; set; }\r\n\u003e     }\r\n\u003e }\r\n\u003e ```\r\n@bartonjs \r\n\r\nWouldn\u0027t a `float` suffice for this case?",
                                           "updatedAt":  "2022-03-10T18:53:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_gjU3",
                                           "createdAt":  "2022-03-11T20:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e Wouldn\u0027t a float suffice for this case?\r\n\r\nPossibly; but `double` is the go-to type in .NET for floating point values (just like how we use `int` even for API only capable of expressing values like 0..10)).  System.Single only makes it into API when there\u0027s a compelling reason.\r\n\r\nI doubt that the GC\u0027s backing integer values will ever exceed 24 bits of granularity, so System.Single probably isn\u0027t limiting; but it\u0027s a bit unnatural, and this API shouldn\u0027t really be on any hot path that would warrant the squeeze.",
                                           "updatedAt":  "2022-03-11T20:35:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_-KDH",
                                           "createdAt":  "2022-03-20T14:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Can any of you explain roughly what this change involves on the GC side?\r\n\r\nIf this is a simple topic for beginners, it would certainly be interesting for me, because I have not had much to do with the GC.",
                                           "updatedAt":  "2022-03-20T14:04:14Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Add an API to reduce GC memory usage",
        "labels":  [
                       "api-approved",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52230",
        "createdAt":  "2021-05-04T00:46:23Z",
        "number":  52230,
        "author":  "ZhiqiangTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-07T07:39:32Z",
        "body":  "recently, I meet an issue\r\n![image](https://user-images.githubusercontent.com/16182251/116949113-df469380-acb3-11eb-8868-95f273b6e7fd.png)\r\nas you can see, the gen2 is very large(about 120m) smaller than LOH, so I think there are many objects migrate from gen0 -\u003egen1-to gen2, then I use gcroot and gcwhere to inspect some objects , but i found that most of them are handled by below:\r\n```\r\n\u003e gcwhere **00007fbb3510cca8**\r\nAddress            Gen   Heap   segment            begin              allocated           size\r\n00007FBB3510CCA8   **2**     0     00007FBB33FFE000   00007FBB33FFF000   00007FBB3B5402D0    0x40(64)\r\n\u003e gcroot **00007fbb3510cca8**\r\nThread 1:\r\n    00007FFD1E9D5C30 00007FBC8BE3F1D0 System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken)\r\n        rbp-30: 00007ffd1e9d5c50\r\n            -\u003e  00007FBB3454B598 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions+\u003cRunAsync\u003ed__4, Microsoft.Extensions.Hosting.Abstractions]]\r\n            -\u003e  00007FBB342373F0 Microsoft.Extensions.Hosting.Internal.Host\r\n            -\u003e  00007FBB34236360 Microsoft.Extensions.Logging.Logger`1[[Microsoft.Extensions.Hosting.Internal.Host, Microsoft.Extensions.Hosting]]\r\n            -\u003e  00007FBB34236480 Microsoft.Extensions.Logging.Logger\r\n            -\u003e  00007FBB342364A8 Microsoft.Extensions.Logging.LoggerInformation[]\r\n            -\u003e  00007FBB34236548 Microsoft.Extensions.Logging.Console.ConsoleLogger\r\n            -\u003e  00007FBB342309D8 Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter\r\n            -\u003e  00007FBB34230BA8 Microsoft.Extensions.Options.OptionsMonitor`1+ChangeTrackerDisposable[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230810 Microsoft.Extensions.Options.OptionsMonitor`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230480 Microsoft.Extensions.Options.OptionsFactory`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230320 Microsoft.Extensions.Options.IConfigureOptions`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]][]\r\n            -\u003e  00007FBB34230340 Microsoft.Extensions.Logging.ConsoleLoggerFormatterConfigureOptions`2[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter, Microsoft.Extensions.Logging.Console],[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230398 System.Action`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230380 Microsoft.Extensions.Options.ConfigureFromConfigurationOptions`1+\u003c\u003ec__DisplayClass0_0[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230358 Microsoft.Extensions.Configuration.ConfigurationSection\r\n            -\u003e  00007FBB3422C1D8 Microsoft.Extensions.Configuration.ConfigurationRoot\r\n            -\u003e  00007FBB3422C140 System.Collections.Generic.List`1[[Microsoft.Extensions.Configuration.IConfigurationProvider, Microsoft.Extensions.Configuration.Abstractions]]\r\n            -\u003e  00007FBB3422C180 Microsoft.Extensions.Configuration.IConfigurationProvider[]\r\n            -\u003e  00007FBB3422C160 Microsoft.Extensions.Configuration.ChainedConfigurationProvider\r\n            -\u003e  00007FBB3422C078 Microsoft.Extensions.Configuration.ConfigurationSection\r\n            -\u003e  00007FBB34029FC8 Microsoft.Extensions.Configuration.ConfigurationRoot\r\n            -\u003e  00007FBB34029FF0 Microsoft.Extensions.Configuration.ConfigurationReloadToken\r\n            -\u003e  00007FBB3402A008 System.Threading.CancellationTokenSource\r\n            -\u003e  00007FBB3422C368 System.Threading.CancellationTokenSource+CallbackPartition[]\r\n            -\u003e  00007FBB3422C3C0 System.Threading.CancellationTokenSource+CallbackPartition\r\n            -\u003e  00007FBB3454AD40 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB34546E08 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB342335E8 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB34233570 Microsoft.Extensions.Primitives.ChangeToken+ChangeTokenRegistration`1[[System.String, System.Private.CoreLib]]\r\n            -\u003e  00007FBB342334E8 System.Action`1[[System.String, System.Private.CoreLib]]\r\n            -\u003e  00007FBB34233438 Microsoft.Extensions.Options.OptionsMonitor`1[[Microsoft.Extensions.Logging.LoggerFilterOptions, Microsoft.Extensions.Logging]]\r\n            -\u003e  00007FBB342330C8 Microsoft.Extensions.Options.OptionsFactory`1[[Microsoft.Extensions.Logging.LoggerFilterOptions, Microsoft.Extensions.Logging]]\r\n            -\u003e  00007FBB34232FD8 Microsoft.Extensions.Options.IConfigureOptions`1[[Microsoft.Extensions.Logging.LoggerFilterOptions, Microsoft.Extensions.Logging]][]\r\n            -\u003e  00007FBB34233008 Microsoft.Extensions.Logging.EventLogFiltersConfigureOptions\r\n            -\u003e  00007FBB3403D050 Microsoft.Extensions.Logging.EventSource.LoggingEventSource\r\n            -\u003e  00007FBB342B2BC8 System.Diagnostics.Tracing.EventDispatcher\r\n            -\u003e  00007FBB342647D8 App.Metrics.Extensions.Collectors.EventListeners.GcEventListener\r\n            -\u003e  00007FBB341FE680 App.Metrics.MetricsRoot\r\n            -\u003e  00007FBB341FE638 App.Metrics.Internal.DefaultMetrics\r\n            -\u003e  00007FBB341FE620 App.Metrics.Internal.DefaultMetricsManager\r\n            -\u003e  00007FBB341FC378 App.Metrics.Internal.DefaultMetricsRegistry\r\n            -\u003e  00007FBB341FC3B0 System.Collections.Concurrent.ConcurrentDictionary`2[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB341FC628 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB341FC518 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]][]\r\n            -\u003e  00007FBB3452C138 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB3452A860 App.Metrics.Internal.DefaultMetricContextRegistry\r\n            -\u003e  00007FBB3452A8D0 App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB3452A8E8 System.Collections.Concurrent.ConcurrentDictionary`2[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]]\r\n            -\u003e  00007FBB3452AB60 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]]\r\n            -\u003e  00007FBB3452AA50 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]][]\r\n            -\u003e  00007FBB34535328 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]]\r\n            -\u003e  00007FBB34535308 App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB34535268 App.Metrics.Apdex.DefaultApdexMetric\r\n            -\u003e  00007FBB3452C3A0 App.Metrics.Apdex.ApdexProvider\r\n            -\u003e  00007FBB3452C3E8 App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir\r\n            -\u003e  00007FBB34534C78 App.Metrics.Scheduling.DefaultReservoirRescaleScheduler\r\n            -\u003e  00007FBB34534DA8 App.Metrics.Internal.DefaultMetricsTaskSchedular\r\n            -\u003e  00007FBB34534E78 System.Threading.Timer\r\n            -\u003e  00007FBB34534EF0 System.Threading.TimerHolder\r\n            -\u003e  00007FBB34534E90 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3406B0F0 System.Threading.TimerQueue\r\n            -\u003e  00007FBB35643EA8 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3B2E2E08 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3B2D2AA0 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3B2C2738 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3450DC28 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB341D2120 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB347B9D10 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB39D3FAB8 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3934F990 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3934F8D0 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3450B410 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB39D41CB0 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB39D41C30 Microsoft.Extensions.Http.ActiveHandlerTrackingEntry\r\n            -\u003e  00007FBB34630870 System.Threading.TimerCallback\r\n            -\u003e  00007FBB3462FE20 Microsoft.Extensions.Http.DefaultHttpClientFactory\r\n            -\u003e  00007FBB342148E8 Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope\r\n            -\u003e  00007FBB3421FAF8 System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib]]\r\n            -\u003e  00007FBB342517D8 System.Object[]\r\n            -\u003e  00007FBB34236EB0 Microsoft.Extensions.Hosting.Internal.ConsoleLifetime\r\n            -\u003e  00007FBB34236258 Microsoft.Extensions.Hosting.Internal.ApplicationLifetime\r\n            -\u003e  00007FBB342362C8 System.Threading.CancellationTokenSource\r\n            -\u003e  00007FBB342374B8 System.Threading.CancellationTokenSource+CallbackPartition[]\r\n            -\u003e  00007FBB34237510 System.Threading.CancellationTokenSource+CallbackPartition\r\n            -\u003e  00007FBB34237548 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB34515CD0 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB342B5C08 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB342B5BC8 System.Action\r\n            -\u003e  00007FBB342B5B88 Presentation.Api.Startup+\u003c\u003ec__DisplayClass5_0\r\n            -\u003e  00007FBB342B32B8 Microsoft.AspNetCore.Builder.ApplicationBuilder\r\n            -\u003e  00007FBB342B3350 System.Collections.Generic.List`1[[System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]], System.Private.CoreLib]]\r\n            -\u003e  00007FBB343261E8 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]][]\r\n            -\u003e  00007FBB3431BA18 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]]\r\n            -\u003e  00007FBB3431B898 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_0\r\n            -\u003e  00007FBB3431B8E0 Microsoft.AspNetCore.Builder.ApplicationBuilder\r\n            -\u003e  00007FBB3431B900 System.Collections.Generic.List`1[[System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]], System.Private.CoreLib]]\r\n            -\u003e  00007FBB3431B9E0 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]][]\r\n            -\u003e  00007FBB34543E40 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]]\r\n            -\u003e  00007FBB34543E28 Microsoft.AspNetCore.Builder.RunExtensions+\u003c\u003ec__DisplayClass0_0\r\n            -\u003e  00007FBB34543DC0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345435E0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34543D80 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34543D48 App.Metrics.AspNetCore.Tracking.Middleware.ErrorRequestMeterMiddleware\r\n            -\u003e  00007FBB345435A0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34542DA0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34543560 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34543520 App.Metrics.AspNetCore.Tracking.Middleware.PostAndPutRequestSizeHistogramMiddleware\r\n            -\u003e  00007FBB34542D60 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34536420 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34542D20 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34536B78 App.Metrics.AspNetCore.Tracking.Middleware.RequestTimerMiddleware\r\n            -\u003e  00007FBB345363E0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34535C00 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB345363A0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34536360 App.Metrics.AspNetCore.Tracking.Middleware.PerRequestTimerMiddleware\r\n            -\u003e  00007FBB34535BC0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345353D8 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34535B80 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34535B38 App.Metrics.AspNetCore.Tracking.Middleware.OAuthTrackingMiddleware\r\n            -\u003e  00007FBB34535398 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34529EC0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34535358 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3452A610 App.Metrics.AspNetCore.Tracking.Middleware.ApdexMiddleware\r\n            -\u003e  00007FBB34529E80 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34529E68 Common.Helper.ASPNetCore.ExceptionMiddleware.GlobalExceptionMiddleware\r\n            -\u003e  00007FBB34529E28 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34529558 Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware\r\n            -\u003e  00007FBB34528380 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34527F10 Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware\r\n            -\u003e  00007FBB34526DD0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3451CB00 Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware\r\n            -\u003e  00007FBB3451B9D8 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3451A810 Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\r\n            -\u003e  00007FBB34519750 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34519650 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34519610 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345194E8 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB345194A8 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34518CB0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34518C70 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345181D0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34518190 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34518048 Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware\r\n            -\u003e  00007FBB34518088 Microsoft.AspNetCore.Routing.CompositeEndpointDataSource\r\n            -\u003e  00007FBB34518138 System.Collections.Generic.List`1[[Microsoft.AspNetCore.Routing.EndpointDataSource, Microsoft.AspNetCore.Routing]]\r\n            -\u003e  00007FBB34518158 Microsoft.AspNetCore.Routing.EndpointDataSource[]\r\n            -\u003e  00007FBB3438A780 Microsoft.AspNetCore.Mvc.Routing.ControllerActionEndpointDataSource\r\n            -\u003e  00007FBB34571DB8 System.Collections.Generic.List`1[[Microsoft.AspNetCore.Http.Endpoint, Microsoft.AspNetCore.Http.Abstractions]]\r\n            -\u003e  00007FBB34599D10 Microsoft.AspNetCore.Http.Endpoint[]\r\n            -\u003e  00007FBB34573008 Microsoft.AspNetCore.Routing.RouteEndpoint\r\n            -\u003e  00007FBB3438A6D0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3438A6B8 Microsoft.AspNetCore.Mvc.Routing.ActionEndpointFactory+\u003c\u003ec__DisplayClass7_0\r\n            -\u003e  00007FBB34608738 Microsoft.AspNetCore.Mvc.Infrastructure.ActionInvokerFactory\r\n            -\u003e  00007FBB346087A8 Microsoft.AspNetCore.Mvc.Abstractions.IActionInvokerProvider[]\r\n            -\u003e  00007FBB34606C50 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerProvider\r\n            -\u003e  00007FBB34606B70 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCache\r\n            -\u003e  00007FBB34608848 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCache+InnerCache\r\n            -\u003e  00007FBB34608868 System.Collections.Concurrent.ConcurrentDictionary`2[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]]\r\n            -\u003e  00007FBB35F2E8E8 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]]\r\n            -\u003e  00007FBB35F2DF10 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]][]\r\n            -\u003e  00007FBB35F2EC48 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]]\r\n            -\u003e  00007FBB3510EDB0 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry\r\n            -\u003e  00007FBB35104B78 Microsoft.Extensions.Internal.ObjectMethodExecutor\r\n            -\u003e  00007FBB3510DEF0 Microsoft.Extensions.Internal.ObjectMethodExecutor+MethodExecutorAsync\r\n            -\u003e  00007FBB3510DD58 System.Runtime.CompilerServices.Closure\r\n            -\u003e  00007FBB3510DD78 System.Object[]\r\n            -\u003e  00007FBB3510CCA8 System.Func`2[[System.Object, System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n\r\nFound 1 unique roots (run \u0027gcroot -all\u0027 to see all roots).\r\n``` \r\n\r\nwho can help me analyze  the cause of that the small object(about 40btye) not released in gen0.\r\nthanks in advanced!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMbf4Og==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYyMzQyOA==",
                                           "createdAt":  "2021-05-04T00:46:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-04T00:46:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMTYyODQzMQ==",
                                           "createdAt":  "2021-05-04T01:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ZhiqiangTao",
                                           "body":  "env:\r\n1. .net core 5.0 (5.0.200)\r\n2.  in k8s docker\r\n3. gc mode : workstation gc",
                                           "updatedAt":  "2021-05-04T01:04:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjAyMzUwNA==",
                                           "createdAt":  "2021-05-04T15:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nrecently, I meet an issue\r\n![image](https://user-images.githubusercontent.com/16182251/116949113-df469380-acb3-11eb-8868-95f273b6e7fd.png)\r\nas you can see, the gen2 is very large(about 120m) smaller than LOH, so I think there are many objects migrate from gen0 -\u003egen1-to gen2, then I use gcroot and gcwhere to inspect some objects , but i found that most of them are handled by below:\r\n```\r\n\u003e gcwhere **00007fbb3510cca8**\r\nAddress            Gen   Heap   segment            begin              allocated           size\r\n00007FBB3510CCA8   **2**     0     00007FBB33FFE000   00007FBB33FFF000   00007FBB3B5402D0    0x40(64)\r\n\u003e gcroot **00007fbb3510cca8**\r\nThread 1:\r\n    00007FFD1E9D5C30 00007FBC8BE3F1D0 System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken)\r\n        rbp-30: 00007ffd1e9d5c50\r\n            -\u003e  00007FBB3454B598 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions+\u003cRunAsync\u003ed__4, Microsoft.Extensions.Hosting.Abstractions]]\r\n            -\u003e  00007FBB342373F0 Microsoft.Extensions.Hosting.Internal.Host\r\n            -\u003e  00007FBB34236360 Microsoft.Extensions.Logging.Logger`1[[Microsoft.Extensions.Hosting.Internal.Host, Microsoft.Extensions.Hosting]]\r\n            -\u003e  00007FBB34236480 Microsoft.Extensions.Logging.Logger\r\n            -\u003e  00007FBB342364A8 Microsoft.Extensions.Logging.LoggerInformation[]\r\n            -\u003e  00007FBB34236548 Microsoft.Extensions.Logging.Console.ConsoleLogger\r\n            -\u003e  00007FBB342309D8 Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter\r\n            -\u003e  00007FBB34230BA8 Microsoft.Extensions.Options.OptionsMonitor`1+ChangeTrackerDisposable[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230810 Microsoft.Extensions.Options.OptionsMonitor`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230480 Microsoft.Extensions.Options.OptionsFactory`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230320 Microsoft.Extensions.Options.IConfigureOptions`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]][]\r\n            -\u003e  00007FBB34230340 Microsoft.Extensions.Logging.ConsoleLoggerFormatterConfigureOptions`2[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter, Microsoft.Extensions.Logging.Console],[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230398 System.Action`1[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230380 Microsoft.Extensions.Options.ConfigureFromConfigurationOptions`1+\u003c\u003ec__DisplayClass0_0[[Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions, Microsoft.Extensions.Logging.Console]]\r\n            -\u003e  00007FBB34230358 Microsoft.Extensions.Configuration.ConfigurationSection\r\n            -\u003e  00007FBB3422C1D8 Microsoft.Extensions.Configuration.ConfigurationRoot\r\n            -\u003e  00007FBB3422C140 System.Collections.Generic.List`1[[Microsoft.Extensions.Configuration.IConfigurationProvider, Microsoft.Extensions.Configuration.Abstractions]]\r\n            -\u003e  00007FBB3422C180 Microsoft.Extensions.Configuration.IConfigurationProvider[]\r\n            -\u003e  00007FBB3422C160 Microsoft.Extensions.Configuration.ChainedConfigurationProvider\r\n            -\u003e  00007FBB3422C078 Microsoft.Extensions.Configuration.ConfigurationSection\r\n            -\u003e  00007FBB34029FC8 Microsoft.Extensions.Configuration.ConfigurationRoot\r\n            -\u003e  00007FBB34029FF0 Microsoft.Extensions.Configuration.ConfigurationReloadToken\r\n            -\u003e  00007FBB3402A008 System.Threading.CancellationTokenSource\r\n            -\u003e  00007FBB3422C368 System.Threading.CancellationTokenSource+CallbackPartition[]\r\n            -\u003e  00007FBB3422C3C0 System.Threading.CancellationTokenSource+CallbackPartition\r\n            -\u003e  00007FBB3454AD40 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB34546E08 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB342335E8 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB34233570 Microsoft.Extensions.Primitives.ChangeToken+ChangeTokenRegistration`1[[System.String, System.Private.CoreLib]]\r\n            -\u003e  00007FBB342334E8 System.Action`1[[System.String, System.Private.CoreLib]]\r\n            -\u003e  00007FBB34233438 Microsoft.Extensions.Options.OptionsMonitor`1[[Microsoft.Extensions.Logging.LoggerFilterOptions, Microsoft.Extensions.Logging]]\r\n            -\u003e  00007FBB342330C8 Microsoft.Extensions.Options.OptionsFactory`1[[Microsoft.Extensions.Logging.LoggerFilterOptions, Microsoft.Extensions.Logging]]\r\n            -\u003e  00007FBB34232FD8 Microsoft.Extensions.Options.IConfigureOptions`1[[Microsoft.Extensions.Logging.LoggerFilterOptions, Microsoft.Extensions.Logging]][]\r\n            -\u003e  00007FBB34233008 Microsoft.Extensions.Logging.EventLogFiltersConfigureOptions\r\n            -\u003e  00007FBB3403D050 Microsoft.Extensions.Logging.EventSource.LoggingEventSource\r\n            -\u003e  00007FBB342B2BC8 System.Diagnostics.Tracing.EventDispatcher\r\n            -\u003e  00007FBB342647D8 App.Metrics.Extensions.Collectors.EventListeners.GcEventListener\r\n            -\u003e  00007FBB341FE680 App.Metrics.MetricsRoot\r\n            -\u003e  00007FBB341FE638 App.Metrics.Internal.DefaultMetrics\r\n            -\u003e  00007FBB341FE620 App.Metrics.Internal.DefaultMetricsManager\r\n            -\u003e  00007FBB341FC378 App.Metrics.Internal.DefaultMetricsRegistry\r\n            -\u003e  00007FBB341FC3B0 System.Collections.Concurrent.ConcurrentDictionary`2[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB341FC628 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB341FC518 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]][]\r\n            -\u003e  00007FBB3452C138 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Registry.IMetricContextRegistry, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB3452A860 App.Metrics.Internal.DefaultMetricContextRegistry\r\n            -\u003e  00007FBB3452A8D0 App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB3452A8E8 System.Collections.Concurrent.ConcurrentDictionary`2[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]]\r\n            -\u003e  00007FBB3452AB60 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]]\r\n            -\u003e  00007FBB3452AA50 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]][]\r\n            -\u003e  00007FBB34535328 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[System.String, System.Private.CoreLib],[App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]], App.Metrics.Core]]\r\n            -\u003e  00007FBB34535308 App.Metrics.Internal.DefaultMetricContextRegistry+MetricMetaCatalog`3+MetricMeta[[App.Metrics.Apdex.IApdex, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValueSource, App.Metrics.Abstractions],[App.Metrics.Apdex.ApdexValue, App.Metrics.Abstractions]]\r\n            -\u003e  00007FBB34535268 App.Metrics.Apdex.DefaultApdexMetric\r\n            -\u003e  00007FBB3452C3A0 App.Metrics.Apdex.ApdexProvider\r\n            -\u003e  00007FBB3452C3E8 App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir\r\n            -\u003e  00007FBB34534C78 App.Metrics.Scheduling.DefaultReservoirRescaleScheduler\r\n            -\u003e  00007FBB34534DA8 App.Metrics.Internal.DefaultMetricsTaskSchedular\r\n            -\u003e  00007FBB34534E78 System.Threading.Timer\r\n            -\u003e  00007FBB34534EF0 System.Threading.TimerHolder\r\n            -\u003e  00007FBB34534E90 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3406B0F0 System.Threading.TimerQueue\r\n            -\u003e  00007FBB35643EA8 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3B2E2E08 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3B2D2AA0 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3B2C2738 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3450DC28 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB341D2120 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB347B9D10 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB39D3FAB8 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3934F990 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3934F8D0 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB3450B410 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB39D41CB0 System.Threading.TimerQueueTimer\r\n            -\u003e  00007FBB39D41C30 Microsoft.Extensions.Http.ActiveHandlerTrackingEntry\r\n            -\u003e  00007FBB34630870 System.Threading.TimerCallback\r\n            -\u003e  00007FBB3462FE20 Microsoft.Extensions.Http.DefaultHttpClientFactory\r\n            -\u003e  00007FBB342148E8 Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope\r\n            -\u003e  00007FBB3421FAF8 System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib]]\r\n            -\u003e  00007FBB342517D8 System.Object[]\r\n            -\u003e  00007FBB34236EB0 Microsoft.Extensions.Hosting.Internal.ConsoleLifetime\r\n            -\u003e  00007FBB34236258 Microsoft.Extensions.Hosting.Internal.ApplicationLifetime\r\n            -\u003e  00007FBB342362C8 System.Threading.CancellationTokenSource\r\n            -\u003e  00007FBB342374B8 System.Threading.CancellationTokenSource+CallbackPartition[]\r\n            -\u003e  00007FBB34237510 System.Threading.CancellationTokenSource+CallbackPartition\r\n            -\u003e  00007FBB34237548 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB34515CD0 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB342B5C08 System.Threading.CancellationTokenSource+CallbackNode\r\n            -\u003e  00007FBB342B5BC8 System.Action\r\n            -\u003e  00007FBB342B5B88 Presentation.Api.Startup+\u003c\u003ec__DisplayClass5_0\r\n            -\u003e  00007FBB342B32B8 Microsoft.AspNetCore.Builder.ApplicationBuilder\r\n            -\u003e  00007FBB342B3350 System.Collections.Generic.List`1[[System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]], System.Private.CoreLib]]\r\n            -\u003e  00007FBB343261E8 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]][]\r\n            -\u003e  00007FBB3431BA18 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]]\r\n            -\u003e  00007FBB3431B898 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_0\r\n            -\u003e  00007FBB3431B8E0 Microsoft.AspNetCore.Builder.ApplicationBuilder\r\n            -\u003e  00007FBB3431B900 System.Collections.Generic.List`1[[System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]], System.Private.CoreLib]]\r\n            -\u003e  00007FBB3431B9E0 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]][]\r\n            -\u003e  00007FBB34543E40 System.Func`2[[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions],[Microsoft.AspNetCore.Http.RequestDelegate, Microsoft.AspNetCore.Http.Abstractions]]\r\n            -\u003e  00007FBB34543E28 Microsoft.AspNetCore.Builder.RunExtensions+\u003c\u003ec__DisplayClass0_0\r\n            -\u003e  00007FBB34543DC0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345435E0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34543D80 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34543D48 App.Metrics.AspNetCore.Tracking.Middleware.ErrorRequestMeterMiddleware\r\n            -\u003e  00007FBB345435A0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34542DA0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34543560 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34543520 App.Metrics.AspNetCore.Tracking.Middleware.PostAndPutRequestSizeHistogramMiddleware\r\n            -\u003e  00007FBB34542D60 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34536420 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34542D20 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34536B78 App.Metrics.AspNetCore.Tracking.Middleware.RequestTimerMiddleware\r\n            -\u003e  00007FBB345363E0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34535C00 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB345363A0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34536360 App.Metrics.AspNetCore.Tracking.Middleware.PerRequestTimerMiddleware\r\n            -\u003e  00007FBB34535BC0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345353D8 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34535B80 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34535B38 App.Metrics.AspNetCore.Tracking.Middleware.OAuthTrackingMiddleware\r\n            -\u003e  00007FBB34535398 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34529EC0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34535358 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3452A610 App.Metrics.AspNetCore.Tracking.Middleware.ApdexMiddleware\r\n            -\u003e  00007FBB34529E80 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34529E68 Common.Helper.ASPNetCore.ExceptionMiddleware.GlobalExceptionMiddleware\r\n            -\u003e  00007FBB34529E28 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34529558 Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware\r\n            -\u003e  00007FBB34528380 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34527F10 Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware\r\n            -\u003e  00007FBB34526DD0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3451CB00 Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware\r\n            -\u003e  00007FBB3451B9D8 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3451A810 Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\r\n            -\u003e  00007FBB34519750 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34519650 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34519610 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345194E8 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB345194A8 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34518CB0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34518C70 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB345181D0 Microsoft.AspNetCore.Builder.UseWhenExtensions+\u003c\u003ec__DisplayClass0_1\r\n            -\u003e  00007FBB34518190 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB34518048 Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware\r\n            -\u003e  00007FBB34518088 Microsoft.AspNetCore.Routing.CompositeEndpointDataSource\r\n            -\u003e  00007FBB34518138 System.Collections.Generic.List`1[[Microsoft.AspNetCore.Routing.EndpointDataSource, Microsoft.AspNetCore.Routing]]\r\n            -\u003e  00007FBB34518158 Microsoft.AspNetCore.Routing.EndpointDataSource[]\r\n            -\u003e  00007FBB3438A780 Microsoft.AspNetCore.Mvc.Routing.ControllerActionEndpointDataSource\r\n            -\u003e  00007FBB34571DB8 System.Collections.Generic.List`1[[Microsoft.AspNetCore.Http.Endpoint, Microsoft.AspNetCore.Http.Abstractions]]\r\n            -\u003e  00007FBB34599D10 Microsoft.AspNetCore.Http.Endpoint[]\r\n            -\u003e  00007FBB34573008 Microsoft.AspNetCore.Routing.RouteEndpoint\r\n            -\u003e  00007FBB3438A6D0 Microsoft.AspNetCore.Http.RequestDelegate\r\n            -\u003e  00007FBB3438A6B8 Microsoft.AspNetCore.Mvc.Routing.ActionEndpointFactory+\u003c\u003ec__DisplayClass7_0\r\n            -\u003e  00007FBB34608738 Microsoft.AspNetCore.Mvc.Infrastructure.ActionInvokerFactory\r\n            -\u003e  00007FBB346087A8 Microsoft.AspNetCore.Mvc.Abstractions.IActionInvokerProvider[]\r\n            -\u003e  00007FBB34606C50 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerProvider\r\n            -\u003e  00007FBB34606B70 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCache\r\n            -\u003e  00007FBB34608848 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCache+InnerCache\r\n            -\u003e  00007FBB34608868 System.Collections.Concurrent.ConcurrentDictionary`2[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]]\r\n            -\u003e  00007FBB35F2E8E8 System.Collections.Concurrent.ConcurrentDictionary`2+Tables[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]]\r\n            -\u003e  00007FBB35F2DF10 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]][]\r\n            -\u003e  00007FBB35F2EC48 System.Collections.Concurrent.ConcurrentDictionary`2+Node[[Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor, Microsoft.AspNetCore.Mvc.Abstractions],[Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry, Microsoft.AspNetCore.Mvc.Core]]\r\n            -\u003e  00007FBB3510EDB0 Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvokerCacheEntry\r\n            -\u003e  00007FBB35104B78 Microsoft.Extensions.Internal.ObjectMethodExecutor\r\n            -\u003e  00007FBB3510DEF0 Microsoft.Extensions.Internal.ObjectMethodExecutor+MethodExecutorAsync\r\n            -\u003e  00007FBB3510DD58 System.Runtime.CompilerServices.Closure\r\n            -\u003e  00007FBB3510DD78 System.Object[]\r\n            -\u003e  00007FBB3510CCA8 System.Func`2[[System.Object, System.Private.CoreLib],[System.Object, System.Private.CoreLib]]\r\n\r\nFound 1 unique roots (run \u0027gcroot -all\u0027 to see all roots).\r\n``` \r\n\r\nwho can help me analyze  the cause of that the small object(about 40btye) not released in gen0.\r\nthanks in advanced!\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eZhiqiangTao\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-04T15:17:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjA1MDUzMA==",
                                           "createdAt":  "2021-05-04T15:54:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "are all the objects of type `System.Func2[[System.Object, System.Private.CoreLib],[System.Object, System.Private.CoreLib]]`? Have you tried using `dumpheap` to check what all objects are alive? ",
                                           "updatedAt":  "2021-05-04T15:54:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjA1MzM1NQ==",
                                           "createdAt":  "2021-05-04T15:57:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sharwell",
                                           "body":  "I highly recommend PerfView for this analysis. It does a much better job than `!gcroot` at showing the shortest weighted path to root.",
                                           "updatedAt":  "2021-05-04T15:57:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzIyNTU0MA==",
                                           "createdAt":  "2021-05-06T05:01:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ZhiqiangTao",
                                           "body":  "reference to :https://github.com/dotnet/efcore/issues/24841",
                                           "updatedAt":  "2021-05-06T05:01:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDAxMjE2MQ==",
                                           "createdAt":  "2021-05-07T02:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "It\u0027s probably impossible for someone else to figure it out for you without the source code. The reference tree generated by those tools will contain mostly unrelated info and useful items needs to be digged out.\r\n\r\nSince there is a lot of Func, do you use lambda in your code? C# compiler is known to generate code that leads to potential memory leaks if you keep closures alive. Specifically, if you create 2 closures in a same block, they will usually hold unnecessary references to objects that are used only in each other\u0027s body. So if you keep one of them alive and something used in either one of them (or both) won\u0027t be collected.",
                                           "updatedAt":  "2021-05-07T02:26:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDAzMTYyMA==",
                                           "createdAt":  "2021-05-07T03:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The code here is part of MVC\u0027a code base. It\u0027s the cache that stores thunks for invoking action methods. ",
                                           "updatedAt":  "2021-05-07T03:18:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDAzNDc2MA==",
                                           "createdAt":  "2021-05-07T03:23:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ZhiqiangTao",
                                           "body":  "mycode sample just like below:\r\n![image](https://user-images.githubusercontent.com/16182251/117393456-c2fe5d00-af26-11eb-814a-f3760ed4d1f0.png)\r\n![image](https://user-images.githubusercontent.com/16182251/117393335-7fa3ee80-af26-11eb-9f9e-04b4d91bde2a.png)\r\n![image](https://user-images.githubusercontent.com/16182251/117393372-8e8aa100-af26-11eb-8024-256fa2b71ec2.png)\r\nany fault in there? Could you help me point out what\u0027s the problem  :)\r\n@davidfowl @acaly ",
                                           "updatedAt":  "2021-05-07T03:26:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDA4NDU1Mw==",
                                           "createdAt":  "2021-05-07T05:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m not sure the above has anything to do with your code. How many controller actions do you have?",
                                           "updatedAt":  "2021-05-07T05:46:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDE0MDIxOA==",
                                           "createdAt":  "2021-05-07T07:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "@ZhiqiangTao The second image shows a closure created capturing a variable. The other two don\u0027t create closure but the returned task will hold reference to the closure. To trigger the C# bug I mentioned, you need to:\r\n\r\n* Create 2 closures in a same block (the code you showed just creates one); and\r\n* Have something to hold one of the two closure permanently (the code you showed doesn\u0027t link anything to gcroot).\r\n\r\nThe first one you probably need to check every single methods of your project. For the second, MVC framework shouldn\u0027t be storing anything permanently if you follow the scoped service pattern. It may happen if you created something yourself or store something (e.g., a Task for an async method that captures a closure variable) to static fields.",
                                           "updatedAt":  "2021-05-07T07:39:32Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "help analyze a gcroot!",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53895",
        "createdAt":  "2021-06-08T20:48:52Z",
        "number":  53895,
        "author":  "Sergio0694",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5LmLQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2021-06-08T20:50:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Enderlook",
                                            "createdAt":  "2021-06-08T20:50:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahmed605",
                                            "createdAt":  "2021-06-08T22:56:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michael-hawker",
                                            "createdAt":  "2021-06-09T19:14:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2021-06-09T20:23:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antonfirsov",
                                            "createdAt":  "2021-07-03T16:33:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JimBobSquarePants",
                                            "createdAt":  "2021-07-04T22:43:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "br3aker",
                                            "createdAt":  "2021-07-09T14:14:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HurricanKai",
                                            "createdAt":  "2021-08-25T15:53:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2021-09-21T18:23:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lofcz",
                                            "createdAt":  "2021-10-18T12:16:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2021-10-29T08:24:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-10-29T14:55:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-10-29T14:55:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2022-06-12T19:20:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mpdreamz",
                                            "createdAt":  "2024-04-09T15:22:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timcassell",
                                            "createdAt":  "2024-07-07T17:47:12Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-03-10T18:20:35Z",
        "body":  "## Background and Motivation\r\n\r\nThere are a number of scenarios where library authors would like to perform some kind of cleanup/trimming of data structures or other objects, with the assumption that this operation should ideally run when there\u0027s enough memory pressure and as long as some target object is alive (typically the object that\u0027s being trimmed). An example of this is `TlsOverPerCoreLockedStacksArrayPool\u003cT\u003e` in the runtime, that leverages the internal `Gen2GcCallback` type to automatically execute trimming whenever a gen 2 GC collection occurs. Other library authors (myself included) have had the need to achieve something like this as well, for instance:\r\n\r\n- `WeakReferenceMessenger` in `Microsoft.Toolkit.Mvvm` ([link](https://github.com/windows-toolkit/WindowsCommunityToolkit/pull/4050))\r\n- `Ben.StringIntern` ([link](https://github.com/benaadams/Ben.StringIntern/blob/716cfbba5338ce070aafbeafbdd549395649f575/src/SharedInternPool.cs#L287))\r\n- Some other results from grep.app ([link](https://grep.app/search?q=Gen2GcCallback)), 17 in total as of now\r\n\r\nThe current approach relies on just copying the `Gen2GcCallback` type, but that has a number of issues:\r\n\r\n- For one, it\u0027s not a public API, so you have to copy-paste the whole class\r\n- It relies on finalization, which is inherently a bit wonky and with its own set of complications\r\n- It strictly ties the execution of the callback to gen 2 collections, which might not be the ideal solution\r\n\r\nThis proposal is for a proper, built-in API to register a callback to be executed when there\u0027s memory pressure. This means that the runtime/GC would also be free to decouple the execution from just strictly when a gen 2 collection occurs, leaving more space to possibly make decisions on how to execute the callback as well. It would also be easier to use for consumers, and more reliable (for instance, running arbitrary code from a finalizer is not really the best idea in the first place).\r\n\r\n## Proposed API\r\n\r\nThe API shape I had in mind was to essentially just expose the same features as `Gen2GcCallback`, but with a single API:\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public static class GC\r\n    {\r\n        public static void RegisterMemoryPressureCallback(Func\u003cobject?, bool\u003e callback, object? target);\r\n\r\n        // Or possibly (see comments below)\r\n        public static void RegisterMemoryPressureCallback(Func\u003cobject?, GCMemoryInfo, bool\u003e callback, object? target);\r\n    }\r\n}\r\n```\r\n\r\nThe state can either be `null`, or some instance. If it\u0027s an instance, then the GC will keep that reference as a weak reference (passing this instance to this API will **not** keep that state alive after the call to `RegisterMemoryPressureCallback`), and also automatically unregister the callback when the object is collected. Meaning that if you do pass a target instance, then the callback can assume that the input value will never be `null`. This would allow consumers to achieve the same as the two overloads for `Gen2GcCallback`: either just pass a `null` target and ignore the input state in the callback, which would just act as a static and stateless callback, or pass some target instance and then get it as input in the callback.\r\n\r\n\u003e **NOTE:** as per [this comment](https://github.com/dotnet/runtime/issues/53895#issuecomment-857947720) by @GrabYourPitchforks, the API is using the _Unsafe-_ prefix to indicate that it doesn\u0027t capture/flow the execution context. This isn\u0027t used by any of the existing use case scenarios for `Gen2GcCallback` mentioned above anyway, and consumers really needing the functionality could still just handle that manually anyway. \r\n\r\nThis API would be easy to use and it would support all the existing scenarios as with `Gen2GcCallback`.\r\n\r\n## Usage Examples\r\n\r\nSee any of the existing `Gen2GcCallback` usages linked above.\r\n\r\n## Alternative Designs\r\n\r\nHere\u0027s is an alternative proposal with an interface-based callback from @GrabYourPitchforks:\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public interface IMemoryPressureCallback\r\n    {\r\n        bool Invoke();\r\n    }\r\n\r\n    public static class GC\r\n    {\r\n        public static void RegisterMemoryPressureCallback(IMemoryPressureCallback callback, bool strongReference);\r\n    }\r\n}\r\n```\r\n\r\nQuoting from Levi:\r\n\r\n\u003e \"The reason for using an interface instead of a delegate here is that the delegate is a separate instance from the target object, and we don\u0027t want to risk the delegate being collected while the target is still alive, etc. Interfaces solve this problem.\"\r\n\r\nMy main issue with this design is that, quoting myself from our previous discussion:\r\n\r\n\u003e \"How would you use this on a public type if you don\u0027t want to make the fact it inherits from that interface visible to consumers? [...] if you then need that state object to hold a weak reference to your actual instance, then you\u0027d have to (somewhat unintuitively) use a weak reference to your instance to that state object, and instead make your state object a string reference in that API. That seems a bit clunky and not expressing that nice callback-object relationship in the API as easily.\"\r\n\r\n## Open questions\r\n\r\n- Should the `Unsafe` prefix be used for the API to indicate no execution state capturing? (Jan suggested no)\r\n- What should the behavior be in case the callback throws an exception?\r\n- Should the callback be considered as invalid and unregistered?\r\n- Should we expose the API with also a `GCMemoryInfo` param given that most consumers would likely need it?\r\n- If so, is `Func\u003cT1, T2, TResult\u003e` fine or would we want to declare a custom delegate (maybe nested withing the GC type)?\r\n\r\n## Risks\r\n\r\nNone that I can see. The API would also be in the `GC` type which is only ever used by more advanced users. Either of the proposed APIs would also be much more reliable and generally better than using `Gen2GcCallback` like is the case today. Additionally, not having arbitrary code being run from within the finalizer queue reduces the chance of possible other issues (eg. someone locking from there or something).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOOa54w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzEyODU3NQ==",
                                           "createdAt":  "2021-06-08T20:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-08T20:48:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzEzMTI2MQ==",
                                           "createdAt":  "2021-06-08T20:51:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAd3Jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-06-08T21:13:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-10-29T14:55:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "If we maintain a strong ref to the callback, its entire object graph remains alive. So the delegate model might not be as fragile as I\u0027d originally thought.",
                                           "updatedAt":  "2021-06-08T20:51:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzE0MDEzNA==",
                                           "createdAt":  "2021-06-08T20:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "@GrabYourPitchforks Yeah, my thinking was that consumers would have to ensure that the input delegate is either wrapping a static method, or a stateless lambda. I agree that that\u0027s potentially error prone, really my main concern with the interface-based pattern though is that it\u0027d make existing patterns with a target instance much more verbose and even more error prone in some cases, unless I\u0027m reading that wrong. From this last comment I think we might agree on this now then 😄\r\n\r\nFor reference (and for others reading), what I\u0027m saying is that, assuming the target instance is a public type that you don\u0027t want consumers to see the interface applied to, then things get very complicated and error prone with the interface-based callback.\r\nConsider `WeakReferenceMessenger` from the MVVM Toolkit, with either of the two proposed APIs.\r\n\r\n## Case 1 (function)\r\n\r\n```csharp\r\npublic sealed class WeakReferenceMessenger\r\n{\r\n    public WeakReferenceMessenger()\r\n    {\r\n        static void MemoryPressureCallback(object? target)\r\n        {\r\n            ((WeakReferenceMessenger)target).Cleanup();\r\n        }\r\n\r\n        GC.RegisterMemoryPressureCallback(MemoryPressureCallback, this);\r\n    }\r\n\r\n    private void Cleanup() { }\r\n}\r\n```\r\n\r\n## Case 2 (interface)\r\n\r\n```csharp\r\npublic sealed class WeakReferenceMessenger\r\n{\r\n    public WeakReferenceMessenger()\r\n    {\r\n        GC.RegisterMemoryPressureCallback(new CleanupCallback(this), true);\r\n    }\r\n\r\n    private sealed class CleanupCallback : IMemoryPressureCallback\r\n    {\r\n        private readonly WeakReference\u003cWeakReferenceMessenger\u003e target;\r\n\r\n        public CleanupCallback(WeakReferenceMessenger target)\r\n        {\r\n            this.target = new WeakReference\u003cWeakReferenceMessenger\u003e(target);\r\n        }\r\n\r\n        public bool Invoke()\r\n        {\r\n            if (target.TryGetTarget(out WeakReferenceMessenger? messenger))\r\n            {\r\n                messenger.Cleanup();\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private void Cleanup() { }\r\n}\r\n```\r\n\r\nThis seems way more verbose and actually more error prone to me, as consumers would have to remember to set the reference to be strong, because they\u0027d actually be referencing the callback wrapper and not the actual target instance. They\u0027d then also have to manually have a weak reference for the actual target, and then also check whether that\u0027s alive in the callback 🤔\r\n\r\nThe other API shape just seems overall much easier to use and with also less chances to get things wrong in general. Thoughts?",
                                           "updatedAt":  "2021-06-08T21:14:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzE1MjAwOQ==",
                                           "createdAt":  "2021-06-08T21:10:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Would supporting unregistering a callback make sense? The method could return an `IDisposable`.",
                                           "updatedAt":  "2021-06-08T21:10:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI1NjQzNg==",
                                           "createdAt":  "2021-06-08T23:25:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nThere are a number of scenarios where library authors would like to perform some kind of cleanup/trimming of data structures or other objects, with the assumption that this operation should ideally run when there\u0027s enough memory pressure and as long as some target object is alive (typically the object that\u0027s being trimmed). An example of this is `TlsOverPerCoreLockedStacksArrayPool\u003cT\u003e` in the runtime, that leverages the internal `Gen2GcCallback` type to automatically execute trimming whenever a gen 2 GC collection occurs. Other library authors (myself included) have had the need to achieve something like this as well, for instance:\r\n\r\n- `WeakReferenceMessenger` in `Microsoft.Toolkit.Mvvm` ([link](https://github.com/windows-toolkit/WindowsCommunityToolkit/pull/4050))\r\n- `Ben.StringIntern` ([link](https://github.com/benaadams/Ben.StringIntern/blob/716cfbba5338ce070aafbeafbdd549395649f575/src/SharedInternPool.cs#L287))\r\n- Some other results from grep.app ([link](https://grep.app/search?q=Gen2GcCallback)), 17 in total as of now\r\n\r\nThe current approach relies on just copying the `Gen2GcCallback` type, but that has a number of issues:\r\n\r\n- For one, it\u0027s not a public API, so you have to copy-paste the whole class\r\n- It relies on finalization, which is inherently a bit wonky and with its own set of complications\r\n- It strictly ties the execution of the callback to gen 2 collections, which might not be the ideal solution\r\n\r\nThis proposal is for a proper, built-in API to register a callback to be executed when there\u0027s memory pressure. This means that the runtime/GC would also be free to decouple the execution from just strictly when a gen 2 collection occurs, leaving more space to possibly make decisions on how to execute the callback as well. It would also be easier to use for consumers, and more reliable (for instance, running arbitrary code from a finalizer is not really the best idea in the first place).\r\n\r\n## Proposed API\r\n\r\nThe API shape I had in mind was to essentially just expose the same features as `Gen2GcCallback`, but with a single API:\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public static class GC\r\n    {\r\n        public static void RegisterMemoryPressureCallback(Func\u003cobject?, bool\u003e callback, object? target);\r\n    }\r\n}\r\n```\r\n\r\nThe state can either be `null`, or some instance. If it\u0027s an instance, then the GC will keep that reference as a weak reference (passing this instance to this API will **not** keep that state alive after the call to `RegisterMemoryPressureCallback`), and also automatically unregister the callback when the object is collected. Meaning that if you do pass a target instance, then the callback can assume that the input value will never be `null`. This would allow consumers to achieve the same as the two overloads for `Gen2GcCallback`: either just pass a `null` target and ignore the input state in the callback, which would just act as a static and stateless callback, or pass some target instance and then get it as input in the callback.\r\n\r\nThis API would be easy to use and it would support all the existing scenarios as with `Gen2GcCallback`.\r\n\r\n## Usage Examples\r\n\r\nSee any of the existing `Gen2GcCallback` usages linked above.\r\n\r\n## Alternative Designs\r\n\r\nHere\u0027s is an alternative proposal with an interface-based callback from @GrabYourPitchforks:\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public interface IMemoryPressureCallback\r\n    {\r\n        bool Invoke();\r\n    }\r\n\r\n    public static class GC\r\n    {\r\n        public static void RegisterMemoryPressureCallback(IMemoryPressureCallback callback, bool strongReference);\r\n    }\r\n}\r\n```\r\n\r\nQuoting from Levi:\r\n\r\n\u003e \"The reason for using an interface instead of a delegate here is that the delegate is a separate instance from the target object, and we don\u0027t want to risk the delegate being collected while the target is still alive, etc. Interfaces solve this problem.\"\r\n\r\nMy main issue with this design is that, quoting myself from our previous discussion:\r\n\r\n\u003e \"How would you use this on a public type if you don\u0027t want to make the fact it inherits from that interface visible to consumers? [...] if you then need that state object to hold a weak reference to your actual instance, then you\u0027d have to (somewhat unintuitively) use a weak reference to your instance to that state object, and instead make your state object a string reference in that API. That seems a bit clunky and not expressing that nice callback-object relationship in the API as easily.\"\r\n\r\n## Risks\r\n\r\nNone that I can see. The API would also be in the `GC` type which is only ever used by more advanced users. Either of the proposed APIs would also be much more reliable and generally better than using `Gen2GcCallback` like is the case today. Additionally, not having arbitrary code being run from within the finalizer queue reduces the chance of possible other issues (eg. someone locking from there or something).\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSergio0694\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-08T23:25:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI2NTQ4OQ==",
                                           "createdAt":  "2021-06-08T23:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "In case the assembly used to define the delegate is collectible (and meant to be collected), wouldn\u0027t this design prevents the assembly from being unloaded?",
                                           "updatedAt":  "2021-06-08T23:47:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI2NTY3MA==",
                                           "createdAt":  "2021-06-08T23:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Re: `IDisposable`, back in Full Framework ASPNET we had a similar concept and opted not to use `IDisposable`. The reason for this is that callers often have the mindset that they need to dispose of `IDisposable` objects when they\u0027re finished, and that they need to contort their code in order to track lifetimes and call this method deterministically.\r\n\r\nIn the case of ASPNET, we had a type `ISubscriptionToken` ([see interface definition and APIs which expose these instances](https://referencesource.microsoft.com/System.Web/R/9067a18bec539edd.html)) that we used in place of `IDisposable` for these scenarios. It was intended to convey \"you\u0027re free to unsubscribe from these notifications if you really need to, but really we expect you to be subscribed in perpetuity, so please simply discard this token if that describes your use case.\"",
                                           "updatedAt":  "2021-06-08T23:47:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI2NzA2OA==",
                                           "createdAt":  "2021-06-08T23:51:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "\u003e In case the assembly used to define the delegate is collectible (and meant to be collected), wouldn\u0027t this design prevents the assembly from being unloaded?\r\n\r\nThe delegate would be strongly held until the next memory pressure event, then it would be invoked. The delegate may choose to reregister itself by returning _true_. If it does not reregister itself, its becomes eligible for collection, which would presumably then allow the entire assembly to be unloaded.",
                                           "updatedAt":  "2021-06-08T23:51:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI2OTY4MQ==",
                                           "createdAt":  "2021-06-08T23:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Related to this, also if the delegate was stateful and targeting an object that\u0027s in that assembly as well, then it\u0027d simply be automatically removed on the next event. As in:\r\n- The target would be collected\r\n- The callback would be unregistered automatically\r\n- Then the delegate would be collected\r\n- Finally the whole assembly could be unloaded as well\r\n\r\nIf the delegate was instead not stateful then yeah you\u0027d just have to manually return `false` from the callback to unregister it and allow the delegate to be collected, like Levi said as well 🙂",
                                           "updatedAt":  "2021-06-08T23:57:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI3MzU5NA==",
                                           "createdAt":  "2021-06-09T00:06:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "If we\u0027re talking about callback models we probably also have to figure out ExecutionContext stuff, flow suppression, blah blah.",
                                           "updatedAt":  "2021-06-09T00:06:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzI3ODUxMw==",
                                           "createdAt":  "2021-06-09T00:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "I mean my thinking here was to open the proposal to start a discussion and get an area owner to have a look and comment on whether that\u0027d be something that would be reasonable to add at all, and if so then go through the various open questions and details to get the fancy `api-ready-to-review` label 😄\r\n\r\nBut sure going through some more details already sounds great! Can you elaborate a bit more on those points you raised? In general my idea for the API was that it wouldn\u0027t give you any guarantees on where the callback would be invoked. As in, the runtime would be free to invoke it from any arbitrary thread (not necessarily the one that registered it, and consecutive invocations of the same callbacks wouldn\u0027t give guarantees to use the same thread either) at some point in time where it considered memory pressure to be relevant (eg. before/after a gen 2 collection, or with whatever other heuristics) 🤔",
                                           "updatedAt":  "2021-06-09T00:18:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Nzk0NzcyMA==",
                                           "createdAt":  "2021-06-09T18:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBuGXKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-06-09T22:58:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Re: flowing context, normally when we capture a delegate for execution on a separate thread, we\u0027re expected to flow the ExecutionContext. This captures async locals, thread culture and identity, and a few other thread-ambient characteristics, and it restores those on the target thread before the delegate is invoked.\r\n\r\nThe pattern we use is that these sorts of methods capture the EC by default, and we have sibling _Unsafe\\*_-prefixed methods that don\u0027t capture the EC. If we wanted the behavior of this API to be that it never captures the EC, that\u0027s fine. We\u0027d likely have only the _Unsafe\\*_-prefixed method in that scenario. And if the caller really wants to capture the EC, they can do so manually.",
                                           "updatedAt":  "2021-06-09T18:24:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE1NDYwMw==",
                                           "createdAt":  "2021-06-09T22:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "As discussed on Discord as well, yeah that sounds totally reasonable to me, especially given that I would expect that to simplify the implementation and give the runtime more freedom to handle things internally however it needs to. Also, with respect to all those existing use case scenarios of `Gen2GcCallback` today, none of them is relying on flowing context, so I would say it\u0027s reasonable to assume that consumers of this API would generally not need/expect that either (and if that was the case they could just take care of that manually anyway). I\u0027ll go ahead and update the proposed API with this info 😄",
                                           "updatedAt":  "2021-06-09T22:57:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODE1NjYyOQ==",
                                           "createdAt":  "2021-06-09T23:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBuKd5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-06-10T09:39:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "For context, the reason the EC stuff matters here is that _as an implementation detail_ we may want to consider dispatching all of these callbacks via `ThreadPool.[Unsafe]QueueUserWorkItem` when GC pressure is seen. Otherwise we could end up with potentially long-running user code executing on the finalizer thread, which isn\u0027t ideal. But this implementation detail might force us to confront these threading behaviors sooner rather than later.",
                                           "updatedAt":  "2021-06-09T23:03:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODQ3NDk0NA==",
                                           "createdAt":  "2021-06-10T09:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "I see, yeah that makes perfect sense, thanks for the additional info!\r\nI\u0027ve updated the API proposal and added a note about the name with a link to your previous comment as well, for future reference. Guess now we just need to wait for an area owner to have a look to confirm whether the proposal is reasonable and that there aren\u0027t other missing open questions that need to be resolved, and then hopefully we can get this marked for review 😄",
                                           "updatedAt":  "2021-06-10T09:42:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nOb0",
                                           "createdAt":  "2021-07-19T16:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Was wondering whether @Maoni0 or someone from the GC team could share some thoughts on the proposal, now that planning for .NET 7 is starting again. Specifically, assuming the design @GrabYourPitchforks and I landed on looks reasonable, I was wondering whether the issue could be assigned the .NET 7 milestone so it could be looked at during internal planning, and/or it could get the \"api ready for review\" tag in case the proposal seemed acceptable as is. Or if that wasn\u0027t the case, if you could share some feedbacks on what to improve or change if needed, so we could iterate on it and work towards making it ready for review.\r\n\r\nThanks! 😄",
                                           "updatedAt":  "2021-07-19T16:45:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40npvj",
                                           "createdAt":  "2021-07-19T19:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e the API is using the Unsafe- prefix to indicate that it doesn\u0027t capture/flow the execution context.\r\n\r\nWe have number of similar low-level global callbacks that do not capture execution context. For example, AppDomain.UnhandledException or NativeLibrary.SetDllImportResolver. I do not think that it makes sense for this API to have `Unsafe` prefix.",
                                           "updatedAt":  "2021-07-19T19:43:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nrM7",
                                           "createdAt":  "2021-07-19T19:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e If it\u0027s an instance, then the GC will keep that reference as a weak reference (passing this instance to this API will not keep that state alive after the call to RegisterMemoryPressureCallback), and also automatically unregister the callback when the object is collected\r\n\r\nWe have used different pattern to solve the same problem in the recent PosixSignal APIs: https://github.com/dotnet/runtime/issues/50527#issuecomment-825858901 . Should we have some sort of consistency on how we are exposing callbacks like this?",
                                           "updatedAt":  "2021-07-19T19:53:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nrgF",
                                           "createdAt":  "2021-07-19T19:55:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Does the API need to communicate the severity of the Memory pressure and/or allow only registering for certain levels?\r\n\r\nAs is, the API would not really be sufficient replacement for what is done in ArrayPool: https://github.com/dotnet/runtime/blob/d4dcde13c969ad20deb20c99e91880de44aac9cd/src/libraries/System.Private.CoreLib/src/System/Buffers/Utilities.cs#L31",
                                           "updatedAt":  "2021-07-19T19:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nyJj",
                                           "createdAt":  "2021-07-19T20:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"We have number of similar low-level global callbacks that do not capture execution context.\"\r\n\r\nOh, right. I don\u0027t have a strong preference on either, especially given that the behavior would properly be documented in the API anyway and I think it\u0027d be reasonable to assume that developers using this API would take the time to read its docs first. I liked the `Unsafe` prefix mostly for consistency with other APIs with similar behavior like Levi mentioned (eg. `UnsafeQueueUserWorkItem`), but if we already don\u0027t have complete consistency due to those two examples you mentioned and if you feel like it\u0027d be better to drop the prefix here, I\u0027m happy to do so and update the proposal 😄\r\n\r\n\u003e \"We have used different pattern to solve the same problem in the recent PosixSignal APIs [...]. Should we have some sort of consistency on how we are exposing callbacks like this?\"\r\n\r\nSome reasons for the current proposal were, in no particular order:\r\n\r\n- Just adding an API to the existing `GC` class to keep things simpler (no new classes, and \"GC\" made sense).\r\n- Keep the same behavior as with `Gen2GcCallback`, where you just set it up once and forget about it. As in, you don\u0027t have a (disposable) instance representing the registration that you need to store anywhere and worry about.\r\n- By only taking the target instance as input and returning the cancellation, we wouldn\u0027t need a dedicated type for the context, which we\u0027d also have to decide where to define. Adding that to `System` didn\u0027t seem justified given the API being so niche, and putting it in a separate namespace would be weird given the API is still in `System.GC`. Maybe a nested type in `GC`? I guess I figured just using a `Func\u003cobject, bool\u003e` would be the simplest solution, though feedbacks are welcome on this. For example, do you think it would be better to have instead something like some `MemoryPressureCallbackContext` (made up name) class with a property for the target instance, and a `bool` property to re-register the callback or unregister it? Related question: in this scenario, I assume the extra allocations for this context class passed to each callback/invocation would be negligible? 🤔\r\n\r\n\u003e \"Does the API need to communicate the severity of the Memory pressure and/or allow only registering for certain levels?\"\r\n\r\nFor the current proposal, the goal was to offer a proper replacement for the `Gen2GcCallback` trick, so I assumed that eg. the `ArrayPool\u003cT\u003e` implementation could just replace that bit and keep the rest of the logic as is. Right now that memory pressure check is done after `Gen2GcCallback` triggers the callback, as in, the memory pressure logic isn\u0027t part of the callback invocation logic anyway. I do agree though that it would be nice to also offer some additional control to it, either in a separate overload or in the same API with possibly a default parameter. Question: would it be acceptable though to essentially fix some thresholds for the levels in the API itself? That is, suppose we exposed some `MemoryPressureLevel` enum and used that as a parameter for this API, then `ArrayPool\u003cT\u003e` would have to rely on whatever threshold would be used there as well in order to just use that. Would that be ok and not constitute a limitation to `ArrayPool\u003cT\u003e` possibly having to be tweaked in the future? Related: https://github.com/dotnet/runtime/issues/52098.",
                                           "updatedAt":  "2021-07-19T20:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40oACT",
                                           "createdAt":  "2021-07-19T22:23:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the whole GC team is still heads down with the .NET 6 work. but that shouldn\u0027t prevent you from having a discussion about this - it just means someone from the GC team will look at the discussion in the not too distant future.",
                                           "updatedAt":  "2021-07-19T22:23:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400i5H",
                                           "createdAt":  "2021-07-25T11:46:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Thank you for chiming in! And yeah I mostly just wanted to start a conversation again on this to get more feedbacks and eventually settle on a good API proposal for FXDC to review. Given that we cut it pretty close with `DependentHandle` in .NET 6 I figured it\u0027d be a good idea to bump this soon enough to have a chance for it to make it to .NET 7, especially as I\u0027m sure there will be a number of questions, concerns and implementation details to discuss here 😄\r\n\r\nJan raised some great points (unsurprisingly 🙂) so I\u0027m curious to hear back on that, and then I\u0027ll be looking forward for the GC team to also share some thoughts on this once work for .NET 6 on that end is done as well, as you mentioned. Thanks!",
                                           "updatedAt":  "2021-07-25T11:46:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uZcM",
                                           "createdAt":  "2021-08-18T19:00:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mqudsi",
                                           "body":  "\u003e  if you don\u0027t want to make the fact it inherits from that interface visible to consumers\r\n\r\nI\u0027m not sure this is actually a good reason. If this is about preventing code breakage (semantic versioning) should you wish to no longer implement GC pressure callbacks, you can still keep implementing the interface but never register with the GC. If it\u0027s about not wanting to expose the fact that your code does this at all, then I\u0027d have to ask why? If anything, it makes the behavior of the code more introspective (a developer wondering if it\u0027s a terrible idea to use your cache or whatever can see that it implements `IMemoryPressureCallback` and feel reassured) and if it\u0027s about worrying if someone other than the GC ends up calling the method, just implement it explicitly (`bool IMemoryPressureCallback.Invoke() { Foo(); }`) so the only way anyone can call it is if they explicitly call `((IMemoryPressureCallback)foo).Invoke()` and trust that there\u0027s probably a very good reason why they\u0027re doing so (it\u0027s arcane enough that I think it\u0027s a safe assumption).\r\n\r\n\u003e I liked the Unsafe prefix mostly for consistency with other APIs with similar behavior like Levi mentioned (eg. UnsafeQueueUserWorkItem),\r\n\r\nThis is borderline bikeshedding, but I saw that as mainly to distinguish the EC-free routine from the existing `.QueueUserWorkItem()` method, and to nudge anyone not knowing which of the two to use to just stick with the regular version. Personally, I don\u0027t like the `Unsafe` prefix in this context, since it doesn\u0027t really tell you anything (and since it\u0027s just a convention, there\u0027s no XmlDoc `\u003cunsafebecause\u003e....\u003c/unsafebecause\u003e` or what have you to quickly bring you up to speed on just why/how it\u0027s unsafe. (And to be more pedantic, they\u0027re not actually unsafe methods, they just behave differently from how you might - or might not - expect them to).\r\n\r\nOn `MemoryPressureLevel`: I think a callback with \"low\" \"medium\" \"high\" isn\u0027t a bad idea except that no one will really know what \"low\" or \"medium\" means and there\u0027s a concern would be that everyone might think their object is the most expensive object to re-allocate if/when needed; in effect, you might be inadvertently creating a *Game Theory* meets *Tragedy of the Commons* type of scenario. However, that ship\u0027s actually sailed since this proposed API will ship after `GC.GetMemoryInfo()` has been made public, so if you *don\u0027t* provide a `MemoryPressureLevel` parameter in the callback (or at registration time), then people will just end up calling `GC.GetMemoryInfo()` themselves, which might a) incur overhead if called by lots of registered instances, b) result in people mis-interpreting what percentage represents what kind of pressure.\r\n\r\nMaybe it would be best for the callback to look more like `bool InvokeOrWhatever(object target, GCMemoryInfo memoryInfo);`\r\nThat way, the default is \"there\u0027s (some) GC pressure, please free up memory now\" and hopefully that\u0027s what most external consumers would use. But if someone really knows what they are doing and, e.g. the standard library itself, knows (some of) their objects are used by pretty much everyone all the time, then the `GCMemoryInfo` instance can be queried to figure out how to act accordingly.\r\n\r\nThis would avoid a thundering herd responding to the GC pressure callback with their own calls to `GC.GetMemoryInfo()`, each [allocating a new instance](https://github.com/dotnet/runtime/blob/49c74eec151b84e96ac829bc10794a227c8c4733/src/coreclr/System.Private.CoreLib/src/System/GC.cs#L76) - instead, a snapshot of the `GCMemoryInfo` could be captured before invoking the callback on the registered instances, and they could all get a reference to the same readonly struct.",
                                           "updatedAt":  "2021-08-18T19:00:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41-VOs",
                                           "createdAt":  "2021-08-25T14:06:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"If this is about preventing code breakage (semantic versioning) should you wish to no longer implement GC pressure callbacks, you can still keep implementing the interface but never register with the GC. If it\u0027s about not wanting to expose the fact that your code does this at all, then I\u0027d have to ask why?\"\r\n\r\nThis would strictly be an internal implementation detail for types supporting this, so I really don\u0027t feel like this should leak through the public API surface. It\u0027s not so much about consumers being able to explicitly calling the cleanup method on their end (though that would also not necessarily be good), but more about this just looking like bad design to me. Not to mention as I said the fact that you\u0027d be somewhat limited if you wanted to later on change the way the type does cleanup, as you\u0027d then have to keep that dummy interface there to avoid breaking consumers using your type.\r\n\r\n\u003e \"Personally, I don\u0027t like the Unsafe prefix in this context, since it doesn\u0027t really tell you anything\"\r\n\r\nI mean, as I mentioned I mostly liked that suggestion due to the reason Levi mentioned, but I wouldn\u0027t really mind if we ditched the `Unsafe` prefix as Jan mentioned. If he thinks it\u0027s not necessary here, then sure, that\u0027s absolutely fine by me, let\u0027s do that 😄\r\n\r\n\u003e \"On MemoryPressureLevel: I think a callback with \"low\" \"medium\" \"high\" isn\u0027t a bad idea except that no one will really know what \"low\" or \"medium\" means [...] since this proposed API will ship after GC.GetMemoryInfo() has been made public, so if you don\u0027t provide a MemoryPressureLevel parameter in the callback (or at registration time), then people will just end up calling GC.GetMemoryInfo() themselves, which might a) incur overhead if called by lots of registered instances, b) result in people mis-interpreting what percentage represents what kind of pressure.\"\r\n\r\nI actually don\u0027t mind this idea, especially after seeing that other types we used as reference, such as [`TlsOverPerCoreLockedStacksArrayPool\u003cT\u003e`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs), do exactly the same anyway, which makes sense. For instance:\r\n\r\nhttps://github.com/dotnet/runtime/blob/d40fbf4d9df0f7b7bdf3f4c259674eddbd261eca/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L187-L190\r\n\r\nAs a strawman updated proposal, I guess we could have something like this:\r\n\r\n```csharp\r\nnamespace System\r\n{\r\n    public static class GC\r\n    {\r\n        public static void RegisterMemoryPressureCallback(Func\u003cobject?, GCMemoryInfo, bool\u003e callback, object? target);\r\n    }\r\n}\r\n```\r\n\r\nAt this point my concern though is that a `Func\u003c,,\u003e` like that might not be the most intuitive thing ever, so we might potentially want to define a special purpose delegate type in some location (eg. nested inside the `GC` class?).\r\n\r\nAnother open question: would the fact that all invoked delegates would get the same memory info be important? Eg. in case one target did some trimming and the GC run right before the next one, then that memory info would become stale. Would that be an issue, or would that be considered fine given that handlers would always be assumed to be invoked in a non-specific order?",
                                           "updatedAt":  "2021-08-25T14:06:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43GlPB",
                                           "createdAt":  "2021-09-21T23:58:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB73gRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-09-27T10:59:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "The ability to be notified of memory pressure would be useful in SqlClient to address https://github.com/dotnet/SqlClient/issues/1144 \r\n\r\nWe have a temp buffer which is held by TdsParserStateObject\u0027s that are pooled and long lived. Usually this buffer is small but in the presence of async operations is can grow very large and it is never released. Copying Gen2GCCallback into the project is feasible but gen2\u0027s happen reasonably often with SQL (unfortunately, working on improving that) and dropping all the temp buffers on a gen2 would probably give a perf degradation. Having a dedicated mechanism to signal that there was actual memory pressure rather than assuming that a gen2 indicated pressure would allow the pool to cleanup only in that case.",
                                           "updatedAt":  "2021-09-21T23:58:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ftLA",
                                           "createdAt":  "2021-09-30T08:47:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Hey @Maoni0 and @mangod9, wanted to touch base on this again and ask what should the next steps be to move this forward. It seems to me that this proposal would of course need evaluation from the GC team, but in order to do so it would likely help to have a finalized API shape for you to look at, which in turn can really only be reached by going through API review and discussing it (as well as whether there\u0027s merit to the proposal as a whole and whether it\u0027s worth doing at all). I was wondering whether we could mark this issue as `api-ready-for-review` so that it could go through a first round of API review now (especially because the current API review backlog is particularly empty, so it seems like a good time for that), and then pick this up from the feedbacks it\u0027ll receive there? Also not sure whether the GC team is still very busy with .NET 6 work, so if that\u0027s the case I guess going through API review first for this could help, since that\u0027s handled by a different team anyway? Thanks! 😊",
                                           "updatedAt":  "2021-09-30T08:47:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43lxK3",
                                           "createdAt":  "2021-10-02T00:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the callbacks will be executed on the finalizer thread anyway since GC doesn\u0027t have any dedicated threads to execute user code. \r\n\r\nthis would have very different expectations from Gen2GcCallback then since gen2 GCs can totally happen when there\u0027s very low memory pressure whereas this is for only there\u0027s at least some memory pressure.\r\n\r\nhow do you envision implementing a callback based on GCMemoryInfo? it would help to have a usage example for that. you don\u0027t know what other components are going to do, and GCMemoryInfo gives you the global view of the heap. is it not sufficient to simply classify memory pressure as high and medium so you can choose between dropping these objects whenever there\u0027s memory pressure and only dropping them in high memory pressure? I imagine high memory pressure would correspond to the high memory load threshold GC maintains and medium pressure is something like 2/3 of the high memory load.",
                                           "updatedAt":  "2021-10-02T00:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43m-O0",
                                           "createdAt":  "2021-10-03T14:30:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"the callbacks will be executed on the finalizer thread since GC doesn\u0027t have any dedicated threads to execute user code.\"\r\n\r\nWouldn\u0027t we be able to use a different thread to schedule callbacks with some help from the runtime? This was one of the main advantages of a dedicated API such as this, as mentioned by @GrabYourPitchforks above (https://github.com/dotnet/runtime/issues/53895#issuecomment-858156629):\r\n\r\n\u003e \"For context, the reason the EC stuff matters here is that as an implementation detail we may want to consider dispatching all of these callbacks via ThreadPool.[Unsafe]QueueUserWorkItem when GC pressure is seen. Otherwise we could end up with potentially long-running user code executing on the finalizer thread, which isn\u0027t ideal.\"\r\n\r\nI\u0027ll admit this is certainly my area of expertise, but is there any reason why wouldn\u0027t the GC be able to, say, indicate what callbacks to execute to the runtime, which could then retrieve them and schedule them on some thread pool thread? The GC itself would still not need to be aware of any threading details, it would just tell the runtimes what callbacks to invoke in some way 🤔\r\n\r\n\u003e \"this would have very different expectations from Gen2GcCallback then since gen2 GCs can totally happen when there\u0027s very low memory pressure whereas this is for only there\u0027s at least some memory pressure.\"\r\n\r\nThis would also be one of the main points of this API. Right now devs resort to that `Gen2GcCallback` trick as there isn\u0027t really another way to do this, but that could result in multiple unnecessary invocations as you mentioned, when the memory pressure is in fact very low anyway. With an API such as this instead the GC could actually just signal the runtime to invoke these callbacks when there\u0027s in fact some memory pressure, which might be less often than whenever a single gen 2 GC is invoked. This would potentially reduce a fair amount of overhead, as these callbacks would be called less often than they are today.\r\n\r\n\u003e \"how do you envision implementing a callback based on GCMemoryInfo? it would help to have a usage example for that.\"\r\n\r\nWell this is certainly something that can be discussed to settle on an API shape that works best for everyone 🙂\r\nFor instance, the default `ArrayPool\u003cT\u003e.Shared` instance (`TlsOverPerCoreLockedStacksArrayPool\u003cT\u003e`) queries the memory info:\r\n\r\nhttps://github.com/dotnet/runtime/blob/87b928ab37d2b1fa2b7aeec93a76190e23a0bf61/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L190\r\n\r\nSo one of the suggestions above was to potentially pass a `MemoryInfo` value to all callbacks so they wouldn\u0027t have to get it every single time (and they could just ignore it if not needed) and they could do their own checks to determine whether a cleanup was actually necessary on their end. The GC/runtime instead could just schedule these callbacks according to some heuristics they decided, which would be better than just the constant spamming at every single gen 2 collection we have today anyway. Or, we could allow callers to register a callback by specifying a memory pressure level at that point, but then again the exact/best API shape for this is something still up for discussion of course. The point of this issue was to at least start a discussion about a pattern that is somewhat common today, doesn\u0027t have a proper solution, isn\u0027t efficient, sufferers from a number of problems, and is something that would be great to address with a dedicated API 😄",
                                           "updatedAt":  "2021-10-03T14:30:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43m_8I",
                                           "createdAt":  "2021-10-03T15:08:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB8wIOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-10-03T20:32:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e allow callers to register a callback by specifying a memory pressure level at that point\r\n\r\nI think it is very hard for the callers in libraries to make intelligent decisions about the absolute memory pressure where they should start dropping their caches. I do not know how we would write futureproof prescriptive guidance for how libraries should deal with the memory pressure. The current hardcoded constants in ArrayPool were chosen in very arbitrary way. You can easily come up with scenarios where they work very poorly.\r\n\r\nIt may be better to move the logic that deals with the memory pressure thresholds into the runtime so that libraries do not have to worry about it. API that let\u0027s libraries to express something like this: I am currently caching 150MB. The CPU cost to recreate my cache is approximately 42_000_000 cycles. Hey runtime, let me know if you think I should drop some of my cache to relieve the memory pressure.",
                                           "updatedAt":  "2021-10-03T15:08:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43nFDy",
                                           "createdAt":  "2021-10-03T17:16:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mqudsi",
                                           "body":  "I think most people would have no clue what the cost of recreating the cache would be, and even if they had a rough estimate, they wouldn’t know how to scale it according to the current cache occupancy. \n\nThe solution doesn’t have to result in a theoretically optimal balance between freeing memory and avoiding dropping cache unnecessarily, it just has to be good enough. Anyway, code doesn’t know when it will next be called, so a cache could exist that is expensive to rebuild but will never (in the hot path anyway) again be invoked - better to err on the side of caution and drop the cache. \n\nAn easy solution is just to probabilistically call some of the registered callbacks each loop so long as memory pressure persists, and encourage callees to free memory unless they know how to interpret current GC pressure numbers accurately enough to make a decision to the contrary. ",
                                           "updatedAt":  "2021-10-03T17:16:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43qkYk",
                                           "createdAt":  "2021-10-04T22:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e I am currently caching 150MB. The CPU cost to recreate my cache is approximately 42_000_000 cycles.\r\n\r\n\u003e I think most people would have no clue what the cost of recreating the cache would be, and even if they had a rough estimate, they wouldn’t know how to scale it according to the current cache occupancy.\r\n\r\nright, it\u0027s not easy to say \"I\u0027m currently caching Xmb\" unless you are only catching flat objects.\r\n\r\n\u003e So one of the suggestions above was to potentially pass a MemoryInfo value to all callbacks so they wouldn\u0027t have to get it every single time\r\n\r\nI got that you didn\u0027t want to to call GetGCMemoryInfo every time. my question was what exactly are you using in GCMemoryInfo you get. I don\u0027t envision writing code that can actually cater to the detailed info you get with this - this gives you a global view and each callback has no idea about other callbacks which makes it questionable how much or if there\u0027s any value in providing GCMemoryInfo. there should be a good reason why we are exposing something in an API. this was why I asked for usage examples.\r\n\r\n\u003e An easy solution is just to probabilistically call some of the registered callbacks each loop so long as memory pressure persists,\r\n\r\nthe problem is most of things the callback would free up would be in gen2 and unless you do a gen2 GC, the memory pressure wouldn\u0027t change (without any external factors obviously, such as other processes suddenly use less memory or you freed up some native memory). so I suggested that you simply express how precious these items are - they fall into the category of either \"pretty previous so only get rid of them if you really need to\" or \"not that previous, feel free to get rid of them if you need to\". ",
                                           "updatedAt":  "2021-10-04T22:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43szNK",
                                           "createdAt":  "2021-10-05T15:00:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"I got that you didn\u0027t want to to call GetGCMemoryInfo every time. my question was what exactly are you using in GCMemoryInfo you get. I don\u0027t envision writing code that can actually cater to the detailed info you get with this - this gives you a global view and each callback has no idea about other callbacks which makes it questionable how much or if there\u0027s any value in providing GCMemoryInfo. there should be a good reason why we are exposing something in an API. this was why I asked for usage examples.\"\r\n\r\nApologies if I misinterpreted your previous question, I thought I had answered that point but I\u0027ve probably not phrased that properly, let me try again. In my [previous message](https://github.com/dotnet/runtime/issues/53895#issuecomment-932963252) I\u0027ve linked a snippet from [TlsOverPerCoreLockedStacksArrayPool\u003cT\u003e](https://github.com/dotnet/runtime/blob/87b928ab37d2b1fa2b7aeec93a76190e23a0bf61/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L190) in the BCL, which I think is a good example of code used in production that currently relies on querying the memory info from the GC to then apply some heuristics on what kind of work to do. I can agree that the memory info would be potentially \"stale\" if callbacks were called in a non deterministic order and all receiving the same memory info, but the thing is that that\u0027s basically the same situation we have today anyway with multiple bits of code all using `Gen2GcCallback`, each querying memory info, the GC calling all those callbacks sequentially (in some unspecified order) in its finalizer thread, and all those callbacks only seeing the \"initial\" memory info regardless of what the others are doing, as even if one or more callbacks removed the roots for some data they hold, that data wouldn\u0027t be collected during that same GC collection pass (unless I\u0027m mistaking here). The point I\u0027m trying to make is: given that there is existing code relying on this kind of callback + trim behavior (and that BCL snippet is one example, there\u0027s more), and that the current approach suffers from a number of problem, can we figure out a better way to support this going forwards, and especially without consumers outside of the BCL having to copy-paste that relatively obscure type to make this work? I\u0027d be perfectly happy to end up with a slightly different API shape as @jkotas suggested, if that is determined to be the best option that could still support all existing scenarios and provide a good migration path for existing developers 🙂",
                                           "updatedAt":  "2021-10-05T15:00:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43uXPh",
                                           "createdAt":  "2021-10-05T21:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e The point I\u0027m trying to make is: given that there is existing code relying on this kind of callback + trim behavior (and that BCL snippet is one example, there\u0027s more), and that the current approach suffers from a number of problem, can we figure out a better way to support this going forwards\r\n\r\nmy question is simply with this new API, whether we need the GCMemoryInfo passed in as an argument to the callback. the only info array pool uses is the memory pressure and as @jkotas mentioned, those memory pressure constants are fairly arbitrary (especially the 2 lower ones). my opinion is we don\u0027t need GCMemoryInfo and instead we make things simple by categorizing items as \"very precious\" and \"not that precious\" to perform callbacks on when there\u0027s high memory pressure and some memory pressure, and array pool would change to use this. but I\u0027m happy to hear counter examples where it would be useful to pass in GCMemoryInfo.\r\n\r\nin case this is not clear (which may be a source of confusion) - this is the sort of things we need to figure out _before_ we take the API to the API review. ",
                                           "updatedAt":  "2021-10-05T21:52:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ubAG",
                                           "createdAt":  "2021-10-05T22:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Ah I see, thanks for clarifying!\r\n\r\n\u003e \"my opinion is we don\u0027t need GCMemoryInfo and instead we make things simple by categorizing items as \"very precious\" and \"not that precious\" to perform callbacks on when there\u0027s high memory pressure and some memory pressure, and array pool would change to use this.\"\r\n\r\nThat sounds great to me, sure! I wasn\u0027t trying to necessarily argue for `MemoryInfo` to be passed to callbacks, and something like this makes perfect sense to me while also not having those drawbacks as you mentioned. Did you have any particular API shape in mind to express this (eg. some enum or something else)? 🙂\r\n\r\nAdditionally, just to double check as that bit got a bit buried above – having these callbacks be scheduled by the runtime onto a thread pool thread is something that would be doable then, right?",
                                           "updatedAt":  "2021-10-05T22:04:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ubPp",
                                           "createdAt":  "2021-10-05T22:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9GZbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-10-05T22:11:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I think it makes sense to have the callback use an argument that indicates the urgency of the need to release memory. Doing so hides the exact determination of those values as an implementation detail which can be system specific or change over time if needed. If a user really wants `MemoryInfo` in the callback they have an api to get it. \r\n\r\n\u003e having these callbacks be scheduled by the runtime onto a thread pool thread is something that would be doable then, right?\r\n\r\nI think that is how they should work, we don\u0027t want to hang up finalization with arbitrary user work beyond what is already possible. It feels much safer to put the callback on the threadpool.",
                                           "updatedAt":  "2021-10-05T22:08:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ugEG",
                                           "createdAt":  "2021-10-05T22:21:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9Gfkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2021-10-05T22:28:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cshung",
                                           "body":  "@Sergio0694, I am wondering if you are interested in starting to prototype this? I am really curious to see this in action with a real scenario where this proposal helps and see some numbers with the prototype. Implementing it can often lead to learning aspects that we don\u0027t know before and can potentially help with the design as well.",
                                           "updatedAt":  "2021-10-05T22:21:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ukPG",
                                           "createdAt":  "2021-10-05T22:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I agree that prototyping and measuring on caches in some real workloads would be very useful. \r\n\r\nFor example, I am worried that we may find that this design leads to bursts of poor performance when many caches get flushed at the same time and have to be recreated. This burst of poor performance is very minor today with ArrayPool since ArrayPool is relatively small cache, but it may become pretty significant once large number of caches is switched over to use this scheme.",
                                           "updatedAt":  "2021-10-05T22:35:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43vEf8",
                                           "createdAt":  "2021-10-05T23:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mqudsi",
                                           "body":  "\u003e For example, I am worried that we may find that this design leads to bursts of poor performance when many caches get flushed at the same time and have to be recreated. This burst of poor performance is very minor today with ArrayPool since ArrayPool is relatively small cache, but it may become pretty significant once large number of caches is switched over to use this scheme.\r\n\r\nHence my suggestion to consider probabilistically calling only some of the registered instances after (or before) each GC run under high memory pressure. Testing would tell us whether to call some fixed number (and what that number should be) per round or if it makes more sense to call a percentage of all registered instances. (Or if it\u0027s a bad idea and not worth pursuing.) The good thing is that it\u0027s an implementation detail and not part of the API.",
                                           "updatedAt":  "2021-10-05T23:41:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44UiDD",
                                           "createdAt":  "2021-10-16T12:12:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"I am wondering if you are interested in starting to prototype this? I am really curious to see this in action with a real scenario where this proposal helps and see some numbers with the prototype.\"\r\n\r\n@cshung I would\u0027ve normally loved to look into this, but between working on the Store and the .NET Community Toolkit I can\u0027t say I\u0027d be able to find the time for that unfortunately. Full disclosure, this is not really my area either (I\u0027ve never contributed to the GC before), so here I was mostly just trying to start a conversation, see whether there was interest, and then hoping someone from the GC/runtime team would\u0027ve liked to champion this and add it to the planning for .NET 7 to be able to work on it. If with your question you meant to say that you\u0027d like to prototype this in case I wasn\u0027t working on this already, by all means, go for it! 😄",
                                           "updatedAt":  "2021-10-16T12:12:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44UiQj",
                                           "createdAt":  "2021-10-16T12:20:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "I don\u0027t have a chance to catch up on the discussion here, just want to note that (although not super-critical), this feature would be valuable for ImageSharp too, replacing the `Gen2GcCallback` hack we are adding to the library in SixLabors/ImageSharp#1730.",
                                           "updatedAt":  "2021-10-16T12:20:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Ulk5",
                                           "createdAt":  "2021-10-16T14:09:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-lZ5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2021-10-16T18:50:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2021-10-16T18:50:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e SixLabors/ImageSharp#1730\r\n\r\nThanks for sharing the link to your use case. Here is what I gathered by reading the code. Used to trim unmanaged memory buffers. The trimming is triggered both via a timer and the Gen2Callback. The timer trigger seems to be the primary trimming mechanism. The Gen2Callback is only used as best effort backup in case there is a quick burst in memory consumption and the timer does not fire fast enough to react to it.\r\n\r\nI think an API that would properly support your use case would have to allow you to replace both the timer and the Gen2Callback. Timers that fire even when there is nothing happening are not a great design pattern in general purpose libraries. They drain battery in mobile apps.",
                                           "updatedAt":  "2021-10-16T14:09:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44VYPa",
                                           "createdAt":  "2021-10-17T13:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "@jkotas thanks for checking our use-case!\r\n\r\n\u003e The trimming is triggered both via a timer and the Gen2Callback. The timer trigger seems to be the primary trimming mechanism. The Gen2Callback is only used as best effort backup in case there is a quick burst in memory consumption and the timer does not fire fast enough to react to it.\r\n\r\nAll correct.\r\n\r\n\u003e I think an API that would properly support your use case would have to allow you to replace both the timer and the Gen2Callback.\r\n\r\nA callback that unifies the two cases would be great, however I wonder if it\u0027s possible to design a unified solution.\r\n\r\nThe timer is here to address the following issue:\r\nSome apps use the library intensely during a warmup period, and usage becomes less frequent later. The warmup phase may fill up the pools -- in some cases up to several hundreds of megabytes or more. After this period passes, memory ends up being retained by the pools for no reason. With low managed memory traffic Gen 2 GC will happen infrequently. I\u0027m not sure if relying only on Gen 2 GC, and retaining the memory longer would cause any issues, but to me it seems safer to free it up as fast as possible. One problematic case I can think of is if apps use unmanaged memory for other purposes.\r\n\r\nA bit off-topic for the callback discussion, but I need to place a side-note here:\r\nI would love to keep all pixel buffers managed, but unfortunately it seems impossible because [even slightest LOH fragmentation prevents GC from uncommitting very large free pages](https://github.com/SixLabors/ImageSharp/issues/1596#issuecomment-890963976).\r\n",
                                           "updatedAt":  "2021-10-17T13:52:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44VdAX",
                                           "createdAt":  "2021-10-17T15:46:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I wonder if it\u0027s possible to design a unified solution.\r\n\r\nI agree that designing good APIs in this space is hard. There is no good established pattern. But I still think it would be better to focus more on designing APIs that enable frugal cache management than trying to create a wrapper for \u003c100 lines of Gen2GcCallback hack that works ok in some situations, but far from ideal.",
                                           "updatedAt":  "2021-10-17T15:46:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44gj_2",
                                           "createdAt":  "2021-10-20T21:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAZPLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2021-10-21T09:17:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-10-29T05:59:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "I also use `Gen2GcCallback` in Paint.NET in order to have `SoftReference`, which I found nearby in the Roslyn codebase (IIRC). `SoftReference` is like `WeakReference` except it keeps the target alive until at least the next Gen2 collection.\r\n\r\nLike all large apps, Paint.NET needs to cache things in various parts of the code with various caching policies. Many of these caches are the typical `TKey` to `TValue` mapping, using a `Func\u003cTKey, TValue\u003e valueFactory` (or similar). The key is a struct, and the value is immutable but (potentially) expensive to create, or at the least there are benefits to caching (memory churn, GC pressure, object counts). Sometimes it\u0027s less about caching and more about consolidation so there aren\u0027t 5 or 50 or even 50,000 copies of the same thing in memory. It\u0027s also about not needing to orchestrate coordination between disparate parts of the codebase.\r\n\r\nOne of these caches, for instance, maps from a 32-bit BGRA color value to a 128x128 pixel bitmap (\"tile\") filled with just that color. These are used a lot in an imaging app and it\u0027s obviously highly beneficial to have e.g. 1 white tile rather than a _lot_ of unproductive duplicates. These should be kept in memory while they\u0027re still in use, shared amongst clients who all want the same thing, and evicted when no longer needed (or at least not needed again for \"awhile\"). Memory usage goes down, cache hits go up, GC spends less time on collections.\r\n\r\nIt\u0027s difficult to create a good eviction policy, and it often requires a lot of complicated data structures for LRU queues, keeping track of object ages, and background cleanup tasks. Determining thresholds for object counts and the amount of time between cleanups is mostly guesswork, and you can never really be sure you\u0027ve got appropriate values (esp. since they should probably be different on e.g. a Ryzen 5950X vs. an old Celeron laptop from 8 years ago). Background tasks are usually of the \"sweep the weak reference array of `null` targets\" and/or \"demote strong refs to weak refs\", whose runtime performance increases with respect to the number of keys, not the number of values to evict. Reference counting of these shared objects would be error prone, and handle objects (basically a `SafeAddRef`) also add to object counts and GC pressure.\r\n\r\nThe thing is, we already have something that does a pretty good job of \"background cleanup tasks\" and \"evicting objects\" when they\u0027re no longer needed: the garbage collector! However, using `WeakReference` can\u0027t always help much, often because the objects are rented out, used quickly, and immediately returned (e.g. solid color brushes in GDI+ or Direct2D rendering code, or bitmaps that hold UI icons). Gen0 collections would be constantly nuking the objects that need caching. `SoftReference` allows eviction to happen just enough later such that over-retention isn\u0027t an issue, running out of memory due to under-eviction isn\u0027t really an issue, and caching for short-term leasing is reasonable and profitable. You don\u0027t have the complexity explosion and bug farm that comes with reference counting, nor the object count explosion from handle objects.\r\n\r\n`SoftReference` in Paint.NET shipped with version 4.3 of the app, released about a month ago, which is the first version that runs on .NET 5.",
                                           "updatedAt":  "2021-10-20T21:46:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc444Wnz",
                                           "createdAt":  "2021-10-28T23:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAdiIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2021-10-28T23:57:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2021-10-29T05:34:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-10-29T05:58:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-10-29T08:31:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2021-10-29T10:52:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-10-29T14:25:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "cshung",
                                           "body":  "@Sergio0694, @Wraith2, @antonfirsov, @rickbrew and others who might be interested. I have a [prototype branch](https://github.com/cshung/runtime/tree/private/low-memory-callback) that should work and would like validation from your scenarios! Check out the [documentation](https://github.com/cshung/runtime/blob/private/low-memory-callback/LowMemoryCallback.md) as well to get started.",
                                           "updatedAt":  "2021-10-28T23:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4449vX",
                                           "createdAt":  "2021-10-29T06:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "\u003e @Sergio0694, @Wraith2, @antonfirsov, @rickbrew and others who might be interested. I have a [prototype branch](https://github.com/cshung/runtime/tree/private/low-memory-callback) that should work and would like validation from your scenarios! Check out the [documentation](https://github.com/cshung/runtime/blob/private/low-memory-callback/LowMemoryCallback.md) as well to get started.\r\n\r\nWill it trigger multiple times once 1 callback is registered every time it needs to do a Gen2 GC.\r\n\r\nAlso what if most of the memory is inside of a static MemoryCache variable? Can we use that callback to then force that cache to be cleared then since I think the GC ignores static memory?\r\n\r\nI also run into this problem where I basically memory cache some discord event information in order to reduce the usage of api requests (to avoid getting temp api banned on their end by hitting 10k ratelimited requests in under 10 minutes) so having an api like this where the memory cache does not get cleared too early or never clears at all will help me as well. Especially in cases where I might have duplicates of the same object that updated and only want to keep only the newest items of a specific type of data returned from Discord for specific users, roles, channels, servers, etc.",
                                           "updatedAt":  "2021-10-29T06:13:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc444-jL",
                                           "createdAt":  "2021-10-29T06:17:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Will it triggers multiple times once 1 callback is registered every time it needs to do a Gen2 GC.\r\n\r\nRight now, the same callback will be called multiple times when the GC believes we are running low on memory. There are other cases that a blocking gen 2 GC may happen (e.g. user is calling `GC.Collect`) and the callback will not be executed in that case.\r\n\r\n\u003e Also what if most of the memory is inside of a static MemoryCache variable? Can we use that callback to then force that cache to be cleared then since I think the GC ignores static memory?\r\n\r\nWhen you say `static`, do you mean C# static like this?\r\n\r\n```c#\r\npublic class MemoryCache\r\n{\r\n  public static byte[] data = new byte[10000];\r\n}\r\n```\r\n\r\nAssuming this is the only reference to the byte array, setting it to null will should let the GC collects it in the next collection.\r\n```c#\r\npublic void Callback() {\r\n   MemoryCache.data = null;\r\n}\r\n```",
                                           "updatedAt":  "2021-10-29T06:17:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc444-uF",
                                           "createdAt":  "2021-10-29T06:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Yes I mean that the variable / property that holds the data is a C# static. However they are not always nullable in my codebase (some of them are list based) and as such I have to then calculate which items in the list I need to evict in said list like collection (perhaps I could make each item have an embedded timestamp of when it was added to it and then compare similar items with that timestamp to keep only the newest one and collect the older ones).",
                                           "updatedAt":  "2021-10-29T06:21:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc445BOk",
                                           "createdAt":  "2021-10-29T06:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Yes I mean that the variable / property that holds the data is a C# static. However they are not always nullable in my codebase (some of them are list based) and as such I have to then calculate which items in the list I need to evict in said list like collection (perhaps I could make each item have an embedded timestamp of when it was added to it and then compare similar items with that timestamp to keep only the newest one and collect the older ones).\r\n\r\nMy prototype is only capable to give a callback, what does the callback do the relieve the memory pressure is flexible and you can do whatever makes sense for your application. Your idea to eliminate entries that are least recently used seems very reasonable to me.",
                                           "updatedAt":  "2021-10-29T06:42:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc445rnj",
                                           "createdAt":  "2021-10-29T10:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Hey @cshung, this is awesome! Thank you for putting together an initial prototype 😄\r\n\r\nI\u0027ll see if I have time to actually test this in one of my scenarios soon, had a few feedbacks in the meantime.\r\n\r\n\u003e \"Currently it only support one callback. Instead of maintaining a list of callback in the native runtime, I am thinking about letting the managed code to do it.\"\r\n\r\nI think we absolutely need support for multiple callbacks for this to be a viable API to actually support, yes. Storing the callback(s) in managed code makes sense to me, especially considering the idea was to stop using the finalizer thread to run the callbacks, and use something like `ThreadPool.UnsafeQueueUserWorkItem` instead. Given all the `ThreadPool` infrastructure is in managed code, makes sense to me to also keep the list/collection of registered callbacks in managed code as well? 🤔\r\n\r\nRegarding the \"who keeps the callback alive?\" point and the originally proposed signature, do we all agree on how should the various registered components be conceptually linked together? My assumption was to have something like this:\r\n\r\n- The target object is stored as a weak GC handle\r\n- The callback is stored as a dependent handle from the target object to the callback\r\n- The callback would be an `Action\u003cobject\u003e` to avoid capturing the target object. It could be a delegate wrapping a static method (or, the instance method of a statically cached delegate by Roslyn, that\u0027s fine), but the point is it wouldn\u0027t be eg. a lambda capturing the target as well in its closure. This also mirrors the setup people use today with `Gen2GcCallback`.\r\n\r\nThis should make it so that:\r\n\r\n- The target would always be free to be collected\r\n- The callback would always remain alive automatically as long as the target is alive\r\n\r\nThoughts on this? Curious to hear if there\u0027s any other approaches any of you had in mind for this 🙂",
                                           "updatedAt":  "2021-10-29T10:49:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc446NO4",
                                           "createdAt":  "2021-10-29T14:18:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "\u003e- The callback is stored as a dependent handle from the target object to the callback\r\n\r\nI was just going to suggest that. I recently solved something similar in Paint.NET: a static event registrar, where I store a `WeakReference` to the callback, and then I use `ConditionalWeakTable` to staple `callback` to `callback.Target`. This avoids pinning the callback and the target; the rest of the system (the app, that is) can keep the target alive as normal.",
                                           "updatedAt":  "2021-10-29T14:18:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc446TXH",
                                           "createdAt":  "2021-10-29T14:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e  I have a prototype branch that should work and would like validation from your scenarios!\r\n\r\nThis callback would not be sufficient for ArrayPool. ArrayPool would keep using `Gen2GcCallback` directly if API like this was introduced.",
                                           "updatedAt":  "2021-10-29T14:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4461PU",
                                           "createdAt":  "2021-10-29T18:10:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e \u003e I have a prototype branch that should work and would like validation from your scenarios!\r\n\u003e \r\n\u003e This callback would not be sufficient for ArrayPool. ArrayPool would keep using `Gen2GcCallback` directly if API like this was introduced.\r\n\r\nWould you mind elaborating on what is missing?",
                                           "updatedAt":  "2021-10-29T18:10:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4464dj",
                                           "createdAt":  "2021-10-29T18:27:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "ArrayPool trimming is triggered by more than just low memory pressure.",
                                           "updatedAt":  "2021-10-29T18:27:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4465_B",
                                           "createdAt":  "2021-10-29T18:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e I think we absolutely need support for multiple callbacks for this to be a viable API to actually support, yes.\r\n\r\nI am thinking about this flow of events:\r\n\r\n1. User calls `GC.RegisterMemoryPressureCallback`.\r\n2. If this is the first call to this function, register a static method defined in the `GC` to the native runtime.\r\n3. Store the user-provided delegate (and target object?) in some data structure managed by the `GC` class that satisfies the liveness constraints.\r\n4. When the callback happens, iterate through the user-provided delegates, and dispatch them to ThreadPool for execution.\r\n\r\nRight now I have only done 1 and 2. 3 and 4 are outside of my regular development work and would take significant time for me to complete. I was hoping that either the community can help me with that, or we could experiment with the prototype and get the feedback we needed without that. This will probably lead to a much faster iteration time than I completed them all but it doesn\u0027t solve the problem.\r\n\r\nJust to re-iterate, this is meant to be a prototype. Of course, I agree we will need multiple callbacks when we eventually release the feature if we decide to.",
                                           "updatedAt":  "2021-10-29T18:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4469Z0",
                                           "createdAt":  "2021-10-29T19:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e ArrayPool trimming is triggered by more than just low memory pressure.\r\n\r\nGot it, it probably doesn\u0027t make sense to trim only when we run out of memory. \r\n\r\nThis API wasn\u0027t intended to be the only signal for trimming ArrayPool. It is intended to be a `Gen2GcCallback` replacement, in the sense that it solves the issues mentioned in the initial comment.",
                                           "updatedAt":  "2021-10-29T19:02:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447AmZ",
                                           "createdAt":  "2021-10-29T19:22:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "@cshung Love the enthusiasm and I\u0027m really glad to see some traction on this proposal! I\u0027d be happy to help out with 3) and 4) given those points would primarily only touch the managed runtime 😊\r\n\r\nOn this note: if we need another medium to have a quicker back and forth as we work on this, you\u0027d be welcome in the `#lowlevel` channel in the C# Discord server. Tanner and Levi are there as well so we\u0027d have other folks from the .NET libs teams to brainstorm ideas with too 😄",
                                           "updatedAt":  "2021-10-29T19:22:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447A1k",
                                           "createdAt":  "2021-10-29T19:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Which components that the initial comment talks about would be able to replace `Gen2GcCallback` with this API? I have looked at  `TlsOverPerCoreLockedStacksArrayPool`, `WeakReferenceMessenger`, `Ben.StringIntern`. I do not think any of these would be able to replace `Gen2GcCallback` with this API. All of them  trim on more than just memory pressure.",
                                           "updatedAt":  "2021-10-29T19:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447RMH",
                                           "createdAt":  "2021-10-29T21:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Which components that the initial comment talks about would be able to replace `Gen2GcCallback` with this API? I have looked at `TlsOverPerCoreLockedStacksArrayPool`, `WeakReferenceMessenger`, `Ben.StringIntern`. I do not think any of these would be able to replace `Gen2GcCallback` with this API. All of them trim on more than just memory pressure.\r\n\r\nI am not sure I understand, if I replace line 292 here\r\n\r\nhttps://github.com/dotnet/runtime/blob/f53c8dcd130e7591079e9475fb0a3a22c3f21adc/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L292\r\n\r\nWith the `GC.RegisterMemoryPressureCallback(...)` \r\n\r\nThen I miss some events that would have called `Trim()` that it wasn\u0027t calling before? Do you mean some other reasons that we did a gen 2 GC but not caused by high memory pressure? Or something else? ",
                                           "updatedAt":  "2021-10-29T21:33:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447Vfw",
                                           "createdAt":  "2021-10-29T22:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Do you mean some other reasons that we did a gen 2 GC but not caused by high memory pressure?\r\n\r\nCorrect.\r\n\r\n`TlsOverPerCoreLockedStacksArrayPool` does time-based trimming. It will trim items that have not been used for a while even if there is no memory pressure at all (look for `MillisecondsTimeStamp`). Gen2 GCs are just used as a convenient trigger for this bookkeeping process.\r\n\r\nSimilarly, `Ben.StringIntern` does LRU style trimming, even if there is no memory pressure at all.",
                                           "updatedAt":  "2021-10-29T22:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447g2g",
                                           "createdAt":  "2021-10-30T01:49:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"`TlsOverPerCoreLockedStacksArrayPool` does time-based trimming. It will trim items that have not been used for a while even if there is no memory pressure at all (look for MillisecondsTimeStamp). Gen2 GCs are just used as a convenient trigger for this bookkeeping process.\"\r\n\r\nI have a couple questions on this:\r\n- Even if that type also uses time-based trimming, isn\u0027t that separate than the `Gen2GcCallback` trimming? As in, even if this proposed API couldn\u0027t relate both, wouldn\u0027t it still be better as a replacement for `Gen2GcCallback` on its own?\r\n- You mentioned time-based trimming isn\u0027t ideal in general due to power consumption even when the app is idle, eg. on mobile devices. How would you personally imagine a viable API that could replace both those solutions in `TlsOverPerCoreLockedStacksArrayPool` being structured? Would you imagine it\u0027d be the same as this but implemented differently, or would it be a separate API with some other characteristics?",
                                           "updatedAt":  "2021-10-30T01:49:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447mvz",
                                           "createdAt":  "2021-10-30T05:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAm5wg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2021-10-30T06:20:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-10-30T12:12:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2021-10-30T16:00:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-01T05:30:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Even if that type also uses time-based trimming, isn\u0027t that separate than the Gen2GcCallback trimming? \r\n\r\nHere is how ArrayPool trimming works today: Every once in a while, the array pool goes through all pooled items and trims the one that has not been used for some time. The aggressiveness of the trimming is controlled by memory pressure. The Gen2 GCs are used as a convenient approximation for \"every once in a while\". It is based on a simplifying assumption that ArrayPool usage is likely corelated with regular allocations in typical app.\r\n\r\nIf this API is implemented as a callback triggered by a small subset of Gen2 GCs, it is not going to better than `Gen2GcCallback` nor be able to replace `Gen2GcCallback`.\r\n\r\n\u003e How would you personally imagine a viable API that could replace both those solutions\r\n\r\nGood question. Here are my thoughts:\r\n\r\nThe cache management is a policy heavy problem. There is no one universal good policy.\r\n\r\nFor example, consider an app that handles bursty traffic. Good P99 latency is the most important metric of this app.. The app author deploys it on a dedicated VM with a plenty of memory. The cache trimming is counterproductive for an app like that. Cache trimming is just going to make P99 latency worse, without improving any metric that matters.\r\n\r\nOn the other hand, consider a desktop app that is meant to be in the background most of the time, and only occasionally in the foreground. It is desirable for the caches to be trimmed while the app is in the background, so that it does not consume memory unnecessarily. Nobody likes to see apps running in the background to consume GBs of memory.\r\n\r\nWe have been reactively introducing settings that allow developers to tweak policies of various caches in the system. [RetainVM](https://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#retain-vm) settings or [RegEx.CacheSize](https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.cachesize) API are examples of such settings. However, most caches (including arraypool) have hardcoded non-configurable policies.\r\n\r\nIt is not unusual to see appmodels to try to trim memory based on interesting events. For example, Windows Phone or UWP apps triggered GC before getting suspended, to minimize working set of the suspended process. High-density freemium web hosting plays similar tricks sometimes.\r\n\r\nI think the set of APIs for cache management should:\r\n- Allow app developers to control and configure the system-wide policy.\r\n- Allow app models to participate in the policy.\r\n- Allow libraries with caches to carry out the policy.\r\n- Default policy is pay-for-play (consumes CPU cycles only when the rest of the system is active)\r\n\r\nAlso, I think that it is important to be able to arbitrage effectively between different unrelated caches somehow. There are caches with items that do not occupy too much memory and take a lot of time to recreate (e.g. RegEx cache); on the other end, there are caches that occupy a lot of memory and take little time to recreate (e.g. ArrayPool). The system should ensure that the caches that are cheap to recreate are trimmed first and more aggressively. I have mentioned this issue above, but it did not seem to resonate. We can ignore this point for now.",
                                           "updatedAt":  "2021-10-30T05:05:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc447y-e",
                                           "createdAt":  "2021-10-30T12:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "I do feel like we\u0027re moving a bit away from what the original proposal was, which is to offer a built-in replacement for `Gen2GcCallback` that didn\u0027t suffer from the drawbacks that that approach has (having to copy-paste the code, having cleanup code run on the finalizer thread, etc.), but I do agree that if we are to expose a public API, adding a \"better one\" that can actually address this issue in general makes sense. Since we\u0027re brainstorming ideas, here\u0027s a very rough draft following Jan\u0027s comments. **NOTE:** I don\u0027t mean this to be a perfectly refined proposal, I\u0027m mostly just curious to know whether something like this is something that\u0027s moving towards the direction you think is the correct one for this 😄\r\n\r\nConsider something like this:\r\n\r\n```csharp\r\nenum GcCallbackPolicy\r\n{\r\n    // Basically \"whenever Gen2GcCallback gets called today\"\r\n    Periodic,\r\n\r\n    // Only when there\u0027s actually memory pressure\r\n    MemoryPressureOnly\r\n}\r\n\r\nstatic void RegisterGcCallback(Func\u003cobject?, bool\u003e callback, object? target, GcCallbackPolicy policy);\r\n```\r\n\r\nNow, the idea for this API shape is this:\r\n\r\n- The `GcCallbackPolicy` enum would allow library authors to indicate the \"default policy\" for their scenarios, without having to try to estimate the actual memory usage of their cache, which Jan said would likely be very difficult to do and likely not optimal. With this option, for instance, a type like `ArrayPool\u003cT\u003e` would use \"Periodic\" (to keep having the callback invoked more often just like it does today with `Gen2GcCallback`), whereas eg. a type like `WeakReferenceMessenger` could use \"MemoryPressureOnly\" given the cached data structures are lightweight and it\u0027s not a big deal to keep them alive until there\u0027s high memory pressure, and the overhead of having repeated callback invocations more often is not worth it.\r\n- The system could then override these registered policies when needed. For instance:\r\n  - In the example of \"apps that handle bursty traffic for which P99 latency is the most important metric\", the app author could configure the app (through an `AppContext` flag, or a `COMPlus` flag, or whatever) to let the runtime know that \"I don\u0027t care about memory usage, I just want maximum speed\". The runtime could then override the default policies for registered callbacks, and eg. also call those registered as periodic only when there\u0027s memory pressure.\r\n  - Vice versa, something like apps that wanted to minimize working set memory when minimized could also override this behavior, and have it so the runtime could invoke all callbacks regardless (including those reegistered as \"MemoryPressureOnly\"), so that they could force a GC collect before suspension and reclaim as much memory as possible despite what library authors had intended for their registered callbacks.\r\n\r\nAgain, to be clear, not suggesting this API shape is ideal/final, just want to keep iterating on the API shape to see whether we can figure out what would one that would satisfy all these requirements that have been brought up look like 😊\r\nSpecifically:\r\n- What aspects of this API shape would not be enough for those requirements, and why?\r\n- Would we need callers to be able to indicate more options when reegistering callbacks? If so, which ones?\r\n- Is the overall direction with this not the right one, and if so, how should we change it?",
                                           "updatedAt":  "2021-10-30T12:17:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4470d2",
                                           "createdAt":  "2021-10-30T12:59:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e having cleanup code run on the finalizer thread\r\n\r\nThat\u0027s not always a drawback. It is appropriate to run the cleanup on finalizer thread in some cases. For example, I do not think we would want to add more overhead to the arraypool trimming by scheduling it somewhere else. I expect number of other `Gen2GcCallback` uses would fall into the same bucket.",
                                           "updatedAt":  "2021-10-30T13:08:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4470sQ",
                                           "createdAt":  "2021-10-30T13:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e type like WeakReferenceMessenger could use \"MemoryPressureOnly\" given the cached data structures are lightweight and it\u0027s not a big deal to keep them alive until there\u0027s high memory pressure\r\n\r\nIf if is the case, why is not WeakReferenceMessenger implemented this way today? If I am reading the code correctly, the WeakReferenceMessenger  trimming is done always, without accounting for any memory pressure.\r\n\r\nOr why WeakReferenceMessenger needs the automatic trimming on memory pressure at all? Is it worth the overhead?",
                                           "updatedAt":  "2021-10-30T13:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44-pkn",
                                           "createdAt":  "2021-11-01T05:35:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "\u003e I do feel like we\u0027re moving a bit away from what the original proposal was, which is to offer a built-in replacement for `Gen2GcCallback` that didn\u0027t suffer from the drawbacks that that approach has (having to copy-paste the code, having cleanup code run on the finalizer thread, etc.), but I do agree that if we are to expose a public API, adding a \"better one\" that can actually address this issue in general makes sense. Since we\u0027re brainstorming ideas, here\u0027s a very rough draft following Jan\u0027s comments. **NOTE:** I don\u0027t mean this to be a perfectly refined proposal, I\u0027m mostly just curious to know whether something like this is something that\u0027s moving towards the direction you think is the correct one for this 😄\r\n\u003e \r\n\u003e Consider something like this:\r\n\u003e \r\n\u003e ```cs\r\n\u003e enum GcCallbackPolicy\r\n\u003e {\r\n\u003e     // Basically \"whenever Gen2GcCallback gets called today\"\r\n\u003e     Periodic,\r\n\u003e \r\n\u003e     // Only when there\u0027s actually memory pressure\r\n\u003e     MemoryPressureOnly\r\n\u003e }\r\n\u003e \r\n\u003e static void RegisterGcCallback(Func\u003cobject?, bool\u003e callback, object? target, GcCallbackPolicy policy);\r\n\u003e ```\r\n\u003e \r\n\u003e Now, the idea for this API shape is this:\r\n\u003e \r\n\u003e     * The `GcCallbackPolicy` enum would allow library authors to indicate the \"default policy\" for their scenarios, without having to try to estimate the actual memory usage of their cache, which Jan said would likely be very difficult to do and likely not optimal. With this option, for instance, a type like `ArrayPool\u003cT\u003e` would use \"Periodic\" (to keep having the callback invoked more often just like it does today with `Gen2GcCallback`), whereas eg. a type like `WeakReferenceMessenger` could use \"MemoryPressureOnly\" given the cached data structures are lightweight and it\u0027s not a big deal to keep them alive until there\u0027s high memory pressure, and the overhead of having repeated callback invocations more often is not worth it.\r\n\u003e \r\n\u003e     * The system could then override these registered policies when needed. For instance:\r\n\u003e       \r\n\u003e       * In the example of \"apps that handle bursty traffic for which P99 latency is the most important metric\", the app author could configure the app (through an `AppContext` flag, or a `COMPlus` flag, or whatever) to let the runtime know that \"I don\u0027t care about memory usage, I just want maximum speed\". The runtime could then override the default policies for registered callbacks, and eg. also call those registered as periodic only when there\u0027s memory pressure.\r\n\u003e       * Vice versa, something like apps that wanted to minimize working set memory when minimized could also override this behavior, and have it so the runtime could invoke all callbacks regardless (including those reegistered as \"MemoryPressureOnly\"), so that they could force a GC collect before suspension and reclaim as much memory as possible despite what library authors had intended for their registered callbacks.\r\n\u003e \r\n\u003e \r\n\u003e Again, to be clear, not suggesting this API shape is ideal/final, just want to keep iterating on the API shape to see whether we can figure out what would one that would satisfy all these requirements that have been brought up look like 😊 Specifically:\r\n\u003e \r\n\u003e     * What aspects of this API shape would not be enough for those requirements, and why?\r\n\u003e \r\n\u003e     * Would we need callers to be able to indicate more options when reegistering callbacks? If so, which ones?\r\n\u003e \r\n\u003e     * Is the overall direction with this not the right one, and if so, how should we change it?\r\n\r\nI think this is perfect.\r\n\r\n\r\n\r\n\u003e \u003e type like WeakReferenceMessenger could use \"MemoryPressureOnly\" given the cached data structures are lightweight and it\u0027s not a big deal to keep them alive until there\u0027s high memory pressure\r\n\u003e \r\n\u003e If if is the case, why is not WeakReferenceMessenger implemented this way today? If I am reading the code correctly, the WeakReferenceMessenger trimming is done always, without accounting for any memory pressure.\r\n\u003e \r\n\u003e Or why WeakReferenceMessenger needs the automatic trimming on memory pressure at all? Is it worth the overhead?\r\n\r\nI feel like it\u0027s worth at least allowing to configure the trimming policy of ``WeakReferenceManager``. However what about apps that want to do periodic trimming + memory pressure trimming? I think the idea that @Sergio0694 posed needs to add an ``Both`` option.",
                                           "updatedAt":  "2021-11-01T05:35:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44-442",
                                           "createdAt":  "2021-11-01T07:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCApflQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-01T12:02:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-01T12:02:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-01T12:02:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e However what about apps that want to do periodic trimming + memory pressure trimming? I think the idea that Sergio0694 posed needs to add an `Both` option.\r\n\r\nI was writing an entire paragraph on why the suggestion is good, but `Both` is not an ideal name, but then I realized: What about making this a `[Flags]` enum? Then users have the option of passing in `Periodic | MemoryPressureOnly`, or simply `All` if they want to register for potential future additions as well.",
                                           "updatedAt":  "2021-11-01T07:55:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45hgzY",
                                           "createdAt":  "2021-11-10T12:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Re @jkotas:\r\n\r\n\u003e \"That\u0027s not always a drawback. It is appropriate to run the cleanup on finalizer thread in some cases. For example, I do not think we would want to add more overhead to the arraypool trimming by scheduling it somewhere else. I expect number of other `Gen2GcCallback` uses would fall into the same bucket.\"\r\n\r\nThe rationale for that was (after discussing with @GrabYourPitchforks) that it could\u0027ve avoided a number of issues that can arise from code running in the finalizer thread, if people are not very careful about what they\u0027re doing there. For instance, taking a lock on the finalizer thread is a very bad idea, but not everyone knows that. I guess one could also make the argument that people using such an API would be aware of these details as well though, sure. Would you imagine this API to just always invoke callbacks inline on the finalizer thread, or maybe that it would expose an option to choose where to be dispatched?\r\n\r\n\u003e \"[...] why is not `WeakReferenceMessenger` implemented this way today? If I am reading the code correctly, the `WeakReferenceMessenger` trimming is done always, without accounting for any memory pressure. Or why `WeakReferenceMessenger` needs the automatic trimming on memory pressure at all? Is it worth the overhead?\"\r\n\r\nThat is correct, today there are no checks for memory pressure. One of the reasons was that since we can\u0027t take a lock on the finalizer thread, we\u0027re just trying to acquire one to then do the cleanup. I wanted to avoid cases where the callback is only invoked when there\u0027s really a lot of pressure, then it fails to acquire the lock because someone else holds it at that moment, and then the trimming is just skipped entirely. This is certainly something that could be improved though. As to why it needs automatic trimming in the first place, the rationale here is that the type should be as easy to use as possible, with consumers not having to care about the implementation detail or with manually trimming it. The reason why it needs trimming is that registered recipients can be collected at any time (as they\u0027re weak references), which can result in leftover items in the internal mapping (ie. key/value pairs for message types that actually hold no recipients at all). Trimming just ensures the internal data structures are kept as lean as possible, which both saves a tiny bit of memory and can speedup broadcast operations as they won\u0027t have to waste time going through empty collections looking for actual recipients to send messages to.\r\n\r\nRe. @AraHaan:\r\n\r\n\u003e \"However what about apps that want to do periodic trimming + memory pressure trimming?\"\r\n\r\nI feel like this is just a misunderstanding due to me using a bad name for that `Periodic` option. As the comment says, I just meant that that one indicates \"every gen 2 GC collect like `Gen2GcCallback` does today\", whereas `MemoryPressureOnly` would basically \"filter\" that and only actually invoke callbacks when there is high memory pressure. The latter is a subset of the former, so there is no need to have a way to combine two options: just use `Periodic` in that case, which covers both.",
                                           "updatedAt":  "2021-11-10T12:30:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45jCNF",
                                           "createdAt":  "2021-11-10T16:06:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e For instance, taking a lock on the finalizer thread is a very bad idea\r\n\r\nTaking a long lock on a global singleton data structure is a very bad idea. It does not matter which thread you use to take the lock.\r\n\r\nIt is fine to take a short lock on the finalizer thread. It happens a lot. In fact, the ArrayPool trimming takes a short lock on the finalizer thread too.\r\n\r\n\u003e I guess one could also make the argument that people using such an API would be aware of these details as well though\r\n\r\nRight.",
                                           "updatedAt":  "2021-11-10T16:06:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45nAsk",
                                           "createdAt":  "2021-11-11T18:26:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"Taking a long lock on a global singleton data structure is a very bad idea.\"\r\n\r\nTo be clear, the lock is on an internal data structure, _not_ on the publicly exposed singleton instance. Conceptually it should be the same as eg. `ArrayPool\u003cT\u003e.Shared` internally taking a lock, or any other type that is also available as a singleton that does some form of internal synchronization, no? We\u0027re not locking on an instance that external users could also directly access.\r\n\r\nAlso, to further clarify this, using the singleton instance is not really the recommended approach anyway. That property mostly exists to make the transition easier for MvvmLight users, which were used to the singleton instance for the previous messenger type there. The recommended approach for the MVVM Toolkit is ideally to just inject the messenger with DI into viewmodels. Not also including the singleton would\u0027ve made the migration too difficult for existing users though, we we added it for convenience.\r\n\r\n\u003e \"It is fine to take a short lock on the finalizer thread.\"\r\n\r\nI guess I might\u0027ve misunderstood how bad this was when I talked about it with @GrabYourPitchforks a while back.\r\nMy understanding was that it would be better to avoid it as much as possible unless absolutely necessary.\r\nIf that\u0027s not the case and short locks are fine, then good to know 😄\r\n\r\n",
                                           "updatedAt":  "2021-11-11T18:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hnYJ1",
                                           "createdAt":  "2025-03-10T18:20:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ladeak",
                                           "body":  "Is this proposal still valid, or was there an alternative solution that could have been used?",
                                           "updatedAt":  "2025-03-10T18:20:34Z"
                                       }
                                   ],
                         "totalCount":  71
                     },
        "title":  "Proposal: GC.RegisterMemoryPressureCallback",
        "labels":  [
                       "api-suggestion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54542",
        "createdAt":  "2021-06-22T10:55:58Z",
        "number":  54542,
        "author":  "Dmitry-Me",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-25T15:13:49Z",
        "body":  "TL;DR GC.KeepAlive() existence is a very subtle surprise to anyone who doesn\u0027t know exactly what it does. And here\u0027s the problem which it solves.\r\n\r\nSo you have a piece of code where you have a reference to an object holding an `IntPtr` to some unmanaged resource. The object class finalizer invalidates the `IntPtr` and a method of that object makes use of `IntPtr` by passing it into some unmanaged code.\r\n\r\nYou do have an explicit reference to the object in your code. The object\u0027s method is running. The CLR can still collect the object right in the middle of object\u0027s method running, call the finalizer and make the `IntPtr` invalid thus causing undefined behavior in the unmanaged code.\r\n\r\nYou have to use `GC.KeepAlive()` to prevent that undesired object collection.\r\n\r\nIs that not bad enough? One bonus is it doesn\u0027t reproduce under debugger. Another bonus is it doesn\u0027t reproduce in debug builds.\r\n\r\nSo the current behavior is...\r\n\r\n1. totally counterintuitive. My code has a reference to the object. The object is reachable from my code. How would GC dare to collect it?\r\n2. causes defects which are reproduced in undeterministic fashion and only outside debugger and only in non-debug builds which actually means \"you never see this when debugging, it only appears in production\" most of the time.\r\n\r\nIt would be nice if this undeterministic object collection didn\u0027t happen even when `GC.KeepAlive()` is not used. It would be nice to make `GC.KeepAlive()` unnecessary.\r\n\r\nHow hard would it be to teach CLR to not collect objects which are referenced from currently running block of code? How hard would it be to check that such object does have a finalizer and not consider it for collection until the block it\u0027s referenced from ends and it\u0027s no longer reachable? That would save a ton of person-hours.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM8VUuA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTg4MTk3OA==",
                                           "createdAt":  "2021-06-22T10:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTL;DR GC.KeepAlive() existence is a very subtle surprise to anyone who doesn\u0027t know exactly what it does. And here\u0027s the problem which it solves.\r\n\r\nSo you have a piece of code where you have a reference to an object holding an `IntPtr` to some unmanaged resource. The object class finalizer invalidates the `IntPtr` and a method of that object makes use of `IntPtr` by passing it into some unmanaged code.\r\n\r\nYou do have an explicit reference to the object in your code. The object\u0027s method is running. The CLR can still collect the object right in the middle of object\u0027s method running, call the finalizer and make the `IntPtr` invalid thus causing undefined behavior in the unmanaged code.\r\n\r\nYou have to use `GC.KeepAlive()` to prevent that undesired object collection.\r\n\r\nIs that not bad enough? One bonus is it doesn\u0027t reproduce under debugger. Another bonus is it doesn\u0027t reproduce in debug builds.\r\n\r\nSo the current behavior is...\r\n\r\n1. totally counterintuitive. My code has a reference to the object. The object is reachable from my code. How would GC dare to collect it?\r\n2. causes defects which are reproduced in undeterministic fashion and only outside debugger and only in non-debug builds which actually means \"you never see this when debugging, it only appears in production\" most of the time.\r\n\r\nIt would be nice if this undeterministic object collection didn\u0027t happen even when `GC.KeepAlive()` is not used. It would be nice to make `GC.KeepAlive()` unnecessary.\r\n\r\nHow hard would it be to teach CLR to not collect objects which are referenced from currently running block of code? How hard would it be to check that such object does have a finalizer and not consider it for collection until the block it\u0027s referenced from ends and it\u0027s no longer reachable? That would save a ton of person-hours.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDmitry-Me\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-22T10:56:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTkxMzE1Mw==",
                                           "createdAt":  "2021-06-22T11:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvwByQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2021-06-22T15:42:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2021-06-22T20:27:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-06-22T21:50:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e 1. The object is reachable from my code.\r\n\r\nCLR treats the lifetime ends at last usage, not the code block ends. Code blocks are nothing after compilation.\r\n\r\nIf GC defers the collection until method end (current debug behavior), performance of large method may regress.\r\n\r\nI haven\u0027t see any realistic usage of `GC.KeeyAlive` in safe code. Most code use `using`.",
                                           "updatedAt":  "2021-06-22T11:45:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjA4OTA1Mw==",
                                           "createdAt":  "2021-06-22T15:32:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBwF6wA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2021-06-22T18:21:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2021-06-22T20:27:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-06-22T21:51:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-06-23T08:15:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2021-06-23T21:23:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2021-06-24T21:04:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I\u0027d strongly recommend using `SafeHandle` instead of `IntPtr` as your interop primitive. Then you don\u0027t need to write finalizers and don\u0027t need to sprinkle `KeepAlive` throughout your code base. If you\u0027re still adamant on dropping down to raw `IntPtr` values in order to milk every last little bit of perf from your application, then you\u0027re in an advanced power-user world, and requiring `KeepAlive` for that extremely small percentage of users who absolutely require full control over reachability concerns doesn\u0027t seem like the worst thing in the world.",
                                           "updatedAt":  "2021-06-22T15:32:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Njc5MzIyNA==",
                                           "createdAt":  "2021-06-23T12:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dmitry-Me",
                                           "body":  "@GrabYourPitchforks Would `SafeHandle` be protected from being collected unexpectedly early?",
                                           "updatedAt":  "2021-06-23T12:29:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Njc5NzY5Nw==",
                                           "createdAt":  "2021-06-23T12:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBv44Xg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2021-06-23T16:50:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "`SafeHandle` can be passed all the way into P/Invokes where the runtime ensures it\u0027s properly referenced and that the native code gets the wrapped `IntPtr` from it.",
                                           "updatedAt":  "2021-06-23T12:36:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzgxMzI4MQ==",
                                           "createdAt":  "2021-06-24T17:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByGGaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2021-06-24T17:51:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2021-06-24T18:37:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mayorovp",
                                                                               "createdAt":  "2021-07-12T09:01:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e @GrabYourPitchforks Would `SafeHandle` be protected from being collected unexpectedly early?\r\n\r\nWell, `SafeHandle` is `IDisposable`, so as long as you follow the pattern of not disposing of it before you are done with it, and then there should be a call to `Dispose()` after the interop call, that would make sure the JIT believes the value is still needed after the use. That works exactly the same way `GC.KeepAlive()` does.\r\n\r\nAs an added benefit, the `IDisposable` pattern will ensure the native resource are disposed of at a deterministic time when `Dispose()` is called. That makes the program so much easier to reason about. You know exactly when the native memory is freed, opposed to waiting for the finalizer, which may happen at random times.",
                                           "updatedAt":  "2021-06-24T17:15:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODU2NDAyNg==",
                                           "createdAt":  "2021-06-25T15:03:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dmitry-Me",
                                           "body":  "@cshung Okay, but what if I don\u0027t `Dispose()` it - neither explicitly nor with `using`? Will it be protected for unexpected collection?",
                                           "updatedAt":  "2021-06-25T15:03:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODU3MDI5Ng==",
                                           "createdAt":  "2021-06-25T15:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODngDqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2021-06-25T18:10:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mayorovp",
                                                                               "createdAt":  "2021-07-12T09:02:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alewmt",
                                                                               "createdAt":  "2024-06-27T11:51:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "The P/Invoke ensures the SafeHandle remains referenced and will not be available for collection until the P/Invoke returns.  It also ensures that any concurrent use of Dispose on the SafeHandle will not close the underlying handle / file descriptor until the P/Invoke returns.",
                                           "updatedAt":  "2021-06-25T15:13:49Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Consider making GC.KeepAlive() unnecessary",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57151",
        "createdAt":  "2021-08-10T17:36:03Z",
        "number":  57151,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-12T17:28:52Z",
        "body":  "If the OS sends us a low memory notification, the finalizer thread will unconditionally induce a GC in an attempt to save memory. But under NoGC mode, the memory required is already committed, so we should be able to pause the GC and wait until the NoGC completes (either by TryEndNoGCRegion or user allocated more than available).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONWqjhQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41aqOF",
                                           "createdAt":  "2021-08-10T17:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIf the OS sends us a low memory notification, the finalizer thread will unconditionally induce a GC in an attempt to save memory. But under NoGC mode, the memory required is already committed, so we should be able to pause the GC and wait until the NoGC completes (either by TryEndNoGCRegion or user allocated more than available).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-10T17:36:07Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider pausing the induced GC caused by OS low memory notification during NoGC",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57157",
        "createdAt":  "2021-08-10T18:32:12Z",
        "number":  57157,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-12T17:28:47Z",
        "body":  "This test is currently not run under CI and therefore is not noted.\r\n\r\nThe particular case that is failing is this one:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4d26112c07391f563cb0ca46af1993635399007e/src/tests/GC/API/NoGCRegion/NoGC.cs#L197\r\n\r\nSome preliminary observations:\r\n\r\n- This test case failed for both the segment and the region case.\r\n- The test case failed because it performed a GC within the NoGC region.\r\n- That happens even when I muted the GC caused by https://github.com/dotnet/runtime/issues/57151.\r\n\r\nAnd some more in-depth info:\r\n- The GC is triggered because we ran out of allocation budget (i.e. `dd_new_allocation` \u003c 0)\r\n- The test expects to allocate 10MB on SOH over 8 heaps, which leads to us allocating 1.5625MB per heap for SOH.\r\n- When the test fails, we did allocate more than 1.5625MB on SOH for a single heap, while leaving space on others, this points towards a potential issue related to heap balancing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONWs83w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41azzf",
                                           "createdAt":  "2021-08-10T18:32:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis test is currently not run under CI and therefore is not noted.\r\n\r\nThe particular case that is failing is this one:\r\n\r\nhttps://github.com/dotnet/runtime/blob/4d26112c07391f563cb0ca46af1993635399007e/src/tests/GC/API/NoGCRegion/NoGC.cs#L197\r\n\r\nSome preliminary observations:\r\n\r\n- This test case failed for both the segment and the region case.\r\n- The test case failed because it performed a GC within the NoGC region.\r\n- That happens even when I muted the GC caused by https://github.com/dotnet/runtime/issues/57151.\r\n\r\nAnd some more in-depth info:\r\n- The GC is triggered because we ran out of allocation budget (i.e. `dd_new_allocation` \u003c 0)\r\n- The test expects to allocate 10MB on SOH over 8 heaps, which leads to us allocating 1.5625MB per heap for SOH.\r\n- When the test fails, we did allocate more than 1.5625MB on SOH for a single heap, while leaving space on others, this points towards a potential issue related to heap balancing.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-10T18:32:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consistent test failure in the 8192/8182 test case for NoGC.dll",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57309",
        "createdAt":  "2021-08-12T19:28:16Z",
        "number":  57309,
        "author":  "MattGal",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB2Kemw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2021-08-12T19:30:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-19T16:25:24Z",
        "body":  "In investigating \"why did [this build](https://dev.azure.com/dnceng/public/_build/results?buildId=1288907\u0026view=logs\u0026j=bb94f37e-a09b-5b51-09b2-ab78e7aa5103\u0026t=506cadc9-3cc4-5d96-6847-011f75a33382\u0026l=28) time out?\" for @ViktorHofer , I realized that [the coreclr-gc-simulator pipeline](https://dev.azure.com/dnceng/public/_build/results?buildId=1287716\u0026view=logs\u0026j=f614c838-e492-50ad-dc88-b009649129e3) routinely sends super-long running work to the windows.10.arm64v8.open queue, leading to runtime timeouts as noted.\r\n\r\nAt Viktor\u0027s request I\u0027m filing this issue to suggest changing this.  You might send fewer, smaller, or shorter work items (5-hour timeouts are not great), or move test execution to the internal project where it\u0027s not used for public PR / CI validation jobs.\r\n\r\nAlternatively, you might be able to work with dnceng (@ilyas1974 FYI) to get some of these machines put into their own queue (with \".stress\" added to the name or something)  to separate this sort of very-long-running work out.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONZ7_Gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41hQLK",
                                           "createdAt":  "2021-08-12T19:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-12T19:28:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41jUm2",
                                           "createdAt":  "2021-08-13T13:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn investigating \"why did [this build](https://dev.azure.com/dnceng/public/_build/results?buildId=1288907\u0026view=logs\u0026j=bb94f37e-a09b-5b51-09b2-ab78e7aa5103\u0026t=506cadc9-3cc4-5d96-6847-011f75a33382\u0026l=28) time out?\" for @ViktorHofer , I realized that [the coreclr-gc-simulator pipeline](https://dev.azure.com/dnceng/public/_build/results?buildId=1287716\u0026view=logs\u0026j=f614c838-e492-50ad-dc88-b009649129e3) routinely sends super-long running work to the windows.10.arm64v8.open queue, leading to runtime timeouts as noted.\r\n\r\nAt Viktor\u0027s request I\u0027m filing this issue to suggest changing this.  You might send fewer, smaller, or shorter work items (5-hour timeouts are not great), or move test execution to the internal project where it\u0027s not used for public PR / CI validation jobs.\r\n\r\nAlternatively, you might be able to work with dnceng (@ilyas1974 FYI) to get some of these machines put into their own queue (with \".stress\" added to the name or something)  to separate this sort of very-long-running work out.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMattGal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-13T13:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41jVCt",
                                           "createdAt":  "2021-08-13T13:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "cc @cshung @mangod9 ",
                                           "updatedAt":  "2021-08-13T13:21:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41nv8a",
                                           "createdAt":  "2021-08-16T15:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Will investigate what is required here. ",
                                           "updatedAt":  "2021-08-16T15:42:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Consider modifying tests / timeouts of  coreclr-gc-simulator pipeline or not using public CI machines",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58974",
        "createdAt":  "2021-09-10T23:30:22Z",
        "number":  58974,
        "author":  "Bio2hazard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCHDig==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "hueifeng",
                                            "createdAt":  "2022-06-02T13:18:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mausch",
                                            "createdAt":  "2022-11-16T09:27:56Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "gavinjoneslic",
                                            "createdAt":  "2023-05-27T23:51:04Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "RomanBats",
                                            "createdAt":  "2023-08-21T19:14:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "groone",
                                            "createdAt":  "2023-09-29T08:00:56Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "groone",
                                            "createdAt":  "2023-09-29T08:00:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2023-11-14T13:28:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "willg1983",
                                            "createdAt":  "2024-10-30T08:31:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Strepto",
                                            "createdAt":  "2025-05-07T07:41:05Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2025-03-17T12:56:14Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nWhen running inside a docker container that has a hard memory limit set, `GCMemoryInfo` reports using a higher value for `HighMemoryLoadThresholdBytes` than is available.\r\n\r\n**Reproduction Steps**\r\n1. Use default multistage docker build described at https://aka.ms/containerfastmode - I noticed the issue with `mcr.microsoft.com/dotnet/runtime:6.0-bullseye-slim`\r\n2. Create a simple net6.0 console app\r\n3. Add\r\n```\r\nvar gcMemInfo = GC.GetGCMemoryInfo();\r\nConsole.WriteLine($\"Total Available:{gcMemInfo.TotalAvailableMemoryBytes}\");\r\nConsole.WriteLine($\"High Memory Threshold:{gcMemInfo.HighMemoryLoadThreshold}\");\r\n```\r\n4. Build container, e.g. `docker build -t highmemtest -f .\\Dockerfile .`\r\n5. Run container with memory limit, e.g.: `docker run --name highmemtest -it --memory=3g --rm highmemtest`\r\n\r\nWith a limit of 3g I observe the following values:\r\n```\r\n   \"totalAvailableMemoryBytes\":2415919104,\r\n\"highMemoryLoadThresholdBytes\":2899102924\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI would expect the high memory load threshold to be less than the available memory, so it has a chance to kick in and run the GC more aggressively prior to going OOM.\r\n\r\nTo that end, I would expect to see values similar to it running outside a container in windows, where I observe:\r\n```\r\n   \"totalAvailableMemoryBytes\":16909012992,\r\n\"highMemoryLoadThresholdBytes\":15218111692\r\n```\r\n\r\nOr running it inside a container without a memory limit, where I observe:\r\n```\r\n   \"totalAvailableMemoryBytes\":13191815168,\r\n\"highMemoryLoadThresholdBytes\":11872633651\r\n```\r\n\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\n.NET Version: net6.0\r\nOS: Observed on both Windows 10 and Amazon Linux 2 when running the `mcr.microsoft.com/dotnet/runtime:6.0-bullseye-slim` docker image\r\nArch: x64\r\nSpecific to: cgroup memory limit when running docker container\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\nI did not confirm it, but I suspect .NET 5 exhibits the same behavior.\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#heap-limit\r\n\r\nThe section for heap limit states:\r\n```\r\nThe default value, which only applies in certain cases, is the greater of 20 MB or 75% of the memory limit on the container. The default value applies if:\r\n-    The process is running inside a container that has a specified memory limit.\r\n-    System.GC.HeapHardLimitPercent is not set.\r\n```\r\n\r\nWhen running the container with --memory=3g, `/sys/fs/cgroup/memory/memory.limit_in_bytes` is 3221225472\r\n75% of that is 2415919104, which exactly matches the value of `TotalAvailableMemoryBytes` on `GCMemoryInfo`\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#high-memory-percent\r\n\r\nThe section for High Memory Percent states:\r\n```\r\nBy default, when the physical memory load reaches 90%, garbage collection becomes more aggressive about doing full, compacting garbage collections to avoid paging.\r\n```\r\n\r\n90% of the aforementioned 3221225472 is 2899102924 which matches the value of `HighMemoryLoadThresholdBytes` on `GCMemoryInfo`\r\n\r\nI think the disconnect here is that `HighMemoryLoadThresholdBytes` does not take into consideration that the Heap Limit is 75% when running inside a container with memory limit and instead assumes a Heap Limit of 100%. It should either be updated to have the same container-awareness logic that `TotalAvailableMemoryBytes` ( e.g. `When running inside a container that has a specified memory limit set, the default value is 68%` ), or just default to 90% of the calculated `TotalAvailableMemoryBytes` value.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoq75yw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42rKVM",
                                           "createdAt":  "2021-09-10T23:30:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nWhen running inside a docker container that has a hard memory limit set, `GCMemoryInfo` reports using a higher value for `HighMemoryLoadThresholdBytes` than is available.\r\n\r\n**Reproduction Steps**\r\n1. Use default multistage docker build described at https://aka.ms/containerfastmode - I noticed the issue with `mcr.microsoft.com/dotnet/runtime:6.0-bullseye-slim`\r\n2. Create a simple net6.0 console app\r\n3. Add\r\n```\r\nvar gcMemInfo = GC.GetGCMemoryInfo();\r\nConsole.WriteLine($\"Total Available:{gcMemInfo.TotalAvailableMemoryBytes}\");\r\nConsole.WriteLine($\"High Memory Threshold:{gcMemInfo.HighMemoryLoadThreshold}\");\r\n```\r\n4. Build container, e.g. `docker build -t highmemtest -f .\\Dockerfile .`\r\n5. Run container with memory limit, e.g.: `docker run --name highmemtest -it --memory=3g --rm highmemtest`\r\n\r\nWith a limit of 3g I observe the following values:\r\n```\r\n   \"totalAvailableMemoryBytes\":2415919104,\r\n\"highMemoryLoadThresholdBytes\":2899102924\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI would expect the high memory load threshold to be less than the available memory, so it has a chance to kick in and run the GC more aggressively prior to going OOM.\r\n\r\nTo that end, I would expect to see values similar to it running outside a container in windows, where I observe:\r\n```\r\n   \"totalAvailableMemoryBytes\":16909012992,\r\n\"highMemoryLoadThresholdBytes\":15218111692\r\n```\r\n\r\nOr running it inside a container without a memory limit, where I observe:\r\n```\r\n   \"totalAvailableMemoryBytes\":13191815168,\r\n\"highMemoryLoadThresholdBytes\":11872633651\r\n```\r\n\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\n.NET Version: net6.0\r\nOS: Observed on both Windows 10 and Amazon Linux 2 when running the `mcr.microsoft.com/dotnet/runtime:6.0-bullseye-slim` docker image\r\nArch: x64\r\nSpecific to: cgroup memory limit when running docker container\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\nI did not confirm it, but I suspect .NET 5 exhibits the same behavior.\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#heap-limit\r\n\r\nThe section for heap limit states:\r\n```\r\nThe default value, which only applies in certain cases, is the greater of 20 MB or 75% of the memory limit on the container. The default value applies if:\r\n-    The process is running inside a container that has a specified memory limit.\r\n-    System.GC.HeapHardLimitPercent is not set.\r\n```\r\n\r\nWhen running the container with --memory=3g, `/sys/fs/cgroup/memory/memory.limit_in_bytes` is 3221225472\r\n75% of that is 2415919104, which exactly matches the value of `TotalAvailableMemoryBytes` on `GCMemoryInfo`\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#high-memory-percent\r\n\r\nThe section for High Memory Percent states:\r\n```\r\nBy default, when the physical memory load reaches 90%, garbage collection becomes more aggressive about doing full, compacting garbage collections to avoid paging.\r\n```\r\n\r\n90% of the aforementioned 3221225472 is 2899102924 which matches the value of `HighMemoryLoadThresholdBytes` on `GCMemoryInfo`\r\n\r\nI think the disconnect here is that `HighMemoryLoadThresholdBytes` does not take into consideration that the Heap Limit is 75% when running inside a container with memory limit and instead assumes a Heap Limit of 100%. It should either be updated to have the same container-awareness logic that `TotalAvailableMemoryBytes` ( e.g. `When running inside a container that has a specified memory limit set, the default value is 68%` ), or just default to 90% of the calculated `TotalAvailableMemoryBytes` value.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBio2hazard\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-10T23:30:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42rQLW",
                                           "createdAt":  "2021-09-11T00:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs1Tng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "queensengineer",
                                                                               "createdAt":  "2022-06-14T04:24:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fhelwanger",
                                                                               "createdAt":  "2022-09-26T19:33:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "So I think the bug is in [/src/coreclr/gc/gc.cpp](https://github.com/dotnet/runtime/blob/main/src/coreclr/gc/gc.cpp) which is unfortunately too large to display in github. \r\n\r\nNow, I\u0027m not a c++ dev, but I think I figured out what\u0027s going on.\r\n\r\nIn `gc.cpp`, line 42772-42776 has the logic that sets the heap limit to 75%:\r\n\r\n```c++\r\nif (gc_heap::is_restricted_physical_mem)\r\n{\r\n    uint64_t physical_mem_for_gc = gc_heap::total_physical_mem * (uint64_t)75 / (uint64_t)100;\r\n    gc_heap::heap_hard_limit = (size_t)max ((20 * 1024 * 1024), physical_mem_for_gc);\r\n}\r\n```\r\n\r\n\r\nline 42978-42995 has the logic that sets the high memory percentage to 90%:\r\n```c++\r\nelse\r\n{\r\n    // We should only use this if we are in the \"many process\" mode which really is only applicable\r\n    // to very powerful machines - before that\u0027s implemented, temporarily I am only enabling this for 80GB+ memory.\r\n    // For now I am using an estimate to calculate these numbers but this should really be obtained\r\n    // programmatically going forward.\r\n    // I am assuming 47 processes using WKS GC and 3 using SVR GC.\r\n    // I am assuming 3 in part due to the \"very high memory load\" is 97%.\r\n    int available_mem_th = 10;\r\n    if (gc_heap::total_physical_mem \u003e= ((uint64_t)80 * 1024 * 1024 * 1024))\r\n    {\r\n        int adjusted_available_mem_th = 3 + (int)((float)47 / (float)(GCToOSInterface::GetTotalProcessorCount()));\r\n        available_mem_th = min (available_mem_th, adjusted_available_mem_th);\r\n    }\r\n\r\n    gc_heap::high_memory_load_th = 100 - available_mem_th;\r\n    gc_heap::v_high_memory_load_th = 97;\r\n}\r\n```\r\n\r\nIt\u0027s a bit confusing, but the comment actually only applies to the inner `if (gc_heap::total_physical_mem \u003e= ((uint64_t)80 * 1024 * 1024 * 1024))` part.\r\n\r\nThe important part is Line 42986 `int available_mem_th = 10;` and then Line 42993 `gc_heap::high_memory_load_th = 100 - available_mem_th;` \r\n\r\nSo that\u0027s where the 90% comes from.\r\n\r\n### Fix\r\nA possible fix would be: If in a restricted physical mem environment, default the high memory threshold to 68% instead of 90% ( to complement the 75% max heap size ). This would be the code change for that:\r\n\r\n```c++\r\nelse\r\n    {\r\n        int available_mem_th = 10;\r\n        // If the hard limit is specified, default to 68% instead of 90% of physical memory\r\n        if (gc_heap::is_restricted_physical_mem)\r\n        {\r\n            available_mem_th = 32;\r\n        }\r\n\r\n        // We should only use this if we are in the \"many process\" mode which really is only applicable\r\n        // to very powerful machines - before that\u0027s implemented, temporarily I am only enabling this for 80GB+ memory.\r\n        // For now I am using an estimate to calculate these numbers but this should really be obtained\r\n        // programmatically going forward.\r\n        // I am assuming 47 processes using WKS GC and 3 using SVR GC.\r\n        // I am assuming 3 in part due to the \"very high memory load\" is 97%.\r\n        if (gc_heap::total_physical_mem \u003e= ((uint64_t)80 * 1024 * 1024 * 1024))\r\n        {\r\n            int adjusted_available_mem_th = 3 + (int)((float)47 / (float)(GCToOSInterface::GetTotalProcessorCount()));\r\n            available_mem_th = min (available_mem_th, adjusted_available_mem_th);\r\n        }\r\n\r\n        gc_heap::high_memory_load_th = 100 - available_mem_th;\r\n        gc_heap::v_high_memory_load_th = 97;\r\n    }\r\n```\r\n\r\nThat would resolve the issue, however I think it is indicative of a bigger problem. `memory_load` is used throughout the file to determine how much memory % is in use. The problem is that it seems purely based on `total_physical_mem`, not `heap_hard_limit`.\r\n\r\nI wonder if \r\n```c++\r\nvoid gc_heap::get_memory_info (uint32_t* memory_load,\r\n                               uint64_t* available_physical,\r\n                               uint64_t* available_page_file)\r\n{\r\n    GCToOSInterface::GetMemoryStatus(is_restricted_physical_mem ? total_physical_mem  : 0,  memory_load, available_physical, available_page_file);\r\n}\r\n```\r\ncould be updated to `GCToOSInterface::GetMemoryStatus(heap_hard_limit ? heap_hard_limit : 0,  memory_load, available_physical, available_page_file);` or something along those lines, though I suspect that would have wide-reaching consequences that would require a very thorough audit. ",
                                           "updatedAt":  "2021-09-11T00:55:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42rVLh",
                                           "createdAt":  "2021-09-11T03:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "this is by design. the *default* limit is set to be 75% assuming that there\u0027s native memory usage in the container (container in this context means an environment with a memory limit). we do not assume that all available memory is available for the GC to use. 75% is a number we picked - it\u0027s meant to be sufficient for general scenarios. you can change this default by specifying [hardlimit](https://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#heap-limit). \r\n\r\noutside a container, we did not have a default percentage for limit to begin with. it\u0027s true the same principle applies outside container env as well. but we only added this default limit concept when we added container support. adding it outside container env might regress existing apps and since you could use the same hardlimit config there if you want to change the default, I didn\u0027t change the default there.",
                                           "updatedAt":  "2021-09-11T03:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42te1P",
                                           "createdAt":  "2021-09-13T06:51:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I would expect the high memory load threshold to be less than the available memory, so it has a chance to kick in and run the GC more aggressively prior to going OOM.\r\n\r\n`TotalAvailableMemoryBytes` is the size of the .NET managed heap (defaults to 75% of physical memory).\r\n\r\n.NET will GC to stay below this limit in a container. It won\u0027t wait till physical memory reaches `HighMemoryLoadThreshold`.\r\n\r\nFor https://github.com/dotnet/runtime/issues/50414 there seems to be an issue as we\u0027re approaching `TotalAvailableMemoryBytes`.\r\n\r\nAre you seeing an OOM in your containers?",
                                           "updatedAt":  "2021-09-13T06:51:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wi1J",
                                           "createdAt":  "2021-09-14T00:33:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "Hi @Maoni0 and @tmds - I realize that `TotalAvailableMemoryBytes` - the .NET managed heap defaults to 75% of physical memory _if_ it is restricted ( physical memory not being of the host, but the hard limit of the container ). \r\n\r\nThat\u0027s not the problem, the problem is that the `HighMemoryLoadThreshold` does not take that 75% into consideration and is always 90%.\r\n\r\n\u003e .NET will GC to stay below this limit in a container. It won\u0027t wait till physical memory reaches `HighMemoryLoadThreshold`.\r\n\r\nFrom reading https://raw.githubusercontent.com/dotnet/runtime/main/src/coreclr/gc/gc.cpp I see a few checks for `heap_hard_limit` which changes behaviors, but searching for `high_memory_load` shows 10 or so locations where extra steps are taken to turn background collections into blocking collections, wait for background collections, proactively reclaim space and immediately trigger a gen 2 collection. Those will currently not work unless the defaults are manually overridden.\r\n\r\nIt seems most of the code to detect memory pressure is not based on `heap_hard_limit` but on `high_memory_load_th` which defaults to a value that can never be reached on a container that has a hard limit set.\r\n\r\nAm I not interpreting the c++ code correctly?\r\n\r\n@tmds yes, I\u0027m seeing some OOMs that I can\u0027t quite explain and have been investigating.\r\n\r\nIn .net core 3.1 this job had a 5% chance to crash. Of those that would crash, I\u0027d estimate that 75% were shut down by the memory killer for exceeding their memory hard limit and 25% crashed with a `System.OutOfMemoryException`.\r\n\r\nAfter upgrading to .NET 6 preview, the same job now has a 95% chance to crash, and 100% of those crash from throwing a `System.OutOfMemoryException`.",
                                           "updatedAt":  "2021-09-14T00:33:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wlQs",
                                           "createdAt":  "2021-09-14T00:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e That\u0027s not the problem, the problem is that the HighMemoryLoadThreshold does not take that 75% into consideration and is always 90%.\r\n\r\nit\u0027s always 90% because we assume there\u0027s other memory usage. so we\u0027d only want to start being aggressive if the total memory load (including both GC usage and other memory usage) is 90%, not when it\u0027s reached the 90% of the hard limit. again, this is the default behavior. ",
                                           "updatedAt":  "2021-09-14T00:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42wlpq",
                                           "createdAt":  "2021-09-14T01:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "another thing I should mention, if it\u0027s not obvious, is that of course we would do a full compacting GC if we cannot commit memory based on the hardlimit.",
                                           "updatedAt":  "2021-09-14T01:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42yKIr",
                                           "createdAt":  "2021-09-14T12:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e It seems most of the code to detect memory pressure is not based on heap_hard_limit but on high_memory_load_th which defaults to a value that can never be reached on a container that has a hard limit set.\r\nAm I not interpreting the c++ code correctly?\r\n\r\nMy understanding (which may be wrong) is that the GC does accounting on how much of the managed heap is used, and uses that to trigger GCs.\r\n`HighMemoryLoadThresholdBytes` memory pressure is not needed for the GC to get into action.\r\n\r\n\u003e Of those that would crash, I\u0027d estimate that 75% were shut down by the memory killer for exceeding their memory hard limit and 25% crashed with a System.OutOfMemoryException.\r\n\r\n`OutOfMemoryException` happens when the GC accounting says the managed heap is full.\r\n\r\nThe OOM kill happens by the OS based on total memory used.\r\n\r\n\u003e After upgrading to .NET 6 preview, the same job now has a 95% chance to crash\r\n\r\nThat is a major regression.\r\n\r\nCan you update the issue title to something like _.NET 6 container throws OutOfMemoryException_?\r\n\r\nhttps://github.com/dotnet/runtime/issues/50414 is also about `OutOfMemoryException` in a container, but that workload is artificial. You are hitting this in a real application?\r\n\r\nHow does it behave with .NET 5?\r\n\r\ncc @janvorli ",
                                           "updatedAt":  "2021-09-14T12:50:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zkRQ",
                                           "createdAt":  "2021-09-14T20:25:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "@tmds \r\n\r\nHi, yes this is a real application. It\u0027s a console app running in production that fetches gzipped csv files and converts them to the parquet format. The container instances have a tight memory limit so I can run multiple container instances per host - when I first created the app it had to process about half an exabyte worth of data, so scaling horizontally in an efficient manner was vital.\r\n\r\nThe way I created the application has some similarities with the artifical workload in #50414 Details on the app are available below.\r\n\r\n### Findings Summary\r\n.NET 6 = `runtime:6.0-bullseye-slim`\r\n.NET 5 = `runtime:5.0-bullseye-slim`\r\n.NET Core 3.1 = `runtime:3.1-buster-slim`\r\n\r\nContainer ran with `--memory=3100m`. Same input data was used for all runs and the input data has just over 3 million rows. \r\n\r\n| .NET  | Workstation GC | Server GC |\r\n| ------------- | ------------- | ------------- |\r\n| 6 | All Pass  | All **Fail**  |\r\n| 5  | All Pass  | All **Fail**  |\r\n| 3.1  | All Pass  | All Pass  |\r\n\r\n### Detailed Results\r\nEvery 50_000 rows processed, memory metrics are emitted.\r\n\r\n`FullGcMemoryInfoReport` = Data from `GC.GetGCMemoryInfo()`. After running it on .NET Core 3.1 I realized it\u0027s missing a lot of the info, so I added `GC.CollectionCount(gen)` for all 3 generations.\r\n\r\n`CGroupMemoryReport` = Data from `/sys/fs/cgroup/memory/` , namely `memory.limit_in_bytes`, `memory.usage_in_bytes` and `memory.max_usage_in_bytes`\r\n\r\nI excluded data from `/sys/fs/cgroup/memory/memory.memsw` because the usage values are the same as the regular memory values.\r\n\r\n#### .NET 6 Server GC\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":300000,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":834576,\"promotedBytes\":2206629464,\"finalizationPendingCount\":0,\"heapSizeBytes\":2208390664,\"memoryLoadBytes\":357564416,\"pauseTimePercentage\":1.25,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2267475968,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 300000, \"limitInBytes\": 3250585600, \"usageInBytes\": 473812992, \"maxUsageInBytes\": 779841536}\r\nAborted\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":350000,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":4,\"fragmentedBytes\":2925304,\"promotedBytes\":5485704,\"finalizationPendingCount\":24,\"heapSizeBytes\":2213386120,\"memoryLoadBytes\":455081984,\"pauseTimePercentage\":0.84,\"pinnedObjectsCount\":2,\"totalCommittedBytes\":2292273152,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 350000, \"limitInBytes\": 3250585600, \"usageInBytes\": 486424576, \"maxUsageInBytes\": 779841536}\r\nAborted\r\n\r\nRun 3:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":600000,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":5,\"fragmentedBytes\":4517376,\"promotedBytes\":2210647344,\"finalizationPendingCount\":5,\"heapSizeBytes\":2215297320,\"memoryLoadBytes\":552599552,\"pauseTimePercentage\":0.82,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2292232192,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 600000, \"limitInBytes\": 3250585600, \"usageInBytes\": 823992320, \"maxUsageInBytes\": 1865146368}\r\nAborted\r\n\r\nRun 4:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":600000,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":5,\"fragmentedBytes\":7562848,\"promotedBytes\":2210161944,\"finalizationPendingCount\":5,\"heapSizeBytes\":2217721232,\"memoryLoadBytes\":552599552,\"pauseTimePercentage\":0.43,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2292281344,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 600000, \"limitInBytes\": 3250585600, \"usageInBytes\": 591986688, \"maxUsageInBytes\": 591986688}\r\nAborted\r\n```\r\n\r\n#### .NET 6 Workstation GC\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":176,\"fragmentedBytes\":7768976,\"promotedBytes\":2066664,\"finalizationPendingCount\":0,\"heapSizeBytes\":2232898296,\"memoryLoadBytes\":1462763520,\"pauseTimePercentage\":0.53,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2238799872,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1486970880, \"maxUsageInBytes\": 1486970880}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 51.1620156}\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":155,\"gen1CollectionCount\":91,\"gen2CollectionCount\":7,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":155,\"fragmentedBytes\":9087016,\"promotedBytes\":751976,\"finalizationPendingCount\":0,\"heapSizeBytes\":2231368744,\"memoryLoadBytes\":1462763520,\"pauseTimePercentage\":0.43,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2238574592,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1488908288, \"maxUsageInBytes\": 1488908288}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 49.2860017}\r\n```\r\n#### .NET 5 Server GC\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":400000,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":1265848,\"promotedBytes\":2206923760,\"finalizationPendingCount\":0,\"heapSizeBytes\":2209247376,\"memoryLoadBytes\":325058560,\"pauseTimePercentage\":0.78,\"pinnedObjectsCount\":2,\"totalCommittedBytes\":2265993216,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 400000, \"limitInBytes\": 3250585600, \"usageInBytes\": 722436096, \"maxUsageInBytes\": 1860648960}\r\nAborted\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":350000,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":971296,\"promotedBytes\":2206711304,\"finalizationPendingCount\":0,\"heapSizeBytes\":2208390104,\"memoryLoadBytes\":325058560,\"pauseTimePercentage\":1.08,\"pinnedObjectsCount\":1,\"totalCommittedBytes\":2267799552,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 350000, \"limitInBytes\": 3250585600, \"usageInBytes\": 718237696, \"maxUsageInBytes\": 1860648960}\r\nAborted\r\n```\r\n\r\n#### .NET 5 Workstation GC\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":177,\"fragmentedBytes\":8735344,\"promotedBytes\":1019784,\"finalizationPendingCount\":0,\"heapSizeBytes\":2232115952,\"memoryLoadBytes\":1462763520,\"pauseTimePercentage\":0.4,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2239213568,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1484357632, \"maxUsageInBytes\": 1484357632}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 53.162754}\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":179,\"fragmentedBytes\":11400800,\"promotedBytes\":1652632,\"finalizationPendingCount\":0,\"heapSizeBytes\":2234520536,\"memoryLoadBytes\":1462763520,\"pauseTimePercentage\":0.46,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2240872448,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1714769920, \"maxUsageInBytes\": 1847549952}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 51.051156}\r\n```\r\n\r\n#### .NET Core 3.1 Server GC\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"fragmentedBytes\":1536136,\"heapSizeBytes\":2233704392,\"memoryLoadBytes\":1852833791,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1856679936, \"maxUsageInBytes\": 1857949696}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 45.156954}\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"fragmentedBytes\":6385968,\"heapSizeBytes\":2238567392,\"memoryLoadBytes\":1787822080,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1842814976, \"maxUsageInBytes\": 1987911680}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 46.5500175}\r\n\r\n-- Added GC Gen Collection Counts  --\r\n\r\nRun 3:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":14,\"gen1CollectionCount\":12,\"gen2CollectionCount\":3,\"fragmentedBytes\":451648,\"heapSizeBytes\":2232756168,\"memoryLoadBytes\":1527775232,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1617502208, \"maxUsageInBytes\": 1617502208}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 46.5642079}\r\n\r\nRun 4:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":17,\"gen1CollectionCount\":15,\"gen2CollectionCount\":3,\"fragmentedBytes\":393496,\"heapSizeBytes\":2233633800,\"memoryLoadBytes\":1820327936,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1862709248, \"maxUsageInBytes\": 1987842048}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 48.5279659}\r\n```\r\n\r\n#### .NET Core 3.1 Workstation GC\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"fragmentedBytes\":6352552,\"heapSizeBytes\":2230767832,\"memoryLoadBytes\":1462763520,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1470181376, \"maxUsageInBytes\": 1470181376}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 51.7918388}\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"fragmentedBytes\":10571248,\"heapSizeBytes\":2233205032,\"memoryLoadBytes\":1690304512,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1702096896, \"maxUsageInBytes\": 1835315200}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 45.7423049}\r\n\r\n-- Added Collection Counts --\r\n\r\nRun 3:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":230,\"gen1CollectionCount\":116,\"gen2CollectionCount\":10,\"fragmentedBytes\":7088832,\"heapSizeBytes\":2231524336,\"memoryLoadBytes\":1690304512,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1701007360, \"maxUsageInBytes\": 1999908864}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 45.1154457}\r\n\r\nRun 4:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":221,\"gen1CollectionCount\":110,\"gen2CollectionCount\":11,\"fragmentedBytes\":9017064,\"heapSizeBytes\":2233361312,\"memoryLoadBytes\":1690304512,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1702215680, \"maxUsageInBytes\": 1999908864}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 47.9280517}\r\n```\r\n\r\n#### .NET 6 Server GC with extra GC Settings\r\n\r\nSetting `DOTNET_GCHighMemPercent` to `0x41` ( 65% ) = Crash\r\nSetting `DOTNET_GCHighMemPercent` to `0x28` ( 40% ) = Crash\r\nSetting `DOTNET_GCHeapHardLimitPercent` to `0x5f` ( 95% ) = Pass\r\nSetting `DOTNET_GCHeapHardLimitPercent` to `0x55` ( 85% ) = Pass\r\nSetting `DOTNET_GCHeapHardLimitPercent` to `0x50` ( 80% ) = Pass\r\nSetting `DOTNET_GCHeapHardLimitPercent` to `0x4b` ( 75% - As a control ) = Crash\r\n\r\nSetting `GCHighMemPercent` does not seem to make a difference, but increasing `GCHeapHardLimitPercent` does. \r\n\r\n### App Details\r\n\r\nI pre-define buffers for each column and create them on application start, because the default behavior of creating a new array that\u0027s 50% larger and copying the data over was both slow and wasteful. The buffers themselves use `ArrayBufferWriter\u003cT\u003e` and I pass the buffer size in as the `initialCapacity` on the constructor, so similar to the artificial app, I have a bunch of big arrays.\r\n\r\nThe app reads the remote data into a stream, unzips it and pushes it into a `Pipe` that has pause thresholds set. I manually parse the CSV line by line using `SequenceReader`, and write the data into their respective buffers backed by `ArrayBufferWriter\u003cT\u003e`.\r\n\r\nWhen the app reaches the desired number of rows, a buffer is almost full or there is no more input data, I fetch the `ReadOnlyMemory\u003cT\u003e` from `ArrayBufferWriter\u003cT\u003e.WrittenMemory`, Pin it and pass the pointer via interop call to apache parquet.\r\n\r\nThat method uses unsafe for pinning and grabbing the pointer, but all the observed crashes happen long before it tries to write any files.",
                                           "updatedAt":  "2021-09-14T22:28:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4209m-",
                                           "createdAt":  "2021-09-15T09:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Thanks for characterizing your workload and providing metrics.\r\n\r\n\u003e The way I created the application has some similarities with the artifical workload in #50414\r\n\r\n@Maoni0 @janvorli the referenced issue has a reproducer that leads to `OutOfMemoryException` for an application that should fit within the managed heap. It may have the same root cause as this issue. Can you please take a look?\r\n\r\n\u003e .NET 5 = runtime:5.0-bullseye-slim\r\n\r\n@Bio2hazard can you also try using the first 5.0 image (`mcr.microsoft.com/dotnet/runtime:5.0.0`)?\r\n\r\n\u003e .NET 6 Server GC with extra GC Settings\r\n\r\nI think reducing `DOTNET_GCHeapHardLimitPercent` leads to `Pass` because more GCs are triggered due to the memory load.\r\n\r\nThough I don\u0027t think those should be required. GCs should already have occurred when the managed heap usage becomes high.\r\n\r\n\u003e throws OutOfMemoryException\r\n\r\nThat the app throws `OutOfMemoryException` means that we\u0027re run out of managed heap.\r\n`totalAvailableMemoryBytes` has the same value for .NET 3.1 and 6.0, so the heap size is the same.\r\n\r\nI assume your app uses same allocation APIs independent of it targeting .NET 3.1, 5.0 or 6.0?\r\nSo, we can assume that your app doesn\u0027t have memory leaks because it doesn\u0027t run out of memory on 3.1.\r\n\r\nI wonder if something changed in .NET that would cause your application to require a larger heap.\r\nIf you increase the container memory limit, what happens?\r\nDoes it still throw `OutOfMemoryException`, but just takes longer to get to that point?",
                                           "updatedAt":  "2021-09-15T09:26:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4210Fv",
                                           "createdAt":  "2021-09-15T14:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6g8_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2021-09-15T14:54:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2021-09-15T19:30:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Bio2hazard",
                                                                               "createdAt":  "2021-09-15T21:22:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@tmds I was just going to start investigating this (and the #50414) problem today.",
                                           "updatedAt":  "2021-09-15T14:34:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc422uwM",
                                           "createdAt":  "2021-09-15T19:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I see this issue has changed to an OOM issue. yeah, if it doesn\u0027t get OOM with workstation GC but does with Server, or if it doesn\u0027t get OOM with a larger limit but with a smaller limit, that\u0027s clearly an issue that should be investigated. I\u0027ll see what @janvorli finds out.",
                                           "updatedAt":  "2021-09-15T19:30:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423BJ4",
                                           "createdAt":  "2021-09-15T21:22:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "@tmds \r\n\r\n\u003e @Bio2hazard can you also try using the first 5.0 image (`mcr.microsoft.com/dotnet/runtime:5.0.0`)?\r\n\r\n#### .NET 5 Server GC (`mcr.microsoft.com/dotnet/runtime:5.0.0`)\r\nThis one had an unusual behavior that I did not observe on the -slim version in that it appears to occasionally deadlock 🤔 3 out of 5 runs just stalled and I had to ctrl+c out.\r\n\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":400000,\"gen0CollectionCount\":3,\"gen1CollectionCount\":2,\"gen2CollectionCount\":2,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":2091968,\"promotedBytes\":2208499688,\"finalizationPendingCount\":0,\"heapSizeBytes\":2211286808,\"memoryLoadBytes\":422576128,\"pauseTimePercentage\":0.65,\"pinnedObjectsCount\":1,\"totalCommittedBytes\":2276786176,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 400000, \"limitInBytes\": 3250585600, \"usageInBytes\": 513638400, \"maxUsageInBytes\": 513638400}\r\n\u003c Deadlocked \u003e\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":500000,\"gen0CollectionCount\":3,\"gen1CollectionCount\":2,\"gen2CollectionCount\":2,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":3822008,\"promotedBytes\":2207981080,\"finalizationPendingCount\":0,\"heapSizeBytes\":2212661152,\"memoryLoadBytes\":487587840,\"pauseTimePercentage\":0.22,\"pinnedObjectsCount\":2,\"totalCommittedBytes\":2285789184,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 500000, \"limitInBytes\": 3250585600, \"usageInBytes\": 550965248, \"maxUsageInBytes\": 589717504}\r\n\u003c Deadlocked \u003e\r\n\r\n-- Restarted Container --\r\n\r\nRun 3:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":350000,\"gen0CollectionCount\":3,\"gen1CollectionCount\":3,\"gen2CollectionCount\":2,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":2396512,\"promotedBytes\":2207731480,\"finalizationPendingCount\":0,\"heapSizeBytes\":2211772672,\"memoryLoadBytes\":455081984,\"pauseTimePercentage\":0.28,\"pinnedObjectsCount\":2,\"totalCommittedBytes\":2292285440,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 350000, \"limitInBytes\": 3250585600, \"usageInBytes\": 476250112, \"maxUsageInBytes\": 476250112}\r\nAborted\r\n\r\nRun 4:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":300000,\"gen0CollectionCount\":3,\"gen1CollectionCount\":2,\"gen2CollectionCount\":2,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":1479120,\"promotedBytes\":2206950152,\"finalizationPendingCount\":0,\"heapSizeBytes\":2209512376,\"memoryLoadBytes\":357564416,\"pauseTimePercentage\":0.5,\"pinnedObjectsCount\":2,\"totalCommittedBytes\":2287513600,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 300000, \"limitInBytes\": 3250585600, \"usageInBytes\": 467820544, \"maxUsageInBytes\": 491061248}\r\n\u003c Deadlocked \u003e\r\n\r\nRun 5:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":300000,\"gen0CollectionCount\":3,\"gen1CollectionCount\":2,\"gen2CollectionCount\":2,\"compacted\":false,\"concurrent\":true,\"generation\":2,\"index\":2,\"fragmentedBytes\":1239576,\"promotedBytes\":2207744856,\"finalizationPendingCount\":0,\"heapSizeBytes\":2209212352,\"memoryLoadBytes\":357564416,\"pauseTimePercentage\":0.89,\"pinnedObjectsCount\":1,\"totalCommittedBytes\":2287591424,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 300000, \"limitInBytes\": 3250585600, \"usageInBytes\": 467705856, \"maxUsageInBytes\": 544829440}\r\nAborted\r\n```\r\n\r\n#### .NET 5 Workstation GC (`mcr.microsoft.com/dotnet/runtime:5.0.0`)\r\nWorkstation GC continues to work without any observed issues\r\n\r\n```\r\nRun 1:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":180,\"gen1CollectionCount\":123,\"gen2CollectionCount\":8,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":180,\"fragmentedBytes\":9647864,\"promotedBytes\":1396832,\"finalizationPendingCount\":0,\"heapSizeBytes\":2233583520,\"memoryLoadBytes\":1462763520,\"pauseTimePercentage\":0.42,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2240290816,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1481097216, \"maxUsageInBytes\": 1481097216}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 47.1836118}\r\n\r\nRun 2:\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":3050000,\"gen0CollectionCount\":196,\"gen1CollectionCount\":116,\"gen2CollectionCount\":8,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":196,\"fragmentedBytes\":8866304,\"promotedBytes\":1404608,\"finalizationPendingCount\":0,\"heapSizeBytes\":2231906616,\"memoryLoadBytes\":1690304512,\"pauseTimePercentage\":0.55,\"pinnedObjectsCount\":0,\"totalCommittedBytes\":2238410752,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 3050000, \"limitInBytes\": 3250585600, \"usageInBytes\": 1710972928, \"maxUsageInBytes\": 1839542272}\r\n{\"eventType\": \"Completion\", \"durationSeconds\": 40.2547436}\r\n```\r\n\r\n----\r\n\r\n\u003e I think reducing `DOTNET_GCHeapHardLimitPercent` leads to `Pass` because more GCs are triggered due to the memory load.\r\n\u003e \r\n\u003e Though I don\u0027t think those should be required. GCs should already have occurred when the managed heap usage becomes high.\r\n\r\nTo clarify, the default `GCHeapHardLimitPercent` for containers with a hard memory limit is 75%, so in those tests I\u0027m _increasing_ the value, not _reducing_ it. 👍 So that test shows that increasing the limit from 75% -\u003e 80% is enough to make it pass.\r\n\r\n----\r\n\r\n\u003e I assume your app uses same allocation APIs independent of it targeting .NET 3.1, 5.0 or 6.0?\r\n\u003e So, we can assume that your app doesn\u0027t have memory leaks because it doesn\u0027t run out of memory on 3.1.\r\n\r\nYes, the only preprocessor directive in place is for reporting metrics, to account for differences in 3.1s `GCMemoryInfo`.\r\nI don\u0027t believe my app has any memory leaks. To make sure, I\u0027ve just ran a profiling session with JetBrains dotMemory.\r\n\r\n**Important: !! I don\u0027t know how to profile a running linux container, so this profiling information is with the app running directly in Windows where it doesn\u0027t OOM !!** \r\n\r\nHere is a graphical representation of the first 12 seconds of the app running on **.net5.0** with ServerGC and Heap Limit set:\r\n![image](https://user-images.githubusercontent.com/2462038/133502285-84ff4447-000b-430f-89b9-517bf09b6f2a.png)\r\n\r\nThis pattern remains steady for the remainder of the apps lifetime\r\n![image](https://user-images.githubusercontent.com/2462038/133502527-fbabbd33-79b6-497e-bde3-af8a436389e1.png)\r\n\r\nFor comparison, here is a graphical representation of the first 12 seconds of the app running on **.net3.1**  with ServerGC and Heap Limit set:\r\n![image](https://user-images.githubusercontent.com/2462038/133502906-80e2bdcc-c141-4bd5-9cd1-270be9590c99.png)\r\n\r\nAnd the remainder of the apps lifetime\r\n![image](https://user-images.githubusercontent.com/2462038/133502942-43c666db-09ac-4ddb-a1ab-5d37168fe8c7.png)\r\n\r\nIn this one comparison, it seems the .net 3.1 GC is ever so slightly more aggressive, running just a tad sooner and overall running 20 times vs. .net 5 where it only runs 17 times. Again take these measurements with a grain of salt since this is on windows without a climit. It should help to visualize the memory movement within the app though. I\u0027m happy to provide more details profiling information if there is any area you are curious about 👍 \r\n \r\n\u003e I wonder if something changed in .NET that would cause your application to require a larger heap.\r\n\u003e If you increase the container memory limit, what happens?\r\n\u003e Does it still throw `OutOfMemoryException`, but just takes longer to get to that point?\r\n\r\nAs the memory profiling information hopefully shows, memory usage doesn\u0027t grow much while the application is running - intentionally so, as I tried my hardest to front-load allocations and then re-use buffers for both speed and predictability, so for the most part it seems the app will either consistently OOM while processing the first 20% of rows, or it will always succeed. The only time I\u0027ve observed crashes later on during processing is when giving it a even tighter memory limit, presumably due to the ~120mb of gen 0 allocations per GC cycle.\r\n\r\nAnyhow, I bumped the limit up by just 100 mb, from 3100mb to 3200mb and it passes now on **.net 5** with Server GC.\r\n3200MB = Pass\r\n3175MB = Pass\r\n3150MB = Fails\r\n3000MB = Fails\r\n2900MB = Fails ( before it starts processing )\r\n\r\nNext, I wanted to see what happens if I *reduce* the memory limit on **.net 3.1** with Server GC\r\n3100MB ( control ) = Pass\r\n3075MB = Fails\r\n3050MB = Fails\r\n3025MB = Fails\r\n3000MB = Fails\r\n2975MB = Fails\r\n2950MB = Fails\r\n2900MB = Fails ( before it starts processing )\r\n\r\nNext I wanted to see what the least amount of memory required is for **.net 3.1** with Workstation GC\r\n3000MB = Pass ( 3 runs, all pass )\r\n2975MB = Fails\r\n\r\nNext I wanted to see if 3000MB is sufficient for **.net 5** with Workstation GC\r\n3100MB ( control ) = Pass\r\n3075MB = Fails\r\n3050MB = Fails ( before it starts processing )\r\n3025MB = Fails ( before it starts processing )\r\n3000MB = Fails ( before it starts processing )\r\n\r\n**Note:** I only set the container memory limit via `--memory=` and the `COMPlus_gcServer` env value. I did not touch the heap limit, so keep in mind that 3000MB means a container climit of 3000MB but a hard heap limit of 2250MB. ( 75% of climit )!\r\n\r\nConclusions\r\n|  Version/GC Mode | 2975MB | 3000MB | 3100MB | 3175MB |\r\n| ------------------  |  -------  | -------  |  -------  | -------  | \r\n| .NET 3.1 Workstation | Fail | Pass | Pass | Pass |\r\n| .NET 5.0 Workstation | Fail | Fail | Pass | Pass |\r\n| .NET 3.1 Server | Fail | Fail | Pass | Pass |\r\n| .NET 5.0 Server | Fail | Fail | Fail | Pass |\r\n\r\nSo it seems .NET 5.0 needs an extra 100MB climit ( = 75MB heap limit ) to be happy, compared to .net 3.1. It isn\u0027t clear to me yet as to why - I memory profiled .NET 5 workstation GC vs. .NET 3.1 workstation GC and the allocations, and it appears largely identical. \r\n\r\n**Top** is 3.1, **Bottom** is 5.0\r\n![image](https://user-images.githubusercontent.com/2462038/133511251-1d38a09c-fc56-4b28-b5c1-8500e709c21c.png)\r\n\r\n",
                                           "updatedAt":  "2021-09-15T21:22:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423PUw",
                                           "createdAt":  "2021-09-15T23:06:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I was testing the test app from #50414  locally today and while I can repro it on .NET 6 preview 6, the test runs just fine on .NET 6 RC1. @Maoni0 said there was a change that came in preview 7 and that can likely fix the issue, so I gave it a try and it seems to be the case.",
                                           "updatedAt":  "2021-09-15T23:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423QI5",
                                           "createdAt":  "2021-09-15T23:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "\u003e I was testing the test app from #50414 locally today and while I can repro it on .NET 6 preview 6, the test runs just fine on .NET 6 RC1. @Maoni0 said there was a change that came in preview 7 and that can likely fix the issue, so I gave it a try and it seems to be the case.\r\n\r\nI just updated my dockerfile with \r\n```\r\nFROM mcr.microsoft.com/dotnet/runtime:6.0.0-rc.1-bullseye-slim AS base\r\nWORKDIR /app\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0.100-rc.1-bullseye-slim AS build\r\n...\r\n```\r\n\r\nand wanted to report back that for my app nothing has changed.\r\n```\r\n{\"eventType\":\"FullGcMemoryInfoReport\",\"rowNum\":350000,\"gen0CollectionCount\":4,\"gen1CollectionCount\":3,\"gen2CollectionCount\":2,\"compacted\":true,\"concurrent\":false,\"generation\":1,\"index\":4,\"fragmentedBytes\":300936,\"promotedBytes\":4860848,\"finalizationPendingCount\":24,\"heapSizeBytes\":2210557344,\"memoryLoadBytes\":455081984,\"pauseTimePercentage\":0.95,\"pinnedObjectsCount\":1,\"totalCommittedBytes\":2292232192,\"totalAvailableMemoryBytes\":2437939200,\"highMemoryLoadThresholdBytes\":2925527040}\r\n{\"eventType\": \"CGroupMemoryReport\", \"rowNum\": 350000, \"limitInBytes\": 3250585600, \"usageInBytes\": 487907328, \"maxUsageInBytes\": 487907328}\r\nAborted\r\n```",
                                           "updatedAt":  "2021-09-15T23:14:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423ROS",
                                           "createdAt":  "2021-09-15T23:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Hmm, it is possible that this issue and the one in #50414 are different then. ",
                                           "updatedAt":  "2021-09-15T23:25:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc423RyA",
                                           "createdAt":  "2021-09-15T23:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@janvorli, it\u0027s also possible that you were hitting that issue (from what you showed me it definitely looked like you were hitting it) but @Bio2hazard was not. ",
                                           "updatedAt":  "2021-09-15T23:31:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4239fX",
                                           "createdAt":  "2021-09-16T07:14:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e To clarify, the default GCHeapHardLimitPercent for containers with a hard memory limit is 75%, so in those tests I\u0027m increasing the value, not reducing it. +1 So that test shows that increasing the limit from 75% -\u003e 80% is enough to make it pass.\r\n\r\nAh yes. Same as with increasing `--memory`, this shows increasing heap size a little makes the `OutOfMemoryException` no longer occurs.\r\n\r\nUsing `GCHeapHardLimitPercent` is more efficient because it allows to keep the same container memory limit.\r\n\r\n\u003e Conclusions\r\n\r\nFrom the table it\u0027s clear your limits are on the edge. Reducing 100MB memory makes it fail on .NET Core 3.1. Adding 75 MB makes it pass on .NET 5+.\r\n\r\n.NET 5+ needs a little more heap to run your application. It\u0027s a regression, though not a major one.",
                                           "updatedAt":  "2021-09-16T07:14:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc424uqV",
                                           "createdAt":  "2021-09-16T12:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Bio2hazard would you mind trying the experiment with modifying the limits with 6.0 RC1? I am interested in seeing if the behavior persists or if the increment needed to make it pass is smaller.",
                                           "updatedAt":  "2021-09-16T12:02:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc426MXM",
                                           "createdAt":  "2021-09-16T20:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "Sure thing @janvorli \r\n\r\nI used the `-rc.1-bullseye-slim` docker images for both runtime and sdk and set `\u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\u003cLangVersion\u003e10\u003c/LangVersion\u003e` in my csproj.\r\n\r\nFirst I tested .NET 6.0 RC1 Workstation GC\r\n3100MB: Pass\r\n3075MB: Fail\r\n\r\nThose results are the same as .NET 5\r\n\r\nNext I tested .NET 6.0 RC1 Server GC\r\n3200MB: Pass (3x)\r\n3175MB: Fail (3x) \r\n\r\nNext I re-tested .NET 5.0 Server GC since I previously had only ran it once with 3175MB where it had passed.\r\n3175MB: 2 Fails, 1 Pass\r\n\r\nSo it seems when I had tested .NET 5.0 Server GC before it just got lucky.\r\n\r\nI then wanted to determine the lowest amount of memory ( in 5MB increments ) where .NET 5.0 Server GC can pass 5 runs in a row. This turned out to be **3190MB**.\r\n\r\nI repeated that test for .NET 6.0 RC1, and it ended up being **3190MB** as well. In other words, I was unable to observe any differences between .NET 5 and .NET 6 RC1\r\n\r\n|  Version/GC Mode | 2975MB | 3000MB | 3100MB | 3190MB |\r\n| ------------------  |  -------  | -------  |  -------  | -------  | \r\n| .NET 3.1 Workstation | Fail | Pass | Pass | Pass |\r\n| .NET 5.0 Workstation | Fail | Fail | Pass | Pass |\r\n| .NET 6.0 RC1 Workstation | Fail | Fail | Pass | Pass |\r\n| .NET 3.1 Server | Fail | Fail | Pass | Pass |\r\n| .NET 5.0 Server | Fail | Fail | Fail | Pass |\r\n| .NET 6.0 RC1 Server | Fail | Fail | Fail | Pass |\r\n\r\nAs a side note, I looked into what is causing the ~120MB worth of Gen 0 garbage per GC cycle and it could be related to #27748 not quite sure, but all the allocations are coming from renting byte arrays from the ArrayPool. Or perhaps it chooses to release them instead of re-using them due to memory pressure? Not sure.",
                                           "updatedAt":  "2021-09-16T21:13:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc426m_F",
                                           "createdAt":  "2021-09-16T23:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "I replaced the default `MemoryPool\u003cT\u003e.Shared` used by `System.IO.Pipelines.Pipe` with a custom one based on `ConfigurableArrayPool`, to allow for more arrays per bucket and facilitate re-use.\r\n\r\nThis significantly dropped allocations and allows Server GC to run successfully on less memory. This + the fact that it also runs successfully on less memory with Workstation GC points towards Server GC choosing to go OOM instead of running a GC cycle.\r\n\r\nI think there are 2 problems at play here:\r\n1)\r\n\u003e .NET 5+ needs a little more heap to run your application. It\u0027s a regression, though not a major one.\r\n\r\n2) Server GC mode does not work well when the application is running close to its heap limit. It will go OOM without trying to run a GC cycle that would have prevented it.\r\n\r\nWith this information I might be able to set something up to reproduce the issue that I can share.",
                                           "updatedAt":  "2021-09-16T23:36:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc427eTx",
                                           "createdAt":  "2021-09-17T07:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I replaced the default MemoryPool\u003cT\u003e.Shared used by System.IO.Pipelines.Pipe with a custom one based on ConfigurableArrayPool, to allow for more arrays per bucket and facilitate re-use. This significantly dropped allocations and allows Server GC to run successfully on less memory. \r\n\r\ncc @davidfowl \r\n\r\n\u003e This significantly dropped allocations and allows Server GC to run successfully on less memory. This + the fact that it also runs successfully on less memory with Workstation GC points towards Server GC choosing to go OOM instead of running a GC cycle.\r\n\r\nOr that using Server GC is causing additional allocations on the heap that can\u0027t be reclaimed.\r\n\r\n\u003e Server GC mode does not work well when the application is running close to its heap limit. It will go OOM without trying to run a GC cycle that would have prevented it. With this information I might be able to set something up to reproduce the issue that I can share.\r\n\r\nIt is an interesting hypothesis, which was definitely the case for https://github.com/dotnet/runtime/issues/50414.\r\nThat was fixed in preview7. So you\u0027d need to reproduce it using latest .NET 6 preview/rc.",
                                           "updatedAt":  "2021-09-17T07:19:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc429lOw",
                                           "createdAt":  "2021-09-17T22:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "Ok @tmds @janvorli \r\n\r\nI think I was able to create some sample code that reproduces the issue: https://gist.github.com/Bio2hazard/ee353c1042ee56a97c0d0b3d62c590bc \r\n\r\nWith workstation GC this runs reliably, at least I didn\u0027t get any OOM despite running it for 5 minutes. On Server GC it will eventually go OOM, sometimes quickly, sometimes after a few minutes.\r\n\r\nThe memory requirements of the app should be static, which is why it works on workstation gc. Each cycle adds the same amount of garbage to the heap, so the fact that server GC sometimes goes OOM after 1 second, and sometimes goes OOM after 60 seconds should indicate that the OOM is purely driven by GC behavior, not app requirements.\r\n\r\nThe app itself just allocates a large amount of memory to the LOH and then endlessly thrashes a small amount of memory. It also shows the annoying issue with array pool and async that was leading to unexpected allocations in my production app.\r\n\r\nPlease let me know if the repro sample works for you.",
                                           "updatedAt":  "2021-09-17T22:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43MrcQ",
                                           "createdAt":  "2021-09-23T18:53:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "Hi @tmds, \r\n\r\njust wanted to follow up and ask if the reproduction code worked. It uses the RC `runtime:6.0.0-rc.1-bullseye-slim`.\r\n\r\nI\u0027d love to see this fixed so I\u0027d like to know if there\u0027s anything else I can do to help on this.",
                                           "updatedAt":  "2021-09-23T18:53:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43MuQj",
                                           "createdAt":  "2021-09-23T19:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Bio2hazard I am sorry, I\u0027ve completely missed your previous comment with a link to the repro. Thank you a lot for that! I\u0027ll give it a try. I suspect that the issue might be related to the fact that on Unix, the mmap allocated memory doesn\u0027t actually get reflected in any cgroups values that report memory in use until the pages are touched. In fact, they don\u0027t contribute to the resident set at all until they are touched. The discrepancy between what GC sees as a committed memory and the memory load reported by cgroups might throw it over the edge in some specific cases. But that\u0027s just my theory.",
                                           "updatedAt":  "2021-09-23T19:10:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43NT6r",
                                           "createdAt":  "2021-09-23T23:30:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "Hi @janvorli ,\r\n\r\n\u003e I suspect that the issue might be related to the fact that on Unix, the mmap allocated memory doesn\u0027t actually get reflected in any cgroups values that report memory in use until the pages are touched.\r\n\r\nThat\u0027s a reasonable assumption, but I\u0027ve actually accounted for that. 👍 \r\n\r\nIn my reproduction code I make sure to [touch](https://gist.github.com/Bio2hazard/ee353c1042ee56a97c0d0b3d62c590bc#file-program-cs-L85-L95) [every](https://gist.github.com/Bio2hazard/ee353c1042ee56a97c0d0b3d62c590bc#file-program-cs-L18) [buffer](https://gist.github.com/Bio2hazard/ee353c1042ee56a97c0d0b3d62c590bc#file-program-cs-L33) right away.\r\n\r\nWhen I first started investigating this issue, I stumbled across https://github.com/dotnet/runtime/issues/55126#issuecomment-875246868 which recommends using [TouchPage](https://github.com/dotnet/performance/blob/main/src/benchmarks/gc/src/exec/GCPerfSim/GCPerfSim.cs#L1925) to ensure the pages are touched, so I\u0027ve been making sure to account for that throughout my work to root cause this problem.",
                                           "updatedAt":  "2021-09-23T23:30:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43NWk1",
                                           "createdAt":  "2021-09-24T00:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Bio2hazard while you have accounted for the buffers you allocate, you cannot do the same for allocations made by the managed and native parts of the runtime. So there will always be some discrepancy depending on what your app does. I have noticed in the past that e.g. openssl allocates quite a lot of native memory and I am not sure what are the usage patterns around that memory. But as for your repro, I think the difference will be quite small.\r\nAnyways, I was able to reliably reproduce the problem locally using your repro and I am investigating it. So far I can see that when it OOMs, an allocation that overflows the GC budget is requested. Your code requests allocation of 4kB array and GC needs to allocate more space for the current heap\u0027s allocation context. So it requests 2621440 bytes from the small object heap and that overflows the budget.",
                                           "updatedAt":  "2021-09-24T00:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43NmGE",
                                           "createdAt":  "2021-09-24T03:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I think I was able to create some sample code that reproduces the issue: https://gist.github.com/Bio2hazard/ee353c1042ee56a97c0d0b3d62c590bc\r\n\r\nI\u0027m looking at the example.\r\n\r\nBecause of the `await Task.Delay(3)` you\u0027re jumping threads which causes `ArrayPool\u003cbyte\u003e.Shared` to use extra memory due to thread local buffers:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b82e8389715b27509ba10a50d9a14e125b8329d8/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L31-L33\r\n\r\nThat extra memory needed as the app runs could be enough for the OOM.\r\n\r\nOr, there is still reclaimable memory but the GC doesn\u0027t try to collect (or is limited in what it can collect) when an allocation fails. This may be a bug, or it can be by design. @janvorli @Maoni0 what is the expected behavior?",
                                           "updatedAt":  "2021-09-24T03:15:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43QCky",
                                           "createdAt":  "2021-09-24T22:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESmNLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "steveatthru",
                                                                               "createdAt":  "2023-07-19T21:43:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "cbersch",
                                                                               "createdAt":  "2025-05-19T08:05:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "@janvorli hah good catch, yeah I can\u0027t account for the managed and native runtime parts. Glad to hear the repro is working!\r\n\r\n@tmds yes, I\u0027m aware of the implications of the `await Task.Delay(3)` - in fact, I purposefully placed it there because I wanted to draw attention as to why my production app had unexpected allocations. Below it, I have a commented out line for `GC.AllocateUninitializedArray\u003cbyte\u003e(allocationSize);` which also worked to reproduce the issue. \r\n\r\nI think the issue is a bit more severe than saying it uses extra memory. While technically correct, it consistently uses extra memory to the point where the pooling provides almost no benefit at all, and I would argue that most developers would not expect that behavior from ArrayPool.Shared. Since the amount of buffers per pool size is limited, and each thread has its own pool, it appears that any async usage / thread jumps between renting and returning can easily lead to one thread exhausting its available buffers, while the other thread discards returned buffers due to being at the limit.\r\n\r\nThere are 2 problems with this.\r\n1) The [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.arraypool-1.shared?view=net-5.0#System_Buffers_ArrayPool_1_Shared) for `ArrayPool\u003cT\u003e.Shared` makes no mention of this behavior. I feel it should caution against renting / returning on different threads. ( It would also be wonderful if a separate default pool could be offered that forgoes the PerCore cpu advantages in favor of reliably pooling memory in a async setting )\r\n\r\n2) Look at the [usage examples](https://devblogs.microsoft.com/dotnet/system-io-pipelines-high-performance-io-in-net/) for `System.IO.Pipelines`, which is the first search result. The recommended pattern is to concurrently read and process on 2 separate threads. In my production app this lead to repeated buffer allocations, which is one of the things that - as per the doc - the pipelines should prevent.\r\n\r\nIt\u0027s of course possible that I mis-interpreted the behavior, but between #27748 and the behavior observed in both my production app and the reproduction sample, it definitely seems easy to run into unexpected allocations.\r\n\r\n\r\n\u003e That extra memory needed as the app runs could be enough for the OOM.\r\n\r\nThe absolute memory requirements of the reproduction do not exceed the available memory, so it runs without issues on Workstation GC. Furthermore, on server GC it runs for a variable amount of time, so some number of iterations pass. It just seems like the GC tries to squeeze in a bit more than is available and fails out without running a GC cycle that could\u0027ve prevented it.",
                                           "updatedAt":  "2021-09-24T22:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43QDad",
                                           "createdAt":  "2021-09-24T22:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Related: https://github.com/dotnet/runtime/issues/52098",
                                           "updatedAt":  "2021-09-25T12:51:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43QjxZ",
                                           "createdAt":  "2021-09-25T08:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Below it, I have a commented out line for GC.AllocateUninitializedArray\u003cbyte\u003e(allocationSize); which also worked to reproduce the issue.\r\n\r\nAre you also uncommenting the `ArrayPool\u003cbyte\u003e.Shared.Return`?\r\n\r\n\u003e  it consistently uses extra memory to the point where the pooling provides almost no benefit at all, and I would argue that most developers would not expect that behavior from ArrayPool.Shared.\r\n\r\nIt uses the TLS storage for extra performance at the cost of some memory.\r\n\r\nAlso, because your app runs so close to the memory limit, it will trim buffers on gen2 GC also undoing the performance benefit of pooling:\r\n\r\nhttps://github.com/dotnet/runtime/blob/b82e8389715b27509ba10a50d9a14e125b8329d8/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L292\r\n\r\nSo for this to work well, you need to pay with some memory.\r\n\r\n\u003e The absolute memory requirements of the reproduction do not exceed the available memory, so it runs without issues on Workstation GC.\r\n\r\nWorkstation GC will be more deterministic. Server GC will reduce GC pause time to improve overall response time but that comes at the cost of extra resources, which may include memory.\r\n\r\nBecause an app runs under a limit with workstation GC does not mean the app will not go OOM under the same limit with server GC.\r\n\r\n\u003e without running a GC cycle\r\n\r\nI\u0027m curious to learn if a GC is performed on the path that leads to the OOM exception, and whether it may be limited in some way.",
                                           "updatedAt":  "2021-09-25T08:26:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43QnNV",
                                           "createdAt":  "2021-09-25T10:35:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsNIhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "queensengineer",
                                                                               "createdAt":  "2022-06-14T04:22:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ldy985",
                                                                               "createdAt":  "2022-09-14T11:00:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Bio2hazard",
                                           "body":  "\u003e Are you also uncommenting the ArrayPool\u003cbyte\u003e.Shared.Return?\r\n\r\nYes, though the numbers at the top may need to be tweaked for optimal reproduction of the issue with `GC.AllocateUninitializedArray(allocationSize);`. After I made the decision to go with ArrayPool.Shared I tweaked things to find the optimal reproduction case for that, so I don\u0027t know how exactly it\u0027ll behave with the current settings.\r\n\r\n\u003e Also, because your app runs so close to the memory limit, it will trim buffers on gen2 GC also undoing the performance benefit of pooling:\r\n\r\nIf you look at the Trim code, it uses `Utilities.GetMemoryPressure()`\r\n\r\nhttps://github.com/dotnet/runtime/blob/c344d64b05a5530fa3a633a2e993f7bb7ca163fb/src/libraries/System.Private.CoreLib/src/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs#L190\r\n\r\nWhich in turn uses `HighMemoryLoadThresholdBytes` to determine memory load.\r\n\r\nhttps://github.com/dotnet/runtime/blob/c344d64b05a5530fa3a633a2e993f7bb7ca163fb/src/libraries/System.Private.CoreLib/src/System/Buffers/Utilities.cs#L40-L48\r\n\r\nThis actually takes us back full circle to the original topic of this issue, that `HighMemoryLoadThresholdBytes` is higher than `TotalAvailableMemoryBytes` , which was stated in previous responses as being the default and _by design_ and dialog then shifted to the OOM I\u0027ve been encountering.\r\n\r\nThis means for a container with a 3 GB limit, the ArrayPool.Shared implementation will only start aggressively trimming if the Memory Load exceeds `2,609,192,631` - **however** the `TotalAvailableMemoryBytes` on a 3 GB container is just `2,415,919,104`. This means when run on a container with a memory limit, ArrayPool.Shared is unaware that the app is running close to the memory limit and will never be able to aggressively trim.\r\n\r\n\u003e Because an app runs under a limit with workstation GC does not mean the app will not go OOM under the same limit with server GC.\r\n\r\nBased on previous comments I was lead to believe that a OOM situation on server GC that doesn\u0027t occur on workstation GC was an anomaly, and that the server GC mode should attempt a full GC prior to going OOM:\r\n\r\n\u003e another thing I should mention, if it\u0027s not obvious, is that of course we would do a full compacting GC if we cannot commit memory based on the hardlimit.\r\n\r\n\u003e yeah, if it doesn\u0027t get OOM with workstation GC but does with Server, or if it doesn\u0027t get OOM with a larger limit but with a smaller limit, that\u0027s clearly an issue that should be investigated.\r\n\r\nSo at this point I don\u0027t know what the expected behavior here is. I\u0027m very curious to see what @janvorli s investigation reveals.",
                                           "updatedAt":  "2021-09-25T10:35:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43SrG_",
                                           "createdAt":  "2021-09-27T08:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e ArrayPool.Shared is unaware that the app is running close to the memory limit and will never be able to aggressively trim.\r\n\r\nI agree. This should also consider load of the managed heap in a container, and that should trigger agressive trimming in this example.\r\n\r\nLooking at the reproducer from performance perspective, you don\u0027t want this trimming to occur.\r\nSo if this is your expected workload, you should increase your available memory. Or, you should use a pool that requires less memory (e.g. not keeping per thread/core buckets).",
                                           "updatedAt":  "2021-09-27T08:28:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-y5aJ",
                                           "createdAt":  "2022-02-27T11:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEamcqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ouranders",
                                                                               "createdAt":  "2022-03-03T14:31:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanmagdic",
                                                                               "createdAt":  "2022-04-02T10:49:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Squiggle",
                                                                               "createdAt":  "2022-04-05T13:00:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saber-wang",
                                                                               "createdAt":  "2022-04-07T06:47:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deidei1216",
                                                                               "createdAt":  "2022-04-10T12:06:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "queensengineer",
                                                                               "createdAt":  "2022-06-14T04:21:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oleg-varlamov",
                                                                               "createdAt":  "2022-07-04T09:35:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kennethlong",
                                                                               "createdAt":  "2022-08-09T14:41:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mfielibert",
                                                                               "createdAt":  "2022-09-14T14:23:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oruchreis",
                                                                               "createdAt":  "2022-09-16T11:43:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RodrigoAWeber",
                                                                               "createdAt":  "2022-09-26T19:30:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fhelwanger",
                                                                               "createdAt":  "2022-09-26T19:39:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akashkeshari",
                                                                               "createdAt":  "2023-02-12T12:46:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rolfwessels",
                                                                               "createdAt":  "2023-04-13T09:46:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GiorgioG",
                                                                               "createdAt":  "2023-05-31T18:45:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveatthru",
                                                                               "createdAt":  "2023-07-19T21:14:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "groone",
                                                                               "createdAt":  "2023-09-29T08:00:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheGeka",
                                                                               "createdAt":  "2024-02-02T14:20:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TehGM",
                                                                               "createdAt":  "2024-04-20T14:40:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Strepto",
                                                                               "createdAt":  "2025-05-07T07:40:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cbersch",
                                                                               "createdAt":  "2025-05-19T08:18:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sicil1ano",
                                                                               "createdAt":  "2025-07-15T09:42:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  22
                                                         },
                                           "author":  "BMartin345",
                                           "body":  "Any updates on this issue?",
                                           "updatedAt":  "2022-02-27T11:48:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BCbpM",
                                           "createdAt":  "2022-04-07T07:07:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saber-wang",
                                           "body":  "This problem is also encountered in the container\r\n```\r\nSystem.OutOfMemoryException: Exception of type \\u0027System.OutOfMemoryException\\u0027 was thrown.    at System.GC.AllocateNewArray(IntPtr typeHandle, Int32 length, GC_ALLOC_FLAGS flags)    at System.GC.\\u003CAllocateUninitializedArray\\u003Eg__AllocateNewUninitializedArray|66_0[T](Int32 length, Boolean pinned)    at System.Buffers.TlsOverPerCoreLockedStacksArrayPool\\u00601.Rent(Int32 minimumLength)    at System.Text.Json.Utf8JsonWriter.WriteStringEscapeValue(ReadOnlySpan\\u00601 value, Int32 firstEscapeIndexVal)    at System.Text.Json.Serialization.Converters.StringConverter.Write(Utf8JsonWriter writer, String value, JsonSerializerOptions options)    at System.Text.Json.Nodes.JsonObject.WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)    at System.Text.Json.Nodes.JsonObject.WriteTo(Utf8JsonWriter writer, JsonSerializerOptions options)    at System.Text.Json.Nodes.JsonNode.ToJsonString(JsonSerializerOptions options) \r\n```\r\n",
                                           "updatedAt":  "2022-04-07T07:07:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BFjFt",
                                           "createdAt":  "2022-04-07T16:46:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXxVhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saber-wang",
                                                                               "createdAt":  "2022-04-13T01:05:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@saber-wang your issue seems to be unrelated to this. Could you please create a separate bug with repro or dumps? Usually OOMs are not GC related, but the application not freeing memory appropriately. \r\n\r\nAlso for this particular issue this looks to be something to be fixed in ArrayPool? ",
                                           "updatedAt":  "2022-04-07T16:46:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lboZA",
                                           "createdAt":  "2023-08-31T20:32:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKayJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "groone",
                                                                               "createdAt":  "2023-09-29T07:51:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davgia",
                                                                               "createdAt":  "2023-10-20T10:08:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "steelheaddigital",
                                           "body":  "I just want to confirm that we are also seeing this issue with .NET 6 and Docker Swarm. We were seeing a steady stream of System.OutOfMemoryException. Disabling Docker memory limits stopped the errors. The hosts have plenty of free memory and memory limits were set sufficiently above what the containers were actually using. This is with Docker version 24.0.2.",
                                           "updatedAt":  "2023-08-31T20:37:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ppYbF",
                                           "createdAt":  "2023-10-20T10:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davgia",
                                           "body":  "I want to add that the issue is present even with .NET 6 and Kubernetes (containerd). What I\u0027ve noticed is that the process does not use more than the 50% of the available memory (limited from K8s). Is there a way to advise the process memory limit?",
                                           "updatedAt":  "2023-10-20T10:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pskqR",
                                           "createdAt":  "2023-10-20T19:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKLBPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "springjazzy",
                                                                               "createdAt":  "2024-10-10T12:04:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mdrakiburrahman",
                                                                               "createdAt":  "2025-03-15T20:17:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2025-03-17T12:54:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "groone",
                                           "body":  "Workaround is to define DOTNET_GCHighMemPercent environment variable (in hex): https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#high-memory-percent\r\nThe defaults for a k8s container with memory limits are insane. High memory is defined higher than the total limit : High memory is by default 90% of physical limit while the max heap size is 75% of physical limit. The heap size limit is reached first and OutOfMemoryException is thrown as containers don\u0027t use swap memory. \r\nSo for my ~ 1 GB container I went for 72% ( DOTNET_GCHighMemPercent  = 48 ) and it solved the out of memory exception problems for me.",
                                           "updatedAt":  "2023-10-20T20:03:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6irvnL",
                                           "createdAt":  "2025-03-17T12:49:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003e @tmds \n\u003e Or, you should use a pool that requires less memory (e.g. not keeping per thread/core buckets).\n\nSometimes you don\u0027t get the choice of pool.\n\nE.g. I have an application that seems to be hitting the ArrayPool related OOM exception due to NpgSql using `ArrayPool\u003cbyte\u003e.Shared` to obtain a scaled-out row buffer beyond the default buffer size. Because it happens in the shared pool that can compound when other functionality re-renting buffers and being handed those large ones, forcing NpgSql to be given new ones when it asks for a re-rent. Which happens every time a connection is closed and re-opened, afaict.\n\n\n\u003e @groone \n\u003e Workaround is to define DOTNET_GCHighMemPercent environment variable\n\nThank you for that tidbit. I\u0027m going to check with my team\u0027s ops engineers to see if we can apply that in an easy manner to give it a try as well.\n",
                                           "updatedAt":  "2025-03-17T12:56:13Z"
                                       }
                                   ],
                         "totalCount":  40
                     },
        "title":  " .NET 6 container throws OutOfMemoryException",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59003",
        "createdAt":  "2021-09-12T18:17:39Z",
        "number":  59003,
        "author":  "luckerby",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-20T15:23:00Z",
        "body":  "### Description\r\n\r\nI\u0027m running a tool that is allocating memory with an optional toggle of touching a percentage of that memory. The purpose is to run various tests on Windows and Linux. When the touch ratio is set to 0 - that is not touch any of the allocated memory - the result is as expected in Windows, but rather strange in Linux. Namely the working set (WS) in Windows is close to 0 (ok) but the resident set size (RSS) in Linux increases by the amount of memory allocated (not ok).\r\n\r\nThe tool - some small C# code allocating int[] arrays - is in [this repo](https://github.com/luckerby/AllocMem). Touching the memory is done based on the fact that an int always takes 4 bytes (regardless of 32/64 bit platform), that the page size under both Windows and Linux is usually 4 KB and that the contents of an array are stored in contiguous memory; hence writing every 1024th byte makes sure that the whole 4 KB page is brought to the physical RAM.\r\n\r\n### Configuration\r\n\r\nTested on Ubuntu 20.04.2 LTS under WSL2 on a Windows 10 64-bit. Both .NET 5 and .NET Core 3.1 encounter the same issue.\r\n\r\n### Regression?\r\n\r\nUnder .NET Core 3.1 the amount of RSS grows only to approximately 50% of the allocated size, as opposed to .NET 5 where the amount is about 100%.\r\n\r\n### Data\r\n\r\nUsing the tool to allocate 200 memory blocks, each of 1 MB. None of that memory is touched. On Windows, everything works as expected - note the roughly 200 MB in the private set (more because of the processes own aside the allocated data) and the extremely small working set:\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/132997611-92f4b78c-ec67-48e4-8ebe-9c4aff1ea576.png)\r\n\r\nSame application - with the same parameters (200 memory blocks, each of 1 MB) - running under Linux shows a very different picture. Note htop\u0027s RES (the equivalent of the resident set size) going up to 230 MB (it starts from ~30 MB, as the application pauses before starting to allocate and I\u0027m able to see the value).\r\n![image](https://user-images.githubusercontent.com/31319583/132997737-0346c131-425b-4145-99d8-718e532116cc.png)\r\n\r\nHere\u0027s pmap running against the same process, showing 2 segments that are almost entirely present in RAM, corresponding to the memory allocated (I can identify them because I\u0027m getting a previous pmap output before the allocation starts). Values are in KB:\r\n![image](https://user-images.githubusercontent.com/31319583/132997923-d8337248-c03f-4dbd-9221-e59e85ca9fe8.png)\r\n\r\nAn interesting thing happens if the touch ratio is modified. Changing from 0 (no allocated memory is touched) to 10% (touch 10% of the 200 MB in the example above, namely 20 MB) results in the Windows app behaving just as expected (there\u0027s ~4 MB in the WS before the allocation starts):\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/132998019-73a5c550-a152-42f2-8264-a3a1f6061575.png)\r\n\r\nUnder Linux, with the same parameters, the results are almost correct (RES starts from ~30 MB before the allocation):\r\n![image](https://user-images.githubusercontent.com/31319583/132998039-e2cf2f2d-7ea9-4049-b84d-19cd7bf0f309.png)\r\n\r\n.NET 5 was used for both Windows and Linux runs above.\r\n\r\n### Analysis\r\nIt\u0027s as if the CLR decides that if not a single byte of the allocated memory is touched (touch rate is 0), then it will bring it all in the physical RAM",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVam_Wg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42ssHv",
                                           "createdAt":  "2021-09-12T18:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-12T18:17:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42stBU",
                                           "createdAt":  "2021-09-12T18:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m running a tool that is allocating memory with an optional toggle of touching a percentage of that memory. The purpose is to run various tests on Windows and Linux. When the touch ratio is set to 0 - that is not touch any of the allocated memory - the result is as expected in Windows, but rather strange in Linux. Namely the working set (WS) in Windows is close to 0 (ok) but the resident set size (RSS) in Linux increases by the amount of memory allocated (not ok).\r\n\r\nThe tool - some small C# code allocating int[] arrays - is in [this repo](https://github.com/luckerby/AllocMem). Touching the memory is done based on the fact that an int always takes 4 bytes (regardless of 32/64 bit platform), that the page size under both Windows and Linux is usually 4 KB and that the contents of an array are stored in contiguous memory; hence writing every 1024th byte makes sure that the whole 4 KB page is brought to the physical RAM.\r\n\r\n### Configuration\r\n\r\nTested on Ubuntu 20.04.2 LTS under WSL2 on a Windows 10 64-bit. Both .NET 5 and .NET Core 3.1 encounter the same issue.\r\n\r\n### Regression?\r\n\r\nUnder .NET Core 3.1 the amount of RSS grows only to approximately 50% of the allocated size, as opposed to .NET 5 where the amount is about 100%.\r\n\r\n### Data\r\n\r\nUsing the tool to allocate 200 memory blocks, each of 1 MB. None of that memory is touched. On Windows, everything works as expected - note the roughly 200 MB in the private set (more because of the processes own aside the allocated data) and the extremely small working set:\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/132997611-92f4b78c-ec67-48e4-8ebe-9c4aff1ea576.png)\r\n\r\nSame application - with the same parameters (200 memory blocks, each of 1 MB) - running under Linux shows a very different picture. Note htop\u0027s RES (the equivalent of the resident set size) going up to 230 MB (it starts from ~30 MB, as the application pauses before starting to allocate and I\u0027m able to see the value).\r\n![image](https://user-images.githubusercontent.com/31319583/132997737-0346c131-425b-4145-99d8-718e532116cc.png)\r\n\r\nHere\u0027s pmap running against the same process, showing 2 segments that are almost entirely present in RAM, corresponding to the memory allocated (I can identify them because I\u0027m getting a previous pmap output before the allocation starts). Values are in KB:\r\n![image](https://user-images.githubusercontent.com/31319583/132997923-d8337248-c03f-4dbd-9221-e59e85ca9fe8.png)\r\n\r\nAn interesting thing happens if the touch ratio is modified. Changing from 0 (no allocated memory is touched) to 10% (touch 10% of the 200 MB in the example above, namely 20 MB) results in the Windows app behaving just as expected (there\u0027s ~4 MB in the WS before the allocation starts):\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/132998019-73a5c550-a152-42f2-8264-a3a1f6061575.png)\r\n\r\nUnder Linux, with the same parameters, the results are almost correct (RES starts from ~30 MB before the allocation):\r\n![image](https://user-images.githubusercontent.com/31319583/132998039-e2cf2f2d-7ea9-4049-b84d-19cd7bf0f309.png)\r\n\r\n.NET 5 was used for both Windows and Linux runs above.\r\n\r\n### Analysis\r\nIt\u0027s as if the CLR decides that if not a single byte of the allocated memory is touched (touch rate is 0), then it will bring it all in the physical RAM\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eluckerby\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-12T18:41:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42vO1a",
                                           "createdAt":  "2021-09-13T16:12:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@luckerby this feels similar to https://github.com/dotnet/runtime/issues/52592, which have been fixed in 6.0. @PeterSolMS fyi. ",
                                           "updatedAt":  "2021-09-13T16:12:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42v_7M",
                                           "createdAt":  "2021-09-13T20:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "Same outcome running under .NET 6.0.0-preview.7.21377.19 when not touching any of the allocated data:\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/133151132-da8d371e-50f9-451c-90d6-adefbb3be978.png)\r\n\r\nAnd also the same outcome as in my original post when just touching 10% of the allocated memory:\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/133151431-7724c29c-9b23-4d14-98bf-f629bfb18e44.png)\r\n\r\n@mangod9 I\u0027ve looked at the issue you referenced, but I believe there the problem was a high RSS a while after GC was running. In my case, the issue is visible right when allocating the memory. It\u0027s also rather weird, as not touching any of the bytes allocated results in all the corresponding memory pages to be brought in RAM, while touching a non-zero percentage does result in only the required memory pages being brought to RAM.",
                                           "updatedAt":  "2021-09-13T20:30:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42_K8E",
                                           "createdAt":  "2021-09-19T20:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@jkotas @mangod9 I\u0027m not sure if this is a GC issue though, as the scenario (not touching any allocated memory paradoxically results in all of it in the resident set) should be handled by .NET - in my mind at least - way before GC has a chance to kick in.",
                                           "updatedAt":  "2021-09-19T20:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43BeTH",
                                           "createdAt":  "2021-09-20T17:32:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "so from your experiments there seems to be some regression in 5.0 compared to 3.1? Adding @janvorli in case you have seen something related to this. ",
                                           "updatedAt":  "2021-09-20T17:32:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Bpt9",
                                           "createdAt":  "2021-09-20T18:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@luckerby I have tried to run your tool on my Ubuntu 16.04 physical device with x64 and 24GB of RAM. I am not getting the issue you are reporting. See this gist for the pmap dump at https://gist.github.com/janvorli/3f056a31df68d0b17e12755e661fc219.\r\n\r\nI\u0027ve ran your tool as follows:\r\n`AllocMem -m 1 -f 0 -x 200`\r\n\r\nAm I using a wrong command line?",
                                           "updatedAt":  "2021-09-20T18:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43CJ6W",
                                           "createdAt":  "2021-09-20T21:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@janvorli Command line is good, and your output looks just as it should be - most likely the 2 virtual memory areas that the app allocates using the int[] blocks are line 8 and 22 in your pmap dump, which sum up to the 200 MB requested but using almost nothing in terms of RSS. Btw which .NET version are you on?\r\nOn my side I\u0027ve tested on another Windows 10 machine that also has Ubuntu 20.04.2 LTS, but I get the same wrong outcome as in my original post. Since we\u0027re running the same distro, I can only think it\u0027s either due to something that changed between 16.04 and 20.04 for Ubuntu or it has to do with WSL2.\r\nI\u0027m not quite sure where the issue comes from: would it be JITted code that explicitly touches all the pages due to some weird \"optimization\" the JIT compiler decides to do for that edge case? Or is it something at the OS level, where the pages get touched after `mmap?",
                                           "updatedAt":  "2021-09-20T21:08:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43CKy-",
                                           "createdAt":  "2021-09-20T21:13:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@mangod9 I wouldn\u0027t say it\u0027s a regression, as no page should have made it into physical RAM for the int[] arrrays allocated under the scenario specifying a 0 touch fill rate. It\u0027s more like both outcomes are wrong - the fact that .NET Core 3.1 only brings half of that data into RAM as compared to .NET 5 only makes the whole thing more puzzling.",
                                           "updatedAt":  "2021-09-20T21:13:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Ch-r",
                                           "createdAt":  "2021-09-20T22:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@luckerby the difference is that I am not running on WSL2, but rather on a device with Linux only installed. I wonder if the WSL2 is responsible for this misbehavior. I don\u0027t see anything in our JIT / runtime that would touch the memory.\r\nI was testing it with your project untouched and using `dotnet publish -r linux-x64 --self-contained` to build it and then executing the `bin/Debug/net5.0/linux-x64/publish/AllocMem`. So it was using .NET 5 as requested in your .csproj. I can see it was using 5.0.2 to be precise.",
                                           "updatedAt":  "2021-09-20T22:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43C5IM",
                                           "createdAt":  "2021-09-21T01:32:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@janvorli A quick check using C to simply allocate 400 MB shows that there\u0027s nothing being touched by default (below, with the corresponding code further down) under the same WSL2 system.\r\nI wonder how could we determine whether it\u0027s .NET\u0027s fault or not? Try and use LLDB to see the JITted code?\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/134098337-b4767e7f-f88a-4497-ae13-22ed55a9052a.png)\r\n\r\n\r\n```\r\n#include \u003cstdlib.h\u003e\r\n#include \u003cstdio.h\u003e\r\n\r\n#define MB 1024*1024\r\n\r\nint main(int argc, char **argv)\r\n{\r\n        int* ptr = (int*)malloc(100 * MB * sizeof(int));\r\n        //for (int i = 0; i \u003c 100 * MB; i+= 4096)\r\n\t//\tptr[i] = 0;\r\n\tgetchar();\r\n}\r\n```",
                                           "updatedAt":  "2021-09-21T01:32:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Rdye",
                                           "createdAt":  "2021-09-26T15:36:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "I\u0027ve tested on a different distro on WSL2, and the bug isn\u0027t there. The same exact code running on Debian 9 on WSL2 in the top half, Ubuntu 20.04 LTS on WSL2 in the bottom half. Both systems have .NET 5.0.10 (second snapshot below), and the code is set to target .NET 5.\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/134814229-ffdfd4b2-1ddd-4016-b4ea-446d797ab39e.png)\r\n\r\nVersions:\r\n![image](https://user-images.githubusercontent.com/31319583/134814446-f02d2d68-d876-4078-a32e-b9ffc1233861.png)\r\n",
                                           "updatedAt":  "2021-09-26T15:36:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Rjmo",
                                           "createdAt":  "2021-09-26T18:25:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "Also tested on SLES 12 on WSL2, but the bug isn\u0027t present there as well. Note the process taking up ~20 MB in RAM after the allocations completed (size before allocation started was ~17 MB):\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/134819624-9e830347-bc4d-4727-b25a-2fe46537d504.png)\r\n",
                                           "updatedAt":  "2021-09-26T18:25:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TmGq",
                                           "createdAt":  "2021-09-27T13:37:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Interesting, so it looks like an Ubuntu 20.04 issue then. It would be interesting to try it in an Ubuntu 20.04 docker container. It might also be related to a kernel version. @luckerby can you please check the kernel version on the distros you\u0027ve tested?",
                                           "updatedAt":  "2021-09-27T13:37:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4325T9",
                                           "createdAt":  "2021-10-06T21:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@janvorli the result of running inside an Ubuntu container is the same:\r\n\r\n![image](https://user-images.githubusercontent.com/31319583/136280997-0b2159ba-e2f5-4442-8f56-1f951171a7ce.png)\r\n\r\nThe Linux kernel versions for the distros I\u0027ve tested in my previous posts is below. I think you might be on to something here, as the ones where the app behaved as expected were all 4.x.\r\n\r\nUbuntu 20.04 LTS: `5.10.16.3-microsoft-standard-WSL2`\r\nDebian 9: `4.4.0-19041-Microsoft`\r\nSLES 12: `4.4.0-19041-Microsoft`",
                                           "updatedAt":  "2021-10-06T21:06:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4327EJ",
                                           "createdAt":  "2021-10-06T21:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@janvorli I\u0027ve spotted some extra weird behavior coming only from Ubuntu on WSL. I\u0027ve ran the memory leak tool with a higher, non-zero, \"touch\" parameter, so that a quarter of the 200 MB actually get touched. Here\u0027s the outcome captured in a short movie [here](https://www.screencast.com/t/vtoe5opRjtk). Note what happens about 15 seconds after the application has finished its allocation/touch. That process continues gradually until all the allocated memory is eventually brought in the resident set, without the app doing anything (it has already finished its run, and only waiting the hotkey to exit).",
                                           "updatedAt":  "2021-10-06T21:11:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SDSa",
                                           "createdAt":  "2021-10-15T12:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsldzQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luckerby",
                                                                               "createdAt":  "2021-10-26T21:08:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2022-09-21T12:42:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I just got an idea what can be going on here. Linux kernel \u003e= 4.5 supports a new MADV_FREE flag that can be used by madvise to mark memory as no longer needed in the near future. We use that if it is supported. In kernels \u003c 4.5, we use MADV_DONTNEED instead. That has a slightly different behavior. The MADV_FREE can keep the backing physical pages allocated until there is a memory pressure in the system. The MADV_DONTNEED seems to release the physical pages right away (at least that\u0027s what I understand from the doc). That could explain why the behavior we are seeing on Ubuntu 20.04 that has kernel 5.10.16.3 differs from the behavior on Debian 9 / SLES 12 that have kernel 4.4.0.",
                                           "updatedAt":  "2021-10-15T12:25:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45YIXa",
                                           "createdAt":  "2021-11-07T15:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luckerby",
                                           "body":  "@janvorli I\u0027ve updated the WSL kernel to `5.10.60.1-microsoft-standard-WSL2` and I\u0027m getting the same exact behavior as described previously. Using an alternate platform - and running the tool inside a container on top of AKS nodes (kernel `5.4.0-1059-azure`) - results in a somewhat similar outcome, although the RSS is slightly smaller than when testing against the WSL distros. This appears to confirm your theory that there\u0027s something with the 5.x Linux kernel.\r\n\r\nOne additional pattern I\u0027ve spotted in both cases is that the smaller the block used to allocate memory (e.g. 1 MB) the largest unjustified contribution to RAM usage is observed.\r\n\r\nOutcome of running as a container in AKS under .NET 5 is below. The first 2 values printed every other line are extracted using `System.Diagnostics.Process.GetCurrentProcess()`. Whatever heuristic is used by Linux to keep the pages in RAM is interesting, particular since there\u0027s nothing being touched by the allocator app and in theory those backing pages shouldn\u0027t have been created in the first place (but instead Linux would wait - similar to Windows - until some access is requested that would mandate creating those pages). Note that when allocating the first blocks, there\u0027s more that goes into RAM than the size of the block that was just allocated :)\r\n```\r\n1500.00 MB of initial memory visible\r\nWill allocate 200 blocks of memory each consuming 1 MB, as to hit a limit of 200 MB\r\nList\u003cint[]\u003e will consume 1656 bytes\r\n\r\n= process stats: 34.50 MB in RAM / 79.89 MB private / 0 gen2 GCs run so far\r\nBlock #0  +1 MB (touched 0%)  [so far total allocated= 1 MB / total touched= 0 MB]\r\n= process stats: 37.78 MB in RAM / 80.96 MB private / 0 gen2 GCs run so far\r\nBlock #1  +1 MB (touched 0%)  [so far total allocated= 2 MB / total touched= 0 MB]\r\n= process stats: 39.78 MB in RAM / 82.02 MB private / 0 gen2 GCs run so far\r\nBlock #2  +1 MB (touched 0%)  [so far total allocated= 3 MB / total touched= 0 MB]\r\n= process stats: 39.78 MB in RAM / 83.08 MB private / 0 gen2 GCs run so far\r\nBlock #3  +1 MB (touched 0%)  [so far total allocated= 4 MB / total touched= 0 MB]\r\n= process stats: 44.10 MB in RAM / 76.09 MB private / 1 gen2 GCs run so far\r\nBlock #4  +1 MB (touched 0%)  [so far total allocated= 5 MB / total touched= 0 MB]\r\n= process stats: 44.10 MB in RAM / 77.09 MB private / 1 gen2 GCs run so far\r\nBlock #5  +1 MB (touched 0%)  [so far total allocated= 6 MB / total touched= 0 MB]\r\n= process stats: 46.10 MB in RAM / 78.09 MB private / 1 gen2 GCs run so far\r\nBlock #6  +1 MB (touched 0%)  [so far total allocated= 7 MB / total touched= 0 MB]\r\n= process stats: 46.10 MB in RAM / 79.19 MB private / 1 gen2 GCs run so far\r\nBlock #7  +1 MB (touched 0%)  [so far total allocated= 8 MB / total touched= 0 MB]\r\n= process stats: 48.90 MB in RAM / 88.87 MB private / 1 gen2 GCs run so far\r\nBlock #8  +1 MB (touched 0%)  [so far total allocated= 9 MB / total touched= 0 MB]\r\n= process stats: 49.16 MB in RAM / 90.09 MB private / 1 gen2 GCs run so far\r\nBlock #9  +1 MB (touched 0%)  [so far total allocated= 10 MB / total touched= 0 MB]\r\n= process stats: 51.16 MB in RAM / 91.16 MB private / 1 gen2 GCs run so far\r\nBlock #10  +1 MB (touched 0%)  [so far total allocated= 11 MB / total touched= 0 MB]\r\n= process stats: 51.16 MB in RAM / 92.22 MB private / 1 gen2 GCs run so far\r\nBlock #11  +1 MB (touched 0%)  [so far total allocated= 12 MB / total touched= 0 MB]\r\n= process stats: 53.39 MB in RAM / 93.29 MB private / 1 gen2 GCs run so far\r\nBlock #12  +1 MB (touched 0%)  [so far total allocated= 13 MB / total touched= 0 MB]\r\n= process stats: 53.39 MB in RAM / 94.29 MB private / 1 gen2 GCs run so far\r\nBlock #13  +1 MB (touched 0%)  [so far total allocated= 14 MB / total touched= 0 MB]\r\n= process stats: 55.39 MB in RAM / 95.35 MB private / 1 gen2 GCs run so far\r\nBlock #14  +1 MB (touched 0%)  [so far total allocated= 15 MB / total touched= 0 MB]\r\n= process stats: 59.39 MB in RAM / 184.56 MB private / 2 gen2 GCs run so far\r\nBlock #15  +1 MB (touched 0%)  [so far total allocated= 16 MB / total touched= 0 MB]\r\n= process stats: 61.39 MB in RAM / 185.56 MB private / 2 gen2 GCs run so far\r\nBlock #16  +1 MB (touched 0%)  [so far total allocated= 17 MB / total touched= 0 MB]\r\n= process stats: 61.39 MB in RAM / 186.56 MB private / 2 gen2 GCs run so far\r\nBlock #17  +1 MB (touched 0%)  [so far total allocated= 18 MB / total touched= 0 MB]\r\n= process stats: 63.39 MB in RAM / 187.56 MB private / 2 gen2 GCs run so far\r\nBlock #18  +1 MB (touched 0%)  [so far total allocated= 19 MB / total touched= 0 MB]\r\n= process stats: 63.39 MB in RAM / 188.56 MB private / 2 gen2 GCs run so far\r\nBlock #19  +1 MB (touched 0%)  [so far total allocated= 20 MB / total touched= 0 MB]\r\n= process stats: 65.39 MB in RAM / 189.56 MB private / 2 gen2 GCs run so far\r\nBlock #20  +1 MB (touched 0%)  [so far total allocated= 21 MB / total touched= 0 MB]\r\n= process stats: 65.39 MB in RAM / 190.56 MB private / 2 gen2 GCs run so far\r\nBlock #21  +1 MB (touched 0%)  [so far total allocated= 22 MB / total touched= 0 MB]\r\n= process stats: 67.91 MB in RAM / 191.98 MB private / 2 gen2 GCs run so far\r\nBlock #22  +1 MB (touched 0%)  [so far total allocated= 23 MB / total touched= 0 MB]\r\n= process stats: 67.91 MB in RAM / 192.98 MB private / 2 gen2 GCs run so far\r\nBlock #23  +1 MB (touched 0%)  [so far total allocated= 24 MB / total touched= 0 MB]\r\n= process stats: 69.91 MB in RAM / 193.98 MB private / 2 gen2 GCs run so far\r\nBlock #24  +1 MB (touched 0%)  [so far total allocated= 25 MB / total touched= 0 MB]\r\n= process stats: 69.91 MB in RAM / 194.98 MB private / 2 gen2 GCs run so far\r\nBlock #25  +1 MB (touched 0%)  [so far total allocated= 26 MB / total touched= 0 MB]\r\n= process stats: 72.14 MB in RAM / 196.05 MB private / 2 gen2 GCs run so far\r\nBlock #26  +1 MB (touched 0%)  [so far total allocated= 27 MB / total touched= 0 MB]\r\n= process stats: 72.14 MB in RAM / 197.11 MB private / 2 gen2 GCs run so far\r\nBlock #27  +1 MB (touched 0%)  [so far total allocated= 28 MB / total touched= 0 MB]\r\n= process stats: 74.14 MB in RAM / 198.17 MB private / 2 gen2 GCs run so far\r\nBlock #28  +1 MB (touched 0%)  [so far total allocated= 29 MB / total touched= 0 MB]\r\n= process stats: 74.14 MB in RAM / 199.23 MB private / 2 gen2 GCs run so far\r\nBlock #29  +1 MB (touched 0%)  [so far total allocated= 30 MB / total touched= 0 MB]\r\n= process stats: 76.38 MB in RAM / 200.30 MB private / 2 gen2 GCs run so far\r\nBlock #30  +1 MB (touched 0%)  [so far total allocated= 31 MB / total touched= 0 MB]\r\n= process stats: 76.38 MB in RAM / 201.36 MB private / 2 gen2 GCs run so far\r\nBlock #31  +1 MB (touched 0%)  [so far total allocated= 32 MB / total touched= 0 MB]\r\n= process stats: 78.38 MB in RAM / 202.36 MB private / 2 gen2 GCs run so far\r\nBlock #32  +1 MB (touched 0%)  [so far total allocated= 33 MB / total touched= 0 MB]\r\n= process stats: 78.38 MB in RAM / 203.42 MB private / 2 gen2 GCs run so far\r\nBlock #33  +1 MB (touched 0%)  [so far total allocated= 34 MB / total touched= 0 MB]\r\n= process stats: 80.38 MB in RAM / 204.48 MB private / 2 gen2 GCs run so far\r\nBlock #34  +1 MB (touched 0%)  [so far total allocated= 35 MB / total touched= 0 MB]\r\n= process stats: 80.63 MB in RAM / 205.55 MB private / 2 gen2 GCs run so far\r\nBlock #35  +1 MB (touched 0%)  [so far total allocated= 36 MB / total touched= 0 MB]\r\n= process stats: 82.63 MB in RAM / 206.61 MB private / 2 gen2 GCs run so far\r\nBlock #36  +1 MB (touched 0%)  [so far total allocated= 37 MB / total touched= 0 MB]\r\n= process stats: 82.89 MB in RAM / 207.94 MB private / 2 gen2 GCs run so far\r\nBlock #37  +1 MB (touched 0%)  [so far total allocated= 38 MB / total touched= 0 MB]\r\n= process stats: 84.89 MB in RAM / 209.00 MB private / 2 gen2 GCs run so far\r\nBlock #38  +1 MB (touched 0%)  [so far total allocated= 39 MB / total touched= 0 MB]\r\n= process stats: 85.14 MB in RAM / 210.07 MB private / 2 gen2 GCs run so far\r\nBlock #39  +1 MB (touched 0%)  [so far total allocated= 40 MB / total touched= 0 MB]\r\n= process stats: 87.14 MB in RAM / 211.13 MB private / 2 gen2 GCs run so far\r\nBlock #40  +1 MB (touched 0%)  [so far total allocated= 41 MB / total touched= 0 MB]\r\n= process stats: 87.14 MB in RAM / 212.13 MB private / 2 gen2 GCs run so far\r\nBlock #41  +1 MB (touched 0%)  [so far total allocated= 42 MB / total touched= 0 MB]\r\n= process stats: 89.14 MB in RAM / 213.19 MB private / 2 gen2 GCs run so far\r\nBlock #42  +1 MB (touched 0%)  [so far total allocated= 43 MB / total touched= 0 MB]\r\n= process stats: 89.14 MB in RAM / 214.25 MB private / 2 gen2 GCs run so far\r\nBlock #43  +1 MB (touched 0%)  [so far total allocated= 44 MB / total touched= 0 MB]\r\n= process stats: 91.39 MB in RAM / 215.32 MB private / 2 gen2 GCs run so far\r\nBlock #44  +1 MB (touched 0%)  [so far total allocated= 45 MB / total touched= 0 MB]\r\n= process stats: 91.39 MB in RAM / 216.38 MB private / 2 gen2 GCs run so far\r\nBlock #45  +1 MB (touched 0%)  [so far total allocated= 46 MB / total touched= 0 MB]\r\n= process stats: 93.39 MB in RAM / 217.44 MB private / 2 gen2 GCs run so far\r\nBlock #46  +1 MB (touched 0%)  [so far total allocated= 47 MB / total touched= 0 MB]\r\n= process stats: 93.39 MB in RAM / 218.50 MB private / 2 gen2 GCs run so far\r\nBlock #47  +1 MB (touched 0%)  [so far total allocated= 48 MB / total touched= 0 MB]\r\n= process stats: 95.71 MB in RAM / 219.55 MB private / 2 gen2 GCs run so far\r\nBlock #48  +1 MB (touched 0%)  [so far total allocated= 49 MB / total touched= 0 MB]\r\n= process stats: 95.71 MB in RAM / 220.62 MB private / 2 gen2 GCs run so far\r\nBlock #49  +1 MB (touched 0%)  [so far total allocated= 50 MB / total touched= 0 MB]\r\n= process stats: 97.71 MB in RAM / 221.62 MB private / 2 gen2 GCs run so far\r\nBlock #50  +1 MB (touched 0%)  [so far total allocated= 51 MB / total touched= 0 MB]\r\n= process stats: 97.71 MB in RAM / 222.68 MB private / 2 gen2 GCs run so far\r\nBlock #51  +1 MB (touched 0%)  [so far total allocated= 52 MB / total touched= 0 MB]\r\n= process stats: 99.71 MB in RAM / 223.74 MB private / 2 gen2 GCs run so far\r\nBlock #52  +1 MB (touched 0%)  [so far total allocated= 53 MB / total touched= 0 MB]\r\n= process stats: 99.96 MB in RAM / 224.80 MB private / 2 gen2 GCs run so far\r\nBlock #53  +1 MB (touched 0%)  [so far total allocated= 54 MB / total touched= 0 MB]\r\n= process stats: 101.96 MB in RAM / 225.87 MB private / 2 gen2 GCs run so far\r\nBlock #54  +1 MB (touched 0%)  [so far total allocated= 55 MB / total touched= 0 MB]\r\n= process stats: 101.96 MB in RAM / 226.93 MB private / 2 gen2 GCs run so far\r\nBlock #55  +1 MB (touched 0%)  [so far total allocated= 56 MB / total touched= 0 MB]\r\n= process stats: 103.96 MB in RAM / 227.93 MB private / 2 gen2 GCs run so far\r\nBlock #56  +1 MB (touched 0%)  [so far total allocated= 57 MB / total touched= 0 MB]\r\n= process stats: 103.96 MB in RAM / 228.99 MB private / 2 gen2 GCs run so far\r\nBlock #57  +1 MB (touched 0%)  [so far total allocated= 58 MB / total touched= 0 MB]\r\n= process stats: 106.21 MB in RAM / 230.05 MB private / 2 gen2 GCs run so far\r\nBlock #58  +1 MB (touched 0%)  [so far total allocated= 59 MB / total touched= 0 MB]\r\n= process stats: 106.21 MB in RAM / 231.12 MB private / 2 gen2 GCs run so far\r\nBlock #59  +1 MB (touched 0%)  [so far total allocated= 60 MB / total touched= 0 MB]\r\n= process stats: 108.21 MB in RAM / 232.18 MB private / 2 gen2 GCs run so far\r\nBlock #60  +1 MB (touched 0%)  [so far total allocated= 61 MB / total touched= 0 MB]\r\n= process stats: 108.21 MB in RAM / 233.24 MB private / 2 gen2 GCs run so far\r\nBlock #61  +1 MB (touched 0%)  [so far total allocated= 62 MB / total touched= 0 MB]\r\n= process stats: 110.45 MB in RAM / 234.30 MB private / 2 gen2 GCs run so far\r\nBlock #62  +1 MB (touched 0%)  [so far total allocated= 63 MB / total touched= 0 MB]\r\n= process stats: 110.45 MB in RAM / 235.30 MB private / 2 gen2 GCs run so far\r\nBlock #63  +1 MB (touched 0%)  [so far total allocated= 64 MB / total touched= 0 MB]\r\n= process stats: 112.45 MB in RAM / 236.37 MB private / 2 gen2 GCs run so far\r\nBlock #64  +1 MB (touched 0%)  [so far total allocated= 65 MB / total touched= 0 MB]\r\n= process stats: 112.45 MB in RAM / 237.43 MB private / 2 gen2 GCs run so far\r\nBlock #65  +1 MB (touched 0%)  [so far total allocated= 66 MB / total touched= 0 MB]\r\n= process stats: 114.45 MB in RAM / 238.49 MB private / 2 gen2 GCs run so far\r\nBlock #66  +1 MB (touched 0%)  [so far total allocated= 67 MB / total touched= 0 MB]\r\n= process stats: 114.70 MB in RAM / 239.55 MB private / 2 gen2 GCs run so far\r\nBlock #67  +1 MB (touched 0%)  [so far total allocated= 68 MB / total touched= 0 MB]\r\n= process stats: 116.70 MB in RAM / 240.62 MB private / 2 gen2 GCs run so far\r\nBlock #68  +1 MB (touched 0%)  [so far total allocated= 69 MB / total touched= 0 MB]\r\n= process stats: 116.70 MB in RAM / 241.62 MB private / 3 gen2 GCs run so far\r\nBlock #69  +1 MB (touched 0%)  [so far total allocated= 70 MB / total touched= 0 MB]\r\n= process stats: 118.70 MB in RAM / 242.62 MB private / 3 gen2 GCs run so far\r\nBlock #70  +1 MB (touched 0%)  [so far total allocated= 71 MB / total touched= 0 MB]\r\n= process stats: 118.70 MB in RAM / 243.62 MB private / 3 gen2 GCs run so far\r\nBlock #71  +1 MB (touched 0%)  [so far total allocated= 72 MB / total touched= 0 MB]\r\n= process stats: 120.70 MB in RAM / 244.62 MB private / 3 gen2 GCs run so far\r\nBlock #72  +1 MB (touched 0%)  [so far total allocated= 73 MB / total touched= 0 MB]\r\n= process stats: 120.70 MB in RAM / 245.62 MB private / 3 gen2 GCs run so far\r\nBlock #73  +1 MB (touched 0%)  [so far total allocated= 74 MB / total touched= 0 MB]\r\n= process stats: 122.70 MB in RAM / 246.62 MB private / 3 gen2 GCs run so far\r\nBlock #74  +1 MB (touched 0%)  [so far total allocated= 75 MB / total touched= 0 MB]\r\n= process stats: 122.70 MB in RAM / 247.62 MB private / 3 gen2 GCs run so far\r\nBlock #75  +1 MB (touched 0%)  [so far total allocated= 76 MB / total touched= 0 MB]\r\n= process stats: 124.70 MB in RAM / 248.62 MB private / 3 gen2 GCs run so far\r\nBlock #76  +1 MB (touched 0%)  [so far total allocated= 77 MB / total touched= 0 MB]\r\n= process stats: 124.70 MB in RAM / 249.62 MB private / 3 gen2 GCs run so far\r\nBlock #77  +1 MB (touched 0%)  [so far total allocated= 78 MB / total touched= 0 MB]\r\n= process stats: 126.70 MB in RAM / 250.62 MB private / 3 gen2 GCs run so far\r\nBlock #78  +1 MB (touched 0%)  [so far total allocated= 79 MB / total touched= 0 MB]\r\n= process stats: 126.70 MB in RAM / 251.62 MB private / 3 gen2 GCs run so far\r\nBlock #79  +1 MB (touched 0%)  [so far total allocated= 80 MB / total touched= 0 MB]\r\n= process stats: 128.70 MB in RAM / 252.62 MB private / 3 gen2 GCs run so far\r\nBlock #80  +1 MB (touched 0%)  [so far total allocated= 81 MB / total touched= 0 MB]\r\n= process stats: 128.70 MB in RAM / 253.62 MB private / 3 gen2 GCs run so far\r\nBlock #81  +1 MB (touched 0%)  [so far total allocated= 82 MB / total touched= 0 MB]\r\n= process stats: 130.70 MB in RAM / 254.62 MB private / 3 gen2 GCs run so far\r\nBlock #82  +1 MB (touched 0%)  [so far total allocated= 83 MB / total touched= 0 MB]\r\n= process stats: 130.70 MB in RAM / 255.62 MB private / 3 gen2 GCs run so far\r\nBlock #83  +1 MB (touched 0%)  [so far total allocated= 84 MB / total touched= 0 MB]\r\n= process stats: 132.70 MB in RAM / 256.62 MB private / 3 gen2 GCs run so far\r\nBlock #84  +1 MB (touched 0%)  [so far total allocated= 85 MB / total touched= 0 MB]\r\n= process stats: 132.70 MB in RAM / 257.62 MB private / 3 gen2 GCs run so far\r\nBlock #85  +1 MB (touched 0%)  [so far total allocated= 86 MB / total touched= 0 MB]\r\n= process stats: 134.70 MB in RAM / 258.62 MB private / 3 gen2 GCs run so far\r\nBlock #86  +1 MB (touched 0%)  [so far total allocated= 87 MB / total touched= 0 MB]\r\n= process stats: 134.70 MB in RAM / 259.62 MB private / 3 gen2 GCs run so far\r\nBlock #87  +1 MB (touched 0%)  [so far total allocated= 88 MB / total touched= 0 MB]\r\n= process stats: 136.70 MB in RAM / 260.62 MB private / 3 gen2 GCs run so far\r\nBlock #88  +1 MB (touched 0%)  [so far total allocated= 89 MB / total touched= 0 MB]\r\n= process stats: 136.70 MB in RAM / 261.62 MB private / 3 gen2 GCs run so far\r\nBlock #89  +1 MB (touched 0%)  [so far total allocated= 90 MB / total touched= 0 MB]\r\n= process stats: 138.70 MB in RAM / 262.62 MB private / 3 gen2 GCs run so far\r\nBlock #90  +1 MB (touched 0%)  [so far total allocated= 91 MB / total touched= 0 MB]\r\n= process stats: 138.70 MB in RAM / 263.62 MB private / 3 gen2 GCs run so far\r\nBlock #91  +1 MB (touched 0%)  [so far total allocated= 92 MB / total touched= 0 MB]\r\n= process stats: 140.70 MB in RAM / 264.62 MB private / 3 gen2 GCs run so far\r\nBlock #92  +1 MB (touched 0%)  [so far total allocated= 93 MB / total touched= 0 MB]\r\n= process stats: 140.70 MB in RAM / 265.68 MB private / 3 gen2 GCs run so far\r\nBlock #93  +1 MB (touched 0%)  [so far total allocated= 94 MB / total touched= 0 MB]\r\n= process stats: 142.91 MB in RAM / 266.74 MB private / 3 gen2 GCs run so far\r\nBlock #94  +1 MB (touched 0%)  [so far total allocated= 95 MB / total touched= 0 MB]\r\n= process stats: 142.91 MB in RAM / 267.80 MB private / 3 gen2 GCs run so far\r\nBlock #95  +1 MB (touched 0%)  [so far total allocated= 96 MB / total touched= 0 MB]\r\n= process stats: 144.91 MB in RAM / 268.87 MB private / 3 gen2 GCs run so far\r\nBlock #96  +1 MB (touched 0%)  [so far total allocated= 97 MB / total touched= 0 MB]\r\n= process stats: 144.91 MB in RAM / 269.93 MB private / 3 gen2 GCs run so far\r\nBlock #97  +1 MB (touched 0%)  [so far total allocated= 98 MB / total touched= 0 MB]\r\n= process stats: 146.91 MB in RAM / 270.99 MB private / 3 gen2 GCs run so far\r\nBlock #98  +1 MB (touched 0%)  [so far total allocated= 99 MB / total touched= 0 MB]\r\n= process stats: 147.16 MB in RAM / 271.99 MB private / 3 gen2 GCs run so far\r\nBlock #99  +1 MB (touched 0%)  [so far total allocated= 100 MB / total touched= 0 MB]\r\n= process stats: 149.16 MB in RAM / 273.05 MB private / 3 gen2 GCs run so far\r\nBlock #100  +1 MB (touched 0%)  [so far total allocated= 101 MB / total touched= 0 MB]\r\n= process stats: 149.16 MB in RAM / 274.12 MB private / 3 gen2 GCs run so far\r\nBlock #101  +1 MB (touched 0%)  [so far total allocated= 102 MB / total touched= 0 MB]\r\n= process stats: 151.16 MB in RAM / 275.18 MB private / 3 gen2 GCs run so far\r\nBlock #102  +1 MB (touched 0%)  [so far total allocated= 103 MB / total touched= 0 MB]\r\n= process stats: 151.41 MB in RAM / 276.24 MB private / 3 gen2 GCs run so far\r\nBlock #103  +1 MB (touched 0%)  [so far total allocated= 104 MB / total touched= 0 MB]\r\n= process stats: 153.41 MB in RAM / 277.30 MB private / 3 gen2 GCs run so far\r\nBlock #104  +1 MB (touched 0%)  [so far total allocated= 105 MB / total touched= 0 MB]\r\n= process stats: 153.41 MB in RAM / 278.37 MB private / 3 gen2 GCs run so far\r\nBlock #105  +1 MB (touched 0%)  [so far total allocated= 106 MB / total touched= 0 MB]\r\n= process stats: 155.41 MB in RAM / 279.37 MB private / 3 gen2 GCs run so far\r\nBlock #106  +1 MB (touched 0%)  [so far total allocated= 107 MB / total touched= 0 MB]\r\n= process stats: 155.41 MB in RAM / 280.43 MB private / 3 gen2 GCs run so far\r\nBlock #107  +1 MB (touched 0%)  [so far total allocated= 108 MB / total touched= 0 MB]\r\n= process stats: 157.66 MB in RAM / 281.49 MB private / 3 gen2 GCs run so far\r\nBlock #108  +1 MB (touched 0%)  [so far total allocated= 109 MB / total touched= 0 MB]\r\n= process stats: 157.66 MB in RAM / 282.55 MB private / 3 gen2 GCs run so far\r\nBlock #109  +1 MB (touched 0%)  [so far total allocated= 110 MB / total touched= 0 MB]\r\n= process stats: 159.66 MB in RAM / 283.62 MB private / 3 gen2 GCs run so far\r\nBlock #110  +1 MB (touched 0%)  [so far total allocated= 111 MB / total touched= 0 MB]\r\n= process stats: 159.66 MB in RAM / 284.68 MB private / 3 gen2 GCs run so far\r\nBlock #111  +1 MB (touched 0%)  [so far total allocated= 112 MB / total touched= 0 MB]\r\n= process stats: 161.66 MB in RAM / 285.68 MB private / 3 gen2 GCs run so far\r\nBlock #112  +1 MB (touched 0%)  [so far total allocated= 113 MB / total touched= 0 MB]\r\n= process stats: 161.90 MB in RAM / 286.74 MB private / 3 gen2 GCs run so far\r\nBlock #113  +1 MB (touched 0%)  [so far total allocated= 114 MB / total touched= 0 MB]\r\n= process stats: 163.90 MB in RAM / 287.80 MB private / 3 gen2 GCs run so far\r\nBlock #114  +1 MB (touched 0%)  [so far total allocated= 115 MB / total touched= 0 MB]\r\n= process stats: 163.90 MB in RAM / 288.87 MB private / 3 gen2 GCs run so far\r\nBlock #115  +1 MB (touched 0%)  [so far total allocated= 116 MB / total touched= 0 MB]\r\n= process stats: 165.90 MB in RAM / 289.93 MB private / 3 gen2 GCs run so far\r\nBlock #116  +1 MB (touched 0%)  [so far total allocated= 117 MB / total touched= 0 MB]\r\n= process stats: 166.15 MB in RAM / 290.99 MB private / 3 gen2 GCs run so far\r\nBlock #117  +1 MB (touched 0%)  [so far total allocated= 118 MB / total touched= 0 MB]\r\n= process stats: 168.15 MB in RAM / 292.05 MB private / 3 gen2 GCs run so far\r\nBlock #118  +1 MB (touched 0%)  [so far total allocated= 119 MB / total touched= 0 MB]\r\n= process stats: 168.15 MB in RAM / 293.05 MB private / 3 gen2 GCs run so far\r\nBlock #119  +1 MB (touched 0%)  [so far total allocated= 120 MB / total touched= 0 MB]\r\n= process stats: 170.15 MB in RAM / 294.12 MB private / 3 gen2 GCs run so far\r\nBlock #120  +1 MB (touched 0%)  [so far total allocated= 121 MB / total touched= 0 MB]\r\n= process stats: 170.15 MB in RAM / 295.18 MB private / 3 gen2 GCs run so far\r\nBlock #121  +1 MB (touched 0%)  [so far total allocated= 122 MB / total touched= 0 MB]\r\n= process stats: 172.40 MB in RAM / 296.24 MB private / 3 gen2 GCs run so far\r\nBlock #122  +1 MB (touched 0%)  [so far total allocated= 123 MB / total touched= 0 MB]\r\n= process stats: 172.40 MB in RAM / 297.30 MB private / 3 gen2 GCs run so far\r\nBlock #123  +1 MB (touched 0%)  [so far total allocated= 124 MB / total touched= 0 MB]\r\n= process stats: 174.40 MB in RAM / 298.37 MB private / 3 gen2 GCs run so far\r\nBlock #124  +1 MB (touched 0%)  [so far total allocated= 125 MB / total touched= 0 MB]\r\n= process stats: 174.40 MB in RAM / 299.43 MB private / 3 gen2 GCs run so far\r\nBlock #125  +1 MB (touched 0%)  [so far total allocated= 126 MB / total touched= 0 MB]\r\n= process stats: 176.40 MB in RAM / 300.43 MB private / 3 gen2 GCs run so far\r\nBlock #126  +1 MB (touched 0%)  [so far total allocated= 127 MB / total touched= 0 MB]\r\n= process stats: 176.65 MB in RAM / 301.49 MB private / 3 gen2 GCs run so far\r\nBlock #127  +1 MB (touched 0%)  [so far total allocated= 128 MB / total touched= 0 MB]\r\n= process stats: 176.65 MB in RAM / 302.56 MB private / 3 gen2 GCs run so far\r\nBlock #128  +1 MB (touched 0%)  [so far total allocated= 129 MB / total touched= 0 MB]\r\n= process stats: 176.65 MB in RAM / 303.62 MB private / 3 gen2 GCs run so far\r\nBlock #129  +1 MB (touched 0%)  [so far total allocated= 130 MB / total touched= 0 MB]\r\n= process stats: 176.65 MB in RAM / 304.68 MB private / 3 gen2 GCs run so far\r\nBlock #130  +1 MB (touched 0%)  [so far total allocated= 131 MB / total touched= 0 MB]\r\n= process stats: 176.91 MB in RAM / 305.75 MB private / 3 gen2 GCs run so far\r\nBlock #131  +1 MB (touched 0%)  [so far total allocated= 132 MB / total touched= 0 MB]\r\n= process stats: 176.91 MB in RAM / 306.75 MB private / 3 gen2 GCs run so far\r\nBlock #132  +1 MB (touched 0%)  [so far total allocated= 133 MB / total touched= 0 MB]\r\n= process stats: 176.91 MB in RAM / 307.81 MB private / 3 gen2 GCs run so far\r\nBlock #133  +1 MB (touched 0%)  [so far total allocated= 134 MB / total touched= 0 MB]\r\n= process stats: 176.91 MB in RAM / 308.87 MB private / 3 gen2 GCs run so far\r\nBlock #134  +1 MB (touched 0%)  [so far total allocated= 135 MB / total touched= 0 MB]\r\n= process stats: 176.91 MB in RAM / 309.93 MB private / 3 gen2 GCs run so far\r\nBlock #135  +1 MB (touched 0%)  [so far total allocated= 136 MB / total touched= 0 MB]\r\n= process stats: 177.16 MB in RAM / 311.00 MB private / 3 gen2 GCs run so far\r\nBlock #136  +1 MB (touched 0%)  [so far total allocated= 137 MB / total touched= 0 MB]\r\n= process stats: 177.16 MB in RAM / 312.06 MB private / 3 gen2 GCs run so far\r\nBlock #137  +1 MB (touched 0%)  [so far total allocated= 138 MB / total touched= 0 MB]\r\n= process stats: 177.16 MB in RAM / 313.12 MB private / 3 gen2 GCs run so far\r\nBlock #138  +1 MB (touched 0%)  [so far total allocated= 139 MB / total touched= 0 MB]\r\n= process stats: 177.16 MB in RAM / 314.12 MB private / 3 gen2 GCs run so far\r\nBlock #139  +1 MB (touched 0%)  [so far total allocated= 140 MB / total touched= 0 MB]\r\n= process stats: 177.42 MB in RAM / 315.18 MB private / 3 gen2 GCs run so far\r\nBlock #140  +1 MB (touched 0%)  [so far total allocated= 141 MB / total touched= 0 MB]\r\n= process stats: 177.42 MB in RAM / 316.25 MB private / 3 gen2 GCs run so far\r\nBlock #141  +1 MB (touched 0%)  [so far total allocated= 142 MB / total touched= 0 MB]\r\n= process stats: 177.42 MB in RAM / 317.31 MB private / 3 gen2 GCs run so far\r\nBlock #142  +1 MB (touched 0%)  [so far total allocated= 143 MB / total touched= 0 MB]\r\n= process stats: 177.42 MB in RAM / 318.37 MB private / 3 gen2 GCs run so far\r\nBlock #143  +1 MB (touched 0%)  [so far total allocated= 144 MB / total touched= 0 MB]\r\n= process stats: 177.42 MB in RAM / 319.43 MB private / 3 gen2 GCs run so far\r\nBlock #144  +1 MB (touched 0%)  [so far total allocated= 145 MB / total touched= 0 MB]\r\n= process stats: 177.68 MB in RAM / 320.50 MB private / 3 gen2 GCs run so far\r\nBlock #145  +1 MB (touched 0%)  [so far total allocated= 146 MB / total touched= 0 MB]\r\n= process stats: 177.68 MB in RAM / 321.50 MB private / 3 gen2 GCs run so far\r\nBlock #146  +1 MB (touched 0%)  [so far total allocated= 147 MB / total touched= 0 MB]\r\n= process stats: 177.68 MB in RAM / 322.56 MB private / 3 gen2 GCs run so far\r\nBlock #147  +1 MB (touched 0%)  [so far total allocated= 148 MB / total touched= 0 MB]\r\n= process stats: 177.68 MB in RAM / 323.62 MB private / 3 gen2 GCs run so far\r\nBlock #148  +1 MB (touched 0%)  [so far total allocated= 149 MB / total touched= 0 MB]\r\n= process stats: 177.94 MB in RAM / 324.68 MB private / 3 gen2 GCs run so far\r\nBlock #149  +1 MB (touched 0%)  [so far total allocated= 150 MB / total touched= 0 MB]\r\n= process stats: 177.94 MB in RAM / 325.75 MB private / 3 gen2 GCs run so far\r\nBlock #150  +1 MB (touched 0%)  [so far total allocated= 151 MB / total touched= 0 MB]\r\n= process stats: 177.94 MB in RAM / 326.81 MB private / 3 gen2 GCs run so far\r\nBlock #151  +1 MB (touched 0%)  [so far total allocated= 152 MB / total touched= 0 MB]\r\n= process stats: 177.94 MB in RAM / 327.87 MB private / 3 gen2 GCs run so far\r\nBlock #152  +1 MB (touched 0%)  [so far total allocated= 153 MB / total touched= 0 MB]\r\n= process stats: 177.94 MB in RAM / 328.87 MB private / 3 gen2 GCs run so far\r\nBlock #153  +1 MB (touched 0%)  [so far total allocated= 154 MB / total touched= 0 MB]\r\n= process stats: 178.20 MB in RAM / 329.93 MB private / 3 gen2 GCs run so far\r\nBlock #154  +1 MB (touched 0%)  [so far total allocated= 155 MB / total touched= 0 MB]\r\n= process stats: 178.20 MB in RAM / 331.00 MB private / 3 gen2 GCs run so far\r\nBlock #155  +1 MB (touched 0%)  [so far total allocated= 156 MB / total touched= 0 MB]\r\n= process stats: 178.20 MB in RAM / 332.06 MB private / 3 gen2 GCs run so far\r\nBlock #156  +1 MB (touched 0%)  [so far total allocated= 157 MB / total touched= 0 MB]\r\n= process stats: 178.20 MB in RAM / 333.12 MB private / 3 gen2 GCs run so far\r\nBlock #157  +1 MB (touched 0%)  [so far total allocated= 158 MB / total touched= 0 MB]\r\n= process stats: 178.45 MB in RAM / 334.18 MB private / 3 gen2 GCs run so far\r\nBlock #158  +1 MB (touched 0%)  [so far total allocated= 159 MB / total touched= 0 MB]\r\n= process stats: 178.45 MB in RAM / 335.18 MB private / 3 gen2 GCs run so far\r\nBlock #159  +1 MB (touched 0%)  [so far total allocated= 160 MB / total touched= 0 MB]\r\n= process stats: 178.45 MB in RAM / 336.25 MB private / 3 gen2 GCs run so far\r\nBlock #160  +1 MB (touched 0%)  [so far total allocated= 161 MB / total touched= 0 MB]\r\n= process stats: 178.45 MB in RAM / 337.31 MB private / 3 gen2 GCs run so far\r\nBlock #161  +1 MB (touched 0%)  [so far total allocated= 162 MB / total touched= 0 MB]\r\n= process stats: 178.45 MB in RAM / 338.37 MB private / 3 gen2 GCs run so far\r\nBlock #162  +1 MB (touched 0%)  [so far total allocated= 163 MB / total touched= 0 MB]\r\n= process stats: 178.71 MB in RAM / 339.43 MB private / 3 gen2 GCs run so far\r\nBlock #163  +1 MB (touched 0%)  [so far total allocated= 164 MB / total touched= 0 MB]\r\n= process stats: 178.71 MB in RAM / 340.50 MB private / 3 gen2 GCs run so far\r\nBlock #164  +1 MB (touched 0%)  [so far total allocated= 165 MB / total touched= 0 MB]\r\n= process stats: 178.71 MB in RAM / 341.56 MB private / 3 gen2 GCs run so far\r\nBlock #165  +1 MB (touched 0%)  [so far total allocated= 166 MB / total touched= 0 MB]\r\n= process stats: 178.71 MB in RAM / 342.56 MB private / 3 gen2 GCs run so far\r\nBlock #166  +1 MB (touched 0%)  [so far total allocated= 167 MB / total touched= 0 MB]\r\n= process stats: 178.97 MB in RAM / 343.62 MB private / 3 gen2 GCs run so far\r\nBlock #167  +1 MB (touched 0%)  [so far total allocated= 168 MB / total touched= 0 MB]\r\n= process stats: 178.97 MB in RAM / 344.68 MB private / 3 gen2 GCs run so far\r\nBlock #168  +1 MB (touched 0%)  [so far total allocated= 169 MB / total touched= 0 MB]\r\n= process stats: 178.97 MB in RAM / 345.75 MB private / 3 gen2 GCs run so far\r\nBlock #169  +1 MB (touched 0%)  [so far total allocated= 170 MB / total touched= 0 MB]\r\n= process stats: 178.97 MB in RAM / 346.81 MB private / 3 gen2 GCs run so far\r\nBlock #170  +1 MB (touched 0%)  [so far total allocated= 171 MB / total touched= 0 MB]\r\n= process stats: 178.97 MB in RAM / 347.87 MB private / 3 gen2 GCs run so far\r\nBlock #171  +1 MB (touched 0%)  [so far total allocated= 172 MB / total touched= 0 MB]\r\n= process stats: 179.23 MB in RAM / 348.93 MB private / 3 gen2 GCs run so far\r\nBlock #172  +1 MB (touched 0%)  [so far total allocated= 173 MB / total touched= 0 MB]\r\n= process stats: 179.23 MB in RAM / 349.93 MB private / 3 gen2 GCs run so far\r\nBlock #173  +1 MB (touched 0%)  [so far total allocated= 174 MB / total touched= 0 MB]\r\n= process stats: 179.23 MB in RAM / 351.00 MB private / 3 gen2 GCs run so far\r\nBlock #174  +1 MB (touched 0%)  [so far total allocated= 175 MB / total touched= 0 MB]\r\n= process stats: 179.23 MB in RAM / 352.06 MB private / 3 gen2 GCs run so far\r\nBlock #175  +1 MB (touched 0%)  [so far total allocated= 176 MB / total touched= 0 MB]\r\n= process stats: 179.48 MB in RAM / 353.12 MB private / 3 gen2 GCs run so far\r\nBlock #176  +1 MB (touched 0%)  [so far total allocated= 177 MB / total touched= 0 MB]\r\n= process stats: 179.48 MB in RAM / 354.18 MB private / 3 gen2 GCs run so far\r\nBlock #177  +1 MB (touched 0%)  [so far total allocated= 178 MB / total touched= 0 MB]\r\n= process stats: 179.48 MB in RAM / 355.25 MB private / 3 gen2 GCs run so far\r\nBlock #178  +1 MB (touched 0%)  [so far total allocated= 179 MB / total touched= 0 MB]\r\n= process stats: 179.48 MB in RAM / 356.25 MB private / 3 gen2 GCs run so far\r\nBlock #179  +1 MB (touched 0%)  [so far total allocated= 180 MB / total touched= 0 MB]\r\n= process stats: 179.48 MB in RAM / 357.31 MB private / 3 gen2 GCs run so far\r\nBlock #180  +1 MB (touched 0%)  [so far total allocated= 181 MB / total touched= 0 MB]\r\n= process stats: 179.74 MB in RAM / 358.37 MB private / 3 gen2 GCs run so far\r\nBlock #181  +1 MB (touched 0%)  [so far total allocated= 182 MB / total touched= 0 MB]\r\n= process stats: 179.74 MB in RAM / 359.43 MB private / 3 gen2 GCs run so far\r\nBlock #182  +1 MB (touched 0%)  [so far total allocated= 183 MB / total touched= 0 MB]\r\n= process stats: 179.74 MB in RAM / 360.50 MB private / 3 gen2 GCs run so far\r\nBlock #183  +1 MB (touched 0%)  [so far total allocated= 184 MB / total touched= 0 MB]\r\n= process stats: 179.74 MB in RAM / 361.56 MB private / 3 gen2 GCs run so far\r\nBlock #184  +1 MB (touched 0%)  [so far total allocated= 185 MB / total touched= 0 MB]\r\n= process stats: 180.00 MB in RAM / 362.81 MB private / 3 gen2 GCs run so far\r\nBlock #185  +1 MB (touched 0%)  [so far total allocated= 186 MB / total touched= 0 MB]\r\n= process stats: 180.00 MB in RAM / 363.81 MB private / 3 gen2 GCs run so far\r\nBlock #186  +1 MB (touched 0%)  [so far total allocated= 187 MB / total touched= 0 MB]\r\n= process stats: 180.00 MB in RAM / 364.87 MB private / 3 gen2 GCs run so far\r\nBlock #187  +1 MB (touched 0%)  [so far total allocated= 188 MB / total touched= 0 MB]\r\n= process stats: 180.00 MB in RAM / 365.93 MB private / 3 gen2 GCs run so far\r\nBlock #188  +1 MB (touched 0%)  [so far total allocated= 189 MB / total touched= 0 MB]\r\n= process stats: 180.25 MB in RAM / 367.00 MB private / 3 gen2 GCs run so far\r\nBlock #189  +1 MB (touched 0%)  [so far total allocated= 190 MB / total touched= 0 MB]\r\n= process stats: 180.25 MB in RAM / 368.06 MB private / 3 gen2 GCs run so far\r\nBlock #190  +1 MB (touched 0%)  [so far total allocated= 191 MB / total touched= 0 MB]\r\n= process stats: 180.25 MB in RAM / 369.12 MB private / 3 gen2 GCs run so far\r\nBlock #191  +1 MB (touched 0%)  [so far total allocated= 192 MB / total touched= 0 MB]\r\n= process stats: 180.25 MB in RAM / 370.18 MB private / 3 gen2 GCs run so far\r\nBlock #192  +1 MB (touched 0%)  [so far total allocated= 193 MB / total touched= 0 MB]\r\n= process stats: 180.51 MB in RAM / 371.18 MB private / 3 gen2 GCs run so far\r\nBlock #193  +1 MB (touched 0%)  [so far total allocated= 194 MB / total touched= 0 MB]\r\n= process stats: 180.51 MB in RAM / 372.25 MB private / 3 gen2 GCs run so far\r\nBlock #194  +1 MB (touched 0%)  [so far total allocated= 195 MB / total touched= 0 MB]\r\n= process stats: 180.51 MB in RAM / 373.31 MB private / 3 gen2 GCs run so far\r\nBlock #195  +1 MB (touched 0%)  [so far total allocated= 196 MB / total touched= 0 MB]\r\n= process stats: 180.51 MB in RAM / 374.37 MB private / 3 gen2 GCs run so far\r\nBlock #196  +1 MB (touched 0%)  [so far total allocated= 197 MB / total touched= 0 MB]\r\n= process stats: 180.51 MB in RAM / 375.43 MB private / 3 gen2 GCs run so far\r\nBlock #197  +1 MB (touched 0%)  [so far total allocated= 198 MB / total touched= 0 MB]\r\n= process stats: 180.77 MB in RAM / 376.50 MB private / 3 gen2 GCs run so far\r\nBlock #198  +1 MB (touched 0%)  [so far total allocated= 199 MB / total touched= 0 MB]\r\n= process stats: 180.77 MB in RAM / 377.56 MB private / 3 gen2 GCs run so far\r\nBlock #199  +1 MB (touched 0%)  [so far total allocated= 200 MB / total touched= 0 MB]\r\n= process stats: 180.77 MB in RAM / 378.56 MB private / 3 gen2 GCs run so far\r\nAllocating memory complete. Press Ctrl+C to exit\r\n```\r\n",
                                           "updatedAt":  "2021-11-07T15:06:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GPL-U",
                                           "createdAt":  "2022-07-08T00:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I don\u0027t think this needs to be 7.0 but let me know if you don\u0027t agree. @janvorli what do you think needs to be done here?",
                                           "updatedAt":  "2022-07-08T00:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRip8",
                                           "createdAt":  "2022-07-08T13:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "From most of the results found so far, it seems to me that it just reflects the new MADV_FREE usage. It should not result in OOM, it just keeps pages as resident until memory pressure occurs. It doesn\u0027t seem we need to do anything to address that.\r\n\r\nAs for the last comment with test results, my guess is that although the code doesn\u0027t touch the contents of the arrays allocated, the growing consumed physical memory may be caused by the fact that each array allocation will touch at least one page to store the object header, the MethodTable and few other array specific fields. And maybe also by the GC helper tables.",
                                           "updatedAt":  "2022-07-08T13:41:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K-JrO",
                                           "createdAt":  "2022-09-26T10:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joelwkall",
                                           "body":  "Is there a way to configure the runtime to use MADV_DONTNEED instead? We use total memory usage as a parameter in our orchestration, and with .NET 6 it looks like a machine is full even when it isn\u0027t.",
                                           "updatedAt":  "2022-09-26T10:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBhVy",
                                           "createdAt":  "2022-09-26T22:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "from what @janvorli said above -\r\n\r\n\u003e The MADV_DONTNEED seems to release the physical pages right away\r\n\r\nwe\u0027d like to keep the pages resident unless we are under memory pressure so it would be undesirable to enable this (even under a config) just so for accounting purposes. could you please verify that this is only for accounting purposes, and that you are not actually getting a premature OOM?",
                                           "updatedAt":  "2022-09-26T22:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LJB9f",
                                           "createdAt":  "2022-09-28T09:45:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joelwkall",
                                           "body":  "\u003e could you please verify that this is only for accounting purposes, and that you are not actually getting a premature OOM?\r\n\r\nYes, we have not seen any premature OOMs, or at least not been able to verify it. But we are also not running .NET 6 in production because of this so we don\u0027t have a lot of data. But our concern is mainly about accounting purposes.\r\n\r\n\u003e  it would be undesirable to enable this (even under a config) just so for accounting purposes\r\n\r\nI understand that for performance reasons, keeping pages resident is better, all else equal. I\u0027m not sure exactly how much it impacts performance, but releasing them seems to work fine in earlier versions of .NET, so being able to set a config flag to prevent regression if your setup depends on this behavior does not seem undesirable to me. Of course I am aware that it would incur costs to create and maintain this flag.",
                                           "updatedAt":  "2022-09-28T09:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VodEk",
                                           "createdAt":  "2023-02-20T10:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Havret",
                                           "body":  "@Maoni0, @janvorli Shouldn\u0027t we use `MADV_FREE_REUSE` and `MADV_FREE_REUSABLE`?",
                                           "updatedAt":  "2023-02-20T10:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vqb9a",
                                           "createdAt":  "2023-02-20T15:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Havret I have not found these two documented officially, but from what I was able to find by googling, it seems these are macOS only. It seems that `go` and chromium use these instead of MADV_FREE. \r\nI am a bit hesitant to use undocumented features. ",
                                           "updatedAt":  "2023-02-20T15:23:00Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Resident Set Size high despite not using the backing pages",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59405",
        "createdAt":  "2021-09-21T10:44:39Z",
        "number":  59405,
        "author":  "msedi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-21T22:32:11Z",
        "body":  "I\u0027m copying over a question from [Paging, MemoryMappedFile and GC fun (microsoft.com)](https://social.msdn.microsoft.com/Forums/en-US/e7a6c269-9743-420f-9132-9084bfe0b5b8/paging-memorymappedfile-and-gc-fun?forum=netfxbcl) which has been asked a while ago (2015) but has never been answered with detail. I\u0027m copying this because I\u0027m seeing the same problems are described in the question:\r\n\r\n\u003e  I have 16GB of data collecting in memory, in a 64-bit c# project using MemoryMappedFile.  The data arrives from a network connection on quite a quick transport (a good chunk of data arriving every 200ms), and I write it into a view of that memory mapped file.   The system has 32BG of ram, and my assemblies are all marked LARGEADDRESSAWARE, so everything is capable of keeping the 16GB of data in memory at all times.  (It\u0027s a 6 core Windows Server 2012R2 x64 server...)\r\n\u003e \r\n\u003e What I\u0027m observing is that the GC runs eventually and it appears to trim the process\u0027s working set.  This causes a massive page-out of data to the disk.  This massive disk I/O in turn causes any writing to the memory backed by the file to stall, and I lose my 200ms timings, falling way behind quickly.  (In some cases, more than a couple of seconds, and the disks are pegged)\r\n\u003e \r\n\u003e I\u0027ve observed it via PerfMon and VMMap - pages slowly build in my working set until the GC runs, and then the MemoryMappedFile\u0027s pages are mostly trimmed - some of them down to 1MB in size.  They then have to grow back up as new data arrives, and the process repeats again.\r\n\u003e \r\n\u003e I\u0027ve tried setting Process.MaxWorkingSet and Process.MinWorkingSet and see minute differences, but it seems the same thing happens, just a but later.  (Both were set to the size of my memory mapped file, plus some overhead) I\u0027ve also tried p/invoking SetWorkingetSizeEX with QUOTA_LIMITS_HARDWS_MIN_ENABLE.  Does anyone have any ideas how I can lock the pages from a C# MemoryMappedFile\u0027s view in memory OR prevent the GC from trimming the working set?  I\u0027d like to have the full map in RAM and only page out changes to each dirty page (which should be acceptable in terms of timing/performance).\r\n\r\nI\u0027m seeing the same problems, and already checked what I can do:\r\n\r\n- Running my own cleanup thread where I store touched memory areas and do my own LRU by calling VirtualUnlock or DiscardVirtualMemory on objects that haven\u0027t been used for a longer time.\r\n- Call EmptyWorkingSet\r\n- Move the MemMapFiles to a different process, but even then there\u0027s still a GC that kicks in. To get around this I would have to make an unmanaged process out of it. (Of course the question is still if it is the GC, that is changing the workingset).\r\n\r\nI can of course share my code but it\u0027s a little bit large to copy it as code in here, so the repo is here : https://github.com/msedi/MappableFileStream.\r\n\r\nWhat I understand is that I have multiple independent \"processes\" running. The GC, my own application that produces the traffic and the memory manager that does not know about the traffic I\u0027m producing. Somehow it seems that the memory manager cannot \"follow\" the vast amount of data I\u0027m producing. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONxnL6g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43EPo0",
                                           "createdAt":  "2021-09-21T10:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m copying over a question from [Paging, MemoryMappedFile and GC fun (microsoft.com)](https://social.msdn.microsoft.com/Forums/en-US/e7a6c269-9743-420f-9132-9084bfe0b5b8/paging-memorymappedfile-and-gc-fun?forum=netfxbcl) which has been asked a while ago (2015) but has never been answered with detail. I\u0027m copying this because I\u0027m seeing the same problems are described in the question:\r\n\r\n\u003e  I have 16GB of data collecting in memory, in a 64-bit c# project using MemoryMappedFile.  The data arrives from a network connection on quite a quick transport (a good chunk of data arriving every 200ms), and I write it into a view of that memory mapped file.   The system has 32BG of ram, and my assemblies are all marked LARGEADDRESSAWARE, so everything is capable of keeping the 16GB of data in memory at all times.  (It\u0027s a 6 core Windows Server 2012R2 x64 server...)\r\n\u003e \r\n\u003e What I\u0027m observing is that the GC runs eventually and it appears to trim the process\u0027s working set.  This causes a massive page-out of data to the disk.  This massive disk I/O in turn causes any writing to the memory backed by the file to stall, and I lose my 200ms timings, falling way behind quickly.  (In some cases, more than a couple of seconds, and the disks are pegged)\r\n\u003e \r\n\u003e I\u0027ve observed it via PerfMon and VMMap - pages slowly build in my working set until the GC runs, and then the MemoryMappedFile\u0027s pages are mostly trimmed - some of them down to 1MB in size.  They then have to grow back up as new data arrives, and the process repeats again.\r\n\u003e \r\n\u003e I\u0027ve tried setting Process.MaxWorkingSet and Process.MinWorkingSet and see minute differences, but it seems the same thing happens, just a but later.  (Both were set to the size of my memory mapped file, plus some overhead) I\u0027ve also tried p/invoking SetWorkingetSizeEX with QUOTA_LIMITS_HARDWS_MIN_ENABLE.  Does anyone have any ideas how I can lock the pages from a C# MemoryMappedFile\u0027s view in memory OR prevent the GC from trimming the working set?  I\u0027d like to have the full map in RAM and only page out changes to each dirty page (which should be acceptable in terms of timing/performance).\r\n\r\nI\u0027m seeing the same problems, and already checked what I can do:\r\n\r\n- Running my own cleanup thread where I store touched memory areas and do my own LRU by calling VirtualUnlock or DiscardVirtualMemory on objects that haven\u0027t been used for a longer time.\r\n- Call EmptyWorkingSet\r\n\r\nI can of course share my code but it\u0027s a little bit large to copy it as code in here, so I need to make up a git repo if necessary.\r\nBut before I\u0027m doing this I would like to hear if this could be a problem in general or if I\u0027m doing something wrong.\r\n\r\nWhat I understand is that I have multiple independent \"processes\" running. The GC, my own application that produces the traffic and the memory manager that does not know about the traffic I\u0027m producing. Somehow it seems that the memory manager cannot \"follow\" the vast amount of data I\u0027m producing. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emsedi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-21T10:44:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Gcvq",
                                           "createdAt":  "2021-09-21T22:32:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLz6aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "msedi",
                                                                               "createdAt":  "2023-11-04T19:12:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the only times GC would trim the working set are\r\n\r\n1) via the MEM_RESET on large free spaces, meaning if a free object is large enough, it will tell the OS to move those pages out of the process\u0027s working set withOUT writing the content to the page file (because it\u0027s a free object, it mean the content of it is no longer useful).\r\n2) decommit the end of segment space that\u0027s no longer used by objects. Since those pages are decommitted, by definition their content isn\u0027t needed anymore and will not be written to the page file.\r\n\r\nin other words, GC would never proactively trim pages out of the WS that would cause anything to have to be written to the page file.\r\n\r\nso I would suggest to take a trace with CPU samples, if you can observe this easily. you should be able to see the OS calls that trim the WS and who calls them. you could use [perfview](https://github.com/microsoft/perfview/blob/main/documentation/Downloading.md):\r\n\r\n`PerfView.exe /nogui /accepteula /MaxCollectSec:300 /KernelEvents=default /ClrEvents:GC+Stack /BufferSize:3000 /CircularMB:3000 /Merge:TRUE /ZIP:True collect`\r\n\r\nthis collects 300s, assuming that\u0027s enough to observe the behavior you described.",
                                           "updatedAt":  "2021-09-21T22:32:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Paging, MemoryMappedFile and GC fun",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60169",
        "createdAt":  "2021-10-08T12:14:20Z",
        "number":  60169,
        "author":  "chaseyangguang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T15:49:04Z",
        "body":  "**Issue**:\r\nWe found out that the .net core application get out of memory exception in App Service environment(windows machine) when the machine memory is still available. This impact all the App Service .net core users.\r\n\r\n**Reproduce step:**\r\nWe created 64 bit .net core 5.0 console application, and allocate 500 MB each time by creating a char[500*1024*1024]. When we testing it in App Service S1 price tier worker instance (RAM= 1.75GB) we got out of memory exception after 1572864000 bytes. And the similar result happened on larger instances from the App Service.\r\nBut when we testing in my local machine (RAM=16GB), the allocation can still succeed even at 50GB.\r\n \r\nApp Service S1 machine test result:\r\n![image](https://user-images.githubusercontent.com/36887413/136554055-603d2184-af07-4688-bf23-dc650155e6f3.png)\r\n\r\nlocal machine\u0027s test result:\r\n![image](https://user-images.githubusercontent.com/36887413/136554198-b1b9bdae-9d43-4609-ab41-62595f5520ad.png)\r\n\r\n**Cause**:\r\nAfter investigating the issue, we found out that this limitation comes from the .net core runtime.\r\nThe.net core runtime has a logic of setting the memory limit based on g_RestrictedPhysicalMemoryLimit, And if it is a job object, the RestrictedPhysicalMemoryLimit is the minimum value of job_memory_limit, job_process_memory_limit and job_workingset_limit. Since the app service is in running inside a sandbox, it is a job object, it get into this logic.\r\nBased on our testing, The RestrictedPhysicalMemoryLimit is always small than machine memory, such as the value of RestrictedPhysicalMemoryLimit we get after analyzed the dump files from the different machines as below: \r\n\r\n\u003chtml xmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:w=\"urn:schemas-microsoft-com:office:word\"\r\nxmlns:dt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\"\r\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\"\u003e\r\n\r\n\u003chead\u003e\r\n\r\n\u003cmeta name=ProgId content=Word.Document\u003e\r\n\u003cmeta name=Generator content=\"Microsoft Word 15\"\u003e\r\n\u003cmeta name=Originator content=\"Microsoft Word 15\"\u003e\r\n\u003clink rel=File-List\r\nhref=\"file:///C:/Users/suya/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\"\u003e\r\n\u003c!--[if gte mso 9]\u003e\u003cxml\u003e\r\n \u003co:OfficeDocumentSettings\u003e\r\n  \u003co:AllowPNG/\u003e\r\n \u003c/o:OfficeDocumentSettings\u003e\r\n\u003c/xml\u003e\u003c![endif]--\u003e\r\n\u003clink rel=themeData\r\nhref=\"file:///C:/Users/suya/AppData/Local/Temp/msohtmlclip1/01/clip_themedata.thmx\"\u003e\r\n\u003clink rel=colorSchemeMapping\r\nhref=\"file:///C:/Users/suya/AppData/Local/Temp/msohtmlclip1/01/clip_colorschememapping.xml\"\u003e\r\n\u003c!--[if gte mso 9]\u003e\u003cxml\u003e\r\n \u003cw:WordDocument\u003e\r\n  \u003cw:View\u003eNormal\u003c/w:View\u003e\r\n  \u003cw:Zoom\u003e0\u003c/w:Zoom\u003e\r\n  \u003cw:TrackMoves/\u003e\r\n  \u003cw:TrackFormatting/\u003e\r\n  \u003cw:PunctuationKerning/\u003e\r\n  \u003cw:ValidateAgainstSchemas/\u003e\r\n  \u003cw:SaveIfXMLInvalid\u003efalse\u003c/w:SaveIfXMLInvalid\u003e\r\n  \u003cw:IgnoreMixedContent\u003efalse\u003c/w:IgnoreMixedContent\u003e\r\n  \u003cw:AlwaysShowPlaceholderText\u003efalse\u003c/w:AlwaysShowPlaceholderText\u003e\r\n  \u003cw:DoNotPromoteQF/\u003e\r\n  \u003cw:LidThemeOther\u003eEN-US\u003c/w:LidThemeOther\u003e\r\n  \u003cw:LidThemeAsian\u003eZH-CN\u003c/w:LidThemeAsian\u003e\r\n  \u003cw:LidThemeComplexScript\u003eX-NONE\u003c/w:LidThemeComplexScript\u003e\r\n  \u003cw:Compatibility\u003e\r\n   \u003cw:BreakWrappedTables/\u003e\r\n   \u003cw:SnapToGridInCell/\u003e\r\n   \u003cw:WrapTextWithPunct/\u003e\r\n   \u003cw:UseAsianBreakRules/\u003e\r\n   \u003cw:DontGrowAutofit/\u003e\r\n   \u003cw:SplitPgBreakAndParaMark/\u003e\r\n   \u003cw:EnableOpenTypeKerning/\u003e\r\n   \u003cw:DontFlipMirrorIndents/\u003e\r\n   \u003cw:OverrideTableStyleHps/\u003e\r\n  \u003c/w:Compatibility\u003e\r\n  \u003cm:mathPr\u003e\r\n   \u003cm:mathFont m:val=\"Cambria Math\"/\u003e\r\n   \u003cm:brkBin m:val=\"before\"/\u003e\r\n   \u003cm:brkBinSub m:val=\"\u0026#45;-\"/\u003e\r\n   \u003cm:smallFrac m:val=\"off\"/\u003e\r\n   \u003cm:dispDef/\u003e\r\n   \u003cm:lMargin m:val=\"0\"/\u003e\r\n   \u003cm:rMargin m:val=\"0\"/\u003e\r\n   \u003cm:defJc m:val=\"centerGroup\"/\u003e\r\n   \u003cm:wrapIndent m:val=\"1440\"/\u003e\r\n   \u003cm:intLim m:val=\"subSup\"/\u003e\r\n   \u003cm:naryLim m:val=\"undOvr\"/\u003e\r\n  \u003c/m:mathPr\u003e\u003c/w:WordDocument\u003e\r\n\u003c/xml\u003e\u003c![endif]--\u003e\u003c!--[if gte mso 9]\u003e\u003cxml\u003e\r\n \u003cw:LatentStyles DefLockedState=\"false\" DefUnhideWhenUsed=\"false\"\r\n  DefSemiHidden=\"false\" DefQFormat=\"false\" DefPriority=\"99\"\r\n  LatentStyleCount=\"376\"\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"0\" QFormat=\"true\" Name=\"Normal\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 7\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 8\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"heading 9\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 7\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 8\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index 9\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 7\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 8\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"toc 9\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Normal Indent\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"footnote text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"annotation text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"header\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"footer\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"index heading\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"35\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"caption\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"table of figures\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"envelope address\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"envelope return\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"footnote reference\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"annotation reference\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"line number\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"page number\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"endnote reference\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"endnote text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"table of authorities\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"macro\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"toa heading\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Bullet\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Number\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Bullet 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Bullet 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Bullet 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Bullet 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Number 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Number 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Number 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Number 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"10\" QFormat=\"true\" Name=\"Title\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Closing\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Signature\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"1\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"Default Paragraph Font\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text Indent\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Continue\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Continue 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Continue 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Continue 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"List Continue 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Message Header\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"11\" QFormat=\"true\" Name=\"Subtitle\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Salutation\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Date\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text First Indent\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text First Indent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Note Heading\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text Indent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Body Text Indent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Block Text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Hyperlink\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"FollowedHyperlink\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"22\" QFormat=\"true\" Name=\"Strong\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"20\" QFormat=\"true\" Name=\"Emphasis\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Document Map\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Plain Text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"E-mail Signature\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Top of Form\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Bottom of Form\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Normal (Web)\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Acronym\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Address\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Cite\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Code\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Definition\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Keyboard\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Preformatted\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Sample\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Typewriter\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"HTML Variable\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Normal Table\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"annotation subject\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"No List\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Outline List 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Outline List 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Outline List 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Simple 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Simple 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Simple 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Classic 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Classic 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Classic 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Classic 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Colorful 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Colorful 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Colorful 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Columns 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Columns 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Columns 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Columns 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Columns 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 7\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Grid 8\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 7\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table List 8\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table 3D effects 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table 3D effects 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table 3D effects 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Contemporary\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Elegant\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Professional\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Subtle 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Subtle 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Web 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Web 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Web 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Balloon Text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" Name=\"Table Grid\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Table Theme\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" Name=\"Placeholder Text\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"1\" QFormat=\"true\" Name=\"No Spacing\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" Name=\"Revision\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"34\" QFormat=\"true\"\r\n   Name=\"List Paragraph\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"29\" QFormat=\"true\" Name=\"Quote\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"30\" QFormat=\"true\"\r\n   Name=\"Intense Quote\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"60\" Name=\"Light Shading Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"61\" Name=\"Light List Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"62\" Name=\"Light Grid Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"63\" Name=\"Medium Shading 1 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"64\" Name=\"Medium Shading 2 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"65\" Name=\"Medium List 1 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"66\" Name=\"Medium List 2 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"67\" Name=\"Medium Grid 1 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"68\" Name=\"Medium Grid 2 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"69\" Name=\"Medium Grid 3 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"70\" Name=\"Dark List Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"71\" Name=\"Colorful Shading Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"72\" Name=\"Colorful List Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"73\" Name=\"Colorful Grid Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"19\" QFormat=\"true\"\r\n   Name=\"Subtle Emphasis\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"21\" QFormat=\"true\"\r\n   Name=\"Intense Emphasis\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"31\" QFormat=\"true\"\r\n   Name=\"Subtle Reference\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"32\" QFormat=\"true\"\r\n   Name=\"Intense Reference\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"33\" QFormat=\"true\" Name=\"Book Title\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"37\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" Name=\"Bibliography\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"39\" SemiHidden=\"true\"\r\n   UnhideWhenUsed=\"true\" QFormat=\"true\" Name=\"TOC Heading\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"41\" Name=\"Plain Table 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"42\" Name=\"Plain Table 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"43\" Name=\"Plain Table 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"44\" Name=\"Plain Table 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"45\" Name=\"Plain Table 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"40\" Name=\"Grid Table Light\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\" Name=\"Grid Table 1 Light\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\" Name=\"Grid Table 6 Colorful\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\" Name=\"Grid Table 7 Colorful\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"Grid Table 1 Light Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"Grid Table 6 Colorful Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"Grid Table 7 Colorful Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"Grid Table 1 Light Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"Grid Table 6 Colorful Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"Grid Table 7 Colorful Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"Grid Table 1 Light Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"Grid Table 6 Colorful Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"Grid Table 7 Colorful Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"Grid Table 1 Light Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"Grid Table 6 Colorful Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"Grid Table 7 Colorful Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"Grid Table 1 Light Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"Grid Table 6 Colorful Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"Grid Table 7 Colorful Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"Grid Table 1 Light Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"Grid Table 2 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"Grid Table 3 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"Grid Table 4 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"Grid Table 5 Dark Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"Grid Table 6 Colorful Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"Grid Table 7 Colorful Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\" Name=\"List Table 1 Light\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\" Name=\"List Table 6 Colorful\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\" Name=\"List Table 7 Colorful\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"List Table 1 Light Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"List Table 6 Colorful Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"List Table 7 Colorful Accent 1\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"List Table 1 Light Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"List Table 6 Colorful Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"List Table 7 Colorful Accent 2\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"List Table 1 Light Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"List Table 6 Colorful Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"List Table 7 Colorful Accent 3\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"List Table 1 Light Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"List Table 6 Colorful Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"List Table 7 Colorful Accent 4\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"List Table 1 Light Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"List Table 6 Colorful Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"List Table 7 Colorful Accent 5\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"46\"\r\n   Name=\"List Table 1 Light Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"47\" Name=\"List Table 2 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"48\" Name=\"List Table 3 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"49\" Name=\"List Table 4 Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"50\" Name=\"List Table 5 Dark Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"51\"\r\n   Name=\"List Table 6 Colorful Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" Priority=\"52\"\r\n   Name=\"List Table 7 Colorful Accent 6\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Mention\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Smart Hyperlink\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Hashtag\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Unresolved Mention\"/\u003e\r\n  \u003cw:LsdException Locked=\"false\" SemiHidden=\"true\" UnhideWhenUsed=\"true\"\r\n   Name=\"Smart Link\"/\u003e\r\n \u003c/w:LatentStyles\u003e\r\n\u003c/xml\u003e\u003c![endif]--\u003e\r\n\u003cstyle\u003e\r\n\u003c!--\r\n /* Font Definitions */\r\n @font-face\r\n\t{font-family:\"Cambria Math\";\r\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;\r\n\tmso-font-charset:0;\r\n\tmso-generic-font-family:roman;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-536869121 1107305727 33554432 0 415 0;}\r\n@font-face\r\n\t{font-family:等线;\r\n\tpanose-1:2 1 6 0 3 1 1 1 1 1;\r\n\tmso-font-alt:DengXian;\r\n\tmso-font-charset:134;\r\n\tmso-generic-font-family:auto;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-1610612033 953122042 22 0 262159 0;}\r\n@font-face\r\n\t{font-family:Calibri;\r\n\tpanose-1:2 15 5 2 2 2 4 3 2 4;\r\n\tmso-font-charset:0;\r\n\tmso-generic-font-family:swiss;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-469750017 -1073732485 9 0 511 0;}\r\n@font-face\r\n\t{font-family:\"\\@等线\";\r\n\tpanose-1:2 1 6 0 3 1 1 1 1 1;\r\n\tmso-font-charset:134;\r\n\tmso-generic-font-family:auto;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-1610612033 953122042 22 0 262159 0;}\r\n@font-face\r\n\t{font-family:\"Segoe UI\";\r\n\tpanose-1:2 11 5 2 4 2 4 2 2 3;\r\n\tmso-font-charset:0;\r\n\tmso-generic-font-family:swiss;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-469750017 -1073683329 9 0 511 0;}\r\n@font-face\r\n\t{font-family:Consolas;\r\n\tpanose-1:2 11 6 9 2 2 4 3 2 4;\r\n\tmso-font-charset:0;\r\n\tmso-generic-font-family:modern;\r\n\tmso-font-pitch:fixed;\r\n\tmso-font-signature:-536869121 64767 1 0 415 0;}\r\n /* Style Definitions */\r\n p.MsoNormal, li.MsoNormal, div.MsoNormal\r\n\t{mso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-parent:\"\";\r\n\tmargin:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:11.0pt;\r\n\tfont-family:\"Calibri\",sans-serif;\r\n\tmso-fareast-font-family:等线;\r\n\tmso-fareast-theme-font:minor-fareast;}\r\npre\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-style-link:\"HTML Preformatted Char\";\r\n\tmargin:0in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:10.0pt;\r\n\tfont-family:\"Courier New\";\r\n\tmso-fareast-font-family:等线;\r\n\tmso-fareast-theme-font:minor-fareast;}\r\nspan.HTMLPreformattedChar\r\n\t{mso-style-name:\"HTML Preformatted Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"HTML Preformatted\";\r\n\tfont-family:\"Courier New\";\r\n\tmso-ascii-font-family:\"Courier New\";\r\n\tmso-fareast-font-family:等线;\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tmso-hansi-font-family:\"Courier New\";\r\n\tmso-bidi-font-family:\"Courier New\";}\r\np.xmsonormal, li.xmsonormal, div.xmsonormal\r\n\t{mso-style-name:x_msonormal;\r\n\tmso-style-unhide:no;\r\n\tmargin:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:11.0pt;\r\n\tfont-family:\"Calibri\",sans-serif;\r\n\tmso-fareast-font-family:等线;\r\n\tmso-fareast-theme-font:minor-fareast;}\r\n.MsoChpDefault\r\n\t{mso-style-type:export-only;\r\n\tmso-default-props:yes;\r\n\tfont-size:10.0pt;\r\n\tmso-ansi-font-size:10.0pt;\r\n\tmso-bidi-font-size:10.0pt;}\r\n@page WordSection1\r\n\t{size:8.5in 11.0in;\r\n\tmargin:1.0in 1.25in 1.0in 1.25in;\r\n\tmso-header-margin:.5in;\r\n\tmso-footer-margin:.5in;\r\n\tmso-paper-source:0;}\r\ndiv.WordSection1\r\n\t{page:WordSection1;}\r\n--\u003e\r\n\u003c/style\u003e\r\n\u003c!--[if gte mso 10]\u003e\r\n\u003cstyle\u003e\r\n /* Style Definitions */\r\n table.MsoNormalTable\r\n\t{mso-style-name:\"Table Normal\";\r\n\tmso-tstyle-rowband-size:0;\r\n\tmso-tstyle-colband-size:0;\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-style-parent:\"\";\r\n\tmso-padding-alt:0in 5.4pt 0in 5.4pt;\r\n\tmso-para-margin:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:10.0pt;\r\n\tfont-family:\"Times New Roman\",serif;}\r\n\u003c/style\u003e\r\n\u003c![endif]--\u003e\r\n\u003c/head\u003e\r\n\r\n\u003cbody lang=EN-US style=\u0027tab-interval:.5in;word-wrap:break-word\u0027\u003e\r\n\u003c!--StartFragment--\u003e\r\n\r\n\r\n\r\nMachine Type | RAM Size | RestrictedPhysicalMemoryLimit (HEX) | RestrictedPhysicalMemoryLimit   (DEC)\r\n-- | -- | -- | --\r\nApp Service S1 | 1.75 GB | 0x7ff8d000 | ~2GB\r\nApp Service S2 | 3.5 GB | 0xfff8d000 | ~4GB\r\nApp Service S3 | 7 GB | 0x00000001`fff8d000 | ~8GB\r\nLocal Machine | 16 GB | 0 | I guess it should unlimited, since it can reach to 50 GB\r\n\r\n\r\n\r\n\u003cp class=xmsonormal\u003e\u003cspan style=\u0027font-size:9.0pt;font-family:\"Segoe UI\",sans-serif;\r\ncolor:#242424;background:white\u0027\u003e\u0026nbsp;\u003c/span\u003e\u003co:p\u003e\u003c/o:p\u003e\u003c/p\u003e\r\n\r\n\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\r\n\u003c/html\u003e\r\n\r\n\r\nYou can also check the detail logic from below Github source code.\r\nhttps://github.com/dotnet/corert/blob/master/src/Native/gc/windows/gcenv.windows.cpp#L20\r\n![image](https://user-images.githubusercontent.com/36887413/136554564-42ad13c0-2ae1-4702-9d51-058e7a9c706f.png)\r\n\r\n\r\n**Questions**:\r\nWe think this limitation is too strict, such as an App Service customer paid for a machine which has 4 GB physical memory, while the application can only make use of 3.5 GB. The machine memory cannot be fully utilized. This impact all the App Service .net core users. \r\nWe also noticed that Azure Function App v3 which is running on .net core 3.1 got the similar issue, the Azure Function App team has already noticed this limitation and planning to update the value to COMPlus_GCHeapHardLimit to increase it from the Function App platform side.\r\nBut we are thinking it is more reasonable to update the .net core runtime, otherwise, any application which is running inside any kind of sandbox will met the same issue. Instead of updating all the sandboxes\\job object platforms, can we update the .net core runtime?\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOGMSVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc438dBN",
                                           "createdAt":  "2021-10-08T12:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-08T12:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Av_F",
                                           "createdAt":  "2021-10-11T06:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCB3JQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanielLarsenNZ",
                                                                               "createdAt":  "2021-11-09T21:44:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hamish-omny",
                                           "body":  "Adding a bit more context as @chaseyangguang has raised this on my behalf as we\u0027ve been discussing in an Azure support case\r\n\r\n**Background**\r\nWe recently ported a console app that runs as a web job on Azure App Service from being a full framework .net app to being .net core. Shortly after rolling this out we started to see a small number of out of memory exceptions which we hadn\u0027t seen previously. We run on a windows app service plan, and the console app is 64 bit. Our system deals with audio files so it can be necessary for us to allocate large chunks of memory for short durations causing our memory usage to be momentarily high as we need to process a large file.\r\n\r\n**Issue Summary**\r\nSummarizing the above, I think the key points are \r\n- App Services runs our code in what is referred to as a sandbox in the documentation, this is at least in part implemented via the Job Objects API in windows (i verified this by running `QueryInformationJobObject` from inside a repo console app)\r\n- App Services sets `JOB_OBJECT_LIMIT_JOB_MEMORY` on the JobObject, and it\u0027s set to be **greater** than the amount physical memory of the instance\r\n- .net core by default see the process is assigned to a JobObject and has a job memory limit, so takes 75% of the lower of this or the physical memory https://github.com/dotnet/corert/blob/master/src/Native/gc/windows/gcenv.windows.cpp#L334\r\n\r\nThis is what caused our issue, dot net core limited us to to 75% of the physical memory by default even though the memory limit on the job object was greater than the amount of physical memory which is the value full framework .net would fail at.\r\n\r\n**Potential Solutions**\r\nMy thoughts on possible solutions\r\n\r\n1. `COMPlus_GCHeapHardLimit` allows us to force the limit to be greater than the amount of physical memory again (we\u0027re currently testing this). This is correctly reflected in the value of [gcmemoryinfo.totalavailablememorybytes](https://docs.microsoft.com/en-us/dotnet/api/system.gcmemoryinfo.totalavailablememorybytes?view=net-5.0.) but i notice this is consumed in [this platform code](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Runtime.Caching/src/System/Runtime/Caching/PhysicalMemoryMonitor.Unix.cs#L44) as if it\u0027s the amount of physical memory. I might be mis-understanding so happy to be wrong and it doesn\u0027t directly effect us as that code is specific to unix and we are running on windows right now but feels like it could be a gotcha.\r\n1. .net core removes the \"sanity check\" it has and just respects whatever limit is set by the Job Object, it would still default to 75% of this which i would need to set a config option to set back to 99%. Why 99% you ask, because 100% is ignored. So marginally better than option 1 but not much \r\n1. Decide that .net core is behaving as designed, and so any changes will need to happen on the App Services side \r\n1. Some better option i\u0027m missing :-)\r\n \r\n\r\n",
                                           "updatedAt":  "2021-10-11T07:05:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44XCpy",
                                           "createdAt":  "2021-10-18T09:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chaseyangguang",
                                           "body":  "@jeffschwMSFT\\Team, is there any update for this issue?",
                                           "updatedAt":  "2021-10-18T09:09:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44YK2N",
                                           "createdAt":  "2021-10-18T14:54:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "@mangod9 ",
                                           "updatedAt":  "2021-10-18T14:54:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44YxJW",
                                           "createdAt":  "2021-10-18T17:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@AntonLapounov as fyi. ",
                                           "updatedAt":  "2021-10-18T17:51:07Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  ".net core application get out of memory exception in App Service environment(windows machine) when the machine memory is still available",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60542",
        "createdAt":  "2021-10-18T08:29:08Z",
        "number":  60542,
        "author":  "liorss18",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-12-16T20:40:06Z",
        "body":  "### Description\n\nOur process consumes ~55GB working set in production.\r\nRunning in a docker container (from mcr.microsoft.com). \r\nIssue happened both on dotnet runtime 5.0.11 and 3.1.19.\r\n\r\nThe process was running fine until we introduced a memory limit on the container, and by \"fine\" I mean that whenever gen2 GC kicked in it was a Background GC.\r\nWe\u0027ve set Memory limit to be 65GB.\r\nWhenever the process reaches 48GB of heap size (I am familiar with the 75% rule of HeapHardLimitPercent), GC kicks in and running non-concurrently. Heap size (soh) shrinks 7GB.\r\nWe collect GC events and all of the gen2 GC were either out-of-space-soh (90% occurrences) or out-of-space-loh.\r\nThis behavior is repeated dozens times a day.\r\n\r\nDue to the non-concurrent full GC, our process suffers from periodic hangs (stop the world) of about 5-20 seconds every 20 minutes.\r\n\r\nGC and memory behavior during 12 hours:\r\n\u003cimg width=\"1450\" alt=\"Screenshot at Oct 18 11-02-32\" src=\"https://user-images.githubusercontent.com/979168/137691892-f626ce9d-cdbc-469b-91f7-4898ce1579d7.png\"\u003e\r\n\r\n\n\n### Reproduction Steps\n\nDon\u0027t have a simplified code at the moment.\n\n### Expected behavior\n\nWhenever heap size gets close to the heap limit, a Background GC should run and not non-concurrent.\r\nSeems like the decision logic in restricted environment should be fixed.\n\n### Actual behavior\n\nnon-concurrent gen2 GC is run when getting to 75% heap size.\r\n\r\nSee GCStats:\r\n\u003cimg width=\"1486\" alt=\"Screenshot at Oct 18 10-55-11\" src=\"https://user-images.githubusercontent.com/979168/137690676-a7d045a7-f9ef-451b-93df-2b591d593a4e.png\"\u003e\r\n\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nProbably removing the memory limit but it is not really an option for us whenever there are several containers running on the same node.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nGenerally I would like to know:\r\n1. What\u0027s the value of HeapHardLimitPercent when running in a container without a memory limit?\r\n2. What\u0027s the decision logic of choosing BGC over non-concurrent?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO2B4Og==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44W4EC",
                                           "createdAt":  "2021-10-18T08:29:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nOur process consumes ~55GB working set in production.\r\nRunning in a docker container (from mcr.microsoft.com). \r\nIssue happened both on dotnet runtime 5.0.11 and 3.1.19.\r\n\r\nThe process was running fine until we introduced a memory limit on the container, and by \"fine\" I mean that whenever gen2 GC kicked in it was a Background GC.\r\nWe\u0027ve set Memory limit to be 65GB.\r\nWhenever the process reaches 48GB of heap size (I am familiar with the 75% rule of HeapHardLimitPercent), GC kicks in and running non-concurrently. Heap size (soh) shrinks 7GB.\r\nWe collect GC events and all of the gen2 GC were either out-of-space-soh (90% occurrences) or out-of-space-loh.\r\nThis behavior is repeated dozens times a day.\r\n\r\nDue to the non-concurrent full GC, our process suffers from periodic hangs (stop the world) of about 5-20 seconds every 20 minutes.\r\n\r\nGC and memory behavior during 12 hours:\r\n\u003cimg width=\"1450\" alt=\"Screenshot at Oct 18 11-02-32\" src=\"https://user-images.githubusercontent.com/979168/137691892-f626ce9d-cdbc-469b-91f7-4898ce1579d7.png\"\u003e\r\n\r\n\n\n### Reproduction Steps\n\nDon\u0027t have a simplified code at the moment.\n\n### Expected behavior\n\nWhenever heap size gets close to the heap limit, a Background GC should run and not non-concurrent.\r\nSeems like the decision logic in restricted environment should be fixed.\n\n### Actual behavior\n\nnon-concurrent gen2 GC is run when getting to 75% heap size.\r\n\r\nSee GCStats:\r\n\u003cimg width=\"1486\" alt=\"Screenshot at Oct 18 10-55-11\" src=\"https://user-images.githubusercontent.com/979168/137690676-a7d045a7-f9ef-451b-93df-2b591d593a4e.png\"\u003e\r\n\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nProbably removing the memory limit but it is not really an option for us whenever there are several containers running on the same node.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nGenerally I would like to know:\r\n1. What\u0027s the value of HeapHardLimitPercent when running in a container without a memory limit?\r\n2. What\u0027s the decision logic of choosing BGC over non-concurrent?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eliorss18\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-18T08:29:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44dwYe",
                                           "createdAt":  "2021-10-20T04:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "how to find out the memory load a GC observed is described [here](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#figuring-out-the-amount-of-work-for-gen2-gcs). you can see if you hit the 90% threshold. you may have other non trivial amount of native memory usage in the process. also the condemned reasons table tells you if you hit high memory load situation, also described there.",
                                           "updatedAt":  "2021-10-20T04:44:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44qr4q",
                                           "createdAt":  "2021-10-25T09:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liorss18",
                                           "body":  "@Maoni0 \r\nAccording Condemned Reasons table, those were the reasons for the gen2 cycle: Ephemeral Low, Compacting Full GC, Compacting Full under HardLimit.\r\nThe MemoryPressure was 82.\r\nIf the container\u0027s memory limit is 65gb then 90% of that is 58.5gb, and 75% is 48.75gb.\r\nSo I guess a full GC ran because it reached the 90% physical memory.\r\n\r\nBut I still don\u0027t understand why doesn\u0027t a BGC run sooner and prevents a full compacting gc to occur later on:\r\nHere are some facts and numbers when running the process **without** the container\u0027s memory limit:\r\n\r\n1. All full GCs are BGC. That\u0027s good.\r\n2. Working set at peaks: 64gb.\r\n3. Total heap size at peaks: 53.7gb.\r\n\r\nSo basically I don\u0027t understand why GC doesn\u0027t run a BGC when getting close to the 90% threshold when limiting the memory. \r\nIt seems like GCHeapHardLimitPercent threshold is met sooner than GCHighMemPercent threshold. I wonder what takes so much of native memory in my process.\r\nHow should I teak the thresholds (GCHighMemPercent, GCHeapHardLimitPercent) so a BGC will run before GC behaves more aggressively and still impose the desired 65gb container\u0027s memory limit.\r\nIf I get it correctly, I should decrease  GCHeapHardLimitPercent to avoid full blocking GCs, but won\u0027t it impose a risk on getting OOM exceptions?",
                                           "updatedAt":  "2021-10-25T12:54:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45juq_",
                                           "createdAt":  "2021-11-10T19:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liorss18",
                                           "body":  "Any update on this? We still suffer from this unexpected behavior.",
                                           "updatedAt":  "2021-11-10T19:25:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45nc0j",
                                           "createdAt":  "2021-11-11T21:36:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "you used to not have a memory limit; now you do. you said your heap size was 53.7gb without a memory limit, and that\u0027s already larger than 75% of the 65GB memory limit you set which is 48.75GB. so it doesn\u0027t seem surprising you are seeing different behavior? the less memory you give to the GC the more chance you have to have full blocking gen2 GCs run. GCHeapHardLimit is by default 75% and GCHighMemPercent is much higher (90+%).\r\n\r\nif you collect top level GC traces we\u0027d be happy to take a look.",
                                           "updatedAt":  "2021-11-11T21:36:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46WgQS",
                                           "createdAt":  "2021-11-25T08:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liorss18",
                                           "body":  "So we fine tuned GCHeapHardLimit to 80% and GCHighMemPercent to 98% and now all GC\u0027s are BGC. Thanks!\r\nWould be great if you could point me to a documentation on how GC decides to do a BGC.",
                                           "updatedAt":  "2021-11-25T08:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46m2Ek",
                                           "createdAt":  "2021-12-01T03:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "[this](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#gc-is-per-process-but-is-aware-of-physical-memory-load-on-the-machine) explains when GC would choose to do full blocking GCs, the rest of the time it in general would choose to do BGCs for gen2 GCs.",
                                           "updatedAt":  "2021-12-01T03:55:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47YHg6",
                                           "createdAt":  "2021-12-16T20:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liorss18",
                                           "body":  "Why not running BGC sooner, i.e, when memory load gets to, say, 90% of the value of GCHighMemPercent, and give it a chance to clean memory without blocking the process?",
                                           "updatedAt":  "2021-12-16T20:40:06Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Non-concurrent GC is run rather than Background GC, in container with memory limit",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61416",
        "createdAt":  "2021-11-10T13:53:40Z",
        "number":  61416,
        "author":  "freakmaxi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-11T20:47:03Z",
        "body":  "### Description\n\nMy application is crashing after a period of time. Following is the only output in kubelet worker O/S logs (syslog) (Ubuntu 20.04). The application is running as a kubernetes cluster pod (Cluster v1.22.3). Pod gets terminated with Reason Error and Exit Code 139. For container engine, we are using cri-o. Container image is base on Ubuntu 20.04 with `dotnet-runtime-6.0` package installation.\r\n\r\nBasic setup for the environment is\r\n\r\n```\r\nRUN apt-get update \u0026\u0026 apt-get -y install apt-transport-https wget libx11-6 libopenblas-dev\r\n\r\nRUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\r\nRUN dpkg -i packages-microsoft-prod.deb\r\n\r\nRUN apt-get update \u0026\u0026 apt-get -y install dotnet-runtime-6.0\r\n```\r\n\r\n```\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346202] show_signal_msg: 3 callbacks suppressed\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346204] .NET BGC[3062246]: segfault at 34 ip 00007f4da9ce4474 sp 00007f4cb22ccc90 error 4 in libcoreclr.so[7f4da998e000+382000]\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346212] Code: ff 48 8b 05 e6 0a 3b 00 4c 89 e1 48 c1 e9 09 8b 04 88 4c 89 e1 48 c1 e9 04 0f a3 c8 0f 82 e4 f5 ff ff 49 8b 0c 24 48 83 e1 f8 \u003c8b\u003e 41 04 83 39 00 78 04 31 c9 eb 0c 41 8b 54 24 08 0f b7 09 48 0f\r\n```\r\n\r\nSame application is able to run without any problem in .net 5.0.\r\n\n\n### Reproduction Steps\n\nI do not know why it is happening...\n\n### Expected behavior\n\nNot to crash\n\n### Actual behavior\n\nCrashing...\n\n### Regression?\n\nIt is able to work without any problem with net 5.0\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nIt is compiled as EXE (output is DLL) runs as `dotnet XXX.dll`\r\n\r\nnet 6.0. (Please check the description)\r\nContainer O/S: Ubuntu 20.04 (FROM ubuntu:20.04) \u003c\u003c Dockerfile\r\nArch x64\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOZ1Y-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45h7hR",
                                           "createdAt":  "2021-11-10T13:53:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-11-10T13:53:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45iAGO",
                                           "createdAt":  "2021-11-10T14:02:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nMy application is crashing after a period of time. Following is the only output in kubelet worker O/S logs (syslog) (Ubuntu 20.04). The application is running as a kubernetes cluster pod (Cluster v1.22.3). Pod gets terminated with Reason Error and Exit Code 139. For container engine, we are using cri-o. Container image is base on Ubuntu 20.04 with `dotnet-runtime-6.0` package installation.\r\n\r\nBasic setup for the environment is\r\n\r\n```\r\nRUN apt-get update \u0026\u0026 apt-get -y install apt-transport-https wget libx11-6 libopenblas-dev\r\n\r\nRUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\r\nRUN dpkg -i packages-microsoft-prod.deb\r\n\r\nRUN apt-get update \u0026\u0026 apt-get -y install dotnet-runtime-6.0\r\n```\r\n\r\n```\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346202] show_signal_msg: 3 callbacks suppressed\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346204] .NET BGC[3062246]: segfault at 34 ip 00007f4da9ce4474 sp 00007f4cb22ccc90 error 4 in libcoreclr.so[7f4da998e000+382000]\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346212] Code: ff 48 8b 05 e6 0a 3b 00 4c 89 e1 48 c1 e9 09 8b 04 88 4c 89 e1 48 c1 e9 04 0f a3 c8 0f 82 e4 f5 ff ff 49 8b 0c 24 48 83 e1 f8 \u003c8b\u003e 41 04 83 39 00 78 04 31 c9 eb 0c 41 8b 54 24 08 0f b7 09 48 0f\r\n```\r\n\r\nSame application is able to run without any problem in .net 5.0.\r\n\n\n### Reproduction Steps\n\nI do not know why it is happening...\n\n### Expected behavior\n\nNot to crash\n\n### Actual behavior\n\nCrashing...\n\n### Regression?\n\nIt is able to work without any problem with net 5.0\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nIt is compiled as EXE (output is DLL) runs as `dotnet XXX.dll`\r\n\r\nnet 6.0. (Please check the description)\r\nContainer O/S: Ubuntu 20.04 (FROM ubuntu:20.04) \u003c\u003c Dockerfile\r\nArch x64\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efreakmaxi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-10T14:02:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45nEKR",
                                           "createdAt":  "2021-11-11T18:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @freakmaxi, is there any evidence that a GC is causing the crash? Do you have any stacktrace or any other info to diagnose further?",
                                           "updatedAt":  "2021-11-11T18:48:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45nVj6",
                                           "createdAt":  "2021-11-11T20:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "freakmaxi",
                                           "body":  "Hello @mangod9. Sadly, I do not have any more output other than the logs in syslog of O/S\r\n\r\nAccording to log, it says\r\n\r\n```\r\nNov 10 12:44:30 vmi501022 kernel: [268576.346204] .NET BGC[3062246]: segfault at 34 ip 00007f4da9ce4474 sp 00007f4cb22ccc90 error 4 in libcoreclr.so[7f4da998e000+382000]\r\n```\r\n\r\nit says .NET BGC and I think BGC stands for Background Garbage Collector, that\u0027s why I assume it is GC problem. Other than this, it is happening randomly. I couldn\u0027t reproduce the problem. It was happening in our Production environment and because of these random crashes, I reverted back to net5.0 version yesterday. Since yesterday, it hasn\u0027t crashed even under a heavy load.",
                                           "updatedAt":  "2021-11-11T20:47:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Garbage Collection Causes Crash",
        "labels":  [
                       "area-GC-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61628",
        "createdAt":  "2021-11-15T21:56:16Z",
        "number":  61628,
        "author":  "gbalykov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu117Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LeszekKalibrate",
                                            "createdAt":  "2023-03-13T12:25:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-11-22T07:56:24Z",
        "body":  "We observe increase in average GC time of .NET 6 (6.0-preview7 and v6.0.0) in comparison to .NET Core 3.1 (3.1.3 and v3.1.20). This slowdown is observed only on arm/arm64, there\u0027s no slowdown on x64.\r\n\r\ntest:\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace gctest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            RandomArray();\r\n        }\r\n\r\n        static List\u003cObject\u003e cacheObj = new List\u003cObject\u003e();\r\n        static private void RandomArray()\r\n        {\r\n            while (true)\r\n            {\r\n                Random r = new Random();\r\n                if (r.Next(100) == 0)\r\n                {\r\n                    cacheObj = null;\r\n                    cacheObj = new List\u003cObject\u003e();\r\n                }\r\n                else\r\n                {\r\n                    byte[] buffer = new byte[r.Next(400000) + 1000];\r\n\r\n                    for (int i = 0; i \u003c buffer.Length; ++i)\r\n                    {\r\n                        buffer[i] = (byte)r.Next();\r\n                    }\r\n                    cacheObj.Add(buffer);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 1) v3.1.20 arm64 (rpi4, ubuntu 20.10)\r\n\r\ncoreclr: 63ecd17b41a826d8fbc77b238e8490df7bc92af4, v3.1.20 tag\r\ncorefx: c2011c5350eba4c83554205d06b9ed97c3fccf05, v3.1.20 tag\r\n\r\nPatch to calculate time:\r\n```patch\r\ndiff --git a/src/gc/gcee.cpp b/src/gc/gcee.cpp\r\nindex c75ba9bb238..eecfd37c729 100644\r\n--- a/src/gc/gcee.cpp\r\n+++ b/src/gc/gcee.cpp\r\n@@ -20,6 +20,8 @@ uint32_t g_percentTimeInGCSinceLastGC = 0;\r\n size_t g_GenerationSizes[NUMBERGENERATIONS];\r\n size_t g_GenerationPromotedSizes[NUMBERGENERATIONS];\r\n \r\n+uint64_t GetHighPrecisionTimeStamp();\r\n+\r\n void GCHeap::UpdatePreGCCounters()\r\n {\r\n #ifdef MULTIPLE_HEAPS\r\n@@ -86,10 +88,16 @@ void GCHeap::UpdatePreGCCounters()\r\n         uint64_t rangeReserved = static_cast\u003cuint64_t\u003e(rangeEndReserved - rangeStart);\r\n         FIRE_EVENT(GCGenerationRange, generation, rangeStart, range, rangeReserved);\r\n     }, nullptr);\r\n+\r\n+    uint64_t end = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePreGCCounters end -\u003e %llu\\n\", (long long unsigned) end);\r\n }\r\n \r\n void GCHeap::UpdatePostGCCounters()\r\n {\r\n+    uint64_t start = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePostGCCounters start -\u003e %llu\\n\", (long long unsigned) start);\r\n+\r\n     totalSurvivedSize = gc_heap::get_total_survived_size();\r\n \r\n     //\r\n@@ -268,8 +276,6 @@ size_t GCHeap::GetLastGCDuration(int generation)\r\n     return dd_gc_elapsed_time (hp-\u003edynamic_data_of (generation));\r\n }\r\n \r\n-size_t GetHighPrecisionTimeStamp();\r\n-\r\n size_t GCHeap::GetNow()\r\n {\r\n     return GetHighPrecisionTimeStamp();\r\n```\r\n\r\nAlso, small change is needed to support clang10 build (simply add clang10 option to build.sh).\r\n\r\nHow to build:\r\n```sh\r\n# coreclr\r\nROOTFS_DIR=`pwd`/rootfs/arm64 ./build.sh -portablebuild=false -clang10 -cross -arm64 -Release -skipcrossgen\r\n\r\n# corefx\r\nROOTFS_DIR=`pwd/rootfs/arm64 src/Native/build-native.sh -cross -clang10 -Release -arm64\r\nROOTFS_DIR=`pwd/rootfs/arm64 ./build.sh -c Release /p:BinPlaceNETCoreAppPackage=true /p:BuildNative=false /p:UseSharedCompilation=false\r\n```\r\n\r\nResult:\r\n```\r\nCount GC: 3385\r\nTotal GC time: 13.116 seconds\r\nAverage GC time (post start - pre end): 0.0038747415066469723 seconds\r\nMax GC time: 0.054 seconds\r\n```\r\n\r\n### 2) v6.0.0 arm64 (rpi4, ubuntu 20.10)\r\n\r\n4822e3c3aa77eb82b2fb33c9321f923cf11ddde6, v6.0.0 tag\r\n\r\nPatch to calculate time:\r\n```patch\r\ndiff --git a/src/coreclr/gc/gcee.cpp b/src/coreclr/gc/gcee.cpp\r\nindex afc5d3a8dd2..3b24911d130 100644\r\n--- a/src/coreclr/gc/gcee.cpp\r\n+++ b/src/coreclr/gc/gcee.cpp\r\n@@ -19,6 +19,8 @@ uint32_t g_percentTimeInGCSinceLastGC = 0;\r\n size_t g_GenerationSizes[total_generation_count];\r\n size_t g_GenerationPromotedSizes[total_generation_count];\r\n \r\n+uint64_t GetHighPrecisionTimeStamp();\r\n+\r\n void GCHeap::UpdatePreGCCounters()\r\n {\r\n #ifdef MULTIPLE_HEAPS\r\n@@ -54,6 +56,9 @@ void GCHeap::UpdatePreGCCounters()\r\n \r\n     FIRE_EVENT(GCStart_V2, count, depth, reason, static_cast\u003cuint32_t\u003e(type));\r\n     ReportGenerationBounds();\r\n+\r\n+    uint64_t end = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePreGCCounters end -\u003e %llu\\n\", (long long unsigned) end);\r\n }\r\n \r\n void GCHeap::ReportGenerationBounds()\r\n@@ -71,6 +76,9 @@ void GCHeap::ReportGenerationBounds()\r\n \r\n void GCHeap::UpdatePostGCCounters()\r\n {\r\n+    uint64_t start = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePostGCCounters start -\u003e %llu\\n\", (long long unsigned) start);\r\n+\r\n     totalSurvivedSize = gc_heap::get_total_survived_size();\r\n \r\n     //\r\n@@ -243,8 +251,6 @@ size_t GCHeap::GetLastGCDuration(int generation)\r\n     return (size_t)(dd_gc_elapsed_time (hp-\u003edynamic_data_of (generation)) / 1000);\r\n }\r\n \r\n-uint64_t GetHighPrecisionTimeStamp();\r\n-\r\n size_t GCHeap::GetNow()\r\n {\r\n     return (size_t)(GetHighPrecisionTimeStamp() / 1000);\r\n```\r\n\r\nHow to build:\r\n```sh\r\nROOTFS_DIR=`pwd`/.tools/rootfs/arm64 ./build.sh --portablebuild false --cross --clang10 --arch arm64 --runtimeConfiguration Release --librariesConfiguration Release --subset clr+libs.native /p:EnableSourceLink=false\r\nROOTFS_DIR=`pwd`/.tools/rootfs/arm64 ./build.sh --cross --clang10 --arch arm64 --runtimeConfiguration Release --librariesConfiguration Release --subset libs.ref+libs.src+libs.pretest+libs.packages+libs.tests --testscope all /p:EnableSourceLink=false\r\n```\r\n\r\nResult:\r\n```\r\nCount GC: 3386\r\nTotal GC time: 13.850371 seconds\r\nAverage GC time (post start - pre end): 0.004090481689308919 seconds\r\nMax GC time: 0.061811 seconds\r\n```\r\n\r\nIn this case there\u0027s 5.7% slowdown, we also observed 9% slowdown on arm64 rpi4. On armel slowdown in average GC time grows up to 10-20%. Can this be related to introduction of pinned object heap in .NET 5?\r\n\r\ncc @alpencolt @jkotas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOiCi9g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45xz0i",
                                           "createdAt":  "2021-11-15T21:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe observe increase in average GC time of .NET 6 (6.0-preview7 and v6.0.0) in comparison to .NET Core 3.1 (3.1.3 and v3.1.20). This slowdown is observed only on arm/arm64, there\u0027s no slowdown on x64.\r\n\r\ntest:\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace gctest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            RandomArray();\r\n        }\r\n\r\n        static List\u003cObject\u003e cacheObj = new List\u003cObject\u003e();\r\n        static private void RandomArray()\r\n        {\r\n            while (true)\r\n            {\r\n                Random r = new Random();\r\n                if (r.Next(100) == 0)\r\n                {\r\n                    cacheObj = null;\r\n                    cacheObj = new List\u003cObject\u003e();\r\n                }\r\n                else\r\n                {\r\n                    byte[] buffer = new byte[r.Next(400000) + 1000];\r\n\r\n                    for (int i = 0; i \u003c buffer.Length; ++i)\r\n                    {\r\n                        buffer[i] = (byte)r.Next();\r\n                    }\r\n                    cacheObj.Add(buffer);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 1) v3.1.20 arm64 (rpi4, ubuntu 20.10)\r\n\r\ncoreclr: 63ecd17b41a826d8fbc77b238e8490df7bc92af4, v3.1.20 tag\r\ncorefx: c2011c5350eba4c83554205d06b9ed97c3fccf05, v3.1.20 tag\r\n\r\nPatch to calculate time:\r\n```patch\r\ndiff --git a/src/gc/gcee.cpp b/src/gc/gcee.cpp\r\nindex c75ba9bb238..eecfd37c729 100644\r\n--- a/src/gc/gcee.cpp\r\n+++ b/src/gc/gcee.cpp\r\n@@ -20,6 +20,8 @@ uint32_t g_percentTimeInGCSinceLastGC = 0;\r\n size_t g_GenerationSizes[NUMBERGENERATIONS];\r\n size_t g_GenerationPromotedSizes[NUMBERGENERATIONS];\r\n \r\n+uint64_t GetHighPrecisionTimeStamp();\r\n+\r\n void GCHeap::UpdatePreGCCounters()\r\n {\r\n #ifdef MULTIPLE_HEAPS\r\n@@ -86,10 +88,16 @@ void GCHeap::UpdatePreGCCounters()\r\n         uint64_t rangeReserved = static_cast\u003cuint64_t\u003e(rangeEndReserved - rangeStart);\r\n         FIRE_EVENT(GCGenerationRange, generation, rangeStart, range, rangeReserved);\r\n     }, nullptr);\r\n+\r\n+    uint64_t end = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePreGCCounters end -\u003e %llu\\n\", (long long unsigned) end);\r\n }\r\n \r\n void GCHeap::UpdatePostGCCounters()\r\n {\r\n+    uint64_t start = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePostGCCounters start -\u003e %llu\\n\", (long long unsigned) start);\r\n+\r\n     totalSurvivedSize = gc_heap::get_total_survived_size();\r\n \r\n     //\r\n@@ -268,8 +276,6 @@ size_t GCHeap::GetLastGCDuration(int generation)\r\n     return dd_gc_elapsed_time (hp-\u003edynamic_data_of (generation));\r\n }\r\n \r\n-size_t GetHighPrecisionTimeStamp();\r\n-\r\n size_t GCHeap::GetNow()\r\n {\r\n     return GetHighPrecisionTimeStamp();\r\n```\r\n\r\nAlso, small change is needed to support clang10 build (simply add clang10 option to build.sh).\r\n\r\nHow to build:\r\n```sh\r\n# coreclr\r\nROOTFS_DIR=`pwd`/rootfs/arm64 ./build.sh -portablebuild=false -clang10 -cross -arm64 -Release -skipcrossgen\r\n\r\n# corefx\r\nROOTFS_DIR=`pwd/rootfs/arm64 src/Native/build-native.sh -cross -clang10 -Release -arm64\r\nROOTFS_DIR=`pwd/rootfs/arm64 ./build.sh -c Release /p:BinPlaceNETCoreAppPackage=true /p:BuildNative=false /p:UseSharedCompilation=false\r\n```\r\n\r\nResult:\r\n```\r\nCount GC: 3385\r\nTotal GC time: 13.116 seconds\r\nAverage GC time (post start - pre end): 0.0038747415066469723 seconds\r\nMax GC time: 0.054 seconds\r\n```\r\n\r\n### 2) v6.0.0 arm64 (rpi4, ubuntu 20.10)\r\n\r\n4822e3c3aa77eb82b2fb33c9321f923cf11ddde6, v6.0.0 tag\r\n\r\nPatch to calculate time:\r\n```patch\r\ndiff --git a/src/coreclr/gc/gcee.cpp b/src/coreclr/gc/gcee.cpp\r\nindex afc5d3a8dd2..3b24911d130 100644\r\n--- a/src/coreclr/gc/gcee.cpp\r\n+++ b/src/coreclr/gc/gcee.cpp\r\n@@ -19,6 +19,8 @@ uint32_t g_percentTimeInGCSinceLastGC = 0;\r\n size_t g_GenerationSizes[total_generation_count];\r\n size_t g_GenerationPromotedSizes[total_generation_count];\r\n \r\n+uint64_t GetHighPrecisionTimeStamp();\r\n+\r\n void GCHeap::UpdatePreGCCounters()\r\n {\r\n #ifdef MULTIPLE_HEAPS\r\n@@ -54,6 +56,9 @@ void GCHeap::UpdatePreGCCounters()\r\n \r\n     FIRE_EVENT(GCStart_V2, count, depth, reason, static_cast\u003cuint32_t\u003e(type));\r\n     ReportGenerationBounds();\r\n+\r\n+    uint64_t end = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePreGCCounters end -\u003e %llu\\n\", (long long unsigned) end);\r\n }\r\n \r\n void GCHeap::ReportGenerationBounds()\r\n@@ -71,6 +76,9 @@ void GCHeap::ReportGenerationBounds()\r\n \r\n void GCHeap::UpdatePostGCCounters()\r\n {\r\n+    uint64_t start = GetHighPrecisionTimeStamp();\r\n+    printf(\"GCHeap::UpdatePostGCCounters start -\u003e %llu\\n\", (long long unsigned) start);\r\n+\r\n     totalSurvivedSize = gc_heap::get_total_survived_size();\r\n \r\n     //\r\n@@ -243,8 +251,6 @@ size_t GCHeap::GetLastGCDuration(int generation)\r\n     return (size_t)(dd_gc_elapsed_time (hp-\u003edynamic_data_of (generation)) / 1000);\r\n }\r\n \r\n-uint64_t GetHighPrecisionTimeStamp();\r\n-\r\n size_t GCHeap::GetNow()\r\n {\r\n     return (size_t)(GetHighPrecisionTimeStamp() / 1000);\r\n```\r\n\r\nHow to build:\r\n```sh\r\nROOTFS_DIR=`pwd`/.tools/rootfs/arm64 ./build.sh --portablebuild false --cross --clang10 --arch arm64 --runtimeConfiguration Release --librariesConfiguration Release --subset clr+libs.native /p:EnableSourceLink=false\r\nROOTFS_DIR=`pwd`/.tools/rootfs/arm64 ./build.sh --cross --clang10 --arch arm64 --runtimeConfiguration Release --librariesConfiguration Release --subset libs.ref+libs.src+libs.pretest+libs.packages+libs.tests --testscope all /p:EnableSourceLink=false\r\n```\r\n\r\nResult:\r\n```\r\nCount GC: 3386\r\nTotal GC time: 13.850371 seconds\r\nAverage GC time (post start - pre end): 0.004090481689308919 seconds\r\nMax GC time: 0.061811 seconds\r\n```\r\n\r\nIn this case there\u0027s 5.7% slowdown, we also observed 9% slowdown on arm64 rpi4. On armel slowdown in average GC time grows up to 10-20%. Can this be related to introduction of pinned object heap in .NET 5?\r\n\r\ncc @alpencolt @jkotas \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egbalykov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-15T21:56:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc450u0C",
                                           "createdAt":  "2021-11-16T10:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "## 3) 7.0 arm64 (rpi4, ubuntu 20.10)\r\n\r\nc3973270d5219607e96db68d7d53f45e88600a55, main\r\n\r\nPatch and build same as for v6.0.0.\r\n\r\nResult:\r\n```\r\nCount GC: 3366\r\nTotal GC time: 14.48532 seconds\r\nAverage GC time (post start - pre end): 0.004303422459893048 seconds\r\nMax GC time: 0.066454 seconds\r\n```\r\n\r\nIn this case there\u0027s around 11% slowdown in comparison to 3.1.20.\r\n",
                                           "updatedAt":  "2021-11-16T10:18:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc451hec",
                                           "createdAt":  "2021-11-16T14:32:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "## 4) v5.0.11 arm64 (rpi4, ubuntu 20.10)\r\n\r\nf431858f8b1f1510723ace6343786c9194dbd7fc, v5.0.11\r\n\r\nPatch similar to above, build:\r\n```sh\r\nROOTFS_DIR=`pwd`/.tools/rootfs/arm64 ./build.sh --portablebuild false -s clr+libs.native --clang10 --cross --arch arm64 -c Release\r\n# managed libs are built during x64 build with:\r\n./build.sh clr+libs -c Release\r\n```\r\n\r\nResult:\r\n```\r\nCount GC: 3386\r\nTotal GC time: 10.051179 seconds\r\nAverage GC time (post start - pre end): 0.002968452155936208 seconds\r\nMax GC time: 0.054838 seconds\r\n```\r\n\r\nStrangely, 5.0 is better in average GC time than both 3.1 and 6.0.",
                                           "updatedAt":  "2021-11-16T14:36:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc452J_M",
                                           "createdAt":  "2021-11-16T17:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Interesting, we will take a look. Is the slowdown specific to the testcase you mention here, or are you noticing it for broad set of tests? Also wonder if the `random` is increasing the non-determinism to use as a true perf comparison? ",
                                           "updatedAt":  "2021-11-16T17:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc452LTJ",
                                           "createdAt":  "2021-11-16T17:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCx5LA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2021-11-16T17:35:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "Yes, currently specific to this test case only, but I\u0027ll try to figure out a more simple test. From what I\u0027ve seen the results don\u0027t vary significantly from launch to launch on the same runtime, but I agree that test without `random` would be a much better benchmark.",
                                           "updatedAt":  "2021-11-16T17:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46IKL2",
                                           "createdAt":  "2021-11-22T07:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "I think the test above is not a correct benchmark. I was not able to reproduce slowdown without random. Moreover, slight change in constant can give different results, i.e. 5.0 and 6.0 will be better than 3.1.\r\n\r\n## 1) \r\ndiff only shown:\r\n```c#\r\n...\r\n                if (r.Next(50) == 0)\r\n...\r\n                    byte[] buffer = new byte[r.Next(100000) + 1000];\r\n...\r\n```\r\n\r\n3.1:\r\n```\r\nCount GC: 1827\r\nTotal GC: 3.338\r\nAverage GC: 0.0018270388615216201\r\nMax GC: 0.014\r\n```\r\n\r\n5.0:\r\n```\r\nCount GC: 2533\r\nTotal GC: 4.189087\r\nAverage GC: 0.0016538045795499408\r\nMax GC: 0.009156\r\n```\r\n\r\n6.0:\r\n```\r\nCount GC: 1838\r\nTotal GC: 3.072861\r\nAverage GC: 0.0016718503808487487\r\nMax GC: 0.009725\r\n```\r\n\r\n## 2) \r\n\r\n```c#\r\n...\r\n                    byte[] buffer = new byte[r.Next(500000) + 1000];\r\n...\r\n```\r\n\r\n3.1:\r\n```\r\nCount GC: 913\r\nTotal GC: 4.792\r\nAverage GC: 0.005248630887185105\r\nMax GC: 0.072\r\n```\r\n\r\n5.0:\r\n```\r\nCount GC: 844\r\nTotal GC: 3.041775\r\nAverage GC: 0.003603998815165877\r\nMax GC: 0.090061\r\n```\r\n\r\n6.0:\r\n```\r\nCount GC: 1032\r\nTotal GC: 5.287999\r\nAverage GC: 0.00512403003875969\r\nMax GC: 0.07295\r\n```\r\n\r\n## 3) \r\n\r\n```c#\r\n...\r\n                    byte[] buffer = new byte[r.Next(410000) + 1000];\r\n...\r\n```\r\n\r\n3.1:\r\n```\r\nCount GC: 710\r\nTotal GC: 2.878\r\nAverage GC: 0.004053521126760564\r\nMax GC: 0.058\r\n```\r\n\r\n5.0:\r\n```\r\nCount GC: 717\r\nTotal GC: 2.411205\r\nAverage GC: 0.003362907949790795\r\nMax GC: 0.042573\r\n```\r\n\r\n6.0:\r\n```\r\nCount GC: 709\r\nTotal GC: 2.886909\r\nAverage GC: 0.00407180394922426\r\nMax GC: 0.042107\r\n```\r\n\r\n## 4) \r\n\r\n```c#\r\n...\r\n                    byte[] buffer = new byte[r.Next(300000) + 1000];\r\n...\r\n```\r\n\r\n3.1:\r\n```\r\nCount GC: 744\r\nTotal GC: 2.263\r\nAverage GC: 0.0030416666666666665\r\nMax GC: 0.041\r\n```\r\n\r\n5.0:\r\n```\r\nCount GC: 717\r\nTotal GC: 1.941936\r\nAverage GC: 0.002708418410041841\r\nMax GC: 0.041781\r\n```\r\n\r\n6.0:\r\n```\r\nCount GC: 709\r\nTotal GC: 2.352822\r\nAverage GC: 0.0033185077574047956\r\nMax GC: 0.041612\r\n```\r\n\r\n## 5) \r\n\r\n```c#\r\n...\r\n                    byte[] buffer = new byte[r.Next(390000) + 1000];\r\n...\r\n```\r\n\r\n3.1:\r\n```\r\nCount GC: 710\r\nTotal GC: 2.97\r\nAverage GC: 0.004183098591549296\r\nMax GC: 0.042\r\n```\r\n\r\n5.0:\r\n```\r\nCount GC: 717\r\nTotal GC: 2.161637\r\nAverage GC: 0.003014835425383542\r\nMax GC: 0.040668\r\n```\r\n\r\n6.0:\r\n```\r\nCount GC: 709\r\nTotal GC: 2.901033\r\nAverage GC: 0.004091724964739069\r\nMax GC: 0.055247\r\n```",
                                           "updatedAt":  "2021-11-22T07:56:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "GC slowdown from .NET Core 3.1",
        "labels":  [
                       "arch-arm64",
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62498",
        "createdAt":  "2021-12-07T20:33:27Z",
        "number":  62498,
        "author":  "NickCraver",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-07T23:46:27Z",
        "body":  "In monitoring production and in benchmark runs, we often want to see how much we\u0027re allocating. A performance counter exists for this today as \"Allocated Bytes/second\" ([ref link](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/performance-counters)).  The problem with this _it\u0027s already a rate_. What we need for many purposes is a total that you can divide out over other things - the most common pattern for performance counters. For example, allocations per minute or hour, or allocations per request when running benchmarks.\r\n\r\nContext:\r\n- A rate isn\u0027t usable in aggregate over time - since the update period to an external observer is neither consistent or deterministic (\"when a GC runs\", we don\u0027t know what time period it\u0027s over and now can we guarantee we observed every change of the counter, meaning we could under counter. If we observe the counter once every `n` `\u003cunit\u003e`s, we equally miss and over or under report based of recording the same value multiple times or missing others.\r\n- There is _a_ way to get this by listening to GC trace today, but I\u0027d argue that\u0027s .NET-monitoring specific and not nearly as usable. Performance counters have a rich ecosystem of observers agnostic to the process type and don\u0027t a) require the permissions to listen to the process and b) already work/collect with existing infrastructure without as much overhead. I\u0027d also argue it\u0027s not trivial to get startup allocations or collections with GC Trace.\r\n\r\nSuggestions:\r\n- IMO, it doesn\u0027t need to be realtime as that would incur a lot of tracking overhead. At the same as when we update existing GC counters (when a collection runs), I propose we increment this new counter.\r\n- To match existing perf counter naming (not just in .NET), I propose this be called `Total Allocated Bytes`\r\n- I don\u0027t think we should look at this feature request in isolation - there are other similar cases like \"% Time in GC\" that if we had a running total of milliseconds or something would be handy if they make sense and are in the same work area. IMO, it\u0027s prudent to see if there are a few sibling counters that make sense as additions here.\r\n\r\ncc @Maoni0 @sebastienros ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjybZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4652vB",
                                           "createdAt":  "2021-12-07T20:33:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn monitoring production and in benchmark runs, we often want to see how much we\u0027re allocating. A performance counter exists for this today as \"Allocated Bytes/second\" ([ref link](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/performance-counters)).  The problem with this _it\u0027s already a rate_. What we need for many purposes is a total that you can divide out over other things - the most common pattern for performance counters. For example, allocations per minute or hour, or allocations per request when running benchmarks.\r\n\r\nContext:\r\n- A rate isn\u0027t usable in aggregate over time - since the update period to an external observer is neither consistent or deterministic (\"when a GC runs\", we don\u0027t know what time period it\u0027s over and now can we guarantee we observed every change of the counter, meaning we could under counter. If we observe the counter once every `n` `\u003cunit\u003e`s, we equally miss and over or under report based of recording the same value multiple times or missing others.\r\n- There is _a_ way to get this by listening to GC trace today, but I\u0027d argue that\u0027s .NET-monitoring specific and not nearly as usable. Performance counters have a rich ecosystem of observers agnostic to the process type and don\u0027t a) require the permissions to listen to the process and b) already work/collect with existing infrastructure without as much overhead. I\u0027d also argue it\u0027s not trivial to get startup allocations or collections with GC Trace.\r\n\r\nSuggestions:\r\n- IMO, it doesn\u0027t need to be realtime as that would incur a lot of tracking overhead. At the same as when we update existing GC counters (when a collection runs), I propose we increment this new counter.\r\n- To match existing perf counter naming (not just in .NET), I propose this be called `Total Allocated Bytes`\r\n- I don\u0027t think we should look at this feature request in isolation - there are other similar cases like \"% Time in GC\" that if we had a running total of milliseconds or something would be handy if they make sense and are in the same work area. IMO, it\u0027s prudent to see if there are a few sibling counters that make sense as additions here.\r\n\r\ncc @Maoni0 @sebastienros \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNickCraver\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-07T20:33:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4654Q1",
                                           "createdAt":  "2021-12-07T20:44:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "yes, we can add the total alloc bytes and the total pause time each time we do a GC. I also had a feature request to add the total pause time in `GC.GetGCMemoryInfo`, I think adding the running total of allocated bytes would be helpful there too. ",
                                           "updatedAt":  "2021-12-07T20:44:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4654es",
                                           "createdAt":  "2021-12-07T20:46:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "also CC @cshung ",
                                           "updatedAt":  "2021-12-07T20:46:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4655oO",
                                           "createdAt":  "2021-12-07T20:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "The System.Runtime event source already exposes this:\r\nhttps://github.com/dotnet/runtime/blob/12a8819eee9865eb38bca6c05fdece1053102854/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/RuntimeEventSource.cs#L88\r\nWhile that\u0027s displayed as a rate by dotnet-counters, I was under the impression that\u0027s actually dotnet-counters doing the math and the raw event that\u0027s published is actually the total bytes allocated.  Is that not the case?",
                                           "updatedAt":  "2021-12-07T20:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4656UR",
                                           "createdAt":  "2021-12-07T20:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFn8eQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NickCraver",
                                                                               "createdAt":  "2021-12-07T21:00:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Is that not the case?\r\n\r\nIt\u0027s not the case :)  Just tried it.  The actual payload includes the difference since the last reported value (so you can still compute the total from it as long as you don\u0027t lose any updates).",
                                           "updatedAt":  "2021-12-07T21:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GPJtl",
                                           "createdAt":  "2022-07-07T23:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I don\u0027t think we have time for this 7.0. moving this out; let me know if you disagree.",
                                           "updatedAt":  "2022-07-07T23:46:27Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Feature Request: New performance counter for total bytes allocated",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63113",
        "createdAt":  "2021-12-24T03:48:28Z",
        "number":  63113,
        "author":  "qwertie",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxiRCw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timcassell",
                                            "createdAt":  "2022-01-09T09:55:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FilipToth",
                                            "createdAt":  "2022-01-12T09:04:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alker0",
                                            "createdAt":  "2023-07-26T01:52:28Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-09-03T21:23:20Z",
        "body":  "### Background and motivation\r\n\r\n[MemoryCache](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.caching.memorycache?view=dotnet-plat-ext-6.0) is the \"standard\" way to cache things in .NET, but its behavior is unintuitive and it [does not guarantee that it will evict cache entries quickly enough](https://stackoverflow.com/questions/6895956/memorycache-does-not-obey-memory-limits-in-configuration) to [prevent OutOfMemoryExceptions](https://stackoverflow.com/questions/23969334/memorycache-outofmemoryexception?noredirect=1\u0026lq=1), among [other issues](https://github.com/dotnet/runtime/issues/48567) such as [badly bloated cache entries](https://github.com/dotnet/runtime/issues/45592#issuecomment-741994471). Plus, it apparently relies on some kind of black magic (the documentation for which I have not been able to locate) to detect the size in bytes of objects in the cache, so that using it correctly is difficult: *even if I am using it correctly, it\u0027s difficult to be confident of that!* I would like to be able to put objects in a cache that contain two kinds of references: (1) references to \"owned\" subobjects that should be counted as part of the parent object, and (2) references to (large) shared objects that can never be evicted. I can\u0027t imagine how anything except the garbage collector would be able to detect that (1) is only reachable via the cache and so should be counted for \"eviction\" purposes, while (2) cannot be GC\u0027d.\r\n\r\nFinally, if the goal is to prevent memory exhaustion, `MemoryCache` is problematic because multiple cache instances can exist that do not coordinate with one another.\r\n\r\nWeak references tend to be collected far too quickly to be used in caches. Soft references would solve this problem. Soft references are like weak references, but garbage-collected much less aggressively.\r\n\r\n### API Proposal\r\n\r\nAn obvious interface would be to replicate `WeakReference\u003cT\u003e`:\r\n\r\n```C#\r\nnamespace System;\r\n\r\npublic sealed class SoftReference\u003cT\u003e : IWeakReference\u003cT\u003e\r\n{\r\n    public SoftReference(T target);\r\n    ~SoftReference();\r\n\r\n    public void SetTarget(T target);\r\n    public bool TryGetTarget([MaybeNullWhen(false)][NotNullWhen(true)] out T target);\r\n}\r\n\r\n// An interface implemented by WeakReference\u003cT\u003e and SoftReference\u003cT\u003e\r\npublic interface IWeakReference\u003cT\u003e\r\n{\r\n    bool TryGetTarget([MaybeNullWhen(false)][NotNullWhen(true)] out T target);\r\n    void SetTarget(T target);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nSoftReference\u003cMyEntity\u003e\u003e _entity;\r\n\r\nvoid Cache(MyEntity entity) =\u003e _entity = new SoftReference\u003cMyEntity\u003e(entity);\r\n\r\n// Later on...\r\nif (_entity != null \u0026\u0026 _entity.TryGetTarget(out MyEntity e))\r\n  Console.WriteLine(\"We\u0027ve still got it!\");\r\nelse\r\n  Console.WriteLine(\"Ain\u0027t got it!\");\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAnother obvious design is to define `SoftReference\u003cT\u003e` as a derived class of `WeakReference\u003cT\u003e`. A third possibility is to add \"softness\" as a feature of the existing WeakReference class.\r\n\r\nWeakReferences have a \"track resurrection\" feature. It\u0027s not clear to me that this would add value to a soft reference, but IMO this feature should be supported if it does not add significant complexity to the GC.\r\n\r\nIt should be kept in mind that after this feature is introduced, many applications could be dominated by soft references (i.e. at any given time, most objects are reachable only through soft references). Therefore, perhaps there should be a property of [`GC`](https://docs.microsoft.com/en-us/dotnet/api/system.gc?view=net-6.0) to control the preferred total memory usage of the process, which would affect the aggressiveness of soft-reference collection. \r\n\r\n```C#\r\n    // Sets a limit for memory usage that the GC should attempt to enforce \r\n    // by collecting more aggressively near the limit. This particularly affects \r\n    // the degree to which objects referenced via soft references are collected.\r\n    public long SoftMemoryLimit { get; set; }\r\n```\r\n\r\n(I would very much like a hard memory limit too, but that\u0027s another story.)\r\n\r\nIdeally, the GC would not collect all soft-referenced object when memory pressure is encountered, but instead prioritize which objects to collect first according to some kind of \"priority\". I believe the most commonly-desired way to prioritize would be by recency: to first get rid of objects that have not been used recently. To that end there could be a `LastUsed` property:\r\n\r\n```C#\r\n    // Controls garbage collection priority; unreachable objects with\r\n    // lower values for LastUsed tend to be collected first.\r\n    // - To artificially delay GC for a soft reference, increase it (eg add 24 hours)\r\n    // - To artificially encourage GC for a soft reference, decrease it (eg subtract \r\n    //   24 hours; or use DateTime.MinValue to treat soft ref like WeakReference)\r\n    // - Setter could convert all dates to UTC so that the GC can directly compare \r\n    //   LastUsed.Ticks of different soft references.\r\n    public DateTime LastUsed { get; set; }\r\n\r\n    // Variant of TryGetTarget that sets LastUsed = DateTime.UtcNow if target is alive\r\n    public bool TryGetTargetAndSetLastUsed([MaybeNullWhen(false)][NotNullWhen(true)] out T target) {\r\n        if (TryGetTarget(out target)) {\r\n            LastUsed = DateTime.UtcNow;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n```\r\n\r\nRather than adding `bool updateLastUsed` as a parameter on `TryGetTarget`, it could be a separate boolean property so that it is possible to configure `IWeakReference.TryGetTarget()` to update `LastUsed`.\r\n\r\nIt is possible that there are multiple soft references to the same object. It is tempting to put the last-used timestamp on the object itself so that there can only be a single timestamp:\r\n\r\n```C#\r\n// Any class could implement this interface in order to control GC priority\r\npublic interface IGCSoftReferencePriority\r\n{\r\n    DateTime LastUsed { get; set; }\r\n}\r\n```\r\n\r\nHowever this approach would have major disadvantages:\r\n\r\n- Users may certainly wish to hold soft references to objects that don\u0027t implement `IGCSoftReferencePriority`\r\n- The very act of checking whether `IGCSoftReferencePriority` is implemented might be too expensive inside the GC\r\n- I expect that user-defined code cannot be called during GC\u0027s stop-the-world phase, and the property could do strange things like allocate memory, loop indefinitely, return a different value each time it is called, etc.\r\n\r\n### Risks\r\n\r\nI have no idea how difficult it would be to implement this in the GC.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOirolXQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47pH6w",
                                           "createdAt":  "2021-12-24T03:48:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n[MemoryCache](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.caching.memorycache?view=dotnet-plat-ext-6.0) is the \"standard\" way to cache things in .NET, but its behavior is unintuitive and it [does not guarantee that it will evict cache entries quickly enough to prevent OutOfMemoryExceptions](https://stackoverflow.com/questions/6895956/memorycache-does-not-obey-memory-limits-in-configuration), among [other issues](https://github.com/dotnet/runtime/issues/48567). Plus, it apparently relies on some kind of black magic (the documentation for which I have not been able to locate) to detect the size in bytes of objects in the cache, so that using it correctly is difficult: *even if I am using it correctly, it\u0027s difficult to be confident of that!* I would like to be able to put objects in a cache that contain two kinds of references: (1) references to \"owned\" subobjects that should be counted as part of the parent object, and (2) references to (large) shared objects that can never be evicted. I can\u0027t imagine how anything except the garbage collector would be able to detect that (1) is only reachable via the cache and so should be counted for \"eviction\" purposes, while (2) cannot be GC\u0027d.\r\n\r\nFinally, if the goal is to prevent memory exhaustion, `MemoryCache` is problematic because multiple cache instances can exist that do not coordinate with one another.\r\n\r\nWeak references tend to be collected far too quickly to be used in caches. Soft references would solve this problem. Soft references are like weak references, but garbage-collected much less aggressively.\n\n### API Proposal\n\nAn obvious interface would be to replicate `WeakReference\u003cT\u003e`:\r\n\r\n```C#\r\nnamespace System;\r\n\r\npublic sealed class SoftReference\u003cT\u003e : IWeakReference\u003cT\u003e\r\n{\r\n    public SoftReference(T target);\r\n    ~SoftReference();\r\n\r\n    public void SetTarget(T target);\r\n    public bool TryGetTarget([MaybeNullWhen(false)][NotNullWhen(true)] out T target);\r\n    // If updateLastUsed is true, LastUsed is set to DateTime.UtcNow\r\n    public bool TryGetTarget([MaybeNullWhen(false)][NotNullWhen(true)] out T target, bool updateLastUsed);\r\n}\r\n\r\n// An interface implemented by WeakReference\u003cT\u003e and SoftReference\u003cT\u003e\r\npublic interface IWeakReference\u003cT\u003e\r\n{\r\n    bool TryGetTarget([MaybeNullWhen(false)][NotNullWhen(true)] out T target);\r\n    void SetTarget(T target);\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\nSoftReference\u003cMyEntity\u003e\u003e _entity;\r\n\r\nvoid Cache(MyEntity entity) =\u003e _entity = new SoftReference\u003cMyEntity\u003e(entity);\r\n\r\n// Later on...\r\nif (_entity != null \u0026\u0026 _entity.TryGetTarget(out MyEntity e))\r\n  Console.WriteLine(\"We\u0027ve still got it!\");\r\nelse\r\n  Console.WriteLine(\"Ain\u0027t got it!\");\r\n```\r\n\n\n### Alternative Designs\n\nAnother obvious design is to define `SoftReference\u003cT\u003e` as a derived class of `WeakReference\u003cT\u003e`. A third possibility is to add \"softness\" as a feature of the existing WeakReference class.\r\n\r\nWeakReferences have a \"track resurrection\" feature. It\u0027s not clear to me that this would add value to a soft reference, but IMO this feature should be supported if it does not add significant complexity to the GC.\r\n\r\nIt should be kept in mind that after this feature is introduced, many applications could be dominated by soft references (i.e. at any given time, most objects are reachable only through soft references). Therefore, perhaps there should be a property of [`GC`](https://docs.microsoft.com/en-us/dotnet/api/system.gc?view=net-6.0) to control the preferred total memory usage of the process, which would affect the aggressiveness of soft-reference collection. \r\n\r\n```C#\r\n    // Sets a limit for memory usage that the GC should attempt to enforce \r\n    // by collecting more aggressively near the limit. This particularly affects \r\n    // the degree to which objects referenced via soft references are collected.\r\n    public long SoftMemoryLimit { get; set; }\r\n```\r\n\r\n(I would very much like a hard memory limit too, but that\u0027s another story.)\r\n\r\nIdeally, the GC would not collect all soft-referenced object when memory pressure is encountered, but instead prioritize which objects to collect first according to some kind of \"priority\". I believe the most commonly-desired way to prioritize would be by recency: to first get rid of objects that have not been used recently. To that end there could be a `LastUsed` property:\r\n\r\n```C#\r\n    // Controls garbage collection priority; unreachable objects with\r\n    // lower values for LastUsed tend to be collected first.\r\n    // - To artificially delay GC for a soft reference, increase it (eg add 24 hours)\r\n    // - To artificially encourage GC for a soft reference, decrease it (eg subtract \r\n    //   24 hours; or use DateTime.MinValue to treat soft ref like WeakReference)\r\n    // - Setter could convert all dates to UTC so that the GC can directly compare \r\n    //   LastUsed.Ticks of different soft references.\r\n    public DateTime LastUsed { get; set; }\r\n\r\n    // Variant of TryGetTarget that sets LastUsed = DateTime.UtcNow if target is alive\r\n    public bool TryGetTargetAndSetLastUsed([MaybeNullWhen(false)][NotNullWhen(true)] out T target) {\r\n        if (TryGetTarget(out target)) {\r\n            LastUsed = DateTime.UtcNow;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n```\r\n\r\nRather than adding `bool updateLastUsed` as a parameter on `TryGetTarget`, it could be a separate boolean property so that it is possible to configure `IWeakReference.TryGetTarget()` to update `LastUsed`.\r\n\r\nIt is possible that there are multiple soft references to the same object. It is tempting to put the last-used timestamp on the object itself so that there can only be a single timestamp:\r\n\r\n```C#\r\n// Any class could implement this interface in order to control GC priority\r\npublic interface IGCSoftReferencePriority\r\n{\r\n    DateTime LastUsed { get; set; }\r\n}\r\n```\r\n\r\nHowever this approach would have major disadvantages:\r\n\r\n- Users may certainly wish to hold soft references to objects that don\u0027t implement `IGCSoftReferencePriority`\r\n- The very act of checking whether `IGCSoftReferencePriority` is implemented might be too expensive inside the GC\r\n- I expect that user-defined code cannot be called during GC\u0027s stop-the-world phase, and the property could do strange things like allocate memory, loop indefinitely, return a different value each time it is called, etc.\n\n### Risks\n\nI have no idea how difficult it would be to implement this in the GC.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eqwertie\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-24T03:48:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47pTvp",
                                           "createdAt":  "2021-12-24T06:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Should it be a variant of `WeakReference`, with an option to control it? ",
                                           "updatedAt":  "2021-12-24T06:47:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47pVQj",
                                           "createdAt":  "2021-12-24T07:08:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Soft references are like weak references, but garbage-collected much less aggressively.\r\n\r\nHow do you propose to implement \"much less aggressively\"?",
                                           "updatedAt":  "2021-12-24T07:08:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qPOs",
                                           "createdAt":  "2021-12-24T20:41:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Soft references could be considered as strong references until memory pressure gets high where they would be converted to weak references. Under the hood they could (maybe I\u0027m wrong I have no idea) be implemented as a new type of `GCHandle` and stored in a separate table that would be scanned by the GC\u0027s mark phase only when memory pressure is too high. The transition from a strong to a weak reference would be one-way to keep things simple.\r\n\r\nThere are two major questions. The first is what does \"memory pressure gets high\" mean, and it\u0027s kind of solved as evidenced in the shared `ArrayPool` (still would need tweaking though). The second question is how many and which soft references to release on high memory pressure. All? The earliest N(%) created? The top N(%) by object size?\r\n\r\nIn the meanwhile, using constructs like the `Gen2GcCallback` and checking memory pressure could help implement something similar to what I proposed in managed code, albeit with a bigger overhead.",
                                           "updatedAt":  "2021-12-24T20:41:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qPnd",
                                           "createdAt":  "2021-12-24T20:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The first is what does \"memory pressure gets high\" mean, and it\u0027s kind of solved as evidenced in the shared ArrayPool\r\n\r\nArrayPool uses number of strategies. In addition to checking for memory pressure, it also uses timestamp to track when the pooled array was used last time and releases the pooled array once it was not used for a while.\r\n\r\n\u003e checking memory pressure could help implement something similar to what I proposed in managed code, albeit with a bigger overhead.\r\n\r\nIt is not obvious to me that the soft references have lower overhead than checking memory pressure. For example, I expect that we would see regression in ArrayPool if it was switched to use the soft references proposed here. \r\n \r\n#53895 has a lot of additional discussion of this problem space.",
                                           "updatedAt":  "2021-12-24T20:53:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qQ5b",
                                           "createdAt":  "2021-12-24T21:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qwertie",
                                           "body":  "@jkotas I\u0027m no GC expert and don\u0027t even know how weak references work, so I\u0027d leave it up to the GC team to choose an implementation. I like how @teo-tsirpanis frames it, as soft refs should act like strong refs until some memory pressure threshold is crossed (such as the `SoftMemoryLimit` I suggested, or OS-specific heuristics).",
                                           "updatedAt":  "2021-12-24T21:28:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qbj7",
                                           "createdAt":  "2021-12-25T05:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "... you\u0027re asking for some sort of `SoftReference`, but your actual problem seems to be caching things.  If you just want to cache things, it\u0027s a good bet there are third-party libraries with slimmer (or tuned in other ways) cache implementations.\r\n\r\n\u003e it does not guarantee that it will evict cache entries quickly enough to prevent OutOfMemoryExceptions\r\n\r\nIt doesn\u0027t guarantee that cache entries will ever be evicted (ie, they can all be held). \r\n\r\n\u003e Finally, if the goal is to prevent memory exhaustion, `MemoryCache` is problematic because multiple cache instances can exist that do not coordinate with one another. \r\n\r\nWhy would they?  Being independent is usually a benefit.\r\n\r\n\u003e (1) references to \"owned\" subobjects that should be counted as part of the parent object, and (2) references to (large) shared objects that can never be evicted.\r\n\r\nIt sounds like you want two caches tuned differently, or a regular cache and a dictionary.  If necessary, implement a wrapper that divides them appropriately for you.",
                                           "updatedAt":  "2021-12-25T05:52:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47s5KS",
                                           "createdAt":  "2021-12-27T15:37:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qwertie",
                                           "body":  "@Clockwork-Muse I want a cache that uses as much memory as possible with (for all practical purposes) no chance of OutOfMemoryException (and also avoiding using swap space, if available). If you can tell me how to do that without soft references, please do.",
                                           "updatedAt":  "2021-12-27T15:44:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47s7Fj",
                                           "createdAt":  "2021-12-27T15:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "What I was getting at was - are you planning on _writing_ one, or would a different implementation of an in-memory cache be sufficient (provided by a third-party library, or due to changes to `MemoryCache` itself)?\r\n\r\n\u003e and also avoiding using swap space, if available\r\n\r\nSide note: this may be outside application notice/control, depending on OS/settings.",
                                           "updatedAt":  "2021-12-27T15:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47uyjG",
                                           "createdAt":  "2021-12-28T14:04:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qwertie",
                                           "body":  "I do not want to write another cache, and I do not know how a cache could (even in principle) have the characteristics that soft references would provide.\r\n\r\n\u003e this may be outside application notice/control,\r\n\r\nYes, but to the extent it is possible, it would involve OS-specific metrics/mechanisms that maybe the CLR already uses to help choose the GC interval. I expect it is possible to ask the OS how much physical memory there is, and how much memory is being used by other apps and by the current app; this seems like all that is needed to choose a soft cap.",
                                           "updatedAt":  "2021-12-28T14:04:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4715Sy",
                                           "createdAt":  "2022-01-03T10:04:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "Soft reference is actively used in JVM for caching but personally I\u0027m not a fan of this mechanism because `SoftMemoryLimit` is very speculative. Probably, its better to use generations here and add a new configuration to `WeakReference` and `GCHandle`. For instance, we can allow to collect the object if it is not reachable through any strong reference and located in Gen2. This analysis can be done during full/background GC. I think it is more predictable behavior. Many users will not be able to calculate `SoftMemoryLimit` correctly. Normally, Gen2 should not grow constantly in normal applications so this policy has the same effect as the memory limit.",
                                           "updatedAt":  "2022-01-03T10:04:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc472qYc",
                                           "createdAt":  "2022-01-03T15:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Soft reference is actively used in JVM for caching\r\n\r\n... When I did some cursory research for this issue earlier, I found documentation that for at least one JVM implementation, `SoftReference` is/was only an alias for `WeakReference`, but I can\u0027t find it now.  So that might not work the way you expect.",
                                           "updatedAt":  "2022-01-03T15:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47271q",
                                           "createdAt":  "2022-01-03T17:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@Clockwork-Muse , Client JVM treats SoftReferences as WeakReferences. Server JVM does not.",
                                           "updatedAt":  "2022-01-03T17:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4728as",
                                           "createdAt":  "2022-01-03T17:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "\u003e The Java HotSpot Server VM uses the maximum possible heap size (as set with the -Xmx option) to calculate free space remaining. The Java Hotspot Client VM uses the current heap size to calculate the free space.\r\n\r\nThat may be an outdated information because the HotSpot uses GraalVM under the hood. Anyway, JVM memory management strategy differs from .NET CLR which doesn\u0027t try to occupy maximum possible heap size. According to that, generation-based approach can be better and much more understandable.",
                                           "updatedAt":  "2022-01-03T17:59:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4767Uz",
                                           "createdAt":  "2022-01-05T01:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qwertie",
                                           "body":  "@sakno My suggestion is that `SoftMemoryLimit` is an upper bound, so it is safe to set it too high and the default value can be `long.MaxValue`.\r\n\r\n**Edit:** \"upper bound\" is the wrong term, as it is possible for the amount of allocated memory to exceed it. What I meant was that the GC would choose its own target memory usage during GCs, and `SoftMemoryLimit` could decrease that target but not increase it. Also, `SoftMemoryLimit` could affect the timing of when to initiate GCs, but I imagine the GC treating it as a way of pretending that the machine has less physical memory than the OS reports, so again it would serve in an advisory role and it is not crucial that the user sizes it \"correctly\". Still, having said that, on second thought, I guess its type should be `long?` with default value `null` so that the GC would be allowed to behave differently when the programmer has selected a limit than when ze hasn\u0027t.",
                                           "updatedAt":  "2022-01-05T01:47:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47693O",
                                           "createdAt":  "2022-01-05T01:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qwertie",
                                           "body":  "Having said all that, if a soft reference is merely a weak reference that can only be collected in Gen2, that sounds like a feature that the team could do quickly and easily, and if that means the feature could be available in .NET 7 I would be very happy.",
                                           "updatedAt":  "2022-01-05T01:52:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc478WyO",
                                           "createdAt":  "2022-01-05T13:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@qwertie , a reference that can only be collected in Get2 can be implemented without runtime support using existing weak references. The main idea is to use finalizer as a callback from GC to track object generation:\r\n```csharp\r\npublic readonly struct SoftReference\u003cT\u003e\r\n    where T : class\r\n{\r\n    private sealed class Tracker\r\n    {\r\n        internal readonly T Target;\r\n        private readonly WeakReference parent;\r\n\r\n        internal Tracker(T target, WeakReference parent)\r\n        {\r\n              Target = target;\r\n              this.parent = parent;\r\n        }\r\n\r\n        ~Tracker()\r\n        {\r\n            if (GC.GetGeneration(Target) \u003c GC.MaxGeneration)\r\n                GC.ReRegisterForFinalize(this);\r\n            else\r\n                 parent.Target = Target; // downgrade from soft to weak reference\r\n        }\r\n    }\r\n\r\n    private readonly WeakReference? reference;\r\n\r\n    public SoftReference(T? target)\r\n    {\r\n        if (target is null)\r\n        {\r\n            reference = null;\r\n        }\r\n        else if (GC.GetGeneration(target) == GC.MaxGeneration)\r\n        {\r\n            reference = new(target, trackResurrection: false);\r\n        }\r\n        else\r\n        {\r\n            var tracker = new Tracker(target);\r\n            reference = new(tracker, trackResurrection: true);\r\n            GC.KeepAlive(tracker);\r\n        }\r\n    }\r\n\r\n    public void Clear()\r\n    {\r\n        if (reference?.Target is Tracker tracker)\r\n        {\r\n            GC.SuppressFinalize(tracker);\r\n            reference.Target = null;\r\n        }\r\n    }\r\n\r\n    public bool IsAlive =\u003e reference?.IsAlive ?? false;\r\n\r\n    public T? Target =\u003e reference?.Target switch\r\n    {\r\n        Tracker tracker =\u003e tracker.Target,\r\n        T target =\u003e target,\r\n        _ =\u003e null\r\n    }\r\n}\r\n```\r\n\r\nThe code inside of finalizer can be used to analyze your memory limit using [GC.GetGCMemoryInfo](https://docs.microsoft.com/en-us/dotnet/api/system.gc.getgcmemoryinfo) method.\r\n\r\n**Edit**: Soft reference must keep reference to the object even if the object reaches Gen2 but remains alive due to presence of strong references. In this case we need to \"downgrade\" the reference from soft to weak (see _else_ branch in finalizer).",
                                           "updatedAt":  "2022-01-06T12:06:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48PoLB",
                                           "createdAt":  "2022-01-12T07:34:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "qwertie",
                                           "body":  "Thanks, I\u0027ll give that I try when I have time.",
                                           "updatedAt":  "2022-01-12T07:34:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48P6Fn",
                                           "createdAt":  "2022-01-12T09:00:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJicqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FilipToth",
                                                                               "createdAt":  "2022-01-12T09:03:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "timcassell",
                                           "body":  "@sakno I found an issue with your implementation that would require allocating a new `Tracker` object if you wanted to set a new `Target` value and it was already downgraded to a `WeakReference`. So I rewrote it with that in mind and adjusted the API to be more like `WeakReference\u003cT\u003e`. Do you see any issues with my implementation?\r\n\r\n```cs\r\npublic class SoftReference\u003cT\u003e where T : class\r\n{\r\n    private sealed class Tracker\r\n    {\r\n        private T? target;\r\n        private readonly WeakReference\u003cT\u003e reference;\r\n\r\n        internal Tracker(T? target, bool trackResurrection)\r\n        {\r\n            this.target = target;\r\n            reference = new(target, trackResurrection);\r\n        }\r\n\r\n        internal void SetTarget(T? target)\r\n        {\r\n            this.target = target;\r\n            reference.SetTarget(target);\r\n        }\r\n\r\n        internal bool TryGetTarget(out T? target)\r\n        {\r\n            target = this.target;\r\n            return target != null || reference.TryGetTarget(out target);\r\n        }\r\n\r\n        ~Tracker()\r\n        {\r\n            if (target != null \u0026\u0026 GC.GetGeneration(target) == GC.MaxGeneration)\r\n            {\r\n                target = null; // downgrade from soft to weak reference\r\n            }\r\n            GC.ReRegisterForFinalize(this);\r\n        }\r\n    }\r\n\r\n    private readonly WeakReference\u003cTracker\u003e reference; // WeakReference allows finalizer to run, but it always resurrects itself until this is finalized.\r\n\r\n    public SoftReference(T? target, bool trackResurrection)\r\n    {\r\n        var tracker = new Tracker(target, trackResurrection);\r\n        reference = new(tracker, trackResurrection: true);\r\n        GC.KeepAlive(tracker);\r\n    }\r\n\r\n    ~SoftReference()\r\n    {\r\n        reference.TryGetTarget(out Tracker tracker);\r\n        GC.SuppressFinalize(tracker);\r\n    }\r\n\r\n    internal void SetTarget(T? target)\r\n    {\r\n        reference.TryGetTarget(out Tracker tracker);\r\n        tracker.SetTarget(target);\r\n    }\r\n\r\n    internal bool TryGetTarget(out T? target)\r\n    {\r\n        reference.TryGetTarget(out Tracker tracker);\r\n        return tracker.TryGetTarget(out target);\r\n    }\r\n}\r\n```\r\n\r\nAlso, is there any reason for the runtime to not have this type? Maybe it\u0027s not quite in the spirit of `SoftReference` which is expected to only collect in low memory events?\r\n\r\n[Edit] I imagine this behavior of only collecting on a certain GC generation could easily be added to `WeakReference(\u003cT\u003e)` with much less overhead than this implementation (this has 3 internal object allocations!).",
                                           "updatedAt":  "2022-01-12T09:32:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QDn8",
                                           "createdAt":  "2022-01-12T09:40:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@timcassell , you can reduce 1 internal allocation. Here is the code: https://github.com/dotnet/dotNext/blob/develop/src/DotNext/Runtime/SoftReference.cs. The code in your example doesn\u0027t handle some specific situations like setting `Target` of WeakReference after finalization (that may fail). I expect to include it to the next version of the library. Anyway, feel free to use or change it as you want.\r\n\r\nP.S.: Provided implementation also includes an option to control memory pressure in Gen2.",
                                           "updatedAt":  "2022-01-12T09:41:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QHEN",
                                           "createdAt":  "2022-01-12T09:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "@sakno Your implementation does not include the ability to overwrite the `Target`, which `WeakReference` supports. Or `trackResurrection`.",
                                           "updatedAt":  "2022-01-12T10:24:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QJsx",
                                           "createdAt":  "2022-01-12T10:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e The code in your example doesn\u0027t handle some specific situations like setting `Target` of WeakReference after finalization (that may fail).\r\n\r\nWhy would the `Target` need to be set if the `SoftReference` itself is already finalized? All internals of the `SoftReference` would then be eligible for GC, including the `WeakReference`s.",
                                           "updatedAt":  "2022-01-12T10:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QYMD",
                                           "createdAt":  "2022-01-12T11:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "Assume that you have a target object with two references:\r\n* A strong reference located somewhere in the code\r\n* A soft reference\r\n\r\nSoft reference downgrades to weak reference when it `Tracker` is being finalized. However, the target is still referenced somewhere else using a strong reference. In that case, the target should be accessible via soft reference as well. That\u0027s why soft reference keeps weak reference to the target after downgrading.\r\n\r\nIn my implementation, `SoftReference` itself has a finalizer that cleans the internal reference to the target. Without this, the tracker will keep the target alive even if the soft reference itself is dead already.",
                                           "updatedAt":  "2022-01-12T11:11:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48QcSW",
                                           "createdAt":  "2022-01-12T11:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "@sakno Once the `SoftReference` is finalized, all of its internals are GC eligible, so it will not keep the target alive. [Edit] The `SuppressFinalize(tracker)` should stop it from keeping the target alive.\r\n\r\nAlso, it is true that a reference located elsewhere in the code will keep the target alive in the `WeakReference`. That is always accessible via the `Tracker.reference` in my implementation. In my implementation, the `SoftReference.reference`\u0027s Target is also always alive as long as the `SoftReference` has not been finalized, thanks to the `trackResurrection` and the fact that it _always_ resurrects itself. Or am I misunderstanding how `trackResurrection` works?",
                                           "updatedAt":  "2022-01-12T11:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Q2gA",
                                           "createdAt":  "2022-01-12T13:32:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "Oh, I got it. Your implementation should work fine as well. My implementation allows to reduce one internal allocation. Also, from my personal view, the tracker is needed to keep the strong reference as long as needed. When the reference is downgraded, no need to keep the reference to the tracker itself because it is no longer useful.",
                                           "updatedAt":  "2022-01-12T13:32:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Q2vq",
                                           "createdAt":  "2022-01-12T13:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e When the reference is downgraded, no need to keep the reference to the tracker itself because it is no longer useful.\r\n\r\nThat\u0027s only true because you don\u0027t support overwriting the target. It is necessary to keep it alive to overwrite the target without extra allocations.",
                                           "updatedAt":  "2022-01-12T13:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Tku6",
                                           "createdAt":  "2022-01-13T03:46:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "I have used a similar system to track liveness, but I had an issue that the referenced object (and all objects referenced only by it) will be finalized and resurrected. This will be a problem if those objects do finalization work in finalizer, because C# doesn\u0027t have a mechanism for an object to detect resurrection. After resurrection, the state of the object will be invalid. From the disucssion and code in this thread, I am not clear whether this problem is addressed. Could anyone explain briefly if I missed something? ",
                                           "updatedAt":  "2022-01-13T03:46:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48T6Is",
                                           "createdAt":  "2022-01-13T07:01:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJt2ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2022-01-13T07:17:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "timcassell",
                                           "body":  "@acaly Thanks for bringing that oddity to attention. I have adjusted my implementation to fix that issue.\r\n\r\n```cs\r\npublic class SoftReference\u003cT\u003e where T : class\r\n{\r\n    private sealed class Tracker\r\n    {\r\n        private readonly SoftReference\u003cT\u003e parent;\r\n\r\n        internal Tracker(SoftReference\u003cT\u003e parent)\r\n        {\r\n            this.parent = parent;\r\n        }\r\n\r\n        ~Tracker()\r\n        {\r\n            parent.OnGC();\r\n            GC.ReRegisterForFinalize(this);\r\n        }\r\n\r\n        internal void StopTracking()\r\n        {\r\n            GC.SuppressFinalize(this);\r\n        }\r\n    }\r\n\r\n    private T? target;\r\n    private readonly WeakReference\u003cT?\u003e targetReference;\r\n    private readonly WeakReference\u003cTracker\u003e callbackReference; // WeakReference allows finalizer to run, but it always resurrects itself until this is finalized.\r\n\r\n    public SoftReference(T? target, bool trackResurrection)\r\n    {\r\n        this.target = target;\r\n        targetReference = new(target, trackResurrection);\r\n        var tracker = new Tracker(this);\r\n        callbackReference = new(tracker, trackResurrection: true);\r\n        GC.KeepAlive(tracker);\r\n    }\r\n\r\n    ~SoftReference()\r\n    {\r\n        callbackReference.TryGetTarget(out Tracker tracker);\r\n        tracker.StopTracking();\r\n    }\r\n\r\n    private void OnGC()\r\n    {\r\n        if (target != null \u0026\u0026 GC.GetGeneration(target) == GC.MaxGeneration)\r\n        {\r\n            target = null; // downgrade from soft to weak reference\r\n        }\r\n    }\r\n\r\n    public void SetTarget(T? target)\r\n    {\r\n        this.target = target;\r\n        targetReference.SetTarget(target);\r\n    }\r\n\r\n    public bool TryGetTarget(out T? target)\r\n    {\r\n        target = this.target;\r\n        return target != null || targetReference.TryGetTarget(out target);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-01-13T07:03:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48UELq",
                                           "createdAt":  "2022-01-13T08:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "@timcassell , you need to suppress finalization of the target object to avoid the problem mentioned by @acaly . In `OnGC` method, you need to re-register finalizer for the target object.",
                                           "updatedAt":  "2022-01-13T08:10:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48UHa-",
                                           "createdAt":  "2022-01-13T08:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e @timcassell , you need to suppress finalization of the target object to avoid the problem mentioned by @acaly . In `OnGC` method, you need to re-register finalizer for the target object.\r\n\r\nNo, that doesn\u0027t make sense at all. Moving the target and weak reference out of the tracker resolves the issue. Also, since my implementation supports tracking resurrection, we absolutely do not want to override what the user expects (and even if we don\u0027t support tracking resurrection, we still don\u0027t want to force a re-register finalization on an object we don\u0027t own).\r\n\r\n[Edit] Also, suppressing finalization of the target doesn\u0027t also suppress finalization of objects that it references, and it will still have an invalid state when we resurrect it. That\u0027s why it must be moved out of the tracker to prevent finalization at all. ",
                                           "updatedAt":  "2022-01-13T08:35:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48UIEa",
                                           "createdAt":  "2022-01-13T08:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "Btw, this implementation does not guarantee the target will live until a gen 2 collection, it only guarantees it will live until it is promoted to gen 2. To guarantee life until a gen 2 collection will require internal APIs. I believe there is a Gen2Callback internally of some sort.\r\n\r\n[Edit] Do resurrected objects get promoted to higher generations? If so, we could check the generation of the tracker object in its finalizer before calling `parent.OnGC()`to guarantee survival until gen 2 collection.\r\n\r\n[Edit2] I just reread the [GC documentation](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals), and it seems I was incorrect here. Objects that are promoted to gen 2 will only be collected in a gen 2 collection, even if they are eligible for collection during a gen 0 or gen 1 collection.",
                                           "updatedAt":  "2022-01-18T15:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48UbNe",
                                           "createdAt":  "2022-01-13T10:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sakno",
                                           "body":  "There is another problem - the implementation is not thread safe.",
                                           "updatedAt":  "2022-01-13T10:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48UcA_",
                                           "createdAt":  "2022-01-13T10:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e There is another problem - the implementation is not thread safe.\r\n\r\nWhich part? SetTarget and TryGetTarget are as thread safe as WeakReference is. [Edit] Actually I take that back. TryGetTarget should cache the target in a local before returning instead of overwriting the out variable.\r\n\r\nI thought about thread safety for the OnGC, but I wasn\u0027t sure if it really matters. Isn\u0027t the GC usually stop-the-world and single threaded? Is a concurrent GC really an issue to be concerned about? ",
                                           "updatedAt":  "2022-01-13T10:17:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Ud7H",
                                           "createdAt":  "2022-01-13T10:25:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "Ok, here\u0027s a thread-safer version. I think there\u0027s no need to try to synchronize `SetTarget`, because if the user is calling that on 2 separate threads, that\u0027s a race condition where you wouldn\u0027t be able to tell which one sticks anyway.\r\n\r\nI also don\u0027t believe `WeakReference` is thread-safe anyway, so this may be an effort in futility (no point in making `SoftReference` thread safe if `WeakReference` isn\u0027t).\r\n\r\n```cs\r\npublic class SoftReference\u003cT\u003e where T : class\r\n{\r\n    private sealed class Tracker\r\n    {\r\n        private readonly SoftReference\u003cT\u003e parent;\r\n\r\n        internal Tracker(SoftReference\u003cT\u003e parent)\r\n        {\r\n            this.parent = parent;\r\n        }\r\n\r\n        ~Tracker()\r\n        {\r\n            parent.OnGC();\r\n            GC.ReRegisterForFinalize(this);\r\n        }\r\n\r\n        internal void StopTracking()\r\n        {\r\n            GC.SuppressFinalize(this);\r\n        }\r\n    }\r\n\r\n    volatile private T? target;\r\n    private readonly WeakReference\u003cT?\u003e targetReference;\r\n    private readonly WeakReference\u003cTracker\u003e callbackReference; // WeakReference allows finalizer to run, but it always resurrects itself until this is finalized.\r\n\r\n    public SoftReference(T? target, bool trackResurrection)\r\n    {\r\n        this.target = target;\r\n        targetReference = new(target, trackResurrection);\r\n        var tracker = new Tracker(this);\r\n        callbackReference = new(tracker, trackResurrection: true);\r\n        GC.KeepAlive(tracker);\r\n    }\r\n\r\n    ~SoftReference()\r\n    {\r\n        callbackReference.TryGetTarget(out Tracker tracker);\r\n        tracker.StopTracking();\r\n    }\r\n\r\n    private void OnGC()\r\n    {\r\n        T? _target = target;\r\n        if (_target != null \u0026\u0026 GC.GetGeneration(_target) == GC.MaxGeneration)\r\n        {\r\n            Interlocked.CompareExchange(ref target, null, _target); // downgrade from soft to weak reference\r\n        }\r\n    }\r\n\r\n    internal void SetTarget(T? target)\r\n    {\r\n        this.target = target;\r\n        targetReference.SetTarget(target);\r\n    }\r\n\r\n    internal bool TryGetTarget(out T? target)\r\n    {\r\n        return targetReference.TryGetTarget(out target);\r\n    }\r\n}\r\n```\r\n\r\nBut if you really wanted, you could just `lock (targetReference)`.\r\n\r\n[Edit] I removed the strong reference read in `TryGetTarget` because I realized it\u0027s unnecessary. Always reading from the `WeakReference` is perfectly fine.",
                                           "updatedAt":  "2022-03-02T09:54:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fDSEX",
                                           "createdAt":  "2023-06-16T13:41:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "s-michael-telford",
                                           "body":  "One bit of feedback on this and WeakReference from someone much like the proposer that uses WeakReference extensively for caching/GC control applications.\r\nPlease provide a common Interface type IReference that both WeakReference, SoftReference and a hypothetical but obvious implementation HardReference (it\u0027s an Object!).  Currently I\u0027m either forced to juggle different lists, coordinate different locks when promoting/demoting or (as I\u0027ve done) wrap WeakReference in another class and accept the additional object cost.  If WeakReference implemented any interface I could have avoid several annoying things.",
                                           "updatedAt":  "2023-06-16T13:41:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fD3Vp",
                                           "createdAt":  "2023-06-16T15:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "@timcassell One lesson I learned previously from playing with resurrection is to never use it. \r\n\r\nOne issue of your code is, when the `SoftReference` object is no longer needed, execution order of the finalizers of SoftReference\u003cT\u003e and its tracker will be unknown, meaning that you may have `StopTracking()` called first, and `~Tracker()` called after it, which resurrects everything again forever.\r\n\r\nAlso I don\u0027t want to assume that checking the referenced object\u0027s generation can reflect the overall memory pressure. As jkotas said, it\u0027s probably much easier to explicitly check memory usage. The worst thing you can do is to add a separate background thread and check periodically. Even though, it will still be better, because GC no longer needs to handle those weak references and resurrections repeatedly, especially when the number of tracked objects increases.",
                                           "updatedAt":  "2023-06-16T15:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fD4Lu",
                                           "createdAt":  "2023-06-16T15:12:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acaly",
                                           "body":  "\u003e Please provide a common Interface type IReference that both WeakReference, SoftReference and a hypothetical but obvious implementation HardReference\r\n\r\nYou can implement weak references and strong references yourself and add whatever interfaces to it. The standard `WeakReference\u003cT\u003e` internally uses `GCHandle`. I am not sure about soft reference though.",
                                           "updatedAt":  "2023-06-16T15:12:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fE4mP",
                                           "createdAt":  "2023-06-16T18:27:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e @timcassell One lesson I learned previously from playing with resurrection is to never use it.\r\n\u003e \r\n\u003e One issue of your code is, when the `SoftReference` object is no longer needed, execution order of the finalizers of SoftReference and its tracker will be unknown, meaning that you may have `StopTracking()` called first, and `~Tracker()` called after it, which resurrects everything again forever.\r\n\r\nDoes `GC.SuppressFinalize` not remove it from the finalizer queue? That would be surprising behavior.\r\n\r\nAccording to the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.gc.suppressfinalize), it will not be called.\r\n\r\n\u003e This method sets a bit in the object header of obj, which the runtime checks when calling finalizers.\r\n\r\n\u003e Also I don\u0027t want to assume that checking the referenced object\u0027s generation can reflect the overall memory pressure.\r\n\r\nI agree. I don\u0027t particularly like this approach, I was just piggy-backing off @sakno\u0027s idea.\r\n\r\n",
                                           "updatedAt":  "2023-06-16T18:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KuBL4",
                                           "createdAt":  "2024-09-03T19:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Hau-Hau",
                                           "body":  "@timcassell @acaly Even if would not be removed from finalizer\u0027s queue, why cannot we just apply dispoable pattern? Code in finalizer will be not evaluated further.\r\n\r\nAlso, shouldn\u0027t tracker inherit from [CriticalFinalizerObject](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.constrainedexecution.criticalfinalizerobject?view=net-8.0)?\r\n\r\n```csharp\r\nusing System.Runtime.ConstrainedExecution;\r\n\r\n    public class SoftReference\u003cT\u003e\r\n        where T : class\r\n    {\r\n        private sealed class Tracker : CriticalFinalizerObject, IDisposable\r\n        {\r\n            private bool disposed;\r\n            private readonly SoftReference\u003cT\u003e parent;\r\n\r\n            internal Tracker(SoftReference\u003cT\u003e parent)\r\n            {\r\n                this.parent = parent;\r\n            }\r\n\r\n            ~Tracker()\r\n            {\r\n                if (disposed)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                parent.OnGC();\r\n                GC.ReRegisterForFinalize(this);\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                disposed = true;\r\n                GC.SuppressFinalize(this);\r\n            }\r\n        }\r\n\r\n        private volatile T? target;\r\n        private readonly WeakReference\u003cT?\u003e targetReference;\r\n        private readonly WeakReference\u003cTracker\u003e callbackReference;\r\n\r\n        public SoftReference(T? target, bool trackResurrection)\r\n        {\r\n            this.target = target;\r\n            targetReference = new WeakReference\u003cT?\u003e(target, trackResurrection);\r\n            var tracker = new Tracker(this);\r\n            callbackReference = new WeakReference\u003cTracker\u003e(tracker, trackResurrection: true);\r\n            GC.KeepAlive(tracker);\r\n        }\r\n\r\n        ~SoftReference()\r\n        {\r\n            callbackReference.TryGetTarget(out Tracker tracker);\r\n            tracker.Dispose();\r\n        }\r\n\r\n        private void OnGC()\r\n        {\r\n            T? _target = target;\r\n            if (_target != null \u0026\u0026 GC.GetGeneration(_target) == GC.MaxGeneration)\r\n            {\r\n                Interlocked.CompareExchange(ref target, null, _target);\r\n            }\r\n        }\r\n\r\n        internal void SetTarget(T? target)\r\n        {\r\n            this.target = target;\r\n            targetReference.SetTarget(target);\r\n        }\r\n\r\n        internal bool TryGetTarget(out T? target)\r\n        {\r\n            return targetReference.TryGetTarget(out target);\r\n        }\r\n    }\r\n```",
                                           "updatedAt":  "2024-09-03T20:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KuM2I",
                                           "createdAt":  "2024-09-03T20:21:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e @timcassell @acaly Even if would not be removed from finalizer\u0027s queue, why cannot we just apply dispoable pattern? Code in finalizer will be not evaluated further.\r\n\r\nYes, you could do that.\r\n\r\n\u003e Also, shouldn\u0027t tracker inherit from [CriticalFinalizerObject](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.constrainedexecution.criticalfinalizerobject?view=net-8.0)?\r\n\r\nThere is nothing critical about this. If the framework wants to clean up the domain without calling the finalizer, we don\u0027t care.",
                                           "updatedAt":  "2024-09-03T20:21:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KucpJ",
                                           "createdAt":  "2024-09-03T21:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Hau-Hau",
                                           "body":  "Could be that in my perspective soft reference should be more proactive. However, CriticalFinalizerObject seems to be gurantee for freeing memory even under pressure. Isn\u0027t it a goal of SoftReference to be cleaned up under pressure?",
                                           "updatedAt":  "2024-09-03T21:02:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KuiVd",
                                           "createdAt":  "2024-09-03T21:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw7q5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Hau-Hau",
                                                                               "createdAt":  "2024-09-04T10:21:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e Could be that in my perspective soft reference should be more proactive. However, CriticalFinalizerObject seems to be gurantee for freeing memory even under pressure. Isn\u0027t it a goal of SoftReference to be cleaned up under pressure?\r\n\r\n`CriticalFinalizerObject` is used to guarantee the finalizer runs even while domains are being forcibly unloaded or threads aborted. Those aren\u0027t supported in .Net Core, so it only really applies to .Net Framework. In the case of domain unload, the memory is already being forcibly cleaned up, so there\u0027s no need for us to do anything. We\u0027re not holding any unmanaged memory here.",
                                           "updatedAt":  "2024-09-03T21:23:20Z"
                                       }
                                   ],
                         "totalCount":  42
                     },
        "title":  "[API Proposal]: Soft References",
        "labels":  [
                       "api-suggestion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64164",
        "createdAt":  "2022-01-23T15:20:39Z",
        "number":  64164,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-07T23:43:34Z",
        "body":  "I noticed that GC uses VXSort (AVX2/AVX512) but only on Windows-x64. So I assume it has to be enabled for Linux-x64 and rewritten to NEON for Arm64?\r\n![image](https://user-images.githubusercontent.com/523221/150682770-e1517d32-060a-4478-b1b2-f8726e5fb8a8.png)\r\n_(a screenshot, because it\u0027s not possible to reference lines in gc.cpp via github 😄)_\r\n\r\nI only tested it on Plaintext-MVC benchmark (allocates a lot of short-living objects) on our perf-lab and it seems like VXSort regresses P90 across 7 runs and has no effect on RPS. Also, it adds **227Kb** to native size (for coreclr.dll+clrgc.dll combined)\r\n![image](https://user-images.githubusercontent.com/523221/150685512-5ced8bf9-e4be-4eb7-b866-bc913698b2e7.png)\r\n\r\n\r\nIs there a scenario I can simulate on our perflab to see benefits from it or it only targets real world large workloads?\r\nI am asking because I am wondering if it worth porting to NEON SIMD for arm64.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjyVfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48xG8Z",
                                           "createdAt":  "2022-01-23T15:20:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI noticed that GC uses VXSort (AVX2/AVX512) but only on Windows-x64. So I assume it has to be enabled for Linux-x64 and rewritten to NEON for Arm64?\r\n![image](https://user-images.githubusercontent.com/523221/150682770-e1517d32-060a-4478-b1b2-f8726e5fb8a8.png)\r\n_(a screenshot, because it\u0027s not possible to reference lines in gc.cpp via github 😄)_\r\n\r\nI only tested it on Plaintext-MVC benchmark (allocates a lot of short-living objects) on our perf-lab and it seems like it VXSort regresses P95 across 7 runs and has no effect on RPS. Also, it adds **227Kb** to native size (for coreclr.dll+clrgc.dll combined)\r\n![image](https://user-images.githubusercontent.com/523221/150685512-5ced8bf9-e4be-4eb7-b866-bc913698b2e7.png)\r\n\r\n\r\nIs there a scenario I can simulate on our perflab to see benefits from it or it only targets real world large workloads?\r\nI am asking because I am wondering if it worth porting to NEON SIMD for arm64.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-23T15:20:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48xG-b",
                                           "createdAt":  "2022-01-23T15:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI noticed that GC uses VXSort (AVX2/AVX512) but only on Windows-x64. So I assume it has to be enabled for Linux-x64 and rewritten to NEON for Arm64?\r\n![image](https://user-images.githubusercontent.com/523221/150682770-e1517d32-060a-4478-b1b2-f8726e5fb8a8.png)\r\n_(a screenshot, because it\u0027s not possible to reference lines in gc.cpp via github 😄)_\r\n\r\nI only tested it on Plaintext-MVC benchmark (allocates a lot of short-living objects) on our perf-lab and it seems like it VXSort regresses P95 across 7 runs and has no effect on RPS. Also, it adds **227Kb** to native size (for coreclr.dll+clrgc.dll combined)\r\n![image](https://user-images.githubusercontent.com/523221/150685512-5ced8bf9-e4be-4eb7-b866-bc913698b2e7.png)\r\n\r\n\r\nIs there a scenario I can simulate on our perflab to see benefits from it or it only targets real world large workloads?\r\nI am asking because I am wondering if it worth porting to NEON SIMD for arm64.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-23T15:21:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48xI4-",
                                           "createdAt":  "2022-01-23T16:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@PeterSolMS \n\nLinking https://github.com/dotnet/runtime/pull/37159",
                                           "updatedAt":  "2022-01-23T16:01:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc480koL",
                                           "createdAt":  "2022-01-24T18:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Some notes about `INTROSORT` is in https://github.com/dotnet/runtime/issues/60166#issuecomment-1013452661.",
                                           "updatedAt":  "2022-01-24T18:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GPJRY",
                                           "createdAt":  "2022-07-07T23:43:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "thanks @EgorBo for the data. \r\n\r\nthat\u0027s interesting because if you are just allocating some temp objects you shouldn\u0027t even hit the vectorized sorting code path. if you took a trace with cpu samples, do you see any samples captured in `do_vxsort` at all (or if you set a bp on `do_vxsort` do you see it get hit?)? just checking if it\u0027s a matter of \"the benchmark is so small and any code change could disturb this\" or is it really caused by the vectorized sorting. ",
                                           "updatedAt":  "2022-07-07T23:43:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GPJV9",
                                           "createdAt":  "2022-07-07T23:43:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I don\u0027t think this needs to be 7.0 but let me know if you don\u0027t agree.",
                                           "updatedAt":  "2022-07-07T23:43:34Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "GC\u0027s VXSort question",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64393",
        "createdAt":  "2022-01-27T19:31:41Z",
        "number":  64393,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCMrRHg==",
                          "nodes":  [
                                        {
                                            "content":  "LAUGH",
                                            "user":  "danmoseley",
                                            "createdAt":  "2022-01-29T02:07:12Z"
                                        },
                                        {
                                            "content":  "LAUGH",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-02-02T09:40:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-03-14T16:52:04Z",
        "body":  "### Background and motivation\n\nThe environment variables controlling the garbage collector (GC) have madingly different case conventions for the prefix and stem of the variables.  For example:\r\n\r\n- some names start with BGC\r\n- many start with GC\r\n- some start with gc\r\n- incosistency in stem names: GCGen0MaxBudget vs GCgen0size  (eg, upper vs lower \u0027G\u0027 on \"gen0\")\n\n### API Proposal\n\nAll GC control knobs have names that start with \"GC\" and then use CamelCase.\n\n### API Usage\n\nold bash: export DOTNET_gcServer=1\r\nnew bash: export DOTNET_GCServer=1\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nPerhaps only Unix/Linux users care about this, since that community has been using case sensitive naming since 1973.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPQKAvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49Am2F",
                                           "createdAt":  "2022-01-27T19:31:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe environment variables controlling the garbage collector (GC) have madingly different case conventions for the prefix and stem of the variables.  For example:\r\n\r\n- some names start with BGC\r\n- many start with GC\r\n- some start with gc\r\n- incosistency in stem names: GCGen0MaxBudget vs GCgen0size  (eg, upper vs lower \u0027G\u0027 on \"gen0\")\n\n### API Proposal\n\nAll GC control knobs have names that start with \"GC\" and then use CamelCase.\n\n### API Usage\n\nold bash: export DOTNET_gcServer=1\r\nnew bash: export DOTNET_GCServer=1\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nPerhaps only Unix/Linux users care about this, since that community has been using case sensitive naming since 1973.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRobertHenry6bev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-27T19:31:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49An55",
                                           "createdAt":  "2022-01-27T19:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "some start with BGC because they are only applicable to BGC, not other GCs. \r\n\r\nthe rest doesn\u0027t exactly have a good reason - just historical. but on Linux env vars are case sensitive so we can\u0027t change them without breaking folks.",
                                           "updatedAt":  "2022-01-27T19:37:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49AoC-",
                                           "createdAt":  "2022-01-27T19:38:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMrRTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-02-02T09:41:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I suppose internally we could recognize both with the old casing and a new more consistent casing and only advertise the consistent casing going forward.",
                                           "updatedAt":  "2022-01-27T19:38:34Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: inconsistent case on GC environment variable names ",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64831",
        "createdAt":  "2022-02-01T17:10:12Z",
        "number":  64831,
        "author":  "dave-yotta",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzudyg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamjez",
                                            "createdAt":  "2022-05-05T13:49:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikocot",
                                            "createdAt":  "2023-07-12T10:02:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahmoodvcs",
                                            "createdAt":  "2023-08-24T03:07:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "devbased",
                                            "createdAt":  "2023-11-02T10:06:46Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-01-30T22:36:37Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThere appears to be a global try/catch in some places inside ASP.NET Core.  When allocating too much ram such that the CLR throws OutOfMemoryException, this can strike inside the ASP runtime code.  Such errors are not passed to error filters, so I am unable to decide to dump and terminate the process for example, as I would if chance would have it raised in the offending endpoint user code instead.\n\n### Expected Behavior\n\nIt should be possible for the user to handle such exceptions, and for example to not leave the application in a dangerous state.\n\n### Steps To Reproduce\n\nWrite a endpoint that allocates a lot of static memory and call it a few times.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n3.1.416\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWueIZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49QefU",
                                           "createdAt":  "2022-02-02T09:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "@javiercn OOM is being caused by user code by allocating near the GC heap limits, but the OOM is being **thrown** inside the asp.net runtime.  OOM errors are like this as I\u0027m sure you\u0027re aware, when you get close to the GC heap limit, any allocation on any thread is liable to throw OOM - including ASP runtime methods disconnected from user code.  \r\n\r\nI can run again and get you some examples,  but what I saw in the logs (from memory) was something like \"Unexpected error in pipeline\\nSystem.OutOfMemoryException...\".  This is of course raised in random parts of the code, sometimes user, sometimes runtime. \r\n\r\nIt was displayed in the logs, not raised or handled by user code, and the process did not exit - hence my report that the runtime must be catching and ignoring these.",
                                           "updatedAt":  "2022-02-02T09:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49QhDB",
                                           "createdAt":  "2022-02-02T09:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "\u003e its the developer responsibility to make sure that it doesn\u0027t happen in their code\r\n\r\nAlso, sadly we\u0027re not this perfect :D  What we need for example is for the application to terminate so we can get a minidump sent out and fix it :)\r\n",
                                           "updatedAt":  "2022-02-02T09:27:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Q63V",
                                           "createdAt":  "2022-02-02T11:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "@javiercn I think there\u0027s a misunderstanding.  I want the process to terminate when there is an OOM, but ASP.NET core is catching the exception and the process does not terminate.  I\u0027m fully aware of how to get a minidump, I\u0027m not asking any question about that.",
                                           "updatedAt":  "2022-02-02T11:30:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Q8n6",
                                           "createdAt":  "2022-02-02T11:38:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@dave-yotta sorry for the confusion and thanks for the clarification.\r\n\r\nDo you have any call stack indicating where the exception is being captured?",
                                           "updatedAt":  "2022-02-02T11:38:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49RLGX",
                                           "createdAt":  "2022-02-02T12:53:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "@javiercn I did, and I was going to post it here, but it left my clipboard long ago :)  I\u0027ll re run some tests tonight and get some examples here for you",
                                           "updatedAt":  "2022-02-02T12:53:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Ru1B",
                                           "createdAt":  "2022-02-02T15:29:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Here\u0027s one example, code is here, use run.ps1: https://github.com/dave-yotta/asp-oom-repro.  I\u0027ve just called the /allocate endpoint a few times here as you can see in the logs.\r\n\r\nIn this example we get a few unhandled OOM in user code first, then some in the runtime as further requests are made and the GC is getting very dry.  see `Connection processing ended abnormally` and `The connection listener failed to accept any new connections` This time it\u0027s actually left in a hung state.\r\n\r\nThis application should have terminated in the first instance of an OOM.\r\n\r\n```\r\n[15:17:39] info: Microsoft.Hosting.Lifetime[0]\r\n      Now listening on: http://[::]:80\r\n[15:17:39] info: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\n[15:17:39] info: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\n[15:17:39] info: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /App\r\n[15:23:18]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 40.837890625mb[15:23:18] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMF6BVO9NN92\", Request id \"0HMF6BVO9NN92:00000001\": An unhandled exception was thrown by the application.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_2\u003ed.MoveNext() in /build/Startup.cs:line 60\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[15:23:20]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 42.7109375mb[15:23:20] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMF6BVO9NN93\", Request id \"0HMF6BVO9NN93:00000001\": An unhandled exception was thrown by the application.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_2\u003ed.MoveNext() in /build/Startup.cs:line 60\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[15:23:20]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 43.2578125mb[15:23:20] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMF6BVO9NN94\", Request id \"0HMF6BVO9NN94:00000001\": An unhandled exception was thrown by the application.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_2\u003ed.MoveNext() in /build/Startup.cs:line 60\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[15:23:21]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 44.3046875mb[15:23:21] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMF6BVO9NN95\", Request id \"0HMF6BVO9NN95:00000001\": An unhandled exception was thrown by the application.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_2\u003ed.MoveNext() in /build/Startup.cs:line 60\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[15:23:21]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 44.3564453125mb[15:23:21] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMF6BVO9NN96\", Request id \"0HMF6BVO9NN96:00000001\": An unhandled exception was thrown by the application.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_2\u003ed.MoveNext() in /build/Startup.cs:line 60\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[15:23:22]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 44.630859375mb[15:23:25]:  Allocate Called\r\nGC Heap Limit = 48mb\r\nAllocated 44.8701171875mb[15:23:22] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HMF6BVO9NN97\", Request id \"0HMF6BVO9NN97:00000001\": An unhandled exception was thrown by the application.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_2\u003ed.MoveNext() in /build/Startup.cs:line 60\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[15:23:25] warn: Microsoft.AspNetCore.Server.Kestrel[0]\r\n      Connection processing ended abnormally.\r\nSystem.AggregateException: An error occurred while writing to logger(s). (Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.)\r\n ---\u003e System.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Array.Resize[T](T[]\u0026 array, Int32 newSize)\r\n   at System.RuntimeType.ListBuilder`1.ToArray()\r\n   at System.RuntimeType.RuntimeTypeCache.MemberInfoCache`1.PopulateMethods(Filter filter)\r\n   at System.RuntimeType.RuntimeTypeCache.MemberInfoCache`1.GetListByName(Char* pName, Int32 cNameLen, Byte* pUtf8Name, Int32 cUtf8Name, MemberListType listType, CacheType cacheType)\r\n   at System.RuntimeType.RuntimeTypeCache.MemberInfoCache`1.Populate(String name, MemberListType listType, CacheType cacheType)\r\n   at System.RuntimeType.RuntimeTypeCache.MemberInfoCache`1.GetMemberList(MemberListType listType, String name, CacheType cacheType)\r\n   at System.RuntimeType.GetMethodCandidates\r\n   at System.RuntimeType.GetMethods(BindingFlags bindingAttr)\r\n   at System.Diagnostics.StackTrace.TryResolveStateMachineMethod(MethodBase\u0026 method, Type\u0026 declaringType)\r\n   at System.Diagnostics.StackTrace.ToString(TraceFormat traceFormat)\r\n   at System.Exception.get_StackTrace()\r\n   at System.Exception.ToString()\r\n   at Microsoft.Extensions.Logging.Console.ConsoleLogger.CreateDefaultLogMessage\r\n   at Microsoft.Extensions.Logging.Console.ConsoleLogger.WriteMessage(LogLevel logLevel, String logName, Int32 eventId, String message, Exception exception)\r\n   at Microsoft.Extensions.Logging.Console.ConsoleLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n   at Microsoft.Extensions.Logging.Logger.\u003cLog\u003eg__LoggerLog|12_0[TState](LogLevel logLevel, EventId eventId, ILogger logger, Exception exception, Func`3 formatter, List`1\u0026 exceptions, TState\u0026 state)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Extensions.Logging.Logger.ThrowLoggingError(List`1 exceptions)\r\n   at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass6_0`2.\u003cDefine\u003eg__Log|0(ILogger logger, T1 arg1, T2 arg2, Exception exception)\r\n   at Microsoft.Extensions.Logging.LoggerMessage.\u003c\u003ec__DisplayClass6_0`2.\u003cDefine\u003eb__1(ILogger logger, T1 arg1, T2 arg2, Exception exception)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelTrace.ApplicationError(String connectionId, String traceIdentifier, Exception ex)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ReportApplicationError(Exception ex)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n[15:23:28] crit: Microsoft.AspNetCore.Server.Kestrel[0]\r\n      The connection listener failed to accept any new connections.\r\nSystem.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection..ctor(Socket socket, MemoryPool`1 memoryPool, PipeScheduler scheduler, ISocketsTrace trace, Nullable`1 maxReadBufferSize, Nullable`1 maxWriteBufferSize)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketConnectionListener.AcceptAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionDispatcher.\u003c\u003ec__DisplayClass8_0.\u003c\u003cStartAcceptingConnectionsCore\u003eg__AcceptConnectionsAsync|0\u003ed.MoveNext()\r\n```",
                                           "updatedAt":  "2022-02-02T15:32:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49R5GN",
                                           "createdAt":  "2022-02-02T16:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Here is an example from the `allocate-safe` which is what I would call something like the expected behaviour - at least ASP.NET should not be catching these OOM exceptions which would also result in termination.  I\u0027ve just used `ENV COMPlus_DbgEnableMiniDump 1` here to get a dump but that\u0027s not really relevant.\r\n\r\n```\r\n[15:33:57] info: Microsoft.Hosting.Lifetime[0]\r\n      Now listening on: http://[::]:80\r\n[15:33:57] info: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\n[15:33:57] info: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\n[15:33:57] info: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /App\r\n[15:34:09]:  Allocate With Catch Called\r\nGC Heap Limit = 48mb\r\nAllocated 37.7412109375mbProcess terminated. System.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\r\n   at System.Linq.Enumerable.RepeatIterator`1.ToArray()\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at OOMRepro.Startup.\u003cConfigure\u003eg__Alloc|2_0() in /build/Startup.cs:line 50\r\n   at OOMRepro.Startup.\u003c\u003ec.\u003c\u003cConfigure\u003eb__2_3\u003ed.MoveNext() in /build/Startup.cs:line 66\r\n   at System.Environment.FailFast(System.String)\r\n   at OOMRepro.Startup+\u003c\u003ec+\u003c\u003cConfigure\u003eb__2_3\u003ed.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[OOMRepro.Startup+\u003c\u003ec+\u003c\u003cConfigure\u003eb__2_3\u003ed, OOMRepro, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]](\u003c\u003cConfigure\u003eb__2_3\u003ed ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[OOMRepro.Startup+\u003c\u003ec+\u003c\u003cConfigure\u003eb__2_3\u003ed, OOMRepro, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]](\u003c\u003cConfigure\u003eb__2_3\u003ed ByRef)\r\n   at OOMRepro.Startup+\u003c\u003ec.\u003cConfigure\u003eb__2_3(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.SetRoutingAndContinue(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)\r\n   at Microsoft.AspNetCore.Hosting.HostingApplication.ProcessRequestAsync(Context)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__214`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__214`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cProcessRequests\u003ed__214`1\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequests\u003ed__214`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cProcessRequests\u003ed__214`1\u003cSystem.__Canon\u003e ByRef)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1\u003cSystem.__Canon\u003e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__213`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()     \r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__213`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cProcessRequestsAsync\u003ed__213`1\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol+\u003cProcessRequestsAsync\u003ed__213`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cProcessRequestsAsync\u003ed__213`1\u003cSystem.__Canon\u003e ByRef)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1\u003cSystem.__Canon\u003e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cProcessRequestsAsync\u003ed__12`1\u003cSystem.__Canon\u003e ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection+\u003cProcessRequestsAsync\u003ed__12`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cProcessRequestsAsync\u003ed__12`1\u003cSystem.__Canon\u003e ByRef)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.ProcessRequestsAsync[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1\u003cSystem.__Canon\u003e)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnectionMiddleware`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConnectionAsync(Microsoft.AspNetCore.Connections.ConnectionContext)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection+\u003cExecuteAsync\u003ed__32.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection+\u003cExecuteAsync\u003ed__32, Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cExecuteAsync\u003ed__32 ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection+\u003cExecuteAsync\u003ed__32, Microsoft.AspNetCore.Server.Kestrel.Core, Version=3.1.22.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]](\u003cExecuteAsync\u003ed__32 ByRef)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection.ExecuteAsync()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelConnection.System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\nWriting minidump to file /OOMRepro.\u003cpid\u003e.dmp\r\n```",
                                           "updatedAt":  "2022-02-02T16:08:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49S9VW",
                                           "createdAt":  "2022-02-02T21:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Did you try adding middleware? For example:\r\n\r\n```C#\r\napp.Use(next =\u003e\r\n{\r\n    return async httpContext =\u003e\r\n    {\r\n        try\r\n        {\r\n            await next(httpContext);\r\n        }\r\n        catch (OutOfMemoryException m)\r\n        {\r\n            Environment.FailFast(m.ToString());\r\n        }\r\n    };\r\n});\r\n```\r\n\r\nYou could put this at the start of `Startup.Configure()` to put it at the beginning of the pipeline. https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0",
                                           "updatedAt":  "2022-02-02T21:41:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49UTvo",
                                           "createdAt":  "2022-02-03T08:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "@halter73 What you suggest is no different to the example above; I am fully aware of the basics of ASP.NET such as middleware. \r\n\r\nLook at the OOM traces raised within the asp.net runtime following the logs: `Connection processing ended abnormally` and `The connection listener failed to accept any new connections` above.  These cannot be caught by the user code at all.\r\n\r\nIn production, what I see is that one memory hungry request is able to cause OOM in other ASP.NET workers while they are outside of user code. That memory hungry request can even then complete. \r\n\r\nIt should be possible to terminate (and e.g. dump) on the first instance of OOM, regardless of where it is raised.  The framework is preventing this from being possible, making it difficult to debug such issues.\r\n\r\nNot to mention the danger of leaving an application running following an OOM which I hope I don\u0027t have to go over the basics of -- see the above logs for a glimpse?",
                                           "updatedAt":  "2022-02-03T09:04:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49WBYE",
                                           "createdAt":  "2022-02-03T16:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Another issue with the runtime catching out of memory is that it forces the user to call Environment.FailFast to have a hope of getting a dump.  But this destroys the trace because it has been caught and discarded.  We would want to check these locals to determine the cause of the OOM - but we may end up releasing them in the action of terminating the process.\r\n\r\nThe normal behaviour for a .NET application (e.g. console) is for unhandled exceptions to be left alone if not dealt with by user code until the .NET runtime itself terminates the application.  A dump taken at this exit will contain all the threads involved in raising the OOM, including their locals to be investigated.\r\n\r\nIn ASP.NET Core, if we leave an exception unhandled, it is simply caught by ASP framework and discarded (even if it\u0027s a corrupted state exception like OOM as we\u0027ve been discussing).  So such a dump cannot be taken at all and we are left with the only chance of getting one containing incomplete information anyway.\r\n\r\nEdit: Although some hacks with `ExceptionDispatchInfo` and stopping the server might work in this case.\r\n\r\nEdit: This technique only appears to work with an attached debugger, not debugging a core dump:\r\n\r\n![image](https://user-images.githubusercontent.com/41444963/152399638-e4cb48f3-d960-4c3b-b776-f5118d41e3b3.png)\r\n",
                                           "updatedAt":  "2022-02-03T17:49:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49ah2g",
                                           "createdAt":  "2022-02-04T21:30:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e It should be possible to terminate (and e.g. dump) on the first instance of OOM, regardless of where it is raised. The framework is preventing this from being possible, making it difficult to debug such issues.\r\n\r\nOne option is to watch the heap size out of process and collect a dump and restart the process manually when you observe the GC heap size exceeding a certain limit using tools like `dotnet-counters` and `dotnet-dump`. This is better than FailFast because you can attempt to gracefully shutdown the server and drain request before you actually run out of memory while still collecting a dump.\r\n\r\nHaving a way of making certain OOMs fail fast would be a runtime decision, so I\u0027m going to transfer the issue.",
                                           "updatedAt":  "2022-02-04T21:30:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49chQb",
                                           "createdAt":  "2022-02-06T18:20:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThere appears to be a global try/catch in some places inside ASP.NET Core.  When allocating too much ram such that the CLR throws OutOfMemoryException, this can strike inside the ASP runtime code.  Such errors are not passed to error filters, so I am unable to decide to dump and terminate the process for example, as I would if chance would have it raised in the offending endpoint user code instead.\n\n### Expected Behavior\n\nIt should be possible for the user to handle such exceptions, and for example to not leave the application in a dangerous state.\n\n### Steps To Reproduce\n\nWrite a endpoint that allocates a lot of static memory and call it a few times.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n3.1.416\n\n### Anything else?\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edave-yotta\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`, `area-runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-06T18:20:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49dyFp",
                                           "createdAt":  "2022-02-07T08:54:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "@halter73 with respect that is ridiculous.\r\n\r\nASP.NET is doing:\r\n\r\n```csharp\r\ntry\r\n{\r\n  SomeOperation();\r\n}\r\ncatch(Exception allExceptions)\r\n{\r\n  // log and ignore exception\r\n}\r\n```\r\n\r\nThis is an anti-pattern.\r\n\r\nNormally, user code unhandled exceptions in a .NET application immediately terminate at that call stack.  ASP.NET should make this behaviour possible since the user cannot always catch the OOM exception.  I suppose there can also be other instances where this is also the case.\r\n\r\nThe choice of continuing to run or not should be up to the user - I personally would not try to gracefully shutdown the server due to the risks when allocations are no longer possible - deadlocks, data corruption, partial application termination, false responses and so on.\r\n\r\nFor us to be able to deal with these exceptions we just need something in ASP.NET like:\r\n\r\n```csharp\r\ntry\r\n{\r\n  SomeOperation();\r\n}\r\ncatch(Exception allExceptions) when(!configuration.HandleError(allexceptions))\r\n{\r\n  // log and ignore exception\r\n}\r\n...\r\napp.WithConfiguration(x=\u003ex.ErrorHandler(e=\u003e e is not OutOfMemoryException));\r\n```\r\n\r\nI don\u0027t feel like this is a big ask?",
                                           "updatedAt":  "2022-02-07T09:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49dzu4",
                                           "createdAt":  "2022-02-07T09:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "\u003e One option is to watch the heap size out of process and collect a dump and restart the process manually when you observe the GC heap size exceeding a certain limit\r\n\r\nThis does not work unless the observation triggers a (full, synchronous) GC.  This is a bad idea.",
                                           "updatedAt":  "2022-02-07T09:03:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49ehF7",
                                           "createdAt":  "2022-02-07T12:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "If your goal is to crash on any OOM exception from any code (which would seem to be what such a proposed exception filter callback invoked throughout ASP.NET would be), did you try registering a callback with AppContext.FirstChanceException? You could call Environment.FailFast if you see an OutOfMemoryException if that\u0027s the desired behavior. ",
                                           "updatedAt":  "2022-02-07T12:23:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49eiDn",
                                           "createdAt":  "2022-02-07T12:27:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "\u003e If your goal is to crash on any OOM exception from any code (which would seem to be what such a proposed exception filter callback invoked throughout ASP.NET would be), did you try registering a callback with AppContext.FirstChanceException? You could call Environment.FailFast if you see an OutOfMemoryException if that\u0027s the desired behavior.\r\n\r\nCalling Environment.FailFast is not the same as the app crashing out with an unhandled exception.  FailFast will not properly preserve the throwing call stack - it\u0027s more like a rethrow.\r\n\r\nOtherwise yes - that\u0027s a good point about first chance.",
                                           "updatedAt":  "2022-02-07T12:28:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49ektU",
                                           "createdAt":  "2022-02-07T12:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e FailFast will not properly preserve the throwing call stack - it\u0027s more like a rethrow.\r\n\r\nIt will produce a dump that includes the thread\u0027s stack not unwound. ",
                                           "updatedAt":  "2022-02-07T12:37:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49eoz9",
                                           "createdAt":  "2022-02-07T12:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCNZWoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2022-02-07T14:30:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "\u003e \u003e FailFast will not properly preserve the throwing call stack - it\u0027s more like a rethrow.\r\n\u003e \r\n\u003e It will produce a dump that includes the thread\u0027s stack not unwound.\r\n\r\nI checked this the other day but that was with a `catch(OutOfMemoryException e) Environment.FailFast(\"message\", e);` which to be fair is not what you are suggesting - that trace leads from FailFast down to the catch and nowhere else while `FirstChanceException` is not a catch statment.  Sounds like this will work I\u0027ll test it out thanks!\r\n\r\nEdit: @stephentoub you\u0027re correct that works well (as I\u0027m sure you were aware :) )",
                                           "updatedAt":  "2022-02-07T14:26:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49e_M_",
                                           "createdAt":  "2022-02-07T14:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Ok, so FailFast in FirstChanceException I **think** will work well for us.  There\u0027s only a couple of things remaining I can think of to worry about here:\r\n\r\n1) e.g. dodgy library code that is doing some throw-catch of OutOfMemoryException that could now cause app termination.  This would have to be prevented with some filters on the first chance exception somehow.  Probabbly by checking the trace comes from the GC.\r\n\r\n2) I\u0027ve managed to get ASP.NET in a hung state above where it is not accepting any connections and is not shutting down.  This might be something for the runtime to prevent - I\u0027m not sure.",
                                           "updatedAt":  "2022-02-07T14:35:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49fP9R",
                                           "createdAt":  "2022-02-07T15:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Might be worth adding from the docs here: https://docs.microsoft.com/en-us/dotnet/api/system.outofmemoryexception?view=net-6.0#remarks \r\n\r\n\u003e If you choose to handle the exception, you should include a catch block that \r\ncalls the [Environment.FailFast](https://docs.microsoft.com/en-us/dotnet/api/system.environment.failfast?view=net-6.0) method\r\n\r\nThis seems to suggest that ASP.NET should either be calling FailFast or not handling this exception.",
                                           "updatedAt":  "2022-02-07T15:35:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49geBc",
                                           "createdAt":  "2022-02-07T21:04:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e This is an anti-pattern.\r\n\r\nThe reason for the blanket catch here, as opposed to the general advice, is that you normally don\u0027t want to crash the entire server if there was any minor (relatively speaking) exception from a single request.  Mostly because doing so would make denial-of-service attacks much easier.  But yes, I too am surprised they didn\u0027t exclude a couple of specific categories.\r\n\r\nAnother reason why I wish we had an \"expected error\" vs \"exception\" dichotomy.",
                                           "updatedAt":  "2022-02-07T21:04:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49iUpN",
                                           "createdAt":  "2022-02-08T09:43:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "\u003e you normally don\u0027t want to crash the entire server if there was any minor (relatively speaking) exception from a single request\r\n\r\nThat does make sense from a DOS perspective it\u0027s true.  Such attacks could expose weaknesses in algorithms and raise out of bounds or overflow, as opposed to known failure modes like \"that\u0027s a bad tcp packet\"; you end up catching everything anyway.  \r\n\r\nI think the \"corrupted state exceptions\" are different - should an attacker be able to craft an OOM and leave the server in a zombie/dangerous state, crashing the entire server (and restarting e.g. it was running in a container) is what you prefer.\r\n\r\nEdit: That said, it places a lot of trust on the ASP.NET framework code to believe that you can catch and ignore any (non corrupted state) exception in the request pipeline without leaving it in a state where it\u0027s going to do bad things later.  Although we are all trusting that our application is stateless in the end when we return a 500, even though there are certainly some singletons kicking around.",
                                           "updatedAt":  "2022-02-08T09:55:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49j6-o",
                                           "createdAt":  "2022-02-08T16:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "@stephentoub I\u0027m actually having issues with OutOfMemoryException being raised now terminating the app that weren\u0027t a problem before from your solution - I don\u0027t believe the traces either, maybe you have some idea...does the runtime itself do first chance on out of memory in order to run a GC or something? I\u0027ll get the pipeline tests set up to take a minidump but this is strange.\r\n\r\nThe trace is:\r\n```\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at AlloyEngine.EngineService.FailFastOnOutOfMemoryExceptions(System.Object, System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs)\r\n   at AlloyEngine.Utilities.Utils+JsonUtils.GetJsonSettings(Newtonsoft.Json.JsonConverter[])\r\n   at AlloyEngine.Utilities.Utils+JsonUtils+\u003c\u003ec__DisplayClass2_0.\u003cSetupJsonSettings\u003eb__0()\r\n   at Newtonsoft.Json.JsonSerializer.CreateDefault()\r\n...\r\n```\r\nWhere no large allocations take place.  These tests pass prior to these changes, never had any oom issues in tests.  I suspect there\u0027s other registrations made to FirstChance that were ignoring these, or perhaps some being thrown-caught in newtonsoft (although nothing like that in the trace here).",
                                           "updatedAt":  "2022-02-08T16:48:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1E6n",
                                           "createdAt":  "2023-04-26T18:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@dave-yotta checking if this continues to be an issue for you?",
                                           "updatedAt":  "2023-04-26T18:24:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a54hk",
                                           "createdAt":  "2023-04-27T08:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEnfvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahmoodvcs",
                                                                               "createdAt":  "2023-08-24T03:07:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "ASP.NET should not be attempting to catch `OutOfMemoryException`, it goes against the dotnet documentation as linked above.\r\nUsing first-chance is a possibility but not without it\u0027s risks (see my last comment), and feels like a workaround for improper library behavior.\r\n\r\nhttps://github.com/dotnet/runtime/issues/64831#issuecomment-1031217513 I suggested a middle ground here but otherwise I think there\u0027s all info you could need in this issue?",
                                           "updatedAt":  "2023-04-27T08:38:58Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "OutOfMemoryException caused by user-code in ASP.NET Core runtime",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64934",
        "createdAt":  "2022-02-07T20:00:47Z",
        "number":  64934,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T23:04:26Z",
        "body":  "`CoreCLR Pri1 Runtime Tests Run Linux arm64 release` failed with https://helix.dot.net/api/2019-06-17/jobs/cf4c2934-a8ac-4bcd-9a98-3de0e508b3d7/workitems/PayloadGroup0/console:\r\n\r\n```\r\n   GC.Scenarios.XUnitWrapper: [Long Running Test] \u0027GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\u0027, Elapsed: 01:22:02\r\n   GC.Scenarios.XUnitWrapper: [Long Running Test] \u0027GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\u0027, Elapsed: 01:24:02\r\n   GC.Scenarios.XUnitWrapper: [Long Running Test] \u0027GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\u0027, Elapsed: 01:26:02\r\n    GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh [FAIL]\r\n      /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh: line 411:   937 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false GCSimulator_63.dll \u0027-t\u0027 \u00273\u0027 \u0027-tp\u0027 \u00270\u0027 \u0027-dz\u0027 \u002717\u0027 \u0027-sdz\u0027 \u00278500\u0027 \u0027-dc\u0027 \u002710000\u0027 \u0027-sdc\u0027 \u00275000\u0027 \u0027-lt\u0027 \u00272\u0027 \u0027-f\u0027 \u0027-dp\u0027 \u00270.8\u0027 \u0027-dw\u0027 \u00270.0\u0027\r\n      Expected: 100\r\n      Actual: 137\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Scenarios._GCSimulator_GCSimulator_63_GCSimulator_63_._GCSimulator_GCSimulator_63_GCSimulator_63_sh()\r\n      Output:\r\n        /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh: line 411:   937 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false GCSimulator_63.dll \u0027-t\u0027 \u00273\u0027 \u0027-tp\u0027 \u00270\u0027 \u0027-dz\u0027 \u002717\u0027 \u0027-sdz\u0027 \u00278500\u0027 \u0027-dc\u0027 \u002710000\u0027 \u0027-sdc\u0027 \u00275000\u0027 \u0027-lt\u0027 \u00272\u0027 \u0027-f\u0027 \u0027-dp\u0027 \u00270.8\u0027 \u0027-dw\u0027 \u00270.0\u0027\r\n        Expected: 100\r\n        Actual: 137\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX6mPww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49gQKZ",
                                           "createdAt":  "2022-02-07T20:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`CoreCLR Pri1 Runtime Tests Run Linux arm64 release` failed with https://helix.dot.net/api/2019-06-17/jobs/cf4c2934-a8ac-4bcd-9a98-3de0e508b3d7/workitems/PayloadGroup0/console:\r\n\r\n```\r\n   GC.Scenarios.XUnitWrapper: [Long Running Test] \u0027GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\u0027, Elapsed: 01:22:02\r\n   GC.Scenarios.XUnitWrapper: [Long Running Test] \u0027GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\u0027, Elapsed: 01:24:02\r\n   GC.Scenarios.XUnitWrapper: [Long Running Test] \u0027GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\u0027, Elapsed: 01:26:02\r\n    GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh [FAIL]\r\n      /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh: line 411:   937 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false GCSimulator_63.dll \u0027-t\u0027 \u00273\u0027 \u0027-tp\u0027 \u00270\u0027 \u0027-dz\u0027 \u002717\u0027 \u0027-sdz\u0027 \u00278500\u0027 \u0027-dc\u0027 \u002710000\u0027 \u0027-sdc\u0027 \u00275000\u0027 \u0027-lt\u0027 \u00272\u0027 \u0027-f\u0027 \u0027-dp\u0027 \u00270.8\u0027 \u0027-dw\u0027 \u00270.0\u0027\r\n      Expected: 100\r\n      Actual: 137\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Scenarios._GCSimulator_GCSimulator_63_GCSimulator_63_._GCSimulator_GCSimulator_63_GCSimulator_63_sh()\r\n      Output:\r\n        /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh: line 411:   937 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false GCSimulator_63.dll \u0027-t\u0027 \u00273\u0027 \u0027-tp\u0027 \u00270\u0027 \u0027-dz\u0027 \u002717\u0027 \u0027-sdz\u0027 \u00278500\u0027 \u0027-dc\u0027 \u002710000\u0027 \u0027-sdc\u0027 \u00275000\u0027 \u0027-lt\u0027 \u00272\u0027 \u0027-f\u0027 \u0027-dp\u0027 \u00270.8\u0027 \u0027-dw\u0027 \u00270.0\u0027\r\n        Expected: 100\r\n        Actual: 137\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/Scenarios/GCSimulator/GCSimulator_63/GCSimulator_63.sh\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eam11\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-07T20:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GH-q5",
                                           "createdAt":  "2022-07-06T17:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@am11, is this still an issue for you? ",
                                           "updatedAt":  "2022-07-06T17:33:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GIBFG",
                                           "createdAt":  "2022-07-06T17:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "It was failing in CI, and still is. From yesterday\u0027s run https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-5926dcadea6c44899b/PayloadGroup0/1/console.49243f8d.log (GCSimulator_64, GCSimulator_56 and GCSimulator_268 failed on Linux arm64)\r\n\r\nThis is the pipeline: https://dev.azure.com/dnceng/public/_build?definitionId=673\u0026_a=summary (been red for months)",
                                           "updatedAt":  "2022-07-06T17:45:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fqP_D",
                                           "createdAt":  "2023-06-23T20:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Closing since this is an old issue ",
                                           "updatedAt":  "2023-06-23T20:28:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fqY_D",
                                           "createdAt":  "2023-06-23T20:51:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "still failing in today\u0027s run: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-5075cbcdbd7e44b788/PayloadGroup0/1/console.a27d340f.log?helixlogtype=result",
                                           "updatedAt":  "2023-06-23T20:51:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "GCSimulator_63 test failed in outerloop on linux-arm64",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65198",
        "createdAt":  "2022-02-11T17:30:17Z",
        "number":  65198,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T19:26:02Z",
        "body":  "`GC.AllocateUninitializedArray` benchmarks have regressed by 15% for \"smaller size\" (1000 elements) only on macOS (x64, I don\u0027t have arm64 data). Other Unixes are not affected and larger sizes (10000 elements) are not affected..\r\n\r\n\u003cdetails\u003e\r\n\r\n.NET 6:\r\n\r\n|          Type |                     Method | length | pinned |        Mean |      Error |     StdDev |      Median |         Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |------------:|-----------:|-----------:|------------:|------------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |  False |    99.14 ns |   2.948 ns |   3.276 ns |    97.28 ns |    96.46 ns |   108.0 ns |  0.4891 |       - |      - |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |  False |   192.16 ns |   0.779 ns |   0.729 ns |   191.89 ns |   191.14 ns |   193.4 ns |  0.9669 |       - |      - |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |   True |   378.25 ns |   4.336 ns |   3.843 ns |   376.98 ns |   373.63 ns |   385.4 ns |  1.9396 |  1.9396 | 0.3246 |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |   True |   527.51 ns |  35.474 ns |  34.840 ns |   537.93 ns |   440.44 ns |   558.6 ns |  3.8341 |  3.8341 | 0.6409 |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |  False |   460.30 ns |  13.229 ns |  12.993 ns |   465.62 ns |   433.22 ns |   472.1 ns |  4.7617 |       - |      - |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |  False |   863.26 ns |  28.192 ns |  31.336 ns |   868.93 ns |   799.42 ns |   905.1 ns |  9.5207 |       - |      - |  19.55 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |   True | 2,079.43 ns | 193.755 ns | 215.358 ns | 2,184.01 ns | 1,616.18 ns | 2,218.1 ns | 18.7916 | 18.7916 | 3.1319 |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |   True | 4,294.48 ns | 339.558 ns | 391.035 ns | 4,411.58 ns | 3,194.01 ns | 4,566.0 ns | 36.7647 | 36.7647 | 6.1275 |  19.56 KB |\r\n\r\n.NET 7 Preview 1:\r\n\r\n|          Type |                     Method | length | pinned |       Mean |     Error |    StdDev |     Median |        Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |-----------:|----------:|----------:|-----------:|-----------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |  False |   115.0 ns |   3.62 ns |   4.02 ns |   115.7 ns |   107.7 ns |   120.7 ns |  0.4894 |       - |      - |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |  False |   218.5 ns |  10.22 ns |  11.76 ns |   221.6 ns |   197.3 ns |   238.9 ns |  0.9663 |       - |      - |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |   True |   408.4 ns |  44.27 ns |  49.21 ns |   403.0 ns |   314.0 ns |   498.6 ns |  1.9366 |  1.9366 | 0.3239 |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |   True |   622.0 ns |   7.05 ns |   6.25 ns |   621.5 ns |   607.3 ns |   630.9 ns |  3.8293 |  3.8293 | 0.6402 |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |  False |   502.1 ns |  36.32 ns |  40.37 ns |   500.5 ns |   441.9 ns |   573.4 ns |  4.7603 |       - |      - |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |  False |   834.6 ns |  24.70 ns |  25.36 ns |   844.3 ns |   785.4 ns |   860.9 ns |  9.5210 |       - |      - |  19.55 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |   True | 2,328.8 ns | 272.49 ns | 313.79 ns | 2,413.5 ns | 1,747.3 ns | 2,679.2 ns | 18.7466 | 18.7466 | 3.1301 |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |   True | 4,128.7 ns | 395.66 ns | 439.78 ns | 4,314.0 ns | 3,130.7 ns | 4,385.4 ns | 36.7561 | 36.7561 | 6.1260 |  19.56 KB |\r\n\r\n\u003c/details\u003e\r\n\r\nRepro:\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 ./performance/scripts/benchmarks_ci.py -f net6.0 net7.0 --filter \u0027*AllocateUninitializedArray\u0027 --bdn-arguments \"--join true\"\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateArray(length: 10000, pinned: False)\r\n\r\n| Result |    Base |    Diff | Ratio | Alloc Delta | Modality | Operating System     | Bit   | Processor Name                                  | Base V        | Diff V     |\r\n| ------ | -------:| -------:| -----:| -----------:| -------- | -------------------- | ----- | ----------------------------------------------- | ------------- | ----------- |\r\n| Same   |  248.92 |  243.83 |  1.02 |          +0 |          | Windows 11           | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  179.83 |  184.15 |  0.98 |          +0 |          | Windows 11           | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  459.82 |  461.10 |  1.00 |          +0 |          | Windows 10           | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Faster |  914.81 |  709.96 |  1.29 |          +0 |          | Windows 11           | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  312.96 |  304.02 |  1.03 |          +0 | bimodal  | Windows 10           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  298.12 |  327.61 |  0.91 |          +0 |          | Windows 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  307.02 |  307.68 |  1.00 |          +0 | several? | Windows 11           | X64   | Intel Core i9-9900T CPU 2.10GHz                 | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  584.23 |  542.31 |  1.08 |          +0 | several? | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  420.18 |  431.82 |  0.97 |          +0 |          | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  301.75 |  307.80 |  0.98 |          +0 |          | ubuntu 20.04         | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  483.25 |  487.37 |  0.99 |          +0 |          | ubuntu 18.04         | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   | 1248.19 | 1157.88 |  1.08 |          +0 |          | centos 7             | X64   | Intel Xeon CPU E5530 2.40GHz                    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  807.84 |  747.88 |  1.08 |          +0 |          | ubuntu 18.04         | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  372.58 |  389.82 |  0.96 |          +0 |          | alpine 3.13          | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  391.98 |  388.72 |  1.01 |          +0 |          | ubuntu 18.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  365.02 |  365.98 |  1.00 |          +0 |          | ubuntu 20.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  610.43 |  598.45 |  1.02 |          +0 |          | Windows 10           | Arm64 | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  269.72 |  275.66 |  0.98 |          +0 |          | Windows 11           | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  489.28 |  492.36 |  0.99 |          +0 |          | Windows 10           | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  827.06 |  821.72 |  1.01 |          +0 |          | Windows 10           | Arm   | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  853.39 | 1028.78 |  0.83 |          +0 |          | macOS Big Sur 11.6.3 | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  734.86 |  859.05 |  0.86 |          +0 |          | macOS Big Sur 11.4   | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     | 6.0.121.56705 | 7.0.22.7608|\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateUninitializedArray(length: 1000, pinned: False)\r\n\r\n| Result |   Base |   Diff | Ratio | Alloc Delta | Modality   | Operating System     | Bit   | Processor Name                                  | Base V        | Diff V     |\r\n| ------ | ------:| ------:| -----:| -----------:| ---------- | -------------------- | ----- | ----------------------------------------------- | ------------- | ----------- |\r\n| Same   |  28.63 |  28.43 |  1.01 |          +0 |            | Windows 11           | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  19.49 |  20.59 |  0.95 |          +0 |            | Windows 11           | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  47.97 |  48.42 |  0.99 |          +0 |            | Windows 10           | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Faster |  96.60 |  73.23 |  1.32 |          +0 |            | Windows 11           | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  32.77 |  32.21 |  1.02 |          +0 | several?   | Windows 10           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  30.69 |  32.90 |  0.93 |          +0 |            | Windows 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  31.55 |  32.59 |  0.97 |          +0 | several?   | Windows 11           | X64   | Intel Core i9-9900T CPU 2.10GHz                 | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  59.60 |  62.74 |  0.95 |          +0 |            | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  42.11 |  46.20 |  0.91 |          +0 | several?   | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  37.46 |  38.63 |  0.97 |          +0 |            | ubuntu 20.04         | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  53.49 |  54.05 |  0.99 |          +0 |            | ubuntu 18.04         | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   | 148.24 | 138.95 |  1.07 |          +0 |            | centos 7             | X64   | Intel Xeon CPU E5530 2.40GHz                    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  87.90 |  85.15 |  1.03 |          +0 |            | ubuntu 18.04         | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  43.12 |  43.76 |  0.99 |          +0 |            | alpine 3.13          | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  50.21 |  48.88 |  1.03 |          +0 |            | ubuntu 18.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  46.33 |  46.50 |  1.00 |          +0 | multimodal | ubuntu 20.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  64.90 |  65.37 |  0.99 |          +0 |            | Windows 10           | Arm64 | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  29.11 |  30.75 |  0.95 |          +0 |            | Windows 11           | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  50.59 |  52.71 |  0.96 |          +0 |            | Windows 10           | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  94.16 |  96.78 |  0.97 |          +0 |            | Windows 10           | Arm   | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  92.65 | 109.98 |  0.84 |          +0 |            | macOS Big Sur 11.6.3 | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  77.08 |  91.51 |  0.84 |          +0 |            | macOS Big Sur 11.4   | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     | 6.0.121.56705 | 7.0.22.7608|\r\n\r\n\u003c/details\u003e\r\n\r\ncc @VSadov ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZTz1Ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49xuZ4",
                                           "createdAt":  "2022-02-11T17:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`GC.AllocateUninitializedArray` benchmarks have regressed by 15% for \"smaller size\" (1000 elements) only on macOS (x64, I don\u0027t have arm64 data). Other Unixes are not affected.\r\n\r\n\u003cdetails\u003e\r\n\r\n.NET 6:\r\n\r\n|          Type |                     Method | length | pinned |        Mean |      Error |     StdDev |      Median |         Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |------------:|-----------:|-----------:|------------:|------------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |  False |    99.14 ns |   2.948 ns |   3.276 ns |    97.28 ns |    96.46 ns |   108.0 ns |  0.4891 |       - |      - |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |  False |   192.16 ns |   0.779 ns |   0.729 ns |   191.89 ns |   191.14 ns |   193.4 ns |  0.9669 |       - |      - |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |   True |   378.25 ns |   4.336 ns |   3.843 ns |   376.98 ns |   373.63 ns |   385.4 ns |  1.9396 |  1.9396 | 0.3246 |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |   True |   527.51 ns |  35.474 ns |  34.840 ns |   537.93 ns |   440.44 ns |   558.6 ns |  3.8341 |  3.8341 | 0.6409 |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |  False |   460.30 ns |  13.229 ns |  12.993 ns |   465.62 ns |   433.22 ns |   472.1 ns |  4.7617 |       - |      - |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |  False |   863.26 ns |  28.192 ns |  31.336 ns |   868.93 ns |   799.42 ns |   905.1 ns |  9.5207 |       - |      - |  19.55 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |   True | 2,079.43 ns | 193.755 ns | 215.358 ns | 2,184.01 ns | 1,616.18 ns | 2,218.1 ns | 18.7916 | 18.7916 | 3.1319 |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |   True | 4,294.48 ns | 339.558 ns | 391.035 ns | 4,411.58 ns | 3,194.01 ns | 4,566.0 ns | 36.7647 | 36.7647 | 6.1275 |  19.56 KB |\r\n\r\n.NET 7 Preview 1:\r\n\r\n|          Type |                     Method | length | pinned |       Mean |     Error |    StdDev |     Median |        Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |-----------:|----------:|----------:|-----------:|-----------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |  False |   115.0 ns |   3.62 ns |   4.02 ns |   115.7 ns |   107.7 ns |   120.7 ns |  0.4894 |       - |      - |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |  False |   218.5 ns |  10.22 ns |  11.76 ns |   221.6 ns |   197.3 ns |   238.9 ns |  0.9663 |       - |      - |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |   True |   408.4 ns |  44.27 ns |  49.21 ns |   403.0 ns |   314.0 ns |   498.6 ns |  1.9366 |  1.9366 | 0.3239 |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |   True |   622.0 ns |   7.05 ns |   6.25 ns |   621.5 ns |   607.3 ns |   630.9 ns |  3.8293 |  3.8293 | 0.6402 |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |  False |   502.1 ns |  36.32 ns |  40.37 ns |   500.5 ns |   441.9 ns |   573.4 ns |  4.7603 |       - |      - |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |  False |   834.6 ns |  24.70 ns |  25.36 ns |   844.3 ns |   785.4 ns |   860.9 ns |  9.5210 |       - |      - |  19.55 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |   True | 2,328.8 ns | 272.49 ns | 313.79 ns | 2,413.5 ns | 1,747.3 ns | 2,679.2 ns | 18.7466 | 18.7466 | 3.1301 |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |   True | 4,128.7 ns | 395.66 ns | 439.78 ns | 4,314.0 ns | 3,130.7 ns | 4,385.4 ns | 36.7561 | 36.7561 | 6.1260 |  19.56 KB |\r\n\r\n\u003c/details\u003e\r\n\r\nRepro:\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 ./performance/scripts/benchmarks_ci.py -f net6.0 net7.0 --filter \u0027*AllocateUninitializedArray\u0027 --bdn-arguments \"--join true\"\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateArray(length: 10000, pinned: False)\r\n\r\n| Result |    Base |    Diff | Ratio | Alloc Delta | Modality | Operating System     | Bit   | Processor Name                                  | Base V        | Diff V     |\r\n| ------ | -------:| -------:| -----:| -----------:| -------- | -------------------- | ----- | ----------------------------------------------- | ------------- | ----------- |\r\n| Same   |  248.92 |  243.83 |  1.02 |          +0 |          | Windows 11           | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  179.83 |  184.15 |  0.98 |          +0 |          | Windows 11           | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  459.82 |  461.10 |  1.00 |          +0 |          | Windows 10           | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Faster |  914.81 |  709.96 |  1.29 |          +0 |          | Windows 11           | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  312.96 |  304.02 |  1.03 |          +0 | bimodal  | Windows 10           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  298.12 |  327.61 |  0.91 |          +0 |          | Windows 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  307.02 |  307.68 |  1.00 |          +0 | several? | Windows 11           | X64   | Intel Core i9-9900T CPU 2.10GHz                 | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  584.23 |  542.31 |  1.08 |          +0 | several? | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  420.18 |  431.82 |  0.97 |          +0 |          | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  301.75 |  307.80 |  0.98 |          +0 |          | ubuntu 20.04         | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  483.25 |  487.37 |  0.99 |          +0 |          | ubuntu 18.04         | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   | 1248.19 | 1157.88 |  1.08 |          +0 |          | centos 7             | X64   | Intel Xeon CPU E5530 2.40GHz                    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  807.84 |  747.88 |  1.08 |          +0 |          | ubuntu 18.04         | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  372.58 |  389.82 |  0.96 |          +0 |          | alpine 3.13          | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  391.98 |  388.72 |  1.01 |          +0 |          | ubuntu 18.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  365.02 |  365.98 |  1.00 |          +0 |          | ubuntu 20.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  610.43 |  598.45 |  1.02 |          +0 |          | Windows 10           | Arm64 | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  269.72 |  275.66 |  0.98 |          +0 |          | Windows 11           | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  489.28 |  492.36 |  0.99 |          +0 |          | Windows 10           | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  827.06 |  821.72 |  1.01 |          +0 |          | Windows 10           | Arm   | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  853.39 | 1028.78 |  0.83 |          +0 |          | macOS Big Sur 11.6.3 | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  734.86 |  859.05 |  0.86 |          +0 |          | macOS Big Sur 11.4   | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     | 6.0.121.56705 | 7.0.22.7608|\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateUninitializedArray(length: 1000, pinned: False)\r\n\r\n| Result |   Base |   Diff | Ratio | Alloc Delta | Modality   | Operating System     | Bit   | Processor Name                                  | Base V        | Diff V     |\r\n| ------ | ------:| ------:| -----:| -----------:| ---------- | -------------------- | ----- | ----------------------------------------------- | ------------- | ----------- |\r\n| Same   |  28.63 |  28.43 |  1.01 |          +0 |            | Windows 11           | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  19.49 |  20.59 |  0.95 |          +0 |            | Windows 11           | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  47.97 |  48.42 |  0.99 |          +0 |            | Windows 10           | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Faster |  96.60 |  73.23 |  1.32 |          +0 |            | Windows 11           | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  32.77 |  32.21 |  1.02 |          +0 | several?   | Windows 10           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  30.69 |  32.90 |  0.93 |          +0 |            | Windows 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  31.55 |  32.59 |  0.97 |          +0 | several?   | Windows 11           | X64   | Intel Core i9-9900T CPU 2.10GHz                 | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  59.60 |  62.74 |  0.95 |          +0 |            | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  42.11 |  46.20 |  0.91 |          +0 | several?   | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  37.46 |  38.63 |  0.97 |          +0 |            | ubuntu 20.04         | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  53.49 |  54.05 |  0.99 |          +0 |            | ubuntu 18.04         | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   | 148.24 | 138.95 |  1.07 |          +0 |            | centos 7             | X64   | Intel Xeon CPU E5530 2.40GHz                    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  87.90 |  85.15 |  1.03 |          +0 |            | ubuntu 18.04         | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  43.12 |  43.76 |  0.99 |          +0 |            | alpine 3.13          | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  50.21 |  48.88 |  1.03 |          +0 |            | ubuntu 18.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  46.33 |  46.50 |  1.00 |          +0 | multimodal | ubuntu 20.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  64.90 |  65.37 |  0.99 |          +0 |            | Windows 10           | Arm64 | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  29.11 |  30.75 |  0.95 |          +0 |            | Windows 11           | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  50.59 |  52.71 |  0.96 |          +0 |            | Windows 10           | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  94.16 |  96.78 |  0.97 |          +0 |            | Windows 10           | Arm   | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  92.65 | 109.98 |  0.84 |          +0 |            | macOS Big Sur 11.6.3 | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  77.08 |  91.51 |  0.84 |          +0 |            | macOS Big Sur 11.4   | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     | 6.0.121.56705 | 7.0.22.7608|\r\n\r\n\u003c/details\u003e\r\n\r\ncc @VSadov \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eadamsitnik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `os-mac-os-x`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-11T17:30:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49xvQ3",
                                           "createdAt":  "2022-02-11T17:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "`System.Tests.Perf_GC\u003cByte\u003e.NewOperator_Array(length: 1000)` and few similar benchmarks has regressed as well.",
                                           "updatedAt":  "2022-02-11T17:34:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc499sAK",
                                           "createdAt":  "2022-02-14T21:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`GC.AllocateUninitializedArray` benchmarks have regressed by 15% for \"smaller size\" (1000 elements) only on macOS (x64, I don\u0027t have arm64 data). Other Unixes are not affected and larger sizes (10000 elements) are not affected..\r\n\r\n\u003cdetails\u003e\r\n\r\n.NET 6:\r\n\r\n|          Type |                     Method | length | pinned |        Mean |      Error |     StdDev |      Median |         Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |------------:|-----------:|-----------:|------------:|------------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |  False |    99.14 ns |   2.948 ns |   3.276 ns |    97.28 ns |    96.46 ns |   108.0 ns |  0.4891 |       - |      - |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |  False |   192.16 ns |   0.779 ns |   0.729 ns |   191.89 ns |   191.14 ns |   193.4 ns |  0.9669 |       - |      - |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |   True |   378.25 ns |   4.336 ns |   3.843 ns |   376.98 ns |   373.63 ns |   385.4 ns |  1.9396 |  1.9396 | 0.3246 |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |   True |   527.51 ns |  35.474 ns |  34.840 ns |   537.93 ns |   440.44 ns |   558.6 ns |  3.8341 |  3.8341 | 0.6409 |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |  False |   460.30 ns |  13.229 ns |  12.993 ns |   465.62 ns |   433.22 ns |   472.1 ns |  4.7617 |       - |      - |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |  False |   863.26 ns |  28.192 ns |  31.336 ns |   868.93 ns |   799.42 ns |   905.1 ns |  9.5207 |       - |      - |  19.55 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |   True | 2,079.43 ns | 193.755 ns | 215.358 ns | 2,184.01 ns | 1,616.18 ns | 2,218.1 ns | 18.7916 | 18.7916 | 3.1319 |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |   True | 4,294.48 ns | 339.558 ns | 391.035 ns | 4,411.58 ns | 3,194.01 ns | 4,566.0 ns | 36.7647 | 36.7647 | 6.1275 |  19.56 KB |\r\n\r\n.NET 7 Preview 1:\r\n\r\n|          Type |                     Method | length | pinned |       Mean |     Error |    StdDev |     Median |        Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |-----------:|----------:|----------:|-----------:|-----------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |  False |   115.0 ns |   3.62 ns |   4.02 ns |   115.7 ns |   107.7 ns |   120.7 ns |  0.4894 |       - |      - |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |  False |   218.5 ns |  10.22 ns |  11.76 ns |   221.6 ns |   197.3 ns |   238.9 ns |  0.9663 |       - |      - |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |   1000 |   True |   408.4 ns |  44.27 ns |  49.21 ns |   403.0 ns |   314.0 ns |   498.6 ns |  1.9366 |  1.9366 | 0.3239 |      1 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |   1000 |   True |   622.0 ns |   7.05 ns |   6.25 ns |   621.5 ns |   607.3 ns |   630.9 ns |  3.8293 |  3.8293 | 0.6402 |   1.98 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |  False |   502.1 ns |  36.32 ns |  40.37 ns |   500.5 ns |   441.9 ns |   573.4 ns |  4.7603 |       - |      - |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |  False |   834.6 ns |  24.70 ns |  25.36 ns |   844.3 ns |   785.4 ns |   860.9 ns |  9.5210 |       - |      - |  19.55 KB |\r\n| Perf_GC\u0026lt;Byte\u0026gt; | AllocateUninitializedArray |  10000 |   True | 2,328.8 ns | 272.49 ns | 313.79 ns | 2,413.5 ns | 1,747.3 ns | 2,679.2 ns | 18.7466 | 18.7466 | 3.1301 |   9.79 KB |\r\n| Perf_GC\u0026lt;Char\u0026gt; | AllocateUninitializedArray |  10000 |   True | 4,128.7 ns | 395.66 ns | 439.78 ns | 4,314.0 ns | 3,130.7 ns | 4,385.4 ns | 36.7561 | 36.7561 | 6.1260 |  19.56 KB |\r\n\r\n\u003c/details\u003e\r\n\r\nRepro:\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npython3 ./performance/scripts/benchmarks_ci.py -f net6.0 net7.0 --filter \u0027*AllocateUninitializedArray\u0027 --bdn-arguments \"--join true\"\r\n```\r\n\r\n\u003cdetails\u003e\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateArray(length: 10000, pinned: False)\r\n\r\n| Result |    Base |    Diff | Ratio | Alloc Delta | Modality | Operating System     | Bit   | Processor Name                                  | Base V        | Diff V     |\r\n| ------ | -------:| -------:| -----:| -----------:| -------- | -------------------- | ----- | ----------------------------------------------- | ------------- | ----------- |\r\n| Same   |  248.92 |  243.83 |  1.02 |          +0 |          | Windows 11           | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  179.83 |  184.15 |  0.98 |          +0 |          | Windows 11           | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  459.82 |  461.10 |  1.00 |          +0 |          | Windows 10           | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Faster |  914.81 |  709.96 |  1.29 |          +0 |          | Windows 11           | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  312.96 |  304.02 |  1.03 |          +0 | bimodal  | Windows 10           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  298.12 |  327.61 |  0.91 |          +0 |          | Windows 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  307.02 |  307.68 |  1.00 |          +0 | several? | Windows 11           | X64   | Intel Core i9-9900T CPU 2.10GHz                 | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  584.23 |  542.31 |  1.08 |          +0 | several? | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  420.18 |  431.82 |  0.97 |          +0 |          | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  301.75 |  307.80 |  0.98 |          +0 |          | ubuntu 20.04         | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  483.25 |  487.37 |  0.99 |          +0 |          | ubuntu 18.04         | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   | 1248.19 | 1157.88 |  1.08 |          +0 |          | centos 7             | X64   | Intel Xeon CPU E5530 2.40GHz                    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  807.84 |  747.88 |  1.08 |          +0 |          | ubuntu 18.04         | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  372.58 |  389.82 |  0.96 |          +0 |          | alpine 3.13          | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  391.98 |  388.72 |  1.01 |          +0 |          | ubuntu 18.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  365.02 |  365.98 |  1.00 |          +0 |          | ubuntu 20.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  610.43 |  598.45 |  1.02 |          +0 |          | Windows 10           | Arm64 | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  269.72 |  275.66 |  0.98 |          +0 |          | Windows 11           | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  489.28 |  492.36 |  0.99 |          +0 |          | Windows 10           | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  827.06 |  821.72 |  1.01 |          +0 |          | Windows 10           | Arm   | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  853.39 | 1028.78 |  0.83 |          +0 |          | macOS Big Sur 11.6.3 | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  734.86 |  859.05 |  0.86 |          +0 |          | macOS Big Sur 11.4   | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     | 6.0.121.56705 | 7.0.22.7608|\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateUninitializedArray(length: 1000, pinned: False)\r\n\r\n| Result |   Base |   Diff | Ratio | Alloc Delta | Modality   | Operating System     | Bit   | Processor Name                                  | Base V        | Diff V     |\r\n| ------ | ------:| ------:| -----:| -----------:| ---------- | -------------------- | ----- | ----------------------------------------------- | ------------- | ----------- |\r\n| Same   |  28.63 |  28.43 |  1.01 |          +0 |            | Windows 11           | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  19.49 |  20.59 |  0.95 |          +0 |            | Windows 11           | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  47.97 |  48.42 |  0.99 |          +0 |            | Windows 10           | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Faster |  96.60 |  73.23 |  1.32 |          +0 |            | Windows 11           | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  32.77 |  32.21 |  1.02 |          +0 | several?   | Windows 10           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  30.69 |  32.90 |  0.93 |          +0 |            | Windows 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  31.55 |  32.59 |  0.97 |          +0 | several?   | Windows 11           | X64   | Intel Core i9-9900T CPU 2.10GHz                 | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  59.60 |  62.74 |  0.95 |          +0 |            | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  42.11 |  46.20 |  0.91 |          +0 | several?   | Windows 11           | X64   | Unknown processor                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  37.46 |  38.63 |  0.97 |          +0 |            | ubuntu 20.04         | X64   | AMD Ryzen 9 5900X                               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  53.49 |  54.05 |  0.99 |          +0 |            | ubuntu 18.04         | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   | 148.24 | 138.95 |  1.07 |          +0 |            | centos 7             | X64   | Intel Xeon CPU E5530 2.40GHz                    | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  87.90 |  85.15 |  1.03 |          +0 |            | ubuntu 18.04         | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  43.12 |  43.76 |  0.99 |          +0 |            | alpine 3.13          | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  50.21 |  48.88 |  1.03 |          +0 |            | ubuntu 18.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  46.33 |  46.50 |  1.00 |          +0 | multimodal | ubuntu 20.04         | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  64.90 |  65.37 |  0.99 |          +0 |            | Windows 10           | Arm64 | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  29.11 |  30.75 |  0.95 |          +0 |            | Windows 11           | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  50.59 |  52.71 |  0.96 |          +0 |            | Windows 10           | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               | 6.0.121.56705 | 7.0.22.7608|\r\n| Same   |  94.16 |  96.78 |  0.97 |          +0 |            | Windows 10           | Arm   | Microsoft SQ1 3.0 GHz                           | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  92.65 | 109.98 |  0.84 |          +0 |            | macOS Big Sur 11.6.3 | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)       | 6.0.121.56705 | 7.0.22.7608|\r\n| Slower |  77.08 |  91.51 |  0.84 |          +0 |            | macOS Big Sur 11.4   | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     | 6.0.121.56705 | 7.0.22.7608|\r\n\r\n\u003c/details\u003e\r\n\r\ncc @VSadov \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eadamsitnik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-mac-os-x`, `tenet-performance`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-14T21:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_1_e2",
                                           "createdAt":  "2022-03-17T17:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "The issue still persists with preview2, some benchmarks are even up to 5 times slower. It\u0027s specific to macOS x64.\r\n\r\n|                  Type | Method |        Job |  Runtime | Toolchain | Size |       Mean |    Error |   StdDev |     Median |        Min |        Max | Ratio | RatioSD |   Gen 0 | Allocated | Alloc Ratio |\r\n|---------------------- |------- |----------- |--------- |---------- |----- |-----------:|---------:|---------:|-----------:|-----------:|-----------:|------:|--------:|--------:|----------:|------------:|\r\n|  CtorGivenSize\u0026lt;Int32\u0026gt; |  Array | Job-YIPOBQ | .NET 6.0 |    net6.0 |  512 |   196.4 ns |  4.55 ns |  5.24 ns |   193.7 ns |   190.9 ns |   209.7 ns |  1.00 |    0.00 |  0.9899 |   2.02 KB |        1.00 |\r\n|  CtorGivenSize\u0026lt;Int32\u0026gt; |  Array | Job-FCGZAV | .NET 7.0 |    net7.0 |  512 | 1,062.0 ns | 71.56 ns | 82.40 ns | 1,005.3 ns |   992.6 ns | 1,224.5 ns |  5.40 |    0.34 | 12.6558 |   2.02 KB |        1.00 |\r\n|                       |        |            |          |           |      |            |          |          |            |            |            |       |         |         |           |             |\r\n| CtorGivenSize\u0026lt;String\u0026gt; |  Array | Job-YIPOBQ | .NET 6.0 |    net6.0 |  512 |   414.2 ns |  8.11 ns |  8.32 ns |   415.9 ns |   382.5 ns |   419.2 ns |  1.00 |    0.00 |  1.9677 |   4.02 KB |        1.00 |\r\n| CtorGivenSize\u0026lt;String\u0026gt; |  Array | Job-FCGZAV | .NET 7.0 |    net7.0 |  512 | 2,074.3 ns |  7.78 ns |  6.07 ns | 2,075.9 ns | 2,066.8 ns | 2,086.6 ns |  5.02 |    0.14 | 25.0000 |   4.02 KB |        1.00 |",
                                           "updatedAt":  "2022-03-17T17:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_5D9A",
                                           "createdAt":  "2022-03-18T01:12:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCTkhvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-18T07:00:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "thanks for reporting! @mokosan will be doing investigation on this.",
                                           "updatedAt":  "2022-03-18T01:12:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IH-Ch",
                                           "createdAt":  "2022-08-10T01:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqVJpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-08-10T08:29:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Was able to repro this on my Mac after upgrading to Monterey. The pattern I am observing is that we have regressed for cases where we are not pinning and have improved for cases where we are pinning. Will be investigating this further. As a note, this issue regressed _before_ we enabled Regions and is seemingly an OS specific regression.\r\n\r\n## .NET 6\r\n\r\n``BenchmarkDotNet=v0.13.1.1823-nightly, OS=macOS Monterey 12.3 (21E230) [Darwin 21.4.0]\r\nIntel Core i5-8210Y CPU 1.60GHz (Amber Lake Y), 1 CPU, 4 logical and 2 physical cores\r\n.NET SDK=7.0.100-rc.1.22409.23\r\n  [Host]     : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT\r\n  Job-WCHAYM : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT``\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  IterationTime=250.0000 ms  MaxIterationCount=20  \r\nMinIterationCount=15  WarmupCount=1\r\n\r\n|          Type |                     Method | length | pinned |       Mean |     Error |    StdDev |     Median |         Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |-----------:|----------:|----------:|-----------:|------------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |   1000 |  False |   116.9 ns |  16.03 ns |  17.15 ns |   109.6 ns |    98.29 ns |   148.8 ns |  0.4892 |       - |      - |      1 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |   1000 |  False |   191.5 ns |   5.27 ns |   5.64 ns |   191.1 ns |   181.34 ns |   204.6 ns |  0.9671 |       - |      - |   1.98 KB |\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |   1000 |   True |   524.4 ns |  68.27 ns |  75.88 ns |   519.6 ns |   401.84 ns |   672.0 ns |  1.9287 |  1.9287 | 0.3236 |      1 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |   1000 |   True |   724.6 ns |  31.27 ns |  36.01 ns |   736.8 ns |   604.18 ns |   762.8 ns |  3.8248 |  3.8248 | 0.6398 |   1.98 KB |\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |  10000 |  False |   595.0 ns |  23.05 ns |  25.62 ns |   591.3 ns |   541.17 ns |   638.5 ns |  4.7601 |       - |      - |   9.79 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |  10000 |  False | 1,048.9 ns |  37.94 ns |  43.69 ns | 1,047.5 ns |   926.95 ns | 1,106.3 ns |  9.5235 |       - |      - |  19.55 KB |\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |  10000 |   True | 2,625.9 ns | 267.35 ns | 286.07 ns | 2,653.5 ns | 1,862.02 ns | 2,958.7 ns | 18.7467 | 18.7467 | 3.1244 |   9.79 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |  10000 |   True | 5,790.2 ns | 185.26 ns | 205.92 ns | 5,788.5 ns | 5,389.56 ns | 6,071.2 ns | 36.6209 | 36.6209 | 6.1206 |  19.56 KB |\r\n\r\n## .NET 7\r\n\r\n``BenchmarkDotNet=v0.13.1.1823-nightly, OS=macOS Monterey 12.3 (21E230) [Darwin 21.4.0]\r\nIntel Core i5-8210Y CPU 1.60GHz (Amber Lake Y), 1 CPU, 4 logical and 2 physical cores\r\n.NET SDK=7.0.100-rc.1.22409.23\r\n  [Host]     : .NET 7.0.0 (7.0.22.40308), X64 RyuJIT\r\n  Job-LJYITB : .NET 7.0.0 (7.0.22.40308), X64 RyuJIT``\r\n\r\nPowerPlanMode=00000000-0000-0000-0000-000000000000  IterationTime=250.0000 ms  MaxIterationCount=20  \r\nMinIterationCount=15  WarmupCount=1\r\n\r\n|          Type |                     Method | length | pinned |       Mean |     Error |    StdDev |     Median |        Min |        Max |   Gen 0 |   Gen 1 |  Gen 2 | Allocated |\r\n|-------------- |--------------------------- |------- |------- |-----------:|----------:|----------:|-----------:|-----------:|-----------:|--------:|--------:|-------:|----------:|\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |   1000 |  False |   583.9 ns |  21.98 ns |  23.52 ns |   578.2 ns |   560.3 ns |   641.4 ns |  6.2490 |       - |      - |      1 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |   1000 |  False | 1,189.7 ns |  23.07 ns |  21.58 ns | 1,194.1 ns | 1,153.3 ns | 1,238.0 ns | 12.3433 |       - |      - |   1.98 KB |\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |   1000 |   True |   356.9 ns |   4.14 ns |   3.87 ns |   356.9 ns |   349.5 ns |   362.9 ns |  1.9396 |  1.9396 | 0.3244 |      1 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |   1000 |   True |   535.5 ns |  17.27 ns |  19.89 ns |   533.8 ns |   505.7 ns |   575.0 ns |  3.8257 |  3.8257 | 0.6394 |   1.98 KB |\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |  10000 |  False | 5,174.0 ns | 100.51 ns |  98.72 ns | 5,149.5 ns | 5,060.3 ns | 5,379.8 ns | 57.1254 |  2.0353 |      - |   9.79 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |  10000 |  False | 5,411.1 ns | 135.97 ns | 151.14 ns | 5,351.5 ns | 5,211.1 ns | 5,692.5 ns | 57.2404 |  3.8174 |      - |  19.55 KB |\r\n| Perf_GC\u003cByte\u003e | AllocateUninitializedArray |  10000 |   True | 2,052.9 ns |  45.34 ns |  52.22 ns | 2,058.8 ns | 1,974.3 ns | 2,177.5 ns | 18.7315 | 18.7315 | 3.1286 |   9.79 KB |\r\n| Perf_GC\u003cChar\u003e | AllocateUninitializedArray |  10000 |   True | 3,935.5 ns |  63.14 ns |  59.06 ns | 3,921.6 ns | 3,871.0 ns | 4,079.2 ns | 36.6549 | 36.6549 | 6.1220 |  19.56 KB |\r\n",
                                           "updatedAt":  "2022-08-10T01:25:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MQzt2",
                                           "createdAt":  "2022-10-14T21:14:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Here are the results from the 6.0 vs 7.0-rc2 report, we will tag this as \"Under investigation\" in the report.\r\n\r\n\u003cdetails\u003e\r\n\r\n## System.Tests.Perf_GC\u003cChar\u003e.AllocateUninitializedArray(length: 10000, pinned: True)\r\n\r\n| Result | Ratio | Alloc Delta | Operating System    | Bit   | Processor Name                                | Modality|\r\n| ------ | -----:| -----------:| ------------------- | ----- | --------------------------------------------- | -------- |\r\n| Same   |  0.97 |          +0 | ubuntu 18.04        | Arm64 | Unknown processor                             |         |\r\n| Same   |  0.97 |          +0 | Windows 11          | Arm64 | Unknown processor                             |         |\r\n| Slower |  0.85 |          +0 | Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |         |\r\n| Slower |  0.81 |          +0 | Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |         |\r\n| Same   |  0.98 |          +0 | macOS Monterey 12.6 | Arm64 | Apple M1                                      |         |\r\n| Slower |  0.85 |          +0 | macOS Monterey 12.6 | Arm64 | Apple M1 Max                                  |         |\r\n| Slower |  0.71 |          +0 | Windows 10          | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |         |\r\n| Same   |  0.99 |          +0 | Windows 11          | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores    |         |\r\n| Slower |  0.90 |          +0 | Windows 11          | X64   | AMD Ryzen 9 5900X                             |         |\r\n| Same   |  0.92 |          +0 | Windows 11          | X64   | AMD Ryzen 9 7950X                             |         |\r\n| Slower |  0.81 |          -1 | Windows 11          | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |         |\r\n| Same   |  0.96 |          +0 | debian 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |         |\r\n| Same   |  0.98 |          +0 | ubuntu 18.04        | X64   | AMD Ryzen 9 5900X                             |         |\r\n| Same   |  0.96 |          +0 | ubuntu 18.04        | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |         |\r\n| Same   |  0.95 |          +0 | ubuntu 20.04        | X64   | AMD Ryzen 9 5900X                             |         |\r\n| Slower |  0.67 |          -1 | ubuntu 20.04        | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |         |\r\n| Same   |  0.94 |          +0 | ubuntu 20.04        | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  | several?|\r\n| Slower |  0.27 |          -1 | macOS Big Sur 11.7  | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)     |         |\r\n| Same   |  0.95 |          +0 | macOS Monterey 12.6 | X64   | Intel Core i7-4870HQ CPU 2.50GHz (Haswell)    |         |\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateUninitializedArray(length: 10000, pinned: True)\r\n\r\n| Result | Ratio | Alloc Delta | Operating System    | Bit   | Processor Name                                | Modality|\r\n| ------ | -----:| -----------:| ------------------- | ----- | --------------------------------------------- | --------:|\r\n| Same   |  0.93 |          +0 | ubuntu 18.04        | Arm64 | Unknown processor                             |         |\r\n| Same   |  0.99 |          +0 | Windows 11          | Arm64 | Unknown processor                             |         |\r\n| Slower |  0.82 |          +0 | Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |         |\r\n| Slower |  0.81 |          +0 | Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |         |\r\n| Same   |  1.03 |          +0 | macOS Monterey 12.6 | Arm64 | Apple M1                                      |         |\r\n| Same   |  0.89 |          +0 | macOS Monterey 12.6 | Arm64 | Apple M1 Max                                  |         |\r\n| Slower |  0.72 |          +0 | Windows 10          | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |         |\r\n| Same   |  0.97 |          +0 | Windows 11          | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores    |         |\r\n| Same   |  0.92 |          +0 | Windows 11          | X64   | AMD Ryzen 9 5900X                             |         |\r\n| Same   |  0.93 |          +0 | Windows 11          | X64   | AMD Ryzen 9 7950X                             |         |\r\n| Slower |  0.82 |          +0 | Windows 11          | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |         |\r\n| Same   |  0.92 |          +0 | debian 11           | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |         |\r\n| Same   |  0.99 |          +0 | ubuntu 18.04        | X64   | AMD Ryzen 9 5900X                             |         |\r\n| Same   |  0.93 |          +0 | ubuntu 18.04        | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |         |\r\n| Same   |  0.90 |          +0 | ubuntu 20.04        | X64   | AMD Ryzen 9 5900X                             |         |\r\n| Slower |  0.47 |          +1 | ubuntu 20.04        | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |         |\r\n| Same   |  0.90 |          +0 | ubuntu 20.04        | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)  |         |\r\n| Slower |  0.32 |          +0 | macOS Big Sur 11.7  | X64   | Intel Core i5-4278U CPU 2.60GHz (Haswell)     |         |\r\n| Same   |  0.92 |          +0 | macOS Monterey 12.6 | X64   | Intel Core i7-4870HQ CPU 2.50GHz (Haswell)    |         |\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-14T21:14:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PwTrg",
                                           "createdAt":  "2022-12-05T19:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "Here are the results from the 7.0 vs 6.0 report confirming the regression.\r\n\r\n\u003cdetails\u003e\r\n\r\n## System.Tests.Perf_GC\u003cByte\u003e.AllocateUninitializedArray(length: 10000, pinned: True)\r\n\r\n| Result | Ratio | Alloc Delta | Operating System    | Bit   | Processor Name                                | Modality|\r\n| ------ | -----:| -----------:| ------------------- | ----- | --------------------------------------------- | --------:|\r\n| Slower |  0.51 |          +0 | Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |         |\r\n| Same   |  1.04 |          +1 | macOS 13.0          | Arm64 | Apple M1                                      |         |\r\n| Slower |  0.53 |          +0 | Windows 10          | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |         |\r\n| Slower |  0.85 |          +0 | Windows 10          | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)   |         |\r\n| Slower |  0.78 |          +0 | Windows 10          | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |         |\r\n| Same   |  1.00 |          +0 | Windows 11          | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores    |         |\r\n| Same   |  0.92 |          +0 | Windows 11          | X64   | 11th Gen Intel Core i9-11900 2.50GHz          |         |\r\n| Same   |  0.92 |          +0 | ubuntu 18.04        | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |         |\r\n| Same   |  1.04 |          +0 | raspbian 11         | Arm   | ARMv7 Processor rev 3 (v7l)                   |         |\r\n| Slower |  0.90 |          +0 | macOS Monterey 12.6 | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)   |         |\r\n\r\n## System.Tests.Perf_GC\u003cChar\u003e.AllocateUninitializedArray(length: 10000, pinned: True)\r\n\r\n| Result | Ratio | Alloc Delta | Operating System    | Bit   | Processor Name                                | Modality|\r\n| ------ | -----:| -----------:| ------------------- | ----- | --------------------------------------------- | --------:|\r\n| Slower |  0.49 |          +0 | Windows 11          | Arm64 | Microsoft SQ1 3.0 GHz                         |         |\r\n| Same   |  0.98 |          +0 | macOS 13.0          | Arm64 | Apple M1                                      |         |\r\n| Slower |  0.49 |          +0 | Windows 10          | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |         |\r\n| Slower |  0.86 |          +0 | Windows 10          | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)   |         |\r\n| Slower |  0.73 |          -2 | Windows 10          | X64   | Intel Core i7-8650U CPU 1.90GHz (Kaby Lake R) |         |\r\n| Same   |  1.01 |          +0 | Windows 11          | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores    |         |\r\n| Same   |  0.94 |          +0 | Windows 11          | X64   | 11th Gen Intel Core i9-11900 2.50GHz          |         |\r\n| Same   |  0.91 |          +0 | ubuntu 18.04        | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz             |         |\r\n| Same   |  1.03 |          +0 | raspbian 11         | Arm   | ARMv7 Processor rev 3 (v7l)                   |         |\r\n| Same   |  0.97 |          +0 | macOS Monterey 12.6 | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)   |         |\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-05T19:45:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jUauU",
                                           "createdAt":  "2023-08-05T00:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Closing in lieu of https://github.com/dotnet/runtime/issues/73592",
                                           "updatedAt":  "2023-08-05T00:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lPPUT",
                                           "createdAt":  "2023-08-30T04:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Reopening to test this thoroughly on MacOS. ",
                                           "updatedAt":  "2023-08-30T04:58:33Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "GC.AllocateUninitializedArray has regressed on macOS",
        "labels":  [
                       "os-mac-os-x",
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65850",
        "createdAt":  "2022-02-24T15:11:38Z",
        "number":  65850,
        "author":  "gbalykov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJDSIQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jure-BB",
                                            "createdAt":  "2023-09-21T12:03:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ProTip",
                                            "createdAt":  "2023-09-22T08:22:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "goncalo",
                                            "createdAt":  "2023-09-22T15:47:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yunusefendi52",
                                            "createdAt":  "2024-01-02T07:21:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2024-02-29T13:49:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mogud",
                                            "createdAt":  "2024-05-22T12:21:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "h372034701",
                                            "createdAt":  "2024-05-22T12:24:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sgf",
                                            "createdAt":  "2024-06-08T07:54:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2024-06-12T10:36:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frooxius",
                                            "createdAt":  "2025-05-13T20:14:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dawidkomorowski",
                                            "createdAt":  "2025-07-29T22:30:06Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2025-05-09T03:01:47Z",
        "body":  "We are investigating GC pause time in order to potentially achieve 60 fps, but we observe long GC EE suspend pauses.\r\n\r\nFor example, on next benchmark max GC pause on arm64(rpi4) can get as high as 55 ms with default GC setup (i.e. default latency mode, default max gen0/gen1 size). This is a huge pause, because 1 frame in 60 fps mode should fit in ~16 ms.\r\n\r\nSome details:\r\n- GC pause time is computed as diff between `GCRestartEEEnd` and `GCSuspendEEBegin` events\r\n- `SustainedLowLatency` mode doesn\u0027t improve max GC pause time\r\n- `LowLatency` mode reduces max GC pause time, but max RSS increases signigicantly (on benchmark above ~10x increase in max RSS)\r\n- different values of `COMPlus_GCGen0MaxBudget` and `COMPlus_GCGen1MaxBudget` do not improve max GC pause time\r\n\r\nAdditionally, we\u0027ve found the next measurements on coreclr/mono and results are pretty much the same: https://gist.github.com/jechter/2730225240163a806fcc15c44c5ac2d6.\r\n\r\nAre there any plans to support GC mode with limited pause time?\r\n\r\n```c#\r\nusing System;\r\nusing System.Threading;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics.Tracing;\r\n\r\nnamespace gctest2\r\n{\r\n    class Test\r\n    {\r\n        static void Main()\r\n        {\r\n            GCEventListener.Start();\r\n            Test t = new Test();\r\n            t.mGCTest();\r\n        }\r\n\r\n        struct Log\r\n        {\r\n            public String log;\r\n        }\r\n\r\n        private static char[] base_string =  \"GC  TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST COUNT\".ToCharArray();\r\n\r\n        public void mGCTest()\r\n        {\r\n            int count = 0;\r\n            int max = 102400;\r\n            \r\n            List\u003cLog\u003e list = new List\u003cLog\u003e();\r\n\r\n            for (int index1 = 0; index1 \u003c 2000; ++index1)\r\n\t\t\t{\r\n\t\t\t\tfor (int index2 = 0; index2 \u003c 1000; ++index2)\r\n\t\t\t\t{\r\n\t\t\t\t\tString sd = $\"GC  TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST COUNT {count} / {max}\";\r\n\t\t\t\t\tLog log = new Log();\r\n\t\t\t\t\tlog.log = sd;\r\n\t\t\t\t\tlist.Add(log);\r\n\r\n\t\t\t\t\tif (list.Count == max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile (list.Count \u003e 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlist.RemoveAt(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }\r\n\r\n    public sealed class GCEventListener : EventListener\r\n    {\r\n        private static GCEventListener instance = null;\r\n        private long timeGCStart = 0;\r\n        private bool verbose = false;\r\n\r\n        private GCEventListener()\r\n        {\r\n            Console.WriteLine(\"GCEventListener Created\");\r\n        }\r\n\r\n        public static void Start(bool verbose = false)\r\n        {\r\n            if(instance == null)\r\n                instance = new GCEventListener();\r\n        }\r\n\r\n        // Called whenever an EventSource is created.\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            // Watch for the .NET runtime EventSource and enable all of its events.\r\n            if (eventSource.Name.Equals(\"Microsoft-Windows-DotNETRuntime\"))\r\n            {\r\n                EnableEvents(eventSource, EventLevel.Informational, (EventKeywords)0x1);\r\n            }\r\n        }\r\n\r\n        private void PrintEventData(EventWrittenEventArgs eventData)\r\n        {\r\n            Console.WriteLine($\"ThreadID = {eventData.OSThreadId} ID = {eventData.EventId} Name = {eventData.EventName} Tick = {eventData.TimeStamp.Ticks/10.0/1000.0}\");\r\n\r\n            for (var i = 0; i \u003c eventData.Payload.Count; i++)\r\n            {\r\n                string payloadString = eventData.Payload[i] != null ? eventData.Payload[i].ToString() : string.Empty;\r\n                Console.WriteLine($\"\\tName = \\\"{eventData.PayloadNames[i]}\\\" Value = \\\"{payloadString}\\\"\");\r\n            }\r\n\r\n            Console.WriteLine(\"\\n\");\r\n        }\r\n\r\n        // Called whenever an event is written.\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n\t\t\tPrintEventData(eventData);\r\n            if (eventData.EventName.Contains(\"Concurrent\"))\r\n            {\r\n                PrintEventData(eventData);\r\n            }\r\n            else if (eventData.EventName.Contains(\"GCStart\"))\r\n            {\r\n                timeGCStart = eventData.TimeStamp.Ticks;\r\n                //PrintEventData(eventData);\r\n            }\r\n            else if (eventData.EventName.Contains(\"GCEnd\"))\r\n            {\r\n                long timeGCEnd = eventData.TimeStamp.Ticks;\r\n                long gcIndex = long.Parse(eventData.Payload[0].ToString());\r\n                Console.WriteLine(\"GC#{0} took {1:f3}ms for generation {2}\", gcIndex, (double) (timeGCEnd - timeGCStart)/10.0/1000.0, eventData.Payload[1]);\r\n                //PrintEventData(eventData);\r\n            }\r\n        }\r\n\t}\r\n}\r\n```\r\n\r\ncc @alpencolt @jkotas",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqsOrQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-lRie",
                                           "createdAt":  "2022-02-24T15:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-24T15:11:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-lbB4",
                                           "createdAt":  "2022-02-24T15:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe are investigating GC pause time in order to potentially achieve 60 fps, but we observe long GC EE suspend pauses.\r\n\r\nFor example, on next benchmark max GC pause on arm64(rpi4) can get as high as 55 ms with default GC setup (i.e. default latency mode, default max gen0/gen1 size). This is a huge pause, because 1 frame in 60 fps mode should fit in ~16 ms.\r\n\r\nSome details:\r\n- GC pause time is computed as diff between `GCRestartEEEnd` and `GCSuspendEEBegin` events\r\n- `SustainedLowLatency` mode doesn\u0027t improve max GC pause time\r\n- `LowLatency` mode reduces max GC pause time, but max RSS increases signigicantly (on benchmark above ~10x increase in max RSS)\r\n- different values of `COMPlus_GCGen0MaxBudget` and `COMPlus_GCGen1MaxBudget` do not improve max GC pause time\r\n\r\nAdditionally, we\u0027ve found the next measurements on coreclr/mono and results are pretty much the same: https://gist.github.com/jechter/2730225240163a806fcc15c44c5ac2d6.\r\n\r\nAre there any plans to support GC mode with limited pause time?\r\n\r\n```c#\r\nusing System;\r\nusing System.Threading;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics.Tracing;\r\n\r\nnamespace gctest2\r\n{\r\n    class Test\r\n    {\r\n        static void Main()\r\n        {\r\n            GCEventListener.Start();\r\n            Test t = new Test();\r\n            t.mGCTest();\r\n        }\r\n\r\n        struct Log\r\n        {\r\n            public String log;\r\n        }\r\n\r\n        private static char[] base_string =  \"GC  TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST COUNT\".ToCharArray();\r\n\r\n        public void mGCTest()\r\n        {\r\n            int count = 0;\r\n            int max = 102400;\r\n            \r\n            List\u003cLog\u003e list = new List\u003cLog\u003e();\r\n\r\n            for (int index1 = 0; index1 \u003c 2000; ++index1)\r\n\t\t\t{\r\n\t\t\t\tfor (int index2 = 0; index2 \u003c 1000; ++index2)\r\n\t\t\t\t{\r\n\t\t\t\t\tString sd = $\"GC  TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST COUNT {count} / {max}\";\r\n\t\t\t\t\tLog log = new Log();\r\n\t\t\t\t\tlog.log = sd;\r\n\t\t\t\t\tlist.Add(log);\r\n\r\n\t\t\t\t\tif (list.Count == max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile (list.Count \u003e 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlist.RemoveAt(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n            }\r\n        }\r\n    }\r\n\r\n    public sealed class GCEventListener : EventListener\r\n    {\r\n        private static GCEventListener instance = null;\r\n        private long timeGCStart = 0;\r\n        private bool verbose = false;\r\n\r\n        private GCEventListener()\r\n        {\r\n            Console.WriteLine(\"GCEventListener Created\");\r\n        }\r\n\r\n        public static void Start(bool verbose = false)\r\n        {\r\n            if(instance == null)\r\n                instance = new GCEventListener();\r\n        }\r\n\r\n        // Called whenever an EventSource is created.\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            // Watch for the .NET runtime EventSource and enable all of its events.\r\n            if (eventSource.Name.Equals(\"Microsoft-Windows-DotNETRuntime\"))\r\n            {\r\n                EnableEvents(eventSource, EventLevel.Informational, (EventKeywords)0x1);\r\n            }\r\n        }\r\n\r\n        private void PrintEventData(EventWrittenEventArgs eventData)\r\n        {\r\n            Console.WriteLine($\"ThreadID = {eventData.OSThreadId} ID = {eventData.EventId} Name = {eventData.EventName} Tick = {eventData.TimeStamp.Ticks/10.0/1000.0}\");\r\n\r\n            for (var i = 0; i \u003c eventData.Payload.Count; i++)\r\n            {\r\n                string payloadString = eventData.Payload[i] != null ? eventData.Payload[i].ToString() : string.Empty;\r\n                Console.WriteLine($\"\\tName = \\\"{eventData.PayloadNames[i]}\\\" Value = \\\"{payloadString}\\\"\");\r\n            }\r\n\r\n            Console.WriteLine(\"\\n\");\r\n        }\r\n\r\n        // Called whenever an event is written.\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n\t\t\tPrintEventData(eventData);\r\n            if (eventData.EventName.Contains(\"Concurrent\"))\r\n            {\r\n                PrintEventData(eventData);\r\n            }\r\n            else if (eventData.EventName.Contains(\"GCStart\"))\r\n            {\r\n                timeGCStart = eventData.TimeStamp.Ticks;\r\n                //PrintEventData(eventData);\r\n            }\r\n            else if (eventData.EventName.Contains(\"GCEnd\"))\r\n            {\r\n                long timeGCEnd = eventData.TimeStamp.Ticks;\r\n                long gcIndex = long.Parse(eventData.Payload[0].ToString());\r\n                Console.WriteLine(\"GC#{0} took {1:f3}ms for generation {2}\", gcIndex, (double) (timeGCEnd - timeGCStart)/10.0/1000.0, eventData.Payload[1]);\r\n                //PrintEventData(eventData);\r\n            }\r\n        }\r\n\t}\r\n}\r\n```\r\n\r\ncc @alpencolt @jkotas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egbalykov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-24T15:51:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-leA-",
                                           "createdAt":  "2022-02-24T16:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The current CoreCLR GC does not have guaranteed upper bound on the pause times. The pause times can the significant if the application creates patterns unfriendly to generational GC like long linked list or a lot of Gen2 -\u003e Gen0 references. \r\n\r\nHave you analyzed where the time is spent in the GC for this microbenchmark? Looking at the microbenchmark code, I think large number of Gen2 -\u003e Gen0 references may be contributing be the significant pause times.\r\n\r\n\u003e Are there any plans to support GC mode with limited pause time?\r\n\r\nI am not aware of plans to build a GC mode with max pause time that is guaranteed even when the application uses patterns that are unfriendly to GC. It would likely need to be a very different GC from what we have today. I think we would be happy to accept a GC implementation like that into dotnet/runtime if somebody builds it.",
                                           "updatedAt":  "2022-02-24T16:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-lnCV",
                                           "createdAt":  "2022-02-24T16:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e different values of COMPlus_GCGen0MaxBudget and COMPlus_GCGen1MaxBudget do not improve max GC pause time\r\n\r\nweird, I\u0027d expect smaller gen0 to lead to more frequent GCs but smaller pauses overall (disclaimer: not a gc expert)\r\nHowever, due to the L3 issue I assume the default Gen0 for your Pi4 is already set to some really small value like 256kb (see https://github.com/dotnet/runtime/pull/64645). Have you tried to play with `DOTNET_GCgen0size=` instead? (just in case - these config switches accept numbers in HEX format)\r\n",
                                           "updatedAt":  "2022-02-24T16:42:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-l40d",
                                           "createdAt":  "2022-02-24T18:04:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPCeIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2022-02-24T18:24:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaveyWood",
                                                                               "createdAt":  "2023-12-09T17:40:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e weird, I\u0027d expect smaller gen0 to lead to more frequent GCs but smaller pauses overall (disclaimer: not a gc expert)\r\n\r\nThat\u0027s true only for programs that behave according to the simplifying assumptions that the generational GC designs are based on. The example above violates these simplifying assumptions. It ends up with a large Gen2 array that has to be scanned by Gen0 GC every time since it may contain Gen0 back references.\r\n\r\nHere is a simpler example that amplifies the problem. It has Gen0 GC pause times around 0.3 seconds on my desktop machine. Changing the Gen0 budged does not have affect on the GC pause times.\r\n```\r\nobject[] a = new object[100_000_000];\r\n\r\nfor (;;)\r\n{\r\n    // Create a lot of Gen2 -\u003e Gen0 references to keep the GC busy\r\n    object o = new object();\r\n    for (int i = 0; i \u003c a.Length; i++)\r\n    {\r\n        a[i] = o;\r\n    }\r\n    // Create a lot of short lived objects to trigger Gen0 GC\r\n    for (int i = 0; i \u003c 1000; i++)\r\n    {\r\n        GC.KeepAlive(new string(\u0027a\u0027, 10000));\r\n    }\r\n}\r\n```\r\n\r\nBTW: It is not unusual to see these kind of anti-patterns in \"high-performance\" code that tries to cache and reuse data structures to \"save\" the GC work.",
                                           "updatedAt":  "2022-02-24T18:05:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-nbml",
                                           "createdAt":  "2022-02-25T05:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODlAIIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2022-02-25T05:05:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alpencolt",
                                                                               "createdAt":  "2022-02-25T09:33:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gbalykov",
                                                                               "createdAt":  "2022-02-25T09:35:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2022-02-25T09:54:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2022-02-25T10:51:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HJLeee",
                                                                               "createdAt":  "2022-03-04T01:06:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2022-07-16T03:04:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-11-16T21:53:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "russpowers",
                                                                               "createdAt":  "2023-01-17T07:45:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2023-09-04T14:14:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahdikshk",
                                                                               "createdAt":  "2024-02-02T07:22:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2024-04-12T03:20:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "h372034701",
                                                                               "createdAt":  "2024-05-22T12:24:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sgf",
                                                                               "createdAt":  "2024-06-08T07:55:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "before we provide soft real time guarantee (which is a lot of work as you can imagine), I was actually thinking of provide a mode for our GC with no generations just for workloads with no generational behavior at all. so every GC is a full GC. I hacked up a version to do this tonight 😄 with @jkotas\u0027s code I get this \r\n\r\n![comparison](https://user-images.githubusercontent.com/10837357/155655959-157aa21f-c5cb-44b9-8952-2efa2ecb4a70.jpg)\r\n \r\nthe pause time in single gen is actually very tiny, but there\u0027s one BGC that has that max pause which made the avg pause 8.1ms instead of \u003c 1ms - \r\n\r\n![image](https://user-images.githubusercontent.com/10837357/155656651-cf1cce03-bd96-4920-b886-e317a46126e7.png)\r\n\r\nwhat I have right now is very hacky. but if anyone is interested, I can see if I could get some time in the not too distant future make it reasonable quality to become an experimental feature (ie, can be turned on with a config).",
                                           "updatedAt":  "2022-02-25T05:02:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-nh-u",
                                           "createdAt":  "2022-02-25T05:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "GC pause time should be related to the CPU power. On PC processor, getting 600fps with SubstainedLowLatency is achievable.\r\nAnyway, reducing GC pressure should be beneficial.",
                                           "updatedAt":  "2022-02-25T05:57:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-oDgu",
                                           "createdAt":  "2022-02-25T09:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "Thanks for all the answers! Benchmark that I was testing is a sample GC stress test benchmark and I agree that it may not represent optimized behavior in terms of GC, but we wanted to see how GC behaves in this mode too.\r\n\r\n\u003e Have you tried to play with DOTNET_GCgen0size= instead?\r\n\r\nI\u0027ve only tested different values of `gen0_max_size` and `gen1_max_size` (with which `static_data_table[i]` is filled), and on rpi4 `gen0_min_size=min(1Mb, gen0_max_size)`. Also I\u0027ve been testing from `COMPlus_GCGen0MaxBudget=10000` (64 Kb) to `COMPlus_GCGen0MaxBudget=10000000` (256 Mb) with some step, and max GC pause time varies but always stays above ~30 ms.\r\n\r\n\u003e I\u0027d expect smaller gen0 to lead to more frequent GCs but smaller pauses overall\r\n\r\nThis is true that average GC pause reduces significantly (to ~1-2ms with `COMPlus_GCGen0MaxBudget=10000`) and frequency of GCs increases significantly (more than x100), but max GC pause time still remains above ~30 ms.\r\n\r\n\u003e what I have right now is very hacky. but if anyone is interested, I can see if I could get some time in the not too distant future make it reasonable quality to become an experimental feature (ie, can be turned on with a config).\r\n\r\n@Maoni0 This looks very interesting, can you share more details on how to make this hack myself or maybe even patch, so that I can experiment with it?",
                                           "updatedAt":  "2022-02-25T09:31:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-pkbc",
                                           "createdAt":  "2022-02-25T18:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@gbalykov I need to do a bit more work on it - if I can get some time to work on this next week I\u0027ll give you a commit to try.",
                                           "updatedAt":  "2022-02-25T18:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-pmh4",
                                           "createdAt":  "2022-02-25T18:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@gbalykov also for the occasional long pause you are seeing right now, I would suggest 2 things - \r\n\r\ndoes it show that the Promote MB is also high for those GCS? if so could you please try the [generation aware analysis](https://cshung.github.io/posts/generation-aware-analysis/) that we introduced in .NET 5? it would help us figure out what\u0027s causing the more promoted bytes. \r\n\r\nif the Promoted is the same yet the GC time is longer, you could also capture a trace with CPU samples with perfview if you are on windows. I have a commandline in [mem-doc](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md) (search for `StopOnGCOverMSec`).",
                                           "updatedAt":  "2022-02-25T18:28:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-1OU6",
                                           "createdAt":  "2022-02-28T11:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "On the benchmark that I\u0027ve shared above `TotalPromotedSize0`, `TotalPromotedSize1` and `TotalPromotedSize2` can get quite large, however, `TotalPromotedSize0` is large almost for all GCs, even with small pauses. As far as I can tell large pauses mostly come from large `TotalPromotedSize1` and `TotalPromotedSize2`. I think that @jkotas is right that this benchmark is GC unfriendly. I\u0027ll try to check generation aware analysis, thanks.",
                                           "updatedAt":  "2022-02-28T11:04:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GpbME",
                                           "createdAt":  "2022-07-15T07:34:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smoogipoo",
                                           "body":  "Also going to link https://github.com/dotnet/runtime/issues/48937 here, where we\u0027ve experienced Gen1 collection times greater than the 16ms window of 60fps, which is a bare minimum for us.\r\n\r\nIn my testing there, we didn\u0027t see what I would consider a \"large amount\" of promotion: https://user-images.githubusercontent.com/1329837/118099109-c0f93a00-b40f-11eb-80ae-db3ccf4a39a0.png as what\u0027s shown in this issue. I\u0027ve forgotten how many times I\u0027ve read through @Maoni0 \u0027s GC doc all to come to the conclusion that we\u0027re not doing anything out of the ordinary.\r\n\r\n\u003e I was actually thinking of provide a mode for our GC with no generations just for workloads with no generational behavior at all\r\n\r\nI would also be very interested and am willing to test this even off the `main` branch. ",
                                           "updatedAt":  "2022-07-15T07:34:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kh6MG",
                                           "createdAt":  "2022-09-18T22:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aaron-manning",
                                           "body":  "+1\r\n\r\nThe lack of a low-latency GC option makes C#/F# sub-optimal for low-latency projects, eg high-frequency-trading.\r\nSeems like a big hole in an otherwise great runtime.",
                                           "updatedAt":  "2022-09-18T22:46:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OfRoU",
                                           "createdAt":  "2022-11-16T11:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@Maoni0 did you have a chance to work on GC with no generations?",
                                           "updatedAt":  "2022-11-16T11:08:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OiqL7",
                                           "createdAt":  "2022-11-16T21:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I did, but only a little bit :( I got it to kind of run but clearly there were bugs. I\u0027m hoping to get more time to work on this now that we finished .net 7. this seems like a good project for the holidays...",
                                           "updatedAt":  "2022-11-16T21:44:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TrNwb",
                                           "createdAt":  "2023-01-25T15:55:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roozbehid",
                                           "body":  "+1\r\n\r\nI also need a consistent 20ms processing and was doing a research on if it is achievable with c# or not.\r\nIt seems it is not yet. Hopefully. Net 8!",
                                           "updatedAt":  "2023-01-25T15:55:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h-Nph",
                                           "createdAt":  "2023-07-20T10:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gbalykov",
                                           "body":  "@Maoni0 hi, did you have a chance to continue your work on GC with no generations?",
                                           "updatedAt":  "2023-07-20T10:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lpZeK",
                                           "createdAt":  "2023-09-04T14:19:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYTHcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jure-BB",
                                                                               "createdAt":  "2023-09-21T12:12:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahdikshk",
                                                                               "createdAt":  "2024-02-10T10:32:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hiyelbaz",
                                                                               "createdAt":  "2024-02-26T18:11:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "Adding another voice, I am currently developing a latency sensitive application and I\u0027m also interested in the above discussion of a generationless GC as a potential option.",
                                           "updatedAt":  "2023-09-04T14:19:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ob4M1",
                                           "createdAt":  "2023-10-08T19:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yen",
                                           "body":  "Not experienced with the inner workings of GCs and can\u0027t talk to the complexities to such an approach, but I would like a way to have more control over the GC without requiring hard guarantees. I am building a UI platform (not a game engine where a dropped frame is the end of the world) and would like to have ways to potentially help avoid large GC pauses if I can instead perform smaller ones more often. For example, a call to `GC.Collect` with a target max duration would seem like an idea API for these scenarios where I can calculate through runtime heuristics how long I have free before a next frame might want to be displayed, and as such I can tell the garbage collector it has some time to do anything it might want to. I understand there is a lot going on in a full GC pause that can\u0027t be easily broken up, and as such for something like a game engine solving this is hard, but having the option get some smaller bits done when I know there is time to do so, in hopes that it would make a full GC pause slightly less regular, would be a nice to have for any user interaction dependent workload.\r\n\r\nI am aware that this is a difficult problem to solve and, in many ways, goes against the point of the GC to try make it do things it doesn\u0027t want to do \"optimally\" from the GCs perspective. However, I think providing more primitives, even if it\u0027s easy to misuse them, that allow a developer in a high-performance scenario to dictate information to the garbage collector in hopes of avoiding a large GC pause would be appreciated.",
                                           "updatedAt":  "2023-10-08T19:20:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53Y6JT",
                                           "createdAt":  "2024-03-18T06:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERcuNg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HJLeee",
                                                                               "createdAt":  "2024-03-18T07:40:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahdikshk",
                                                                               "createdAt":  "2024-03-18T15:27:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hiyelbaz",
                                                                               "createdAt":  "2024-03-18T20:42:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2024-04-02T11:54:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "InCerryGit",
                                                                               "createdAt":  "2024-04-12T03:20:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Giorgi",
                                                                               "createdAt":  "2024-04-21T18:08:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2024-10-01T23:16:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wscho77",
                                                                               "createdAt":  "2024-12-11T02:53:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TickThunder",
                                                                               "createdAt":  "2025-05-09T08:11:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "denis-paranichev",
                                           "body":  "Hi, @Maoni0, did you have a chance to continue your work on generationless GC?",
                                           "updatedAt":  "2024-03-18T06:26:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qss4F",
                                           "createdAt":  "2025-05-08T17:58:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERaZfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2025-05-08T18:50:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2025-05-09T01:25:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "VSadov",
                                           "body":  "\u003e \u003e weird, I\u0027d expect smaller gen0 to lead to more frequent GCs but smaller pauses overall (disclaimer: not a gc expert)\n\u003e \n\u003e That\u0027s true only for programs that behave according to the simplifying assumptions that the generational GC designs are based on. The example above violates these simplifying assumptions. It ends up with a large Gen2 array that has to be scanned by Gen0 GC every time since it may contain Gen0 back references.\n\u003e \n\u003e Here is a simpler example that amplifies the problem. It has Gen0 GC pause times around 0.3 seconds on my desktop machine. Changing the Gen0 budged does not have affect on the GC pause times.\n\u003e \n\u003e ```\n\u003e object[] a = new object[100_000_000];\n\u003e \n\u003e for (;;)\n\u003e {\n\u003e     // Create a lot of Gen2 -\u003e Gen0 references to keep the GC busy\n\u003e     object o = new object();\n\u003e     for (int i = 0; i \u003c a.Length; i++)\n\u003e     {\n\u003e         a[i] = o;\n\u003e     }\n\u003e     // Create a lot of short lived objects to trigger Gen0 GC\n\u003e     for (int i = 0; i \u003c 1000; i++)\n\u003e     {\n\u003e         GC.KeepAlive(new string(\u0027a\u0027, 10000));\n\u003e     }\n\u003e }\n\u003e ```\n\u003e \n\u003e BTW: It is not unusual to see these kind of anti-patterns in \"high-performance\" code that tries to cache and reuse data structures to \"save\" the GC work.\n\nThis was referenced from a different issue (https://github.com/dotnet/runtime/issues/96213), so I tried the scneario with [Satori](https://github.com/dotnet/runtime/issues/96213#issuecomment-2847600740).\n\nI see what the sample tries to achieve (deliberately trashes cards from a no-allocations code path while concurrent GC is in progress). I think it could become a problem in huge quantities, but GC should be able to handle some degree of abuse.\n\nI\u0027ve added pause instrumentation and the following code to force Gen1, because all-Gen0 is too easy.  \n\n```cs\n                var obj = new string(\u0027a\u0027, 10000);\n                GC.KeepAlive(obj);\n\n                // force the obj into gen1, we know that Gen0 are fast.\n                a[0] = new string(\u0027a\u0027, 10000);\n```\n\nWith Satori in default mode I see:  \n(on win-x64 \\w ryzen 5950X):\n\n```\nGCEventListener Created\nGC#1 took 16.692ms for generation 2\nGC#2 took 15.459ms for generation 2\nGC#3 took 0.139ms for generation 1\nGC#4 took 0.077ms for generation 1\nGC#5 took 0.076ms for generation 1\nGC#6 took 0.107ms for generation 1\nGC#7 took 0.114ms for generation 1\nGC#8 took 0.089ms for generation 1\nGC#9 took 0.086ms for generation 1\nGC#10 took 0.092ms for generation 1\n. . . \n. . .\nGC#100 took 0.098ms for generation 1\nGC#101 took 0.118ms for generation 1\nGC#102 took 0.109ms for generation 1\nGC#103 took 0.086ms for generation 1\nGC#104 took 0.095ms for generation 1\nGC#105 took 0.110ms for generation 1\nGC#106 took 0.104ms for generation 1\nGC#107 took 0.116ms for generation 1\nGC#108 took 0.143ms for generation 1\n```\n\nWith `set DOTNET_GCLatencyMode=3`\n\n```\nGCEventListener Created\nGC#1 took 0.189ms for generation 2\nGC#2 took 0.094ms for generation 2\nGC#3 took 0.156ms for generation 1\nGC#4 took 0.096ms for generation 1\nGC#5 took 0.116ms for generation 1\nGC#6 took 0.103ms for generation 1\nGC#7 took 0.064ms for generation 1\nGC#8 took 0.094ms for generation 1\nGC#9 took 0.112ms for generation 1\n. . .\n. . .\n```\nAnd with `a[0] = new string(\u0027a\u0027, 10000);`   commented out\n(NOTE: GCs under 10 microseconds are not printed as there are too many, thus there are gaps in the sequence)\n\n```\nGCEventListener Created\nGC#1 took 0.026ms for generation 0\nGC#2 took 0.141ms for generation 2\nGC#3 took 0.014ms for generation 0\nGC#9 took 0.026ms for generation 0\nGC#19 took 0.026ms for generation 0\nGC#29 took 0.026ms for generation 0\nGC#39 took 0.030ms for generation 0\nGC#49 took 0.033ms for generation 0\nGC#52 took 0.032ms for generation 0\nGC#60 took 0.028ms for generation 0\nGC#70 took 0.029ms for generation 0\nGC#81 took 0.023ms for generation 0\nGC#91 took 0.026ms for generation 0\nGC#102 took 0.027ms for generation 0\nGC#113 took 0.033ms for generation 0\nGC#124 took 0.031ms for generation 0\nGC#135 took 0.024ms for generation 0\nGC#146 took 0.029ms for generation 0\nGC#158 took 0.033ms for generation 0\nGC#169 took 0.025ms for generation 0\n```\n\nThe full source of the benchmark:\n```cs\nusing System;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Diagnostics.Tracing;\nusing System.Collections.Concurrent;\n\nclass Program\n{\n    static void Main()\n    {\n        // System.Runtime.GCSettings.LatencyMode = System.Runtime.GCLatencyMode.LowLatency;\n\n        GCEventListener.Start();\n        Test();\n    }\n\n    public static void Test()\n    {\n        object[] a = new object[100_000_000];\n\n        for (; ; )\n        {\n            // Create a lot of Gen2 -\u003e Gen0 references to keep the GC busy\n            object o = new object();\n            for (int i = 0; i \u003c a.Length; i++)\n            {\n                a[i] = o;\n            }\n            // Create a lot of short lived objects to trigger Gen0 GC\n            for (int i = 0; i \u003c 1000; i++)\n            {\n                var obj = new string(\u0027a\u0027, 10000);\n                GC.KeepAlive(obj);\n\n                // force the obj into gen1, we know that Gen0 are fast.\n                a[0] = new string(\u0027a\u0027, 10000);\n            }\n        }\n    }\n}\n\npublic sealed class GCEventListener : EventListener\n{\n    private static GCEventListener instance = null;\n\n    private GCEventListener()\n    {\n        Console.WriteLine(\"GCEventListener Created\");\n    }\n\n    public static void Start(bool verbose = false)\n    {\n        if (instance == null)\n            instance = new GCEventListener();\n    }\n\n    // Called whenever an EventSource is created.\n    protected override void OnEventSourceCreated(EventSource eventSource)\n    {\n        // Watch for the .NET runtime EventSource and enable all of its events.\n        if (eventSource.Name.Equals(\"Microsoft-Windows-DotNETRuntime\"))\n        {\n            EnableEvents(eventSource, EventLevel.Informational, (EventKeywords)0x1);\n        }\n    }\n\n    private ConcurrentDictionary\u003cuint, long\u003e gcStarts = new ConcurrentDictionary\u003cuint, long\u003e();\n\n    // Called whenever an event is written.\n    protected override void OnEventWritten(EventWrittenEventArgs eventData)\n    {\n        if (eventData.EventName.Contains(\"GCStart\"))\n        {\n            uint gcIndex = (uint)eventData.Payload[0];\n            long timeGCStart = eventData.TimeStamp.Ticks;\n            gcStarts.TryAdd(gcIndex, timeGCStart);\n            return;\n        }\n\n        if (eventData.EventName.Contains(\"GCEnd\"))\n        {\n            uint gcIndex = (uint)eventData.Payload[0];\n\n            if (gcStarts.TryRemove(gcIndex, out var timeGCStart))\n            {\n                long timeGCEnd = eventData.TimeStamp.Ticks;\n                double pauseMsec = (double)(timeGCEnd - timeGCStart) / 10.0 / 1000.0;\n\n                // ignore too short ones, to print less\n                if (pauseMsec \u003e 0.01)\n                {\n                    Console.WriteLine(\"GC#{0} took {1:f3}ms for generation {2}\", gcIndex, pauseMsec, eventData.Payload[1]);\n                }\n            }\n        }\n    }\n}\n```\n\n\n",
                                           "updatedAt":  "2025-05-08T22:31:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qtO-m",
                                           "createdAt":  "2025-05-08T18:52:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "Those first couple of gen2s are pretty bad outliers, but it looks like the gen 1 pauses are at least consistent ~~if not slightly worse on than the traditional collector~~",
                                           "updatedAt":  "2025-05-08T19:34:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qtoGc",
                                           "createdAt":  "2025-05-08T19:37:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I think the outliers were likely compacting GCs as in default mode Satori will compact if it sees benefit in doing that. \n\nIn the next runs with low latency mode it does not compact, so no outliers.",
                                           "updatedAt":  "2025-05-08T22:26:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qt0f_",
                                           "createdAt":  "2025-05-08T20:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERZiUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VSadov",
                                                                               "createdAt":  "2025-05-08T22:23:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "I\u0027m running them locally in a few different GC modes, i\u0027ll report back with histograms",
                                           "updatedAt":  "2025-05-08T20:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qw6tA",
                                           "createdAt":  "2025-05-09T03:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "Benchmark details posted here : https://github.com/dotnet/runtime/issues/96213#issuecomment-2864948551",
                                           "updatedAt":  "2025-05-09T03:01:46Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "[Question] GC pause time is too large for 60 fps",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66699",
        "createdAt":  "2022-03-16T09:22:27Z",
        "number":  66699,
        "author":  "ChateauLaFite",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-27T08:47:24Z",
        "body":  "Our application is crashing with an access violation.  It is rare, infrequent and non-deterministic, only happened on 2 customer machines, and can take some days of the application running for the crash to occur.  Could not reproduce it on my machine with same version of clr.dll\r\n\r\n```\r\ncrashes in background_sweep()\r\nmark_through_cards_for_large_objects()\r\nsweep_large_objects()\r\nbackground_mark_simple1()\r\nrevisit_written_page()\r\n```\r\n\r\nExcerpt from 1 of the dmp files below.  Full files available on request.\r\n\r\n```\r\nCONTEXT:  (.ecxr)\r\neax=00000000 ebx=04b93c98 ecx=b14000d0 edx=00000000 esi=03cc28d8 edi=000000b0\r\neip=73bc3b75 esp=1269ea50 ebp=1269ea80 iopl=0         nv up ei ng nz na po nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010282\r\nclr!WKS::gc_heap::background_sweep+0x495:\r\n73bc3b75 f70100000080    test    dword ptr [ecx],80000000h ds:002b:b14000d0=????????\r\nResetting default scope\r\n\r\nEXCEPTION_RECORD:  (.exr -1)\r\nExceptionAddress: 73bc3b75 (clr!WKS::gc_heap::background_sweep+0x00000495)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 00000000\r\n   Parameter[1]: b14000d0\r\nAttempt to read from address b14000d0\r\n\r\n\u003cremoved\u003e\r\n\r\nSTACK_TEXT:  \r\n1269ea80 73bc2d4f 00000000 00000000 00000001 clr!WKS::gc_heap::background_sweep+0x495\r\n1269eaa0 73bc2371 73bc23f0 145de810 165e9a01 clr!WKS::gc_heap::gc1+0xa5\r\n1269eab8 73bc23ff 73aba794 00000000 73e67740 clr!WKS::gc_heap::bgc_thread_function+0xa9\r\n1269eabc 73aba794 00000000 73e67740 145de810 clr!WKS::gc_heap::bgc_thread_stub+0xf\r\n1269eae4 73ad4c27 145de810 00000000 00000000 clr!\u003clambda_732c70bdbbe96da13ca51d8b1f88db31\u003e::operator()+0x80\r\n1269f900 75e4fa29 165e9a68 75e4fa10 1269f96c clr!Thread::intermediateThreadProc+0x58\r\n1269f910 772c7a9e 165e9a68 a8a56006 00000000 kernel32!BaseThreadInitThunk+0x19\r\n1269f96c 772c7a6e ffffffff 772e8a67 00000000 ntdll!__RtlUserThreadStart+0x2f\r\n1269f97c 00000000 73ad4bd0 165e9a68 00000000 ntdll!_RtlUserThreadStart+0x1b\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWugJ_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_tjf_",
                                           "createdAt":  "2022-03-16T09:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOur application is crashing with an access violation.  It is rare, infrequent and non-deterministic, only happened on 2 customer machines, and can take some days of the application running for the crash to occur.  Could not reproduce it on my machine with same version of clr.dll\r\n\r\ncrashes in background_sweep()\r\nmark_through_cards_for_large_objects()\r\nsweep_large_objects()\r\nbackground_mark_simple1()\r\nrevisit_written_page()\r\n\r\nExcerpt from 1 of the dmp files below.  Full files available on request.\r\n\r\n\r\nCONTEXT:  (.ecxr)\r\neax=00000000 ebx=04b93c98 ecx=b14000d0 edx=00000000 esi=03cc28d8 edi=000000b0\r\neip=73bc3b75 esp=1269ea50 ebp=1269ea80 iopl=0         nv up ei ng nz na po nc\r\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010282\r\nclr!WKS::gc_heap::background_sweep+0x495:\r\n73bc3b75 f70100000080    test    dword ptr [ecx],80000000h ds:002b:b14000d0=????????\r\nResetting default scope\r\n\r\nEXCEPTION_RECORD:  (.exr -1)\r\nExceptionAddress: 73bc3b75 (clr!WKS::gc_heap::background_sweep+0x00000495)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 00000000\r\n   Parameter[1]: b14000d0\r\nAttempt to read from address b14000d0\r\n\r\n\u003cremoved\u003e\r\n\r\nSTACK_TEXT:  \r\n1269ea80 73bc2d4f 00000000 00000000 00000001 clr!WKS::gc_heap::background_sweep+0x495\r\n1269eaa0 73bc2371 73bc23f0 145de810 165e9a01 clr!WKS::gc_heap::gc1+0xa5\r\n1269eab8 73bc23ff 73aba794 00000000 73e67740 clr!WKS::gc_heap::bgc_thread_function+0xa9\r\n1269eabc 73aba794 00000000 73e67740 145de810 clr!WKS::gc_heap::bgc_thread_stub+0xf\r\n1269eae4 73ad4c27 145de810 00000000 00000000 clr!\u003clambda_732c70bdbbe96da13ca51d8b1f88db31\u003e::operator()+0x80\r\n1269f900 75e4fa29 165e9a68 75e4fa10 1269f96c clr!Thread::intermediateThreadProc+0x58\r\n1269f910 772c7a9e 165e9a68 a8a56006 00000000 kernel32!BaseThreadInitThunk+0x19\r\n1269f96c 772c7a6e ffffffff 772e8a67 00000000 ntdll!__RtlUserThreadStart+0x2f\r\n1269f97c 00000000 73ad4bd0 165e9a68 00000000 ntdll!_RtlUserThreadStart+0x1b\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eChateauLaFite\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-16T09:22:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_vLqL",
                                           "createdAt":  "2022-03-16T16:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is there a possibility to capture a dump when the failure occurs? Without them (in most cases multiple) its usually difficult to diagnose such issues which are most likely some heap corruption ",
                                           "updatedAt":  "2022-03-16T16:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_vMsR",
                                           "createdAt":  "2022-03-16T16:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChateauLaFite",
                                           "body":  "I already have 6 dump files available on request as mentioned ^^^^\r\n\r\n",
                                           "updatedAt":  "2022-03-16T16:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_vP65",
                                           "createdAt":  "2022-03-16T16:53:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok nice. please share a link to a few in email (should be available in my profile)",
                                           "updatedAt":  "2022-03-16T16:53:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1FUs",
                                           "createdAt":  "2023-04-26T18:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @ChateauLaFite , checking if you are still hitting this in .NET 7?",
                                           "updatedAt":  "2023-04-26T18:25:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a6An_",
                                           "createdAt":  "2023-04-27T08:47:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChateauLaFite",
                                           "body":  "We haven\u0027t yet moved to .NET 7 sadly.  I will repost if and when we do, thanks.",
                                           "updatedAt":  "2023-04-27T08:47:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "GC crash in background_sweep() and other methods",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67268",
        "createdAt":  "2022-03-28T10:16:43Z",
        "number":  67268,
        "author":  "Rayzbam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-06T17:52:03Z",
        "body":  "Hi,\r\n\r\nI\u0027m sorry to open a new topic but we encountered an issue without having any clue on the resolution.\r\n\r\nWe found this issue : https://github.com/dotnet/aspnetcore/issues/38722\r\n\r\nIt seems it\u0027s been resolved \"offline\" but it\u0027s not very useful to us.\r\n\r\nWe have the same code (.NET 6) on 2 differents Windows Server 2019, and one server seems to be OutOfMemory every time and pretty quickly.\r\n\r\nWe just investigated and found that all our memory was stuck on the Generation 2 of the Garbage Collector. All this memory seems to be \"collectable\" as it is all \"free\" and not \"pinned\" or used, so we can\u0027t understand why it\u0027s not collected ... like ever. This service used to NEVER grows its memory upper than 250Mb except on this server.\r\n\r\n![MicrosoftTeams-image (1)](https://user-images.githubusercontent.com/52962035/160379160-2b6b54b0-4cb8-4a61-89de-22eddf9ebac1.png)\r\n\r\n![MicrosoftTeams-image (2)](https://user-images.githubusercontent.com/52962035/160380992-7294d4c5-0d94-4128-90c8-8821d451a038.png)\r\n\r\nWe didn\u0027t find any other issue or resolution on this kind of behavior. \r\nCan anyone help us or link a resolution of this big RAM consumption with no reason ?\r\n\r\nThanks for your help",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQIkA2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ackhc",
                                           "createdAt":  "2022-03-28T22:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Was the memory dump captured at the point the OutOfMemoryException(s) are thrown? Can you provide more information about the environment like how much memory is available on the system?",
                                           "updatedAt":  "2022-03-28T22:57:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ackq1",
                                           "createdAt":  "2022-03-28T22:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi,\r\n\r\nI\u0027m sorry to open a new topic but we encountered an issue without having any clue on the resolution.\r\n\r\nWe found this issue : https://github.com/dotnet/aspnetcore/issues/38722\r\n\r\nIt seems it\u0027s been resolved \"offline\" but it\u0027s not very useful to us.\r\n\r\nWe have the same code (.NET 6) on 2 differents Windows Server 2019, and one server seems to be OutOfMemory every time and pretty quickly.\r\n\r\nWe just investigated and found that all our memory was stuck on the Generation 2 of the Garbage Collector. All this memory seems to be \"collectable\" as it is all \"free\" and not \"pinned\" or used, so we can\u0027t understand why it\u0027s not collected ... like ever. This service used to NEVER grows its memory upper than 250Mb except on this server.\r\n\r\n![MicrosoftTeams-image (1)](https://user-images.githubusercontent.com/52962035/160379160-2b6b54b0-4cb8-4a61-89de-22eddf9ebac1.png)\r\n\r\n![MicrosoftTeams-image (2)](https://user-images.githubusercontent.com/52962035/160380992-7294d4c5-0d94-4128-90c8-8821d451a038.png)\r\n\r\nWe didn\u0027t find any other issue or resolution on this kind of behavior. \r\nCan anyone help us or link a resolution of this big RAM consumption with no reason ?\r\n\r\nThanks for your help\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRayzbam\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`, `area-runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-28T22:58:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AcpVe",
                                           "createdAt":  "2022-03-28T23:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "does the explanation in [this section](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#is-the-after-size-too-large) of mem-doc help?",
                                           "updatedAt":  "2022-03-28T23:31:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AdzRt",
                                           "createdAt":  "2022-03-29T08:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rayzbam",
                                           "body":  "\u003e Was the memory dump captured at the point the OutOfMemoryException(s) are thrown? Can you provide more information about the environment like how much memory is available on the system?\r\n\r\nUnfortunately not. But this dump was captured when our app is growing up its memory more than usual (between 800Mb to 1Gb). As i said, it never grows upper than 300Mb in all our environments usually.\r\n\r\n\u003e does the explanation in [this section](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#is-the-after-size-too-large) of mem-doc help?\r\n\r\nTo be honest, i don\u0027t think so but i might be wrong. The part on the Gen2 explains how to check the content of it, but we already done that and we DO know what there is.\r\nWhen we check out our dump, we just see a lot of transient objects (registered as Transient i mean) which not seem to be disposed. I made some tests on debug and these objects are disposed pretty quickly and it can\u0027t be possible that these objects are retained by something, they\u0027re just workers created in a particular ServiceScope in a using statement, so disposed at the end of the scope.\r\n\r\nAs it\u0027s on only ONE environment, i suspect having an issue on this server, but we didn\u0027t do anything special on our server usually, i don\u0027t know what to check. \r\nSame code, same load, don\u0027t make the same result on memory pressure.",
                                           "updatedAt":  "2022-03-29T08:53:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AewmB",
                                           "createdAt":  "2022-03-29T12:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rayzbam",
                                           "body":  "We just made another bunch of tests, and it\u0027s seems that the server can\u0027t handle all this load and is at 100% CPU.\r\n\r\nIs that possible that the GC thread be locked ? And so, if the CPU just goes down, the GC will free all the memory stuck in Gen 2 ? When the CPU \"allows\" him to fire i mean",
                                           "updatedAt":  "2022-03-29T12:23:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AgwKI",
                                           "createdAt":  "2022-03-29T20:10:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e does the explanation in [this section](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#is-the-after-size-too-large) of mem-doc help?\r\n\r\n\u003e To be honest, i don\u0027t think so but i might be wrong.\r\n\r\nactually I was more referring to the very first sentence in that section -\r\n\r\n+ Is the After size too large?\r\nIf so, is most of the size in gen2/LOH? Are you doing BGCs (which don’t compact) mostly?\r\n\r\nare you doing only BGCs? this is the first thing you should check out. \r\n\r\nif you are doing BGCs only for gen2, they do not compact, which means the free space will be there.",
                                           "updatedAt":  "2022-03-29T20:10:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AgxGn",
                                           "createdAt":  "2022-03-29T20:14:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e it\u0027s seems that the server can\u0027t handle all this load and is at 100% CPU.\r\n\r\nhave you looked at what\u0027s consuming CPU time? you could capture a trace with CPU samples -\r\n\r\nPerfView /nogui /KernelEvents=Default /ClrEvents=GC+Stack /ClrEventLevel=Informational /MaxCollectSec:600 /BufferSize:3000 /CircularMB:3000 /Merge:True /Zip:True collect\r\n",
                                           "updatedAt":  "2022-03-29T20:14:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AiN7F",
                                           "createdAt":  "2022-03-30T07:13:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rayzbam",
                                           "body":  "\u003e \u003e does the explanation in [this section](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#is-the-after-size-too-large) of mem-doc help?\r\n\u003e \r\n\u003e \u003e To be honest, i don\u0027t think so but i might be wrong.\r\n\u003e \r\n\u003e actually I was more referring to the very first sentence in that section -\r\n\u003e \r\n\u003e * Is the After size too large?\r\n\u003e   If so, is most of the size in gen2/LOH? Are you doing BGCs (which don’t compact) mostly?\r\n\u003e \r\n\u003e are you doing only BGCs? this is the first thing you should check out.\r\n\u003e \r\n\u003e if you are doing BGCs only for gen2, they do not compact, which means the free space will be there.\r\n\r\nHi @Maoni0 and thanks for your help.\r\n\r\nThe After size is clearly too large and most of the size is obviously in gen2. We didn\u0027t configure BGC so i\u0027m not able to say if there is a default value to be honest.\r\n\r\nWe don\u0027t configure the server GC, should we do it ? I mean by default the GC is configured as the Workstation one isn\u0027t it ?",
                                           "updatedAt":  "2022-03-30T07:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AiQDY",
                                           "createdAt":  "2022-03-30T07:21:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rayzbam",
                                           "body":  "\u003e \u003e it\u0027s seems that the server can\u0027t handle all this load and is at 100% CPU.\r\n\u003e \r\n\u003e have you looked at what\u0027s consuming CPU time? you could capture a trace with CPU samples -\r\n\u003e \r\n\u003e PerfView /nogui /KernelEvents=Default /ClrEvents=GC+Stack /ClrEventLevel=Informational /MaxCollectSec:600 /BufferSize:3000 /CircularMB:3000 /Merge:True /Zip:True collect\r\n\r\nThe server we using clearly does not have sufficient CPU for the work he supposed to do. But on our project environments, it\u0027s pretty usual and we don\u0027t see any memory pressure as a result of a high CPU load.\r\n\r\nAfter some tests, we figured it out that it seems to be a ConcurrentBag which is holding the memory even if this one is in a Transient instance which should be disposed. We must be misusing it, i know that ConcurrentBag writes on Thread local storage, but i never thought it could be this kind of strong reference.\r\nIs that possible that ConcurrentBag just been marked as \"collectable\" but is stuck on Gen2 until the memory pressure goes above the \"limit\" which trigger the GC to free this kind of memory ?",
                                           "updatedAt":  "2022-03-30T07:21:30Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  ".NET 6 RAM consumption on Windows Server 2019",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67653",
        "createdAt":  "2022-04-06T16:02:28Z",
        "number":  67653,
        "author":  "ddrinka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCWk3QA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2022-04-06T20:54:47Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-23T20:20:44Z",
        "body":  "Our application is latency-sensitive, and we\u0027re using CPU isolation and thread affinitization on Linux to reduce interruption of our core threads.  Garbage Collection is rare for our application, but we\u0027d like to make sure when it is happening, it\u0027s happening according to the requirements we\u0027ve put in place for core utilization.\r\n\r\nAssume cores 0 and 1 are housekeeping cores, and 2-8 are isolated, meaning the kernel schedules no tasks for those cores except if the tasks are explicitly affinitized to those cores.  We\u0027d like Foreground GC to happen with high priority on cores 2-8, as all .Net threads will be stopped during the Foreground GC anyway.  We\u0027d like Background GC to occur with low priority on the housekeeping cores.\r\n\r\nCurrently, .Net does precisely the opposite of this.  Foreground GC occurs with high priority on cores 0 and 1, while all threads are paused on cores 2-8.  I believe this can be resolved with careful use of `System.GC.HeapAffinitizeRanges` (though the default isn\u0027t what I would have expected and could potentially be reconsidered).\r\n\r\nI haven\u0027t identified an option to allow affinitization of the Background GC threads.  Is this because those threads must run on the same core as the heap they\u0027re servicing?  If not, we\u0027d like the ability to configure the cores where Background GC occurs to avoid context switching and work stealing on our isolated cores.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQS1eag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5A_s8w",
                                           "createdAt":  "2022-04-06T16:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOur application is latency-sensitive, and we\u0027re using CPU isolation and thread affinitization on Linux to reduce interruption of our core threads.  Garbage Collection is rare for our application, but we\u0027d like to make sure when it is happening, it\u0027s happening according to the requirements we\u0027ve put in place for core utilization.\r\n\r\nAssume cores 0 and 1 are housekeeping cores, and 2-8 are isolated, meaning the kernel schedules no tasks for those cores except if the tasks are explicitly affinitized to those cores.  We\u0027d like Foreground GC to happen with high priority on cores 2-8, as all .Net threads will be stopped during the Foreground GC anyway.  We\u0027d like Background GC to occur with low priority on the housekeeping cores.\r\n\r\nCurrently, .Net does precisely the opposite of this.  Foreground GC occurs with high priority on cores 0 and 1, while all threads are paused on cores 2-8.  I believe this can be resolved with careful use of `System.GC.HeapAffinitizeRanges` (though the default isn\u0027t what I would have expected and could potentially be reconsidered).\r\n\r\nI haven\u0027t identified an option to allow affinitization of the Background GC threads.  Is this because those threads must run on the same core as the heap they\u0027re servicing?  If not, we\u0027d like the ability to configure the cores where Background GC occurs to avoid context switching and work stealing on our isolated cores.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eddrinka\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-06T16:02:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BDVAE",
                                           "createdAt":  "2022-04-07T09:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "if you set core 2-8 as isolated, are you specifically affinitizing your application threads with these cores to make them run on these cores? my understanding is if you don\u0027t do that then none of your threads will run on those cores either. so it sounds like you are doing specific affinitizing yourself. if you could please describe exactly how you are doing this (eg, you are doing this after the runtime started, and used some API to affinitize, or used a tool to affinitize before the process started?), that would be helpful.\r\n\r\nby setting core 2-8 as isolated I wonder if it means they are excluded from the process\u0027s affintity mask, then by design GC threads will not run on them since we don\u0027t run on a core that\u0027s simply not allowed by the process. the puzzling part to me is it sounds like you are saying background GC threads are running on core 2-8. that would seem very strange since we don\u0027t explicitly affinitize these threads at all.",
                                           "updatedAt":  "2022-04-07T09:16:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BFRmT",
                                           "createdAt":  "2022-04-07T15:48:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ddrinka",
                                           "body":  "\u003e so it sounds like you are doing specific affinitizing yourself. if you could please describe exactly how you are doing this\r\n\r\n@Maoni0, you\u0027re correct, for the latency-critical threads we\u0027re calling `Thread.BeginThreadAffinity();`  (in case that ever becomes necessary) and then calling `sched_setaffinity` via pinvoke to work around limitations in .Net on Linux for setting thread affinity.\r\n\r\n\u003e by design GC threads will not run on them since we don\u0027t run on a core that\u0027s simply not allowed by the process\r\n\r\nThis would be the goal of this card--to be able to assign explicit cores for GC threads that are outside of the automatically chosen cores.  We could also extend the process affinity to include the isolated cores, but we\u0027d still want to restrict which cores the Background GC can run on within the process affinity mask.\r\n\r\n\u003e background GC threads are running on core 2-8\r\n\r\nThis is what we\u0027ve seen here.  Reading the source it looks like those Background GC threads are created and destroyed over the lifetime of the application rather than all at the beginning?  If that\u0027s the case, then perhaps they\u0027re getting created within the affinitized threads.",
                                           "updatedAt":  "2022-04-07T15:48:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BG_4Y",
                                           "createdAt":  "2022-04-08T01:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "thanks for your explanation. \r\n\r\n\u003e If that\u0027s the case, then perhaps they\u0027re getting created within the affinitized threads.\r\n\r\njust making sure, you are saying this means if a thread is created by a thread that gets affinitized to one of the isolated cores, it will inherit that attribute and automated be scheduled on any isolated cores? \r\n\r\nsounds like you are asking for 2 things -\r\n\r\n1) have Server GC threads (the ones that are currently affinitized to core 0/1 run on the isolated cores; and \r\n2) have BGC Server GC threads (the ones that are currently running on core 2-8) run on the housekeeping ones;\r\n\r\nplease let me know if this is incorrect. these sound like good defaults to me. ",
                                           "updatedAt":  "2022-04-08T01:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BK3oc",
                                           "createdAt":  "2022-04-08T21:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ddrinka",
                                           "body":  "\u003e if a thread is created by a thread that gets affinitized to one of the isolated cores, it will inherit that attribute\r\n\r\nYes, my understanding is that thread affinity masks carry over to new thread creation the same way process affinity carries over to child processes.\r\n\r\n\u003e sounds like you are asking for 2 things\r\n\r\nYou\u0027ve understood my request correctly.\r\n\r\nThe reason I believe Server GC should happen on any core that has a .Net thread running on it is that the goal of Server GC is to complete as quickly as possible using all available resources.  While Server GC is executing, all .Net threads are paused anyway, so it makes sense to use the open space on any core to complete the GC work.  For our use case I would prefer to avoid having Server GC run on the housekeeping cores because it runs with elevated priority.  We have time synchronization and other OS functions running on the housekeeping cores that shouldn\u0027t be deemed \"less important\" than the GC of one .Net application.  But I feel comfortable carving those cores out via configuration.  I think the default should be to run on every core that has a .Net thread on it, or to allow explicit configuration of the cores where Server GC should run.\r\n\r\nThe reason I believe Background GC should happen on the housekeeping cores is that we have elected to isolate certain cores from kernel scheduling to avoid context switches, interrupts, L3 cache invalidation, etc.  Running a background task on those cores impacts those benefits.  Since Background GC doesn\u0027t need to happen urgently, it should compete for space on the housekeeping cores.",
                                           "updatedAt":  "2022-04-08T21:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BLTmV",
                                           "createdAt":  "2022-04-08T23:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "if you actually have .net threads running on isolated cores, then yes, it\u0027s reasonable for the Server GC threads to run on them. but we don\u0027t keep track which cores the .net threads are running on, especially if you\u0027ve done the affinitization yourself. \r\n\r\nit seems like a better way is just to provide some way for you to do the affinitization for the GC threads yourself, including the BGC threads. do you agree?\r\n\r\n@mangod9 FYI - something that we\u0027d want to look into providing.",
                                           "updatedAt":  "2022-04-08T23:39:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BLVfm",
                                           "createdAt":  "2022-04-08T23:49:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ddrinka",
                                           "body":  "Yes, particularly given potential adjustments to threads and affinities over the life of the application, it makes the most sense to provide runtime configuration settings to allow customization at startup.\r\n\r\nNote that as I dug into `System.GC.HeapAffinitizeRanges` I mentioned above, I learned that that configuration setting does not actually accomplish the goal of affinitizing the Server GC threads to isolated cores.  It only allows further restricting the affinitized ranges down from the startup default.  So if I\u0027ve isolated cores 2-8, I can only set `HeapAffinitizeRanges` to 0 or 1, or leave it as its default 0 \u0026 1.",
                                           "updatedAt":  "2022-04-08T23:49:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BLV5q",
                                           "createdAt":  "2022-04-08T23:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "yeah, as I mentioned above, currently the Server GC threads are only allowed to run on a core that your process is allowed to run on. so clearly this would require some changes in the runtime.",
                                           "updatedAt":  "2022-04-08T23:51:39Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Allow Background GC Thread Affinization",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72247",
        "createdAt":  "2022-07-15T05:23:11Z",
        "number":  72247,
        "author":  "jw30-lee",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-18T21:54:49Z",
        "body":  "To improve the behavioral responsiveness of the app\r\nI am using the garbage collection ETW event to output information when GC is collected as follows.\r\n\r\nDN_s-13376 [000] .... 485.320112: user: [gctracer] #46 / Gen 1 / took 77.446ms\r\nDN_s-13376 [000] .... 488.226540: user: [gctracer] #49 / Gen 2 / took 183.220ms\r\nDN_s-13376 [000] .... 491.545770: user: [gctracer] #61 / Gen 1 / took 17.134ms\r\n\r\nHowever, since it is a test environment with very weak specifications, I think that the event handler registration method will affect the performance.\r\n\r\nIs there any other way to check the Collect information of GC without affecting performance?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORtTt5w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GpIDI",
                                           "createdAt":  "2022-07-15T05:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTo improve the behavioral responsiveness of the app\r\nI am using the garbage collection ETW event to output information when GC is collected as follows.\r\n\r\nDN_s-13376 [000] .... 485.320112: user: [gctracer] #46 / Gen 1 / took 77.446ms\r\nDN_s-13376 [000] .... 488.226540: user: [gctracer] #49 / Gen 2 / took 183.220ms\r\nDN_s-13376 [000] .... 491.545770: user: [gctracer] #61 / Gen 1 / took 17.134ms\r\n\r\nHowever, since it is a test environment with very weak specifications, I think that the event handler registration method will affect the performance.\r\n\r\nIs there any other way to check the Collect information of GC without affecting performance?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejw30-lee\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-15T05:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G1O3n",
                                           "createdAt":  "2022-07-18T21:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "what does \"very weak speicifications\" mean and what made you believe that \"event handler registration method will affect the performance\"? how exactly are you collecting the ETW events?",
                                           "updatedAt":  "2022-07-18T21:54:38Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "How to check GC Collection information that does not affect performance.",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73411",
        "createdAt":  "2022-08-04T23:19:26Z",
        "number":  73411,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T23:17:34Z",
        "body":  "1. revisit_written_pages is firing revisit events without resetting these after LOH so for POH it\u0027s just firing something totally wrong (eg if revisiting POH didn\u0027t end up revisiting any pages it would just fire the same event twice). It needs to reset -\r\n                total_dirtied_pages = 0;\r\n                total_marked_objects = 0;\r\nFor regions we are also firing this event for gen0/gen1 with IsLarge as TRUE which is incorrect.\r\nbackground_process_mark_overflow_internal has a similar problem\r\n\r\nThis issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-AcEw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4Bq2",
                                           "createdAt":  "2022-08-04T23:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-04T23:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H4BwT",
                                           "createdAt":  "2022-08-04T23:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n1. revisit_written_pages is firing revisit events without resetting these after LOH so for POH it\u0027s just firing something totally wrong (eg if revisiting POH didn\u0027t end up revisiting any pages it would just fire the same event twice). It needs to reset -\r\n                total_dirtied_pages = 0;\r\n                total_marked_objects = 0;\r\nFor regions we are also firing this event for gen0/gen1 with IsLarge as TRUE which is incorrect.\r\nbackground_process_mark_overflow_internal has a similar problem\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T23:20:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Fixing ETW event emission from revisit_written_pages",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73412",
        "createdAt":  "2022-08-04T23:23:08Z",
        "number":  73412,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T16:44:37Z",
        "body":  "We can do this where we do gen aware analysis.\r\n\r\nThis issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-AjhA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4COE",
                                           "createdAt":  "2022-08-04T23:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe can do this where we do gen aware analysis.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T23:23:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Should add Working Set accounting in our tooling",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73413",
        "createdAt":  "2022-08-04T23:24:13Z",
        "number":  73413,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T16:51:03Z",
        "body":  "Consider putting the AllocTick event on a different keyword so we can get the join events without increasing the trace size by so much as AllocTick events can be very voluminous - this would break all the people who expect this event on the GC keyword. Another approach is to add a config to change the 100k number but setting an env var/a config isn\u0027t necessary trivial for some customers\u0027 env\r\n\r\nThis issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-AvxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4C_E",
                                           "createdAt":  "2022-08-04T23:28:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider putting the AllocTick event on a different keyword so we can get the join events without increasing the trace size by so much as AllocTick events can be very voluminous - this would break all the people who expect this event on the GC keyword. Another approach is to add a config to change the 100k number but setting an env var/a config isn\u0027t necessary trivial for some customers\u0027 env\r\n\r\nThis issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T23:28:08Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider putting the AllocTick event on a different keyword so we can get the join events",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73414",
        "createdAt":  "2022-08-04T23:24:57Z",
        "number":  73414,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-18T23:31:40Z",
        "body":  "This issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-AnvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4Ce9",
                                           "createdAt":  "2022-08-04T23:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T23:25:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "SIP region alloc isn\u0027t accounted for in any ETW events",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73415",
        "createdAt":  "2022-08-04T23:25:28Z",
        "number":  73415,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T16:50:33Z",
        "body":  "This issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-ApPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4Ck-",
                                           "createdAt":  "2022-08-04T23:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T23:25:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Induced aggressive GC needs to be added to trace event.",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73417",
        "createdAt":  "2022-08-04T23:39:54Z",
        "number":  73417,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCp_DqQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mrsharm",
                                            "createdAt":  "2022-08-05T01:02:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Maoni0",
                                            "createdAt":  "2022-08-05T05:15:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-02T23:05:43Z",
        "body":  "Keep total_committed_so_far and total_decommitted_so_far counters that monotonically increase as the process runs so we could report numbers for each GC how much commit/de-commit we did for that GC (we can record it at the end of each GC and save the diff in the GC\u0027s global history). \r\n\r\nThis issue is copied from our internal planning OneNote for tracking purposes. I will add more information here when I get more clarity on what we want to do here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-BMUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H4ExR",
                                           "createdAt":  "2022-08-04T23:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nKeep total_committed_so_far and total_decommitted_so_far counters that monotonically increase as the process runs so we could report numbers for each GC how much commit/de-commit we did for that GC (we can record it at the end of each GC and save the diff in the GC\u0027s global history). \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-04T23:40:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "keep total_committed_so_far and total_decommitted_so_far counters",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73557",
        "createdAt":  "2022-08-08T10:12:42Z",
        "number":  73557,
        "author":  "lsoft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9C6lA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2022-08-09T09:06:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "a-stankevich",
                                            "createdAt":  "2024-11-28T16:13:22Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-08-08T16:44:08Z",
        "body":  "for old-good-sync methods we can use `GC.GetAllocatedBytesForCurrentThread`, but there is no way to know how much bytes async method allocates:\r\n\r\n```\r\n//!!!! code not working actually !!!!\r\nvar alloc1 = GC.GetAllocatedBytesForCurrentThread();\r\n\r\nvar mem1 = new byte[1024];\r\nawait Task.Delay(100).ConfigureAwait(false);\r\nvar mem2 = new byte[1024];\r\n\r\nvar alloc2 = GC.GetAllocatedBytesForCurrentThread(); //may be other, unrelated, value, due to different thread\r\nvar diff = alloc2 - alloc1;\r\nConsole.WriteLine(\"Allocated bytes: \" + diff);\r\n```\r\n\r\nIt would be very helpful to have any method to track allocations in async methods (may be via `AsyncLocal` somehow).\r\n\r\nUse case: track allocations in request handling in server applications.\r\n\r\n[unanswerred discussion](https://github.com/dotnet/runtime/discussions/71530)\r\n\r\nThank you.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR_-KGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H_4ob",
                                           "createdAt":  "2022-08-08T10:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nfor old-good-sync methods we can use `GC.GetAllocatedBytesForCurrentThread`, but there is no way to know how much bytes async method allocates:\r\n\r\n```\r\n//!!!! code not working actually !!!!\r\nvar alloc1 = GC.GetAllocatedBytesForCurrentThread();\r\n\r\nvar mem1 = new byte[1024];\r\nawait Task.Delay(100).ConfigureAwait(false);\r\nvar mem2 = new byte[1024];\r\n\r\nvar alloc2 = GC.GetAllocatedBytesForCurrentThread(); //may be other, unrelated, value, due to different thread\r\nvar diff = alloc2 - alloc1;\r\nConsole.WriteLine(\"Allocated bytes: \" + diff);\r\n```\r\n\r\nIt would be very helpful to have any method to track allocations in async methods (may be via `AsyncLocal` somehow).\r\n\r\nUse case: track allocations in request handling in server applications.\r\n\r\n[unanswerred discussion](https://github.com/dotnet/runtime/discussions/71530)\r\n\r\nThank you.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elsoft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-08T10:12:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Tracking allocations in async methods",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74333",
        "createdAt":  "2022-08-22T08:40:58Z",
        "number":  74333,
        "author":  "shushanhf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-05T18:05:46Z",
        "body":  "How to run the `artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh` on  x64-linux ?\r\n\r\nThere is only the command on the windows `https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/coreclr/gc-stress-run-readme.md` .\r\n\r\nIf setting `RunningLongGCTests=1` and running the `artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh`, there will be a error (the following is the runtime6.0.8):\r\n```shell\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. The system cannot find the file specified.\r\n\r\nFile name: \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027/home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/Tests/Microsoft.Win32.Primitives.dll\u0027. The system cannot find the file specified.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaEXGeA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5I1tZC",
                                           "createdAt":  "2022-08-22T08:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @hoyosjs\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHow to run the `artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh` on  x64-linux ?\r\n\r\nThere is only the command on the windows `https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/coreclr/gc-stress-run-readme.md` .\r\n\r\nIf setting `RunningLongGCTests=1` and running the `artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh`, there will be a error (the following is the runtime6.0.8):\r\n```shell\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. The system cannot find the file specified.\r\n\r\nFile name: \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027/home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/Tests/Microsoft.Win32.Primitives.dll\u0027. The system cannot find the file specified.\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshushanhf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-22T08:41:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I2JNM",
                                           "createdAt":  "2022-08-22T10:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHow to run the `artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh` on  x64-linux ?\r\n\r\nThere is only the command on the windows `https://github.com/dotnet/runtime/blob/main/docs/workflow/testing/coreclr/gc-stress-run-readme.md` .\r\n\r\nIf setting `RunningLongGCTests=1` and running the `artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh`, there will be a error (the following is the runtime6.0.8):\r\n```shell\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. The system cannot find the file specified.\r\n\r\nFile name: \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027/home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/Tests/Microsoft.Win32.Primitives.dll\u0027. The system cannot find the file specified.\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshushanhf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `GCStress`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-22T10:20:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I3m9M",
                                           "createdAt":  "2022-08-22T15:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cshung, I know you had run this recently. Do we have instructions? ",
                                           "updatedAt":  "2022-08-22T15:42:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JA16p",
                                           "createdAt":  "2022-08-23T22:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "These commands should work, I just tested them on the latest main branch.\r\n\r\n```\r\ncd ~/git/runtime\r\n./build.sh -s clr\r\n./build.sh -c release -s libs\r\n./src/test/build.sh generatelayoutonly\r\ncd ./src/tests/GC/Stress/Framework\r\n ~/git/runtime/dotnet.sh build\r\ncd ~/git/runtime\r\nexport CORE_ROOT=~/git/runtime/artifacts/tests/coreclr/Linux.x64.Debug/Tests/Core_Root\r\nexport RunningLongGCTests=1\r\n~/git/runtime/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-08-24T00:31:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JBVf_",
                                           "createdAt":  "2022-08-24T02:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "\u003e These commands should work, I just tested them on the latest main branch.\r\n\u003e \r\n\u003e ```\r\n\u003e cd ~/git/runtime\r\n\u003e ./build.sh -s clr\r\n\u003e ./build.sh -c release -s libs\r\n\u003e ./src/test/build.sh generatelayoutonly\r\n\u003e cd ./src/tests/GC/Stress/Framework\r\n\u003e  ~/git/runtime/dotnet.sh build\r\n\u003e cd ~/git/runtime\r\n\u003e export CORE_ROOT=~/git/runtime/artifacts/tests/coreclr/Linux.x64.Debug/Tests/Core_Root\r\n\u003e export RunningLongGCTests=1\r\n\u003e ~/git/runtime/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh\r\n\u003e ```\r\n\r\nThanks\r\n\r\nI will test it on the latest main branch.\r\n\r\nBut the branch6.0 on the tag 6.0.8, the debug is not ok which liking the errors within the descrition. Why?",
                                           "updatedAt":  "2022-08-24T02:06:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JBm2v",
                                           "createdAt":  "2022-08-24T03:54:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "\u003e These commands should work, I just tested them on the latest main branch.\r\n\u003e \r\n\u003e ```\r\n\u003e cd ~/git/runtime\r\n\u003e ./build.sh -s clr\r\n\u003e ./build.sh -c release -s libs\r\n\u003e ./src/test/build.sh generatelayoutonly\r\n\u003e cd ./src/tests/GC/Stress/Framework\r\n\u003e  ~/git/runtime/dotnet.sh build\r\n\u003e cd ~/git/runtime\r\n\u003e export CORE_ROOT=~/git/runtime/artifacts/tests/coreclr/Linux.x64.Debug/Tests/Core_Root\r\n\u003e export RunningLongGCTests=1\r\n\u003e ~/git/runtime/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh\r\n\u003e ```\r\n\r\nI had tested by these commands, it\u0027s only ok for the latest main branch but still error for branch6.0 with the tag6.0.8.\r\n\r\nthe latest main branch: (tests are running....)\r\n```\r\nqiao@X64:~/work_qiao/runtime$ bash /home/qiao/work_qiao/runtime/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh \r\nBEGIN EXECUTION\r\n/home/qiao/work_qiao/runtime/artifacts/tests/coreclr/Linux.x64.Debug/Tests/Core_Root/corerun ReliabilityFramework.dll \u0027-unittest\u0027\r\nUsing config file: /home/qiao/work_qiao/runtime/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/testmix_gc_ci.config\r\nNUMBER_OF_PROCESSORS environment variable not supplied, falling back to Environment\r\ntest is 573277.dll\r\ntest is allocationwithpins.dll\r\ntest is b115557.dll\r\ntest is bestfit-finalize.dll\r\ntest is concurrentspin2.dll\r\ntest is doubLinkStay.dll\r\ntest is ExpandHeap.dll\r\ntest is GCQueue.dll\r\ntest is GCSimulator.dll\r\ntest is GCVariant.dll\r\ntest is LeakGenThrd.dll\r\ntest is MulDimJagAry.dll\r\ntest is pinstress.dll\r\ntest is plug.dll\r\ntest is PlugGaps.dll\r\ntest is SingLinkStay.dll\r\ntest is StressAllocator.dll\r\ntest is StressAllocator.dll\r\ntest is ThdTreeGrowingObj.dll\r\nLoading all tests: ...................\r\n```\r\n\r\nbut the release6.0 with tag6.0.8 is error:\r\n```\r\nLoaded System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a from /home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/Tests/Core_Root/System.Runtime.dll\r\n.\r\nProcess terminated. Test failed\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at ReliabilityFramework+\u003c\u003ec__DisplayClass35_0.\u003cStartTestWorker\u003eb__0()\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+\u003c\u003ec.\u003c.cctor\u003eb__272_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\nSystem.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027. The system cannot find the file specified.\r\n\r\nFile name: \u0027Microsoft.Win32.Primitives, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027\r\n ---\u003e System.IO.FileNotFoundException: Could not load file or assembly \u0027/home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/Tests/Microsoft.Win32.Primitives.dll\u0027. The system cannot find the file specified.\r\n\r\nFile name: \u0027/home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/Tests/Microsoft.Win32.Primitives.dll\u0027\r\n   at System.Reflection.AssemblyName.nGetFileInformation(String s)\r\n   at System.Reflection.AssemblyName.GetFileInformationCore(String assemblyFile)\r\n   at System.Reflection.AssemblyName.GetAssemblyName(String assemblyFile)\r\n   at System.Runtime.Loader.AssemblyLoadContext.GetAssemblyName(String assemblyPath)\r\n   at CustomAssemblyResolver.Load(AssemblyName assemblyName) in /home/qiao/work_qiao/dotnet-runtime-loongarch/src/tests/GC/Stress/Framework/ReliabilityFramework.cs:line 85\r\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingLoad(AssemblyName assemblyName)\r\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\r\n   at System.ConsolePal.EnsureInitializedCore()\r\n   at System.ConsolePal.Write(SafeFileHandle fd, ReadOnlySpan`1 buffer, Boolean mayChangeCursorPosition) in /home/qiao/work_qiao/dotnet-runtime-loongarch/src/libraries/System.Console/src/System/ConsolePal.Unix.cs:line 1267\r\n   at System.ConsolePal.UnixConsoleStream.Write(ReadOnlySpan`1 buffer) in /home/qiao/work_qiao/dotnet-runtime-loongarch/src/libraries/System.Console/src/System/ConsolePal.Unix.cs:line 1468\r\n   at System.IO.StreamWriter.Flush(Boolean flushStream, Boolean flushEncoder)\r\n   at System.IO.StreamWriter.WriteLine(String value)\r\n   at System.IO.TextWriter.SyncTextWriter.WriteLine(String value)\r\n   at System.Console.WriteLine(String value) in /home/qiao/work_qiao/dotnet-runtime-loongarch/src/libraries/System.Console/src/System/Console.cs:line 807\r\n   at Test.Main(String[] args) in /home/qiao/work_qiao/dotnet-runtime-loongarch/src/tests/GC/Stress/Tests/PlugGaps.cs:line 114\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Span`1\u0026 arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n   at ReliabilityFramework.\u003c\u003ec__DisplayClass35_0.\u003cStartTestWorker\u003eb__0() in /home/qiao/work_qiao/dotnet-runtime-loongarch/src/tests/GC/Stress/Framework/ReliabilityFramework.cs:line 1213/home/qiao/work_qiao/dotnet-runtime-loongarch/artifacts/tests/coreclr/Linux.x64.Debug/GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh：行 348:  4989 已放弃               $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\n```",
                                           "updatedAt":  "2022-08-24T03:59:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JBn52",
                                           "createdAt":  "2022-08-24T04:02:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shushanhf",
                                           "body":  "[run_ReliabilityFramework.log](https://github.com/dotnet/runtime/files/9412676/run_ReliabilityFramework.log)\r\n",
                                           "updatedAt":  "2022-08-24T04:02:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oKDYd",
                                           "createdAt":  "2023-10-04T18:57:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anthonycanino",
                                           "body":  "Hi, I have followed the commands above, but when the tests finish running, I see the following error...\r\n\r\n![image](https://github.com/dotnet/runtime/assets/91913526/891b8630-422b-4ed5-ba4a-2238f98aa77c)\r\n\r\nIt seems like this is an issue where that library is windows only.\r\n\r\nDo we know if there is a stable way to run these tasks on linux, (I am running .NET 8 from a locally built repo).",
                                           "updatedAt":  "2023-10-04T18:57:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oKN4L",
                                           "createdAt":  "2023-10-04T19:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@anthonycanino, can you debug why we try to load `kernel32` on Linux? It might simply be somewhere we forget to `#if WINDOWS`.",
                                           "updatedAt":  "2023-10-04T19:28:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oK7fr",
                                           "createdAt":  "2023-10-04T21:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anthonycanino",
                                           "body":  "Looking into it",
                                           "updatedAt":  "2023-10-04T21:52:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oQ6G6",
                                           "createdAt":  "2023-10-05T16:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anthonycanino",
                                           "body":  "Looks like there is some platform dependent code in some of the debug break setup: https://github.com/dotnet/runtime/blob/main/src/tests/GC/Stress/Framework/ReliabilityFramework.cs#L509-L516\r\n\r\nLocally, I have placed if directives around https://github.com/dotnet/runtime/blob/main/src/tests/GC/Stress/Framework/ReliabilityFramework.cs#L538-L542 and it seems to work now.\r\n\r\nI am not sure how you\u0027d like to handle, I can open up a PR for that change, though that wouldn\u0027t offer the same level of feature on Linux.",
                                           "updatedAt":  "2023-10-05T16:26:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oRcZ4",
                                           "createdAt":  "2023-10-05T18:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Looks like there is some platform-dependent code in some of the debug break setup: \r\n\r\nCan you replace those with these APIs?\r\n\r\n- https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debugger.break?view=net-7.0\r\n- https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debugger.isattached?view=net-7.0\r\n- https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.writeline?view=net-7.0\r\n\r\nThese should be cross-platform friendly.\r\n\r\n@dotnet/dotnet-diag on potential functional differences.",
                                           "updatedAt":  "2023-10-05T18:05:46Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "How to run `GC/Stress/Framework/ReliabilityFramework/ReliabilityFramework.sh` on linux ?",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74388",
        "createdAt":  "2022-08-22T22:57:22Z",
        "number":  74388,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T23:07:22Z",
        "body":  "Runfo in [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime+name%3A%22system.tests.gcextendedtests.getallocatedbytesforcurrentthread%22) as of 10/3\r\n- 5 occurrences - 1x Rolling run + 4x PR\r\n- As of 8/4 there was 1x Rolling run + 1x PR (it was too rare to file it back then)\r\n\r\n\r\n### Original Report\r\n\r\n❌ System.Tests.GCExtendedTests.GetAllocatedBytesForCurrentThread(size: 1000)\r\n\r\n```\r\nAllocated too much: start: 84649544 end: 84749920 size: 1000\r\nExpected: True\r\nActual:   False\r\nStack Trace\r\n   at System.Tests.GCExtendedTests.GetAllocatedBytesForCurrentThread(Int32 size) in /_/src/libraries/System.Runtime/tests/System/GCTests.cs:line 798\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 64\r\n\r\n```\r\nDebian.10.Amd64.Open\r\n\r\nConsole log: \u0027System.Runtime.Tests\u0027 from job 8b265039-da4a-4577-9fe9-3ae7a32573d4 (ubuntu.1804.amd64.open.rt) using docker image mcr.microsoft.com/dotnet-buildtools/prereqs:debian-10-helix-amd64-20220810215022-f344011 on a002IZM\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1959322\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=50341050\u0026paneView=dotnet-dnceng.dnceng-build-release-tasks.helix-test-information-tab\u0026resultId=185272",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS2t0Cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5I6fMw",
                                           "createdAt":  "2022-08-22T22:57:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-22T22:57:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I6fQA",
                                           "createdAt":  "2022-08-22T22:57:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n❌ System.Tests.GCExtendedTests.GetAllocatedBytesForCurrentThread [[Console]](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-74338-merge-8b265039da4a45779f/System.Runtime.Tests/1/console.5c513ad0.log?helixlogtype=result) [[Details]](https://dev.azure.com/dnceng//public/_build/results?buildId=1959322\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=50341050\u0026resultId=185272\u0026paneView=debug) [[Artifacts]](https://dev.azure.com/dnceng//public/_build/results?buildId=1959322\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=50341050\u0026resultId=185272\u0026paneView=dotnet-dnceng.dnceng-build-release-tasks.helix-test-information-tab) [[0.01% failure rate]](https://dev.azure.com/dnceng//public/_build/results?buildId=1959322\u0026view=ms.vss-test-\r\n❌ System.Tests.GCExtendedTests.GetAllocatedBytesForCurrentThread(size: 1000)\r\n\r\n```\r\nAllocated too much: start: 84649544 end: 84749920 size: 1000\r\nExpected: True\r\nActual:   False\r\nStack Trace\r\n   at System.Tests.GCExtendedTests.GetAllocatedBytesForCurrentThread(Int32 size) in /_/src/libraries/System.Runtime/tests/System/GCTests.cs:line 798\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 64\r\n\r\n```\r\nDebian.10.Amd64.Open\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edanmoseley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-22T22:57:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I-ggT",
                                           "createdAt":  "2022-08-23T16:56:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "this seems to be a new failure, would be good to determine if some recent change might have affected this. ",
                                           "updatedAt":  "2022-08-23T16:56:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I_XCG",
                                           "createdAt":  "2022-08-23T18:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "There is some slop already in the text, so apparently it\u0027s not expected to be totally deterministic?\r\n\r\n            Assert.True((end - start) \u003c 5 * size, $\"Allocated too much: start: {start} end: {end} size: {size}\");\r\n\r\nSo it would allocate 1K, allow up to 5K but it was 10K",
                                           "updatedAt":  "2022-08-23T18:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5La3QK",
                                           "createdAt":  "2022-10-03T11:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Happens on all platforms. Roughly 1x per week - see top post updated",
                                           "updatedAt":  "2022-10-03T11:56:51Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "System.Tests.GCExtendedTests.GetAllocatedBytesForCurrentThread - Allocated too much",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75034",
        "createdAt":  "2022-09-02T22:39:37Z",
        "number":  75034,
        "author":  "RobertHenry6bev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T23:15:54Z",
        "body":  "### Description\n\nRunning on large core count ARM64, ubuntu 22.04 a \"binary tree\" memory consumer, the ubsan runtime detects a null-pointer used as a this pointer for a member call.\r\n\r\nRunning with the runtime compiled with gcc12 -O3 -fsanitize=undefined (eg the ubsan) Compiling near main/head on sha 7a45201181d37329b7ab0bee541ed7c42b5d94b6\r\n\r\nRunning the program kunal_gc (source attached).\r\nRunning with this invocation (where the single argument \"26\" means make a binary tree of depth 26, eg, huge)\r\n\r\n```\r\nUBSAN_OPTIONS=halt_on_error=0,print_stacktrace=1,use_sigaltstack=false,suppressions=/home/robhenry/git-work-e2/robhenry-perf/dotnet_build/ubsan.supp \\\r\n        ASAN_OPTIONS=halt_on_error=0,alloc_dealloc_mismatch=0 \\\r\n        TSAN_OPTIONS=halt_on_error=0,force_seq_cst_atomics=1,verbosity=0,suppressions=/home/robhenry/git-work-e2/robhenry-perf/dotnet_build/tsan.supp \\\r\n        LSAN_OPTIONS=verbosity=1:log_threads=1 \\\r\n        \\\r\n        DOTNET_gcServer=\"1\" \\\r\n        DOTNET_GCNoAffinitize=0 \\\r\n        DOTNET_Thread_UseAllCpuGroups=1 \\\r\n        DOTNET_GCCpuGroup=1 \\\r\n        DOTNET_GCHeapCount=4 \\\r\n        \\\r\n        gdb --args \\\r\n          ../dotnet_load/kunal_gc/bin/Release/net7.0/linux-arm64/kunal_gc \\\r\n            26 \\\r\n\r\n```\r\nwhere ubsan.supp is attached in a zip\r\n\r\nthe ubsan runtime runs a procedure that gdb has a breakpoint on it, and here\u0027s the backtrace.  pGenGCHeap is indeed null.\r\n\r\n```\r\nmnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:46048:43: runtime error: member call on null pointer of type \u0027struct gc_heap\u0027\r\n\r\nThread 1 \"kunal_gc\" hit Breakpoint 1, __ubsan::ScopedReport::~ScopedReport (this=this@entry=0xffffffffda30, __in_chrg=\u003coptimized out\u003e) at ../../../../src/libsanitizer/ubsan/ubsan_diag.cpp:388\r\n388\t../../../../src/libsanitizer/ubsan/ubsan_diag.cpp: No such file or directory.\r\n(gdb) up\r\n#1  0x0000fffff794a950 in handleTypeMismatchImpl (Data=Data@entry=0xfffff63d8b48, Pointer=Pointer@entry=0, Opts=...)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp:137\r\n137\t../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp: No such file or directory.\r\n(gdb) \r\n#2  0x0000fffff794b414 in __ubsan::__ubsan_handle_type_mismatch_v1 (Data=Data@entry=0xfffff63d8b48, Pointer=Pointer@entry=0)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp:142\r\n142\tin ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp\r\n(gdb) \r\n#3  0x0000fffff51c5958 in SVR::GCHeap::GarbageCollect (this=0xaaaaaaba0a60, generation=\u003coptimized out\u003e, low_memory_p=\u003coptimized out\u003e, mode=2)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:46048\r\n46048\t            pGenGCHeap-\u003ebackground_gc_wait();\r\n(gdb) print pGenGCHeap\r\n$1 = (SVR::gc_heap *) 0x0\r\n```\r\n[robhenry_gc_files.zip](https://github.com/dotnet/runtime/files/9481352/robhenry_gc_files.zip)\r\n\n\n### Reproduction Steps\n\nsee above\n\n### Expected behavior\n\nno ubsan runtime errors\n\n### Actual behavior\n\nobserved ubsan runtime errors\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n/cc @maoni",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOScW9aA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Jqxbm",
                                           "createdAt":  "2022-09-02T22:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nRunning on large core count ARM64, ubuntu 22.04 a \"binary tree\" memory consumer, the ubsan runtime detects a null-pointer used as a this pointer for a member call.\r\n\r\nRunning with the runtime compiled with gcc12 -O3 -fsanitize=undefined (eg the ubsan) Compiling near main/head on sha 7a45201181d37329b7ab0bee541ed7c42b5d94b6\r\n\r\nRunning the program kunal_gc (source attached).\r\nRunning with this invocation (where the single argument \"26\" means make a binary tree of depth 26, eg, huge)\r\n\r\n```\r\nUBSAN_OPTIONS=halt_on_error=0,print_stacktrace=1,use_sigaltstack=false,suppressions=/home/robhenry/git-work-e2/robhenry-perf/dotnet_build/ubsan.supp \\\r\n        ASAN_OPTIONS=halt_on_error=0,alloc_dealloc_mismatch=0 \\\r\n        TSAN_OPTIONS=halt_on_error=0,force_seq_cst_atomics=1,verbosity=0,suppressions=/home/robhenry/git-work-e2/robhenry-perf/dotnet_build/tsan.supp \\\r\n        LSAN_OPTIONS=verbosity=1:log_threads=1 \\\r\n        \\\r\n        DOTNET_gcServer=\"1\" \\\r\n        DOTNET_GCNoAffinitize=0 \\\r\n        DOTNET_Thread_UseAllCpuGroups=1 \\\r\n        DOTNET_GCCpuGroup=1 \\\r\n        DOTNET_GCHeapCount=4 \\\r\n        \\\r\n        gdb --args \\\r\n          ../dotnet_load/kunal_gc/bin/Release/net7.0/linux-arm64/kunal_gc \\\r\n            26 \\\r\n\r\n```\r\nwhere ubsan.supp is attached in a zip\r\n\r\nthe ubsan runtime runs a procedure that gdb has a breakpoint on it, and here\u0027s the backtrace.  pGenGCHeap is indeed null.\r\n\r\n```\r\nmnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:46048:43: runtime error: member call on null pointer of type \u0027struct gc_heap\u0027\r\n\r\nThread 1 \"kunal_gc\" hit Breakpoint 1, __ubsan::ScopedReport::~ScopedReport (this=this@entry=0xffffffffda30, __in_chrg=\u003coptimized out\u003e) at ../../../../src/libsanitizer/ubsan/ubsan_diag.cpp:388\r\n388\t../../../../src/libsanitizer/ubsan/ubsan_diag.cpp: No such file or directory.\r\n(gdb) up\r\n#1  0x0000fffff794a950 in handleTypeMismatchImpl (Data=Data@entry=0xfffff63d8b48, Pointer=Pointer@entry=0, Opts=...)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp:137\r\n137\t../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp: No such file or directory.\r\n(gdb) \r\n#2  0x0000fffff794b414 in __ubsan::__ubsan_handle_type_mismatch_v1 (Data=Data@entry=0xfffff63d8b48, Pointer=Pointer@entry=0)\r\n    at ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp:142\r\n142\tin ../../../../src/libsanitizer/ubsan/ubsan_handlers.cpp\r\n(gdb) \r\n#3  0x0000fffff51c5958 in SVR::GCHeap::GarbageCollect (this=0xaaaaaaba0a60, generation=\u003coptimized out\u003e, low_memory_p=\u003coptimized out\u003e, mode=2)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:46048\r\n46048\t            pGenGCHeap-\u003ebackground_gc_wait();\r\n(gdb) print pGenGCHeap\r\n$1 = (SVR::gc_heap *) 0x0\r\n```\r\n[robhenry_gc_files.zip](https://github.com/dotnet/runtime/files/9481352/robhenry_gc_files.zip)\r\n\n\n### Reproduction Steps\n\nsee above\n\n### Expected behavior\n\nno ubsan runtime errors\n\n### Actual behavior\n\nobserved ubsan runtime errors\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n/cc @maoni\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRobertHenry6bev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-02T22:39:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jqz6E",
                                           "createdAt":  "2022-09-02T22:54:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "Same fault is detected when all of dotnet/runtime is built using other compilers:\r\n\r\n- clang-14 -O3\r\n- clang-14 -O0\r\n- clang-11 -O0\r\n(Yes, it only takes me a minute to rebuild all 2400 files in dotnet/runtime)",
                                           "updatedAt":  "2022-09-02T22:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jq0OI",
                                           "createdAt":  "2022-09-02T22:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "Here\u0027s more state from gdb.\r\n\r\n```\r\ninfo threads\r\n(gdb) info  threads\r\n  Id   Target Id                                            Frame \r\n  1    Thread 0xfffff7ff3460 (LWP 347113) \"kunal_gc\"        __ubsan::ScopedReport::~ScopedReport (this=this@entry=0xffffffffcdc0, \r\n    __in_chrg=\u003coptimized out\u003e) at ../../../../src/libsanitizer/ubsan/ubsan_diag.cpp:388\r\n  2    Thread 0xfffff425f0c0 (LWP 347116) \"kunal_gc-ust\"    syscall () at ../sysdeps/unix/sysv/linux/aarch64/syscall.S:38\r\n  3    Thread 0xfffff3a4f0c0 (LWP 347117) \"kunal_gc-ust\"    syscall () at ../sysdeps/unix/sysv/linux/aarch64/syscall.S:38\r\n  4    Thread 0xfffff323f0c0 (LWP 347118) \"kunal_gc\"        0x0000fffff751bc78 in __GI___poll (fds=0xfffff323e290, nfds=1, \r\n    timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n  5    Thread 0xfffff2a2f0c0 (LWP 347119) \"kunal_gc\"        0x0000fffff751bc78 in __GI___poll (fds=0xffffe8000b70, nfds=1, \r\n    timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n  6    Thread 0xfffff181f0c0 (LWP 347120) \"kunal_gc\"        0x0000fffff751790c in __libc_open64 (\r\n    file=0xaaaaaac8684c \"/tmp/clr-debug-pipe-347113-9441029-in\", oflag=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/open64.c:41\r\n  7    Thread 0xfffff100f0c0 (LWP 347121) \"kunal_gc\"        __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xaaaaaac91ee8) at ./nptl/futex-internal.c:57\r\n  8    Thread 0xfffff02f20c0 (LWP 347122) \".NET Server GC\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xaaaaaaca095c) at ./nptl/futex-internal.c:57\r\n  9    Thread 0xfffff023d0c0 (LWP 347123) \".NET Server GC\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xaaaaaaca842c) at ./nptl/futex-internal.c:57\r\n  10   Thread 0xfffff01880c0 (LWP 347124) \".NET Server GC\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xaaaaaacafef8) at ./nptl/futex-internal.c:57\r\n  11   Thread 0xfffff00d30c0 (LWP 347125) \".NET Server GC\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xaaaaaacb79c8) at ./nptl/futex-internal.c:57\r\n  12   Thread 0xffffa2d300c0 (LWP 347126) \".NET Finalizer\"  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0xffffa2d2e598, \r\n    op=137, expected=0, futex_word=0xaaaaaacbb108) at ./nptl/futex-internal.c:57\r\n  14   Thread 0xff81050af0c0 (LWP 347128) \"kunal_gc\"        __GI___libc_read (nbytes=1, buf=0xff81050ae7c7, fd=\u003coptimized out\u003e)\r\n    at ../sysdeps/unix/sysv/linux/read.c:26\r\n  15   Thread 0xff81074f10c0 (LWP 347130) \".NET BGC\"        0x0000fffff58ac9a8 in SVR::gc_heap::background_mark1 (this=0xaaaaaac9ae90, \r\n    o=0xff827e9b7f60 \"\\030.\\003\\245\\377\\377\") at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:23510\r\n* 16   Thread 0xff80e79be0c0 (LWP 347131) \".NET BGC\"        __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xff81000039cc) at ./nptl/futex-internal.c:57\r\n  17   Thread 0xff80e71ae0c0 (LWP 347132) \".NET BGC\"        __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xff81000053dc) at ./nptl/futex-internal.c:57\r\n  18   Thread 0xff80e699e0c0 (LWP 347133) \".NET BGC\"        __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, \r\n    expected=0, futex_word=0xff8100006de8) at ./nptl/futex-internal.c:57\r\n  19   Thread 0xff80e618e0c0 (LWP 347142) \".NET Tiered Com\" __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0xff80e618cd18, \r\n    op=137, expected=0, futex_word=0xaaaaaacc5998) at ./nptl/futex-internal.c:57\r\n```\r\n\r\nPicking one of the BGC threads stuck in futex:\r\n\r\n```\r\n57\tin ./nptl/futex-internal.c\r\n(gdb) where\r\n#0  __futex_abstimed_wait_common64 (private=0, cancel=true, abstime=0x0, op=393, expected=0, futex_word=0xaaaaaaca095c)\r\n    at ./nptl/futex-internal.c:57\r\n#1  __futex_abstimed_wait_common (cancel=true, private=0, abstime=0x0, clockid=0, expected=0, futex_word=0xaaaaaaca095c)\r\n    at ./nptl/futex-internal.c:87\r\n#2  __GI___futex_abstimed_wait_cancelable64 (futex_word=futex_word@entry=0xaaaaaaca095c, expected=expected@entry=0, \r\n    clockid=clockid@entry=0, abstime=abstime@entry=0x0, private=private@entry=0) at ./nptl/futex-internal.c:139\r\n#3  0x0000fffff74bc8fc in __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0xaaaaaaca0900, cond=0xaaaaaaca0930)\r\n    at ./nptl/pthread_cond_wait.c:503\r\n#4  ___pthread_cond_wait (cond=0xaaaaaaca0930, mutex=0xaaaaaaca0900) at ./nptl/pthread_cond_wait.c:627\r\n#5  0x0000fffff65668a8 in CorUnix::CPalSynchronizationManager::ThreadNativeWait (ptnwdNativeWaitData=0xaaaaaaca0900, \r\n    dwTimeout=4294967295, ptwrWakeupReason=0xfffff02f0cc4, pdwSignaledObject=0xfffff02f0cc0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/pal/src/synchmgr/synchmanager.cpp:478\r\n#6  0x0000fffff65662d0 in CorUnix::CPalSynchronizationManager::BlockThread (this=0xaaaaaab6d860, pthrCurrent=0xaaaaaaca0750, \r\n    dwTimeout=4294967295, fAlertable=false, fIsSleep=false, ptwrWakeupReason=0xfffff02f0fe8, pdwSignaledObject=0xfffff02f0ff4)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/pal/src/synchmgr/synchmanager.cpp:301\r\n#7  0x0000fffff6587234 in CorUnix::InternalWaitForMultipleObjectsEx (pThread=0xaaaaaaca0750, nCount=1, lpHandles=0xfffff02f1150, \r\n    bWaitAll=0, dwMilliseconds=4294967295, bAlertable=0, bPrioritize=0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/pal/src/synchmgr/wait.cpp:637\r\n#8  0x0000fffff6587680 in WaitForSingleObjectEx (hHandle=0x74, dwMilliseconds=4294967295, bAlertable=0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/pal/src/synchmgr/wait.cpp:138\r\n#9  0x0000fffff5f9cc5c in CLREventWaitHelper2 (handle=0x74, dwMilliseconds=4294967295, alertable=0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/synch.cpp:372\r\n#10 0x0000fffff5f9c960 in CLREventWaitHelper(void*, unsigned int, int)::$_1::operator()(CLREventWaitHelper(void*, unsigned int, int)::Param*) const (this=0xfffff02f1287, pParam=0xfffff02f1290) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/synch.cpp:397\r\n#11 0x0000fffff5f9b0f0 in CLREventWaitHelper (handle=0x74, dwMilliseconds=4294967295, alertable=0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/synch.cpp:399\r\n#12 0x0000fffff5f9afd0 in CLREventBase::WaitEx (this=0xaaaaaac973d0, dwMilliseconds=4294967295, mode=WaitMode_None, syncState=0x0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/synch.cpp:466\r\n#13 0x0000fffff5f9aef0 in CLREventBase::Wait (this=0xaaaaaac973d0, dwMilliseconds=4294967295, alertable=0, syncState=0x0)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/synch.cpp:412\r\n#14 0x0000fffff5c8b9e4 in GCEvent::Impl::Wait (this=0xaaaaaac973d0, timeout=4294967295, alertable=false)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/gcenv.os.cpp:1327\r\n#15 0x0000fffff5c8ac74 in GCEvent::Wait (this=0xfffff6e551c8 \u003cSVR::gc_heap::ee_suspend_event\u003e, timeout=4294967295, alertable=false)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/gcenv.os.cpp:1405\r\n#16 0x0000fffff5842be4 in SVR::gc_heap::gc_thread_function (this=0xaaaaaac9ae90)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:6758\r\n#17 0x0000fffff5842b3c in SVR::gc_heap::gc_thread_stub (arg=0xaaaaaac9ae90)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/gc/gc.cpp:33870\r\n#18 0x0000fffff5c89320 in (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::operator()(void*) const (\r\n    this=0xfffff5c89178 \u003c(anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*)\u003e, argument=0xffffffffd238) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/gcenv.ee.cpp:1476\r\n#19 0x0000fffff5c89194 in (anonymous namespace)::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke(void*)\r\n    (argument=0xffffffffd238) at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/vm/gcenv.ee.cpp:1461\r\n#20 0x0000fffff65a5434 in CorUnix::CPalThread::ThreadEntry (pvParam=0xaaaaaaca0750)\r\n    at /mnt/robhenry/dotnet/clang11.a/runtime/src/coreclr/pal/src/thread/thread.cpp:1829\r\n#21 0x0000fffff74bd5c8 in start_thread (arg=0x0) at ./nptl/pthread_create.c:442\r\n#22 0x0000fffff7525d1c in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:79\r\n\r\n```",
                                           "updatedAt":  "2022-09-02T22:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JrGzm",
                                           "createdAt":  "2022-09-03T03:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Thanks for filing the issue.\r\n\r\nThis is not a real reliability issue though. The tool is just detecting a case where `gc.cpp` is abusing the language.\r\n\r\nWe would like to write a single line of code that works for both server GC (aka `#define MULTIPLE_HEAPS`) (where there are multiple instances of the `gc_heap` object and the `background_gc_wait` function is a real member function) and for workstation GC (where there is no instance of `gc_heap` object and the `background_gc_wait` function is static.\r\n\r\nThe way we did that is in the server GC case, `pGenGCHeap` is the right `gc_heap` object instance and `background_gc_wait` is a member function, and in the workstation case `pGenGCHeap` is null and `background_gc_wait` is a static function. \r\n\r\nC++ seems to happily allow us to write `Class c = null; c-\u003estaticMethodOnClass()` to call a static method on the class, and so we used that to allow us to write a single line for both cases.\r\n\r\nIn fact, not just `background_gc_wait`, we call every `PER_HEAP` member the same way, the tool is likely to detect a lot of false positives.\r\n\r\nIs it possible to silence this particular rule? If `null` is used to call a static method, let it go.",
                                           "updatedAt":  "2022-09-03T03:22:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JsWlR",
                                           "createdAt":  "2022-09-04T15:22:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e  the tool is likely to detect a lot of false positives.\r\n\r\nThis isn\u0027t a false positive. it is undefined behavior, this is alluded to in the following statement:\r\n\r\n\u003e The tool is just detecting a case where gc.cpp is abusing the language.\r\n\r\nRight, it is abuse that triggers undefined behavior which can potentially cause a compiler to do unexpected things. I\u0027d recommend not abusing the language here and instead making a single static function that accepts an instance and either calling the member on the instance or using the static as the impl if impl is `null` or in workstation GC. The code, as written, elicits undefined behavior and should be reconsidered.",
                                           "updatedAt":  "2022-09-04T15:22:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jsatv",
                                           "createdAt":  "2022-09-04T17:05:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The GC has `pGenGCHeap` defined as:\r\n```\r\n#ifdef MULTIPLE_HEAPS\r\n    gc_heap*    pGenGCHeap;\r\n#else\r\n    #define pGenGCHeap ((gc_heap*)0)\r\n#endif //MULTIPLE_HEAPS\r\n```\r\nThis problem affect all 100+ places where this define is used. Can we replace the `pGenGCHeap` macro with a different macro that avoids the null this pointer? Something like:\r\n```\r\n#ifdef MULTIPLE_HEAPS\r\n    #define heap_ref(hp) hp-\u003e\r\n#else\r\n    #define heap_ref(hp) gc_heap::\r\n#endif\r\n```\r\n\r\nCurrent code:\r\n```\r\n#ifdef MULTIPLE_HEAPS\r\n    for (int hn = 0; hn \u003c gc_heap::n_heaps; hn++)\r\n    {\r\n        gc_heap* hp = gc_heap::g_heaps[hn];\r\n#else //MULTIPLE_HEAPS\r\n    {\r\n        gc_heap* hp = pGenGCHeap;\r\n#endif //MULTIPLE_HEAPS\r\n        total_estimated_reclaim += heap_ref(hp) estimated_reclaim (gen_number);\r\n    }\r\n```\r\nNew code:\r\n```\r\n#ifdef MULTIPLE_HEAPS\r\n    for (int hn = 0; hn \u003c gc_heap::n_heaps; hn++)\r\n    {\r\n        gc_heap* hp = gc_heap::g_heaps[hn];\r\n#else //MULTIPLE_HEAPS\r\n    {\r\n#endif //MULTIPLE_HEAPS\r\n        total_estimated_reclaim += heap_ref(hp) estimated_reclaim (gen_number);\r\n    }\r\n```\r\n\r\n\u003e instead making a single static function that accepts an instance and either calling the member on the instance \r\n\r\nIt would likely introduce a measurable performance hit once done on all 100+ effected places. Passing the unnecessary this pointer around had measurable impact on register allocation and it is why this hack was introduced.",
                                           "updatedAt":  "2022-09-04T17:06:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JseEQ",
                                           "createdAt":  "2022-09-04T18:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "Which ISA was the \"measurable impact\" on register allocation noted?\r\n",
                                           "updatedAt":  "2022-09-04T18:41:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JseUl",
                                           "createdAt":  "2022-09-04T18:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "x86/x64. It was years ago.",
                                           "updatedAt":  "2022-09-04T18:49:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JsgVF",
                                           "createdAt":  "2022-09-04T19:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e \u003e instead making a single static function that accepts an instance and either calling the member on the instance\r\n\r\n\u003e It would likely introduce a measurable performance hit once done on all 100+ effected places. Passing the unnecessary this pointer around had measurable impact on register allocation and it is why this hack was introduced.\r\n\r\nI\u0027d prefer the other abstraction, but if there was measurable impact, especially in the GC, that approach would also work.",
                                           "updatedAt":  "2022-09-04T19:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Js5Rr",
                                           "createdAt":  "2022-09-05T03:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobertHenry6bev",
                                           "body":  "The bulk of the responses seem to imply that this situation is fortunately harmless, since we are running workstation gc.  But note that my environment has         DOTNET_gcServer=\"1\"  and I\u0027m asking for 4 heaps.",
                                           "updatedAt":  "2022-09-05T03:22:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JxOz0",
                                           "createdAt":  "2022-09-06T04:21:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "I agree with @RobertHenry6bev that the issue has nothing to do with the definition of `pGenGCHeap` as you can spot the `SVR::` prefix in the call stacks above.\r\n\r\n\u003e This isn\u0027t a false positive. it is undefined behavior,\r\n\r\nIt is not if I am reading [this](https://en.cppreference.com/w/cpp/language/static) correctly:\r\n\u003e To refer to a static member `m` of class `T`, two forms may be used: qualified name `T::m` or member access expression `E.m` or `E-\u003em`, where `E` is an expression that evaluates to `T` or `T*` respectively.\r\n\r\nRelated: [c++ access static members using null pointer](https://stackoverflow.com/questions/28482809/c-access-static-members-using-null-pointer).",
                                           "updatedAt":  "2022-09-06T04:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JxaNY",
                                           "createdAt":  "2022-09-06T05:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e \u003e This isn\u0027t a false positive. it is undefined behavior,\r\n\r\n\u003e It is not if I am reading [this](https://en.cppreference.com/w/cpp/language/static) correctly:\r\n\r\n\u003e \u003e To refer to a static member m of class T, two forms may be used: qualified name T::m or member access expression E.m or E-\u003em, where E is an expression that evaluates to T or T* respectively.\r\n\r\nI agree you are reading that correctly. I was not aware of this permission and given the warning assumed it was UB. Seems I was wrong here. Thanks for pointing this out @AntonLapounov.\r\n\r\n\u003e I agree with @RobertHenry6bev that the issue has nothing to do with the definition of pGenGCHeap as you can spot the SVR:: prefix in the call stacks above.\r\n\r\nSo are we missing the underlying issue that was triggered here? I\u0027ve not run this scenario locally yet.",
                                           "updatedAt":  "2022-09-06T05:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Jxb1o",
                                           "createdAt":  "2022-09-06T06:05:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Following the supplied link uncovered the primary source for what I had always considered UB - https://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#315. Calling a static method through the `.` was/is weird but I\u0027ve always accepted as valid. However, calling via `p-\u003e` when `p` is `nullptr` was what I thought was UB, the link does confirm it is valid.",
                                           "updatedAt":  "2022-09-06T06:05:17Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "ubsan detects null this when calling a member function in the GC",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75865",
        "createdAt":  "2022-09-19T22:06:26Z",
        "number":  75865,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAVXHw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "EgorBo",
                                            "createdAt":  "2022-09-19T22:14:43Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "stephentoub",
                                            "createdAt":  "2022-09-19T23:31:03Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2022-09-20T00:10:23Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-09-27T17:28:23Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2024-01-10T14:33:55Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-03-20T21:08:11Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2023-08-02T23:12:05Z",
        "body":  "Consider this example:\r\n\r\n```csharp\r\nbyte* ptr = Marshal.AllocHGlobal(...);\r\nref byte b = ref Unsafe.AsRef\u003cbyte\u003e(ptr);\r\nUse(ref b);\r\nMarshal.FreeHGlobal(ptr);\r\n\r\n// `b` never used again in the code. Let\u0027s assume JIT decided to extend the `b` variable lifetime till end of the method.\r\n\r\nobject o = new object(); // Let\u0027s assume that the GC run out of space, allocated a new memory block using virtual alloc, and the OS memory manager decides to give it the memory block that was just freed by `Marshal.FreeHGlobal`.\r\n\r\nGC.Collect(); // The GC may assert or crash because of it will see `byref b` pointing into middle of the segment where no valid byrefs are supposed to point to\r\n```\r\n\r\nContext: https://github.com/dotnet/runtime/pull/75857#discussion_r974679744",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSprNqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KmiVb",
                                           "createdAt":  "2022-09-19T22:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider this example:\r\n```\r\nbyte* ptr = Marshal.AllocHGlobal(...);\r\nref byte b = ref Unsafe.AsRef\u003cbyte\u003e(ptr);\r\nUse(ref b);\r\nMarshal.FreeHGlobal(ptr);\r\n\r\n// `b` never used again in the code. Let\u0027s assume JIT decided to extend the `b` variable lifetime till end of the method.\r\n\r\nobject o = new object(); // Let\u0027s assume that the GC run out of space, allocated a new memory block using virtual alloc, and the OS memory manager decides to give it the memory block that was just freed by `Marshal.FreeHGlobal`.\r\n\r\nGC.Collect(); // The GC may assert or crash because of it will see `byref b` pointing into middle of the segment where no valid byrefs are supposed to point to\r\n```\r\n\r\nContext: https://github.com/dotnet/runtime/pull/75857#discussion_r974679744\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-19T22:06:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KmjET",
                                           "createdAt":  "2022-09-19T22:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@davidwrighton Do you have thoughts about this scenario? It is related to the clarification made in https://github.com/dotnet/runtime/pull/71794.\r\n\r\nWe may want to make `GCConfig::GetConservativeGC` to be on by default to fix part of this problem.",
                                           "updatedAt":  "2022-09-19T22:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kmmfc",
                                           "createdAt":  "2022-09-19T22:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "with regions you don\u0027t have this problem since we reserve a big range for regions GC will be acquiring from so you\u0027ll never had such overlap. ",
                                           "updatedAt":  "2022-09-19T22:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kmmju",
                                           "createdAt":  "2022-09-19T22:25:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider this example:\r\n```\r\nbyte* ptr = Marshal.AllocHGlobal(...);\r\nref byte b = ref Unsafe.AsRef\u003cbyte\u003e(ptr);\r\nUse(ref b);\r\nMarshal.FreeHGlobal(ptr);\r\n\r\n// `b` never used again in the code. Let\u0027s assume JIT decided to extend the `b` variable lifetime till end of the method.\r\n\r\nobject o = new object(); // Let\u0027s assume that the GC run out of space, allocated a new memory block using virtual alloc, and the OS memory manager decides to give it the memory block that was just freed by `Marshal.FreeHGlobal`.\r\n\r\nGC.Collect(); // The GC may assert or crash because of it will see `byref b` pointing into middle of the segment where no valid byrefs are supposed to point to\r\n```\r\n\r\nContext: https://github.com/dotnet/runtime/pull/75857#discussion_r974679744\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-19T22:25:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kmrm6",
                                           "createdAt":  "2022-09-19T22:59:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Are you saying that you never ever call virtual alloc to reserve more memory with regions? Or that it is unlikely to run into this with regions?\r\n\r\nAlso, we still have 32-bit platforms where regions are not enabled.\r\n\r\nI do not think codegen is the right area label for this. There is nothing that codegen team can do about this. If there is a change to do for this, it would need to be in the GC.",
                                           "updatedAt":  "2022-09-19T22:59:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kmro1",
                                           "createdAt":  "2022-09-19T22:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider this example:\r\n```\r\nbyte* ptr = Marshal.AllocHGlobal(...);\r\nref byte b = ref Unsafe.AsRef\u003cbyte\u003e(ptr);\r\nUse(ref b);\r\nMarshal.FreeHGlobal(ptr);\r\n\r\n// `b` never used again in the code. Let\u0027s assume JIT decided to extend the `b` variable lifetime till end of the method.\r\n\r\nobject o = new object(); // Let\u0027s assume that the GC run out of space, allocated a new memory block using virtual alloc, and the OS memory manager decides to give it the memory block that was just freed by `Marshal.FreeHGlobal`.\r\n\r\nGC.Collect(); // The GC may assert or crash because of it will see `byref b` pointing into middle of the segment where no valid byrefs are supposed to point to\r\n```\r\n\r\nContext: https://github.com/dotnet/runtime/pull/75857#discussion_r974679744\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-19T22:59:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kms2p",
                                           "createdAt":  "2022-09-19T23:07:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I\u0027m saying with regions that\u0027ll never happen. \r\n\r\nyes there\u0027ll still be 32-bit and segments will continue to be used there which makes it much lower priority.",
                                           "updatedAt":  "2022-09-19T23:07:51Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Make GC stack walking robust in the presence of unmanaged byrefs with extended lifetime",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76249",
        "createdAt":  "2022-09-27T15:03:05Z",
        "number":  76249,
        "author":  "loop-evgeny",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-10T13:27:01Z",
        "body":  "Following on from #52592 (which is locked now)... We tried upgrading our application from .NET Core 3.1 to .NET 6 again and, as @PeterSolMS wrote in https://github.com/dotnet/runtime/issues/52592#issuecomment-907247022, memory is not released to the OS until the server is low on RAM. (This is #37894, right?)\r\n\r\nThe problem this creates for us is that we do not know how much RAM a server _really_ has available to run more applications! We previously used Resident Set Size for this (on Ubuntu 18.04). The managed memory size reported by `GC.GetTotalMemory()` gives us some idea, but it\u0027s not enough - there is always a significant amount of unmanaged memory use, too, and that may increase and become more uncertain if we start using something like SQLite, for example.\r\n\r\nHow can we tell how much RAM is actually _needed_ by a .NET 6 application and how much would be available to other applications if they tried to use it?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY7iecw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LFJgF",
                                           "createdAt":  "2022-09-27T15:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFollowing on from #52592 (which is locked now)... We tried upgrading our application from .NET Core 3.1 to .NET 6 again and, as @PeterSolMS wrote in https://github.com/dotnet/runtime/issues/52592#issuecomment-907247022, memory is not released to the OS until the server is low on RAM. (This is #37894, right?)\r\n\r\nThe problem this creates for us is that we do not know how much RAM a server _really_ has available to run more applications! We previously used Resident Set Size for this (on Ubuntu 18.04). The managed memory size reported by `GC.GetTotalMemory()` gives us some idea, but it\u0027s not enough - there is always a significant amount of unmanaged memory use, too, and that may increase and become more uncertain if we start using something like SQLite, for example.\r\n\r\nHow can we tell how much RAM is actually _needed_ by a .NET 6 application and how much would be available to other applications if they tried to use it?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eloop-evgeny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-27T15:03:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFwL6",
                                           "createdAt":  "2022-09-27T17:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "From the GC\u0027s perspective, The GC doesn\u0027t know how much memory is used by SQLite either, so it cannot report how much memory is needed to run the application. But it knows two things.\r\n\r\n- The memory the application is using, through the `GC.GetTotalMemory()` API.\r\n- The memory the GC acquired from the operating system, through the `TotalCommittedBytes` property on `GCMemoryInfo`.\r\n\r\nSuppose:\r\n- You can also know the resident size, and\r\n- Let\u0027s assume the native code does not have much committed-but-not-used memory. (*)\r\n\r\n\u003e The (*) condition is highly questionable - I don\u0027t know SQLite, but databases usually come with a buffer manager that is memory hungry and commit memory just for eventual query use - you might want to figure out that and subtract that as well.\r\n\r\nThen you could compute the currently in use memory by:\r\n\r\ncurrently in use = resident set - total committed bytes + get total memory.\r\n\r\nAlso, note that the memory currently in use is not the same thing as \"how much memory is needed?\". These days, many libraries adjust their memory usage based on available memory (and thus trade off other performance characteristics, such as latency or throughput), so you might be trying to hit a moving target.\r\n\r\n\r\n\r\nOnce the memory is committed for one application, the OS cannot use that memory for another application, even when it is considered unused by the application. GC has no way to know that another application wanted to use it and therefore relinquish memory for other applications\u0027 use, we need someone to tell us that, and here is how:\r\n\r\n- https://github.com/dotnet/runtime/pull/69695 is a feature available in .NET 7 that allows you to decommit as much memory as possible from the GC. This is meant for applications going idle. It is a bad idea to decommit all the memory back to the operating system just to get it back again. But once you decommit, other applications can use it.\r\n\r\n- https://github.com/dotnet/runtime/issues/70601 is a proposal that is not implemented yet (prototype available) that allows you to tell the GC how much you would allow the GC to use dynamically. Once you tell the GC your intent, the GC can act the way you need it to.\r\n\r\n",
                                           "updatedAt":  "2022-09-27T17:04:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LGUUA",
                                           "createdAt":  "2022-09-27T19:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Thanks for such a prompt and detailed response @cshung!\r\n\r\n\u003e currently in use = resident set - total committed bytes + get total memory\r\n\r\nI will try out your formula as soon as I can, but just to make sure I understand it correctly: this is equivalent to `resident set - `(total committed bytes - get total memory)` where `(total committed bytes - get total memory)` is essentially \"memory that is committed, but not currently used by the GC\", while resident set = all memory committed (and not paged out), thus `currently in use = all committed - committed but not used` ?\r\n\r\nI\u0027d have to add the swapped out RAM (VmSwap from /proc/*/status) to RSS as well, I suppose.",
                                           "updatedAt":  "2022-09-27T19:20:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LGX9D",
                                           "createdAt":  "2022-09-27T19:35:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Thanks for such a prompt and detailed response @cshung!\r\n\u003e \r\n\u003e \u003e currently in use = resident set - total committed bytes + get total memory\r\n\u003e \r\n\u003e I will try out your formula as soon as I can, but just to make sure I understand it correctly: this is equivalent to `resident set - `(total committed bytes - get total memory)`where`(total committed bytes - get total memory)`is essentially \"memory that is committed, but not currently used by the GC\", while resident set = all memory committed (and not paged out), thus`currently in use = all committed - committed but not used` ?\r\n\u003e \r\n\u003e I\u0027d have to add the swapped out RAM (VmSwap from /proc/*/status) to RSS as well, I suppose.\r\n\r\nYes, that\u0027s the idea behind that formula. Although I would say\r\n\r\n`total committed bytes - get total memory` is essentially the \"memory that is committed, but not currently used as managed objects by the application\". ",
                                           "updatedAt":  "2022-09-27T19:35:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LJgd0",
                                           "createdAt":  "2022-09-28T11:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Also, just to confirm, it seems that `Process.WorkingSet64` returns resident set size (VmRSS in /proc/N/status) and `Process.PagedMemorySize64` returns VmSwap. So\r\n\r\n\u003e currently in use (including swap) = Process.WorkingSet64 + Process.PagedMemorySize64 - (GC.GetGCMemoryInfo().TotalCommittedBytes - GC.GetTotalMemory(false))\r\n\r\n\r\nright?",
                                           "updatedAt":  "2022-09-28T11:44:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LJvn-",
                                           "createdAt":  "2022-09-28T12:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Hmm, it seems that on Windows `Process.PagedMemorySize64` returns a very high value (\u003e WorkingSet64), even when the process just started and there is no memory pressure, while PagedSystemMemorySize64 returns the same value as shown by Process Hacker as \"Paged pool\". On Linux they both return VmRSS. So it seems like the formula is then\r\n\r\n\u003e currently in use (including swap) = Process.WorkingSet64 + Process.Paged**System**MemorySize64 - (GC.GetGCMemoryInfo().TotalCommittedBytes - GC.GetTotalMemory(false))",
                                           "updatedAt":  "2022-09-28T12:39:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MO73N",
                                           "createdAt":  "2022-10-14T13:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCt3iog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loop-evgeny",
                                                                               "createdAt":  "2022-10-14T14:32:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "\u003e as @PeterSolMS wrote in https://github.com/dotnet/runtime/issues/52592#issuecomment-907247022, memory is not released to the OS until the server is low on RAM. (This is https://github.com/dotnet/runtime/pull/37894, right?)\r\n\r\n\u003e Also, note that the memory currently in use is not the same thing as \"how much memory is needed?\". These days, many libraries adjust their memory usage based on available memory (and thus trade off other performance characteristics, such as latency or throughput), so you might be trying to hit a moving target.\r\n\r\n@Maoni0 There could be some merit in having GC return this kind of \"held back\" OS memory based on time. If I imagine a busy server running a bunch of .NET processes (incl. 3rd party applications, tools, tray icon applications, services, ...), the amount of \"optional\" commit could sum up.\r\n\r\nMaybe the GC could make a push to release stuff based on time, for example, after a minute of relative idleness.\r\n\r\nThis is relevant for desktop machines as well. Process Explorer shows quite a few .NET processes (colored in yellow) on my desktop (which is currently running 300 processes).\r\n\r\nApplications can do this cleanup themselves but most will not. If .NET included something sensible out of the box, that would help most machines converge to lower long-term memory usage. Defaults matter, and I have always appreciated the relatively low need to tune the .NET GC and to know its internals.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2022-10-14T13:04:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5juJ5z",
                                           "createdAt":  "2023-08-10T11:29:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "This new strategy of .NET hogging RAM until it needs to be released is still causing problems for us. Here is the RAM usage of an application that was moved from server A to server B to server C:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/34301024/36eb3648-4878-48ac-83df-297b6f8937fb)\r\n\r\nOn the left \"managed\" is from `GC.GetTotalMemory()` and \"used\" is calculated per [the earlier comment](https://github.com/dotnet/runtime/issues/76249#issuecomment-1259947264). On the right (\"committed\") is the Resident Set Size.\r\n\r\nServer A (Ubuntu 18.04) has 1024 GB RAM, 316 GB free.\r\nServer B (Ubuntu 22.04) has 1536 GB RAM, 391 GB free.\r\nServer C (Ubuntu 22.04) has 128 GB RAM, 119 GB free.\r\n\r\nWe\u0027re seeing this effect with many instances of the application (with different traffic) when moved to server B, not just one. This makes it very difficult to utilize it efficiently, as we don\u0027t know how much more RAM it _really_ has available before applications start slowing down. Historically, on .NET 3.1 and earlier, this happened at RSS around 70-80% of physical RAM. It\u0027s unclear where the threshold is for .NET 6.\r\n\r\n**Edit:** Apparently this is not a new issue in .NET 6, but something about that server. The same happened with an old version of our application running on .NET 3.1.32 when moved between those same 3 servers:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/34301024/f3d02ce2-76c7-461a-8ffa-5868a93ef860)\r\n",
                                           "updatedAt":  "2023-08-10T13:27:01Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "How to tell how much memory a .NET 6 application is really using?",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76921",
        "createdAt":  "2022-10-12T11:21:22Z",
        "number":  76921,
        "author":  "dmitrykolchev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-18T11:49:15Z",
        "body":  "### Description\n\nHi!\r\n\r\nStarted getting a segmentation fault after upgrading runtime to 6.0.10\r\n```\r\n2022-10-12 13:28:48.208 +03:00 [DBG] [] (Td=22, User=) Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine, View lookup cache miss for view \u0027_WidgetAreaWindow\u0027 in controller \u0027Home\u0027.\r\n2022-10-12 13:28:49.062 +03:00 [DBG] [] (Td=8, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.SafeTimerBase with dueTime=00:00:01 period=00:00:01\r\n2022-10-12 13:28:49.081 +03:00 [INF] [] (Td=8, User=) Orleans.OutsideRuntimeClient, ---------- Initializing OutsideRuntimeClient on srv-sam5-002 at 10.0.54.45 Client Id = *cli/17a2958d ----------\r\n2022-10-12 13:28:49.086 +03:00 [INF] [] (Td=8, User=) Orleans.OutsideRuntimeClient, ---------- Starting OutsideRuntimeClient with runtime Version=\u00273.6.5. Commit Hash: 54382a15b653f80784520c9055614cbf429a1b16+54382a15b653f80784520c9055614cbf429a1b16 (Release).\u0027 in AppDomain=\u003cAppDomain.Id=1, AppDomain.FriendlyName=SamApp\u003e\r\n2022-10-12 13:28:49.138 +03:00 [DBG] [] (Td=13, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.AsyncTaskSafeTimer with dueTime=00:01:00 period=00:01:00\r\nSegmentation fault\r\n```\r\n\r\n```\r\nMicrosoft.AspNetCore.App 6.0.10 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 6.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nrun under GDB\r\n\r\n```\r\n2022-10-12 14:03:59.929 +03:00 [DBG] [] (Td=13, User=) Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine, View lookup cache miss for view \u0027Components/WidgetArea/Default\u0027 in controller \u0027Home\u0027.\r\n2022-10-12 14:03:59.997 +03:00 [DBG] [] (Td=13, User=) Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine, View lookup cache miss for view \u0027_WidgetAreaWindow\u0027 in controller \u0027Home\u0027.\r\n2022-10-12 14:04:00.870 +03:00 [DBG] [] (Td=16, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.SafeTimerBase with dueTime=00:00:01 period=00:00:01\r\n2022-10-12 14:04:00.889 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Initializing OutsideRuntimeClient on srv-sam5-002 at 10.0.54.45 Client Id = *cli/5df74aa6 ----------\r\n2022-10-12 14:04:00.893 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Starting OutsideRuntimeClient with runtime Version=\u00273.6.5. Commit Hash: 54382a15b653f80784520c9055614cbf429a1b16+54382a15b653f80784520c9055614cbf429a1b16 (Release).\u0027 in AppDomain=\u003cAppDomain.Id=1, AppDomain.FriendlyName=SamApp\u003e\r\n2022-10-12 14:04:00.951 +03:00 [DBG] [] (Td=8, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.AsyncTaskSafeTimer with dueTime=00:01:00 period=00:01:00\r\n\r\nThread 21 \".NET ThreadPool\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7ffa277fe700 (LWP 19511)]\r\n0x0000000000000000 in ?? ()\r\n(gdb) info regsiters\r\nUndefined info command: \"regsiters\".  Try \"help info\".\r\n(gdb) info registers\r\nrax            0x7ffff6d520c0   140737334550720\r\nrbx            0x19     25\r\nrcx            0x7ffa277fd0e4   140712381239524\r\nrdx            0x0      0\r\nrsi            0x0      0\r\nrdi            0x5555559e59d0   93824997022160\r\nrbp            0x7ffa277fd0d0   0x7ffa277fd0d0\r\nrsp            0x7ffa277fd058   0x7ffa277fd058\r\nr8             0x0      0\r\nr9             0x19     25\r\nr10            0x6      6\r\nr11            0x0      0\r\nr12            0x5555559e56c0   93824997021376\r\nr13            0x7ffa277fd0e4   140712381239524\r\nr14            0x5555559e59d0   93824997022160\r\nr15            0x19     25\r\nrip            0x0      0x0\r\neflags         0x10246  [ PF ZF IF RF ]\r\ncs             0x33     51\r\nss             0x2b     43\r\nds             0x0      0\r\nes             0x0      0\r\nfs             0x0      0\r\ngs             0x0      0\r\n\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff6b10c4f in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.10/libcoreclr.so\r\n#2  0x00007ffff6b11e5b in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.10/libcoreclr.so\r\n#3  0x00007fff7cce537c in ?? ()\r\n#4  0x0000000000eca806 in ?? ()\r\n#5  0x00007ffff6d128f0 in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.10/libcoreclr.so\r\n#6  0x00007ffa277fdd10 in ?? ()\r\n#7  0x0000000000000000 in ?? ()\r\n```\r\n\n\n### Reproduction Steps\n\nall my .net core applications failed to start since image updated\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/2192524/195329812-58dad47a-1b97-469b-b56c-f717932a0e0a.png)\r\n\n\n### Expected behavior\n\napplications run without faults\n\n### Actual behavior\n\ngetint SIGSEGV in linux \r\nwhen I try run application under gdb \r\n\r\n```\r\n2022-10-12 14:04:00.870 +03:00 [DBG] [] (Td=16, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.SafeTimerBase with dueTime=00:00:01 period=00:00:01\r\n2022-10-12 14:04:00.889 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Initializing OutsideRuntimeClient on srv-sam5-002 at 10.0.54.45 Client Id = *cli/5df74aa6 ----------\r\n2022-10-12 14:04:00.893 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Starting OutsideRuntimeClient with runtime Version=\u00273.6.5. Commit Hash: 54382a15b653f80784520c9055614cbf429a1b16+54382a15b653f80784520c9055614cbf429a1b16 (Release).\u0027 in AppDomain=\u003cAppDomain.Id=1, AppDomain.FriendlyName=SamApp\u003e\r\n2022-10-12 14:04:00.951 +03:00 [DBG] [] (Td=8, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.AsyncTaskSafeTimer with dueTime=00:01:00 period=00:01:00\r\n\r\nThread 21 \".NET ThreadPool\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7ffa277fe700 (LWP 19511)]\r\n0x0000000000000000 in ?? ()\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\r\nDistributor ID: Debian\r\nDescription:    Debian GNU/Linux 9.13 (stretch)\r\nRelease:        9.13\r\nCodename:       stretch\r\n```\r\n\r\nDocker version 19.03.15, build 99e3ed8919\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaWSZBw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MDjtm",
                                           "createdAt":  "2022-10-12T11:21:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-12T11:21:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MkKt1",
                                           "createdAt":  "2022-10-19T20:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NikolaMilosavljevic",
                                           "body":  "[Triage] @dmitrykolchev , can you provide concrete repro steps? ",
                                           "updatedAt":  "2022-10-19T20:41:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MkLI3",
                                           "createdAt":  "2022-10-19T20:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2022-10-19T20:43:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M8MZw",
                                           "createdAt":  "2022-10-25T16:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitrykolchev",
                                           "body":  "@NikolaMilosavljevic Unfortunately I can\u0027t, it\u0027s a fairly large system. I found a workaround to get the system up and running. I publish the system using self-contained deployment mode with linux-x64 runtime. When I use framework-dependent deployment mode and portable target runtime all applications failed to start without any .net runtime exception. As I wrote above, this behavior appeared after using the docker image with aspnet core 6.0.10",
                                           "updatedAt":  "2022-10-25T16:40:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M9wD-",
                                           "createdAt":  "2022-10-25T23:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "botinko",
                                           "body":  "Hello! Looks like we hit same problem. We was able to collect useful diagnostics data: \r\n\r\n```\r\n(lldb) bt\r\n* thread #1, name = \u0027ServiceTitan.Fo\u0027, stop reason = signal SIGSEGV: invalid address (fault address: 0x8b8)\r\n  * frame #0: 0x00007ffff75d66a4 libcoreclr.so`SVR::GCHeap::AssignHeap(alloc_context*) [inlined] SVR::GCHeap::GetHeap(n=18) at gc.cpp:44896:33\r\n    frame #1: 0x00007ffff75d6696 libcoreclr.so`SVR::GCHeap::AssignHeap(acontext=0x000055555568d668) at gc.cpp:44889\r\n    frame #2: 0x00007ffff75d64f7 libcoreclr.so`SVR::GCHeap::Alloc(this=\u003cunavailable\u003e, context=0x000055555568d668, size=8184, flags=66) at gc.cpp:43628:9\r\n    frame #3: 0x00007ffff74a4127 libcoreclr.so`AllocateSzArray(MethodTable*, int, GC_ALLOC_FLAGS) at gchelpers.cpp:228:48\r\n    frame #4: 0x00007ffff74a40bf libcoreclr.so`AllocateSzArray(pArrayMT=\u003cunavailable\u003e, cElements=1020, flags=GC_ALLOC_CONTAINS_REF | GC_ALLOC_PINNED_OBJECT_HEAP) at gchelpers.cpp:0\r\n    frame #5: 0x00007ffff7315a48 libcoreclr.so`PinnedHeapHandleTable::AllocateHandles(unsigned int) at appdomain.cpp:150:35\r\n    frame #6: 0x00007ffff7315a24 libcoreclr.so`PinnedHeapHandleTable::AllocateHandles(this=0x00005555556d7d60, nRequested=\u003cunavailable\u003e) at appdomain.cpp:454\r\n    frame #7: 0x00007ffff7316c89 libcoreclr.so`BaseDomain::AllocateObjRefPtrsInLargeTable(this=0x0000555555674e90, nRequested=\u003cunavailable\u003e, ppLazyAllocate=0x00007fff7e204610) at appdomain.cpp:896:55\r\n    frame #8: 0x00007ffff7317b25 libcoreclr.so`SystemDomain::LoadBaseSystemClasses(this=\u003cunavailable\u003e) at appdomain.cpp:1454:33\r\n    frame #9: 0x00007ffff731776d libcoreclr.so`SystemDomain::Init(this=0x00007ffff79938c0) at appdomain.cpp:1266:5\r\n    frame #10: 0x00007ffff77632ac libcoreclr.so`EEStartupHelper() at ceemain.cpp:990:33\r\n    frame #11: 0x00007ffff77626b9 libcoreclr.so`EEStartup() [inlined] EEStartup(this=\u003cunavailable\u003e, p=\u003cunavailable\u003e)::$_0::operator()(void*) const at ceemain.cpp:1153:9\r\n    frame #12: 0x00007ffff77625bc libcoreclr.so`EEStartup() at ceemain.cpp:1155\r\n    frame #13: 0x00007ffff776251d libcoreclr.so`EnsureEEStarted() at ceemain.cpp:321:17\r\n    frame #14: 0x00007ffff736085e libcoreclr.so`CorHost2::Start(this=0x00005555555a50e0) at corhost.cpp:101:14\r\n    frame #15: 0x00007ffff7313c45 libcoreclr.so`::coreclr_initialize(exePath=\u003cunavailable\u003e, appDomainFriendlyName=\u003cunavailable\u003e, propertyCount=11, propertyKeys=\u003cunavailable\u003e, propertyValues=\u003cunavailable\u003e, hostHandle=0x00007fffffffd818, domainId=0x00007fffffffd814) at unixinterface.cpp:251:16\r\n    frame #16: 0x00007ffff79dd66f libhostpolicy.so`coreclr_t::create(libcoreclr_path=\u003cunavailable\u003e, exe_path=\"/app/ServiceTitan.Forms.Api\", app_domain_friendly_name=\"clrhost\", properties=0x000055555558d308, inst=nullptr) at coreclr.cpp:58:10\r\n    frame #17: 0x00007ffff79edba1 libhostpolicy.so`(anonymous namespace)::create_coreclr() at hostpolicy.cpp:74:23\r\n    frame #18: 0x00007ffff79ed45a libhostpolicy.so`::corehost_main(argc=1, argv=0x00007fffffffddc8) at hostpolicy.cpp:426:10\r\n    frame #19: 0x00007ffff7a46d14 libhostfxr.so`fx_muxer_t::handle_exec_host_command(std::string const\u0026, host_startup_info_t const\u0026, std::string const\u0026, std::unordered_map\u003cknown_options, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e, known_options_hash, std::equal_to\u003cknown_options\u003e, std::allocator\u003cstd::pair\u003ckno\r\nwn_options const, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e \u003e \u003e \u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) at fx_muxer.cpp:146:20\r\n    frame #20: 0x00007ffff7a46be7 libhostfxr.so`fx_muxer_t::handle_exec_host_command(std::string const\u0026, host_startup_info_t const\u0026, std::string const\u0026, std::unordered_map\u003cknown_options, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e, known_options_hash, std::equal_to\u003cknown_options\u003e, std::allocator\u003cstd::pair\u003ckno\r\nwn_options const, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e \u003e \u003e \u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) [inlined] (anonymous namespace)::read_config_and_execute(host_command=\u003cunavailable\u003e, host_info=\u003cunavailable\u003e, app_candidate=error: summary string parsing error, opts=0x00007\r\nffff79ed3c0, new_argc=1, new_argv=0x00007fffffffddc8, mode=\u003cunavailable\u003e, is_sdk_command=\u003cunavailable\u003e, out_buffer=\u003cunavailable\u003e, buffer_size=\u003cunavailable\u003e, required_buffer_size=\u003cunavailable\u003e) at fx_muxer.cpp:533\r\n    frame #21: 0x00007ffff7a46940 libhostfxr.so`fx_muxer_t::handle_exec_host_command(host_command=\u003cunavailable\u003e, host_info=\u003cunavailable\u003e, app_candidate=\u003cunavailable\u003e, opts=\u003cunavailable\u003e, argc=\u003cunavailable\u003e, argv=\u003cunavailable\u003e, argoff=1, mode=apphost, is_sdk_command=\u003cunavailable\u003e, result_buffer=0x0000000000000000, buffer\r\n_size=0, required_buffer_size=0x0000000000000000) at fx_muxer.cpp:1018\r\n    frame #22: 0x00007ffff7a45449 libhostfxr.so`fx_muxer_t::execute(host_command=error: summary string parsing error, argc=1, argv=0x00007fffffffddc8, host_info=0x00007fffffffdb90, result_buffer=0x0000000000000000, buffer_size=0, required_buffer_size=0x0000000000000000) at fx_muxer.cpp:579:18\r\n    frame #23: 0x00007ffff7a4093b libhostfxr.so`::hostfxr_main_startupinfo(argc=1, argv=0x00007fffffffddc8, host_path=\"/app/ServiceTitan.Forms.Api\", dotnet_root=\"/usr/share/dotnet\", app_path=\"/app/ServiceTitan.Forms.Api.dll\") at hostfxr.cpp:61:12\r\n    frame #24: 0x0000555555564a25 ServiceTitan.Forms.Api`exe_start(argc=1, argv=0x00007fffffffddc8) at corehost.cpp:235:18\r\n    frame #25: 0x0000555555564ef0 ServiceTitan.Forms.Api`main(argc=1, argv=0x00007fffffffddc8) at corehost.cpp:301:21\r\n    frame #26: 0x00007ffff7ac3d0a libc.so.6`__libc_start_main + 234\r\n    frame #27: 0x0000555555558d7a ServiceTitan.Forms.Api`_start + 41\r\n(lldb) dumpstack\r\nOS Thread Id: 0xfd3 (1)\r\nTEB information is not available so a stack size of 0xFFFF is assumed\r\nCurrent frame: libcoreclr.so!SVR::GCHeap::AssignHeap(alloc_context*) + 0xf4 [/__w/1/s/src/coreclr/gc/gc.cpp:44896]\r\nChild-SP         RetAddr          Caller, Callee\r\n00007FFFFFFFD3A0 00007ffff75d64f7 libcoreclr.so!SVR::GCHeap::Alloc(gc_alloc_context*, unsigned long, unsigned int) + 0xd7 [/__w/1/s/src/coreclr/gc/gc.h:233], calling libcoreclr.so!SVR::GCHeap::AssignHeap(alloc_context*) [/__w/1/s/src/coreclr/gc/gc.cpp:44887]\r\n00007FFFFFFFD3E0 00007ffff74a4127 libcoreclr.so!AllocateSzArray(MethodTable*, int, GC_ALLOC_FLAGS) + 0x137 [/__w/1/s/src/coreclr/vm/gchelpers.cpp:239]\r\n00007FFFFFFFD440 00007ffff7315a48 libcoreclr.so!PinnedHeapHandleTable::AllocateHandles(unsigned int) + 0x1a8 [/__w/1/s/src/coreclr/vm/appdomain.cpp:0], calling libcoreclr.so!AllocateObjectArray(unsigned int, TypeHandle, int) [/__w/1/s/src/coreclr/vm/gchelpers.cpp:806]\r\n00007FFFFFFFD480 00007ffff7316c89 libcoreclr.so!BaseDomain::AllocateObjRefPtrsInLargeTable(int, Object***) + 0xc9 [/__w/1/s/src/coreclr/vm/appdomain.cpp:0], calling libcoreclr.so!PinnedHeapHandleTable::AllocateHandles(unsigned int) [/__w/1/s/src/coreclr/vm/appdomain.cpp:385]\r\n00007FFFFFFFD4D0 00007ffff7317b25 libcoreclr.so!SystemDomain::LoadBaseSystemClasses() + 0x1e5 [/__w/1/s/src/coreclr/vm/appdomain.cpp:1458], calling libcoreclr.so!Module::AllocateRegularStaticHandles(AppDomain*) [/__w/1/s/src/coreclr/vm/ceeload.cpp:2739]\r\n00007FFFFFFFD4F0 00007ffff731776d libcoreclr.so!SystemDomain::Init() + 0x22d [/__w/1/s/src/coreclr/vm/threads.inl:42], calling libcoreclr.so!SystemDomain::LoadBaseSystemClasses() [/__w/1/s/src/coreclr/vm/appdomain.cpp:1390]\r\n00007FFFFFFFD560 00007ffff77632ac libcoreclr.so!EEStartupHelper() + 0x6ac [/__w/1/s/src/coreclr/vm/ceemain.cpp:998], calling libcoreclr.so!SystemDomain::Init() [/__w/1/s/src/coreclr/vm/appdomain.cpp:1212]\r\n00007FFFFFFFD5F0 00007ffff77626b9 libcoreclr.so!EEStartup() + 0x169 [/__w/1/s/src/coreclr/pal/inc/pal.h:4656], calling libcoreclr.so!EEStartupHelper() [/__w/1/s/src/coreclr/vm/ceemain.cpp:616]\r\n00007FFFFFFFD660 00007ffff776251d libcoreclr.so!EnsureEEStarted() + 0x12d [/__w/1/s/src/coreclr/inc/volatile.h:182], calling libcoreclr.so!EEStartup() [/__w/1/s/src/coreclr/vm/ceemain.cpp:1137]\r\n00007FFFFFFFD680 00007ffff736085e libcoreclr.so!CorHost2::Start() + 0x6e [/__w/1/s/src/coreclr/vm/corhost.cpp:102], calling libcoreclr.so!EnsureEEStarted() [/__w/1/s/src/coreclr/vm/ceemain.cpp:278]\r\n00007FFFFFFFD6A0 00007ffff7313c45 libcoreclr.so!coreclr_initialize + 0x135 [/__w/1/s/src/coreclr/dlls/mscoree/unixinterface.cpp:0]\r\n00007FFFFFFFD730 00007ffff79dd66f libhostpolicy.so!coreclr_t::create(std::string const\u0026, char const*, char const*, coreclr_property_bag_t const\u0026, std::unique_ptr\u003ccoreclr_t, std::default_delete\u003ccoreclr_t\u003e \u003e\u0026) + 0x30f [/root/runtime/src/native/corehost/hostpolicy/coreclr.cpp:0]\r\n00007FFFFFFFD850 00007ffff79edba1 libhostpolicy.so!(anonymous namespace)::create_coreclr() + 0x181 [/root/runtime/src/native/corehost/hostpolicy/hostpolicy.cpp:0], calling libhostpolicy.so!coreclr_t::create(std::string const\u0026, char const*, char const*, coreclr_property_bag_t const\u0026, std::unique_ptr\u003ccoreclr_t, std::defau\r\nlt_delete\u003ccoreclr_t\u003e \u003e\u0026) [/root/runtime/src/native/corehost/hostpolicy/coreclr.cpp:29]\r\n00007FFFFFFFD880 00007ffff79ed45a libhostpolicy.so!corehost_main + 0x9a [/root/runtime/src/native/corehost/hostpolicy/hostpolicy.cpp:0], calling libhostpolicy.so!(anonymous namespace)::create_coreclr() [/root/runtime/src/native/corehost/hostpolicy/hostpolicy.cpp:48]\r\n00007FFFFFFFD960 00007ffff7a46d14 libhostfxr.so!fx_muxer_t::handle_exec_host_command(std::string const\u0026, host_startup_info_t const\u0026, std::string const\u0026, std::unordered_map\u003cknown_options, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e, known_options_hash, std::equal_to\u003cknown_options\u003e, std::allocator\u003cstd::pair\u003ckno\r\nwn_options const, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e \u003e \u003e \u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) + 0x714 [/root/runtime/src/native/corehost/fxr/fx_muxer.cpp:0]\r\n00007FFFFFFFDA90 00007ffff7a45449 libhostfxr.so!fx_muxer_t::execute(std::string, int, char const**, host_startup_info_t const\u0026, char*, int, int*) + 0x299 [/root/runtime/src/native/corehost/fxr/fx_muxer.cpp:579], calling libhostfxr.so!fx_muxer_t::handle_exec_host_command(std::string const\u0026, host_startup_info_t const\u0026, st\r\nd::string const\u0026, std::unordered_map\u003cknown_options, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e, known_options_hash, std::equal_to\u003cknown_options\u003e, std::allocator\u003cstd::pair\u003cknown_options const, std::vector\u003cstd::string, std::allocator\u003cstd::string\u003e \u003e \u003e \u003e \u003e const\u0026, int, char const**, int, host_mode_t, bool, char*\r\n, int, int*) [/root/runtime/src/native/corehost/fxr/fx_muxer.cpp:1001]\r\n00007FFFFFFFDB30 00007ffff7a5d5a5 libhostfxr.so!trace::setup() + 0x35 [/root/runtime/src/native/corehost/hostmisc/trace.cpp:26], calling libhostfxr.so!pal::getenv(char const*, std::string*) [/root/runtime/src/native/corehost/hostmisc/pal.unix.cpp:848]\r\n00007FFFFFFFDB70 00007ffff7a4093b libhostfxr.so!hostfxr_main_startupinfo + 0xab [/root/runtime/src/native/corehost/fxr/hostfxr.cpp:0], calling libhostfxr.so!fx_muxer_t::execute(std::string, int, char const**, host_startup_info_t const\u0026, char*, int, int*) [/root/runtime/src/native/corehost/fxr/fx_muxer.cpp:556]\r\n00007FFFFFFFDBE0 0000555555564a25 ServiceTitan.Forms.Api!exe_start(int, char const**) + 0x415 [/root/runtime/src/native/corehost/corehost.cpp:0]\r\n00007FFFFFFFDC50 0000555555559215 ServiceTitan.Forms.Api!trace::setup() + 0x35 [/root/runtime/src/native/corehost/hostmisc/trace.cpp:26], calling ServiceTitan.Forms.Api!pal::getenv(char const*, std::string*) [/root/runtime/src/native/corehost/hostmisc/pal.unix.cpp:848]\r\n00007FFFFFFFDC90 0000555555564ef0 ServiceTitan.Forms.Api!main + 0x90 [/root/runtime/src/native/corehost/corehost.cpp:301], calling ServiceTitan.Forms.Api!exe_start(int, char const**) [/root/runtime/src/native/corehost/corehost.cpp:97]\r\n00007FFFFFFFDCD0 00007ffff7ac3d0a libc.so.6!__libc_start_main + 0xea\r\n00007FFFFFFFDDA0 0000555555558d7a ServiceTitan.Forms.Api!_start + 0x29, calling ServiceTitan.Forms.Api!__libc_start_main\r\n```\r\n\r\n```\r\n# dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.402\r\n Commit:    6862418796\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  11\r\n OS Platform: Linux\r\n RID:         debian.11-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.402/\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.10\r\n  Architecture: x64\r\n  Commit:       5a400c212a\r\n\r\n.NET SDKs installed:\r\n  6.0.402 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.10 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\r\n\r\n```\r\n# lscpu\r\nArchitecture:                    x86_64\r\nCPU op-mode(s):                  32-bit, 64-bit\r\nByte Order:                      Little Endian\r\nAddress sizes:                   48 bits physical, 48 bits virtual\r\nCPU(s):                          32\r\nOn-line CPU(s) list:             0-31\r\nThread(s) per core:              2\r\nCore(s) per socket:              16\r\nSocket(s):                       1\r\nNUMA node(s):                    4\r\nVendor ID:                       AuthenticAMD\r\nCPU family:                      23\r\nModel:                           49\r\nModel name:                      AMD EPYC 7452 32-Core Processor\r\nStepping:                        0\r\nCPU MHz:                         2345.606\r\nBogoMIPS:                        4691.21\r\nHypervisor vendor:               Microsoft\r\nVirtualization type:             full\r\nL1d cache:                       512 KiB\r\nL1i cache:                       512 KiB\r\nL2 cache:                        8 MiB\r\nL3 cache:                        64 MiB\r\nNUMA node0 CPU(s):               0-7\r\nNUMA node1 CPU(s):               8-15\r\nNUMA node2 CPU(s):               16-23\r\nNUMA node3 CPU(s):               24-31\r\n```\r\n\r\nApp may crash at startup or after some activity. \r\n\r\nWe use\r\n`COMPlus_GCHeapCount=8` and `COMPlus_GCHeapHardLimitPercent=0x5A` \r\n\r\nAfter unset `COMPlus_GCHeapCount` issue gone away. ",
                                           "updatedAt":  "2022-10-25T23:45:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M9yAK",
                                           "createdAt":  "2022-10-26T00:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nHi!\r\n\r\nStarted getting a segmentation fault after upgrading runtime to 6.0.10\r\n```\r\n2022-10-12 13:28:48.208 +03:00 [DBG] [] (Td=22, User=) Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine, View lookup cache miss for view \u0027_WidgetAreaWindow\u0027 in controller \u0027Home\u0027.\r\n2022-10-12 13:28:49.062 +03:00 [DBG] [] (Td=8, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.SafeTimerBase with dueTime=00:00:01 period=00:00:01\r\n2022-10-12 13:28:49.081 +03:00 [INF] [] (Td=8, User=) Orleans.OutsideRuntimeClient, ---------- Initializing OutsideRuntimeClient on srv-sam5-002 at 10.0.54.45 Client Id = *cli/17a2958d ----------\r\n2022-10-12 13:28:49.086 +03:00 [INF] [] (Td=8, User=) Orleans.OutsideRuntimeClient, ---------- Starting OutsideRuntimeClient with runtime Version=\u00273.6.5. Commit Hash: 54382a15b653f80784520c9055614cbf429a1b16+54382a15b653f80784520c9055614cbf429a1b16 (Release).\u0027 in AppDomain=\u003cAppDomain.Id=1, AppDomain.FriendlyName=SamApp\u003e\r\n2022-10-12 13:28:49.138 +03:00 [DBG] [] (Td=13, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.AsyncTaskSafeTimer with dueTime=00:01:00 period=00:01:00\r\nSegmentation fault\r\n```\r\n\r\n```\r\nMicrosoft.AspNetCore.App 6.0.10 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 6.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nrun under GDB\r\n\r\n```\r\n2022-10-12 14:03:59.929 +03:00 [DBG] [] (Td=13, User=) Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine, View lookup cache miss for view \u0027Components/WidgetArea/Default\u0027 in controller \u0027Home\u0027.\r\n2022-10-12 14:03:59.997 +03:00 [DBG] [] (Td=13, User=) Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine, View lookup cache miss for view \u0027_WidgetAreaWindow\u0027 in controller \u0027Home\u0027.\r\n2022-10-12 14:04:00.870 +03:00 [DBG] [] (Td=16, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.SafeTimerBase with dueTime=00:00:01 period=00:00:01\r\n2022-10-12 14:04:00.889 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Initializing OutsideRuntimeClient on srv-sam5-002 at 10.0.54.45 Client Id = *cli/5df74aa6 ----------\r\n2022-10-12 14:04:00.893 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Starting OutsideRuntimeClient with runtime Version=\u00273.6.5. Commit Hash: 54382a15b653f80784520c9055614cbf429a1b16+54382a15b653f80784520c9055614cbf429a1b16 (Release).\u0027 in AppDomain=\u003cAppDomain.Id=1, AppDomain.FriendlyName=SamApp\u003e\r\n2022-10-12 14:04:00.951 +03:00 [DBG] [] (Td=8, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.AsyncTaskSafeTimer with dueTime=00:01:00 period=00:01:00\r\n\r\nThread 21 \".NET ThreadPool\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7ffa277fe700 (LWP 19511)]\r\n0x0000000000000000 in ?? ()\r\n(gdb) info regsiters\r\nUndefined info command: \"regsiters\".  Try \"help info\".\r\n(gdb) info registers\r\nrax            0x7ffff6d520c0   140737334550720\r\nrbx            0x19     25\r\nrcx            0x7ffa277fd0e4   140712381239524\r\nrdx            0x0      0\r\nrsi            0x0      0\r\nrdi            0x5555559e59d0   93824997022160\r\nrbp            0x7ffa277fd0d0   0x7ffa277fd0d0\r\nrsp            0x7ffa277fd058   0x7ffa277fd058\r\nr8             0x0      0\r\nr9             0x19     25\r\nr10            0x6      6\r\nr11            0x0      0\r\nr12            0x5555559e56c0   93824997021376\r\nr13            0x7ffa277fd0e4   140712381239524\r\nr14            0x5555559e59d0   93824997022160\r\nr15            0x19     25\r\nrip            0x0      0x0\r\neflags         0x10246  [ PF ZF IF RF ]\r\ncs             0x33     51\r\nss             0x2b     43\r\nds             0x0      0\r\nes             0x0      0\r\nfs             0x0      0\r\ngs             0x0      0\r\n\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff6b10c4f in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.10/libcoreclr.so\r\n#2  0x00007ffff6b11e5b in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.10/libcoreclr.so\r\n#3  0x00007fff7cce537c in ?? ()\r\n#4  0x0000000000eca806 in ?? ()\r\n#5  0x00007ffff6d128f0 in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/6.0.10/libcoreclr.so\r\n#6  0x00007ffa277fdd10 in ?? ()\r\n#7  0x0000000000000000 in ?? ()\r\n```\r\n\n\n### Reproduction Steps\n\nall my .net core applications failed to start since image updated\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/2192524/195329812-58dad47a-1b97-469b-b56c-f717932a0e0a.png)\r\n\n\n### Expected behavior\n\napplications run without faults\n\n### Actual behavior\n\ngetint SIGSEGV in linux \r\nwhen I try run application under gdb \r\n\r\n```\r\n2022-10-12 14:04:00.870 +03:00 [DBG] [] (Td=16, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.SafeTimerBase with dueTime=00:00:01 period=00:00:01\r\n2022-10-12 14:04:00.889 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Initializing OutsideRuntimeClient on srv-sam5-002 at 10.0.54.45 Client Id = *cli/5df74aa6 ----------\r\n2022-10-12 14:04:00.893 +03:00 [INF] [] (Td=16, User=) Orleans.OutsideRuntimeClient, ---------- Starting OutsideRuntimeClient with runtime Version=\u00273.6.5. Commit Hash: 54382a15b653f80784520c9055614cbf429a1b16+54382a15b653f80784520c9055614cbf429a1b16 (Release).\u0027 in AppDomain=\u003cAppDomain.Id=1, AppDomain.FriendlyName=SamApp\u003e\r\n2022-10-12 14:04:00.951 +03:00 [DBG] [] (Td=8, User=) Orleans.Runtime.SafeTimer, Creating timer Orleans.Runtime.AsyncTaskSafeTimer with dueTime=00:01:00 period=00:01:00\r\n\r\nThread 21 \".NET ThreadPool\" received signal SIGSEGV, Segmentation fault.\r\n[Switching to Thread 0x7ffa277fe700 (LWP 19511)]\r\n0x0000000000000000 in ?? ()\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\r\nDistributor ID: Debian\r\nDescription:    Debian GNU/Linux 9.13 (stretch)\r\nRelease:        9.13\r\nCodename:       stretch\r\n```\r\n\r\nDocker version 19.03.15, build 99e3ed8919\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edmitrykolchev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `needs-further-triage`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-26T00:01:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M90Au",
                                           "createdAt":  "2022-10-26T00:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "hi @botinko @dmitrykolchev did you start hitting this issue after moving from 6.0.9 to 6.0.10 or a previous major version? Would you be able to share a dump privately so we can investigate? thanks",
                                           "updatedAt":  "2022-10-26T00:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M95L2",
                                           "createdAt":  "2022-10-26T00:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "botinko",
                                           "body":  "@mangod9 It started happening after upgrade from latest dotnet 5 to `6.0.10`. I cannot give a dump, because coredump generated by CLR (via COMPlus_DbgEnableMiniDump) doesn\u0027t contain needed data. It shows like all threads is in SIGABRT and I can\u0027t find problematic stack. I got all information by running my app under lldb. \r\nMaybe it\u0027s possible to make a dump from lldb session, but I won\u0027t find how. \r\nAlso dump contains sensitive data. I think it will be possible to create repro, but it will require additional work. \r\nI still able to reproduce issue on our stage env and gather needed data. \r\n",
                                           "updatedAt":  "2022-10-26T00:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M96Zi",
                                           "createdAt":  "2022-10-26T00:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Looks like the issue is happening on startup from the stack you provided. So if you create a simple hello world app does the issue repro in that container (and hardware)? Also looks like its failing to find a heap, are you running on hardware with multiple NUMA nodes possibly and are you restricting CPUs for the container? ",
                                           "updatedAt":  "2022-10-26T00:59:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M9_3t",
                                           "createdAt":  "2022-10-26T01:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "botinko",
                                           "body":  "```\r\nModel name:                      AMD EPYC 7452 32-Core Processor\r\nNUMA node0 CPU(s):               0-7\r\nNUMA node1 CPU(s):               8-15\r\nNUMA node2 CPU(s):               16-23\r\nNUMA node3 CPU(s):               24-31\r\n```\r\n\r\nFor this pod we don\u0027t set CPU limit, but we set `COMPlus_GCHeapCount=8`. \r\nAlso found very similar issue https://github.com/dotnet/runtime/issues/67008 ",
                                           "updatedAt":  "2022-10-26T01:16:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M-DCZ",
                                           "createdAt":  "2022-10-26T01:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok thanks. Yeah this seems to be a dupe of https://github.com/dotnet/runtime/issues/67008. Looks like there are only 8 heaps per your config but there is a discrepancy where the GC is still trying to find Heap 18. Guessing if you restrict the CPUs to 8 on the container it might work around the issue. ",
                                           "updatedAt":  "2022-10-26T01:20:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NA5Px",
                                           "createdAt":  "2022-10-26T13:48:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmitrykolchev",
                                           "body":  "@mangod9 \r\n\r\n\u003e hi @botinko @dmitrykolchev did you start hitting this issue after moving from 6.0.9 to 6.0.10\r\n\r\nWe have no issues with 6.0.9 and all previous releases of .NET 6 runtime. This problem started on october 11, 2022 when docker image was updated to 6.0.10. We test nightly builds every day, so I know for sure the date when applications started to crash",
                                           "updatedAt":  "2022-10-26T13:48:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NBA24",
                                           "createdAt":  "2022-10-26T14:09:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Looking through changes in 6.0.10, I dont see anything that stands out which might be causing it. Since you are observing that all applications are failing when deployed as framework dependent, perhaps you observe the same behavior for a simple webapp? We will try to repro as well with that docker image. ",
                                           "updatedAt":  "2022-10-26T14:09:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nxfer",
                                           "createdAt":  "2022-11-06T14:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@dmitrykolchev, havent been able to repro it locally. Are you able to share a dump or a container with a repro? Thx\r\n",
                                           "updatedAt":  "2022-11-06T14:56:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N0rcQ",
                                           "createdAt":  "2022-11-07T13:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Iliya-usov",
                                           "body":  "Hi!\r\nIt looks like we have a similar issue with server gc on linux\r\nWe set `DOTNET_GCHeapCount=2` and `DOTNET_GCNoAffinitize=1`\r\nUnsetting `DOTNET_GCHeapCount` fixes the problem\r\n\r\n[stack.txt](https://github.com/dotnet/runtime/files/9952194/stack.txt)\r\n\r\n```\r\n(lldb) bt all\r\n* thread #1, stop reason = signal SIGSEGV\r\n  * frame #0: 0x00007f43fe30aaa4 libcoreclr.so`SVR::gc_heap::balance_heaps_uoh(alloc_context*, unsigned long, int) [inlined] SVR::GCHeap::GetHeap(n=12) at gc.cpp:44894:33\r\n    frame #1: 0x00007f43fe30aa96 libcoreclr.so`SVR::gc_heap::balance_heaps_uoh(acontext=\u003cunavailable\u003e, alloc_size=\u003cunavailable\u003e, generation_num=4) at gc.cpp:17324:24\r\n    frame #2: 0x00007f43fe30adfb libcoreclr.so`SVR::gc_heap::allocate_more_space(acontext=0x00007fff8256b7e0, size=4120, flags=66, alloc_generation_number=4) at gc.cpp:17440:30\r\n    frame #3: 0x00007f43fe3357dd libcoreclr.so`SVR::gc_heap::allocate_uoh_object(this=0x000055eb09bbcbb0, jsize=\u003cunavailable\u003e, flags=66, gen_number=\u003cunavailable\u003e, alloc_bytes=0x000055eb09b9ca10) at gc.cpp:39367:11\r\n    frame #4: 0x00007f43fe3392d8 libcoreclr.so`SVR::GCHeap::Alloc(this=\u003cunavailable\u003e, context=\u003cunavailable\u003e, size=4120, flags=66) at gc.cpp:43651:34\r\n    frame #5: 0x00007f43fe207017 libcoreclr.so`AllocateSzArray(MethodTable*, int, GC_ALLOC_FLAGS) at gchelpers.cpp:228:48\r\n    frame #6: 0x00007f43fe206faf libcoreclr.so`AllocateSzArray(pArrayMT=\u003cunavailable\u003e, cElements=512, flags=GC_ALLOC_CONTAINS_REF | GC_ALLOC_PINNED_OBJECT_HEAP) at gchelpers.cpp:0\r\n    frame #7: 0x00007f43fe078a48 libcoreclr.so`PinnedHeapHandleTable::AllocateHandles(unsigned int) at appdomain.cpp:150:35\r\n    frame #8: 0x00007f43fe078a24 libcoreclr.so`PinnedHeapHandleTable::AllocateHandles(this=0x000055eb09abde10, nRequested=\u003cunavailable\u003e) at appdomain.cpp:454:23\r\n    frame #9: 0x00007f43fe2948b6 libcoreclr.so`GlobalStringLiteralMap::AddStringLiteral(EEStringData*) [inlined] PinnedHeapHandleBlockHolder::PinnedHeapHandleBlockHolder(this=\u003cunavailable\u003e, pOwner=\u003cunavailable\u003e, nCount=1) at appdomain.hpp:593:26\r\n\r\n```\r\n\r\nYou can get the coredump here\r\nhttps://drive.google.com/file/d/1-suS-vhS8RE9jJZf8ek-AfH69msm8CXY/view?usp=share_link\r\n",
                                           "updatedAt":  "2022-11-07T13:58:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N4fKM",
                                           "createdAt":  "2022-11-08T05:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok, thanks. Yeah the multi-NUMA + `DOTNET_GCHeapCount` is understood. Looks like the original issue is probably different though. ",
                                           "updatedAt":  "2022-11-08T05:22:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5o21gf",
                                           "createdAt":  "2023-10-12T08:55:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "We\u0027re getting crashes like this with GCHeapCount set to 1-9 _without_ setting GCNoAffinitize but with ServerGarbageCollection=true on certain servers (but not others). Reproducible with a trivial console EXE like this:\r\n\r\nheapcount.csproj:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cServerGarbageCollection\u003etrue\u003c/ServerGarbageCollection\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nProgram.cs:\r\n\r\n```\r\nSystem.Console.WriteLine(\"Hello, World!\");\r\n```\r\n\r\nI build a self-contained EXE in my dev VM with `/usr/bin/dotnet publish -c Release --self-contained -r linux-x64 -o bin/published` and upload the output to several servers. On 2 of them it crashes, like this:\r\n\r\n```\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=2 ./heapcount \r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=1 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=1 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=1 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=1 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=2 ./heapcount \r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=2 ./heapcount \r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=2 ./heapcount \r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=3 ./heapcount \r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=4 ./heapcount \r\nHello, World!\r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=4 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=4 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=4 ./heapcount \r\nHello, World!\r\nSegmentation fault (core dumped)\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=5 ./heapcount \r\nHello, World!\r\nevgeny@medusa:~/heapcount$ DOTNET_GCHeapCount=5 ./heapcount \r\nHello, World!\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nCore file: [heapcount-2-segfault.zip](https://github.com/dotnet/runtime/files/12879292/heapcount-2-segfault.zip)\r\n\r\nOn this particular machine (medusa) it never seems to crash with GCHeapCount=1, always with GCHeapCount=2, sometimes with 4. On another it usually crashes with GCHeapCount=1. On another it does not crash for any GCHeapCount I\u0027ve tried.\r\n\r\nMachines where it crashes are an Intel Xeon 6256 and a AMD EPYC 7302, with 512 GB RAM each. A machine on which it doesn\u0027t crash is Xeon E5-1650 with 256 GB RAM. All running Ubuntu 22.04.3. No Docker involved.\r\n\r\nBuild machine\u0027s `dotnet --info`:\r\n\r\n```\r\n.NET SDK:\r\n Version:   7.0.402\r\n Commit:    791db8e2d8\r\n\r\nRuntime Environment:\r\n OS Name:     linuxmint\r\n OS Version:  20\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/7.0.402/\r\n\r\nHost:\r\n  Version:      7.0.12\r\n  Architecture: x64\r\n  Commit:       4a824ef37c\r\n\r\n.NET SDKs installed:\r\n  6.0.415 [/usr/share/dotnet/sdk]\r\n  7.0.402 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.23 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.12 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.23 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.12 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```",
                                           "updatedAt":  "2023-10-12T08:55:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pRJrM",
                                           "createdAt":  "2023-10-17T10:12:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Ping @mangod9 (not sure if you get notifications for all comments on this issue)",
                                           "updatedAt":  "2023-10-17T10:12:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pTP6u",
                                           "createdAt":  "2023-10-17T15:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "hey @loop-evgeny, so I assume this only repros on machines with multiple NUMA nodes? Have you checked with .NET 7? ",
                                           "updatedAt":  "2023-10-17T15:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pTqVz",
                                           "createdAt":  "2023-10-17T16:25:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "@mangod9 Not according to `lscpu`. That reports `NUMA node(s):          1` on both the servers on which I\u0027ve seen the crash (as well as on those where it doesn\u0027t crash).\r\n\r\nI have not tried with .NET 7, but just tried .NET 8 RC 1 a few times and have not seen a crash, so it seems like this might be fixed!",
                                           "updatedAt":  "2023-10-17T16:25:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pXAZx",
                                           "createdAt":  "2023-10-18T04:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "yeah we made some fixes related to this in .NET 7. If this is blocking we can look into porting back to 6, but .NET 8 which is LTS should be released next month. ",
                                           "updatedAt":  "2023-10-18T04:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pXqoh",
                                           "createdAt":  "2023-10-18T07:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "We\u0027ve seen it crash reliably with DOTNET_GCHeapCount from 2 to 6, sometimes with DOTNET_GCHeapCount from 7 to 9 and so far never with DOTNET_GCHeapCount=10, so it\u0027s not blocking us immediately, but without understanding the problem, I\u0027m a bit concerned that it may yet start crashing on new servers or under new circumstances. Do you have some idea of what triggers it and how we can be sure to avoid it on .NET 6?",
                                           "updatedAt":  "2023-10-18T07:12:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pZJkH",
                                           "createdAt":  "2023-10-18T10:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loop-evgeny",
                                           "body":  "Just found that on another server, with an Intel Xeon Gold 6210U CPU (still 1 NUMA node), it crashes with a heap count of up to 13. Seems to work with 14. But that perfectly demonstrates what I was concerned about above. We can, of course, set it to 14.. or 15... or 20 - but how do we know what value is safe?",
                                           "updatedAt":  "2023-10-18T11:49:15Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "#SIGSEGV in linux docker since upgrade to 6.0.10",
        "labels":  [
                       "area-GC-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77128",
        "createdAt":  "2022-10-17T20:32:26Z",
        "number":  77128,
        "author":  "BrennanConroy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-01T20:52:44Z",
        "body":  "### Description\n\nWhen looking at dotnet counters while load testing a simple web app we noticed high GC fragmentation and a lot of gen1 GCs.\r\n\r\nThis behavior goes away when `$env:COMPLUS_GCName=\"clrgc.dll\"` is specified before running the app. So seems like it\u0027s something to do with GC Regions.\n\n### Reproduction Steps\n\nCreate the web app and run it\r\n```ps1\r\ndotnet new web\r\ndotnet run -c Release --urls \"https://localhost:7245;http://localhost:5044\"\r\n```\r\n\r\nWatch counters\r\n```ps1\r\ndotnet counters monitor -n exeName\r\n```\r\n\r\nCollect GC trace\r\n```ps1\r\ndotnet trace collect -n exeName --profile gc-verbose\r\n```\r\n\r\nRun load against app (used [bombardier](https://github.com/codesenberg/bombardier))\r\n```ps1\r\n.\\bombardier-windows-386.exe https://localhost:7245 -d 30s\r\n```\n\n### Expected behavior\n\nGen1 GCs should only occasionally run and fragmentation shouldn\u0027t be very high.\n\n### Actual behavior\n\nAfter 10-20 seconds you can see in `dotnet counters` that the `Gen 1 GC Count` becomes 4-11 per second. Viewing the trace in perfview shows a bunch of Gen1 GCs that don\u0027t look like they are doing anything. \r\n![image](https://user-images.githubusercontent.com/7574801/196276545-d628d533-4268-4dcc-b45c-17cffb347260.png)\n\n### Regression?\n\nYes. When using `$env:COMPLUS_GCName=\"clrgc.dll\"` the behavior does not exist.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYyCpAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MYX_K",
                                           "createdAt":  "2022-10-17T20:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen looking at dotnet counters while load testing a simple web app we noticed high GC fragmentation and a lot of gen1 GCs.\r\n\r\nThis behavior goes away when `$env:COMPLUS_GCName=\"clrgc.dll\"` is specified before running the app. So seems like it\u0027s something to do with GC Regions.\n\n### Reproduction Steps\n\nCreate the web app and run it\r\n```ps1\r\ndotnet new web\r\ndotnet run -c Release --urls \"https://localhost:7245;http://localhost:5044\"\r\n```\r\n\r\nWatch counters\r\n```ps1\r\ndotnet counters monitor -n exeName\r\n```\r\n\r\nCollect GC trace\r\n```ps1\r\ndotnet trace collect -n exeName --profile gc-verbose\r\n```\r\n\r\nRun load against app (used [bombardier](https://github.com/codesenberg/bombardier))\r\n```ps1\r\n.\\bombardier-windows-386.exe https://localhost:7245 -d 30s\r\n```\n\n### Expected behavior\n\nGen1 GCs should only occasionally run and fragmentation shouldn\u0027t be very high.\n\n### Actual behavior\n\nAfter 10-20 seconds you can see in `dotnet counters` that the `Gen 1 GC Count` becomes 4-11 per second. Viewing the trace in perfview shows a bunch of Gen1 GCs that don\u0027t look like they are doing anything. \r\n![image](https://user-images.githubusercontent.com/7574801/196276545-d628d533-4268-4dcc-b45c-17cffb347260.png)\n\n### Regression?\n\nYes. When using `$env:COMPLUS_GCName=\"clrgc.dll\"` the behavior does not exist.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBrennanConroy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-17T20:32:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Mqsxg",
                                           "createdAt":  "2022-10-20T23:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@BrennanConroy, I think I saw that before, do you have an idea why the gen1 size stuck?",
                                           "updatedAt":  "2022-10-20T23:12:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MrRgC",
                                           "createdAt":  "2022-10-21T03:30:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I tried the repro steps but got the \"x509: certificate signed by unknown authority\" error. the only difference is I\u0027m using bombardier-windows-amd64.exe. \r\n\r\nI\u0027m using the rc2 build. \r\n\r\nI\u0027m guessing you are using Workstation GC? I tried with both Workstation and Server GC and cannot repro the behavior with the default port -\r\n\r\n```\r\nC:\\scenarios\\MinWebApp\u003edotnet run -c Release\r\nBuilding...\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5021\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: C:\\scenarios\\MinWebApp\r\n```\r\nconnecting with \"bombardier-windows-amd64.exe http://localhost:5021 -d 30s\", a few times. and monitoring after it ran for a bit -\r\n\r\n```\r\nwith Server GC - \r\n\r\nC:\\realmon\\src\\GCRealTimeMon\\bin\\Release\\net6.0\u003eGCRealTimeMon -n MinWebApp\r\n------- press s for current stats or any other key to exit -------\r\n\r\nMonitoring process with name: MinWebApp and pid: 25760\r\nGC#     index |   gen |            type |                reason | pause (ms) | pause time (%) | gen1 size (mb) |\r\n----------------------------------------------------------------------------------------------------------------\r\nGC#        26 |     0 | NonConcurrentGC |            AllocSmall |       1.04 |            0.2 |          0.077 |\r\nGC#        27 |     0 | NonConcurrentGC |            AllocSmall |       0.79 |            0.1 |          0.077 |\r\nGC#        28 |     0 | NonConcurrentGC |            AllocSmall |       1.18 |            0.1 |          0.078 |\r\nGC#        29 |     0 | NonConcurrentGC |            AllocSmall |       1.05 |            0.1 |          0.081 |\r\nGC#        30 |     0 | NonConcurrentGC |            AllocSmall |       1.37 |            0.0 |          1.363 |\r\nGC#        31 |     0 | NonConcurrentGC |            AllocSmall |       1.02 |            0.1 |          1.365 |\r\nGC#        33 |     0 | NonConcurrentGC |            AllocSmall |       1.02 |            0.1 |          1.366 |\r\nGC#        32 |     2 |    BackgroundGC |            AllocSmall |       0.37 |            0.1 |          1.366 |\r\nGC#        34 |     1 | NonConcurrentGC |            AllocSmall |       0.71 |            0.1 |          0.005 |\r\nGC#        35 |     0 | NonConcurrentGC |            AllocSmall |       1.12 |            0.1 |          0.007 |\r\nGC#        36 |     0 | NonConcurrentGC |            AllocSmall |       0.66 |            0.1 |          0.008 |\r\nGC#        37 |     0 | NonConcurrentGC |            AllocSmall |       0.85 |            0.1 |          0.011 |\r\nGC#        38 |     0 | NonConcurrentGC |            AllocSmall |       1.16 |            0.1 |          0.012 |\r\nGC#        39 |     0 | NonConcurrentGC |            AllocSmall |       0.95 |            0.1 |          0.015 |\r\nGC#        40 |     0 | NonConcurrentGC |            AllocSmall |       0.92 |            0.1 |          0.017 |\r\nGC#        41 |     0 | NonConcurrentGC |            AllocSmall |       0.82 |            0.1 |          0.018 |\r\nGC#        42 |     0 | NonConcurrentGC |            AllocSmall |       0.95 |            0.1 |          0.019 |\r\nGC#        43 |     0 | NonConcurrentGC |            AllocSmall |       0.69 |            0.1 |          0.019 |\r\nGC#        44 |     0 | NonConcurrentGC |            AllocSmall |       1.03 |            0.1 |          0.020 |\r\nGC#        45 |     0 | NonConcurrentGC |            AllocSmall |       0.95 |            0.1 |          0.022 |\r\nGC#        46 |     0 | NonConcurrentGC |            AllocSmall |       0.86 |            0.1 |          0.023 |\r\nGC#        47 |     0 | NonConcurrentGC |            AllocSmall |       0.39 |            0.0 |          0.028 |\r\nGC#        48 |     0 | NonConcurrentGC |            AllocSmall |       0.79 |            0.1 |          0.029 |\r\nGC#        49 |     0 | NonConcurrentGC |            AllocSmall |       1.01 |            0.1 |          0.030 |\r\nGC#        50 |     0 | NonConcurrentGC |            AllocSmall |       1.14 |            0.1 |          0.031 |\r\nGC#        51 |     0 | NonConcurrentGC |            AllocSmall |       1.01 |            0.1 |          0.033 |\r\nGC#        52 |     0 | NonConcurrentGC |            AllocSmall |       0.96 |            0.1 |          0.036 |\r\nGC#        53 |     0 | NonConcurrentGC |            AllocSmall |       0.95 |            0.1 |          0.039 |\r\nGC#        54 |     0 | NonConcurrentGC |            AllocSmall |       1.32 |            0.1 |          0.041 |\r\nGC#        55 |     0 | NonConcurrentGC |            AllocSmall |       0.96 |            0.1 |          0.043 |\r\nGC#        56 |     0 | NonConcurrentGC |            AllocSmall |       0.75 |            0.1 |          0.044 |\r\nGC#        57 |     0 | NonConcurrentGC |            AllocSmall |       0.96 |            0.1 |          0.045 |\r\nGC#        58 |     0 | NonConcurrentGC |            AllocSmall |       0.37 |            0.0 |          0.050 |\r\n```\r\n\r\nwith Workstation GC -\r\n\r\n```\r\nC:\\realmon\\src\\GCRealTimeMon\\bin\\Release\\net6.0\u003eGCRealTimeMon -n MinWebApp\r\n------- press s for current stats or any other key to exit -------\r\n\r\nMonitoring process with name: MinWebApp and pid: 12024\r\nGC#     index |   gen |            type |                reason | pause (ms) | pause time (%) | gen1 size (mb) | gen0 alloc (mb) |\r\n----------------------------------------------------------------------------------------------------------------------------------\r\nGC#      1479 |     1 | NonConcurrentGC |            AllocSmall |       5.09 |            0.5 |          1.270 |           0.000 |\r\nGC#      1480 |     0 | NonConcurrentGC |            AllocSmall |       1.40 |            2.2 |          1.270 |          11.394 |\r\nGC#      1481 |     1 | NonConcurrentGC |            AllocSmall |       2.74 |            4.3 |          0.001 |          11.386 |\r\nGC#      1482 |     0 | NonConcurrentGC |            AllocSmall |       0.89 |            1.4 |          0.004 |          11.397 |\r\nGC#      1483 |     0 | NonConcurrentGC |            AllocSmall |       0.65 |            1.1 |          0.005 |          11.393 |\r\nGC#      1484 |     0 | NonConcurrentGC |            AllocSmall |       0.81 |            1.3 |          0.007 |          11.393 |\r\nGC#      1485 |     0 | NonConcurrentGC |            AllocSmall |       0.77 |            1.3 |          0.009 |          11.400 |\r\nGC#      1486 |     0 | NonConcurrentGC |            AllocSmall |       0.80 |            1.3 |          0.010 |          11.394 |\r\nGC#      1487 |     0 | NonConcurrentGC |            AllocSmall |       0.74 |            1.3 |          0.011 |          11.414 |\r\nGC#      1488 |     0 | NonConcurrentGC |            AllocSmall |       0.81 |            1.4 |          0.015 |          11.412 |\r\nGC#      1489 |     0 | NonConcurrentGC |            AllocSmall |       0.69 |            1.1 |          0.017 |          11.402 |\r\nGC#      1490 |     0 | NonConcurrentGC |            AllocSmall |       0.75 |            1.2 |          0.019 |          11.380 |\r\nGC#      1491 |     0 | NonConcurrentGC |            AllocSmall |       0.77 |            1.3 |          0.021 |          11.390 |\r\nGC#      1492 |     0 | NonConcurrentGC |            AllocSmall |       0.89 |            1.5 |          0.023 |          11.394 |\r\nGC#      1493 |     0 | NonConcurrentGC |            AllocSmall |       0.69 |            1.1 |          0.024 |          11.405 |\r\nGC#      1494 |     0 | NonConcurrentGC |            AllocSmall |       0.80 |            1.4 |          0.027 |          11.401 |\r\nGC#      1495 |     0 | NonConcurrentGC |            AllocSmall |       1.30 |            2.2 |          0.030 |          11.389 |\r\nGC#      1496 |     0 | NonConcurrentGC |            AllocSmall |       0.82 |            1.4 |          0.031 |          11.393 |\r\nGC#      1497 |     0 | NonConcurrentGC |            AllocSmall |       0.88 |            1.5 |          0.035 |          11.390 |\r\nGC#      1498 |     0 | NonConcurrentGC |            AllocSmall |       0.87 |            1.5 |          0.039 |          11.402 |\r\nGC#      1499 |     0 | NonConcurrentGC |            AllocSmall |       0.92 |            1.6 |          0.044 |          11.391 |\r\nGC#      1500 |     0 | NonConcurrentGC |            AllocSmall |       0.85 |            1.4 |          0.046 |          11.389 |\r\nGC#      1501 |     0 | NonConcurrentGC |            AllocSmall |       0.78 |            1.3 |          0.047 |          11.375 |\r\nGC#      1502 |     0 | NonConcurrentGC |            AllocSmall |       0.74 |            1.2 |          0.048 |          11.397 |\r\nGC#      1503 |     0 | NonConcurrentGC |            AllocSmall |       0.85 |            1.4 |          0.051 |          11.399 |\r\n```\r\n",
                                           "updatedAt":  "2022-10-21T03:30:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MuKY1",
                                           "createdAt":  "2022-10-21T16:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "\u003e I\u0027m guessing you are using Workstation GC?\r\n\r\nOh good point. I forgot David had me switch to Workstation GC. I don\u0027t see the same behavior with Server GC.\r\n\r\n\u003e I tried the repro steps but got the \"x509: certificate signed by unknown authority\" error.\r\n\r\nYou probably need to run `dotnet dev-certs https --trust`.\r\n\r\nI\u0027ve noticed that the issue mainly repros with https, I thought I saw it with http once, but it might have been a mix of http+https.",
                                           "updatedAt":  "2022-10-21T16:10:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MvMzd",
                                           "createdAt":  "2022-10-21T21:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuSyCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrennanConroy",
                                                                               "createdAt":  "2022-10-21T21:28:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "yep, I did need that cert thing. I can repro it now and will take a look shortly. thanks for reporting this!",
                                           "updatedAt":  "2022-10-21T21:13:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NXbjA",
                                           "createdAt":  "2022-11-01T03:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvfQGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cshung",
                                                                               "createdAt":  "2022-11-01T03:54:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2022-11-10T05:03:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-11-13T06:56:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the reason why it\u0027s doing continuous gen1s is because it promotes very little so we keep not promoting, and there happens to be a couple of pins at the end of gen1 so there\u0027s quite a bit of free spaces in gen1. there is a bug in the logic in `generation_to_condemn` that it would calculate the allocation efficiency of the free list as 0 so gen1 is considered to have \"too much unusable fragmentation\" which causes us to collect gen1. we shouldn\u0027t be collecting gen1 in this case since we haven\u0027t had a chance to use the free list. the same thing could happen with Server GC as well but it didn\u0027t happen here due to chance (there aren\u0027t pins in gen1 because they were promoted to gen2). this difference is very much due to the microbenchmark nature of the scenario. however we should still fix the bug in `generation_to_condemn`. we\u0027ll make a fix.",
                                           "updatedAt":  "2022-11-01T03:50:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jIKkD",
                                           "createdAt":  "2023-08-02T23:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@Maoni0 is this something we plan for 8 or should we move to 9? ",
                                           "updatedAt":  "2023-08-02T23:13:30Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Many Gen1 GCs doing nothing with high fragmentation",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78899",
        "createdAt":  "2022-11-28T01:27:26Z",
        "number":  78899,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T17:46:45Z",
        "body":  "Run: [runtime-coreclr gcstress-extra 20221126.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=94158\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1985540\u0026resultId=120161\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\ncoreclr windows x86 Checked heapverify1 @ Windows.10.Amd64.Open\r\n\r\n- GC\\\\Regressions\\\\Github\\\\Runtime_76219\\\\Runtime_76219\\\\Runtime_76219.cmd\r\n```\r\n**Error message:**\r\n```\r\nAssert failure(PID 876 [0x0000036c], Thread: 4844 [0x12ec]): Precondition failure: Illegal null pointerFAILED: ok\r\nFAILED: CheckPointer(pv)\r\nD:\\a_work\\1\\s\\src\\coreclr\\vm\\ceemain.cpp, line: 1013\r\n\r\nCORECLR! CHECK::Trigger + 0x256 (0x711dd930)\r\nCORECLR! FilterStartupException + 0x20C (0x71303289)\r\nCORECLR! EEStartup + 0x67 (0x71302355)\r\nCORECLR! EH4_CallFilterFunc + 0x12 (0x7131a772)\r\nCORECLR! except_handler4 + 0xD4 (0x71316724)\r\nNTDLL! RtlConvertUlongToLargeInteger + 0xA2 (0x77ac3292)\r\nNTDLL! RtlConvertUlongToLargeInteger + 0x74 (0x77ac3264)\r\nNTDLL! KiUserExceptionDispatcher + 0xF (0x77ab0dbf)\r\nCORECLR! WKS::gc_heap::gc1 + 0x689 (0x711b328d)\r\nCORECLR! WKS::gc_heap::garbage_collect + 0x3B4 (0x711b2b79)\r\nFile: D:\\a_work\\1\\s\\src\\coreclr\\inc\\check.h Line: 339\r\nImage: C:\\h\\w\\A5DC091E\\p\\corerun.exe\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\h\\w\\A5DC091E\\w\\AFA20916\\uploads\\Reports\\GC.Regressions\\Github\\Runtime_76219\\Runtime_76219\\Runtime_76219.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\"C:\\h\\w\\A5DC091E\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  Runtime_76219.dll\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\r\nset CORE_ROOT=C:\\h\\w\\A5DC091E\\p\r\nC:\\h\\w\\A5DC091E\\w\\AFA20916\\e\\GC\\Regressions\\Github\\Runtime_76219\\Runtime_76219\\Runtime_76219.cmd\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at GC_Regressions._Github_Runtime_76219_Runtime_76219_Runtime_76219_._Github_Runtime_76219_Runtime_76219_Runtime_76219_cmd()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkAtZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PLeih",
                                           "createdAt":  "2022-11-28T01:27:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRun: [runtime-coreclr gcstress-extra 20221126.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=94158\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1985540\u0026resultId=120161\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\ncoreclr windows x86 Checked heapverify1 @ Windows.10.Amd64.Open\r\n\r\n- GC\\\\Regressions\\\\Github\\\\Runtime_76219\\\\Runtime_76219\\\\Runtime_76219.cmd\r\n```\r\n**Error message:**\r\n```\r\nAssert failure(PID 876 [0x0000036c], Thread: 4844 [0x12ec]): Precondition failure: Illegal null pointerFAILED: ok\r\nFAILED: CheckPointer(pv)\r\nD:\\a_work\\1\\s\\src\\coreclr\\vm\\ceemain.cpp, line: 1013\r\n\r\nCORECLR! CHECK::Trigger + 0x256 (0x711dd930)\r\nCORECLR! FilterStartupException + 0x20C (0x71303289)\r\nCORECLR! EEStartup + 0x67 (0x71302355)\r\nCORECLR! EH4_CallFilterFunc + 0x12 (0x7131a772)\r\nCORECLR! except_handler4 + 0xD4 (0x71316724)\r\nNTDLL! RtlConvertUlongToLargeInteger + 0xA2 (0x77ac3292)\r\nNTDLL! RtlConvertUlongToLargeInteger + 0x74 (0x77ac3264)\r\nNTDLL! KiUserExceptionDispatcher + 0xF (0x77ab0dbf)\r\nCORECLR! WKS::gc_heap::gc1 + 0x689 (0x711b328d)\r\nCORECLR! WKS::gc_heap::garbage_collect + 0x3B4 (0x711b2b79)\r\nFile: D:\\a_work\\1\\s\\src\\coreclr\\inc\\check.h Line: 339\r\nImage: C:\\h\\w\\A5DC091E\\p\\corerun.exe\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\h\\w\\A5DC091E\\w\\AFA20916\\uploads\\Reports\\GC.Regressions\\Github\\Runtime_76219\\Runtime_76219\\Runtime_76219.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\"C:\\h\\w\\A5DC091E\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  Runtime_76219.dll\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\r\nset CORE_ROOT=C:\\h\\w\\A5DC091E\\p\r\nC:\\h\\w\\A5DC091E\\w\\AFA20916\\e\\GC\\Regressions\\Github\\Runtime_76219\\Runtime_76219\\Runtime_76219.cmd\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at GC_Regressions._Github_Runtime_76219_Runtime_76219_Runtime_76219_._Github_Runtime_76219_Runtime_76219_Runtime_76219_cmd()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-x86`, `os-windows`, `GCStress`, `area-GC-coreclr`, `blocking-clean-ci-optional`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-28T01:27:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PM235",
                                           "createdAt":  "2022-11-28T09:22:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "This test verifies that GC doesn\u0027t collect an unreferenced frozen object (that becomes referenced again then)\r\nApparently, it\u0027s broken with segments now, perhaps due to recent gc changes? (e.g. https://github.com/dotnet/runtime/pull/78756). There were no changes related to frozen objects in VM/JIT recently",
                                           "updatedAt":  "2022-11-28T09:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PP6mP",
                                           "createdAt":  "2022-11-28T18:39:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cshung as fyi.. ",
                                           "updatedAt":  "2022-11-28T18:39:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PRcSL",
                                           "createdAt":  "2022-11-29T01:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I took a look at the dump. Here are some high-level findings.\r\nThe test is run with these environment variables:\r\n\r\n```\r\nDOTNET_HEAPVERIFY=1\r\nDOTNET_GCSegmentSize=8000\r\nDOTNET_GCStress=0x3\r\n```\r\n\r\nThis is x86, so we are running Segments, not regions.\r\nIt is unrelated to Frozen Object Heap, as `SystemDomain::m_FrozenObjectHeapManager` is `null`.\r\n\r\nI cannot reproduce it locally yet.",
                                           "updatedAt":  "2022-11-29T01:54:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RNU8F",
                                           "createdAt":  "2022-12-22T05:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Another dup? https://github.com/dotnet/runtime/issues/79807",
                                           "updatedAt":  "2022-12-22T05:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RRthY",
                                           "createdAt":  "2022-12-23T04:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "Failed again in: [runtime-coreclr gcstress-extra 20221221.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=118390\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=2518704\u0026resultId=120178\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\ncoreclr windows x86 Checked heapverify1 @ Windows.10.Amd64.Open\r\n\r\n- GC\\\\Regressions\\\\Github\\\\Runtime_76219\\\\Runtime_76219\\\\Runtime_76219.cmd\r\n```\r\n**Error message:**\r\n```\r\nAssert failure(PID 6832 [0x00001ab0], Thread: 6268 [0x187c]): Precondition failure: Illegal null pointerFAILED: ok\r\nFAILED: CheckPointer(pv)\r\nD:\\a_work\\1\\s\\src\\coreclr\\vm\\ceemain.cpp, line: 1012\r\n\r\nCORECLR! CHECK::Trigger + 0x256 (0x7068bab0)\r\nCORECLR! FilterStartupException + 0x20C (0x707b0d39)\r\nCORECLR! EEStartup + 0x67 (0x707afdd5)\r\nCORECLR! EH4_CallFilterFunc + 0x12 (0x707c83c2)\r\nCORECLR! except_handler4 + 0xD4 (0x707c4344)\r\nNTDLL! RtlConvertUlongToLargeInteger + 0xA2 (0x77473292)\r\nNTDLL! RtlConvertUlongToLargeInteger + 0x74 (0x77473264)\r\nNTDLL! KiUserExceptionDispatcher + 0xF (0x77460dbf)\r\nCORECLR! WKS::gc_heap::gc1 + 0x689 (0x7066169e)\r\nCORECLR! WKS::gc_heap::garbage_collect + 0x3B4 (0x70660f89)\r\nFile: D:\\a_work\\1\\s\\src\\coreclr\\inc\\check.h Line: 339\r\nImage: C:\\h\\w\\A4730899\\p\\corerun.exe\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\h\\w\\A4730899\\w\\AC250952\\uploads\\Reports\\GC.Regressions\\Github\\Runtime_76219\\Runtime_76219\\Runtime_76219.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n\"C:\\h\\w\\A4730899\\p\\corerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\"  Runtime_76219.dll\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n\r\nset CORE_ROOT=C:\\h\\w\\A4730899\\p\r\nC:\\h\\w\\A4730899\\w\\AC250952\\e\\GC\\Regressions\\Github\\Runtime_76219\\Runtime_76219\\Runtime_76219.cmd\r\nExpected: True\r\nActual:   False\r\n\r\n\r\nStack trace\r\n   at GC_Regressions._Github_Runtime_76219_Runtime_76219_Runtime_76219_._Github_Runtime_76219_Runtime_76219_Runtime_76219_cmd()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n```",
                                           "updatedAt":  "2022-12-23T04:16:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SClFe",
                                           "createdAt":  "2023-01-09T22:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Another failure:\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=129549\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=2799814\u0026resultId=121108\u0026paneView=debug\r\n\r\n\"coreclr OSX arm64 Checked jitstress_isas_nohwintrinsic\"\r\n\r\n@cshung There are lots of bugs for this test case and lots of different failures. Are you keeping the test enabled to collect more data, perhaps crash dumps? Or should we disable the test (for some appropriate subset of platforms) to clean the CI runs?",
                                           "updatedAt":  "2023-01-09T22:18:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SCmn6",
                                           "createdAt":  "2023-01-09T22:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Oh, I didn\u0027t realize this is actually running in CI. I thought this is a GCStress test case, let me move it out of the regular CI run for now.",
                                           "updatedAt":  "2023-01-09T22:23:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fkA9F",
                                           "createdAt":  "2023-06-22T20:31:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "@mangod9 - during our GC sync we want to move this test out of the CI runs into the gcstress extra pipeline so that we can debug by just triggering it. How do we do this?  ",
                                           "updatedAt":  "2023-06-22T20:31:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iP5SN",
                                           "createdAt":  "2023-07-24T17:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Guessing you just have to move it out from p0 or p1 category. @trylek can provide guidance here. ",
                                           "updatedAt":  "2023-07-24T17:40:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQC1l",
                                           "createdAt":  "2023-07-24T18:10:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "The test is completely disabled on coreclr after https://github.com/dotnet/runtime/pull/80399.",
                                           "updatedAt":  "2023-07-24T18:10:30Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Test failure GC\\\\Regressions\\\\Github\\\\Runtime_76219\\\\Runtime_76219\\\\Runtime_76219.cmd",
        "labels":  [
                       "arch-x86",
                       "disabled-test",
                       "os-windows",
                       "GCStress",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78962",
        "createdAt":  "2022-11-29T12:41:59Z",
        "number":  78962,
        "author":  "stusklinar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC89yAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksadowski",
                                            "createdAt":  "2024-11-26T09:09:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-02T23:18:17Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nWe\u0027ve noticed issues with Azure App Services (linux) using more memory than we\u0027d expect for linux apps vs Windows\r\n\r\nTo test this and take everything out of the equation - I used Visual Studio to create a new Web Api (Weather Forecast), and ran it locally using Windows, deployed it to a Linux App Service and ran it via WSL.\r\n\r\nThe Windows run ran as expected, using around 20mb to run the app, however, out of the box with no adjustments, the Linux version needs around 170mb to just exist. All good and well, until we can only fit a few app within an app service on Azure.\r\n\r\nThis makes the move to Linux not viable for us, and perhaps others as the machines required to run simple APIs is too much compared to Windows.\r\n\r\n### Configuration\r\nStandard out of the box\r\n.net 6 or 7\r\n### Data\r\n\r\nHTOP Before running the app \r\n\u003cimg width=\"1024\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1263488/204530527-4396aca8-563c-4387-9e05-47e91230c79e.png\"\u003e\r\n\r\nHTOP After starting (In release mode)\r\n\r\n\u003cimg width=\"863\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1263488/204530857-7c9af5ee-44d5-437b-8512-8f9fd9f89237.png\"\u003e\r\n\r\n\r\n### Analysis\r\n\r\nConsole apps seem to also have this issue, with 8mb (Windows) compared to 100mb (Linux)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYNdVxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PT0LR",
                                           "createdAt":  "2022-11-29T12:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-29T12:42:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PUg1L",
                                           "createdAt":  "2022-11-29T14:56:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nWe\u0027ve noticed issues with Azure App Services (linux) using more memory than we\u0027d expect for linux apps vs Windows\r\n\r\nTo test this and take everything out of the equation - I used Visual Studio to create a new Web Api (Weather Forecast), and ran it locally using Windows, deployed it to a Linux App Service and ran it via WSL.\r\n\r\nThe Windows run ran as expected, using around 20mb to run the app, however, out of the box with no adjustments, the Linux version needs around 170mb to just exist. All good and well, until we can only fit a few app within an app service on Azure.\r\n\r\nThis makes the move to Linux not viable for us, and perhaps others as the machines required to run simple APIs is too much compared to Windows.\r\n\r\n### Configuration\r\nStandard out of the box\r\n.net 6 or 7\r\n### Data\r\n\r\nHTOP Before running the app \r\n\u003cimg width=\"1024\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1263488/204530527-4396aca8-563c-4387-9e05-47e91230c79e.png\"\u003e\r\n\r\nHTOP After starting (In release mode)\r\n\r\n\u003cimg width=\"863\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1263488/204530857-7c9af5ee-44d5-437b-8512-8f9fd9f89237.png\"\u003e\r\n\r\n\r\n### Analysis\r\n\r\nConsole apps seem to also have this issue, with 8mb (Windows) compared to 100mb (Linux)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estusklinar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-29T14:56:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNFPb",
                                           "createdAt":  "2023-03-22T15:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @stusklinar, do you observe this behavior with a vanilla .NET app, or is it specific to a particular app? Also are you running in a memory constrained container environment? ",
                                           "updatedAt":  "2023-03-22T15:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNKPk",
                                           "createdAt":  "2023-03-22T16:00:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stusklinar",
                                           "body":  "This is a vanilla app, with no changes, in a normal app service",
                                           "updatedAt":  "2023-03-22T16:00:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0jr4",
                                           "createdAt":  "2023-07-06T22:31:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattMinke",
                                           "body":  "We are seeing this behavior as well in Azure where a App Service with Windows OS uses significantly less memory than an App Service running Linux OS. \r\n\r\n![image](https://github.com/dotnet/runtime/assets/5995359/07800e9d-9f6d-45e0-9b33-55d8daf3e903)\r\n\r\n\r\nOthers have documented this issue on stack overflow as well. \r\n- https://stackoverflow.com/questions/67771510/moving-to-azure-linux-for-my-web-app-made-the-memory-usage-jump-from-50mb-to-300\r\n- https://devops.stackexchange.com/questions/16975/huge-differences-in-windows-vs-linux-app-service-memory-usage/18050#18050",
                                           "updatedAt":  "2023-07-06T22:31:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g11XH",
                                           "createdAt":  "2023-07-07T04:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I wonder whether this is just a function of available memory on the running container? Do you observe the same behavior if you force to run with WKS GC? ",
                                           "updatedAt":  "2023-07-07T04:44:00Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "High netcore memory usage compared to windows (From an VS Template starter app)",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79062",
        "createdAt":  "2022-12-01T00:50:30Z",
        "number":  79062,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-01T00:50:52Z",
        "body":  "We do not age dependent handles like all other kinds of handles. As a result dependent handles stay in Gen 0 and get visited on every GC. That is unnecessary work when dependent handles refer to tenured objects, which is a common case.\r\n\r\nRelated to PR: https://github.com/dotnet/runtime/pull/78746",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT3OlmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Pc6OL",
                                           "createdAt":  "2022-12-01T00:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-01T00:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pc6WY",
                                           "createdAt":  "2022-12-01T00:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe do not age dependent handles like all other kinds of handles. As a result dependent handles stay in Gen 0 and get visited on every GC. That is unnecessary work when dependent handles refer to tenured objects, which is a common case.\r\n\r\nRelated to PR: https://github.com/dotnet/runtime/pull/78746\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-01T00:50:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider aging dependent handles the same way as the other kinds of handles.",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79063",
        "createdAt":  "2022-12-01T01:14:11Z",
        "number":  79063,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:14:29Z",
        "body":  "Our cgroup integration behavior is oriented  -- AFAICT -- on cgroup hard limits not soft limites/\"requests\". We recently had a customer tell us that they use \"requests\" and not limits and had persistent high GC heap usage. That motivated me to update our test app. Empirically, the test app proves this out.\r\n\r\nThis is what I see, per https://github.com/dotnet/dotnet-docker/pull/4231.\r\n\r\nHard limit set (AKA \"limits\"):\r\n\r\n```\r\n% docker run --rm -m 100mb dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 4\r\nTotalAvailableMemoryBytes: 78643200 (75.00 MiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.max\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 6201344 (5.00 MiB)\r\nGC Hard limit %: 75\r\n```\r\n\r\nSoft limit set (AKA \"requests\"):\r\n\r\n```bash\r\n% docker run --rm --memory-reservation 100mb dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 4\r\nTotalAvailableMemoryBytes: 4124512256 (3.00 GiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.low\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 82751488 (78.00 MiB)\r\nGC Hard limit %: 3,933\r\n```\r\n\r\nLimiting to one CPU has no significant effect:\r\n\r\n```bash\r\n% docker run --rm --memory-reservation 100mb --cpus 1 dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 1\r\nTotalAvailableMemoryBytes: 4124512256 (3.00 GiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.low\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 82722816 (78.00 MiB)\r\nGC Hard limit %: 3,933\r\n```\r\n\r\nHard and soft limits set (hard is honored, which is good):\r\n\r\n```bash\r\n% docker run --rm --memory-reservation 50mb --memory 100mb dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 4\r\nTotalAvailableMemoryBytes: 78643200 (75.00 MiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.max\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 6234112 (5.00 MiB)\r\nGC Hard limit %: 75\r\n```\r\n\r\nWe see a couple differences with the requests-only model:\r\n\r\n- Initial memory usage is much higher.\r\n- GC heap is unconstrained (same as if cgroup memory constraints were not set).\r\n\r\nI\u0027m not proposing a specific change in behavior just yet for the case when only requests are set. I don\u0027t think the current behavior is desired. We need a bit more thought on this one. \r\n\r\nFew approaches to consider:\r\n\r\n- Match the current hard limit behavior, but source the limit from `memory.low` when set and `memory.max` is not.\r\n- Match current hard limit behavior but choose a less conservative initial GC heap hard limit value, like 90% instead of 75% of the `memory.*` value.\r\n- Invent a new tiering model for GC memory that has the same initial conservatism as the current hard limit model, but has an allowance to grow memory usage as needed with some step function model.\r\n- Enable opt-in unconstrained GC heap behavior for the requests model (AKA, the behavior we have now).\r\n\r\nNote: These options are not entirely mutually exclusive.\r\n\r\n@Maoni0 ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY_4P-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PdAqA",
                                           "createdAt":  "2022-12-01T01:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-01T01:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PdnpX",
                                           "createdAt":  "2022-12-01T04:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "thanks for doing the experiment, @richlander! it would be much better if in this case we handled both. it\u0027s something that folks had asked about before - having 2 limits, a lower limit for normal workload and a higher limit for peak workload. \r\n\r\nwe need to define what the behavior is there. here are my thoughts on this - \r\n\r\n+ if we did a full compacting GC to shrink the heap to the smallest and the heap is still larger than the lower limit, we should adjust our limit to the higher one.\r\n+ if we are running with the higher limit and observe the survived bytes from a BGC to be lower than the lower limit we do a full compacting GC and if that gets us a heap \u003c= lower limit we set our limit to the lower one. it may not due to pinning. \r\n\r\nCC-ing @cshung.",
                                           "updatedAt":  "2022-12-01T04:45:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PdoDf",
                                           "createdAt":  "2022-12-01T04:48:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "of course it\u0027s very often to see folks just set request and limit to the same thing (but that\u0027s just from what I saw, I don\u0027t have data to see how common a practice that is.in general). in fact this is the recommendation I heard from some people and read about in some articles, eg, [this one](https://home.robusta.dev/blog/kubernetes-memory-limit). I do think there\u0027s merit to support a higher limit value though. ",
                                           "updatedAt":  "2022-12-01T04:48:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pdo-o",
                                           "createdAt":  "2022-12-01T04:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "That\u0027s funny. I think that\u0027s the same article I was looking for but couldn\u0027t find it! Thanks for that.\r\n\r\nThere are at least two aspects here:\r\n\r\n- What to do if both values are set.\r\n- What do to if only requests is set.\r\n\r\nYour commentary is mostly about the first one, which makes sense and is good. We had a conversation a few years ago about the two limit idea. I think your idea here is similar to what we discussed before. That sounds like a good idea. We need to validate that w/rt Kubernetes behavior.\r\n\r\nOn the second aspect, we need to come up with a behavior. I suggested some options. I\u0027ll ask the customer if they are indeed running with requests only.",
                                           "updatedAt":  "2022-12-01T04:55:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PdpUJ",
                                           "createdAt":  "2022-12-01T04:58:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "if only request is set, I think we should just read that as the limit because it\u0027ll get OOMkilled if it\u0027s over the request anyway. I\u0027m guessing that\u0027s something we can add pretty easily. just need our PAL layer to communicate this to the GC. CCing @janvorli. ",
                                           "updatedAt":  "2022-12-01T04:58:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PdqBR",
                                           "createdAt":  "2022-12-01T05:02:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "\u003e it\u0027ll get OOMkilled if it\u0027s over the request anyway\r\n\r\nI don\u0027t think that\u0027s true. My suggestions are oriented on that not being true.\r\n\r\nHere\u0027s some evidence: https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/#what-if-you-specify-a-container-s-request-but-not-its-limit\r\n\r\nI also saw in my experiences, with the webapp sample that container usage \u003e request.\r\n\r\nHere is an example, with app started like this:\r\n\r\n```bash\r\ndocker run --rm --memory-reservation 50mb -p 8000:80 aspnetapp\r\n```\r\n\r\nSo, \"limit\" is really \"request\" on the page. I just haven\u0027t made it smart enough to say that.\r\n\r\n\u003cimg width=\"965\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2608468/204969938-a60de757-b252-4533-b225-c5de705012d4.png\"\u003e\r\n",
                                           "updatedAt":  "2022-12-01T05:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PduuW",
                                           "createdAt":  "2022-12-01T05:11:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I should\u0027ve been precise with my wording, I meant \"if it\u0027s over request, it *can* be OOMKilled\". that\u0027s the case, correct? if so then we should use it as the heap limit that GC uses (ie, 75% of it). ",
                                           "updatedAt":  "2022-12-01T05:14:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PeCPX",
                                           "createdAt":  "2022-12-01T06:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "In theory. My question is whether the 75% value makes sense in that scenario. We want to avoid an overly conservative value. Certainly, we can start there. We need to do more testing in Kubernetes to better understand the behavior in practice.",
                                           "updatedAt":  "2022-12-01T06:25:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pet9R",
                                           "createdAt":  "2022-12-01T09:10:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOur cgroup integration behavior is oriented  -- AFAICT -- on cgroup hard limits not soft limites/\"requests\". We recently had a customer tell us that they use \"requests\" and not limits and had persistent high GC heap usage. That motivated me to update our test app. Empirically, the test app proves this out.\r\n\r\nThis is what I see, per https://github.com/dotnet/dotnet-docker/pull/4231.\r\n\r\nHard limit set (AKA \"limits\"):\r\n\r\n```\r\n% docker run --rm -m 100mb dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 4\r\nTotalAvailableMemoryBytes: 78643200 (75.00 MiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.max\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 6201344 (5.00 MiB)\r\nGC Hard limit %: 75\r\n```\r\n\r\nSoft limit set (AKA \"requests\"):\r\n\r\n```bash\r\n% docker run --rm --memory-reservation 100mb dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 4\r\nTotalAvailableMemoryBytes: 4124512256 (3.00 GiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.low\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 82751488 (78.00 MiB)\r\nGC Hard limit %: 3,933\r\n```\r\n\r\nLimiting to one CPU has no significant effect:\r\n\r\n```bash\r\n% docker run --rm --memory-reservation 100mb --cpus 1 dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 1\r\nTotalAvailableMemoryBytes: 4124512256 (3.00 GiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.low\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 82722816 (78.00 MiB)\r\nGC Hard limit %: 3,933\r\n```\r\n\r\nHard and soft limits set (hard is honored, which is good):\r\n\r\n```bash\r\n% docker run --rm --memory-reservation 50mb --memory 100mb dotnetapp\r\n         42                                                    \r\n         42              ,d                             ,d     \r\n         42              42                             42     \r\n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \r\na8\"    `Y42 a8\"     \"8a  42    42P\u0027   `\"8a a8P_____42   42     \r\n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \r\n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \r\n `\"8bbdP\"Y8  `\"YbbdP\"\u0027   \"Y428 42       42  `\"Ybbd8\"\u0027   \"Y428  \r\n\r\n.NET 7.0.0\r\nDebian GNU/Linux 11 (bullseye)\r\n\r\nUserName: root\r\nOSArchitecture: Arm64\r\nProcessorCount: 4\r\nTotalAvailableMemoryBytes: 78643200 (75.00 MiB)\r\ncgroup memory constraint: /sys/fs/cgroup/memory.max\r\ncgroup memory limit: 104857600 (100.00 MiB)\r\ncgroup memory usage: 6234112 (5.00 MiB)\r\nGC Hard limit %: 75\r\n```\r\n\r\nWe see a couple differences with the requests-only model:\r\n\r\n- Initial memory usage is much higher.\r\n- GC heap is unconstrained (same as if cgroup memory constraints were not set).\r\n\r\nI\u0027m not proposing a specific change in behavior just yet for the case when only requests are set. I don\u0027t think the current behavior is desired. We need a bit more thought on this one. \r\n\r\nFew approaches to consider:\r\n\r\n- Match the current hard limit behavior, but source the limit from `memory.low` when set and `memory.max` is not.\r\n- Match current hard limit behavior but choose a less conservative initial GC heap hard limit value, like 90% instead of 75% of the `memory.*` value.\r\n- Invent a new tiering model for GC memory that has the same initial conservatism as the current hard limit model, but has an allowance to grow memory usage as needed with some step function model.\r\n- Enable opt-in unconstrained GC heap behavior for the requests model (AKA, the behavior we have now).\r\n\r\nNote: These options are not entirely mutually exclusive.\r\n\r\n@Maoni0 \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-01T09:10:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PgXWm",
                                           "createdAt":  "2022-12-01T14:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "I\u0027ve found a nice doc here: https://sysdig.com/blog/kubernetes-limits-requests/#:~:text=Kubernetes%20defines%20Limits%20as%20the,is%20reserved%20for%20a%20container.\r\n\r\nFrom that, it seems that the request is only used to check if a container can be scheduled on a Pod at all. The Pod has a limit that limits the total memory usage for all the containers running in a Pod. If a new container is to be scheduled on the Pod, Kubernetes check the request and if it finds there is not enough memory available in the whole Pod, it doesn\u0027t schedule the container. \r\nI understand that as that the reservation has no influence on the runtime behavior of the specific container. The limit is what limits the container at runtime. If a reservation is not specified for a container, then it is set to the limit. ",
                                           "updatedAt":  "2022-12-01T14:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PhSZ_",
                                           "createdAt":  "2022-12-01T17:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "OK. That seems to agree with the official Kubernetes doc I linked to. Still, that doesn\u0027t account for the behavior that the customer described. I sent mail to them to get more clarity.\r\n\r\nYes, requests are used for scheduling, as you say.",
                                           "updatedAt":  "2022-12-01T17:42:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jciNM",
                                           "createdAt":  "2023-08-07T18:59:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli is this issue actionable for 8? ",
                                           "updatedAt":  "2023-08-07T18:59:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j_g_4",
                                           "createdAt":  "2023-08-14T15:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@mangod9 I don\u0027t see what we could do about it based on my understanding that I\u0027ve shared above. @richlander did we get any more details from the customer?",
                                           "updatedAt":  "2023-08-14T15:49:16Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "CGroup/Docker memory reservation model isn\u0027t honored by GC",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79308",
        "createdAt":  "2022-12-06T20:56:35Z",
        "number":  79308,
        "author":  "kunalspathak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-03T03:09:56Z",
        "body":  "Found in [latest run](https://dev.azure.com/dnceng-public/public/_build/results?buildId=101397\u0026view=ms.vss-build-web.run-extensions-tab) of Antigen: \r\n\r\nRepro: https://gist.github.com/kunalspathak/dd9eea6f4b0339e02b293a1decfff32b\r\n\r\n```cmd\r\nEnvironment:\r\n\r\nCOMPlus_JitEnableNoWayAssert=1\r\nCOMPlus_JitDoEarlyProp=0\r\nCOMPlus_JitDoValueNumber=1\r\nCOMPlus_JitDoLoopHoisting=0\r\nCOMPlus_JitCloneLoops=1\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_GCStress=0xC\r\nCOMPlus_JitStressRegs=0x1000\r\n\r\nAssert failure(PID 12394 [0x0000306a], Thread: 12394 [0x306a]): ((size_t)g_gc_lowest_address - ps) \u003e= OS_PAGE_SIZE\r\n    File: /__w/1/s/src/coreclr/gc/gc.cpp Line: 9125\r\n    Image: /root/helix/work/correlation/CoreRoot/corerun\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX5B4mg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5P3rYh",
                                           "createdAt":  "2022-12-06T20:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekunalspathak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-06T20:56:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3ryc",
                                           "createdAt":  "2022-12-06T20:58:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "@Maoni0 ",
                                           "updatedAt":  "2022-12-06T20:58:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P3tuU",
                                           "createdAt":  "2022-12-06T21:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "this is arm32 only correct? ",
                                           "updatedAt":  "2022-12-06T21:06:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P38Mk",
                                           "createdAt":  "2022-12-06T21:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e this is arm32 only correct?\r\n\r\nThat\u0027s right.",
                                           "updatedAt":  "2022-12-06T21:59:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fkEKn",
                                           "createdAt":  "2023-06-22T20:42:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "@mangod9 - any updates here? ",
                                           "updatedAt":  "2023-06-22T20:42:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fkHia",
                                           "createdAt":  "2023-06-22T20:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "didnt get a chance to repro this one. @kunalspathak do you know if this still repros? ",
                                           "updatedAt":  "2023-06-22T20:55:58Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Assert ((size_t)g_gc_lowest_address - ps) \u003e= OS_PAGE_SIZE",
        "labels":  [
                       "arch-arm32",
                       "os-linux",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80351",
        "createdAt":  "2023-01-08T23:45:38Z",
        "number":  80351,
        "author":  "Leonardo-Ferreira",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-31T14:29:50Z",
        "body":  "### Description\r\n\r\nEarlier this week my API was hit by a burst of requests. As expected the memory usage grew, BUT it did not returned to the original value. Then later the same week, another burst of request happened, and yet again the memory inflated but did not return to the previous value (which was not the original)\r\n\r\nThis behavior has been observed for a total time of 1 week, take a look:\r\n![image](https://user-images.githubusercontent.com/5585339/211224650-be56136d-355a-4061-a897-fc95eba5c647.png)\r\n\r\nThe peak in memory, as mentioned before, was caused by a burst in request. Our avg request rate is around 35 and at the window (10 min) I got as high as 750 req/s.\r\n\r\nThis issue DOES NOT CAUSE PODs to restart\r\n\r\n### Configuration\r\n\r\n.Net 7,  \r\nLatest version from mcr.microsoft.com,  \r\nHost on AKS, kubernets version 1.23.8,\r\nPods are:\r\n```\r\nlimits:\r\n  cpu: 500m\r\n  memory: 1Gi\r\nrequests:\r\n  cpu: 500m\r\n  memory: 512Mi\r\n```\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Data\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYtp1tw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5R9EJn",
                                           "createdAt":  "2023-01-08T23:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-08T23:45:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R_DN1",
                                           "createdAt":  "2023-01-09T11:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "In the server gc mode, the unused memories are not guaranteed or necessary to be fully decommited (returned to the OS) as they may be used soon, while committing/decommitting memory is quite expensive. You may want to use the dotnet gc monitor (https://github.com/Maoni0/realmon) to see the memory of each gc heap. It may tell you whether there\u0027re real memory leaks in the app. ",
                                           "updatedAt":  "2023-01-09T11:24:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R_RO3",
                                           "createdAt":  "2023-01-09T12:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "I get that this is quite an neglectable task, but we are talking about 3 days of unused memory! altogether this is a 1.5gb \"waste\" that could be used by other pods on the AKS... in the end, renting bigger machines is more expensive than committing/de-committing memory\r\n\r\nI took a `dotnet-dump` and seen no obvious leaks... basic the dump top 3 largest pools are 21MB (3214 instances of free memory - fragmentation), 16MB (8099 instances of byte[]) and 7MB (40k+ instances of strings). It also reports that the 6th largest object is about 750kb and the 21st is smaller than 100kb...",
                                           "updatedAt":  "2023-01-09T12:28:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R_YRu",
                                           "createdAt":  "2023-01-09T12:40:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Can you try setting an environment variable `DOTNET_GCName=clrgc.dll` (on windows) or `DOTNET_GCName=libclrgc.so` (on linux)? This will disable the .NET 7 GC regions feature.",
                                           "updatedAt":  "2023-01-09T12:42:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SBK7h",
                                           "createdAt":  "2023-01-09T18:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nEarlier this week my API was hit by a burst of requests. As expected the memory usage grew, BUT it did not returned to the original value. Then later the same week, another burst of request happened, and yet again the memory inflated but did not return to the previous value (which was not the original)\r\n\r\nThis behavior has been observed for a total time of 1 week, take a look:\r\n![image](https://user-images.githubusercontent.com/5585339/211224650-be56136d-355a-4061-a897-fc95eba5c647.png)\r\n\r\nThe peak in memory, as mentioned before, was caused by a burst in request. Our avg request rate is around 35 and at the window (10 min) I got as high as 750 req/s.\r\n\r\nThis issue DOES NOT CAUSE PODs to restart\r\n\r\n### Configuration\r\n\r\n.Net 7,  \r\nLatest version from mcr.microsoft.com,  \r\nHost on AKS, kubernets version 1.23.8,\r\nPods are:\r\n```\r\nlimits:\r\n  cpu: 500m\r\n  memory: 1Gi\r\nrequests:\r\n  cpu: 500m\r\n  memory: 512Mi\r\n```\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Data\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLeonardo-Ferreira\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-09T18:06:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SBaaN",
                                           "createdAt":  "2023-01-09T18:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @Leonardo-Ferreira, could you clarify if you are observing this to be a regression from 6? As @hez2010 points out the GC is not very aggressive in decommitting if not required (you have a 1gb limit to it keeps it around if required later on). There might be ways to notify the GC to decommit if its causing any specific scaling issues. ",
                                           "updatedAt":  "2023-01-09T18:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SBeTF",
                                           "createdAt":  "2023-01-09T18:46:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grbell-ms",
                                           "body":  "You can force decommit like this:\r\n```csharp\r\nGC.Collect(GC.MaxGeneration, GCCollectionMode.Aggressive);\r\n```",
                                           "updatedAt":  "2023-01-09T18:46:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SCdDO",
                                           "createdAt":  "2023-01-09T21:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "\u003e Hi @Leonardo-Ferreira, could you clarify if you are observing this to be a regression from 6? As @hez2010 points out the GC is not very aggressive in decommitting if not required (you have a 1gb limit to it keeps it around if required later on). There might be ways to notify the GC to decommit if its causing any specific scaling issues.\r\n\r\nI can\u0027t confirm that this is a regression from .net 6 because this solution was born in .net 7 already...\r\n\r\nWhen I \"gave\" the pod 1GB of memory, I did in the expectation that it would\u0027ve been given back after it was no longer necessary... now I have a huge question: \"How many of my hundreds of applications are indeed needing the amount of memory they are reporting and how many are just not-decommissioning?\"",
                                           "updatedAt":  "2023-01-09T21:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SCePc",
                                           "createdAt":  "2023-01-09T21:54:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQRmcQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markoweb2",
                                                                               "createdAt":  "2023-12-21T09:49:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "\u003e You can force decommit like this:\r\n\u003e \r\n\u003e ```cs\r\n\u003e GC.Collect(GC.MaxGeneration, GCCollectionMode.Aggressive);\r\n\u003e ```\r\n\r\nI think that this is the kind of thing that leads to problem. How am I to determine if that memory is indeed just being saved for a rainy day? Otherwise I would be triggering a not-trivial, blocking, operation that would yield perhaps a few KBs worth of memory...\r\n\r\nIsn\u0027t there a \"decommission as soon as possible\" flag or config?",
                                           "updatedAt":  "2023-01-09T21:54:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SCify",
                                           "createdAt":  "2023-01-09T22:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "hi @Leonardo-Ferreira this is something I\u0027m hoping to have a good solution for in .net 8. BTW this part works very similarly in .net 7 as in .net 6 so I don\u0027t think you should change to use clrgc.dll. as of now, the best I could recommend, assuming that your app is still allocating memory (instead of doing no allocations which means GC will not get involved unless you are running into very high memory load situation), is to use the [DOTNET_GCConserveMemory](https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#conserve-memory) config. what this does is it looks at the amount of fragmentation on the heap and does a full compacting GC when necessary so the amount of fragmentation is kept under control, ie, the higher the config value is, the lower the fragmentation is. please let me know if this works for you.",
                                           "updatedAt":  "2023-01-09T22:09:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Seyum",
                                           "createdAt":  "2023-01-16T10:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maffelbaffel",
                                           "body":  "I am also seeing a very different memory profile since upgrading from .net 6 to .net 7:\r\n![memory-profile](https://user-images.githubusercontent.com/8490302/212651648-4867d8a8-0c4d-4214-84f4-4eb1d09d8f6e.png)\r\nWe deployed at 01/04 and since then are seeing pods going OOM. \r\nI am not sure yet what exactly the problem is. Might be a memory leak in our code, but we did not change much afaik.",
                                           "updatedAt":  "2023-01-16T10:12:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SmIUf",
                                           "createdAt":  "2023-01-17T16:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "The spurious OOMs could be https://github.com/dotnet/runtime/issues/78959, which is recently fixed and should be available in 7.0.3. ",
                                           "updatedAt":  "2023-01-17T16:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SoZFQ",
                                           "createdAt":  "2023-01-18T01:11:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "Just to be clear, im not getting any OOM errors in this app specifically but the memory is not being released back to be used by other pods, and THIS is causing problems... the overall memory of the deployment goes up, so the deployment is scaled out, which causes the overall memory of AKS to go up and auto-scale triggers and new nodes are spawned and the auto-scale... and out it goes up to infinity",
                                           "updatedAt":  "2023-01-18T01:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SoshF",
                                           "createdAt":  "2023-01-18T02:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCy1hbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "maffelbaffel",
                                                                               "createdAt":  "2023-01-18T07:26:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@maffelbaffel I have written about this problem in [\"I didn\u0027t change my code at all, why am I seeing a regression in memory when I upgrade my .NET version?\"](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#i-didnt-change-my-code-at-all-why-am-i-seeing-a-regression-in-memory-when-i-upgrade-my-net-version) section of mem-doc, please take a look and let me know if it\u0027s helpful.",
                                           "updatedAt":  "2023-01-18T02:50:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SpgsY",
                                           "createdAt":  "2023-01-18T07:38:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maffelbaffel",
                                           "body":  "\u003e @maffelbaffel I have written about this problem in [\"I didn\u0027t change my code at all, why am I seeing a regression in memory when I upgrade my .NET version?\"](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#i-didnt-change-my-code-at-all-why-am-i-seeing-a-regression-in-memory-when-i-upgrade-my-net-version) section of mem-doc, please take a look and let me know if it\u0027s helpful.\r\n\r\nwow. This is a great resource I did not know of yet. Thank you so much for sharing.\r\n\r\nFound out we hit a memory leak in [SqlClient](https://github.com/dotnet/SqlClient/issues/1810) that got introduced in `5.0.1`.\r\nStarting with version `7.0.0`, `Microsoft.EntityFrameworkCore.SqlServer` uses `SqlClient 5.0.1`.\r\n\r\n**We fixed the leak by upgrading to** [5.1.0-preview2](https://github.com/dotnet/SqlClient/releases/tag/v5.1.0-preview2).\r\nWe found out by looking at memory dumps and seeing many SqlCommands that are referenced by CancellationTokenSources and not properly disposed.\r\n\r\n@Leonardo-Ferreira Might be worth checking out if you hit the same issue. ",
                                           "updatedAt":  "2023-01-18T07:38:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TSZvo",
                                           "createdAt":  "2023-01-19T17:17:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "![image](https://user-images.githubusercontent.com/5585339/213514341-9e5c442a-6d70-47a9-9858-aaa4d06191d3.png)\r\n\r\nWell look at that... no changes and out of the blue 2 pods \"gave\" the memory back... couldn\u0027t correlate that with anything, such as application load increase/decrease, dependencies improvement/degradation, etc etc etc",
                                           "updatedAt":  "2023-01-19T17:17:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i2nW3",
                                           "createdAt":  "2023-07-31T14:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "related to #75049 ?",
                                           "updatedAt":  "2023-07-31T14:29:50Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Memory not being collected back",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81383",
        "createdAt":  "2023-01-30T22:11:40Z",
        "number":  81383,
        "author":  "buyaa-n",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:00:20Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=603897\r\nBuild error leg or test failing: GC/API/GCHandleCollector/Usage/Usage.sh\r\nPull request: https://github.com/dotnet/runtime/pull/81291\r\n\r\n## Error Message\r\nFill the error message using [known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-message-section).\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"System.InvalidOperationException: Handle collector count overflows or underflows.\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\nFailed tests:\r\n\r\n1. GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n2. GC_Scenarios._DoublinkList_doublinkstay_doublinkstay_._DoublinkList_doublinkstay_doublinkstay_sh()\r\n3. GC_Scenarios._DoublinkList_dlstack_dlstack_._DoublinkList_dlstack_dlstack_sh()\r\n\r\n```log\r\nGC/API/GCHandleCollector/Usage/Usage.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n      Case 1 Passed!\r\n      100, 100\r\n      Case 2 Passed!\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n        Case 1 Passed!\r\n        100, 100\r\n        Case 2 Passed!\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n  Finished:    GC.API.XUnitWrapper\r\n  Discovering: GC.LargeMemory.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  GC.LargeMemory.XUnitWrapper (found 3 test cases)\r\n  Starting:    GC.LargeMemory.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n  Finished:    GC.LargeMemory.XUnitWrapper\r\n  Discovering: GC.Scenarios.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  GC.Scenarios.XUnitWrapper (found 31 test cases)\r\n  Starting:    GC.Scenarios.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    GC/Scenarios/DoublinkList/doublinkstay/doublinkstay.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/doublinkstay/doublinkstay.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false doublinkstay.dll \u0027\u0027\r\n      Test should return with ExitCode 100 ...\r\n      19996 DLinkNodes finalized\r\n      Test Failed\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/doublinkstay/doublinkstay.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Scenarios._DoublinkList_doublinkstay_doublinkstay_._DoublinkList_doublinkstay_doublinkstay_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/doublinkstay/doublinkstay.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false doublinkstay.dll \u0027\u0027\r\n        Test should return with ExitCode 100 ...\r\n        19996 DLinkNodes finalized\r\n        Test Failed\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/doublinkstay/doublinkstay.sh\r\n    GC/Scenarios/DoublinkList/dlstack/dlstack.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/dlstack/dlstack.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false dlstack.dll \u0027\u0027\r\n      Test should return with ExitCode 100 ...\r\n       Performing Collect/Wait/Collect cycle again\r\n       Finalized number stable at 9995\r\n      9995 DLinkNodes finalized\r\n      Test Failed\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/dlstack/dlstack.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Scenarios._DoublinkList_dlstack_dlstack_._DoublinkList_dlstack_dlstack_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/dlstack/dlstack.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false dlstack.dll \u0027\u0027\r\n        Test should return with ExitCode 100 ...\r\n         Performing Collect/Wait/Collect cycle again\r\n         Finalized number stable at 9995\r\n        9995 DLinkNodes finalized\r\n        Test Failed\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/dlstack/dlstack.sh\r\n```\r\n\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=603897\r\n**Error message validated:** `[System.InvalidOperationException: Handle collector count overflows or underflows.`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 3/14/2024 10:51:23 PM UTC\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdyBVdQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UAi_f",
                                           "createdAt":  "2023-01-30T22:11:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=151010\r\nBuild error leg or test failing: GC/API/GCHandleCollector/Usage/Usage.sh\r\nPull request: https://github.com/dotnet/runtime/pull/81291\r\n\r\n## Error Message\r\nFill the error message using [known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-message-section).\r\n\r\nFailed tests:\r\n\r\n1. GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n2. GC_Scenarios._DoublinkList_doublinkstay_doublinkstay_._DoublinkList_doublinkstay_doublinkstay_sh()\r\n3. GC_Scenarios._DoublinkList_dlstack_dlstack_._DoublinkList_dlstack_dlstack_sh()\r\n\r\n```log\r\nGC/API/GCHandleCollector/Usage/Usage.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n      Case 1 Passed!\r\n      100, 100\r\n      Case 2 Passed!\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n        Case 1 Passed!\r\n        100, 100\r\n        Case 2 Passed!\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n  Finished:    GC.API.XUnitWrapper\r\n  Discovering: GC.LargeMemory.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  GC.LargeMemory.XUnitWrapper (found 3 test cases)\r\n  Starting:    GC.LargeMemory.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n  Finished:    GC.LargeMemory.XUnitWrapper\r\n  Discovering: GC.Scenarios.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  GC.Scenarios.XUnitWrapper (found 31 test cases)\r\n  Starting:    GC.Scenarios.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    GC/Scenarios/DoublinkList/doublinkstay/doublinkstay.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/doublinkstay/doublinkstay.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false doublinkstay.dll \u0027\u0027\r\n      Test should return with ExitCode 100 ...\r\n      19996 DLinkNodes finalized\r\n      Test Failed\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/doublinkstay/doublinkstay.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Scenarios._DoublinkList_doublinkstay_doublinkstay_._DoublinkList_doublinkstay_doublinkstay_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/doublinkstay/doublinkstay.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false doublinkstay.dll \u0027\u0027\r\n        Test should return with ExitCode 100 ...\r\n        19996 DLinkNodes finalized\r\n        Test Failed\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/doublinkstay/doublinkstay.sh\r\n    GC/Scenarios/DoublinkList/dlstack/dlstack.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/dlstack/dlstack.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false dlstack.dll \u0027\u0027\r\n      Test should return with ExitCode 100 ...\r\n       Performing Collect/Wait/Collect cycle again\r\n       Finalized number stable at 9995\r\n      9995 DLinkNodes finalized\r\n      Test Failed\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/dlstack/dlstack.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_Scenarios._DoublinkList_dlstack_dlstack_._DoublinkList_dlstack_dlstack_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/DoublinkList/dlstack/dlstack.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false dlstack.dll \u0027\u0027\r\n        Test should return with ExitCode 100 ...\r\n         Performing Collect/Wait/Collect cycle again\r\n         Finalized number stable at 9995\r\n        9995 DLinkNodes finalized\r\n        Test Failed\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/Scenarios/DoublinkList/dlstack/dlstack.sh\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebuyaa-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `blocking-clean-ci`, `untriaged`, `Known Build Error`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-30T22:11:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UAujs",
                                           "createdAt":  "2023-01-30T22:46:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "these all have to do with running finalizers and we haven\u0027t made any changes there in a long time. these tests are flaky and of low value. I\u0027d be fine if we just disabled them.\r\n\r\nI\u0027m not aware anyone is using this `HandleCollector` thing.",
                                           "updatedAt":  "2023-01-30T22:46:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aIOEO",
                                           "createdAt":  "2023-04-17T21:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "- Hit again in a 6.0 PR: https://github.com/dotnet/runtime/pull/84939\r\n- Queue: Mono llvmaot Pri0 Runtime Tests Run Linux arm64 release\r\n- Job: https://dev.azure.com/dnceng-public/public/_build/results?buildId=241936\u0026view=logs\u0026j=74e689b1-5e71-5f30-9486-7c2c5ff44021\u0026t=bc7664d5-2e7c-57dc-1337-ab0ada348ecf\r\n- Log: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-84939-merge-e6d5ddf4c90d47d0ac/PayloadGroup0/1/console.e1ab2912.log?helixlogtype=result",
                                           "updatedAt":  "2023-04-17T21:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5caQbS",
                                           "createdAt":  "2023-05-16T21:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Still being hit. Seen in this 6.0 PR today: https://github.com/dotnet/runtime/pull/86295",
                                           "updatedAt":  "2023-05-16T21:37:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5caWnm",
                                           "createdAt":  "2023-05-16T22:03:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "should we disable these tests, @Maoni0  ?",
                                           "updatedAt":  "2023-05-16T22:03:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5caXMT",
                                           "createdAt":  "2023-05-16T22:05:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I\u0027m fine with disabling.",
                                           "updatedAt":  "2023-05-16T22:05:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jA211",
                                           "createdAt":  "2023-08-01T22:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "- PR: https://github.com/dotnet/runtime/pull/89800\r\n- Queue: `Mono llvmaot Pri0 Runtime Tests Run Linux arm64 release`\r\n- Run: https://dev.azure.com/dnceng-public/public/_build/results?buildId=359336\u0026view=logs\u0026j=74e689b1-5e71-5f30-9486-7c2c5ff44021\u0026t=bc7664d5-2e7c-57dc-1337-ab0ada348ecf\r\n- Log file: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-89800-merge-ee45070a97e448aca1/PayloadGroup0/1/console.5eebcf6f.log?helixlogtype=result\r\n- Hit this again in a 6.0 PR:\r\n```\r\n    Starting:    GC.API.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    GC/API/GCHandleCollector/Usage/Usage.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n      Case 1 Passed!\r\n      100, 100\r\n      Case 2 Passed!\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n        Case 1 Passed!\r\n        100, 100\r\n        Case 2 Passed!\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n```\r\n",
                                           "updatedAt":  "2023-08-01T22:12:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oEaXw",
                                           "createdAt":  "2023-10-04T01:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Still happening in 6.0 @dotnet/gc. This is the most recent hit:\r\n\r\n- 6.0 PR: https://github.com/dotnet/runtime/pull/92969\r\n- Queue: `Mono llvmaot Pri0 Runtime Tests Run Linux arm64 release`\r\n- Build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=426475\u0026view=logs\u0026j=74e689b1-5e71-5f30-9486-7c2c5ff44021\u0026t=bc7664d5-2e7c-57dc-1337-ab0ada348ecf\u0026l=66\r\n- Log: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-92969-merge-1a0fc0edf3d04bf78f/PayloadGroup0/1/console.1de7dcae.log?helixlogtype=result\r\n- Output:\r\n\u003cdetails\u003e\u003csummary\u003eExpand\u003c/summary\u003e\r\n\r\n```\r\n  Starting:    GC.API.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    GC/API/GCHandleCollector/Usage/Usage.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n      Case 1 Passed!\r\n      100, 100\r\n      Case 2 Passed!\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n        Case 1 Passed!\r\n        100, 100\r\n        Case 2 Passed!\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n  Finished:    GC.API.XUnitWrapper\r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-04T01:26:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zpQdm",
                                           "createdAt":  "2024-02-13T01:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "I saw a new hit today. Did we get a chance to disable the test or did we miss it?:\r\n\r\n- PR: https://github.com/dotnet/runtime/pull/98325\r\n- Build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=563518\r\n- Queue: `Mono llvmaot Pri0 Runtime Tests Run Linux arm64 release`\r\n- Job: https://dev.azure.com/dnceng-public/public/_build/results?buildId=563518\u0026view=logs\u0026j=74e689b1-5e71-5f30-9486-7c2c5ff44021\u0026t=bc7664d5-2e7c-57dc-1337-ab0ada348ecf\u0026l=69\r\n- Log: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-98325-merge-d382292ff46b4d25aa/PayloadGroup0/1/console.5be43ac6.log?helixlogtype=result\r\n- Output:\r\n```\r\nStarting:    GC.API.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    GC/API/GCHandleCollector/Usage/Usage.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n      Case 1 Passed!\r\n      100, 100\r\n      Case 2 Passed!\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n        Case 1 Passed!\r\n        100, 100\r\n        Case 2 Passed!\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n  Finished:    GC.API.XUnitWrapper\r\n```",
                                           "updatedAt":  "2024-02-13T01:55:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53IFV1",
                                           "createdAt":  "2024-03-14T22:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Still affecting 6.0. Example: https://github.com/dotnet/runtime/pull/99787\r\n\r\n- Build: https://dev.azure.com/dnceng-public/public/_build/results?buildId=603897\r\n- Queue: `Mono llvmaot Pri0 Runtime Tests Run Linux arm64 release`\r\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=603897\u0026view=logs\u0026j=74e689b1-5e71-5f30-9486-7c2c5ff44021\u0026t=bc7664d5-2e7c-57dc-1337-ab0ada348ecf\u0026l=69\r\n- Log file: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-99787-merge-3acb3871c0ab4944b3/PayloadGroup0/1/console.33b200c3.log?helixlogtype=result\r\n- Output:\r\n```\r\n  Starting:    GC.API.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    GC/API/GCHandleCollector/Usage/Usage.sh [FAIL]\r\n      \r\n      Unhandled Exception:\r\n      System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n         at System.Runtime.InteropServices.HandleCollector.Remove()\r\n         at HandleCollectorTest.Finalize()\r\n      \r\n      Return code:      1\r\n      Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n      Case 1 Passed!\r\n      100, 100\r\n      Case 2 Passed!\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/root/helix/work/correlation\r\n      \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at GC_API._GCHandleCollector_Usage_Usage_._GCHandleCollector_Usage_Usage_sh()\r\n      Output:\r\n        \r\n        Unhandled Exception:\r\n        System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Handle collector count overflows or underflows.\r\n           at System.Runtime.InteropServices.HandleCollector.Remove()\r\n           at HandleCollectorTest.Finalize()\r\n        \r\n        Return code:      1\r\n        Raw output file:      /root/helix/work/workitem/uploads/Reports/GC.API/GCHandleCollector/Usage/Usage.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false Usage.dll \u0027\u0027\r\n        Case 1 Passed!\r\n        100, 100\r\n        Case 2 Passed!\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/root/helix/work/correlation\r\n        \u003e /root/helix/work/workitem/e/GC/API/GCHandleCollector/Usage/Usage.sh\r\n  Finished:    GC.API.XUnitWrapper\r\n```",
                                           "updatedAt":  "2024-03-14T22:50:10Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[6.0] GC test failures: Handle collector count overflows or underflows",
        "labels":  [
                       "area-GC-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81425",
        "createdAt":  "2023-01-31T14:14:29Z",
        "number":  81425,
        "author":  "jogibear9988",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-06T07:17:47Z",
        "body":  "### Description\n\nHello,\r\n\r\nwe have a very complex Net7 Program, wich increases Memory usage per day about arround 1GB.\r\nWhen I use MemoryProfiler it shows that most of the Memory is unmanged. How can I analyse where the memory is used?\r\n\r\nI\u0027ve a dump of the process:\r\nhttps://owncloud.mlog-onlineportal.de/index.php/s/7PKkvhYJ3EWYTEl\r\nPassword: mlog\r\n\r\nMaybe someone could help?\n\n### Reproduction Steps\n\ndont know\n\n### Expected behavior\n\ndo not use so much memory\n\n### Actual behavior\n\nuses a huge amount of memory\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOixT3bQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UEYSu",
                                           "createdAt":  "2023-01-31T14:14:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nHello,\r\n\r\nwe have a very complex Net7 Program, wich increases Memory usage per day about arround 1GB.\r\nWhen I use MemoryProfiler it shows that most of the Memory is unmanged. How can I analyse where the memory is used?\r\n\r\nI\u0027ve a dump of the process:\r\nhttps://owncloud.mlog-onlineportal.de/index.php/s/7PKkvhYJ3EWYTEl\r\nPassword: mlog\r\n\r\nMaybe someone could help?\n\n### Reproduction Steps\n\ndont know\n\n### Expected behavior\n\ndo not use so much memory\n\n### Actual behavior\n\nuses a huge amount of memory\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejogibear9988\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-31T14:14:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UF1kb",
                                           "createdAt":  "2023-01-31T17:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hel @jogibear9988, could you please provide more information about your application? Does the memory continue to increase if the application is left running or does it plateau after hitting steady state and you need to figure out what is consuming the memory?",
                                           "updatedAt":  "2023-01-31T17:49:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UGCIt",
                                           "createdAt":  "2023-01-31T18:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "no, it increases until we get outofmemory exceptions and the process crashes.\r\nFor me it\u0027s unclear how I can analyze the memory dumps. I only find instructions how to analyze managed memory.\r\n\r\nNext problem is, when we create the FullDump, after that we need to restart the software, or it will not work any more.\r\nThis is another problem I need to find, wich we have on all our installations not only on this one with the memory increase.\r\n\r\nWe have the problem that after a full dump, 30-60seconds later our internal kestrel webserver does not work any more (without throwing any exception), but this is another problem where I\u0027m also doing some tests.",
                                           "updatedAt":  "2023-01-31T18:23:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UWw6R",
                                           "createdAt":  "2023-02-03T07:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "have you tried the [DebugDiag](https://www.microsoft.com/en-us/download/details.aspx?id=103453) tool? it\u0027s supposed to do native memory analysis as well.",
                                           "updatedAt":  "2023-02-03T07:46:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UYLjx",
                                           "createdAt":  "2023-02-03T10:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "Tried it now, everything is okay acording to this tool. Creates this Report:\r\n[20230130PuGMCC_MultipleRules.zip](https://github.com/dotnet/runtime/files/10577979/20230130PuGMCC_MultipleRules.zip)\r\n",
                                           "updatedAt":  "2023-02-03T10:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UjW4I",
                                           "createdAt":  "2023-02-06T05:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the tool reports you have 9.5GB committed on the native NT heap. are you not concerned with that?\r\n\r\n \u003c/HEAD\u003e\u003cBODY\u003e\u003cDIV class=\"wrapper\"\u003e\u003cDIV id=\"ng-view\"\u003e\u003cDIV class=\"grid-container\"\u003e\u003cDIV class=\"row\"\u003e\u003cDIV style=\"margin-top: 60px;\"\u003e\u003cDIV style=\"margin-top: 60px;\"\u003e\u003cDIV class=\"analysisDetailsSection\"\u003e\u003cDIV id=\"analysisDetailsGroup\"\u003e\u003cDIV class=\"normalText group\" id=\"group\"\u003e\u003cDIV class=\"mt20\" id=\"B2\" style=\"display: block;\" data-debug-rule=\"MemoryAnalysis\" data-debug-details=\"parent\"\u003e\u003cDIV class=\"normalText group\" id=\"B2group\"\u003e\u003cDIV class=\"mt20 dump\" id=\"B2C1\" style=\"display: block;\" data-debug-rule=\"MemoryAnalysis\" data-debug-dump=\"20230130PuGMCC.dmp\" data-debug-details=\"dump\"\u003e\u003cDIV class=\"normalText group\" id=\"B2C1group\"\u003e\u003cDIV class=\"mt20 custom\" id=\"HeapReportB2C1\" data-debug-rule=\"MemoryAnalysis\" data-debug-dump=\"20230130PuGMCC.dmp\" data-debug-details=\"custom\"\u003e\u003cDIV class=\"normalText group\" id=\"HeapReportB2C1group\"\u003e\u003cDIV class=\"mt20 custom\" id=\"HeapDetailsB2C1\" data-debug-rule=\"MemoryAnalysis\" data-debug-dump=\"20230130PuGMCC.dmp\" data-debug-details=\"custom\"\u003e\u003c!--StartFragment--\u003e\u003cDIV class=\"groupTitle mt20\"\u003e\u003cH3\u003eHeap Details\u003c/H3\u003e\u003c/DIV\u003e\u003cDIV class=\"normalText group\" id=\"HeapDetailsB2C1group\"\u003e\u003cDIV class=\"mt10 ml15 normalText\"\u003e\u003cH4\u003e\u003cA name=\"#B2C11957313708032\"\u003eHeap 1 - 0xb8fd0000 | NT Heap\u003c/A\u003e\u003c/H4\u003e\u003cTABLE class=\"myCustomText\" id=\"Table1\"\u003e\u003cTBODY\u003e\u003cTR\u003e\u003cTD\u003e\u003cB\u003eHeap Name\u003c/B\u003e\u003c/TD\u003e\u003cTD\u003e\u003cB\u003e  Default process heap\u003c/B\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003e\u003cB\u003eHeap Description\u003c/B\u003e\u003c/TD\u003e\u003cTD\u003e\u003cB\u003e  This heap is created by default and shared by all modules in the process\u003c/B\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003e\u003cB\u003eReserved memory\u003c/B\u003e\u003c/TD\u003e\u003cTD\u003e\u003cB\u003e  \u003cFONT color=\"darkred\"\u003e9,52 GBytes\u003c/FONT\u003e\u003c/B\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003e\u003cB\u003eCommitted memory\u003c/B\u003e\u003c/TD\u003e\u003cTD\u003e\u003cB\u003e  \u003cFONT color=\"darkred\"\u003e9,5 GBytes\u003c/FONT\u003e(99,77% of reserved)\u003c/B\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003e\u003cB\u003eUncommitted memory\u003c/B\u003e\u003c/TD\u003e\u003cTD\u003e\u003cB\u003e  \u003cFONT color=\"saddlebrown\"\u003e22,4 MBytes\u003c/FONT\u003e(0,23% of reserved)\u003c/B\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003e\u003cB\u003eNumber of heap segments\u003c/B\u003e\u003c/TD\u003e\u003cTD\u003e\u003cB\u003e  615 segments\u003c/B\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003eNumber of uncommitted ranges\u003c/TD\u003e\u003cTD\u003e  640 range(s)\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003eSize of largest uncommitted range\u003c/TD\u003e\u003cTD\u003e  \u003cFONT color=\"saddlebrown\"\u003e4,77 MBytes\u003c/FONT\u003e\u003c/TD\u003e\u003c/TR\u003e\u003cTR\u003e\u003cTD\u003eCalculated heap fragmentation\u003c/TD\u003e\u003cTD\u003eUnavailable\u003c/TD\u003e\u003c/TR\u003e\u003c/TBODY\u003e\u003c/TABLE\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c!--EndFragment--\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/DIV\u003e\u003c/BODY\u003e\u003c/HTML\u003e",
                                           "updatedAt":  "2023-02-06T05:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UjcwS",
                                           "createdAt":  "2023-02-06T06:23:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "sure I\u0027m concerned. But that is the problem. who is commiting this memory on the native heap? that\u0027s the thing i try to find out. And that\u0027s the question how to do?",
                                           "updatedAt":  "2023-02-06T06:23:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UqOfE",
                                           "createdAt":  "2023-02-07T08:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/using-umdh-to-find-a-user-mode-memory-leak",
                                           "updatedAt":  "2023-02-07T08:07:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UtXiN",
                                           "createdAt":  "2023-02-07T17:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "I now try to use vmmap. Anyone used it with a dotnet app? Anyone know this error: https://social.technet.microsoft.com/forums/Windows/en-US/2fd057d5-a5fe-4045-b724-9aac9627287f/vmmap-no-longer-shows-managed-heap-on-windows-10-version-1903?forum=miscutils\u0026prof=required",
                                           "updatedAt":  "2023-02-07T17:39:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ij-7N",
                                           "createdAt":  "2024-08-15T11:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavelFischerCoupa",
                                           "body":  "Hello, we have same issue with .net8 and amazon linux 2 containers. Gain +0.5Gb per day in native memory\r\nCurrently trying to check if it is a production code, but so far didn\u0027t found any code, which produces it.",
                                           "updatedAt":  "2024-08-15T11:52:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IqfsJ",
                                           "createdAt":  "2024-08-16T05:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavelFischerCoupa",
                                           "body":  "Native memory reported by k8s:\r\n![image](https://github.com/user-attachments/assets/dc55806e-ad8b-4308-89e4-283eca893372)\r\nBut application does nothing:\r\n![image](https://github.com/user-attachments/assets/2c103d51-0de3-4f3e-ae5f-263b8421e131)\r\n\r\n",
                                           "updatedAt":  "2024-08-16T05:34:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LFPdt",
                                           "createdAt":  "2024-09-06T07:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavelFischerCoupa",
                                           "body":  "We have found our issue: it was in the external dependency.",
                                           "updatedAt":  "2024-09-06T07:17:46Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Memory Leak in Complex Software with Net 7",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84035",
        "createdAt":  "2023-03-28T15:40:56Z",
        "number":  84035,
        "author":  "GokulprasathVenkatachalam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-13T02:04:59Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have a simple sample that has three buttons. Investigating the sample with the diagnostic tool in the Visual Studio shows that, the process memory and the memory snapshot results are not equal.\r\n\r\nFind the below screenshots with captions to understand the scenario and its findings.\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228258474-9d86eea0-0e1e-422e-892f-899d420d1807.png\"\u003e\u003c/Img\u003e\r\nScreenshot 1: Started the application \r\n\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228258845-64b71aed-fcfe-4eb2-b143-8f32a0ff07b1.png\"\u003e\u003c/Img\u003e\r\nScreenshot 2: Loading a PDF file as a file stream, by clicking the OpenFile button. Then copying it to a new memory stream. The memory shoots here\r\n\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228258980-39751504-c41f-4eff-bb84-6bd37c8a61d5.png\"\u003e\u003c/Img\u003e\r\nScreenshot 3: Disposing the memory stream and the objects that were initialized, by clicking the DisposeFile button. Memory snapshot is taken now, where the memory is released almost to the starting point, but the process memory (graph) is still the same.\r\n\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228259146-f4991173-160a-4bde-9e1e-d1e13d091660.png\"\u003e\u003c/Img\u003e\r\nScreenshot 4: The process memory is reduced on clicking the GC.Collect(), and again the memory snapshot is taken\r\nNOTE: I cannot keep calling the GC.Collect() to reduce the memory as it affects the performance of my application.\r\n\r\n\r\n### Expected Behavior\r\n\r\nMy Questions are:\r\n\r\n1. Why there is a difference between the process memory and the memory snapshot?\r\n2. Any solution is there to equalize them?\r\n3. What could be your recommendation to handle such situation?\r\n\r\n\r\n### Steps To Reproduce\r\n\r\n- Extract the below sample\r\n- Run the sample\r\n- Open the Task manager\r\n- Check the Process Memory and take a Memory snapshot\r\n- Click the OpenFile button check the Process Memory and take a Memory snapshot\r\n- Click the DisposeFile button check the Process Memory and take a Memory snapshot\r\n\r\nThe process memory size keep on increasing.\r\nSample project :\r\nhttps://drive.google.com/file/d/1Kdk-Kyp3G1red-8Kl56SptEzx_e1_wU_/view?usp=sharing\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\ndotnet 3.1, 6.0, 7.0\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWccS_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YqGzi",
                                           "createdAt":  "2023-03-28T18:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have a simple sample that has three buttons. Investigating the sample with the diagnostic tool in the Visual Studio shows that, the process memory and the memory snapshot results are not equal.\r\n\r\nFind the below screenshots with captions to understand the scenario and its findings.\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228258474-9d86eea0-0e1e-422e-892f-899d420d1807.png\"\u003e\u003c/Img\u003e\r\nScreenshot 1: Started the application \r\n\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228258845-64b71aed-fcfe-4eb2-b143-8f32a0ff07b1.png\"\u003e\u003c/Img\u003e\r\nScreenshot 2: Loading a PDF file as a file stream, by clicking the OpenFile button. Then copying it to a new memory stream. The memory shoots here\r\n\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228258980-39751504-c41f-4eff-bb84-6bd37c8a61d5.png\"\u003e\u003c/Img\u003e\r\nScreenshot 3: Disposing the memory stream and the objects that were initialized, by clicking the DisposeFile button. Memory snapshot is taken now, where the memory is released almost to the starting point, but the process memory (graph) is still the same.\r\n\r\n\u003cImg src=\"https://user-images.githubusercontent.com/85215041/228259146-f4991173-160a-4bde-9e1e-d1e13d091660.png\"\u003e\u003c/Img\u003e\r\nScreenshot 4: The process memory is reduced on clicking the GC.Collect(), and again the memory snapshot is taken\r\nNOTE: I cannot keep calling the GC.Collect() to reduce the memory as it affects the performance of my application.\r\n\n\n### Expected Behavior\n\nSnapshot shows memory reduced after disposing the instance. but in process memory chat we did not able to see any memory reduction. Both memory snapshot and process memory should equal value.\r\n\r\nMy Questions are:\r\n\r\n1. Why there is a difference between the process memory and the memory snapshot?\r\n2. Any solution is there to equalize them?\r\n3. What could be your recommendation to handle such situation?\r\n\n\n### Steps To Reproduce\n\n- Extract the below sample\r\n- Run the sample\r\n- Open the Task manager\r\n- Check the Process Memory and take a Memory snapshot\r\n- Click the OpenFile button check the Process Memory and take a Memory snapshot\r\n- Click the DisposeFile button check the Process Memory and take a Memory snapshot\r\n\r\nThe process memory size keep on increasing.\r\nSample project :\r\nhttps://drive.google.com/file/d/1Kdk-Kyp3G1red-8Kl56SptEzx_e1_wU_/view?usp=sharing\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\ndotnet 3.1\n\n### Anything else?\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGokulprasathVenkatachalam\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-28T18:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YqbYb",
                                           "createdAt":  "2023-03-28T19:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I am guessing the two are different since the memory usage shows the size of the managed heap whereas the process memory shows the actual committed bytes. The GC could keep things committed if there isnt any memory pressure on the system. \r\n\r\nBtw, you mention you are running on 3.1 which is out-of-support now. Thx!",
                                           "updatedAt":  "2023-03-28T19:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yqblf",
                                           "createdAt":  "2023-03-28T19:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Adding @tommcdon to clarify the process vs. memory snapshot functionality. ",
                                           "updatedAt":  "2023-03-28T19:59:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YsBbl",
                                           "createdAt":  "2023-03-29T04:40:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GokulprasathVenkatachalam",
                                           "body":  "\u003e I am guessing the two are different since the memory usage shows the size of the managed heap whereas the process memory shows the actual committed bytes. The GC could keep things committed if there isnt any memory pressure on the system.\r\n\u003e \r\n\u003e Btw, you mention you are running on 3.1 which is out-of-support now. Thx!\r\n\r\n@mangod9 - We have facing same issue in .net 6.0 and  .net7.0 also.",
                                           "updatedAt":  "2023-03-29T04:40:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZUWaw",
                                           "createdAt":  "2023-04-06T05:20:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KameshRajendran",
                                           "body":  "Hi @mangod9 / @tommcdon - Do we have any update on this?",
                                           "updatedAt":  "2023-04-06T05:20:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZUXGV",
                                           "createdAt":  "2023-04-06T05:25:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "As mentioned above the difference is between managed memory and the full process memory (which included things like IL and generated native code plus other data structures). Could you elaborate on your scenario on whether this is just a mere observation you need clarification about or is this causing any issues in your particular scenario? ",
                                           "updatedAt":  "2023-04-06T05:25:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zf2Fm",
                                           "createdAt":  "2023-04-10T07:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KameshRajendran",
                                           "body":  "\r\n@mangod9  As mentioned in the previous update, We are attempting to load a PDF document into a memory stream for investigation purposes. \r\n \r\n![image](https://user-images.githubusercontent.com/25635968/230855524-a25844a0-cf30-4bd8-88ad-ae614acb3531.png)\r\n\r\nDuring this process, we took four snapshots: \r\n1.\tfirst before loading the document into the memory stream, \r\n2.\tthe second after loading the document, \r\n3.\tand the third and fourth after disposing of the memory stream and related instances. \r\n\r\nUpon reviewing the snapshots, we noticed that the object reference decreased as expected after disposing of the memory stream. However, the process memory did not decrease as it did before loading the memory stream, and it remained unchanged. We expected that when objects are disposed of, the process memory chart should also decrease accordingly. \r\n\r\n![image](https://user-images.githubusercontent.com/25635968/230855442-04942d31-dbc5-401f-b855-6208a46bdff5.png)\r\n",
                                           "updatedAt":  "2023-04-10T07:58:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZhxVR",
                                           "createdAt":  "2023-04-10T16:24:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @KameshRajendran!\r\n\r\nIn the future I suggest opening a [Visual Studio feedback ticket](https://learn.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio) as these questions are about Visual Studio tooling and not the .NET runtime.  \r\n\r\n\u003e Why there is a difference between the process memory and the memory snapshot?\r\n\r\nThe Memory snapshot represents the GC heap (managed objects allocated to the GC heap) unless native or mixed mode debugging is enabled - please see https://learn.microsoft.com/visualstudio/profiling/memory-usage.  , \r\nProcess memory in the diagnostics represents the actual memory being used in the process including modules, thread, and heap memory.  \r\n\r\n\u003e Any solution is there to equalize them?\r\n\r\nThe Process Memory graph should always be a superset of the managed memory allocations as it includes modules and threads.  \r\n\r\n\u003e What could be your recommendation to handle such situation?\r\n\r\nThe \"Private Bytes\" is tracking the private memory (non-shared memory) portion of the graph should roughly correspond to the memory allocations in the process.  \r\n\r\nHope this helps!",
                                           "updatedAt":  "2023-04-10T16:24:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZxxL8",
                                           "createdAt":  "2023-04-13T02:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e Why there is a difference between the process memory and the memory snapshot?\r\n\r\nbecause they are simply showing you very different things. They are not supposed to be equal so you cannot equalize them. the only invariant you can have is heap size will always be smaller than private bytes assuming VS is using private bytes in the traditional sense, meaning it\u0027s the private committed bytes for this process which the GC heap is part of. there will always be other private bytes in the process. \r\n\r\nheap size is also not the actual private bytes usage of the GC heap - it\u0027s actually displaying the amount of memory objects take up on the GC heap not counting the free objects. even if it displayed the number that includes free objects it\u0027s still not the private bytes that the GC heap takes up because some memory will be committed but not currently in use. [this](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#special-handling-of-the-ephemeral-segment) explains why there\u0027s this discrepancy. note that this is the case for pre 7.0. I\u0027ve written about the 7.0+ representation in [this blog post](https://itnext.io/how-segments-and-regions-differ-in-decommitting-memory-in-the-net-7-gc-68c58465ab5a) but I have yet to incorporate it into mem-doc.",
                                           "updatedAt":  "2023-04-13T02:04:59Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Process memory and the memory snapshot are not equal",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85483",
        "createdAt":  "2023-04-27T19:22:37Z",
        "number":  85483,
        "author":  "mrsharm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T17:36:17Z",
        "body":  "## Summary\r\n\r\nThis issue tracks the work associated with identifying and solving the discrepancy between Windows Intel vs. Ubuntu Intel and Windows Intel vs. Ubuntu ARM based on the GCPerfSim Scenarios. \r\n\r\nThe general themes in terms of the results are:\r\n\r\n1. Windows Intel based traces exhibited a higher execution time than their Ubuntu based counterparts. \r\n2. % Time Spent in GC for Linux based runs is, in general, much higher than the Windows based counterparts.\r\n3. Results on the ASPNet Machines are far less volatile (minus a few outliers sprinkled here and there) than those on our GC machines implying a need to establish some protocols such as logging other users off before running any of the tests.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWvh85g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5a-Hzm",
                                           "createdAt":  "2023-04-27T19:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Summary\r\n\r\nThis issue tracks the work associated with identifying and solving the discrepancy between Windows Intel vs. Ubuntu Intel and Windows Intel vs. Ubuntu ARM based on the GCPerfSim Scenarios. \r\n\r\nThe general themes in terms of the results are:\r\n\r\n1. Windows Intel based traces exhibited a higher execution time than their Ubuntu based counterparts. \r\n2. % Time Spent in GC for Linux based runs is, in general, much higher than the Windows based counterparts.\r\n3. Results on the ASPNet Machines are far less volatile (minus a few outliers sprinkled here and there) than those on GCPerfCl implying a need to establish some protocols such as logging other users off before running any of the tests.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emrsharm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-27T19:22:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "GC Performance OS and Hardware Comparison Differences: Windows Intel vs. Ubuntu Intel and Windows Intel vs. Ubuntu ARM",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85556",
        "createdAt":  "2023-04-29T10:39:24Z",
        "number":  85556,
        "author":  "AlphaBs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHT5iQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leoschwarz",
                                            "createdAt":  "2025-06-12T10:48:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sasino97",
                                            "createdAt":  "2025-07-16T23:17:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-01-29T12:39:52Z",
        "body":  "### Description\n\n`dotnet --version`, `dotnet build` commands crash with 0x8007000E error.\r\n\r\n```\r\nubuntu@localhost:~$ dotnet --version\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n```\n\n### Reproduction Steps\n\nInstall dotnet 7.0 sdk with `dotnet_install.sh` script and run `dotnet --version` command on terminal\n\n### Expected behavior\n\nprint dotnet version\n\n### Actual behavior\n\n```\r\nubuntu@localhost:~$ dotnet --version\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n```\r\n\r\nI also run command with strace:\r\n[stracelog.txt](https://github.com/dotnet/runtime/files/11358910/stracelog.txt)\r\n\n\n### Regression?\n\nworks perfectly on .NET 6.0.4 SDK\r\n\n\n### Known Workarounds\n\nI solved the problem with [this](https://github.com/dotnet/runtime/issues/79612#issuecomment-1352378682)\r\n\r\n```\r\nubuntu@localhost:~/.dotnet$ DOTNET_GCHeapHardLimit=1C0000000 dotnet --version\r\n7.0.203\r\n```\r\n\r\nHowever why this occurs on .NET 7.0? On .NET 6.0 works without any problem\n\n### Configuration\n\nubuntu jammy, ARM64, run on Termux (Android 13)\n\n### Other information\n\n```\r\nubuntu@localhost:~/.dotnet$ ulimit -v\r\nunlimited                                                           \r\nubuntu@localhost:~/.dotnet$ cat /proc/meminfo\r\nMemTotal:        7475488 kB                                          MemFree:          214228 kB\r\nMemAvailable:    1438284 kB                                          Buffers:             756 kB\r\nCached:          1464412 kB                                          SwapCached:        22804 kB\r\nActive:          1207476 kB                                          Inactive:        1771804 kB\r\nActive(anon):     639508 kB                                          Inactive(anon):  1270248 kB\r\nActive(file):     567968 kB                                          Inactive(file):   501556 kB\r\nUnevictable:       19004 kB                                          Mlocked:           16752 kB\r\nRbinTotal:        327680 kB                                          RbinAlloced:        7168 kB\r\nRbinPool:              0 kB                                          RbinFree:             80 kB\r\nRbinCached:       320432 kB                                          ZeroedFree:            0 kB\r\nSwapTotal:       4194300 kB                                          SwapFree:        1015972 kB\r\nDirty:               620 kB                                          Writeback:             0 kB\r\nAnonPages:       1845132 kB                                          Mapped:           902216 kB\r\nShmem:             60352 kB                                          KReclaimable:     315004 kB                                          Slab:             589340 kB\r\nSReclaimable:     146800 kB                                          SUnreclaim:       442540 kB\r\nKernelStack:       97984 kB\r\nShadowCallStack:   24532 kB\r\nPageTables:       209516 kB\r\nNFS_Unstable:          0 kB\r\nBounce:                0 kB\r\nWritebackTmp:          0 kB\r\nCommitLimit:     7768204 kB\r\nCommitted_AS:   238931928 kB\r\nVmallocTotal:   263061440 kB                                         VmallocUsed:      257124 kB\r\nVmallocChunk:          0 kB                                          Percpu:            12544 kB\r\nAnonHugePages:         0 kB                                          ShmemHugePages:        0 kB\r\nShmemPmdMapped:        0 kB                                          FileHugePages:         0 kB\r\nFilePmdMapped:         0 kB                                          HugepagePool:          0 kB\r\nCmaTotal:         487424 kB                                          CmaFree:            4976 kB\r\ndma_heap_pool:    104732 kB                                          system:           569356 kB\r\nkgsl_pool:         63656 kB\r\nKgslSharedmem:   1044500 kB\r\nzram0:            850656 kB\r\nubuntu@localhost:~/.dotnet$ dotnet --info\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n\r\nHost:\r\n  Version:      7.0.5\r\n  Architecture: arm64\r\n  Commit:       8042d61b17\r\n                                                                     .NET SDKs installed:\r\n  7.0.203 [/home/ubuntu/.dotnet/sdk]                                 \r\n.NET runtimes installed:                                               Microsoft.AspNetCore.App 7.0.5 [/home/ubuntu/.dotnet/shared/Microsoft.AspNetCore.App]                                                     Microsoft.NETCore.App 7.0.5 [/home/ubuntu/.dotnet/shared/Microsoft.NETCore.App]                                                         \r\nOther architectures found:                                             None\r\n                                                                     Environment variables:\r\n  Not set                                                            \r\nglobal.json file:                                                      Not found\r\n                                                                     Learn more:                                                            https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\nubuntu@localhost:~/.dotnet$ dotnet --version\r\nGC heap initialization failed with error 0x8007000E                  Failed to create CoreCLR, HRESULT: 0x8007000E\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOch65rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5bH0II",
                                           "createdAt":  "2023-04-29T12:15:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n`dotnet --version`, `dotnet build` commands crash with 0x8007000E error.\r\n\r\n```\r\nubuntu@localhost:~$ dotnet --version\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n```\n\n### Reproduction Steps\n\nInstall dotnet 7.0 sdk with `dotnet_install.sh` script and run `dotnet --version` command on terminal\n\n### Expected behavior\n\nprint dotnet version\n\n### Actual behavior\n\n```\r\nubuntu@localhost:~$ dotnet --version\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n```\r\n\r\nI also run command with strace:\r\n[stracelog.txt](https://github.com/dotnet/runtime/files/11358910/stracelog.txt)\r\n\n\n### Regression?\n\nworks perfectly on .NET 6.0.4 SDK\r\n\n\n### Known Workarounds\n\nI solved the problem with [this](https://github.com/dotnet/runtime/issues/79612#issuecomment-1352378682)\r\n\r\n```\r\nubuntu@localhost:~/.dotnet$ DOTNET_GCHeapHardLimit=1C0000000 dotnet --version\r\n7.0.203\r\n```\r\n\r\nHowever why this occurs on .NET 7.0? On .NET 6.0 works without any problem\n\n### Configuration\n\nubuntu jammy, ARM64, run on Termux (Android 13)\n\n### Other information\n\n```\r\nubuntu@localhost:~/.dotnet$ ulimit -v\r\nunlimited                                                           \r\nubuntu@localhost:~/.dotnet$ cat /proc/meminfo\r\nMemTotal:        7475488 kB                                          MemFree:          214228 kB\r\nMemAvailable:    1438284 kB                                          Buffers:             756 kB\r\nCached:          1464412 kB                                          SwapCached:        22804 kB\r\nActive:          1207476 kB                                          Inactive:        1771804 kB\r\nActive(anon):     639508 kB                                          Inactive(anon):  1270248 kB\r\nActive(file):     567968 kB                                          Inactive(file):   501556 kB\r\nUnevictable:       19004 kB                                          Mlocked:           16752 kB\r\nRbinTotal:        327680 kB                                          RbinAlloced:        7168 kB\r\nRbinPool:              0 kB                                          RbinFree:             80 kB\r\nRbinCached:       320432 kB                                          ZeroedFree:            0 kB\r\nSwapTotal:       4194300 kB                                          SwapFree:        1015972 kB\r\nDirty:               620 kB                                          Writeback:             0 kB\r\nAnonPages:       1845132 kB                                          Mapped:           902216 kB\r\nShmem:             60352 kB                                          KReclaimable:     315004 kB                                          Slab:             589340 kB\r\nSReclaimable:     146800 kB                                          SUnreclaim:       442540 kB\r\nKernelStack:       97984 kB\r\nShadowCallStack:   24532 kB\r\nPageTables:       209516 kB\r\nNFS_Unstable:          0 kB\r\nBounce:                0 kB\r\nWritebackTmp:          0 kB\r\nCommitLimit:     7768204 kB\r\nCommitted_AS:   238931928 kB\r\nVmallocTotal:   263061440 kB                                         VmallocUsed:      257124 kB\r\nVmallocChunk:          0 kB                                          Percpu:            12544 kB\r\nAnonHugePages:         0 kB                                          ShmemHugePages:        0 kB\r\nShmemPmdMapped:        0 kB                                          FileHugePages:         0 kB\r\nFilePmdMapped:         0 kB                                          HugepagePool:          0 kB\r\nCmaTotal:         487424 kB                                          CmaFree:            4976 kB\r\ndma_heap_pool:    104732 kB                                          system:           569356 kB\r\nkgsl_pool:         63656 kB\r\nKgslSharedmem:   1044500 kB\r\nzram0:            850656 kB\r\nubuntu@localhost:~/.dotnet$ dotnet --info\r\nGC heap initialization failed with error 0x8007000E\r\nFailed to create CoreCLR, HRESULT: 0x8007000E\r\n\r\nHost:\r\n  Version:      7.0.5\r\n  Architecture: arm64\r\n  Commit:       8042d61b17\r\n                                                                     .NET SDKs installed:\r\n  7.0.203 [/home/ubuntu/.dotnet/sdk]                                 \r\n.NET runtimes installed:                                               Microsoft.AspNetCore.App 7.0.5 [/home/ubuntu/.dotnet/shared/Microsoft.AspNetCore.App]                                                     Microsoft.NETCore.App 7.0.5 [/home/ubuntu/.dotnet/shared/Microsoft.NETCore.App]                                                         \r\nOther architectures found:                                             None\r\n                                                                     Environment variables:\r\n  Not set                                                            \r\nglobal.json file:                                                      Not found\r\n                                                                     Learn more:                                                            https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\nubuntu@localhost:~/.dotnet$ dotnet --version\r\nGC heap initialization failed with error 0x8007000E                  Failed to create CoreCLR, HRESULT: 0x8007000E\r\n\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAlphaBs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-29T12:15:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bJWQE",
                                           "createdAt":  "2023-05-01T00:08:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "```\r\nmmap(NULL, 274877915136, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Cannot allocate memory)\r\n```\r\nlooks like it tries to reserve 256Gb of memory?",
                                           "updatedAt":  "2023-05-01T00:09:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bJby9",
                                           "createdAt":  "2023-05-01T00:34:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Does trying with 8.0 preview 3 give the same result?",
                                           "updatedAt":  "2023-05-01T00:34:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bJ2Ej",
                                           "createdAt":  "2023-05-01T03:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "its possible Termux doesnt support a large reservation size, something similar was hit with RISC-V recently. Setting the hardlimit to something smaller makes the GC reserve a smaller size. ",
                                           "updatedAt":  "2023-05-01T03:28:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bJ2H4",
                                           "createdAt":  "2023-05-01T03:29:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli to check if there is a way to figure out the max reservation size for an OS. ",
                                           "updatedAt":  "2023-05-01T03:29:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bK1Qe",
                                           "createdAt":  "2023-05-01T10:43:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlphaBs",
                                           "body":  "\u003e Does trying with 8.0 preview 3 give the same result?\r\n\r\nyes. same result with same error on .NET 8.0.100-preview.3.23178.7\r\n`mmap(NULL, 274877911040, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Cannot allocate memory)`",
                                           "updatedAt":  "2023-05-01T10:43:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bSFZf",
                                           "createdAt":  "2023-05-02T13:22:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The max reservation size is also influenced by the virtual memory limit. @AlphaBs can you please check it using `ulimit -a` bash command? See the \"virtual memory\" line.",
                                           "updatedAt":  "2023-05-02T13:22:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bSMnX",
                                           "createdAt":  "2023-05-02T13:39:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlphaBs",
                                           "body":  "\u003e The max reservation size is also influenced by the virtual memory limit. @AlphaBs can you please check it using `ulimit -a` bash command? See the \"virtual memory\" line.\n\n\n\n```\nubuntu@localhost:~$ ulimit -a\nreal-time non-blocking time  (microseconds, -R) unlimited\ncore file size              (blocks, -c) 0\ndata seg size               (kbytes, -d) unlimited\nscheduling priority                 (-e) 20\nfile size                   (blocks, -f) unlimited\npending signals                     (-i) 16382\nmax locked memory           (kbytes, -l) 64\nmax memory size             (kbytes, -m) unlimited\nopen files                          (-n) 1024\npipe size                (512 bytes, -p) 8\nPOSIX message queues         (bytes, -q) 819200\nreal-time priority                  (-r) 0\nstack size                  (kbytes, -s) 8192\ncpu time                   (seconds, -t) unlimited\nmax user processes                  (-u) 25045\nvirtual memory              (kbytes, -v) unlimited\nfile locks                          (-x) unlimited\n```",
                                           "updatedAt":  "2023-05-02T13:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bSsUx",
                                           "createdAt":  "2023-05-02T14:55:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@mangod9 the `/proc/meminfo` reports `VmallocTotal`, which is the total size of vmalloc virtual address space. I can see from the dumped info in this issue that it is ~ 250GB while on my Linux box, it is 32TB. Maybe we could somehow base our maximum reservation limit on that, although it is a kernel side allocation limit. ",
                                           "updatedAt":  "2023-05-02T14:55:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bTHY0",
                                           "createdAt":  "2023-05-02T16:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "hmm, yeah guess we need to limit it based on the VM alloc limits. @AlphaBs, assume you have a workaround to manually set the heap hard limit for now? ",
                                           "updatedAt":  "2023-05-02T16:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bWD8o",
                                           "createdAt":  "2023-05-03T06:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWWpFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "orbanbalage",
                                                                               "createdAt":  "2023-09-21T04:34:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "endergreen12",
                                                                               "createdAt":  "2024-05-06T11:12:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nandafirmans",
                                                                               "createdAt":  "2024-09-15T13:54:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leoschwarz",
                                                                               "createdAt":  "2025-06-12T10:48:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "AlphaBs",
                                           "body":  "\u003e hmm, yeah guess we need to limit it based on the VM alloc limits. @AlphaBs, assume you have a workaround to manually set the heap hard limit for now? \n\n\nyes. I just added `export DOTNET_GCHeapHardLimit=1C0000000` to `.bashrc`. It works well.\n\nAs I tweaked that variable, I found that the limit point was roughly at b26000000. (47882174464 bytes, 47GB)\n\nI also found that this limit is not fixed, but varies from run to run (perhaps depending on memory usage of machine during execution).\n\nhere is the result of running the command repeatedly, with DOTNET_GCHeapHardLimit=b26000000`. \n\n```\nubuntu@localhost:~$ dotnet --version\nGC heap initialization failed with error 0x8007000E\nFailed to create CoreCLR, HRESULT: 0x8007000E\nubuntu@localhost:~$ free\n               total        used        free      shared  buff/cache   available\nMem:         7475488     5316836      345408       44060     1813244     2088116\nSwap:        4194300     2724232     1470068\nubuntu@localhost:~$ dotnet --version\n7.0.203\nubuntu@localhost:~$ free\n               total        used        free      shared  buff/cache   available\nMem:         7475488     5313228      348764       44060     1813496     2091708\nSwap:        4194300     2724232     1470068\nubuntu@localhost:~$ dotnet --version\nGC heap initialization failed with error 0x8007000E\nFailed to create CoreCLR, HRESULT: 0x8007000E\nubuntu@localhost:~$ dotnet --version\nGC heap initialization failed with error 0x8007000E\nFailed to create CoreCLR, HRESULT: 0x8007000E\nubuntu@localhost:~$ free\n               total        used        free      shared  buff/cache   available\nMem:         7475488     5325684      262436       46936     1887368     1957008\nSwap:        4194300     2826736     1367564\nubuntu@localhost:~$ dotnet --version\n7.0.203\nubuntu@localhost:~$\n```\n\nDuring the execution the usage of memory:\n\n![Screenshot_20230503_153440_Termux.jpg](https://user-images.githubusercontent.com/17783561/235846536-19d285ae-126a-458c-b211-b10b7de5efac.jpg)\n\n\nAs you can see, the error doesn\u0027t always occur with b26000000 limit. But I don\u0027t know what this magic number b26000000 means. \n\nAny ideas??",
                                           "updatedAt":  "2023-05-03T06:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bWFWQ",
                                           "createdAt":  "2023-05-03T06:43:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlphaBs",
                                           "body":  "is it normal? very simple console program consume 220GB virtual memory.\n\n![Screenshot_20230503_154050_Termux.jpg](https://user-images.githubusercontent.com/17783561/235847547-6886ffad-5992-4010-8a32-baff0f372da0.jpg)\n\ntestcsharp.cs\n```\nConsole.WriteLine(\"Hello, World!\");\nint a = 0;\nwhile (true) a++;\n```",
                                           "updatedAt":  "2023-05-03T06:44:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bWtAA",
                                           "createdAt":  "2023-05-03T09:01:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD84xbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manoma080",
                                                                               "createdAt":  "2024-10-28T12:40:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "btwiuse",
                                                                               "createdAt":  "2024-11-28T16:29:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e is it normal? very simple console program consume 220GB virtual memory.\r\n\r\nIt just reserves the virtual address space. Virtual address space is per process, that means that each process in the system can reserve upto those 220GB of that space (on your device). So unless you set the ulimit for the virtual memory, this is essentially \"free\". The application can then map physical memory into the reserved memory as it needs. The amount of physical memory it has used can be seen in the \"RES\" column. You can see in your screenshot above that it has used about 23MB of memory. \r\n\r\nWe reserve the virtual memory so that GC can have continuous range of address space that other memory allocations in the process would not touch. \r\n\r\nThe reason why you have started seeing this issue in .NET 7 relative to .NET 6 is that we have substantially enlarged the amount of reserved virtual address space because of a new significant enhancement of the GC implementation. \r\n\r\n\u003e But I don\u0027t know what this magic number b26000000 means\r\n\r\nThis is a hexadecimal number representing number of bytes the GC heap can reserve. In decimal, it means 47882174464 bytes.\r\n\r\n\u003e I also found that this limit is not fixed, but varies from run to run\r\n\r\nThere might be some variations depending on other allocations the application and the 3rd party native libraries it uses made. I would recommend using e.g. 2/3 of this value to make it reliable. That would mean setting the env variable e.g. to 700000000 (which is 30064771072 decimal).\r\n",
                                           "updatedAt":  "2023-05-03T09:05:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hpvb2",
                                           "createdAt":  "2023-07-17T15:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevefan1999-personal",
                                           "body":  "Yes. I also see this problem running dotnet under proot on Android. And because of that, C# Dev Kit extension on VSCode Android does not work because we can\u0027t supply DOTNET_GCHeapHardLimit.",
                                           "updatedAt":  "2023-07-17T15:18:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pHDIC",
                                           "createdAt":  "2023-10-15T17:32:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "woachk",
                                           "body":  "Android devices ship with a 39-bit VA size across the board.",
                                           "updatedAt":  "2023-10-15T17:32:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yFw_w",
                                           "createdAt":  "2024-01-29T07:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I am also seeing this error with [`valgrind --tool=massif`](https://valgrind.org/docs/manual/ms-manual.html) when profiling NativeAOT app heap memory. Setting `DOTNET_GCHeapHardLimit=1C0000000` fixes the issue (and can [visualize](http://boutglay.com/massifjs/) the output). Adapting to environment constraints at run-time will certainly improve the user-experience in these chroot -like scenarios.\r\n\r\nps - using un-prefixed hex is not a good choice and confusing for environment variable IMHO. `DOTNET_GCHeapHardLimit` should accept both `0x\u003cHEX\u003e` and `\u003cDECIMAL\u003e` values, and throw helpful error message for invalid value.",
                                           "updatedAt":  "2024-01-29T07:31:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yGrL3",
                                           "createdAt":  "2024-01-29T10:02:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@am11 the fact that the values are always in hex is a historical thing, so it is hard to change that without breaking someone. However, prefixing the value with 0x works too already. The thing is that we call `strtoul` to convert the string to value. I didn\u0027t know that until few days ago when someone told me it works and re-reading `strtoul` documentation has uncovered that when you pass in base 16, the 0x can be in the string and it is just skipped.",
                                           "updatedAt":  "2024-01-29T10:02:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yHrmv",
                                           "createdAt":  "2024-01-29T12:39:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@janvorli, I tried this simple repro:\r\n\r\n```dockerfile\r\nFROM --platform=linux/aarch64 alpine:latest\r\n\r\nRUN apk add build-base curl clang llvm-dev valgrind bash zlib-dev icu-libs\r\nRUN curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --quality daily --channel \"9.0\" --install-dir \"$HOME/.dotnet9\"\r\n\r\nRUN ~/.dotnet9/dotnet new console --aot -n consoleapp1\r\nWORKDIR consoleapp1\r\nRUN cat \u003e \"$HOME/.nuget/NuGet/NuGet.Config\" \u003c\u003cEOF\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cconfiguration\u003e\r\n  \u003cpackageSources\u003e\r\n    \u003cadd key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" /\u003e\r\n    \u003cadd key=\"dotnet9\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json\" /\u003e\r\n  \u003c/packageSources\u003e\r\n\u003c/configuration\u003e\r\nEOF\r\n\r\nRUN ~/.dotnet9/dotnet publish -o dist -c Release\r\n\r\n# cache commands\r\n\r\n# Fails\r\nRUN echo \u0027valgrind --tool=massif dist/consoleapp1; echo $?\u0027 \u003e run.sh\r\n\r\n# Fails\r\nRUN echo \u0027DOTNET_GCHeapHardLimit=0x1C0000000 valgrind --tool=massif dist/consoleapp1; echo $?\u0027 \u003e\u003e run.sh\r\n\r\n# Works\r\nRUN echo \u0027DOTNET_GCHeapHardLimit=1C0000000 valgrind --tool=massif dist/consoleapp1; echo $?\u0027 \u003e\u003e run.sh\r\n\r\nENTRYPOINT [\"/bin/sh\", \"run.sh\"]\r\n```\r\n\r\nfirst two valgrind commands always fail with 255, only the last form (without `0x`) succeeds:\r\n```sh\r\n# build and tag once\r\n$ docker build -t consoleapp1-valgrind .\r\n# run\r\n$ docker run --rm consoleapp1-valgrind\r\n\r\n==7== Massif, a heap profiler\r\n==7== Copyright (C) 2003-2017, and GNU GPL\u0027d, by Nicholas Nethercote\r\n==7== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info\r\n==7== Command: dist/consoleapp1\r\n==7== \r\n==7== \r\n255\r\n==8== Massif, a heap profiler\r\n==8== Copyright (C) 2003-2017, and GNU GPL\u0027d, by Nicholas Nethercote\r\n==8== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info\r\n==8== Command: dist/consoleapp1\r\n==8== \r\n==8== \r\n255\r\n==9== Massif, a heap profiler\r\n==9== Copyright (C) 2003-2017, and GNU GPL\u0027d, by Nicholas Nethercote\r\n==9== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info\r\n==9== Command: dist/consoleapp1\r\n==9== \r\nHello, World!\r\n==9== \r\n0\r\n```\r\n\r\n(Few weeks older version of dotnet 9 was showing `GC heap initialization failed with error 0x8007000E`, today\u0027s build has no error message; just the exit code 255 🤔)",
                                           "updatedAt":  "2024-01-29T12:39:51Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "crash with 0x8007000E error on .NET 7.0",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86775",
        "createdAt":  "2023-05-25T21:59:47Z",
        "number":  86775,
        "author":  "Feralnex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T19:48:01Z",
        "body":  "### Description\n\nRunning [this project](https://github.com/Feralnex/MemoryManagementTest) in .net 6.0.16 causes Fatal error. Internal CLR error. (0x80131506) (using UnregisterFrozenSegment causes this error).\r\n\r\nSeems that it wasn\u0027t fixed in https://github.com/dotnet/runtime/pull/83623\n\n### Reproduction Steps\n\nRun applicatiojn few times until error pops up.\n\n### Expected behavior\n\nfrozen segments works as expected\n\n### Actual behavior\n\nFatal Error often pops up when using FrozenSegments:\r\n\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.GC._UnregisterFrozenSegment(IntPtr)\r\n   at Unmanaged.ObjectHandler.UnregisterFrozenSegment(IntPtr)\r\n   at Unmanaged.Collections.Array`1[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Destroy(System.__Canon)\r\n   at Unmanaged.Collections.Array`1[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Destroy(Boolean)\r\n   at Unmanaged.Extensions.UnmanagedExtensions.Destroy[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon, Boolean)\r\n   at Unmanaged.Program.Main(System.String[])\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYkJHqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5dMfJZ",
                                           "createdAt":  "2023-05-25T21:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nRunning [this project](https://github.com/Feralnex/MemoryManagementTest) in .net 6.0.16 causes Fatal error. Internal CLR error. (0x80131506) (using UnregisterFrozenSegment causes this error).\r\n\r\nSeems that it wasn\u0027t fixed in https://github.com/dotnet/runtime/pull/83623\n\n### Reproduction Steps\n\nRun applicatiojn few times until error pops up.\n\n### Expected behavior\n\nfrozen segments works as expected\n\n### Actual behavior\n\nFatal Error often pops up when using FrozenSegments:\r\n\r\nFatal error. Internal CLR error. (0x80131506)\r\n   at System.GC._UnregisterFrozenSegment(IntPtr)\r\n   at Unmanaged.ObjectHandler.UnregisterFrozenSegment(IntPtr)\r\n   at Unmanaged.Collections.Array`1[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Destroy(System.__Canon)\r\n   at Unmanaged.Collections.Array`1[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Destroy(Boolean)\r\n   at Unmanaged.Extensions.UnmanagedExtensions.Destroy[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.__Canon, Boolean)\r\n   at Unmanaged.Program.Main(System.String[])\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFeralnex\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-25T21:59:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dMtgO",
                                           "createdAt":  "2023-05-25T23:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "it doesn\u0027t look like [#83623](https://github.com/dotnet/runtime/pull/83623) was backported to .NET 6 though (@cshung, was this supposed to be backported?). or did you mean you think this is a different issue? ",
                                           "updatedAt":  "2023-05-25T23:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQkep",
                                           "createdAt":  "2023-07-24T19:48:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e UnregisterFrozenSegment \r\n\r\n`UnregisterFrozenSegment` has known reliability bugs. We have stopped testing it in https://github.com/dotnet/runtime/pull/86279 because of that.\r\n\r\n`UnregisterFrozenSegment` is internal experimental API. It is not tested and supported for general use.",
                                           "updatedAt":  "2023-07-24T19:48:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Fatal error. Internal CLR error. (0x80131506) in .NET 6",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87027",
        "createdAt":  "2023-06-01T20:28:39Z",
        "number":  87027,
        "author":  "d79ima",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-15T13:32:28Z",
        "body":  "### Description\n\nWe have a .NET 6 WPF application which is a long running app. Customers run it for several days straight without shutting down.\r\nOccasionally and highly intermittently we get an access violation exception which kills the application.\r\n\r\nMini crash dump is attached.\r\n[Mallaig.App.NxtRun.exe.17984.dmp.zip](https://github.com/dotnet/runtime/files/11629283/Mallaig.App.NxtRun.exe.17984.dmp.zip)\r\n\r\nWinDbg analysis dump is attached.\r\n[WinDBGCrashDumpAnalysis.txt](https://github.com/dotnet/runtime/files/11629291/WinDBGCrashDumpAnalysis.txt)\r\n\r\nHoping someone can offer a suggestion or a clue as to what could be causing such an exception in the coreclr.dll\r\n\n\n### Reproduction Steps\n\nUnfortunately i can\u0027t nail down any particular steps that cause the problem to appear.\n\n### Expected behavior\n\nExpected behavior would be to not crash with an access violation inside of coreclr.dll\n\n### Actual behavior\n\nIntermittent crash with access violation inside of coreclr.dll\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6\r\nWindows 10 and Server 2016\r\nx64\r\nNot sure whether it is specific to just this configuration or not.\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZpjOyQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iSok8",
                                           "createdAt":  "2023-07-25T03:55:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@d79ima Is it possible to share a full dump of the crash with us?\r\n\r\nThe symptoms of the crash suggest that it is a GC heap corruption that requires a full dump to analyze.",
                                           "updatedAt":  "2023-07-25T03:55:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iSoph",
                                           "createdAt":  "2023-07-25T03:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-07-25T03:55:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iVd5Z",
                                           "createdAt":  "2023-07-25T12:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "d79ima",
                                           "body":  "How exactly would i go about generating a full dump? Do i need to run the application with WInDBG attached in hopes of catching the issue again?",
                                           "updatedAt":  "2023-07-25T12:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iVuS9",
                                           "createdAt":  "2023-07-25T13:36:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can configure automatic full crash dump collection in registry: https://learn.microsoft.com/en-us/windows/win32/wer/collecting-user-mode-dumps",
                                           "updatedAt":  "2023-07-25T13:36:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iVuYA",
                                           "createdAt":  "2023-07-25T13:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-07-25T13:36:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jhwUF",
                                           "createdAt":  "2023-08-08T15:01:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked `no-recent-activity` because it has not had any activity for 14 days. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will remove `no-recent-activity`.",
                                           "updatedAt":  "2023-08-08T15:01:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jimya",
                                           "createdAt":  "2023-08-08T17:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "d79ima",
                                           "body":  "We have enabled full dump crash collection on a bunch of machines, now just waiting for the access violation crash to reproduce. It is highly intermittent.",
                                           "updatedAt":  "2023-08-08T17:21:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mgOMD",
                                           "createdAt":  "2023-09-14T15:55:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "d79ima",
                                           "body":  "Here are 2 full crash dumps that we recently caught. Do these shed any more light on what\u0027s going on?\r\n[CrashDump1](https://drive.google.com/file/d/1UYxb0BxyKl1CWFRNm-2RCbl8E87wpLuk/view?usp=sharing)\r\n[CrashDump2](https://drive.google.com/file/d/179slIqueT8Ip9Fe5qS64cLKGHhttMR0Q/view?usp=sharing)\r\n",
                                           "updatedAt":  "2023-09-14T15:55:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mg8B6",
                                           "createdAt":  "2023-09-14T18:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Thank you for sharing the dump. Yes, there dumps confirm that there is GC heap corruption. `!VerifyHeap` command shows GC heap corruption in both of them.",
                                           "updatedAt":  "2023-09-14T18:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mg8Fp",
                                           "createdAt":  "2023-09-14T18:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "CrashDump1:\r\n```\r\n0:028\u003e !VerifyHeap\r\nHeap Segment          Object           Failure                          Reason\r\n0    02cdff040000     02ce0149b670     InvalidObjectReference           Object 2ce0149b670 has a bad member at offset 10: 2d00118fd08\r\n4    02cfff040000     02d0011883d0     InvalidObjectReference           Object 2d0011883d0 has a bad member at offset 310: 2d00118f078\r\n4    02cfff040000     02d00118ef60     ObjectReferenceNotPointerAligned Object 2d00118ef60 has an unaligned member at offset a0: is not pointer aligned\r\n4    02cfff040000     02d00118f078     InvalidMethodTable               Object 2d00118f078 has an invalid method table 3f34403f34503f3\r\n4    02cfff040000     02d001190420     InvalidObjectReference           Object 2d001190420 has a bad member at offset 10: 2d00118fe98\r\n\r\n5,117,088 objects verified, 5 errors.\r\n```",
                                           "updatedAt":  "2023-09-14T18:06:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mg8HZ",
                                           "createdAt":  "2023-09-14T18:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "CrashDump2:\r\n```\r\n0:007\u003e !VerifyHeap\r\nHeap Segment          Object           Failure                          Reason\r\n0    01bc0d990000     01bc0d991000     InvalidMethodTable               Object 1bc0d991000 has an invalid method table 0\r\n0    01bc0d990000     01bc0d99e950     InvalidMethodTable               Object 1bc0d99e950 has an invalid method table 4c004c0044005f\r\n0    01bc0d990000     01bc0d9a1d88     InvalidMethodTable               Object 1bc0d9a1d88 has an invalid method table 18\r\n0    01bc0d990000     01bc0d9aca00     InvalidMethodTable               Object 1bc0d9aca00 has an invalid method table 7ffd44424ac0\r\n0    01bc0d990000     01bc0d9cfb08     InvalidMethodTable               Object 1bc0d9cfb08 has an invalid method table 20\r\n0    01bc0d990000     01bc0d9d6f40     InvalidObjectReference           Object 1bc0d9d6f40 has a bad member at offset 8: 1bc0d9d7340\r\n0    01bc0d990000     01bc0d9d6fb0     InvalidObjectReference           Object 1bc0d9d6fb0 has a bad member at offset 30: c0\r\n0    01bc0d990000     01bc0d9d7238     InvalidObjectReference           Object 1bc0d9d7238 has a bad member at offset 20: 58\r\n0    01bc0d990000     01bc0d9d7358     InvalidMethodTable               Object 1bc0d9d7358 has an invalid method table 0\r\n0    01bc0d990000     01bc0d9d74c8     InvalidObjectReference           Object 1bc0d9d74c8 has a bad member at offset 10: 1bd8d9973c8\r\n0    01bc0d990000     01bc0d9d7610     InvalidObjectReference           Object 1bc0d9d7610 has a bad member at offset 18: 2c0\r\n0    01bc0d990000     01bc0d9d7718     InvalidObjectReference           Object 1bc0d9d7718 has a bad member at offset 18: 88\r\n0    01bc0d990000     01bc0d9db720     InvalidObjectReference           Object 1bc0d9db720 has a bad member at offset 10: 60\r\n0    01bc0d990000     01bc0d9db7c8     InvalidObjectReference           Object 1bc0d9db7c8 has a bad member at offset 18: 88\r\n0    01bc0d990000     01bc0d9dbae8     InvalidObjectReference           Object 1bc0d9dbae8 has a bad member at offset 30: 1bd8d992ed8\r\n0    01bc0d990000     01bc0d9dbb80     InvalidObjectReference           Object 1bc0d9dbb80 has a bad member at offset 10: 190\r\n0    01bc0d990000     01bc0da02928     InvalidMethodTable               Object 1bc0da02928 has an invalid method table 7ffd44a34ac9\r\n0    01bc0d990000     01bc0da063e8     InvalidMethodTable               Object 1bc0da063e8 has an invalid method table 7ffd43f76470\r\n0    01bc0d990000     01bc0da3d438     InvalidMethodTable               Object 1bc0da3d438 has an invalid method table 7ffd44f39818\r\n0    01bc0d990000     01bc0da43e60     InvalidMethodTable               Object 1bc0da43e60 has an invalid method table 7ffd44f3bcf8\r\n0    01bc0d990000     01bc0da43ed8     InvalidMethodTable               Object 1bc0da43ed8 has an invalid method table 7ffd44f3b591\r\n0    01bc0d990000     01bc0da43f08     InvalidObjectReference           Object 1bc0da43f08 has a bad member at offset 10: 7ffd44079338\r\n0    01bc0d990000     01bc0da43f60     InvalidMethodTable               Object 1bc0da43f60 has an invalid method table 10\r\n0    01bc0d990000     01bc0da448c0     InvalidMethodTable               Object 1bc0da448c0 has an invalid method table 7ffd44ed19e0\r\n0    01bc0d990000     01bc0da4d930     InvalidMethodTable               Object 1bc0da4d930 has an invalid method table ffffffffffffffea\r\n0    01bc0d990000     01bc0da4de30     InvalidMethodTable               Object 1bc0da4de30 has an invalid method table ffffffffffffffd2\r\n0    01bc0d990000     01bc0da4e3e8     InvalidMethodTable               Object 1bc0da4e3e8 has an invalid method table 58\r\n0    01bc0d990000     01bc0da4e7b0     InvalidMethodTable               Object 1bc0da4e7b0 has an invalid method table ffffffffffffff62\r\n0    01bc0d990000     01bc0da4e7e0     InvalidThinlock                  Object 1bc0da4e7e0 has an invalid thin lock\r\n0    01bc0d990000     01bc0da4e7f8     InvalidMethodTable               Object 1bc0da4e7f8 has an invalid method table 0\r\n0    01bc0d990000     01bc0da4ed40     InvalidMethodTable               Object 1bc0da4ed40 has an invalid method table ffffffffffffff4a\r\n0    01bc0d990000     01bc0da4f1a8     InvalidMethodTable               Object 1bc0da4f1a8 has an invalid method table ffffffffffffff32\r\n0    01bc0d990000     01bc0da4f688     InvalidMethodTable               Object 1bc0da4f688 has an invalid method table ffffffffffffff1a\r\n0    01bc0d990000     01bc0da4fac0     InvalidMethodTable               Object 1bc0da4fac0 has an invalid method table ffffffffffffff02\r\n\r\n....\r\n\r\n5    01be8d990000     01be8ead7c40     SyncBlockMismatch                Object 1be8ead7c40 MS.Internal.Automation.ElementProxy had a SyncBlock index of 785 but the runtime has no matching SyncBlock\r\n5    01be8d990000     01be8ead9458     SyncBlockMismatch                Object 1be8ead9458 MS.Internal.Automation.ElementProxy had a SyncBlock index of 786 but the runtime has no matching SyncBlock\r\n5    01be8d990000     01be8eadc780     SyncBlockMismatch                Object 1be8eadc780 System.__ComObject had a SyncBlock index of 788 but the runtime has no matching SyncBlock\r\n\r\n4,540,063 objects verified, 26,280 errors.\r\n```",
                                           "updatedAt":  "2023-09-14T18:06:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mg9Qo",
                                           "createdAt":  "2023-09-14T18:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@dotnet/gc VerifyHeap on CrashDump2 reports many objects with invalid MethodTable where the top bytes of the MethodTable have been overwritten by 0xFF. Is that expected?",
                                           "updatedAt":  "2023-09-14T18:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mg9Yk",
                                           "createdAt":  "2023-09-14T18:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe have a .NET 6 WPF application which is a long running app. Customers run it for several days straight without shutting down.\r\nOccasionally and highly intermittently we get an access violation exception which kills the application.\r\n\r\nMini crash dump is attached.\r\n[Mallaig.App.NxtRun.exe.17984.dmp.zip](https://github.com/dotnet/runtime/files/11629283/Mallaig.App.NxtRun.exe.17984.dmp.zip)\r\n\r\nWinDbg analysis dump is attached.\r\n[WinDBGCrashDumpAnalysis.txt](https://github.com/dotnet/runtime/files/11629291/WinDBGCrashDumpAnalysis.txt)\r\n\r\nHoping someone can offer a suggestion or a clue as to what could be causing such an exception in the coreclr.dll\r\n\n\n### Reproduction Steps\n\nUnfortunately i can\u0027t nail down any particular steps that cause the problem to appear.\n\n### Expected behavior\n\nExpected behavior would be to not crash with an access violation inside of coreclr.dll\n\n### Actual behavior\n\nIntermittent crash with access violation inside of coreclr.dll\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6\r\nWindows 10 and Server 2016\r\nx64\r\nNot sure whether it is specific to just this configuration or not.\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ed79ima\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `area-VM-coreclr`, `needs-further-triage`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-14T18:08:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mg-vg",
                                           "createdAt":  "2023-09-14T18:12:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "d79ima",
                                           "body":  "\u003e @dotnet/gc VerifyHeap on CrashDump2 reports many objects with invalid MethodTable where the top bytes of the MethodTable have been overwritten by 0xFF. Is that expected?\r\n\r\nThat is definitely not expected. Almost feels like some driver or something is trashing memory that it isn\u0027t supposed to be.",
                                           "updatedAt":  "2023-09-14T18:28:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5miKpn",
                                           "createdAt":  "2023-09-14T22:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is it possible to enable `DOTNET_HeapVerify=1` on some of your machines where the issue is reproing? That might help with investigating further. ",
                                           "updatedAt":  "2023-09-14T22:23:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mmM7J",
                                           "createdAt":  "2023-09-15T13:32:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODG8uAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2023-09-15T15:30:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "d79ima",
                                           "body":  "will set this and capture another set of crash dumps next time issue happens again",
                                           "updatedAt":  "2023-09-15T13:32:27Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "coreclr.dll threw access violation exception",
        "labels":  [
                       "area-GC-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87626",
        "createdAt":  "2023-06-15T10:11:10Z",
        "number":  87626,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:14Z",
        "body":  "\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"ARM64\",\"Os\":\"Windows1025094\",\"Queue\":\"AmpereWindows\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2023-06-12T19:14:25\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | Windows 10.0.25094\nQueue | AmpereWindows\nBaseline | [19712d9cbeb086bf196c43b8b502e463702fc910](https://github.com/dotnet/runtime/commit/19712d9cbeb086bf196c43b8b502e463702fc910)\nCompare | [01053863e7f4485b35ba1ee3a0f132127151719f](https://github.com/dotnet/runtime/commit/01053863e7f4485b35ba1ee3a0f132127151719f)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/19712d9cbeb086bf196c43b8b502e463702fc910...01053863e7f4485b35ba1ee3a0f132127151719f)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Threading.Tests.Perf_Timer\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\n[SynchronousContention - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/System.Threading.Tests.Perf_Timer.SynchronousContention.html\u003e) | 77.82 secs | 180.50 secs | 2.32 | 0.80 | False | | |\r\n[AsynchronousContention - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/System.Threading.Tests.Perf_Timer.AsynchronousContention.html\u003e) | 65.75 secs | 341.56 secs | 5.20 | 0.17 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/System.Threading.Tests.Perf_Timer_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/System.Threading.Tests.Perf_Timer_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/System.Threading.Tests.Perf_Timer.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Threading.Tests.Perf_Timer*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n### Histogram\r\n\r\n#### System.Threading.Tests.Perf_Timer.SynchronousContention\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 180.49961329142855 \u003e 78.7301600608923.\r\nIsChangePoint: Marked as a change because one of 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -6.0921419735623825 (T) = (0 -228768225203.80954) / Math.Sqrt((1.556066192905258E+20 / (22)) + (1.7500626249057021E+21 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -1.833497693248638 = (80737043036.56027 - 228768225203.80954) / 80737043036.56027 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n#### System.Threading.Tests.Perf_Timer.AsynchronousContention\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 341.55856448 \u003e 70.4162876942.\r\nIsChangePoint: Marked as a change because one of 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -54.608776045912734 (T) = (0 -345671579087.8333) / Math.Sqrt((4.1594501016700083E+18 / (22)) + (7.681112692839549E+19 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -4.058689430575029 = (68332239769.17283 - 345671579087.8333) / 68332239769.17283 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | Windows 10.0.25094\nQueue | AmpereWindows\nBaseline | [19712d9cbeb086bf196c43b8b502e463702fc910](https://github.com/dotnet/runtime/commit/19712d9cbeb086bf196c43b8b502e463702fc910)\nCompare | [01053863e7f4485b35ba1ee3a0f132127151719f](https://github.com/dotnet/runtime/commit/01053863e7f4485b35ba1ee3a0f132127151719f)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/19712d9cbeb086bf196c43b8b502e463702fc910...01053863e7f4485b35ba1ee3a0f132127151719f)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\n[Get - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks.Get(ConfigurationProvidersCount%3a%208%2c%20KeysCountPerProvider%3a%2040).html\u003e) | 3.55 ms | 7.44 ms | 2.10 | 0.63 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n### Histogram\r\n\r\n#### Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks.Get(ConfigurationProvidersCount: 8, KeysCountPerProvider: 40)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 7.440344400000001 \u003e 2.9554689176602515.\r\nIsChangePoint: Marked as a change because one of 5/17/2023 10:06:24 AM, 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -6.080788024472032 (T) = (0 -8343785) / Math.Sqrt((5823784550018.86 / (22)) + (613950371497.5596 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -0.9971660757751847 = (4177812.3017443223 - 8343785) / 4177812.3017443223 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | Windows 10.0.25094\nQueue | AmpereWindows\nBaseline | [19712d9cbeb086bf196c43b8b502e463702fc910](https://github.com/dotnet/runtime/commit/19712d9cbeb086bf196c43b8b502e463702fc910)\nCompare | [01053863e7f4485b35ba1ee3a0f132127151719f](https://github.com/dotnet/runtime/commit/01053863e7f4485b35ba1ee3a0f132127151719f)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/19712d9cbeb086bf196c43b8b502e463702fc910...01053863e7f4485b35ba1ee3a0f132127151719f)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in Burgers\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\n[Test2 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/Burgers.Test2.html\u003e) | 291.59 ms | 320.49 ms | 1.10 | 0.37 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Burgers_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Burgers.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Burgers*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n### Histogram\r\n\r\n#### Burgers.Test2\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 320.487872 \u003e 305.82765896666666.\r\nIsChangePoint: Marked as a change because one of 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -3.2256810412661046 (T) = (0 -333558952) / Math.Sqrt((281040293591396.25 / (22)) + (331876876502704 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -0.12035445500089545 = (297726269.1383982 - 333558952) / 297726269.1383982 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXxASJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5e-Q3r",
                                           "createdAt":  "2023-06-15T16:28:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Not sure what\u0027s responsible here, but the timer tests show changes in # of gcs, so possibly https://github.com/dotnet/runtime/pull/87218?\r\n\r\ncc @PeterSolMS ",
                                           "updatedAt":  "2023-06-15T16:28:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e-TMF",
                                           "createdAt":  "2023-06-15T16:36:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Also https://github.com/dotnet/perf-autofiling-issues/issues/18841",
                                           "updatedAt":  "2023-06-15T16:36:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fEBIl",
                                           "createdAt":  "2023-06-16T15:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!-- DATA: {\"RunType\":{\"Repo\":\"dotnetruntime\",\"Branch\":\"refs/heads/main\",\"Arch\":\"ARM64\",\"Os\":\"Windows1025094\",\"Queue\":\"AmpereWindows\",\"Frequency\":\"Weekly\",\"CoreClr\":true,\"Mono\":false,\"Wasm\":false,\"Maui\":false,\"Configs\":[\"CompilationMode:tiered\",\"RunKind:micro\"]},\"RegressionDate\":\"2023-06-12T19:14:25\",\"IsRegression\":true} --\u003e\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | Windows 10.0.25094\nQueue | AmpereWindows\nBaseline | [19712d9cbeb086bf196c43b8b502e463702fc910](https://github.com/dotnet/runtime/commit/19712d9cbeb086bf196c43b8b502e463702fc910)\nCompare | [01053863e7f4485b35ba1ee3a0f132127151719f](https://github.com/dotnet/runtime/commit/01053863e7f4485b35ba1ee3a0f132127151719f)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/19712d9cbeb086bf196c43b8b502e463702fc910...01053863e7f4485b35ba1ee3a0f132127151719f)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in System.Threading.Tests.Perf_Timer\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\n[SynchronousContention - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/System.Threading.Tests.Perf_Timer.SynchronousContention.html\u003e) | 77.82 secs | 180.50 secs | 2.32 | 0.80 | False | | |\r\n[AsynchronousContention - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/System.Threading.Tests.Perf_Timer.AsynchronousContention.html\u003e) | 65.75 secs | 341.56 secs | 5.20 | 0.17 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/System.Threading.Tests.Perf_Timer_1.png\u003e)\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/System.Threading.Tests.Perf_Timer_2.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/System.Threading.Tests.Perf_Timer.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027System.Threading.Tests.Perf_Timer*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n### Histogram\r\n\r\n#### System.Threading.Tests.Perf_Timer.SynchronousContention\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 180.49961329142855 \u003e 78.7301600608923.\r\nIsChangePoint: Marked as a change because one of 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -6.0921419735623825 (T) = (0 -228768225203.80954) / Math.Sqrt((1.556066192905258E+20 / (22)) + (1.7500626249057021E+21 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -1.833497693248638 = (80737043036.56027 - 228768225203.80954) / 80737043036.56027 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n#### System.Threading.Tests.Perf_Timer.AsynchronousContention\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 341.55856448 \u003e 70.4162876942.\r\nIsChangePoint: Marked as a change because one of 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -54.608776045912734 (T) = (0 -345671579087.8333) / Math.Sqrt((4.1594501016700083E+18 / (22)) + (7.681112692839549E+19 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -4.058689430575029 = (68332239769.17283 - 345671579087.8333) / 68332239769.17283 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | Windows 10.0.25094\nQueue | AmpereWindows\nBaseline | [19712d9cbeb086bf196c43b8b502e463702fc910](https://github.com/dotnet/runtime/commit/19712d9cbeb086bf196c43b8b502e463702fc910)\nCompare | [01053863e7f4485b35ba1ee3a0f132127151719f](https://github.com/dotnet/runtime/commit/01053863e7f4485b35ba1ee3a0f132127151719f)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/19712d9cbeb086bf196c43b8b502e463702fc910...01053863e7f4485b35ba1ee3a0f132127151719f)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\n[Get - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks.Get(ConfigurationProvidersCount%3a%208%2c%20KeysCountPerProvider%3a%2040).html\u003e) | 3.55 ms | 7.44 ms | 2.10 | 0.63 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n### Histogram\r\n\r\n#### Microsoft.Extensions.Configuration.ConfigurationBinderBenchmarks.Get(ConfigurationProvidersCount: 8, KeysCountPerProvider: 40)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 7.440344400000001 \u003e 2.9554689176602515.\r\nIsChangePoint: Marked as a change because one of 5/17/2023 10:06:24 AM, 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -6.080788024472032 (T) = (0 -8343785) / Math.Sqrt((5823784550018.86 / (22)) + (613950371497.5596 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -0.9971660757751847 = (4177812.3017443223 - 8343785) / 4177812.3017443223 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\r\n\r\n---\r\n\r\n\n### Run Information\n\nName | Value\n-- | --\nArchitecture | arm64\nOS | Windows 10.0.25094\nQueue | AmpereWindows\nBaseline | [19712d9cbeb086bf196c43b8b502e463702fc910](https://github.com/dotnet/runtime/commit/19712d9cbeb086bf196c43b8b502e463702fc910)\nCompare | [01053863e7f4485b35ba1ee3a0f132127151719f](https://github.com/dotnet/runtime/commit/01053863e7f4485b35ba1ee3a0f132127151719f)\nDiff | [Diff](https://github.com/dotnet/runtime/compare/19712d9cbeb086bf196c43b8b502e463702fc910...01053863e7f4485b35ba1ee3a0f132127151719f)\nConfigs | CompilationMode:tiered, RunKind:micro\n\n\n### Regressions in Burgers\n\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\n[Test2 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_arm64_Windows 10.0.25094/Burgers.Test2.html\u003e) | 291.59 ms | 320.49 ms | 1.10 | 0.37 | False | | |\r\n\n![graph](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Burgers_1.png\u003e)\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/06_15_2023/refs/heads/main_arm64_Windows%2010.0.25094_Regression/Burgers.html\u003e)\n\n### Repro\nGeneral Docs link: https://github.com/dotnet/performance/blob/main/docs/benchmarking-workflow-dotnet-runtime.md\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n\n```cmd\ngit clone https://github.com/dotnet/performance.git\npy .\\performance\\scripts\\benchmarks_ci.py -f net8.0 --filter \u0027Burgers*\u0027\n```\n\n\u003cdetails\u003e\n\n\n### Payloads\n\n[Baseline](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-5c7cf1f0-328f-4798-a6ad-7856682d5b48db339d2c68d42a4b8/de58b828-f3c5-41cb-bc61-a980e0f865e6.zip?sv=2021-08-06\u0026se=2023-07-12T01%3A14%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=CvJOAbuYCASFzYDZQLsM23%2BtfypxpUBypgz8zLkCd1s%3D\u003e)\n[Compare](\u003chttps://helixdi107v0xdeko0k025g8.blob.core.windows.net/helix-job-e3102327-7590-4027-863d-e17f6479d3e4b246ae5a2bb4ff6a4/5bfa51e7-4506-4357-9761-7a88c4306a6d.zip?sv=2021-08-06\u0026se=2023-07-13T05%3A20%3A31Z\u0026sr=c\u0026sp=rl\u0026sig=AqrQn%2BQqB1wcOw%2BAye6Bl8CAIO2jejfe%2BFc71lgzuvA%3D\u003e)\n### Histogram\r\n\r\n#### Burgers.Test2\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 320.487872 \u003e 305.82765896666666.\r\nIsChangePoint: Marked as a change because one of 6/12/2023 3:15:58 AM, 6/14/2023 3:35:53 PM falls between 6/5/2023 10:43:22 AM and 6/14/2023 3:35:53 PM.\r\nIsRegressionStdDev: Marked as regression because -3.2256810412661046 (T) = (0 -333558952) / Math.Sqrt((281040293591396.25 / (22)) + (331876876502704 / (3))) is less than -2.0686576104106944 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (22) + (3) - 2, .025) and -0.12035445500089545 = (297726269.1383982 - 333558952) / 297726269.1383982 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n### JIT Disasms\r\n\r\n\n\n### Docs\n\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\n\n\u003c/details\u003e\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `os-windows`, `area-GC-coreclr`, `untriaged`, `runtime-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-16T15:41:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Perf] Windows/arm64: 4 Regressions on 6/12/2023 7:14:25 PM",
        "labels":  [
                       "arch-arm64",
                       "os-windows",
                       "area-GC-coreclr",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89272",
        "createdAt":  "2023-07-20T19:07:55Z",
        "number":  89272,
        "author":  "CharlieEriksen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-09T13:16:41Z",
        "body":  "### Description\n\nI\u0027m experiencing a deadlock with .NET 6.x on Mac OS under Rosetta. It\u0027s a really weird one:\r\n- It doesn\u0027t always happen. \r\n- It usually only happens within the first few minutes of application start. \r\n\r\nYou can find a full sample here: https://gist.github.com/CharlieEriksen/2f04ec835a72adfe2643a2a0ffdf7679\r\n\r\n\r\nHere\u0027s what seems to be the most relevant part of a sample. It\u0027s the same pattern always:\r\n```\r\n\r\n  Thread 0xdf373    1001 samples (1-1001)    priority 31 (base 31)\r\n  1001  thread_start + 15 (libsystem_pthread.dylib + 7123) [0x7ff801266bd3]\r\n    1001  _pthread_start + 125 (libsystem_pthread.dylib + 25043) [0x7ff80126b1d3]\r\n      1001  CorUnix::CPalThread::ThreadEntry(void*) + 407 (jswzl.Server + 7158375) [0x1013dda67]\r\n        1001  (anonymous namespace)::CreateSuspendableThread(void (*)(void*), void*, char16_t const*)::$_0::__invoke(void*) + 116 (jswzl.Server + 1​​892484) [0x100ed8084]\r\n          1001  WKS::gc_heap::bgc_thread_function() + 257 (jswzl.Server + 3310881) [0x101032521]\r\n            1001  WKS::gc_heap::gc1() + 836 (jswzl.Server + 3201796) [0x101017b04]\r\n              1001  WKS::gc_heap::background_mark_phase() + 858 (jswzl.Server + 3205786) [0x101018a9a]\r\n                1001  WKS::gc_heap::revisit_written_pages(int, int) + 1011 (jswzl.Server + 3315155) [0x1010335d3]\r\n                  1001  SoftwareWriteWatch::GetDirty(void*, unsigned long, void**, unsigned long*, bool, bool) + 65 (jswzl.Server + 3378033) [0x101042b71]\r\n                    1001  FlushProcessWriteBuffers + 147 (jswzl.Server + 7152259) [0x1013dc283]\r\n                      1001  thread_get_register_pointer_values + 144 (libsystem_kernel.dylib + 72297) [0x7ff80123ca69]\r\n                        1001  thread_get_state + 140 (libsystem_kernel.dylib + 35498) [0x7ff801233aaa]\r\n                          1001  mach_msg2_trap + 10 (libsystem_kernel.dylib + 5554) [0x7ff80122c5b2]\r\n                           *1001  ??? (kernel.release.t8112 + 5328152) [0xfffffe0008900d18] (blocked by turnstile waiting for jswzl.Server [45872] thread 0xdf374)\r\n\r\n  Thread 0xdf374    1001 samples (1-1001)    priority 31 (base 31)\r\n  1001  thread_start + 15 (libsystem_pthread.dylib + 7123) [0x7ff801266bd3]\r\n    1001  _pthread_start + 125 (libsystem_pthread.dylib + 25043) [0x7ff80126b1d3]\r\n      1001  CorUnix::CPalThread::ThreadEntry(void*) + 407 (jswzl.Server + 7158375) [0x1013dda67]\r\n        1001  ThreadNative::KickOffThread(void*) + 170 (jswzl.Server + 1690938) [0x100ea6d3a]\r\n          1001  ManagedThreadBase::KickOff(void (*)(void*), void*) + 32 (jswzl.Server + 1369424) [0x100e58550]\r\n            1001  ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 296 (jswzl.Server + 1368040) [0x100e57fe8]\r\n              1001  ThreadNative::KickOffThread_Worker(void*) + 136 (jswzl.Server + 1690728) [0x100ea6c68]\r\n                1001  DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) + 223 (jswzl.Server + 1596143) [0x100e8faef]\r\n                  1001  CallDescrWorkerInternal + 124 (jswzl.Server + 3382761) [0x101043de9]\r\n                    1001  ??? [0x1273f7ff1]\r\n                      1001  ??? [0x1274034eb]\r\n                        1001  ??? [0x1273f92a8]\r\n                          1001  ??? [0x12d962257]\r\n                            1001  ??? [0x12d962946]\r\n                              1001  ??? [0x12d9631c8]\r\n                                1001  ??? [0x127e7ba36]\r\n                                  1001  ??? [0x127e7d5c3]\r\n                                    1001  ??? [0x127e7d8ba]\r\n                                      1001  ??? [0x127e76c1e]\r\n                                        1001  ??? [0x1282af899]\r\n                                          1001  SystemNative_ForkAndExecProcess + 848 (jswzl.Server + 6841936) [0x101390650]\r\n                                            1001  __fork + 11 (libsystem_kernel.dylib + 30175) [0x7ff8012325df]\r\n                                             *1001  ??? (kernel.release.t8112 + 5328152) [0xfffffe0008900d18] (blocked by turnstile waiting for jswzl.Server [45872] thread 0xdf373)\r\n\r\n\r\n\r\n```\r\n\r\nIf I understand this correctly, the GC is getting deadlocked by the fork call to spawn a new process. Based on this theory, I\u0027ve tried not to spawn a process when a full GC pass is approaching. But that doesn\u0027t seem to prevent this. \n\n### Reproduction Steps\n\n1. Try spawning a lot of processes at a rapid pace\r\n2. Trigger a GC pass\r\n3. Once in a while, you will get a deadlock\r\n4. If it doesn\u0027t happen relatively quickly, restart the process and try again\n\n### Expected behavior\n\nThe process does not deadlock\n\n### Actual behavior\n\nThe process deadlocks\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- .NET 6.0.13\r\n- Ventura 13.4.1 (c)\r\n- M1/M2\r\n- More prone to happen on lower-memory configs\r\n- Running x64 under Rosetta\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjzCRJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iBGjs",
                                           "createdAt":  "2023-07-20T19:09:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CharlieEriksen",
                                           "body":  "@tmds you may find this interesting, as I\u0027m seeing this while using [Tmds.ExecFunction](https://github.com/tmds/Tmds.ExecFunction).",
                                           "updatedAt":  "2023-07-20T19:09:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iB5Ci",
                                           "createdAt":  "2023-07-20T22:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m experiencing a deadlock with .NET 6.x on Mac OS under Rosetta. It\u0027s a really weird one:\r\n- It doesn\u0027t always happen. \r\n- It usually only happens within the first few minutes of application start. \r\n\r\nYou can find a full sample here: https://gist.github.com/CharlieEriksen/2f04ec835a72adfe2643a2a0ffdf7679\r\n\r\n\r\nHere\u0027s what seems to be the most relevant part of a sample. It\u0027s the same pattern always:\r\n```\r\n\r\n  Thread 0xdf373    1001 samples (1-1001)    priority 31 (base 31)\r\n  1001  thread_start + 15 (libsystem_pthread.dylib + 7123) [0x7ff801266bd3]\r\n    1001  _pthread_start + 125 (libsystem_pthread.dylib + 25043) [0x7ff80126b1d3]\r\n      1001  CorUnix::CPalThread::ThreadEntry(void*) + 407 (jswzl.Server + 7158375) [0x1013dda67]\r\n        1001  (anonymous namespace)::CreateSuspendableThread(void (*)(void*), void*, char16_t const*)::$_0::__invoke(void*) + 116 (jswzl.Server + 1​​892484) [0x100ed8084]\r\n          1001  WKS::gc_heap::bgc_thread_function() + 257 (jswzl.Server + 3310881) [0x101032521]\r\n            1001  WKS::gc_heap::gc1() + 836 (jswzl.Server + 3201796) [0x101017b04]\r\n              1001  WKS::gc_heap::background_mark_phase() + 858 (jswzl.Server + 3205786) [0x101018a9a]\r\n                1001  WKS::gc_heap::revisit_written_pages(int, int) + 1011 (jswzl.Server + 3315155) [0x1010335d3]\r\n                  1001  SoftwareWriteWatch::GetDirty(void*, unsigned long, void**, unsigned long*, bool, bool) + 65 (jswzl.Server + 3378033) [0x101042b71]\r\n                    1001  FlushProcessWriteBuffers + 147 (jswzl.Server + 7152259) [0x1013dc283]\r\n                      1001  thread_get_register_pointer_values + 144 (libsystem_kernel.dylib + 72297) [0x7ff80123ca69]\r\n                        1001  thread_get_state + 140 (libsystem_kernel.dylib + 35498) [0x7ff801233aaa]\r\n                          1001  mach_msg2_trap + 10 (libsystem_kernel.dylib + 5554) [0x7ff80122c5b2]\r\n                           *1001  ??? (kernel.release.t8112 + 5328152) [0xfffffe0008900d18] (blocked by turnstile waiting for jswzl.Server [45872] thread 0xdf374)\r\n\r\n  Thread 0xdf374    1001 samples (1-1001)    priority 31 (base 31)\r\n  1001  thread_start + 15 (libsystem_pthread.dylib + 7123) [0x7ff801266bd3]\r\n    1001  _pthread_start + 125 (libsystem_pthread.dylib + 25043) [0x7ff80126b1d3]\r\n      1001  CorUnix::CPalThread::ThreadEntry(void*) + 407 (jswzl.Server + 7158375) [0x1013dda67]\r\n        1001  ThreadNative::KickOffThread(void*) + 170 (jswzl.Server + 1690938) [0x100ea6d3a]\r\n          1001  ManagedThreadBase::KickOff(void (*)(void*), void*) + 32 (jswzl.Server + 1369424) [0x100e58550]\r\n            1001  ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 296 (jswzl.Server + 1368040) [0x100e57fe8]\r\n              1001  ThreadNative::KickOffThread_Worker(void*) + 136 (jswzl.Server + 1690728) [0x100ea6c68]\r\n                1001  DispatchCallSimple(unsigned long*, unsigned int, unsigned long, unsigned int) + 223 (jswzl.Server + 1596143) [0x100e8faef]\r\n                  1001  CallDescrWorkerInternal + 124 (jswzl.Server + 3382761) [0x101043de9]\r\n                    1001  ??? [0x1273f7ff1]\r\n                      1001  ??? [0x1274034eb]\r\n                        1001  ??? [0x1273f92a8]\r\n                          1001  ??? [0x12d962257]\r\n                            1001  ??? [0x12d962946]\r\n                              1001  ??? [0x12d9631c8]\r\n                                1001  ??? [0x127e7ba36]\r\n                                  1001  ??? [0x127e7d5c3]\r\n                                    1001  ??? [0x127e7d8ba]\r\n                                      1001  ??? [0x127e76c1e]\r\n                                        1001  ??? [0x1282af899]\r\n                                          1001  SystemNative_ForkAndExecProcess + 848 (jswzl.Server + 6841936) [0x101390650]\r\n                                            1001  __fork + 11 (libsystem_kernel.dylib + 30175) [0x7ff8012325df]\r\n                                             *1001  ??? (kernel.release.t8112 + 5328152) [0xfffffe0008900d18] (blocked by turnstile waiting for jswzl.Server [45872] thread 0xdf373)\r\n\r\n\r\n\r\n```\r\n\r\nIf I understand this correctly, the GC is getting deadlocked by the fork call to spawn a new process. Based on this theory, I\u0027ve tried not to spawn a process when a full GC pass is approaching. But that doesn\u0027t seem to prevent this. \n\n### Reproduction Steps\n\n1. Try spawning a lot of processes at a rapid pace\r\n2. Trigger a GC pass\r\n3. Once in a while, you will get a deadlock\r\n4. If it doesn\u0027t happen relatively quickly, restart the process and try again\n\n### Expected behavior\n\nThe process does not deadlock\n\n### Actual behavior\n\nThe process deadlocks\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- .NET 6.0.13\r\n- Ventura 13.4.1 (c)\r\n- M1/M2\r\n- More prone to happen on lower-memory configs\r\n- Running x64 under Rosetta\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCharlieEriksen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-20T22:00:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHdP7",
                                           "createdAt":  "2023-07-21T18:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CharlieEriksen",
                                           "body":  "I\u0027ve noticed another clue. The subprocess being spawned often crashes with information this like this:\r\n```\r\nApplication Specific Information:\r\nabort() called\r\n\r\n\r\nError Formulating Crash Report:\r\nthread_get_state(PAGEIN) returned 0x10000003: (ipc/send) invalid destination port\r\nthread_get_state(EXCEPTION) returned 0x10000003: (ipc/send) invalid destination port\r\nthread_get_state(FLAVOR) returned 0x10000003: (ipc/send) invalid destination port\r\n\r\nKernel Triage:\r\nVM - Compressor failed a blocking pager_get\r\nVM - Compressor failed a blocking pager_get\r\nVM - Compressor failed a blocking pager_get\r\n```\r\n\r\n```\r\nApplication Specific Information:\r\nabort() called\r\nKernel Triage:\r\nVM - (arg = 0x0) pmap_enter retried due to resource shortage\r\nVM - (arg = 0x0) pmap_enter retried due to resource shortage\r\n```\r\n\r\nSo if the process start call does not get a process due to it instantly crashing due to being unable to get memory, then it never returns. ",
                                           "updatedAt":  "2023-07-21T18:58:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iP2o5",
                                           "createdAt":  "2023-07-24T17:31:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@janvorli @kouvel. This isnt a GC issue but a thread suspension issue. @CharlieEriksen, just confirming that you only notice this under emulation. Does it also occur with .NET 7? ",
                                           "updatedAt":  "2023-07-24T17:31:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iS-An",
                                           "createdAt":  "2023-07-25T05:18:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CharlieEriksen",
                                           "body":  "@mangod9  The software I\u0027m experiencing this with hasn\u0027t been able to migrate to 7.0 yet, nor publish an arm64 build. So I\u0027m not 100% sure. But I can play around with it and see if I can get something together to test with.\r\n\r\nSo if it\u0027s not a GC issue, I\u0027ve been barking up the wrong tree. Are there any potential workarounds that could be implemented to prevent this occurrence? ",
                                           "updatedAt":  "2023-07-25T05:18:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PMJEn",
                                           "createdAt":  "2024-10-09T13:16:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "I think I\u0027m running into the same thing, process is stuck here:\n\n    [...]\n    2126 ???  (in \u003cunknown binary\u003e)  [0x11196d874]\n    2126 SystemNative_ForkAndExecProcess  (in libSystem.Native.dylib) + 174  [0x10b1c6f7e]\n    2126 _pthread_mutex_firstfit_lock_slow  (in libsystem_pthread.dylib) + 217  [0x7ff812e8382b]\n    2126 _pthread_mutex_firstfit_lock_wait  (in libsystem_pthread.dylib) + 78  [0x7ff812e85a70]\n    2126 __psynch_mutexwait  (in libsystem_kernel.dylib) + 10  [0x7ff812e4a6f2]\n    2126 ???  (in \u003cunknown binary\u003e)  [0x7ff8a312aa78]\n\n[Sample of dotnet.txt](https://github.com/user-attachments/files/17308804/Sample.of.dotnet.txt)\n\nThis is with .NET 9.0.100-rc.2.24475.4",
                                           "updatedAt":  "2024-10-09T13:16:39Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "GC deadlock on spawning new process on OSX under Rosetta",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90442",
        "createdAt":  "2023-08-12T00:17:45Z",
        "number":  90442,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-16T17:10:12Z",
        "body":  "This happens when running this program:\r\n\r\n```c#\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Diagnostics;\r\n\r\nnamespace CoreLab\r\n{\r\n    internal static class Program\r\n    {\r\n        private static void Main()\r\n        {\r\n            GC.Collect();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith `set DOTNET_gcServer=1`, `set DOTNET_GCDynamicAdaptationMode=1` and `// #define COMMITTED_BYTES_SHADOW` uncommented in `gcpriv.h`.\r\n\r\nThe problem is that when `GCDynamicAdaptationMode` is turned on, we committed some memory in the decommissioned heaps during initialization but we are not counting them as part of `compute_committed_bytes`.\r\n\r\nThe fact that we commit memory in decommissioned heap wasted some memory, but it is not much. The assert will never happen in the release product since the definition is not set there.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY97_yg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j3v_K",
                                           "createdAt":  "2023-08-12T00:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis happens when running this program:\r\n\r\n```c#\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Diagnostics;\r\n\r\nnamespace CoreLab\r\n{\r\n    internal static class Program\r\n    {\r\n        private static void Main()\r\n        {\r\n            GC.Collect();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nwith `set DOTNET_GCDynamicAdaptationMode=1` and `// #define COMMITTED_BYTES_SHADOW` uncommented in `gcpriv.h`.\r\n\r\nThe problem is that when `GCDynamicAdaptationMode` is turned on, we committed some memory in the decommissioned heaps during initialization but we are not counting them as part of `compute_committed_bytes`.\r\n\r\nThe fact that we commit memory in decommissioned heap wasted some memory, but it is not much. The assert will never happen in the release product since the define is not set there.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-12T00:17:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Assert failure: g_heaps[h]-\u003ecommitted_by_oh_per_heap[oh] == g_heaps[h]-\u003ecommitted_by_oh_per_heap_refresh[oh]",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90481",
        "createdAt":  "2023-08-13T07:14:54Z",
        "number":  90481,
        "author":  "MarshalOfficial",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-15T06:20:59Z",
        "body":  "I have a REST API application that is highly performance-sensitive, requiring low latency. Upon reviewing the GC metrics, I noticed that the GC operations are quite aggressive. Despite setting a huge value for the GC heap hard limit, the GC is maintaining small heap sizes and performing collections very frequently. In my opinion, it would be beneficial for .NET to include a GC initial heap size option. This option could help prevent GC operations on smaller heap sizes and reduce the performance impact of the GC on REST API response times.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZAuIrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j6bKU",
                                           "createdAt":  "2023-08-13T07:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI have a REST API application that is highly performance-sensitive, requiring low latency. Upon reviewing the GC metrics, I noticed that the GC operations are quite aggressive. Despite setting a huge value for the GC heap hard limit, the GC is maintaining small heap sizes and performing collections very frequently. In my opinion, it would be beneficial for .NET to include a GC initial heap size option. This option could help prevent GC operations on smaller heap sizes and reduce the performance impact of the GC on REST API response times.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMarshalOfficial\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-13T07:15:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kA5iA",
                                           "createdAt":  "2023-08-14T19:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Have you experimented with ConserveMemory setting: https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#conserve-memory to see if you get lower GC pause times? ",
                                           "updatedAt":  "2023-08-14T19:43:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kCzN2",
                                           "createdAt":  "2023-08-15T05:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarshalOfficial",
                                           "body":  "\u003e Have you experimented with ConserveMemory setting: https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#conserve-memory to see if you get lower GC pause times?\r\n\r\nNo, I didn\u0027t set value for DOTNET_GCConserveMemory and it would be default value (0).\r\nThe only settings that I used in my environment variables:\r\n```\r\n   DOTNET_gcServer: 1\r\n   DOTNET_GCHeapCount: C\r\n   DOTNET_GCHeapHardLimit: 140000000\r\n   DOTNET_GCCpuGroup: 1\r\n```",
                                           "updatedAt":  "2023-08-15T05:49:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kC2CM",
                                           "createdAt":  "2023-08-15T06:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Setting non-zero `DOTNET_GCConserveMemory` is going to make the GC to try even harder and likely run even more often to conserve memory.\r\n\r\n\u003e it would be beneficial for .NET to include a GC initial heap size option\r\n\r\nThe GC has internal undocumented option to set the smallest gen0 budget: https://github.com/dotnet/runtime/blob/main/src/coreclr/gc/gcconfig.h#L86 . You can experiment with that if you would like to see the GC to run less frequently at the cost of large GC heap size. In general, larger Gen0 and less frequent GCs are going to produce larger latency spikes. When you say that your workload requires low latency, do you mean average latency or 99% latency?",
                                           "updatedAt":  "2023-08-15T06:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kC4it",
                                           "createdAt":  "2023-08-15T06:20:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarshalOfficial",
                                           "body":  "\u003e Setting non-zero `DOTNET_GCConserveMemory` is going to make the GC to try even harder and likely run even more often to conserve memory.\r\n\u003e \r\n\u003e \u003e it would be beneficial for .NET to include a GC initial heap size option\r\n\u003e \r\n\u003e The GC has internal undocumented option to set the smallest gen0 budget: https://github.com/dotnet/runtime/blob/main/src/coreclr/gc/gcconfig.h#L86 . You can experiment with that if you would like to see the GC to run less frequently at the cost of large GC heap size. In general, larger Gen0 and less frequent GCs are going to produce larger latency spikes. When you say that your workload requires low latency, do you mean average latency or 99% latency?\r\n\r\nThanks, I will check Gen0Size option, for latency I mean P(99).",
                                           "updatedAt":  "2023-08-15T06:20:58Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "something like initial JVM heap size need for GC heap size in dotnet",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90640",
        "createdAt":  "2023-08-15T21:34:01Z",
        "number":  90640,
        "author":  "Leonardo-Ferreira",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8eKpQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "typesbb",
                                            "createdAt":  "2024-11-07T11:01:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-07T21:01:40Z",
        "body":  "Take a look here:\r\n![image](https://github.com/dotnet/runtime/assets/5585339/cd1bc81f-f195-4ac6-8c96-426ced5e3e47)\r\nafter the GC ran It reported:\r\n![image](https://github.com/dotnet/runtime/assets/5585339/da98a33a-1b89-4309-b949-b5f92fe5a0e5)\r\n\r\nthese images are like 15sec apart...\r\n\r\nwhy didn\u0027t the working set dropped by aprox 19MB?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOktGQVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kHX3j",
                                           "createdAt":  "2023-08-15T21:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTake a look here:\r\n![image](https://github.com/dotnet/runtime/assets/5585339/cd1bc81f-f195-4ac6-8c96-426ced5e3e47)\r\nafter the GC ran It reported:\r\n![image](https://github.com/dotnet/runtime/assets/5585339/da98a33a-1b89-4309-b949-b5f92fe5a0e5)\r\n\r\nwhy didn\u0027t the working set dropped by aprox 19MB?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLeonardo-Ferreira\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-15T21:39:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kM-YH",
                                           "createdAt":  "2023-08-16T18:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2va7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-17T13:19:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "The GC wouldnt immediately decommit memory unless there is memory pressure. That helps with overall performance since frequent commit/decommits arent required. \r\n\r\nThe working set also depends on whether you are running with SVR, since with it enabled the GC uses as many heaps as the # of cores on the machine. In .NET 8 there is a new adaptive GC mode which can ramp up the number of heaps based on application load. ",
                                           "updatedAt":  "2023-08-16T18:57:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kNomG",
                                           "createdAt":  "2023-08-16T21:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Starting with .NET 7, you can force the GC to decommit memory by calling `GC.Collect(GC.MaxGeneration, GCCollectionMode.Aggressive)`. I don\u0027t know if the [conserve memory](https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#conserve-memory) options would have any effect here.",
                                           "updatedAt":  "2023-08-16T21:30:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kRaYf",
                                           "createdAt":  "2023-08-17T13:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "well, both comments are really interesting...  \r\nfirst @mangod9 \r\n\u003e The GC wouldnt immediately decommit memory unless there is memory pressure\r\n\r\nThat\u0027s a bit concerning, you see, im trying to pack as many pods on Kubernetes as possible, and currently my biggest enemy is memory. My machines are already \"memory optimized\" and yet, cpu consumption is around 30-40% while memory is 85-90%... so, if I could, I would like to instruct the GC/SO to commit and decommit and not to worry about the CPU cost of it... I wonder how much of that 136 working set is REALLY required and how much \"it\u0027s being kept around just in case\"... I know for a fact now that at least 16MB there are \"wasted\", if that\u0027s true for all the pods (I have pods that are \"locked\" on 500+mb memory, but I won\u0027t take those into consideration), we\u0027re talking about a potential saving of more than $4k per month on that Kubernetes cluster alone because I would be able to decommission 2-3 nodes...\r\n\r\n\u003e The working set also depends on whether you are running with SVR, since with it enabled the GC uses as many heaps as the # of cores on the machine\r\n\r\nwhat is SVR? and given that most pods there are allocated with a `requires` of \"1m\" and the `limit` of \"150m\", they should have only 1 heap...\r\n\r\nnow, @teo-tsirpanis,\r\nI wouldn\u0027t like to run GC manually, but that conserve memory option is indeed very attractive, I will surely fiddle with it and see if I can get a part of the working set back...",
                                           "updatedAt":  "2023-08-17T13:26:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kUIxC",
                                           "createdAt":  "2023-08-17T21:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "it would be worse for perf to make the workingset shrink by approx 19mb, unless you never allocate again, ie, you\u0027ll never need to use that 19mb again. I explained the decommit behavior of the ephemeral segment [here](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#special-handling-of-the-ephemeral-segment). please take a look and let me know if that does not answer your question. \r\n\r\nnow, of course we could discuss if this 19mb is too big for your scenario. this is your gen0 allocation budget, meaning when you have allocated 19mb in gen0, a GC will be triggered. since your other generations are so small, we could make this budget smaller and still achieve acceptable perf (what is your time-in-gc counter value?). as @mangod9 mentioned, this is exactly one of the scenarios we are targeting to make better with our 8.0 work. let me know if that\u0027s something you\u0027d like to try out (I do want to make changes to that logic soon but will be happy to give you a private build of clrgc.dll/libclrgc when I\u0027m done with that change).",
                                           "updatedAt":  "2023-08-17T21:24:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kUTM4",
                                           "createdAt":  "2023-08-17T22:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "@teo-tsirpanis setting `DOTNET_GCConserveMemory` to `9` did not changed anything basically... as far as I could observe the behavior was the same, both in terms of memory consumption and api response time...\r\n\r\nhey @Maoni0 thanks for that article, ill check it out for sure, but do you wanna know something that made the memory drop to this level here?:\r\n\u003cimg width=\"628\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/5585339/601211ab-3092-4a7b-8d08-8eb88477bce5\"\u003e\r\n\r\nMemory Pressure!\r\n\r\nI installed stress-ng and ran `stress-ng --brk 1 --stack 1 --bigheap 1 -t 5`\r\n\r\nright out of the gate, according to `dotnet counters` the memory went back to 12 freaking mb! let me say it again, **TWELVE MEGABYTES**... right after it a ran a load using bombardier, and yes, the first few requests struggled but after that it was all life as usual in terms of response time. BUT in terms of memory usage, its now on a constant around 68-72... I even ran more aggressive loads but sure enough, it goes back down to its 70\u0027s...\r\n\r\nfor me this is kinda HUGE... the pod is used to launch with a working set of 100MB+, after warming up it was never below 130MB... now, warmed up and responding as fast as ever using 75MB?!?! dream come true...",
                                           "updatedAt":  "2023-08-17T22:12:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kUZfk",
                                           "createdAt":  "2023-08-17T22:39:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "@Maoni0 this API here is a really small one... we are talking less than 1 request per second at peak hours! on the middle of the night, this api could even be put to sleep! this api basically receives a request and \"replays\" it to two other apis and combine the results which is usually a 1kb or less json from each side... the \"requires\" in term of CPU here is `100m` but we never seen it go over 15%... the biggest surge we have ever observed was 12 requests at the same time... I mean... im not looking for performance in terms of \"it runs fast\", im looking for performance in terms that \"it responds under a second using as little memory as possible\"... and the thing is: I have about 50 others JUST LIKE THIS...\r\n\r\nMy big problem here is that, if I set the limit to 128MB, Kubernetes OOMs the pod out!\r\n\r\nAlso, for resiliency sake, there will be 3 pods running in prod, meaning that each pod will be handling 1 request every 3 seconds at peak time...",
                                           "updatedAt":  "2023-08-18T00:11:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kUtLi",
                                           "createdAt":  "2023-08-18T00:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "Looking at what can be done, I ended up testing upgrading this API to .Net 7 and to my surprise the overall performance dropped a bit and the working set raised to 195MB+... running the stress generator brings the memory down to around 125MB and after the rewarming the set the memory stays at around 165MB... I think I will keep it on .net 6 for now",
                                           "updatedAt":  "2023-08-18T00:23:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kWt_J",
                                           "createdAt":  "2023-08-18T10:03:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e the overall performance dropped a bit and the working set raised to 195MB+\r\n\r\nTry using `DOTNET_GCName=clrgc.dll`, it\u0027ll likely revert that regression.",
                                           "updatedAt":  "2023-08-18T10:03:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kWyue",
                                           "createdAt":  "2023-08-18T10:20:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "@Leonardo-Ferreira It\u0027s still important to know whether your app runs in server (multi heap) or workstation (1 heap) mode. Heaps here is not something kubernetes provides, it\u0027s an internal memory space of GC to allocate stuff.\n\nAlso, when running in the kubernetes it might be worthy to set heap hard limit to exact value you\u0027ve set in the pod limits.\n\nMy understanding is that Kubernetes is much more eager to kill a pod when memory  limit is reached while a typical os is more like \"I can\u0027t give you more memory but please deal with it yourself\"",
                                           "updatedAt":  "2023-08-18T10:20:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kXhV5",
                                           "createdAt":  "2023-08-18T13:01:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "@En3Tho thank you for the heads up, I will test setting the heap hard limit.\r\n\r\nRegarding the server vs. workstation, how can I determine that? my project csproj file makes no reference to the `ServerGarbageCollection` and I don\u0027t specify any environment variable... given that the pod is capped at 256MB and everything else I\u0027ve said above, what \"flavor\" should I be using?",
                                           "updatedAt":  "2023-08-18T13:01:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kYjzR",
                                           "createdAt":  "2023-08-18T16:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "I don\u0027t remember if there was a property on GC class or something but you can always fix the heap count via runtimeconfig.json or env variable. I guess you have a workstation mode on jusjing from your description. \n\nWhich to choose is generally: \n\nWorkstation works best when you have lots of small workers that share memory, or worker that is not high load/allocation pressure.\n\nServer is more like \"I\u0027m the lord of these memory rich lands, it\u0027s all mine\". E.g. webserver handling lots of requests and allocating and cleaning a lot.\n\nIn your case workstation mode seems like a fit.",
                                           "updatedAt":  "2023-08-18T16:30:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k8Olx",
                                           "createdAt":  "2023-08-25T15:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "Something else to make things complicated: I was working on a API that leaks memory to help me study and get better at reading dumps... I was upset that, in my point of view, `Marshal.AllcHCGlobal` was not leaking, because the subsequent `currentProcess.WorkingSet64` was not reporting the amount I was expecting and even worst, if I gave it enough time, it would basically return to the original value of the API... to my surprise, `WorkingSet64` was basically reporting RSS, and the 500MB that was actually leaked, happened to be paged out... lesson learned: low working set doesn\u0027t mean low memory usage...",
                                           "updatedAt":  "2023-08-25T15:03:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nWaRi",
                                           "createdAt":  "2023-09-25T15:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "\u003e It\u0027s still important to know whether your app runs in server (multi heap) or workstation (1 heap) mode. Heaps here is not something kubernetes provides, it\u0027s an internal memory space of GC to allocate stuff.\r\n\u003e \r\n\u003e Also, when running in the kubernetes it might be worthy to set heap hard limit to exact value you\u0027ve set in the pod limits.\r\n\u003e \r\n\u003e My understanding is that Kubernetes is much more eager to kill a pod when memory limit is reached while a typical os is more like \"I can\u0027t give you more memory but please deal with it yourself\"\r\n\r\nI have been reading about [DATAS](https://maoni0.medium.com/dynamically-adapting-to-application-sizes-2d72fcb6f1ea) and it does seem very promissing...",
                                           "updatedAt":  "2023-09-25T15:15:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QH4I3",
                                           "createdAt":  "2024-10-16T21:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhershds-notime",
                                           "body":  "@Leonardo-Ferreira , have you tried DATAS, did it help with your problem?",
                                           "updatedAt":  "2024-10-16T21:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QH--M",
                                           "createdAt":  "2024-10-16T21:38:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "in this case here, not very much actually... the memory profile remains basically the same in .net 8 with or without DATAS... in other apis, that consume more memory and have more CPU/requests/work I saw better results, but in small apis, with very low traffic, no real gain...\n\nI couldn\u0027t test yet with .Net 9... were there any improvements on DATAS or GC?",
                                           "updatedAt":  "2024-10-16T21:39:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sv10T",
                                           "createdAt":  "2024-11-07T11:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "typesbb",
                                           "body":  "\u003e in this case here, not very much actually... the memory profile remains basically the same in .net 8 with or without DATAS... in other apis, that consume more memory and have more CPU/requests/work I saw better results, but in small apis, with very low traffic, no real gain...\n\u003e \n\u003e I couldn\u0027t test yet with .Net 9... were there any improvements on DATAS or GC?\n\nI repeat.",
                                           "updatedAt":  "2024-11-07T11:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sz0Y9",
                                           "createdAt":  "2024-11-07T19:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Leonardo-Ferreira",
                                           "body":  "answering my own question, yes, it looks like .net 9 is bringing improvements to DATAS: https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/runtime#garbage-collection",
                                           "updatedAt":  "2024-11-07T19:34:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S0ZBW",
                                           "createdAt":  "2024-11-07T21:01:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "correct, DATAS has been enabled by default in 9. Note that it should help with most scenarios but since it\u0027s scenario dependent not all apps will observe gains. Also as might be expected there is always a memory tradeoff with throughput. ",
                                           "updatedAt":  "2024-11-07T21:01:39Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "GC runs but working set remains the same?",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90672",
        "createdAt":  "2023-08-16T16:36:01Z",
        "number":  90672,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-16T17:09:40Z",
        "body":  "There was an earlier discussion brought up about this. In the implementation of NoGCRegion for regions, there is a potential of wasted commit if this happens.\r\n\r\nStartNoGCRegion -\u003e GarbageCollect -\u003e ... -\u003e should_proceed_for_no_gc -\u003e extend_soh_for_no_gc -\u003e commit some memory.\r\n\r\nbut then performed a GC, and then\r\n\r\nallocate_for_no_gc_after_gc -\u003e extend_soh_for_no_gc -\u003e commit the memory again.\r\n\r\nThe repeated work is wasteful.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZDD3Xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kMPde",
                                           "createdAt":  "2023-08-16T16:36:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere was an earlier discussion brought up about this. In the implementation of NoGCRegion for regions, there is a potential of wasted commit if this happens.\r\n\r\nStartNoGCRegion -\u003e GarbageCollect -\u003e ... -\u003e should_proceed_for_no_gc -\u003e extend_soh_for_no_gc -\u003e commit some memory.\r\n\r\nbut then performed a GC, and then\r\n\r\nallocate_for_no_gc_after_gc -\u003e extend_soh_for_no_gc -\u003e commit the memory again.\r\n\r\nThe repeated work is wasteful.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-16T16:36:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Avoid wasted commit in NoGCRegions",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90674",
        "createdAt":  "2023-08-16T16:40:14Z",
        "number":  90674,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-16T17:09:45Z",
        "body":  "With `USE_REGIONS`, we are no longer constrained to have Gen0 bounded by segment size. We are also not required to commit upfront. Therefore it should be possible for us to implement a commit-on-demand version of NoGCRegion where developers no longer need to estimate how much memory they need when they create a NoGCRegion.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZDENbQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kMQ1t",
                                           "createdAt":  "2023-08-16T16:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWith `USE_REGIONS`, we are no longer constrained to have Gen0 bounded by segment size. We are also not required to commit upfront. Therefore it should be possible for us to implement a commit-on-demand version of NoGCRegion where developers no longer need to estimate how much memory they need when they create a NoGCRegion.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-16T16:40:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support infinite size, commit-on-demand, NoGCRegion",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90675",
        "createdAt":  "2023-08-16T16:43:24Z",
        "number":  90675,
        "author":  "cshung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-16T17:09:51Z",
        "body":  "Right now, the dynamic heap samples calculation happens outside GC pause, this is leading to\r\n\r\n1. Slightly incorrect reads for MSL wait times, and\r\n2. heap count sample events cannot be reliably correlated to the last GC.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZDEeiw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kMR6L",
                                           "createdAt":  "2023-08-16T16:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRight now, the dynamic heap samples calculation happens outside GC pause, this is leading to\r\n\r\n1. Slightly incorrect reads for MSL wait times, and\r\n2. heap count sample events cannot be reliably correlated to the last GC.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecshung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-16T16:43:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Move dynamic heap sample inside GC pause",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92490",
        "createdAt":  "2023-09-22T17:13:13Z",
        "number":  92490,
        "author":  "westfin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-06T12:34:53Z",
        "body":  "We have several asp.net core service which are hosted in kubernetes.\r\nAfter moving to NET7 we have experienced unexpected memory usage.\r\n\r\nMemory is growing until kubernetes got killed container because of memory limit exceeding. But it is seems that there is no managed memory leaks because of based on Prometheus metrics heap stayed stable, and there is no OutOfMemoryException, at the same time working set is constantly growing.\r\n\r\nSo we have two dumps.\r\nThe first `!sos maddress -images` command output shows:\r\n\r\n\r\n | Memory Type            |          Count |         Size |   Size (bytes) | \r\n |------------------------|----------------|--------------|----------------| \r\n | Image                  |            301 |      83,99mb |     88?065?024 | \r\n | PAGE_EXECUTE_READ      |          1?418 |      41,16mb |     43?163?648 | \r\n | PAGE_EXECUTE_WRITECOPY |          1?317 |      37,27mb |     39?082?496 | \r\n | Stack                  |             19 |      25,95mb |     27?213?312 | \r\n | GCHeap                 |              6 |      20,45mb |     21?442?560 | \r\n |------------------------|----------------|--------------|----------------| \r\n | [TOTAL]                |          3?547 |     240,06mb |    251?718?656 | \r\n\r\nThe same command on the second dump (after 3 days):\r\n| Memory Type            |          Count |         Size |   Size (bytes) | \r\n |------------------------|----------------|--------------|----------------| \r\n | Image                  |            454 |     **185,48mb** |    194?494?464 | \r\n | PAGE_EXECUTE_WRITECOPY |          1?272 |      46,59mb |     48?853?504 | \r\n | PAGE_EXECUTE_READ      |          1?456 |      41,62mb |     43?642?880 | \r\n | GCHeap                 |              5 |      29,97mb |     31?428?608 | \r\n | Stack                  |             20 |      27,86mb |     29?216?256 | \r\n |------------------------|----------------|--------------|----------------| \r\n | [TOTAL]                |          3?706 |     363,52mb |    381?177?856 |\r\n\r\nThe detailed summary shows that a lot of memory used by `doublemapper__deleted_` entry:\r\n\r\nFor the first dump:\r\n | Image                                                   |          Count |         Size |   Size (bytes) | \r\n |---------------------------------------------------------|----------------|--------------|----------------| \r\n| doublemapper__deleted_                                  |              1 |     **544,00kb** |        557?056 | \r\n\r\nAnd for the second dump:\r\n | Image                                                   |          Count |         Size |   Size (bytes) | \r\n |---------------------------------------------------------|----------------|--------------|----------------| \r\n | doublemapper__deleted_                                  |            190 |     **106,81mb** |    111?996?928 | \r\n\r\n\r\nDoes it a memory leak? Is there any way to find out from where it comes from?\r\n\r\nI will appreciate for any help, this issue becomes critical for us. Currently we are on pause with our migration to NET7 for other services.\r\n\r\n**Environment info:**\r\n_Docker image_: mcr.microsoft.com/dotnet/aspnet:7.0.10-alpine3.18\r\n_Memory limits_: 512MB\r\n_Sdk_: \"Microsoft.NET.Sdk.Worker\" (seems it is mean Workstation gc mode)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkpsRRw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nOX5-",
                                           "createdAt":  "2023-09-22T17:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have several asp.net core service which are hosted in kubernetes.\r\nAfter moving to NET7 we have experienced unexpected memory usage.\r\n\r\nMemory is growing until kubernetes got killed container because of memory limit exceeding. But it is seems that there is no managed memory leaks because of based on Prometheus metrics heap stayed stable, and there is no OutOfMemoryException, at the same time working set is constantly growing.\r\n\r\nSo we have two dumps.\r\nThe first `!sos maddress -images` command output shows:\r\n\r\n\r\n | Memory Type            |          Count |         Size |   Size (bytes) | \r\n |------------------------|----------------|--------------|----------------| \r\n | Image                  |            301 |      83,99mb |     88?065?024 | \r\n | PAGE_EXECUTE_READ      |          1?418 |      41,16mb |     43?163?648 | \r\n | PAGE_EXECUTE_WRITECOPY |          1?317 |      37,27mb |     39?082?496 | \r\n | Stack                  |             19 |      25,95mb |     27?213?312 | \r\n | GCHeap                 |              6 |      20,45mb |     21?442?560 | \r\n |------------------------|----------------|--------------|----------------| \r\n | [TOTAL]                |          3?547 |     240,06mb |    251?718?656 | \r\n\r\nThe same command on the second dump (after 3 days):\r\n| Memory Type            |          Count |         Size |   Size (bytes) | \r\n |------------------------|----------------|--------------|----------------| \r\n | Image                  |            454 |     **185,48mb** |    194?494?464 | \r\n | PAGE_EXECUTE_WRITECOPY |          1?272 |      46,59mb |     48?853?504 | \r\n | PAGE_EXECUTE_READ      |          1?456 |      41,62mb |     43?642?880 | \r\n | GCHeap                 |              5 |      29,97mb |     31?428?608 | \r\n | Stack                  |             20 |      27,86mb |     29?216?256 | \r\n |------------------------|----------------|--------------|----------------| \r\n | [TOTAL]                |          3?706 |     363,52mb |    381?177?856 |\r\n\r\nThe detailed summary shows that a lot of memory used by `doublemapper__deleted_` entry:\r\n\r\nFor the first dump:\r\n | Image                                                   |          Count |         Size |   Size (bytes) | \r\n |---------------------------------------------------------|----------------|--------------|----------------| \r\n| doublemapper__deleted_                                  |              1 |     **544,00kb** |        557?056 | \r\n\r\nAnd for the second dump:\r\n | Image                                                   |          Count |         Size |   Size (bytes) | \r\n |---------------------------------------------------------|----------------|--------------|----------------| \r\n | doublemapper__deleted_                                  |            190 |     **106,81mb** |    111?996?928 | \r\n\r\n\r\nDoes it a memory leak? Any way to find out from where it comes from?\r\n\r\nI will appreciate for any help, this issue becomes critical for us. Currently we are on pause with our migration to NET7 for other services.\r\n\r\n**Environment info:**\r\n_Docker image_: mcr.microsoft.com/dotnet/aspnet:7.0.10-alpine3.18\r\n_Memory limits_: 512MB\r\n_Sdk_: \"Microsoft.NET.Sdk.Worker\" (seems it is mean Workstation gc mode)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewestfin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-22T17:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nOj7L",
                                           "createdAt":  "2023-09-22T18:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @westfin, are you able to capture some dumps or traces before the memory is hitting its limits? Also if you are able to create a small repro which reproduces the problem that might be useful. ",
                                           "updatedAt":  "2023-09-22T18:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nPGqB",
                                           "createdAt":  "2023-09-22T20:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "westfin",
                                           "body":  "\u003e Hello @westfin, are you able to capture some dumps or traces before the memory is hitting its limits? Also if you are able to create a small repro which reproduces the problem that might be useful.\r\n\r\nHello @mangod9 , thank you for response.\r\nYou mean as close as possible to limits? Not sure about dumps, because when we are collecting dump, memory is doubled and OOM killed by kubernetes. \r\nWhich traces you are interested? We can try to collect close to limits.\r\n\r\nAbout repro we are trying to localize the problem locally, but without any luck. Currently it is reproduced only on Production.\r\n\r\nAny way, is growth of doublemapper__deleted_ entries something abnormal? Should we care about it, is it right direction at all?",
                                           "updatedAt":  "2023-09-22T20:44:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nPkV9",
                                           "createdAt":  "2023-09-22T23:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "possibly related #80580",
                                           "updatedAt":  "2023-09-22T23:54:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ne8zF",
                                           "createdAt":  "2023-09-26T19:31:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "westfin",
                                           "body":  "\u003e possibly related #80580\r\n\r\nNot sure that this the same. We do not create dynamic assemblies. But may be there are any others code patterns that can cause such issue..",
                                           "updatedAt":  "2023-09-26T19:31:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tN4OP",
                                           "createdAt":  "2023-11-29T17:09:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MaxRev-Dev",
                                           "body":  "Hi everyone, I\u0027ve got the same issue with the following MREs. \r\n**This applies to .NET 8 only**. Both .NET7 and .NET6 do not have this issue.\r\nThey can have a different nature, but the memory increase is similar.\r\n1. Heap grows when floating-point types are converted to strings.\r\n\r\n```csharp\r\nwhile (true) {\r\n\tvar thread = new Thread(() =\u003e {\r\n\t\tvar _ = 0d.ToString(); // leaks, Double type\r\n                // var __ = 0.ToString(); // no leak, Int32 type\r\n\t});\r\n\tthread.Start();\r\n\tThread.SpinWait(10);\r\n}\r\n```\r\n\r\n2. Running tasks inside the threads\r\n\r\n```csharp\r\nwhile (true) {\r\n\tvar thread = new Thread(() =\u003e {\r\n\t\tTask.Run(() =\u003e { }).Wait(); // heap is growing constantly \r\n\t});\r\n\tthread.Start();\r\n\tThread.SpinWait(10);\r\n}\r\n```\r\ncc @mangod9 ",
                                           "updatedAt":  "2023-11-29T23:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tPwv0",
                                           "createdAt":  "2023-11-29T23:13:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@kunalspathak, since we have seen a small leak related to ThreadStatics. Not sure whether this is the same issue but worth checking with the fix. ",
                                           "updatedAt":  "2023-11-29T23:13:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tVgxy",
                                           "createdAt":  "2023-11-30T18:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "\u003e Heap grows when floating-point types are converted to strings.\r\n\r\nI ran this with and without the changes in https://github.com/dotnet/runtime/pull/95362. In below screenshot, the 1st entry is without the fix and 2nd entry is after the fix. They were ran for more than 2:34 hours as seen below. I do see marginal reduction in memory consumption with fix, so possibly it was from same reason, but I am not 100% sure. It will be good to verify it on your end as well.\r\n\r\n\r\n\u003cimg width=\"975\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/12488060/ccb7b069-1c4d-483c-9189-0e569f87ecff\"\u003e\r\n",
                                           "updatedAt":  "2023-11-30T18:42:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tuAHL",
                                           "createdAt":  "2023-12-05T13:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamWilliamsGS",
                                           "body":  "We are seeing a very similar issue to you when moving services from .NET 6 to .NET 8 @westfin. .NET services hosted in kubernetes with unmanaged memory growth that lasts until kubernetes gets rid of it, only in production, and so far extremely difficult to reproduce locally. Are you still seeing the issue too?",
                                           "updatedAt":  "2023-12-05T13:17:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tuhrA",
                                           "createdAt":  "2023-12-05T14:33:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Is it possible to try nightly builds that contains the fix I merged in https://github.com/dotnet/runtime/pull/95362?",
                                           "updatedAt":  "2023-12-05T14:33:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tup48",
                                           "createdAt":  "2023-12-05T14:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "westfin",
                                           "body":  "@SamWilliamsGS Yes we are seeing the issue, but we are on .NET 7",
                                           "updatedAt":  "2023-12-05T14:51:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SbHb2",
                                           "createdAt":  "2024-11-05T08:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "westfin",
                                           "body":  "Hi, guys, again. We have migrated to .net8.0.10 image. And issue still there.\nBut now a have several _heaptrack_ dumps. I have collected two dumps with difference 4 days.\n\nI\u0027m not sure but according to comparing result of them seems like an issue is in OpenSSL area. @bartonjs @rzikm I know guys you are experts in this stuff, could you help me please with investigation.\n\nOur application heavily used HttpClient with client certificate.\n```cs\nserviceCollection.AddHttpClient(clientName)\n    .ConfigurePrimaryHttpMessageHandler(() =\u003e\n    {\n        var handler = new HttpClientHandler();\n        handler.ClientCertificates.Add(new X509Certificate2(\"path_to_cert\", \"some_pwd\"));\n        return handler;\n    });\n```\n\n![Image](https://github.com/user-attachments/assets/4e07f144-502c-45c5-b6cb-619fca28d8d4)\n",
                                           "updatedAt":  "2024-11-05T08:52:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SexbJ",
                                           "createdAt":  "2024-11-05T15:49:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Unless you manage to capture a leak in order of hundred(s) of MB, its hard tu tell if those are truly leaked objects or simply the live objects which have not been freed (because they are being used).\n\nRecently, I have encountered a case where the growth of the working set was caused by malloc fragmentation due to native allocations in OpenSSL. One way to limit this fragmentation was to limit the number of malloc arenas used by the process. Can you try running the application with `MALLOC_ARENA_MAX=1`?",
                                           "updatedAt":  "2024-11-05T15:49:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sj_iC",
                                           "createdAt":  "2024-11-06T07:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "westfin",
                                           "body":  "@rzikm Thank you, we will try and come back with results. Does this env applicable to musl libc?",
                                           "updatedAt":  "2024-11-06T07:51:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SmxFH",
                                           "createdAt":  "2024-11-06T12:34:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I don\u0027t think so. It seems to be specific to glibc implementation of malloc.\n\nAnother possible workaround to try could be replacing the allocator by e.g. jemalloc, on Ubuntu, you can do it like this\n\n```\napt-get update \u0026\u0026 apt-get install -y libjemalloc-dev\nLD_PRELOAD=libjemalloc.so.2 \u003cyourApplication\u003e\n```\n\n",
                                           "updatedAt":  "2024-11-06T12:34:51Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Workingset constantly growing, possible unmanaged memory leak",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95257",
        "createdAt":  "2023-11-22T16:35:58Z",
        "number":  95257,
        "author":  "anoop331",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDB7PQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "comfile-mike",
                                            "createdAt":  "2025-05-31T00:58:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JinShil",
                                            "createdAt":  "2025-05-31T00:58:20Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-31T04:21:48Z",
        "body":  "When .net8 AOT compiled linux-arm64 library interface is invoked using DllImport from  .net8 CLR code, on linux-arm64 environment, it crashes.\r\n\r\nThe code where this issue can be reproduced is listed here in the following repo.\r\n\r\nhttps://github.com/anoop331/net8aot\r\n\r\nThe AOT compilation can be done using the docker file in the repo.\r\n\r\n\r\nThe following table lists down the combinations where it works and it doesn\u0027t, all on linux-arm64 target (yocto running on QEMU arm64).\r\n\r\n\u003chtml xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\"\u003e\r\n\r\n\u003chead\u003e\r\n\r\n\u003cmeta name=ProgId content=Excel.Sheet\u003e\r\n\u003cmeta name=Generator content=\"Microsoft Excel 15\"\u003e\r\n\u003clink id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/a423918/AppData/Local/Temp/msohtmlclip1/01/clip.htm\"\u003e\r\n\u003clink rel=File-List\r\nhref=\"file:///C:/Users/a423918/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\"\u003e\r\n\u003cstyle\u003e\r\n\u003c!--table\r\n\t{mso-displayed-decimal-separator:\"\\,\";\r\n\tmso-displayed-thousand-separator:\" \";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:Calibri, sans-serif;\r\n\tmso-font-charset:0;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n.xl63\r\n\t{font-weight:700;\r\n\tborder:.5pt solid windowtext;\r\n\tbackground:#F2F2F2;\r\n\tmso-pattern:black none;}\r\n.xl64\r\n\t{border:.5pt solid windowtext;}\r\n.xl65\r\n\t{font-weight:700;\r\n\tborder-top:none;\r\n\tborder-right:.5pt solid windowtext;\r\n\tborder-bottom:none;\r\n\tborder-left:none;\r\n\tbackground:#F2F2F2;\r\n\tmso-pattern:black none;}\r\n--\u003e\r\n\u003c/style\u003e\r\n\u003c/head\u003e\r\n\r\n\u003cbody link=\"#0563C1\" vlink=\"#954F72\"\u003e\r\n\r\n\r\nInvoking   Env (linux-arm64) | Lib Compiled   Using | Status | Error on terminal\r\n-- | -- | -- | --\r\nnet7 CLR | net7 | Works |  \r\nnet7  AOT | net7 | works |  \r\nnet7 CLR | net8 | Error |  \r\nnet8 CLR | net7 | works |  \r\nnet8 CLR | net8 | Error | aborted\r\nnet8 AOT | net8 | Error | aborted\r\nnet7 AOT | net8 | Works |  \r\nc ++ | net8 | Works |  \r\nc ++ | net7 | Works |  \r\n\r\n\r\n\r\n\u003c/body\u003e\r\n\r\n\u003c/html\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrkbNJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tPqnK",
                                           "createdAt":  "2023-11-29T22:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen .net8 AOT compiled linux-arm64 library interface is invoked using DllImport from  .net8 CLR code, on linux-arm64 environment, it crashes.\r\n\r\nThe code where this issue can be reproduced is listed here in the following repo.\r\n\r\nhttps://github.com/anoop331/net8aot\r\n\r\nThe AOT compilation can be done using the docker file in the repo.\r\n\r\n\r\nThe following table lists down the combinations where it works and it doesn\u0027t, all on linux-arm64 target.\r\n\r\n\u003cspan\u003e\u003cspan class=\"ui-provider ee bag bah bai baj bak bal bam ban bao bap baq bar bas bat bau bav baw bax bay baz bba bbb bbc bbd bbe bbf bbg bbh bbi bbj bbk bbl bbm bbn\" dir=\"ltr\"\u003e\r\nInvoking Env | Lib Compiled Using | Status\r\n-- | -- | --\r\nnet7 CLR | net7 | Works\r\nnet7  AOT | net7 | works\r\nnet7 CLR | net8 | Error\r\nnet8 CLR | net7 | works\r\nnet8 AOT | net8 | Error\r\nnet7 AOT | net8 | Works\r\n\r\n\u003c/span\u003e\u003c/span\u003e\r\n\r\n\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanoop331\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Codegen-AOT-mono`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-29T22:49:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tPqxN",
                                           "createdAt":  "2023-11-29T22:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "This seems to be related to NativeAOT rather than Mono AOT.",
                                           "updatedAt":  "2023-11-29T22:49:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tQXJA",
                                           "createdAt":  "2023-11-30T02:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e crashes\r\n\r\nIs there anything printed to the console? What is the exit code?",
                                           "updatedAt":  "2023-11-30T02:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tRTC-",
                                           "createdAt":  "2023-11-30T07:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I can repro this on Raspberry Pi. This FailFasts when the second copy of the runtime tries to initialize. The GC initialization returns a failure. Stepping through it, the GC is mmapping an insane memory range and the mmap fails:\r\n\r\n```\r\n#0  0x0000007f6020117c in GCToOSInterface::VirtualReserve (size=274877906944, alignment=\u003coptimized out\u003e,\r\n    flags=\u003coptimized out\u003e, node=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/gc/unix/gcenv.unix.cpp:570\r\n#1  0x0000007f601c717c in WKS::virtual_alloc (size=274877906944, numa_node=65535, use_large_pages_p=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/coreclr/nativeaot/Runtime/../../gc/gc.cpp:5766\r\n#2  WKS::gc_heap::initialize_gc (soh_segment_size=soh_segment_size@entry=268435456,\r\n    loh_segment_size=loh_segment_size@entry=549755809776, poh_segment_size=poh_segment_size@entry=549755809776)\r\n    at /__w/1/s/src/coreclr/nativeaot/Runtime/../../gc/gc.cpp:14252\r\n#3  0x0000007f601f2404 in WKS::GCHeap::Initialize (this=\u003coptimized out\u003e)\r\n    at /__w/1/s/src/coreclr/nativeaot/Runtime/../../gc/gc.cpp:48484\r\n#4  0x0000007f601b8688 in RedhawkGCInterface::InitializeSubsystems ()\r\n    at /__w/1/s/src/coreclr/nativeaot/Runtime/gcrhenv.cpp:112\r\n#5  0x0000007f601bc420 in InitDLL (hPalInstance=0x7f601b0000) at /__w/1/s/src/coreclr/nativeaot/Runtime/startup.cpp:151\r\n#6  RhInitialize (isDll=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/nativeaot/Runtime/startup.cpp:376\r\n#7  0x0000007f601b6ab8 in InitializeRuntime () at /__w/1/s/src/coreclr/nativeaot/Bootstrap/main.cpp:167\r\n#8  0x0000007f601bd93c in Thread::EnsureRuntimeInitialized (this=0x7ff7ff88f0)\r\n    at /__w/1/s/src/coreclr/nativeaot/Runtime/thread.cpp:1219\r\n#9  Thread::ReversePInvokeAttachOrTrapThread (this=0x7ff7ff88f0, pFrame=0x7ffffff130)\r\n    at /__w/1/s/src/coreclr/nativeaot/Runtime/thread.cpp:1181\r\n#10 0x0000007f60245c6c in aotlib_AotLib_NativeEntryPoints__Add (x=\u003coptimized out\u003e, y=\u003coptimized out\u003e)\r\n    at /home/michals/net8aot/AotLib/Class1.cs:11\r\n#11 0x000000555560ec04 in test_LibTest_Program__add () at /home/michals/net8aot/LibTest/Program.cs:13\r\n#12 0x000000555560eb04 in test_LibTest_Program__Main (args=...) at /home/michals/net8aot/LibTest/Program.cs:11\r\n#13 0x000000555562f098 in test__Module___StartupCodeMain ()\r\n    at /_/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:289\r\n#14 0x0000007ff7e27780 in __libc_start_call_main (main=main@entry=0x5555558bc8 \u003cmain(int, char**)\u003e, argc=argc@entry=1,\r\n    argv=argv@entry=0x7ffffff3c8) at ../sysdeps/nptl/libc_start_call_main.h:58\r\n```\r\n\r\nIt appears we\u0027re asking for 274 GB of address space.\r\n\r\nThe contents of registers before the call to mmap is:\r\n\r\n```\r\nx0             0x0                 0\r\nx1             0x4000001000        274877911040\r\nx2             0x0                 0\r\nx3             0x22                34\r\nx4             0xffffffff          4294967295\r\nx5             0x0                 0\r\nx6             0x555575b9e0        366505998816\r\nx7             0xea97d327a30d6edb  -1542532180158353701\r\nx8             0x1000              4096\r\nx9             0x0                 0\r\nx10            0x0                 0\r\nx11            0x10000000          268435456\r\nx12            0x6e6f69737365732f  7957695011165139759\r\nx13            0x65706f63732e342d  7309464668147168301\r\nx14            0x1                 1\r\nx15            0x7ff7e7a210        549619999248\r\nx16            0x7f602df8a0        547074472096\r\nx17            0x7ff7e839c0        549620038080\r\nx18            0x12e000            1236992\r\nx19            0x4000000000        274877906944\r\nx20            0x2000              8192\r\nx21            0x7f602e9000        547074510848\r\nx22            0x1000              4096\r\nx23            0x7f602e9000        547074510848\r\nx24            0x0                 0\r\nx25            0x0                 0\r\nx26            0x7ff7ffe028        549621588008\r\nx27            0x55556eeb58        366505552728\r\nx28            0x0                 0\r\n```\r\n\r\nSo I think it matches what gdb showed in debug information as the `size` parameter to `GCToOSInterface::VirtualReserve` and this is the real number (not a case of bad debug info).\r\n\r\n@dotnet/gc is it expected that the GC would try to reserve such huge amount of memory? The raspberry Pi I\u0027m running this on has 8 GB of RAM and 32 GB of total storage (swap is a small fraction of that).",
                                           "updatedAt":  "2023-11-30T07:39:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tTZO_",
                                           "createdAt":  "2023-11-30T13:37:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "correct, with regions the GC tries to reserve 256gb of address space or up to 1/2 of available virtual memory: \r\n\r\nhttps://github.com/dotnet/runtime/blob/3805c174d0a72dadfdbef98011b10b32df9e93f3/src/coreclr/gc/gc.cpp#L48097\r\n\r\ndo we know how much of virtual address space available on the pi? Maybe for this scenario it has to be less than 1/2? ",
                                           "updatedAt":  "2023-11-30T13:37:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tT6oI",
                                           "createdAt":  "2023-11-30T14:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anoop331",
                                           "body":  "\u003e \u003e crashes\r\n\u003e \r\n/\r\n\u003e Is there anything printed to the console? What is the exit code?\r\n\r\n\u003chtml xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\"\u003e\r\n\r\nIt says \"aborted\", here is the updated table.\r\n\r\n\u003chead\u003e\r\n\r\n\u003cmeta name=ProgId content=Excel.Sheet\u003e\r\n\u003cmeta name=Generator content=\"Microsoft Excel 15\"\u003e\r\n\u003clink id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/a423918/AppData/Local/Temp/msohtmlclip1/01/clip.htm\"\u003e\r\n\u003clink rel=File-List\r\nhref=\"file:///C:/Users/a423918/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\"\u003e\r\n\u003cstyle\u003e\r\n\u003c!--table\r\n\t{mso-displayed-decimal-separator:\"\\,\";\r\n\tmso-displayed-thousand-separator:\" \";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:Calibri, sans-serif;\r\n\tmso-font-charset:0;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n.xl63\r\n\t{font-weight:700;\r\n\tborder:.5pt solid windowtext;\r\n\tbackground:#F2F2F2;\r\n\tmso-pattern:black none;}\r\n.xl64\r\n\t{border:.5pt solid windowtext;}\r\n.xl65\r\n\t{font-weight:700;\r\n\tborder-top:none;\r\n\tborder-right:.5pt solid windowtext;\r\n\tborder-bottom:none;\r\n\tborder-left:none;\r\n\tbackground:#F2F2F2;\r\n\tmso-pattern:black none;}\r\n--\u003e\r\n\u003c/style\u003e\r\n\u003c/head\u003e\r\n\r\n\u003cbody link=\"#0563C1\" vlink=\"#954F72\"\u003e\r\n\r\n\r\nInvoking   Env (linux-arm64) | Lib Compiled   Using | Status | Error on terminal\r\n-- | -- | -- | --\r\nnet7 CLR | net7 | Works |  \r\nnet7  AOT | net7 | works |  \r\nnet7 CLR | net8 | Error |  \r\nnet8 CLR | net7 | works |  \r\nnet8 CLR | net8 | Error | aborted\r\nnet8 AOT | net8 | Error | aborted\r\nnet7 AOT | net8 | Works |  \r\nc ++ | net8 | Works |  \r\nc ++ | net7 | Works |  \r\n\r\n\r\n\r\n\u003c/body\u003e\r\n\r\n\u003c/html\u003e\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-11-30T14:53:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tT7TX",
                                           "createdAt":  "2023-11-30T14:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anoop331",
                                           "body":  "\u003e I can repro this on Raspberry Pi. This FailFasts when the second copy of the runtime tries to initialize. The GC initialization returns a failure. Stepping through it, the GC is mmapping an insane memory range and the mmap fails:\r\n\u003e \r\n\u003e ```\r\n\u003e #0  0x0000007f6020117c in GCToOSInterface::VirtualReserve (size=274877906944, alignment=\u003coptimized out\u003e,\r\n\u003e     flags=\u003coptimized out\u003e, node=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/gc/unix/gcenv.unix.cpp:570\r\n\u003e #1  0x0000007f601c717c in WKS::virtual_alloc (size=274877906944, numa_node=65535, use_large_pages_p=\u003coptimized out\u003e)\r\n\u003e     at /__w/1/s/src/coreclr/nativeaot/Runtime/../../gc/gc.cpp:5766\r\n\u003e #2  WKS::gc_heap::initialize_gc (soh_segment_size=soh_segment_size@entry=268435456,\r\n\u003e     loh_segment_size=loh_segment_size@entry=549755809776, poh_segment_size=poh_segment_size@entry=549755809776)\r\n\u003e     at /__w/1/s/src/coreclr/nativeaot/Runtime/../../gc/gc.cpp:14252\r\n\u003e #3  0x0000007f601f2404 in WKS::GCHeap::Initialize (this=\u003coptimized out\u003e)\r\n\u003e     at /__w/1/s/src/coreclr/nativeaot/Runtime/../../gc/gc.cpp:48484\r\n\u003e #4  0x0000007f601b8688 in RedhawkGCInterface::InitializeSubsystems ()\r\n\u003e     at /__w/1/s/src/coreclr/nativeaot/Runtime/gcrhenv.cpp:112\r\n\u003e #5  0x0000007f601bc420 in InitDLL (hPalInstance=0x7f601b0000) at /__w/1/s/src/coreclr/nativeaot/Runtime/startup.cpp:151\r\n\u003e #6  RhInitialize (isDll=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/nativeaot/Runtime/startup.cpp:376\r\n\u003e #7  0x0000007f601b6ab8 in InitializeRuntime () at /__w/1/s/src/coreclr/nativeaot/Bootstrap/main.cpp:167\r\n\u003e #8  0x0000007f601bd93c in Thread::EnsureRuntimeInitialized (this=0x7ff7ff88f0)\r\n\u003e     at /__w/1/s/src/coreclr/nativeaot/Runtime/thread.cpp:1219\r\n\u003e #9  Thread::ReversePInvokeAttachOrTrapThread (this=0x7ff7ff88f0, pFrame=0x7ffffff130)\r\n\u003e     at /__w/1/s/src/coreclr/nativeaot/Runtime/thread.cpp:1181\r\n\u003e #10 0x0000007f60245c6c in aotlib_AotLib_NativeEntryPoints__Add (x=\u003coptimized out\u003e, y=\u003coptimized out\u003e)\r\n\u003e     at /home/michals/net8aot/AotLib/Class1.cs:11\r\n\u003e #11 0x000000555560ec04 in test_LibTest_Program__add () at /home/michals/net8aot/LibTest/Program.cs:13\r\n\u003e #12 0x000000555560eb04 in test_LibTest_Program__Main (args=...) at /home/michals/net8aot/LibTest/Program.cs:11\r\n\u003e #13 0x000000555562f098 in test__Module___StartupCodeMain ()\r\n\u003e     at /_/src/coreclr/nativeaot/Common/src/System/Collections/Generic/LowLevelDictionary.cs:289\r\n\u003e #14 0x0000007ff7e27780 in __libc_start_call_main (main=main@entry=0x5555558bc8 \u003cmain(int, char**)\u003e, argc=argc@entry=1,\r\n\u003e     argv=argv@entry=0x7ffffff3c8) at ../sysdeps/nptl/libc_start_call_main.h:58\r\n\u003e ```\r\n\u003e \r\n\u003e It appears we\u0027re asking for 274 GB of address space.\r\n\u003e \r\n\u003e The contents of registers before the call to mmap is:\r\n\u003e \r\n\u003e ```\r\n\u003e x0             0x0                 0\r\n\u003e x1             0x4000001000        274877911040\r\n\u003e x2             0x0                 0\r\n\u003e x3             0x22                34\r\n\u003e x4             0xffffffff          4294967295\r\n\u003e x5             0x0                 0\r\n\u003e x6             0x555575b9e0        366505998816\r\n\u003e x7             0xea97d327a30d6edb  -1542532180158353701\r\n\u003e x8             0x1000              4096\r\n\u003e x9             0x0                 0\r\n\u003e x10            0x0                 0\r\n\u003e x11            0x10000000          268435456\r\n\u003e x12            0x6e6f69737365732f  7957695011165139759\r\n\u003e x13            0x65706f63732e342d  7309464668147168301\r\n\u003e x14            0x1                 1\r\n\u003e x15            0x7ff7e7a210        549619999248\r\n\u003e x16            0x7f602df8a0        547074472096\r\n\u003e x17            0x7ff7e839c0        549620038080\r\n\u003e x18            0x12e000            1236992\r\n\u003e x19            0x4000000000        274877906944\r\n\u003e x20            0x2000              8192\r\n\u003e x21            0x7f602e9000        547074510848\r\n\u003e x22            0x1000              4096\r\n\u003e x23            0x7f602e9000        547074510848\r\n\u003e x24            0x0                 0\r\n\u003e x25            0x0                 0\r\n\u003e x26            0x7ff7ffe028        549621588008\r\n\u003e x27            0x55556eeb58        366505552728\r\n\u003e x28            0x0                 0\r\n\u003e ```\r\n\u003e \r\n\u003e So I think it matches what gdb showed in debug information as the `size` parameter to `GCToOSInterface::VirtualReserve` and this is the real number (not a case of bad debug info).\r\n\u003e \r\n\u003e @dotnet/gc is it expected that the GC would try to reserve such huge amount of memory? The raspberry Pi I\u0027m running this on has 8 GB of RAM and 32 GB of total storage (swap is a small fraction of that).\r\n\r\nI have updated the table and the repo on the issue as well, I can add that, when the native interface is invoked from c++ code, it works fine. So of course the issue is when multiple \"runtimes\" are running, one on the lib, and one from the invoking code. The issue is only arm64 , on x64 (linux and windows), it works fine.",
                                           "updatedAt":  "2023-11-30T15:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tV71F",
                                           "createdAt":  "2023-11-30T20:05:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@anoop331 you can work around this by configuring the garbage collector not to reserve insane amounts of address space. For example, setting the DOTNET_GCHeapHardLimitPercent=8 environment variable before starting the process fixes things for me. (See more at GC configuration options to set heap limits at https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector. You can also hardcode this at compile time by setting `\u003cItemGroup\u003e\u003cRuntimeHostConfigurationOption Include=\"System.GC.HeapHardLimitPercent\" Value=\"8\" /\u003e\u003c/ItemGroup\u003e` in the csproj)\r\n\r\n@anoop331 what machine are you running this on? Trying to see if both of us tried Raspberry Pi, or if this is a more general Arm64 Linux issue.",
                                           "updatedAt":  "2023-11-30T20:05:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tab5P",
                                           "createdAt":  "2023-12-01T08:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anoop331",
                                           "body":  "@MichalStrehovsky  Thanks will try out the work around. We are running on a custom built yocto distribution that runs on QEMU. So it seems like a general arm64 issue. It seems to work fine on x64 linux distros.",
                                           "updatedAt":  "2023-12-01T08:03:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5taco7",
                                           "createdAt":  "2023-12-01T08:06:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen .net8 AOT compiled linux-arm64 library interface is invoked using DllImport from  .net8 CLR code, on linux-arm64 environment, it crashes.\r\n\r\nThe code where this issue can be reproduced is listed here in the following repo.\r\n\r\nhttps://github.com/anoop331/net8aot\r\n\r\nThe AOT compilation can be done using the docker file in the repo.\r\n\r\n\r\nThe following table lists down the combinations where it works and it doesn\u0027t, all on linux-arm64 target (yocto running on QEMU arm64).\r\n\r\n\u003chtml xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\"\u003e\r\n\r\n\u003chead\u003e\r\n\r\n\u003cmeta name=ProgId content=Excel.Sheet\u003e\r\n\u003cmeta name=Generator content=\"Microsoft Excel 15\"\u003e\r\n\u003clink id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/a423918/AppData/Local/Temp/msohtmlclip1/01/clip.htm\"\u003e\r\n\u003clink rel=File-List\r\nhref=\"file:///C:/Users/a423918/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\"\u003e\r\n\u003cstyle\u003e\r\n\u003c!--table\r\n\t{mso-displayed-decimal-separator:\"\\,\";\r\n\tmso-displayed-thousand-separator:\" \";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:Calibri, sans-serif;\r\n\tmso-font-charset:0;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n.xl63\r\n\t{font-weight:700;\r\n\tborder:.5pt solid windowtext;\r\n\tbackground:#F2F2F2;\r\n\tmso-pattern:black none;}\r\n.xl64\r\n\t{border:.5pt solid windowtext;}\r\n.xl65\r\n\t{font-weight:700;\r\n\tborder-top:none;\r\n\tborder-right:.5pt solid windowtext;\r\n\tborder-bottom:none;\r\n\tborder-left:none;\r\n\tbackground:#F2F2F2;\r\n\tmso-pattern:black none;}\r\n--\u003e\r\n\u003c/style\u003e\r\n\u003c/head\u003e\r\n\r\n\u003cbody link=\"#0563C1\" vlink=\"#954F72\"\u003e\r\n\r\n\r\nInvoking   Env (linux-arm64) | Lib Compiled   Using | Status | Error on terminal\r\n-- | -- | -- | --\r\nnet7 CLR | net7 | Works |  \r\nnet7  AOT | net7 | works |  \r\nnet7 CLR | net8 | Error |  \r\nnet8 CLR | net7 | works |  \r\nnet8 CLR | net8 | Error | aborted\r\nnet8 AOT | net8 | Error | aborted\r\nnet7 AOT | net8 | Works |  \r\nc ++ | net8 | Works |  \r\nc ++ | net7 | Works |  \r\n\r\n\r\n\r\n\u003c/body\u003e\r\n\r\n\u003c/html\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eanoop331\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-01T08:06:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tadlm",
                                           "createdAt":  "2023-12-01T08:09:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Thank you for confirming! I\u0027m moving this to the GC area path and the GC team will need to take this from here.",
                                           "updatedAt":  "2023-12-01T08:09:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tagnD",
                                           "createdAt":  "2023-12-01T08:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "adding @janvorli as well since we have done some recent changes related to VirtualMemoryLimits. Would be interesting to run with those changes to check if there is a behavior difference here. ",
                                           "updatedAt":  "2023-12-01T08:19:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tjs62",
                                           "createdAt":  "2023-12-04T08:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anoop331",
                                           "body":  "@MichalStrehovsky  The fix you proposed worked,  both running with CLR mode and AOT compiled client code. I have updated my repo with the fix as well https://github.com/anoop331/net8aot. Thanks a lot.",
                                           "updatedAt":  "2023-12-04T08:40:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FYhAw",
                                           "createdAt":  "2024-07-19T00:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I am guessing manually configuring the `DOTNET_GCRegionRange` to be something smaller should be the preferred way to work around this issue. \r\n\r\n@anoop331, assume that is a satisfactory workaround for you and we can close this issue? ",
                                           "updatedAt":  "2024-07-19T00:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uRs0n",
                                           "createdAt":  "2025-05-31T01:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JinShil",
                                           "body":  "Burned by this bug...Again!  Please fix it.  Or, if you\u0027re not going to fix it, please add some useful output instead of just aborting.",
                                           "updatedAt":  "2025-05-31T04:21:47Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  ".net8 AOT compiled library targeting arm64 crashes when invoked using DllImport from .net8 code",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95191",
        "createdAt":  "2023-11-24T03:07:53Z",
        "number":  95191,
        "author":  "crollins7",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-15T15:43:45Z",
        "body":  "**Description**\r\nI had a .Net 6 app that would experience a very slow memory leak. Due to this behavior I set the app pool to automatically recycle every 2 hours.  I upgraded the app to .Net 7 with hopes that would resolve the issue and instead the memory leak exploded (14 Gb\u0027s/Hour).  When I would do a memory dump and analyze I noticed that almost all of the memory is listed as \"Free\". I recently upgraded the app to .Net 8 and the memory leak persists.\r\n\r\nFollowing @Maoni0\u0027s blog post https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21, I referenced clrgc.dll in the runtime config and the symptoms are significantly relieved which I believe indicates a regression in GC starting in .Net 7.\r\n\r\n**Configuration**\r\n- .Net 8\r\n- Windows Server 2016 14393.6351\r\n- x64\r\n- VM with 8x Core Xeon 4309Y and 32 Gb\u0027s of Ram\r\n\r\n**Regression**\r\nAs described above there was a slower memory leak originally on .Net 6 and then in .Net 7 and .Net 8 I experienced an insane regression.\r\n\r\n**Data**\r\nAdditional Stats gathered when I was on .Net 7 without clrgc.dll\r\n- GC committed bytes increases like crazy throughout the apps runtime.  \r\n- GC Fragmentation \u003e 95%\r\n- GC Heap Size seems relatively stable around 1 GB\r\n- The large fragmented memory blocks are all System.Byte[]\r\n\r\nThe Link Below has Top Level GC Traces and CPU Sample Traces both taken for 1 hour with and without clrgc.dll referenced.\r\nhttps://drive.google.com/file/d/1nJ8lROr4pYN4IQf4E4KoQDxBN0M5XdfA/view?usp=sharing\r\n\r\nThis highlights the performance impact experienced with and without clrgc.dll referenced in runtime settings.\r\n![image](https://github.com/dotnet/runtime/assets/1470259/bb2f20d9-f260-497e-b9bc-9452b8ce4396)\r\n\r\n**Analysis**\r\nI have no clue the relevant code that may cause this.  I am happy to do any additional testing that would be useful in helping to identify the cause.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiJaa7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5syMFz",
                                           "createdAt":  "2023-11-24T03:08:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Description**\r\nI had a .Net 6 app that would experience a very slow memory leak. Due to this behavior I set the app pool to automatically recycle every 2 hours.  I upgraded the app to .Net 7 with hopes that would resolve the issue and instead the memory leak exploded (14 Gb\u0027s/Minute).  When I would do a memory dump and analyze I noticed that almost all of the memory is listed as \"Free\". I recently upgraded the app to .Net 8 and the memory leak persists.\r\n\r\nFollowing @Maoni0\u0027s blog post https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21, I referenced clrgc.dll in the runtime config and the symptoms are significantly relieved which I believe indicates a regression in GC starting in .Net 7.\r\n\r\n**Configuration**\r\n- .Net 8\r\n- Windows Server 2016 14393.6351\r\n- x64\r\n- VM with 8x Core Xeon 4309Y and 32 Gb\u0027s of Ram\r\n\r\n**Regression**\r\nAs described above there was a slower memory leak originally on .Net 6 and then in .Net 7 and .Net 8 I experienced an insane regression.\r\n\r\n**Data**\r\nAdditional Stats gathered when I was on .Net 7 without clrgc.dll\r\n- GC committed bytes increases like crazy throughout the apps runtime.  \r\n- GC Fragmentation \u003e 95%\r\n- GC Heap Size seems relatively stable around 1 GB\r\n- The large fragmented memory blocks are all System.Byte[]\r\n\r\nThe Link Below has Top Level GC Traces and CPU Sample Traces both taken for 1 hour with and without clrgc.dll referenced.\r\nhttps://drive.google.com/file/d/1nJ8lROr4pYN4IQf4E4KoQDxBN0M5XdfA/view?usp=sharing\r\n\r\nThis highlights the performance impact experienced with and without clrgc.dll referenced in runtime settings.\r\n![image](https://github.com/dotnet/runtime/assets/1470259/bb2f20d9-f260-497e-b9bc-9452b8ce4396)\r\n\r\n**Analysis**\r\nI have no clue the relevant code that may cause this.  I am happy to do any additional testing that would be useful in helping to identify the cause.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecrollins7\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-24T03:08:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5syfHn",
                                           "createdAt":  "2023-11-24T05:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "Just curious: what was the heap fragmentation with .Net6 / clrgc?\n\nAlso, does memory leak result in oom?  Or it\u0027s just \"GC takes more memory because it can\"?  If last then have you tried explicit memory limits?",
                                           "updatedAt":  "2023-11-24T05:42:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s0OmI",
                                           "createdAt":  "2023-11-24T12:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "Unfortunately when I was on .Net 6 I did not collect those stats before going to .Net 7.  That was also 6 months ago so I can\u0027t easily recreate it.  I can definitively say the memory leak exploded when I went to .Net 7.\r\n\r\nThe memory leak will result in OOM which is why I have IIS recycle the app pool on a 2 hour schedule.  Below is the same screenshot of above with an additional 10 minutes worth of time showing that when I do an app pool recycle I free up the ballooned ram.\r\n\r\nI have not tried an explicit memory limit.  clrgc.dll being referenced in runtime settings has been my workaround for the past 2 months as it provides significant relief.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/1470259/9cd918c9-a79d-4c07-b7f6-681ee222e750)\r\n",
                                           "updatedAt":  "2023-11-24T12:49:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s0dNs",
                                           "createdAt":  "2023-11-24T13:38:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "I wonder what your app does. It\u0027s quite curious that your gc handle count grows indefinitely. \r\nNet8 gc is doing gen1 collections more aggressively but it\u0027s quite obvous that gen2 is the problem here as it grows really fast and it\u0027s survival rate is almost 100%. Do you have caches that hold those objects forever?",
                                           "updatedAt":  "2023-11-24T13:38:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s17_l",
                                           "createdAt":  "2023-11-24T20:53:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "The application is an MVC web app utilizing EF Core 8.  There is some usage of minimal API and there are also hangfire jobs (both recurring and background enqueued) that run from the same web app.  There is light usage of Memory Cache within the app.\r\n\r\nThe top level GC traces and CPU sample traces in the opening post may be helpful to someone who has a deeper understanding of their interpretation then I do.",
                                           "updatedAt":  "2023-11-25T00:18:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t47xG",
                                           "createdAt":  "2023-12-06T20:29:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Which process is the process of interest in the trace?",
                                           "updatedAt":  "2023-12-06T20:29:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t_jLb",
                                           "createdAt":  "2023-12-07T13:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "\u003e Which process is the process of interest in the trace?\r\n\r\nFor the traces with clrgc.dll enabled the PID is 6108.  For the traces without PID enabled the PID is 1700.",
                                           "updatedAt":  "2023-12-07T13:49:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vLRom",
                                           "createdAt":  "2023-12-20T22:27:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODohDuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crollins7",
                                                                               "createdAt":  "2023-12-21T13:08:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mzros",
                                                                               "createdAt":  "2024-01-08T14:18:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MHofmann-rossmanith",
                                                                               "createdAt":  "2024-01-08T14:22:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rombersoft",
                                                                               "createdAt":  "2024-04-10T21:19:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "onurbiyik",
                                                                               "createdAt":  "2024-07-05T12:58:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "markoweb2",
                                           "body":  "I believe I just wasted quite a few hours with the exact same issue. After upgrading to .NET 8, I noticed my app did not release memory after a large data export task like it used to with .NET 6. Spent a lot of hours going over my code, maybe I made a change that caused a leak or something....\r\nFinally I tried a simple proof of concept console application and confirmed that it is indeed a GC regression that was introduced with .NET 7.\r\n\r\nHere is a super simple console application:\r\n```\r\npublic static void Main(string[] args)\r\n{\r\n    var list = new List\u003cstring\u003e();\r\n\r\n    for (int i = 0; i \u003c 20000000; i++)\r\n    {\r\n        list.Add(i.ToString());\r\n    }\r\n\r\n    Console.WriteLine(\"done\");\r\n    list.Clear();\r\n    list = null;\r\n    GC.Collect();\r\n\r\n    Console.ReadLine();\r\n}\r\n```\r\n\r\nHere is what the memory usage is supposed to look like with .NET 6:\r\n![image](https://github.com/dotnet/runtime/assets/95127525/b4fb0355-ff9b-4b01-b9f0-c4769fddd3f6)\r\n\r\nAnd here is the memory usage with .NET 7/8:\r\n![image](https://github.com/dotnet/runtime/assets/95127525/101c3761-47cd-4d60-8034-2239efa2ef4f)\r\n\r\n(this is all in release mode, you can simply change the Target Framework, recompile and see immediate results)\r\nThe memory does not get released no matter how long you wait or how many GC.Collect() calls you do.\r\n\r\nIf I output GC.GetTotalMemory(false) before and after the GC.Collect(), then it is clear that the GC does free up the memory, but it would appear that it doesn\u0027t allow the OS to actually reclaim the memory from the process.\r\n![image](https://github.com/dotnet/runtime/assets/95127525/4c36572d-4b03-445e-956f-9caa2d5eb962)\r\n\r\nPlease fix this regression!",
                                           "updatedAt":  "2023-12-20T22:27:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vPDrJ",
                                           "createdAt":  "2023-12-21T13:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "Great find @markoweb2! I just tested your sample code with .net 6, .net 7, and .net 8 and the results are that \u003e .Net 6 does not fully release the memory. I suspect the root cause affects your sample as well as my production code.\r\n\r\nI am very interested to test when there is a fix.",
                                           "updatedAt":  "2023-12-21T13:12:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v8u5F",
                                           "createdAt":  "2024-01-05T06:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRbefw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crollins7",
                                                                               "createdAt":  "2024-01-05T14:00:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "theolivenbaum",
                                                                               "createdAt":  "2024-01-06T03:28:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "apologies for the delay. and really sorry this is causing problems😥 I just got back from vacation and took a look at the simple repro that @markoweb2 provided. I haven\u0027t looked at the traces @crollins7 provided - I\u0027ll check with @cshung if he\u0027s looked at them tomorrow. I\u0027ll give an update on that.\r\n\r\nwith @markoweb2\u0027s repro I\u0027m seeing with segments (what GC uses in 6.0) after the induced GC the committed size for the process is ~40mb whereas with regions (what GC uses in 7.0+) it\u0027s ~800mb. it\u0027s worth pointing out that if you don\u0027t do this induced GC, the committed sizes are very similar. so I should ask, are you inducing GCs in your production scenario? if so this would explain the difference otherwise it may not.\r\n\r\nwhat causes this big difference after the induced GC has to do with the fact regions does more management of the memory it\u0027s already got than segments. with segments, especialy with segments in LOH, if they are empty, we just decommit the whole thing whereas regions would hold onto them and decide if we should decommit some, all or none. and the way it decides this is by looking at various factors, most predominantly the allocation budget which generally indicates how much you\u0027d be allocating before a GC is done to collect it. it makes sense to keep so we don\u0027t need to decommit it and have to re-commit it. \r\n\r\nthe more equivalent thing to do in 8.0 is to induce a GC with the [GCCollectionMode.Aggressive](https://learn.microsoft.com/en-us/dotnet/api/system.gccollectionmode?view=net-8.0) mode. however I just discovered a bug that causes part of what GC retains to not be returned which I\u0027m fixing via [this PR](https://github.com/dotnet/runtime/pull/96513). without the fix I\u0027m seeing ~100mb, with the fix it\u0027s ~10mb. less than with segments because this is a mode that you use to tell the GC you will not be making allocations for a while so GC is letting go everything it can let go (barring the bug). so \r\nI\u0027m not suggesting that you replace everywhere you call `GC.Collect()` with `GC.Collect (2, GCCollectionMode.Aggressive)`. however, it does make me think we should at least make `GC.Collect()` behavior similar for regions as we did with segments.\r\n",
                                           "updatedAt":  "2024-01-05T06:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v-v9F",
                                           "createdAt":  "2024-01-05T14:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "Thank you for providing insight into what is happening under the hood as well as the PR you submitted.\r\n\r\nI did review my code, and I can confirm that I do not call GC.Collect anywhere.",
                                           "updatedAt":  "2024-01-05T14:02:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wBQ_d",
                                           "createdAt":  "2024-01-05T23:33:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRtDJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "theolivenbaum",
                                                                               "createdAt":  "2024-01-06T03:27:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "crollins7",
                                                                               "createdAt":  "2024-01-06T14:42:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2024-01-09T06:06:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I just took a brief look at the traces you provided (thanks so much for collecting these!) and I have a guess what\u0027s causing what you saw. most likely it has to do with pinning. there\u0027s a lot of pinning going on and there\u0027s a known problem with regions for this case that we knew from our internal testing but I just haven\u0027t had time to fix. I\u0027ll look more in detail to confirm if that\u0027s the case (and obviously provide a fix if that is indeed the case). meanwhile, if you wouldn\u0027t mind collecting a trace that shows where the pinning comes from, that\u0027d be great! you could use this cmdline -\r\n\r\nperfview /nogui /KernelEvents=Process+Thread+ImageLoad /ClrEvents:GC+Stack+GCHandle /clrEventLevel=Informational /MaxCollectSec:1800 /BufferSize:3000 /CircularMB:3000 collect\r\n",
                                           "updatedAt":  "2024-01-05T23:33:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wCm-1",
                                           "createdAt":  "2024-01-06T15:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "Sounds like you are hot on the trail!  I removed clrgc.dll from my runtimeconfig.json, recycled the app pool, and then ran the trace as requested.  Link is below and PID is 536.\r\n\r\nhttps://drive.google.com/file/d/1zkOFvFy7ImPUCImLm8S5g7-_1yL4pWn5/view?usp=sharing",
                                           "updatedAt":  "2024-01-06T15:39:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wM3bh",
                                           "createdAt":  "2024-01-09T05:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "almost all of the pinning is from this stack -\r\n\r\n```\r\n         coreclr!MarshalNative::GCHandleInternalAlloc\r\n          system.private.corelib.il!Overlapped.AllocateNativeOverlapped\r\n           system.io.filesystem.watcher.il!FileSystemWatcher.StartRaisingEvents\r\n            microsoft.extensions.fileproviders.physical.il!PhysicalFilesWatcher.TryEnableFileSystemWatcher\r\n             microsoft.extensions.fileproviders.physical.il!PhysicalFileProvider.Watch\r\n              microsoft.extensions.configuration.il!ConfigurationBuilder.Build\r\n               data!SJRContext.OnConfiguring\r\n                microsoft.entityframeworkcore!DbContext.get_ContextServices\r\n                 microsoft.entityframeworkcore!Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1[System.__Canon].get_EntityType()\r\n                 microsoft.entityframeworkcore!DbContext.get_DbContextDependencies\r\n```\r\n@stephentoub, any idea if this is avoidable?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-01-09T05:07:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wPTLF",
                                           "createdAt":  "2024-01-09T13:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "On Windows, FileSystemWatcher creates and pins a buffer when it\u0027s started. If that pinning is causing a problem, that suggests you\u0027re creating lots of FileSystemWatchers and starting/stopping them frequently?  There are things we could do in FileSystemWatcher to tweak this a bit, but I\u0027d first want to understand and address the usage, as from the stack above I\u0027m wondering if the transient nature of these is actually expected.",
                                           "updatedAt":  "2024-01-09T13:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wRij3",
                                           "createdAt":  "2024-01-09T19:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "@stephentoub , I just searched our entire solution for \"FileSystemWatcher\" and came up empty so its not coming directly from our code. It must be part of some other compiled dependency.\r\n\r\nWe have quite a few nuget packages, however the most notable stuff being utilized in the app are:\r\n\r\n- Hangfire\r\n- ITextSharp\r\n- EF Core\r\n- Puppeteersharp\r\n- Signal R\r\n- Twilio\r\n\r\nAny thoughts on how to identify the source without cutting code to determine the cause?",
                                           "updatedAt":  "2024-01-09T19:23:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wXoU_",
                                           "createdAt":  "2024-01-10T17:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Based purely on the call stack in https://github.com/dotnet/runtime/issues/95191#issuecomment-1882420961, it\u0027s most likely from one of:\r\nhttps://github.com/dotnet/runtime/blob/e0ecb3a6af984e12f2ba67e63bf9eff9f09de47c/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationProvider.cs#L35\r\nhttps://github.com/dotnet/aspnetcore/blob/c53f7e474ba80124fb9134ebf23d1d626a19b458/src/Configuration.KeyPerFile/src/KeyPerFileConfigurationProvider.cs#L32\r\nor something of a similar ilk.\r\n\r\n@Maoni0, you mentioned you see a lot of pinning from here. Is it all rooted?  My guess would be that something is triggering a bunch of configuration changes, leading to new watchers being created frequently, leading to new buffers getting pinned.  That\u0027s just a guess, though.\r\n",
                                           "updatedAt":  "2024-01-10T17:00:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wtJLt",
                                           "createdAt":  "2024-01-14T08:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "sorry, GH didn\u0027t give me notification that there were new comments after my last comment so I didn\u0027t know folks already responded till my teammates told me.\r\n\r\n\u003e @Maoni0, you mentioned you see a lot of pinning from here. Is it all rooted?\r\n\r\n@stephentoub, yes, GC is observing new pinned objects getting created. for example, these are the # of pinned objects GC saw between GC#498 and GC#528 - \r\n\r\nGC Index | Pause Start | Trigger Reason | Gen | Promotion | Pinned Obj\r\n-- | -- | -- | -- | -- | --\r\n498 | 1,090,432.99 | AllocSmall | 1N | yes | 515\r\n499 | 1,090,709.72 | AllocSmall | 1N | no | 223\r\n500 | 1,090,926.81 | AllocSmall | 1N | no | 235\r\n501 | 1,091,137.96 | AllocSmall | 1N | no | 247\r\n502 | 1,091,462.55 | AllocSmall | 1N | no | 258\r\n503 | 1,091,674.78 | AllocSmall | 1N | no | 268\r\n504 | 1,091,886.47 | AllocSmall | 1N | no | 279\r\n505 | 1,092,106.27 | AllocSmall | 1N | no | 289\r\n506 | 1,092,311.50 | AllocSmall | 1N | no | 301\r\n507 | 1,092,521.42 | AllocSmall | 1N | no | 312\r\n508 | 1,092,723.39 | AllocSmall | 1N | no | 322\r\n509 | 1,092,946.16 | AllocSmall | 1N | no | 333\r\n510 | 1,093,162.04 | AllocSmall | 1N | no | 343\r\n511 | 1,093,377.63 | AllocSmall | 1N | no | 354\r\n512 | 1,093,580.60 | AllocSmall | 1N | no | 364\r\n513 | 1,093,786.75 | AllocSmall | 1N | no | 375\r\n514 | 1,093,990.06 | AllocSmall | 1N | no | 385\r\n515 | 1,094,199.88 | AllocSmall | 1N | no | 395\r\n516 | 1,094,415.38 | AllocSmall | 1N | no | 406\r\n517 | 1,094,624.44 | AllocSmall | 1N | no | 416\r\n518 | 1,094,844.35 | AllocSmall | 1N | no | 427\r\n519 | 1,095,050.95 | AllocSmall | 1N | no | 437\r\n520 | 1,095,279.03 | AllocSmall | 1N | no | 447\r\n521 | 1,095,480.26 | AllocSmall | 1N | no | 458\r\n522 | 1,095,699.76 | AllocSmall | 1N | no | 468\r\n523 | 1,095,945.71 | AllocSmall | 1N | yes | 479\r\n524 | 1,096,212.26 | AllocSmall | 1N | yes | 489\r\n525 | 1,096,449.88 | AllocSmall | 1N | no | 192\r\n526 | 1,096,678.73 | AllocSmall | 1N | no | 202\r\n527 | 1,096,891.55 | AllocSmall | 1N | no | 213\r\n528 | 1,097,109.60 | AllocSmall | 1N | no | 223\r\n\r\n\r\nI added a Promotion column denoting if that GC promoted. not promoting means all objects that survived a generation will stay in that generation. so right after a promoting GC (GC#498, which observed 515 pinned objects), GC#499 observed much fewer - 223. all GCs are non promoting but the # of pinned objects kept increasing which means new pinned objects kept getting created. till a couple of promoting GCs happened (GC#523 and #524), then we see this pattern again. \r\n\r\nthese file watchers are only created if it something changed? could we be detecting changes that are not there? totally guessing here. what would you need to diagnose this?\r\n",
                                           "updatedAt":  "2024-01-14T08:23:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xMlKr",
                                           "createdAt":  "2024-01-18T20:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "We regularly dependency inject IConfiguration for the purpose of utilizing the \"GetSection\" method.  This can be seen throughout the application including in middleware.\r\n\r\nI am not finding any direct usage of \"FileConfigurationProvider\".  If there is anything additional you guys need just let me know.",
                                           "updatedAt":  "2024-01-18T20:00:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xhC8r",
                                           "createdAt":  "2024-01-22T17:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@roji, the above stack has:\r\n```\r\n             microsoft.extensions.fileproviders.physical.il!PhysicalFileProvider.Watch\r\n              microsoft.extensions.configuration.il!ConfigurationBuilder.Build\r\n               data!SJRContext.OnConfiguring\r\n                microsoft.entityframeworkcore!DbContext.get_ContextServices\r\n                 microsoft.entityframeworkcore!Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1[System.__Canon].get_EntityType()\r\n                 microsoft.entityframeworkcore!DbContext.get_DbContextDependencies\r\n```\r\nDo you know what would cause DbContextDependencies to frequently trigger configuration changes?",
                                           "updatedAt":  "2024-01-22T17:36:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x5Nxq",
                                           "createdAt":  "2024-01-25T19:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUIZCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-01-25T20:30:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "On EF\u0027s role here... Every time a new EF DbContext gets instantiated, the OnConfiguring method on it gets invoked - that\u0027s by design (different DbContext instances may have different EF configuration etc.). The odd thing here is that FileSystemWatcher is being invoked/started - by user code- from inside OnConfiguring. I suspect that the user assumption here is that OnConfiguring is called only once at program startup, and so some ConfigurationBuilder-related init code was placed there - but that assumption is wrong.\r\n\r\n@crollins7 can you confirm what exactly you have in the OnConfiguring method of your SJRContext type? Is there anything in there which could be calling into ConfigurationBuilder config/init, or similar?",
                                           "updatedAt":  "2024-01-25T19:12:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x5pHp",
                                           "createdAt":  "2024-01-25T20:19:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "Here is a copy of our SJRContext.OnConfiguring method @roji.  Nothing screams out to me looking at this but I hope it helps.\r\n\r\n```\r\nprotected override void OnConfiguring(DbContextOptionsBuilder options)\r\n{\r\n    options.UseLazyLoadingProxies()\r\n           .ConfigureWarnings(x=\u003ex.Ignore(SqlServerEventId.DecimalTypeKeyWarning))\r\n           .ConfigureWarnings(x=\u003ex.Ignore(RelationalEventId.BoolWithDefaultWarning))\r\n        .UseSqlServer(AppSettingsConfig.Configuration.GetConnectionString(\"SJRContext\"),\r\n            sqlServerOptionsAction: sqlOptions =\u003e\r\n            {\r\n                sqlOptions.EnableRetryOnFailure(\r\n                    maxRetryCount: 10,\r\n                    maxRetryDelay: System.TimeSpan.FromSeconds(30),\r\n                    errorNumbersToAdd: null);\r\n                sqlOptions.CommandTimeout((int)TimeSpan.FromMinutes(5).TotalSeconds);\r\n            });\r\n    base.OnConfiguring(options);\r\n}\r\n",
                                           "updatedAt":  "2024-01-25T20:19:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x5sbt",
                                           "createdAt":  "2024-01-25T20:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "What\u0027s \"AppSettingsConfig\"? That isn\u0027t familiar to me as a standard package, is that maybe calling into Microsoft.Extensions.Configuration and triggering this whole thing?\r\n\r\nAt least as an experiment, I\u0027d advise extracting that out to some place in the program initialization, and then accessing the resulting connection string from OnConfiguring. If the memory issue disappears at that point, at least we know for sure where it came from.",
                                           "updatedAt":  "2024-01-25T20:28:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x51gx",
                                           "createdAt":  "2024-01-25T20:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "That does call Microsoft.Extensions.Configuration to grab our connection string from our appsettings.json.  We did this so as not to hard code our connection string into our context.  I will try removing it and replacing it with a hard coded connection string and see if the memory issue persists.  I will report back after I have tested.",
                                           "updatedAt":  "2024-01-25T20:59:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yAgNt",
                                           "createdAt":  "2024-01-26T21:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "@roji, you were wondering what the AppSettingsConfig class did so I pasted it below.  Ultimately, we were using that to grab different appsettings.json depending on the the configuration the application was running in.  When I removed the use of this class and hardcoded a connection string in our onconfiguring override, initial testing is indicating it resolves the memory leak.\r\n\r\nRight now we are working on eliminating any instantiation of SJRContext in the app and relying fully upon dependency injection.  This should allow us to be able to get rid of the OnConfiguring override as well as the use of the AppSettingsConfig class.\r\n\r\nIt appears we shot ourselves in the foot.\r\n\r\n```\r\nnamespace Data.EntityHelpers;\r\npublic static class AppSettingsConfig\r\n{\r\n    public static IConfiguration Configuration\r\n    {\r\n        get\r\n        {\r\n            string environmentName;\r\n#if RELEASE\r\nenvironmentName = \"production\";\r\n#elif BETA\r\nenvironmentName = \"beta\";\r\n#else\r\n            environmentName = \"Development\";\r\n#endif\r\n            return new ConfigurationBuilder()\r\n               .SetBasePath(Directory.GetCurrentDirectory())\r\n               .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\r\n               .AddJsonFile($\"appsettings.{environmentName.ToLower()}.json\", optional: false, true)\r\n               .Build();\r\n        }\r\n    }\r\n}",
                                           "updatedAt":  "2024-01-26T21:43:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yAoLt",
                                           "createdAt":  "2024-01-26T22:16:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Thanks for the confirmation @crollins7.\r\n\r\n@stephentoub and others, regardless of EF the remaining question is still whether repeated execution of the Configuration property above should result in the described behavior (with OOM etc.)...",
                                           "updatedAt":  "2024-01-26T22:16:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yUacT",
                                           "createdAt":  "2024-01-30T21:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Danielcc0907",
                                           "body":  "@crollins7 do you use DbContext pooling by any chance?",
                                           "updatedAt":  "2024-01-30T21:49:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yUfBW",
                                           "createdAt":  "2024-01-30T22:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Danielcc0907 if anything, I\u0027d expect DbContext pooling to mitigate this, since the same DbContext instances would get pooled and reused, meaning that OnConfigured() wouldn\u0027t keep getting called.",
                                           "updatedAt":  "2024-01-30T22:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yUgYU",
                                           "createdAt":  "2024-01-30T22:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "@Danielcc0907 , we do not use DBContext pooling today.  We are currently working on eliminating usage of non dependency injected contexts so that we can turn on DBContext Pooling.  I expect we will have that complete within a week.",
                                           "updatedAt":  "2024-01-30T22:08:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zD_V0",
                                           "createdAt":  "2024-02-06T17:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "We created a new version of our site with the following changes:\r\n\r\n- We fully utilized Dependency Injection for our EF Context and removed our Overriden OnConfiguring method\r\n- We setup DBContext Pooling\r\n- We removed the 2 hour app pool recycle and set it to the default 29 hours\r\n- We removed the usage of clrgc.dll in our runtimesettings\r\n\r\nWe then deployed and monitored the results.  This resulted in the app consuming 21 GB\u0027s of steadily climbing memory over 29 hours which is significantly better than the 14 GB\u0027s/Hr rate we were experiencing.  From the graph it appears to still have some memory leak but it is manageable without clrgc.dll and an aggressive app pool recycle time period which was the purpose of this issue.\r\n\r\nThank you everyone for your help.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/1470259/56694310-1ab1-4a9c-bcd0-52596e60f92a)\r\n",
                                           "updatedAt":  "2024-02-06T17:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zFwQf",
                                           "createdAt":  "2024-02-06T22:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@crollins7 thanks for confirming.\r\n\r\n\u003e The odd thing here is that FileSystemWatcher is being invoked/started - by user code- from inside OnConfiguring.\r\n\r\nAlthough I\u0027m assuming FileSystemWatcher isn\u0027t meant to be instantiated repeatedly as it was in this case, we may still want to make sure there isn\u0027t an actual problem here - who\u0027d be the right person for this @stephentoub?",
                                           "updatedAt":  "2024-02-06T22:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zJFcp",
                                           "createdAt":  "2024-02-07T10:39:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdwJww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rombersoft",
                                                                               "createdAt":  "2024-04-10T21:58:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "@crollins7 I guess you can share a gctrace again seeing you still have a memory leak. Who knows, this might be another thing like that or might be something else. Worth a look.",
                                           "updatedAt":  "2024-02-07T10:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zJZB1",
                                           "createdAt":  "2024-02-07T11:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "It\u0027s important to distinguish between an actual memory leak - which results in an OutOfMemoryException, implying that the leaked memory is still referenced/rooted - and simply allocated memory not getting freed, which could be a result of the GC simply not kicking in yet. So I\u0027d be interested in knowing if you\u0027re still seeing an OOM.",
                                           "updatedAt":  "2024-02-07T11:26:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zdPFt",
                                           "createdAt":  "2024-02-10T15:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crollins7",
                                           "body":  "I doubled the app pools recycling time to 58 hours and observed. I did not experience an OOM exception and generally when memory approached 85-90% of the machines limit, GC would contribute a substantial cleanup of 30-50% of the app\u0027s utilized memory.  I believe everything is stable and I consider my issue resolved.  I will leave the issue in an open state until @roji  or @stephentoub finish any review.\r\n\r\nThank you again everyone.",
                                           "updatedAt":  "2024-02-10T15:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zdRxL",
                                           "createdAt":  "2024-02-10T16:19:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODauZ0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "GimmeDaKitty",
                                                                               "createdAt":  "2024-03-15T14:49:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "Looking at this again, FileSystemWatcher is disposable and overrides Dispose(bool). I\u0027m assuming that the above code - which was continuously doing ConfigurationBuilder.Build() - was probably causing FileSystemWatcher to get instantiated each time but it was never disposed, possibly leading to the leak; if so, what was happening here seems clear.\r\n\r\nThough the IConfigurationRoot returned by Build() isn\u0027t IDisposable, so I\u0027m wondering how one would go about disposing the FileSystemWatcher if one wanted to rebuild the configuration etc (but I know very little about M.E.Configuration).",
                                           "updatedAt":  "2024-02-10T16:19:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B5Pfu",
                                           "createdAt":  "2024-06-19T18:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "piju3",
                                           "body":  "There seem to be two issues in this thread:\r\n\r\n1. A reference leak in EF core\r\n2. .NET 7 + 8 not releasing memory even after it\u0027s garbage collected\r\n\r\nYou can see the second issue with the simple code that @markoweb2 posted. The memory usage stays high even after clearing the list, but it does get internally reused for new objects, and eventually reclaimed if you open another process that also fills up memory.\r\nSo the team might not consider that a bug, but I can see how most people would consider that undesirable behavior.\r\n\r\nCalling GC.Collect with GCCollectionMode.Aggressive seems to clear the memory, but in .NET 8 it still leaves some memory allocated (between 1 and 2GB in some tests I did). This has been fixed in the commit by @Maoni0 which has been merged into .NET 9, so you\u0027ll just have to wait for that.\r\n\r\nThere is a [Retain VM setting](https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#retain-vm) which I would initially have expected would control this behavior, but it appears to currently not have any effect (it does talk about \"segments\" and not regions), in fact it\u0027s already set to \"false\" by default. Maybe you could fix both things by having that setting control the behavior?",
                                           "updatedAt":  "2024-06-19T18:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsoR3",
                                           "createdAt":  "2024-06-26T22:42:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Doesn\u0027t look like this issue is actionable. Can we close? ",
                                           "updatedAt":  "2024-06-26T22:42:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxOgp",
                                           "createdAt":  "2024-06-27T06:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "There\u0027s in theory still my question [here](https://github.com/dotnet/runtime/issues/95191#issuecomment-1937054795), which may be relevant for the owner of M.E.Configuration. All the rest seems resolved.",
                                           "updatedAt":  "2024-06-27T06:59:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ilprs",
                                           "createdAt":  "2024-08-15T15:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ProfiseeJoshma",
                                           "body":  "I believe #86456 covers that remaining question.",
                                           "updatedAt":  "2024-08-15T15:43:43Z"
                                       }
                                   ],
                         "totalCount":  39
                     },
        "title":  ".Net 7 + 8 Garbage Collection Regression Issue",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95944",
        "createdAt":  "2023-12-13T03:42:08Z",
        "number":  95944,
        "author":  "skidrow406",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T21:08:10Z",
        "body":  " I have the following code: (.NET 6.0)\r\n```\r\n\r\nvar list = new List\u003cTestModel\u003e();\r\nfor(var i = 0; i \u003c count; i++)  // count = 1,000,000\r\n\tlist.Add(new TestModel());\r\nlist.Clear();\r\nlist = null;\r\n\r\n```\r\nWhy is Sdk=\"Microsoft.NET.Sdk.Web\" memory not released after the above code is finished running? But on Sdk=\"Microsoft.NET.Sdk.Worker\" the memory is released immediately after (TestModel is a class)\r\nIn the Web project the above code is run in a controller action and in the Worker project it is run in a BackgroundService\r\n(memory monitor by Task Manger - Processes)\r\nThanks\r\n\r\n```\r\npublic class TestModel\r\n{\r\n    private static Random random = new Random();\r\n    public Guid Id { get; set; }\r\n    public double Number { get; set; }\r\n    public DateTime CreatedAt { get; set; }\r\n\r\n    public TestModel()\r\n    {\r\n        Id = Guid.NewGuid();\r\n        Number = random.NextDouble() + random.NextInt64();\r\n        CreatedAt = DateTime.Now;\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObsNIwA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5udnQ_",
                                           "createdAt":  "2023-12-13T04:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPZmNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "skidrow406",
                                                                               "createdAt":  "2023-12-13T06:50:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "GC is not running immediately for any object. It has its own heuristic and policy to decide when to collect objects. It behaves well if the objects are *eventually* collected during long running.\r\n\r\nEven if objects are collected, GC may choose not to return the memory to OS aggressively. It can reserve it for future uses.\r\n\r\nDifferent SDK templates may provide different policies for GC. You can inspect the values in `GCSettings` and `GC.GetConfigurationVariables()`\r\n\r\nIn most cases, the heuristic of GC works fine. If there\u0027s a case when a huge number of objects are released, you may invoke `GC.Collect` to inform it.",
                                           "updatedAt":  "2023-12-13T04:37:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ueApM",
                                           "createdAt":  "2023-12-13T06:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skidrow406",
                                           "body":  "Every time I run the code the memory increases. I have invoke GC.Collect() but the memory is still not released. Will that affect other programs on my server?",
                                           "updatedAt":  "2023-12-13T06:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ueztS",
                                           "createdAt":  "2023-12-13T09:36:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "You can inspect memory of the process with more detailed tools. GC may choose to reserve the memory for future use, instead of returning it to OS.\r\n\r\nAs long as there\u0027s an upper limit in an infinite loop, it should be fine. The upper limit will be dynamically adjusted in actual workload.",
                                           "updatedAt":  "2023-12-13T09:36:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uiHHy",
                                           "createdAt":  "2023-12-13T17:42:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPr-SA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "skidrow406",
                                                                               "createdAt":  "2023-12-15T05:47:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Suchiman",
                                           "body":  "@skidrow406 try using \r\n```csproj\r\n\u003cPropertyGroup\u003e\r\n  \u003cServerGarbageCollection\u003efalse\u003c/ServerGarbageCollection\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\nin your csproj and see if that makes a difference for you.",
                                           "updatedAt":  "2023-12-13T17:42:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ukkmA",
                                           "createdAt":  "2023-12-14T03:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPr-Sw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "skidrow406",
                                                                               "createdAt":  "2023-12-15T05:47:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Yes, web project uses server GC by default, which has different policies comparing with workstation GC.",
                                           "updatedAt":  "2023-12-14T03:46:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uw0jA",
                                           "createdAt":  "2023-12-15T18:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n I have the following code: (.NET 6.0)\r\n```\r\n\r\nvar list = new List\u003cTestModel\u003e();\r\nfor(var i = 0; i \u003c count; i++)  // count = 1,000,000\r\n\tlist.Add(new TestModel());\r\nlist.Clear();\r\nlist = null;\r\n\r\n```\r\nWhy is Sdk=\"Microsoft.NET.Sdk.Web\" memory not released after the above code is finished running? But on Sdk=\"Microsoft.NET.Sdk.Worker\" the memory is released immediately after (TestModel is a class)\r\nIn the Web project the above code is run in a controller action and in the Worker project it is run in a BackgroundService\r\n(memory monitor by Task Manger - Processes)\r\nThanks\r\n\r\n```\r\npublic class TestModel\r\n{\r\n    private static Random random = new Random();\r\n    public Guid Id { get; set; }\r\n    public double Number { get; set; }\r\n    public DateTime CreatedAt { get; set; }\r\n\r\n    public TestModel()\r\n    {\r\n        Id = Guid.NewGuid();\r\n        Number = random.NextDouble() + random.NextInt64();\r\n        CreatedAt = DateTime.Now;\r\n    }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eskidrow406\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `tenet-performance`, `area-GC-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-15T18:06:04Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Web project does not release memory",
        "labels":  [
                       "question",
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96091",
        "createdAt":  "2023-12-16T12:47:31Z",
        "number":  96091,
        "author":  "denislohachev1991",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8krNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bykiev",
                                            "createdAt":  "2023-12-17T16:49:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-11-12T03:34:02Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-03T17:22:43Z",
        "body":  "I encountered a very serious problem when switching from Windows to Linux (Ubuntu). The problem is very high memory consumption. I first noticed an increase in memory consumption on Windows when moving from .Net Framework to .Net Core 5. But then this was not much of a problem and was acceptable since the increase was not large. The .Net Framework application consumed approximately 150-200 megabytes and the .Net Core 5 application consumed approximately 250-350 megabytes. But when I switched to Linux, the consumption increased many times over. To make the transition, I switched to .Net 6. After running the application on Linux, I noticed that memory grows over time and does not decrease; with long-term operation of the application, memory consumption can reach 6-8 gigabytes. After doing a memory dump, I noticed that almost 90% was taken up by unmanagement memory. There are about 50 instances of this application running on my server, and they quickly consume all the memory, which leads to application crashes. I have no idea why this is happening, it seems that Garbage collection is not freeing the reserved memory. For information, on Windows under IIS the application worked in 32-bit on Linux in 64-bit.\r\n\r\nI tried changing Garbage collection settings such as (DOTNET_GCConserveMemory and DOTNET_gcServer), but it didn\u0027t help.\r\n\r\nMy application is essentially a CMS hosted using nginx. Basically this is a site using liquid (https://mtirion.medium.com/using-liquid-for-text-base-templates-with-net-80ae503fa635) to parse content. It also runs several hosted services that periodically run tasks such as retrieving data from the database to send email if any, checking for changes in data in a file. Even when no requests are sent to my site (for example at night), memory usage does not decrease. I have done a few things like getting memory dump, dotnet-gcdump, dottrace and dotnetdump but I am not very knowledgeable about it and can provide as per need.\r\n![Dump](https://github.com/dotnet/runtime/assets/44192808/3ef0282b-6f0d-48e4-86c8-b315b74d07f2)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqcwIiQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5u0qY1",
                                           "createdAt":  "2023-12-17T22:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI encountered a very serious problem when switching from Windows to Linux (Ubuntu). The problem is very high memory consumption. I first noticed an increase in memory consumption on Windows when moving from .Net Framework to .Net Core 5. But then this was not much of a problem and was acceptable since the increase was not large. The .Net Framework application consumed approximately 150-200 megabytes and the .Net Core 5 application consumed approximately 250-350 megabytes. But when I switched to Linux, the consumption increased many times over. To make the transition, I switched to .Net 6. After running the application on Linux, I noticed that memory grows over time and does not decrease; with long-term operation of the application, memory consumption can reach 6-8 gigabytes. After doing a memory dump, I noticed that almost 90% was taken up by unmanagement memory. There are about 50 instances of this application running on my server, and they quickly consume all the memory, which leads to application crashes. I have no idea why this is happening, it seems that Garbage collection is not freeing the reserved memory. For information, on Windows under IIS the application worked in 32-bit on Linux in 64-bit.\r\n\r\nI tried changing Garbage collection settings such as (DOTNET_GCConserveMemory and DOTNET_gcServer), but it didn\u0027t help.\r\n\r\nMy application is essentially a CMS hosted using nginx. Basically this is a site using liquid (https://mtirion.medium.com/using-liquid-for-text-base-templates-with-net-80ae503fa635) to parse content. It also runs several hosted services that periodically run tasks such as retrieving data from the database to send email if any, checking for changes in data in a file. Even when no requests are sent to my site (for example at night), memory usage does not decrease. I have done a few things like getting memory dump, dotnet-gcdump, dottrace and dotnetdump but I am not very knowledgeable about it and can provide as per need.\r\n![Dump](https://github.com/dotnet/runtime/assets/44192808/3ef0282b-6f0d-48e4-86c8-b315b74d07f2)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edenislohachev1991\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-17T22:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u0rpY",
                                           "createdAt":  "2023-12-17T22:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e almost 90% was taken up by unmanagement memory\n\nDo you have an idea what is allocating that? Are you loading any native libraries?\n\nYou mention the GC - do you have reason to believe the GC is involved? Eg you are expecting something to be finalized and it\u0027s not. Generally unmanaged heap would not be a GC issue.",
                                           "updatedAt":  "2023-12-17T22:25:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u3lWp",
                                           "createdAt":  "2023-12-18T10:34:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "denislohachev1991",
                                           "body":  "I have no idea what fills the memory. But I don’t understand why this only happens on Linux; it works fine on Windows. The difference is that on Windows the application runs under .Net 5, and on Windows under .Net 6.",
                                           "updatedAt":  "2023-12-18T10:34:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vB3U2",
                                           "createdAt":  "2023-12-19T13:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@denislohachev1991 please see my comment here on a similar issue: https://github.com/dotnet/runtime/issues/95922#issuecomment-1862492306. \r\nAlso, if you would be able to run your application under the heaptrack tool on Linux (just by running `heaptrack /path/to/your/app` so that it collects everything from the start), it could help pinpoint where the native memory is coming from. Ideally, before running it, download symbols for all the libXXXX.so files in the .NET runtime so that the symbol files are placed next to the relative .so files. The dotnet-symbol tool can do that - just run it on the .so files and it will place the symbol files next to them. Please see https://github.com/dotnet/diagnostics/blob/main/documentation/debugging-coredump.md on how to install the dotnet-symbol tool.\r\nAfter collecting the heaptrack trace, you can run `heaptrack_print -l 1 -a 0 -T 0 -p 0 -f heaptrack_log_file` to dump the leaks it has found including the call stacks of the allocations.",
                                           "updatedAt":  "2023-12-19T13:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vKn7L",
                                           "createdAt":  "2023-12-20T19:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "denislohachev1991",
                                           "body":  "@janvorli I’m not very good at this, in the comment to which you refer, I learned that I can share the dump file with you so that you can conduct your investigation. I created this dump file while the application was running and it was using a lot of memory.  If I understand you correctly, tell me how I can give you the dump file.",
                                           "updatedAt":  "2023-12-20T19:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vKov9",
                                           "createdAt":  "2023-12-20T20:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@denislohachev1991 you can place it to your onedrive or google drive or something like that and then send me a private email with details on how to access it. My email address my github name @ microsoft.com.",
                                           "updatedAt":  "2023-12-20T20:02:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59nSoP",
                                           "createdAt":  "2024-05-13T12:31:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "beckjin",
                                           "body":  "I seem to have encountered a similar problem, have you resolved it?",
                                           "updatedAt":  "2024-05-13T12:31:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Csn0S",
                                           "createdAt":  "2024-06-26T22:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is this on .NET 6 only, or does the same issue repro with 8? ",
                                           "updatedAt":  "2024-06-26T22:40:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cz7Rn",
                                           "createdAt":  "2024-06-27T13:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "denislohachev1991",
                                           "body":  "@mangod9  After moving to .Net 8, the problem has decreased a little compared to .Net 6. But it still consumes much more memory than on a Windows server.",
                                           "updatedAt":  "2024-06-27T13:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HMybj",
                                           "createdAt":  "2024-08-05T06:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "petersinsky",
                                           "body":  "@janvorli I have encountered a similar problem in our microservice. On Windows, the app works fine, but on Linux, the memory usage keeps increasing. I gathered some dumps using heaptrack and dotnet-dump and sent them to your MS email. Please let me know if you could take a look. Thank you very much.",
                                           "updatedAt":  "2024-08-05T06:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TMffD",
                                           "createdAt":  "2024-11-12T03:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQrXHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "solomon-okolie",
                                                                               "createdAt":  "2025-05-03T17:15:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "We may also have the same issue, a lot of unmanaged memory usage, dotnet runtime version: `8.0.10`\n\n![Image](https://github.com/user-attachments/assets/502c64b7-0ecf-468a-a33e-7bfe1755fc4f)\n\n\n\n",
                                           "updatedAt":  "2024-11-12T03:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pzAiJ",
                                           "createdAt":  "2025-05-03T17:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "solomon-okolie",
                                           "body":  "Upgraded from .NET8 to .NET9 and noticed the increased usage of unmanaged memory. The container was running fine on .NET8 with 256MB but since moving to .NET9 it get\u0027s restarted due to OOM.\n\nThe managed memory is pretty low ~70-80MB but unmanaged memory is north of 250MB.",
                                           "updatedAt":  "2025-05-03T17:22:42Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "High memory consumption of .Net 6 app on Linux",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96592",
        "createdAt":  "2024-01-07T13:58:20Z",
        "number":  96592,
        "author":  "nikarh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T22:59:05Z",
        "body":  "### Description\r\n\r\nI am trying to run an AOT compiled Hello World on aarch64 on Nvidia Shield TV android device. It always returns exit code 255. I ran the app with `strace` and got the following output:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eStrace stderr:\u003c/summary\u003e\r\n\r\n```\r\n execve(\"./AndroidRepro\", [\"./AndroidRepro\"], 0x7fe83df310 /* 24 vars */) = 0\r\ngetpid()                                = 23894\r\nmmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8c000\r\nset_tid_address(0x2c37e84508)           = 23894\r\nfaccessat(AT_FDCWD, \"/dev/urandom\", R_OK) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\ngetrandom(\"\\xa0\\x90\\x71\\xd6\\x6e\\xab\\x88\\x7e\\xb6\\xf4\\xfd\\xc8\\x1a\\x42\\xde\\xeb\\xec\\x4a\\x0f\\x44\\x4b\\x81\\x64\\x6f\\xd8\\xcb\\x07\\x8b\\x42\\x68\\x2a\\x81\"..., 40, GRND_NONBLOCK) = 40\r\nmmap(NULL, 1104, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8f000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e8f000, 1104, \"arc4random data\") = 0\r\nsched_getscheduler(0)                   = 0 (SCHED_OTHER)\r\nmmap(NULL, 36864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e90000\r\nmprotect(0x2c37e90000, 4096, PROT_NONE) = 0\r\nsigaltstack({ss_sp=0x2c37e91000, ss_flags=0, ss_size=32768}, NULL) = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e91000, 32768, \"thread signal stack\") = 0\r\nmmap(NULL, 16777216, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e99000\r\nmprotect(0x2c3832e000, 8192, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c37e76000, 28672, PROT_READ) = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e7f000, 45056, \".bss\") = 0\r\nmprotect(0x2c37e83000, 4096, PROT_READ) = 0\r\nmprotect(0x2c37e83000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c37e83000, 4096, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e99000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e99000, 4096, \"atexit handlers\") = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e9a000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e9a000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e9b000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e9b000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e9c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e9c000, 409600, \"linker_alloc\") = 0\r\nmprotect(0x2c38e9c000, 409600, PROT_READ|PROT_WRITE) = 0\r\nopenat(AT_FDCWD, \"/dev/null\", O_RDWR)   = 3\r\nfcntl(0, F_GETFL)                       = 0x20002 (flags O_RDWR|O_LARGEFILE)\r\nfcntl(1, F_GETFL)                       = 0x20002 (flags O_RDWR|O_LARGEFILE)\r\nfcntl(2, F_GETFL)                       = 0x20001 (flags O_WRONLY|O_LARGEFILE)\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/dev/__properties__\", {st_mode=S_IFDIR|0711, st_size=3780, ...}, 0) = 0\r\nfaccessat(AT_FDCWD, \"/dev/__properties__/property_info\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/property_info\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=58100, ...}) = 0\r\nmmap(NULL, 58100, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f00000\r\nclose(3)                                = 0\r\nmmap(NULL, 7400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f0f000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38f0f000, 7400, \"System property context nodes\") = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/properties_serial\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f11000\r\nclose(3)                                = 0\r\nmmap(NULL, 40960, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f31000\r\nmprotect(0x2c38f32000, 32768, PROT_READ|PROT_WRITE) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:exported2_default_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f3b000\r\nclose(3)                                = 0\r\nrt_sigaction(SIGABRT, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGBUS, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGFPE, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGILL, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGSEGV, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGSTKFLT, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGSYS, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGTRAP, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGRT_3, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:debug_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f5b000\r\nclose(3)                                = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f7b000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38f7b000, 4096, \"bionic_alloc_small_objects\") = 0\r\nnewfstatat(AT_FDCWD, \"/proc/self/exe\", {st_mode=S_IFREG|0771, st_size=4246440, ...}, 0) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/exe\", \"/data/local/tmp/AndroidRepro\", 4096) = 28\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f7c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38f7c000, 409600, \"linker_alloc\") = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x5f94ae8000, 278528, \".bss\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe0000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe0000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe1000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe1000, 4096, \"bionic_alloc_small_objects\") = 0\r\nnewfstatat(AT_FDCWD, \"/system/etc/ld.config.arm64.txt\", 0x7ff16b59e0, 0) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/linkerconfig/ld.config.txt\", {st_mode=S_IFREG|0644, st_size=68959, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/linkerconfig/ld.config.txt\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0644, st_size=68959, ...}) = 0\r\nmmap(NULL, 69632, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe2000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe2000, 69632, \"bionic_alloc_lob\") = 0\r\nread(3, \"dir.system = /system/bin/\\ndir.sy\"..., 1024) = 1024\r\nread(3, \"em/system_ext/${LIB}\\nnamespace.d\"..., 1024) = 1024\r\nread(3, \"ted.paths += /odm/framework\\nname\"..., 1024) = 1024\r\nread(3, \"uct/${LIB}\\nnamespace.default.asa\"..., 1024) = 1024\r\nread(3, \"efault.asan.permitted.paths += /\"..., 1024) = 1024\r\nread(3, \"ink.com_android_adbd.shared_libs\"..., 1024) = 1024\r\nread(3, \".com_android_adbd.isolated = tru\"..., 1024) = 1024\r\nread(3, \"= libc.so\\nnamespace.com_android_\"..., 1024) = 1024\r\nread(3, \"mitted.paths += /apex/com.androi\"..., 1024) = 1024\r\nread(3, \"mespace.com_android_conscrypt.li\"..., 1024) = 1024\r\nread(3, \".isolated = true\\nnamespace.com_a\"..., 1024) = 1024\r\nread(3, \"ace.com_android_media.link.defau\"..., 1024) = 1024\r\nread(3, \"tted.paths += /system/${LIB}\\nnam\"..., 1024) = 1024\r\nread(3, \"tworks.link.default.shared_libs \"..., 1024) = 1024\r\nread(3, \"om.android.os.statsd/${LIB}\\nname\"..., 1024) = 1024\r\nread(3, \"rch64-android.so:libclang_rt.asa\"..., 1024) = 1024\r\nread(3, \"shared_libs += libdl.so\\nnamespac\"..., 1024) = 1024\r\nread(3, \".runtime/${LIB}\\nnamespace.com_an\"..., 1024) = 1024\r\nread(3, \"_rt.hwasan-aarch64-android.so:li\"..., 1024) = 1024\r\nread(3, \"space.rs.asan.search.paths += /d\"..., 1024) = 1024\r\nread(3, \"libs += libdl.so\\nnamespace.rs.li\"..., 1024) = 1024\r\nread(3, \"asan.search.paths += /data/asan/\"..., 1024) = 1024\r\nread(3, \"libs += libm.so\\nnamespace.sphal.\"..., 1024) = 1024\r\nread(3, \"ls.so:libgralloctypes.so:libhard\"..., 1024) = 1024\r\nread(3, \"dk.asan.search.paths += /data/as\"..., 1024) = 1024\r\nread(3, \"an-arm-android.so:libdl.so:liblo\"..., 1024) = 1024\r\nread(3, \"lt.visible = true\\nnamespace.defa\"..., 1024) = 1024\r\nread(3, \"dk.so:libnativewindow.so:libneur\"..., 1024) = 1024\r\nread(3, \"1.0.so:android.hidl.memory.token\"..., 1024) = 1024\r\nread(3, \".hardware.audio.effect@2.0.so:an\"..., 1024) = 1024\r\nread(3, \"io@1.0.so:android.hardware.broad\"..., 1024) = 1024\r\nread(3, \"id.hardware.drm@1.0.so:android.h\"..., 1024) = 1024\r\nread(3, \"@2.1.so:android.hardware.identit\"..., 1024) = 1024\r\nread(3, \"r@1.1.so:android.hardware.power@\"..., 1024) = 1024\r\nread(3, \".thermal@2.0.so:android.hardware\"..., 1024) = 1024\r\nread(3, \"hidl.memory.block@1.0.so:android\"..., 1024) = 1024\r\nread(3, \"radio_metadata.so:libspeexresamp\"..., 1024) = 1024\r\nread(3, \"ibadbd_auth.so\\nnamespace.com_and\"..., 1024) = 1024\r\nread(3, \"com_android_art.isolated = true\\n\"..., 1024) = 1024\r\nread(3, \"ermitted.paths = /apex/com.andro\"..., 1024) = 1024\r\nread(3, \"neuralnetworks.link.system.share\"..., 1024) = 1024\r\nread(3, \"stem/${LIB}\\nnamespace.com_androi\"..., 1024) = 1024\r\nread(3, \"lone-aarch64-android.so:libclang\"..., 1024) = 1024\r\nread(3, \"libs += libicuuc.so\\nnamespace.sy\"..., 1024) = 1024\r\nread(3, \"amespace.vndk.asan.search.paths \"..., 1024) = 1024\r\nread(3, \"n_standalone-arm-android.so\\nname\"..., 1024) = 1024\r\nread(3, \"B}\\nnamespace.default.asan.search\"..., 1024) = 1024\r\nread(3, \"roid_art.shared_libs += libpac.s\"..., 1024) = 1024\r\nread(3, \"adbd.link.default.shared_libs +=\"..., 1024) = 1024\r\nread(3, \"art.search.paths = /apex/com.and\"..., 1024) = 1024\r\nread(3, \"scrypt.permitted.paths += /syste\"..., 1024) = 1024\r\nread(3, \"link.default.shared_libs += libc\"..., 1024) = 1024\r\nread(3, \" += libc.so\\nnamespace.com_androi\"..., 1024) = 1024\r\nread(3, \"alone-arm-android.so\\nnamespace.c\"..., 1024) = 1024\r\nread(3, \"_android_neuralnetworks.link.def\"..., 1024) = 1024\r\nread(3, \"isolated = true\\nnamespace.com_an\"..., 1024) = 1024\r\nread(3, \"ibs += libc.so\\nnamespace.com_and\"..., 1024) = 1024\r\nread(3, \"ce.com_android_resolv.asan.permi\"..., 1024) = 1024\r\nread(3, \"one-aarch64-android.so:libclang_\"..., 1024) = 1024\r\nread(3, \".default.shared_libs += libdl.so\"..., 1024) = 1024\r\nread(3, \"space.rs.asan.search.paths = /da\"..., 1024) = 1024\r\nread(3, \"id.so:libclang_rt.asan-arm-andro\"..., 1024) = 1024\r\nread(3, \"search.paths += /vendor/${LIB}/h\"..., 1024) = 1024\r\nread(3, \"mediandk.so:libnativewindow.so:l\"..., 1024) = 1024\r\nread(3, \"aphics.mapper@3.0.so:android.har\"..., 1024) = 1024\r\nread(3, \"dk.permitted.paths += /system/ve\"..., 1024) = 1024\r\nread(3, \"apex/com.android.vndk.v30/${LIB}\"..., 1024) = 1024\r\nread(3, \"namespace.vndk.link.sphal.allow_\"..., 1024) = 351\r\nread(3, \"\", 1024)                       = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/system/bin\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/system/bin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0751, st_size=8192, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/bin\", 4095) = 11\r\nnewfstatat(AT_FDCWD, \"/system/bin\", {st_mode=S_IFDIR|0751, st_size=8192, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/system/xbin\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/system/xbin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0751, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/xbin\", 4095) = 12\r\nnewfstatat(AT_FDCWD, \"/system/xbin\", {st_mode=S_IFDIR|0751, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/system/system_ext/bin\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/system/product/bin\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/odm/bin\", R_OK)   = 0\r\nopenat(AT_FDCWD, \"/odm/bin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/odm/bin\", 4095) = 15\r\nnewfstatat(AT_FDCWD, \"/vendor/odm/bin\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/vendor/bin\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/vendor/bin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0751, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/bin\", 4095) = 11\r\nnewfstatat(AT_FDCWD, \"/vendor/bin\", {st_mode=S_IFDIR|0751, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/data/nativetest/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest64/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest64/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest64/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest64/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest/unrestricted\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest64/unrestricted\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/local/tmp\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/data/local/tmp\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0771, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/data/local/tmp\", 4095) = 15\r\nnewfstatat(AT_FDCWD, \"/data/local/tmp\", {st_mode=S_IFDIR|0771, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff3000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff3000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff4000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff4000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff5000, 8192, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff7000, 8192, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff9000, 8192, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38ff5000, 8192)              = 0\r\nmunmap(0x2c38ff7000, 8192)              = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff5000, 8192, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff7000, 8192, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38ff5000, 8192)              = 0\r\nmunmap(0x2c38ff9000, 8192)              = 0\r\nmunmap(0x2c38ff7000, 8192)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff5000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff6000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff6000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff7000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff8000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff8000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff9000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ffa000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ffa000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ffb000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ffb000, 4096, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38fe2000, 69632)             = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe2000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe2000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe3000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe3000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:vndk_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38ffc000\r\nclose(3)                                = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nopenat(AT_FDCWD, \"/odm/lib64/vndk-sp\", O_RDONLY|O_CLOEXEC|O_PATH) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/odm/lib64/vndk-sp\", 0x7ff16b3490, 0) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/vendor/lib64/vndk-sp\", O_RDONLY|O_CLOEXEC|O_PATH) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64/vndk-sp\", 0x7ff16b3490, 0) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/apex/com.android.vndk.v30/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=12288, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.vndk.v30/lib64\", 4095) = 32\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.vndk.v30/lib64\", {st_mode=S_IFDIR|0755, st_size=12288, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.vndk.v30/lib64\", {st_mode=S_IFDIR|0755, st_size=12288, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.neuralnetworks/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.neuralnetworks\"..., 4095) = 38\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.neuralnetworks/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.neuralnetworks/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe4000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe4000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/odm/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/odm/lib64\", 4095) = 17\r\nnewfstatat(AT_FDCWD, \"/vendor/odm/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/vendor/odm/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/vendor/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=8192, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/lib64\", 4095) = 13\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64\", {st_mode=S_IFDIR|0755, st_size=8192, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64\", {st_mode=S_IFDIR|0755, st_size=8192, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/vendor/lib64/hw\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/lib64/hw\", 4095) = 16\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64/hw\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64/hw\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.runtime/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.runtime/lib64\", 4095) = 31\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.runtime/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.runtime/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.art/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.art/lib64\", 4095) = 27\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.art/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.art/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.resolv/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.resolv/lib64\", 4095) = 30\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.resolv/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.resolv/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.conscrypt/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.conscrypt/lib6\"..., 4095) = 33\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.conscrypt/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.conscrypt/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.media/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.media/lib64\", 4095) = 29\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.media/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.media/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe5000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.os.statsd/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.os.statsd/lib6\"..., 4095) = 33\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.os.statsd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.os.statsd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.adbd/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.adbd/lib64\", 4095) = 28\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.adbd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.adbd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe6000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe6000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/system/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=24576, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/lib64\", 4095) = 13\r\nnewfstatat(AT_FDCWD, \"/system/lib64\", {st_mode=S_IFDIR|0755, st_size=24576, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/system/lib64\", {st_mode=S_IFDIR|0755, st_size=24576, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/system/system_ext/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/system/system_ext/lib64\", 0x7ff16b3490, 0) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/system/product/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/product/lib64\", 4095) = 21\r\nnewfstatat(AT_FDCWD, \"/system/product/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/system/product/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmunmap(0x2c38ff7000, 4096)              = 0\r\nmunmap(0x2c38ff5000, 4096)              = 0\r\nmunmap(0x2c38ffb000, 4096)              = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c3901c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c3901c000, 409600, \"linker_alloc\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe7000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe8000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe8000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fea000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fea000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38feb000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38feb000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fec000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fec000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nopenat(AT_FDCWD, \"/data/local/tmp\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0771, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/data/local/tmp\", 4095) = 15\r\nnewfstatat(AT_FDCWD, \"/data/local/tmp\", {st_mode=S_IFDIR|0771, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/data/local/tmp\", {st_mode=S_IFDIR|0771, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39080000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39080000, 409600, \"linker_alloc\") = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c390e4000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c390e4000, 409600, \"linker_alloc\") = 0\r\nopenat(AT_FDCWD, \"/data/local/tmp/libdl.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/system/lib64/libdl.so\", O_RDONLY|O_CLOEXEC) = 3\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.runtime/lib64/\"..., 4096) = 47\r\nfstat(3, {st_mode=S_IFREG|0644, st_size=14176, ...}) = 0\r\nfstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_RELATIME}) = 0\r\npread64(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\20\\0\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c38fe9000\r\nmmap(NULL, 2688, PROT_READ, MAP_PRIVATE, 3, 0x3000) = 0x2c38fed000\r\nmmap(NULL, 272, PROT_READ, MAP_PRIVATE, 3, 0x2000) = 0x2c38fee000\r\nmmap(NULL, 3706, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c38fef000\r\nopenat(AT_FDCWD, \"/data/local/tmp/libc.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/system/lib64/libc.so\", O_RDONLY|O_CLOEXEC) = 4\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/4\", \"/apex/com.android.runtime/lib64/\"..., 4096) = 46\r\nfstat(4, {st_mode=S_IFREG|0644, st_size=978160, ...}) = 0\r\nfstatfs(4, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_RELATIME}) = 0\r\npread64(4, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\260\\3\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 744, PROT_READ, MAP_PRIVATE, 4, 0) = 0x2c38ff0000\r\nmmap(NULL, 4704, PROT_READ, MAP_PRIVATE, 4, 0xee000) = 0x2c38ff1000\r\nmmap(NULL, 4032, PROT_READ, MAP_PRIVATE, 4, 0xb8000) = 0x2c38ff5000\r\nmmap(NULL, 18241, PROT_READ, MAP_PRIVATE, 4, 0xc000) = 0x2c39148000\r\nmmap(NULL, 1306624, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c3914d000\r\nmunmap(0x2c3914d000, 237568)            = 0\r\nmunmap(0x2c39265000, 159744)            = 0\r\nmmap(0x2c39187000, 238260, PROT_READ, MAP_PRIVATE|MAP_FIXED, 4, 0) = 0x2c39187000\r\nmmap(0x2c391c2000, 501968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 4, 0x3b000) = 0x2c391c2000\r\nmmap(0x2c3923d000, 15040, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xb6000) = 0x2c3923d000\r\nmmap(0x2c39241000, 8424, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xb9000) = 0x2c39241000\r\nmmap(0x2c39244000, 135168, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c39244000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39244000, 135168, \".bss\") = 0\r\nmmap(NULL, 520192, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39265000\r\nmunmap(0x2c39265000, 163840)            = 0\r\nmunmap(0x2c39292000, 335872)            = 0\r\nmmap(0x2c3928d000, 2972, PROT_READ, MAP_PRIVATE|MAP_FIXED, 3, 0) = 0x2c3928d000\r\nmmap(0x2c3928e000, 672, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 3, 0x1000) = 0x2c3928e000\r\nmmap(0x2c3928f000, 384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x2000) = 0x2c3928f000\r\nmmap(0x2c39291000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c39291000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39291000, 4096, \".bss\") = 0\r\nrt_sigprocmask(SIG_BLOCK, ~[], [RTMIN], 8) = 0\r\nrt_sigprocmask(SIG_SETMASK, [RTMIN], NULL, 8) = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39292000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39292000, 409600, \"linker_alloc\") = 0\r\nmprotect(0x5f94ae2000, 12288, PROT_READ) = 0\r\nmprotect(0x2c3928f000, 4096, PROT_READ) = 0\r\nmprotect(0x2c3923d000, 16384, PROT_READ) = 0\r\nclose(3)                                = 0\r\nclose(4)                                = 0\r\nmunmap(0x2c39148000, 18241)             = 0\r\nmunmap(0x2c38ff5000, 4032)              = 0\r\nmunmap(0x2c38ff1000, 4704)              = 0\r\nmunmap(0x2c38ff0000, 744)               = 0\r\nmunmap(0x2c38fef000, 3706)              = 0\r\nmunmap(0x2c38fee000, 272)               = 0\r\nmunmap(0x2c38fed000, 2688)              = 0\r\nmunmap(0x2c38fe9000, 688)               = 0\r\nmmap(NULL, 20480, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2c38fed000\r\nmprotect(0x2c38fee000, 12288, PROT_READ|PROT_WRITE) = 0\r\nrt_sigprocmask(SIG_BLOCK, ~[], [RTMIN], 8) = 0\r\nrt_sigprocmask(SIG_SETMASK, [RTMIN], NULL, 8) = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fee000, 12288, \"stack_and_tls:main\") = 0\r\nmunmap(0x2c37e8c000, 12288)             = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ|PROT_WRITE) = 0\r\nfaccessat(AT_FDCWD, \"/dev/urandom\", R_OK) = 0\r\ngetrandom(\"\\x69\\x83\\x9e\\xc2\\x0e\\xd6\\x2a\\x9f\\xa3\\x71\\xeb\\x74\\x84\\x23\\xe5\\xc5\\x88\\xa7\\x3e\\x38\\xc0\\xe4\\x40\\x1a\\x6c\\xac\\x2c\\x43\\x46\\x74\\xca\\xde\"..., 40, GRND_NONBLOCK) = 40\r\nmmap(NULL, 1104, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e8c000, 1104, \"arc4random data\") = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ) = 0\r\nnewfstatat(AT_FDCWD, \"/dev/__properties__\", {st_mode=S_IFDIR|0711, st_size=3780, ...}, 0) = 0\r\nfaccessat(AT_FDCWD, \"/dev/__properties__/property_info\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/property_info\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=58100, ...}) = 0\r\nmmap(NULL, 58100, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39148000\r\nclose(3)                                = 0\r\nmmap(NULL, 7400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8d000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e8d000, 7400, \"System property context nodes\") = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/properties_serial\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39157000\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:debug_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39265000\r\nclose(3)                                = 0\r\nrt_sigaction(SIGRT_7, {sa_handler=0x2c391d9eb0, sa_mask=[], sa_flags=SA_RESTART}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nprctl(0x37 /* PR_??? */, 0x1, 0, 0, 0)  = -1 EINVAL (Invalid argument)\r\nmprotect(0x2c39247000, 4096, PROT_READ|PROT_WRITE) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:exported2_default_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c392f6000\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:heapprofd_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39316000\r\nclose(3)                                = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ) = 0\r\nrt_sigaction(SIGRT_4, {sa_handler=0x2c391c3e38, sa_mask=[], sa_flags=SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGRT_6, {sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTART}, {sa_handler=SIG_IGN, sa_mask=[], sa_flags=0}, 8) = 0\r\ngetrandom(\"\\xbd\\x38\\x15\\xfd\", 4, GRND_NONBLOCK) = 4\r\nmmap(NULL, 8858370048, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2c39336000\r\ngetrandom(\"\\x86\\xbb\\x67\\x26\", 4, GRND_NONBLOCK) = 4\r\nsched_getaffinity(0, 128, [0, 1, 2, 3]) = 8\r\nmmap(0x2c69343000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c69343000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c69343000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2c39344000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c39344000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39344000, 262144, \"scudo:primary\") = 0\r\nfutex(0x2c39244064, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\ngetuid()                                = 2000\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nopenat(AT_FDCWD, \"/system/lib64/libnetd_client.so\", O_RDONLY|O_CLOEXEC) = 3\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/lib64/libnetd_client.so\", 4096) = 31\r\nfstat(3, {st_mode=S_IFREG|0644, st_size=33432, ...}) = 0\r\nfstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_NODEV|ST_RELATIME}) = 0\r\npread64(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0000\\0\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c38fe9000\r\nmmap(NULL, 7920, PROT_READ, MAP_PRIVATE, 3, 0x7000) = 0x2c39177000\r\nmmap(NULL, 560, PROT_READ, MAP_PRIVATE, 3, 0x7000) = 0x2c38ff2000\r\nmmap(NULL, 7541, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c39179000\r\nopenat(AT_FDCWD, \"/system/lib64/libc++.so\", O_RDONLY|O_CLOEXEC) = 4\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/4\", \"/system/lib64/libc++.so\", 4096) = 23\r\nfstat(4, {st_mode=S_IFREG|0644, st_size=710816, ...}) = 0\r\nfstatfs(4, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_NODEV|ST_RELATIME}) = 0\r\npread64(4, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\260\\4\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 4, 0) = 0x2c38ff5000\r\nmmap(NULL, 2688, PROT_READ, MAP_PRIVATE, 4, 0xad000) = 0x2c38ff7000\r\nmmap(NULL, 8080, PROT_READ, MAP_PRIVATE, 4, 0xa8000) = 0x2c3917b000\r\nmmap(NULL, 104313, PROT_READ, MAP_PRIVATE, 4, 0x12000) = 0x2e49336000\r\nopenat(AT_FDCWD, \"/system/lib64/libm.so\", O_RDONLY|O_CLOEXEC) = 5\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/5\", \"/apex/com.android.runtime/lib64/\"..., 4096) = 46\r\nfstat(5, {st_mode=S_IFREG|0644, st_size=222512, ...}) = 0\r\nfstatfs(5, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_RELATIME}) = 0\r\npread64(5, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\20\\1\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 5, 0) = 0x2c38ffb000\r\nmmap(NULL, 9184, PROT_READ, MAP_PRIVATE, 5, 0x35000) = 0x2c3917d000\r\nmmap(NULL, 480, PROT_READ, MAP_PRIVATE, 5, 0x35000) = 0x2c39180000\r\nmmap(NULL, 6360, PROT_READ, MAP_PRIVATE, 5, 0x2000) = 0x2c39181000\r\nmmap(NULL, 1044480, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2e49350000\r\nmunmap(0x2e49350000, 221184)            = 0\r\nmunmap(0x2e49435000, 106496)            = 0\r\nmmap(0x2e49386000, 304596, PROT_READ, MAP_PRIVATE|MAP_FIXED, 4, 0) = 0x2e49386000\r\nmmap(0x2e493d1000, 363808, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 4, 0x4b000) = 0x2e493d1000\r\nmmap(0x2e4942a000, 25232, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xa4000) = 0x2e4942a000\r\nmmap(0x2e49431000, 697, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xaa000) = 0x2e49431000\r\nmmap(0x2e49432000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2e49432000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e49432000, 12288, \".bss\") = 0\r\nmmap(NULL, 520192, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2e49435000\r\nmunmap(0x2e49435000, 57344)             = 0\r\nmunmap(0x2e4947a000, 237568)            = 0\r\nmmap(0x2e49443000, 69508, PROT_READ, MAP_PRIVATE|MAP_FIXED, 5, 0) = 0x2e49443000\r\nmmap(0x2e49454000, 145968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 5, 0x11000) = 0x2e49454000\r\nmmap(0x2e49478000, 712, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 5, 0x35000) = 0x2e49478000\r\nmmap(0x2e49479000, 832, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 5, 0x35000) = 0x2e49479000\r\nmmap(NULL, 520192, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2e4947a000\r\nmunmap(0x2e4947a000, 139264)            = 0\r\nmunmap(0x2e494a5000, 344064)            = 0\r\nmmap(0x2e4949c000, 9276, PROT_READ, MAP_PRIVATE|MAP_FIXED, 3, 0) = 0x2e4949c000\r\nmmap(0x2e4949f000, 15920, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 3, 0x3000) = 0x2e4949f000\r\nmmap(0x2e494a3000, 944, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x7000) = 0x2e494a3000\r\nmmap(0x2e494a4000, 945, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x7000) = 0x2e494a4000\r\nmprotect(0x2e494a3000, 4096, PROT_READ) = 0\r\nmmap(NULL, 2147483648, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2e494a5000\r\nmprotect(0x2c39291000, 4096, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e497a1000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e497a1000) = 0x2e497a1000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49606000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49606000) = 0x2e49606000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49606000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49606000) = 0x2e49606000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49606000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49606000) = 0x2e49606000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e494a5000, 2147483648, \"cfi shadow\") = 0\r\nmprotect(0x2e4942a000, 28672, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e494a5000, 2147483648, \"cfi shadow\") = 0\r\nmprotect(0x2e49478000, 4096, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e494a5000, 2147483648, \"cfi shadow\") = 0\r\nclose(3)                                = 0\r\nclose(4)                                = 0\r\nclose(5)                                = 0\r\nmunmap(0x2c39181000, 6360)              = 0\r\nmunmap(0x2c39180000, 480)               = 0\r\nmunmap(0x2c3917d000, 9184)              = 0\r\nmunmap(0x2c38ffb000, 688)               = 0\r\nmunmap(0x2e49336000, 104313)            = 0\r\nmunmap(0x2c3917b000, 8080)              = 0\r\nmunmap(0x2c38ff7000, 2688)              = 0\r\nmunmap(0x2c38ff5000, 688)               = 0\r\nmunmap(0x2c39179000, 7541)              = 0\r\nmunmap(0x2c38ff2000, 560)               = 0\r\nmunmap(0x2c39177000, 7920)              = 0\r\nmunmap(0x2c38fe9000, 688)               = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(0x2c49346000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c49346000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c49346000, 262144, \"scudo:primary\") = 0\r\nfutex(0x2e494312f0, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e494312f0, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e494312f0, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"atexit handlers\") = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmunmap(0x2c390e4000, 409600)            = 0\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:vendor_socket_hook_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c390e4000\r\nclose(3)                                = 0\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nfutex(0x2c3924404c, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmprotect(0x2c38f7c000, 409600, PROT_READ) = 0\r\nmprotect(0x2c38e9c000, 409600, PROT_READ) = 0\r\nmprotect(0x2c3901c000, 409600, PROT_READ) = 0\r\nmprotect(0x2c39080000, 409600, PROT_READ) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nrt_sigaction(SIGSEGV, NULL, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGSEGV, {sa_handler=0x5f94a4894c, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGFPE, NULL, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGFPE, {sa_handler=0x5f94a48a50, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGPIPE, {sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTART}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nopenat(AT_FDCWD, \"/sys/devices/system/cpu\", O_RDONLY|O_CLOEXEC|O_DIRECTORY) = 3\r\nmmap(0x2d9933e000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2d9933e000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2d9933e000, 262144, \"scudo:primary\") = 0\r\ngetdents64(3, /* 18 entries */, 4200)   = 528\r\ngetdents64(3, /* 0 entries */, 4200)    = 0\r\nclose(3)                                = 0\r\nmembarrier(MEMBARRIER_CMD_QUERY, 0)     = 0x1 (MEMBARRIER_CMD_GLOBAL)\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff2000\r\nmlock(0x2c38ff2000, 4096)               = 0\r\nstatfs(\"/sys/fs/cgroup\", {f_type=CGROUP2_SUPER_MAGIC, f_bsize=4096, f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={val=[0, 0]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_NOSUID|ST_NODEV|ST_NOEXEC|ST_RELATIME}) = 0\r\nopenat(AT_FDCWD, \"/proc/self/mountinfo\", O_RDONLY) = 3\r\nmmap(0x2d79338000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2d79338000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2d79338000, 262144, \"scudo:primary\") = 0\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nmmap(0x2d3933f000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2d3933f000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2d3933f000, 262144, \"scudo:primary\") = 0\r\nread(3, \"18 0 179:19 / / ro,nodev,relatim\"..., 1024) = 1024\r\nmmap(0x2ca9344000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2ca9344000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2ca9344000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2cb9340000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2cb9340000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2cb9340000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2ce9337000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2ce9337000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2ce9337000, 262144, \"scudo:primary\") = 0\r\nread(3, \"tmpfs tmpfs rw,seclabel,mode=755\"..., 1024) = 1024\r\nread(3, \"v /apex/com.android.resolv ro,re\"..., 1024) = 1024\r\nread(3, \" /apex/com.android.runtime ro,re\"..., 1024) = 1024\r\nread(3, \"roid.tethering.inprocess /apex/c\"..., 1024) = 1024\r\nread(3, \"ec,relatime shared:17 - cgroup n\"..., 1024) = 1024\r\nread(3, \"ev,noatime shared:27 - ext4 /dev\"..., 1024) = 1024\r\nread(3, \"ev/block/platform/sdhci-tegra.3/\"..., 1024) = 1024\r\nread(3, \"w,nosuid,nodev,noexec,noatime sh\"..., 1024) = 1024\r\nread(3, \"suid=1023,fsgid=1023,gid=9997,mu\"..., 1024) = 1024\r\nread(3, \"c,noatime shared:32 - sdcardfs /\"..., 1024) = 761\r\nread(3, \"\", 1024)                       = 0\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/proc/self/cgroup\", O_RDONLY) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nread(3, \"6:schedtune:/\\n5:memory:/\\n4:cpuse\"..., 1024) = 86\r\nclose(3)                                = 0\r\nsched_getaffinity(23894, 128, [0, 1, 2, 3]) = 8\r\nstatfs(\"/sys/fs/cgroup\", {f_type=CGROUP2_SUPER_MAGIC, f_bsize=4096, f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={val=[0, 0]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_NOSUID|ST_NODEV|ST_NOEXEC|ST_RELATIME}) = 0\r\nopenat(AT_FDCWD, \"/proc/self/mountinfo\", O_RDONLY) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nread(3, \"18 0 179:19 / / ro,nodev,relatim\"..., 1024) = 1024\r\nread(3, \"tmpfs tmpfs rw,seclabel,mode=755\"..., 1024) = 1024\r\nread(3, \"v /apex/com.android.resolv ro,re\"..., 1024) = 1024\r\nread(3, \" /apex/com.android.runtime ro,re\"..., 1024) = 1024\r\nread(3, \"roid.tethering.inprocess /apex/c\"..., 1024) = 1024\r\nread(3, \"ec,relatime shared:17 - cgroup n\"..., 1024) = 1024\r\nread(3, \"ev,noatime shared:27 - ext4 /dev\"..., 1024) = 1024\r\nread(3, \"ev/block/platform/sdhci-tegra.3/\"..., 1024) = 1024\r\nread(3, \"w,nosuid,nodev,noexec,noatime sh\"..., 1024) = 1024\r\nread(3, \"suid=1023,fsgid=1023,gid=9997,mu\"..., 1024) = 1024\r\nread(3, \"c,noatime shared:32 - sdcardfs /\"..., 1024) = 761\r\nread(3, \"\", 1024)                       = 0\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/proc/self/cgroup\", O_RDONLY) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nread(3, \"6:schedtune:/\\n5:memory:/\\n4:cpuse\"..., 1024) = 86\r\nclose(3)                                = 0\r\nsched_getaffinity(23894, 128, [0, 1, 2, 3]) = 8\r\nopenat(AT_FDCWD, \"/dev/stune//cpu.max\", O_RDONLY) = -1 ENOENT (No such file or directory)\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmmap(0x2c99340000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c99340000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c99340000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2c8933c000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c8933c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c8933c000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2c7933b000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c7933b000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c7933b000, 262144, \"scudo:primary\") = 0\r\nrt_sigaction(SIGRT_8, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nrt_sigaction(SIGRT_8, {sa_handler=0x5f94a44fb8, sa_mask=[], sa_flags=SA_RESTART|SA_SIGINFO}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nfutex(0x5f94af4b10, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nopenat(AT_FDCWD, \"/dev/stune//memory.max\", O_RDONLY) = -1 ENOENT (No such file or directory)\r\nsysinfo({uptime=71185, loads=[13344, 17408, 15936], totalram=3093553152, freeram=122851328, sharedram=18128896, bufferram=19349504, totalswap=536866816, freeswap=344616960, procs=1612, totalhigh=0, freehigh=0, mem_unit=1}) = 0\r\nmmap(NULL, 274877911040, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Out of memory)\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nexit_group(-1)                          = ?\r\n+++ exited with 255 +++\r\n```\r\n\u003c/details\u003e\r\n\r\nIt looks like the failure is caused by `mmap` failing with `ENOMEM`.\r\nSetting `DOTNET_GCHeapHardLimit` to lower values solves the issue.\r\n\r\nI tried to find the root cause of the `mmap` failure but was not able to. Empirically I found that on this hardware, running the elf in an infinite bash loop that checks the exit code, setting `DOTNET_GCHeapHardLimit` to:\r\n- 64+GB is guaranteed to fail\r\n- above 40GB fails every second run of the binary\r\n- 32+GB fails every 20th run or so\r\n- Setting it below 32GB doesn\u0027t fail\r\n\r\nI tried to make a minimal C program that does a single `mmap` to reproduce the issue, but interestingly enough, it never fails, even with max long long int value.\r\n\r\nThat leads to the conclusion that the issue is caused not by just a single `mmap`, but by a combination of syscalls.\r\n\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eC program:\u003c/summary\u003e\r\n\r\n```c\r\n#include \u003cstdio.h\u003e\r\n#include \u003cstdlib.h\u003e\r\n#include \u003cunistd.h\u003e\r\n#include \u003cerrno.h\u003e\r\n#include \u003csys/mman.h\u003e\r\n\r\nint main(int argc, char *argv[]) {\r\n    size_t size = 0;\r\n    if (sscanf(argv[1], \"%zu\", \u0026size) != 1) {\r\n      printf(\"invalid arg\\n\");\r\n      return 1;\r\n    }\r\n\r\n    printf(\"mapping %zu\\n\", size);\r\n    void *ptr = mmap(NULL, size, PROT_NONE , MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\r\n\r\n    if (ptr \u003c= 0) {\r\n        perror(\"mmap failed\\n\");\r\n        return 1;\r\n    } else {\r\n        printf(\"mmap succeeded\\n\");\r\n        return 0;\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n### Reproduction Steps\r\n\r\nWith Android NDK r26b in PATH:\r\n\r\n```sh\r\ndotnet new console -o HelloWorld --aot\r\ncd HelloWorld\r\ndotnet publish -r linux-bionic-arm64 -p:DisableUnsupportedError=true -p:PublishAotUsingRuntimePack=true -p:StripSymbols=false\r\nadb push ./bin/Release/net8.0/linux-bionic-arm64/publish/HelloWorld.dll /data/local/tmp/\r\nadb shell /data/local/tmp/HelloWorld\r\n```\r\n\r\n### Expected behavior\r\n\r\nShould output `Hello, World!`\r\n\r\n### Actual behavior\r\n\r\nExit code 255 and `strace` shows `mmap` failed with `ENOMEM`\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nSetting `DOTNET_GCHeapHardLimit` to some small value. Since I\u0027m running the code on an Android device, and the intended use is to run it via JNI from Java code, I can set env before doing a JNI call from Java.\r\n\r\n### Configuration\r\n\r\n- dotnet 8.0.100\r\n- Android TV, Android 11,  4.9.141-tegra-gfad87a91fd8\r\n- Nvidia Shield TV 2015, `NVIDIA/foster_e/foster:11/RQ1A.210105.003/7825230_3167.5736:user/release-keys`\r\n- aarch64\r\n- No such issue on other Android devices I have\r\n\r\n```\r\n[ro.build.characteristics]: [tv]\r\n[ro.build.date]: [Sun Oct 16 20:55:18 PDT 2022]\r\n[ro.build.date.utc]: [1665978918]\r\n[ro.build.description]: [foster_e-user 11 RQ1A.210105.003 7825230_3167.5736 release-keys]\r\n[ro.build.display.id]: [RQ1A.210105.003.7825230_3167.5736]\r\n[ro.build.fingerprint]: [NVIDIA/foster_e/foster:11/RQ1A.210105.003/7825230_3167.5736:user/release-keys]\r\n[ro.build.flavor]: [foster_e-user]\r\n[ro.build.host]: [mobile-u64-5308-d7000]\r\n[ro.build.id]: [RQ1A.210105.003]\r\n[ro.build.product]: [foster]\r\n[ro.build.system_root_image]: [true]\r\n[ro.build.tags]: [release-keys]\r\n[ro.build.type]: [user]\r\n[ro.build.user]: [NVIDIA]\r\n[ro.build.version.all_codenames]: [REL]\r\n[ro.build.version.base_os]: []\r\n[ro.build.version.codename]: [REL]\r\n[ro.build.version.incremental]: [7825230_3167.5736]\r\n[ro.build.version.min_supported_target_sdk]: [23]\r\n[ro.build.version.ota]: [9.1.1(33.2.0.157)]\r\n[ro.build.version.preview_sdk]: [0]\r\n[ro.build.version.preview_sdk_fingerprint]: [REL]\r\n[ro.build.version.release]: [11]\r\n[ro.build.version.release_or_codename]: [11]\r\n[ro.build.version.sdk]: [30]\r\n[ro.build.version.security_patch]: [2022-04-05]\r\n```\r\n\r\n### Other information\r\n\r\nRelated to #85650",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqBdIcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wENOg",
                                           "createdAt":  "2024-01-07T19:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI am trying to run an AOT compiled Hello World on aarch64 on Nvidia Shield TV android device. It always returns exit code 255. I ran the app with `strace` and got the following output:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eStrace stderr:\u003c/summary\u003e\r\n\r\n```\r\n execve(\"./AndroidRepro\", [\"./AndroidRepro\"], 0x7fe83df310 /* 24 vars */) = 0\r\ngetpid()                                = 23894\r\nmmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8c000\r\nset_tid_address(0x2c37e84508)           = 23894\r\nfaccessat(AT_FDCWD, \"/dev/urandom\", R_OK) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\ngetrandom(\"\\xa0\\x90\\x71\\xd6\\x6e\\xab\\x88\\x7e\\xb6\\xf4\\xfd\\xc8\\x1a\\x42\\xde\\xeb\\xec\\x4a\\x0f\\x44\\x4b\\x81\\x64\\x6f\\xd8\\xcb\\x07\\x8b\\x42\\x68\\x2a\\x81\"..., 40, GRND_NONBLOCK) = 40\r\nmmap(NULL, 1104, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8f000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e8f000, 1104, \"arc4random data\") = 0\r\nsched_getscheduler(0)                   = 0 (SCHED_OTHER)\r\nmmap(NULL, 36864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e90000\r\nmprotect(0x2c37e90000, 4096, PROT_NONE) = 0\r\nsigaltstack({ss_sp=0x2c37e91000, ss_flags=0, ss_size=32768}, NULL) = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e91000, 32768, \"thread signal stack\") = 0\r\nmmap(NULL, 16777216, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e99000\r\nmprotect(0x2c3832e000, 8192, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c37e76000, 28672, PROT_READ) = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e7f000, 45056, \".bss\") = 0\r\nmprotect(0x2c37e83000, 4096, PROT_READ) = 0\r\nmprotect(0x2c37e83000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c37e83000, 4096, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e99000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e99000, 4096, \"atexit handlers\") = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e9a000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e9a000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e9b000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e9b000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38e9c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38e9c000, 409600, \"linker_alloc\") = 0\r\nmprotect(0x2c38e9c000, 409600, PROT_READ|PROT_WRITE) = 0\r\nopenat(AT_FDCWD, \"/dev/null\", O_RDWR)   = 3\r\nfcntl(0, F_GETFL)                       = 0x20002 (flags O_RDWR|O_LARGEFILE)\r\nfcntl(1, F_GETFL)                       = 0x20002 (flags O_RDWR|O_LARGEFILE)\r\nfcntl(2, F_GETFL)                       = 0x20001 (flags O_WRONLY|O_LARGEFILE)\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/dev/__properties__\", {st_mode=S_IFDIR|0711, st_size=3780, ...}, 0) = 0\r\nfaccessat(AT_FDCWD, \"/dev/__properties__/property_info\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/property_info\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=58100, ...}) = 0\r\nmmap(NULL, 58100, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f00000\r\nclose(3)                                = 0\r\nmmap(NULL, 7400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f0f000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38f0f000, 7400, \"System property context nodes\") = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/properties_serial\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f11000\r\nclose(3)                                = 0\r\nmmap(NULL, 40960, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f31000\r\nmprotect(0x2c38f32000, 32768, PROT_READ|PROT_WRITE) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:exported2_default_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f3b000\r\nclose(3)                                = 0\r\nrt_sigaction(SIGABRT, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGBUS, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGFPE, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGILL, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGSEGV, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGSTKFLT, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGSYS, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGTRAP, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGRT_3, {sa_handler=0x2c37ddfc00, sa_mask=~[], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:debug_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38f5b000\r\nclose(3)                                = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f7b000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38f7b000, 4096, \"bionic_alloc_small_objects\") = 0\r\nnewfstatat(AT_FDCWD, \"/proc/self/exe\", {st_mode=S_IFREG|0771, st_size=4246440, ...}, 0) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/exe\", \"/data/local/tmp/AndroidRepro\", 4096) = 28\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38f7c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38f7c000, 409600, \"linker_alloc\") = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x5f94ae8000, 278528, \".bss\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe0000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe0000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe1000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe1000, 4096, \"bionic_alloc_small_objects\") = 0\r\nnewfstatat(AT_FDCWD, \"/system/etc/ld.config.arm64.txt\", 0x7ff16b59e0, 0) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/linkerconfig/ld.config.txt\", {st_mode=S_IFREG|0644, st_size=68959, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/linkerconfig/ld.config.txt\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0644, st_size=68959, ...}) = 0\r\nmmap(NULL, 69632, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe2000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe2000, 69632, \"bionic_alloc_lob\") = 0\r\nread(3, \"dir.system = /system/bin/\\ndir.sy\"..., 1024) = 1024\r\nread(3, \"em/system_ext/${LIB}\\nnamespace.d\"..., 1024) = 1024\r\nread(3, \"ted.paths += /odm/framework\\nname\"..., 1024) = 1024\r\nread(3, \"uct/${LIB}\\nnamespace.default.asa\"..., 1024) = 1024\r\nread(3, \"efault.asan.permitted.paths += /\"..., 1024) = 1024\r\nread(3, \"ink.com_android_adbd.shared_libs\"..., 1024) = 1024\r\nread(3, \".com_android_adbd.isolated = tru\"..., 1024) = 1024\r\nread(3, \"= libc.so\\nnamespace.com_android_\"..., 1024) = 1024\r\nread(3, \"mitted.paths += /apex/com.androi\"..., 1024) = 1024\r\nread(3, \"mespace.com_android_conscrypt.li\"..., 1024) = 1024\r\nread(3, \".isolated = true\\nnamespace.com_a\"..., 1024) = 1024\r\nread(3, \"ace.com_android_media.link.defau\"..., 1024) = 1024\r\nread(3, \"tted.paths += /system/${LIB}\\nnam\"..., 1024) = 1024\r\nread(3, \"tworks.link.default.shared_libs \"..., 1024) = 1024\r\nread(3, \"om.android.os.statsd/${LIB}\\nname\"..., 1024) = 1024\r\nread(3, \"rch64-android.so:libclang_rt.asa\"..., 1024) = 1024\r\nread(3, \"shared_libs += libdl.so\\nnamespac\"..., 1024) = 1024\r\nread(3, \".runtime/${LIB}\\nnamespace.com_an\"..., 1024) = 1024\r\nread(3, \"_rt.hwasan-aarch64-android.so:li\"..., 1024) = 1024\r\nread(3, \"space.rs.asan.search.paths += /d\"..., 1024) = 1024\r\nread(3, \"libs += libdl.so\\nnamespace.rs.li\"..., 1024) = 1024\r\nread(3, \"asan.search.paths += /data/asan/\"..., 1024) = 1024\r\nread(3, \"libs += libm.so\\nnamespace.sphal.\"..., 1024) = 1024\r\nread(3, \"ls.so:libgralloctypes.so:libhard\"..., 1024) = 1024\r\nread(3, \"dk.asan.search.paths += /data/as\"..., 1024) = 1024\r\nread(3, \"an-arm-android.so:libdl.so:liblo\"..., 1024) = 1024\r\nread(3, \"lt.visible = true\\nnamespace.defa\"..., 1024) = 1024\r\nread(3, \"dk.so:libnativewindow.so:libneur\"..., 1024) = 1024\r\nread(3, \"1.0.so:android.hidl.memory.token\"..., 1024) = 1024\r\nread(3, \".hardware.audio.effect@2.0.so:an\"..., 1024) = 1024\r\nread(3, \"io@1.0.so:android.hardware.broad\"..., 1024) = 1024\r\nread(3, \"id.hardware.drm@1.0.so:android.h\"..., 1024) = 1024\r\nread(3, \"@2.1.so:android.hardware.identit\"..., 1024) = 1024\r\nread(3, \"r@1.1.so:android.hardware.power@\"..., 1024) = 1024\r\nread(3, \".thermal@2.0.so:android.hardware\"..., 1024) = 1024\r\nread(3, \"hidl.memory.block@1.0.so:android\"..., 1024) = 1024\r\nread(3, \"radio_metadata.so:libspeexresamp\"..., 1024) = 1024\r\nread(3, \"ibadbd_auth.so\\nnamespace.com_and\"..., 1024) = 1024\r\nread(3, \"com_android_art.isolated = true\\n\"..., 1024) = 1024\r\nread(3, \"ermitted.paths = /apex/com.andro\"..., 1024) = 1024\r\nread(3, \"neuralnetworks.link.system.share\"..., 1024) = 1024\r\nread(3, \"stem/${LIB}\\nnamespace.com_androi\"..., 1024) = 1024\r\nread(3, \"lone-aarch64-android.so:libclang\"..., 1024) = 1024\r\nread(3, \"libs += libicuuc.so\\nnamespace.sy\"..., 1024) = 1024\r\nread(3, \"amespace.vndk.asan.search.paths \"..., 1024) = 1024\r\nread(3, \"n_standalone-arm-android.so\\nname\"..., 1024) = 1024\r\nread(3, \"B}\\nnamespace.default.asan.search\"..., 1024) = 1024\r\nread(3, \"roid_art.shared_libs += libpac.s\"..., 1024) = 1024\r\nread(3, \"adbd.link.default.shared_libs +=\"..., 1024) = 1024\r\nread(3, \"art.search.paths = /apex/com.and\"..., 1024) = 1024\r\nread(3, \"scrypt.permitted.paths += /syste\"..., 1024) = 1024\r\nread(3, \"link.default.shared_libs += libc\"..., 1024) = 1024\r\nread(3, \" += libc.so\\nnamespace.com_androi\"..., 1024) = 1024\r\nread(3, \"alone-arm-android.so\\nnamespace.c\"..., 1024) = 1024\r\nread(3, \"_android_neuralnetworks.link.def\"..., 1024) = 1024\r\nread(3, \"isolated = true\\nnamespace.com_an\"..., 1024) = 1024\r\nread(3, \"ibs += libc.so\\nnamespace.com_and\"..., 1024) = 1024\r\nread(3, \"ce.com_android_resolv.asan.permi\"..., 1024) = 1024\r\nread(3, \"one-aarch64-android.so:libclang_\"..., 1024) = 1024\r\nread(3, \".default.shared_libs += libdl.so\"..., 1024) = 1024\r\nread(3, \"space.rs.asan.search.paths = /da\"..., 1024) = 1024\r\nread(3, \"id.so:libclang_rt.asan-arm-andro\"..., 1024) = 1024\r\nread(3, \"search.paths += /vendor/${LIB}/h\"..., 1024) = 1024\r\nread(3, \"mediandk.so:libnativewindow.so:l\"..., 1024) = 1024\r\nread(3, \"aphics.mapper@3.0.so:android.har\"..., 1024) = 1024\r\nread(3, \"dk.permitted.paths += /system/ve\"..., 1024) = 1024\r\nread(3, \"apex/com.android.vndk.v30/${LIB}\"..., 1024) = 1024\r\nread(3, \"namespace.vndk.link.sphal.allow_\"..., 1024) = 351\r\nread(3, \"\", 1024)                       = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/system/bin\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/system/bin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0751, st_size=8192, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/bin\", 4095) = 11\r\nnewfstatat(AT_FDCWD, \"/system/bin\", {st_mode=S_IFDIR|0751, st_size=8192, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/system/xbin\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/system/xbin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0751, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/xbin\", 4095) = 12\r\nnewfstatat(AT_FDCWD, \"/system/xbin\", {st_mode=S_IFDIR|0751, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/system/system_ext/bin\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/system/product/bin\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/odm/bin\", R_OK)   = 0\r\nopenat(AT_FDCWD, \"/odm/bin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/odm/bin\", 4095) = 15\r\nnewfstatat(AT_FDCWD, \"/vendor/odm/bin\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/vendor/bin\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/vendor/bin\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0751, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/bin\", 4095) = 11\r\nnewfstatat(AT_FDCWD, \"/vendor/bin\", {st_mode=S_IFDIR|0751, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nfaccessat(AT_FDCWD, \"/data/nativetest/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest64/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest64/odm\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest64/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/benchmarktest64/vendor\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest/unrestricted\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/nativetest64/unrestricted\", R_OK) = -1 ENOENT (No such file or directory)\r\nfaccessat(AT_FDCWD, \"/data/local/tmp\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/data/local/tmp\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0771, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/data/local/tmp\", 4095) = 15\r\nnewfstatat(AT_FDCWD, \"/data/local/tmp\", {st_mode=S_IFDIR|0771, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff3000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff3000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff4000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff4000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff5000, 8192, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff7000, 8192, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff9000, 8192, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38ff5000, 8192)              = 0\r\nmunmap(0x2c38ff7000, 8192)              = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff5000, 8192, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff7000, 8192, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38ff5000, 8192)              = 0\r\nmunmap(0x2c38ff9000, 8192)              = 0\r\nmunmap(0x2c38ff7000, 8192)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff5000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff6000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff6000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff7000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff8000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff8000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ff9000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ffa000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ffa000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ffb000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38ffb000, 4096, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38fe2000, 69632)             = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe2000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe2000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe3000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe3000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:vndk_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c38ffc000\r\nclose(3)                                = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38e99000, 4096, PROT_READ) = 0\r\nfutex(0x2c37e811c8, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nopenat(AT_FDCWD, \"/odm/lib64/vndk-sp\", O_RDONLY|O_CLOEXEC|O_PATH) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/odm/lib64/vndk-sp\", 0x7ff16b3490, 0) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/vendor/lib64/vndk-sp\", O_RDONLY|O_CLOEXEC|O_PATH) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64/vndk-sp\", 0x7ff16b3490, 0) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/apex/com.android.vndk.v30/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=12288, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.vndk.v30/lib64\", 4095) = 32\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.vndk.v30/lib64\", {st_mode=S_IFDIR|0755, st_size=12288, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.vndk.v30/lib64\", {st_mode=S_IFDIR|0755, st_size=12288, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.neuralnetworks/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.neuralnetworks\"..., 4095) = 38\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.neuralnetworks/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.neuralnetworks/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe4000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe4000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/odm/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/odm/lib64\", 4095) = 17\r\nnewfstatat(AT_FDCWD, \"/vendor/odm/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/vendor/odm/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/vendor/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=8192, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/lib64\", 4095) = 13\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64\", {st_mode=S_IFDIR|0755, st_size=8192, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64\", {st_mode=S_IFDIR|0755, st_size=8192, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/vendor/lib64/hw\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/vendor/lib64/hw\", 4095) = 16\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64/hw\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/vendor/lib64/hw\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.runtime/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.runtime/lib64\", 4095) = 31\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.runtime/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.runtime/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.art/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.art/lib64\", 4095) = 27\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.art/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.art/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.resolv/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.resolv/lib64\", 4095) = 30\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.resolv/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.resolv/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.conscrypt/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.conscrypt/lib6\"..., 4095) = 33\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.conscrypt/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.conscrypt/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.media/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.media/lib64\", 4095) = 29\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.media/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.media/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe5000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe5000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.os.statsd/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.os.statsd/lib6\"..., 4095) = 33\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.os.statsd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.os.statsd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/apex/com.android.adbd/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.adbd/lib64\", 4095) = 28\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.adbd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/apex/com.android.adbd/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe6000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe6000, 4096, \"bionic_alloc_small_objects\") = 0\r\nopenat(AT_FDCWD, \"/system/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=24576, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/lib64\", 4095) = 13\r\nnewfstatat(AT_FDCWD, \"/system/lib64\", {st_mode=S_IFDIR|0755, st_size=24576, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/system/lib64\", {st_mode=S_IFDIR|0755, st_size=24576, ...}, 0) = 0\r\nopenat(AT_FDCWD, \"/system/system_ext/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = -1 ENOENT (No such file or directory)\r\nnewfstatat(AT_FDCWD, \"/system/system_ext/lib64\", 0x7ff16b3490, 0) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/system/product/lib64\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/product/lib64\", 4095) = 21\r\nnewfstatat(AT_FDCWD, \"/system/product/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/system/product/lib64\", {st_mode=S_IFDIR|0755, st_size=4096, ...}, 0) = 0\r\nmunmap(0x2c38ff7000, 4096)              = 0\r\nmunmap(0x2c38ff5000, 4096)              = 0\r\nmunmap(0x2c38ffb000, 4096)              = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c3901c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c3901c000, 409600, \"linker_alloc\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe7000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe7000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe8000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe8000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fea000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fea000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38feb000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38feb000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fec000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fec000, 4096, \"bionic_alloc_small_objects\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"bionic_alloc_lob\") = 0\r\nmunmap(0x2c38fe9000, 4096)              = 0\r\nopenat(AT_FDCWD, \"/data/local/tmp\", O_RDONLY|O_CLOEXEC|O_PATH) = 3\r\nfstat(3, {st_mode=S_IFDIR|0771, st_size=4096, ...}) = 0\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/data/local/tmp\", 4095) = 15\r\nnewfstatat(AT_FDCWD, \"/data/local/tmp\", {st_mode=S_IFDIR|0771, st_size=4096, ...}, 0) = 0\r\nclose(3)                                = 0\r\nnewfstatat(AT_FDCWD, \"/data/local/tmp\", {st_mode=S_IFDIR|0771, st_size=4096, ...}, 0) = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39080000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39080000, 409600, \"linker_alloc\") = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c390e4000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c390e4000, 409600, \"linker_alloc\") = 0\r\nopenat(AT_FDCWD, \"/data/local/tmp/libdl.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/system/lib64/libdl.so\", O_RDONLY|O_CLOEXEC) = 3\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/apex/com.android.runtime/lib64/\"..., 4096) = 47\r\nfstat(3, {st_mode=S_IFREG|0644, st_size=14176, ...}) = 0\r\nfstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_RELATIME}) = 0\r\npread64(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\20\\0\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c38fe9000\r\nmmap(NULL, 2688, PROT_READ, MAP_PRIVATE, 3, 0x3000) = 0x2c38fed000\r\nmmap(NULL, 272, PROT_READ, MAP_PRIVATE, 3, 0x2000) = 0x2c38fee000\r\nmmap(NULL, 3706, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c38fef000\r\nopenat(AT_FDCWD, \"/data/local/tmp/libc.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopenat(AT_FDCWD, \"/system/lib64/libc.so\", O_RDONLY|O_CLOEXEC) = 4\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/4\", \"/apex/com.android.runtime/lib64/\"..., 4096) = 46\r\nfstat(4, {st_mode=S_IFREG|0644, st_size=978160, ...}) = 0\r\nfstatfs(4, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_RELATIME}) = 0\r\npread64(4, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\260\\3\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 744, PROT_READ, MAP_PRIVATE, 4, 0) = 0x2c38ff0000\r\nmmap(NULL, 4704, PROT_READ, MAP_PRIVATE, 4, 0xee000) = 0x2c38ff1000\r\nmmap(NULL, 4032, PROT_READ, MAP_PRIVATE, 4, 0xb8000) = 0x2c38ff5000\r\nmmap(NULL, 18241, PROT_READ, MAP_PRIVATE, 4, 0xc000) = 0x2c39148000\r\nmmap(NULL, 1306624, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c3914d000\r\nmunmap(0x2c3914d000, 237568)            = 0\r\nmunmap(0x2c39265000, 159744)            = 0\r\nmmap(0x2c39187000, 238260, PROT_READ, MAP_PRIVATE|MAP_FIXED, 4, 0) = 0x2c39187000\r\nmmap(0x2c391c2000, 501968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 4, 0x3b000) = 0x2c391c2000\r\nmmap(0x2c3923d000, 15040, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xb6000) = 0x2c3923d000\r\nmmap(0x2c39241000, 8424, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xb9000) = 0x2c39241000\r\nmmap(0x2c39244000, 135168, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c39244000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39244000, 135168, \".bss\") = 0\r\nmmap(NULL, 520192, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39265000\r\nmunmap(0x2c39265000, 163840)            = 0\r\nmunmap(0x2c39292000, 335872)            = 0\r\nmmap(0x2c3928d000, 2972, PROT_READ, MAP_PRIVATE|MAP_FIXED, 3, 0) = 0x2c3928d000\r\nmmap(0x2c3928e000, 672, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 3, 0x1000) = 0x2c3928e000\r\nmmap(0x2c3928f000, 384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x2000) = 0x2c3928f000\r\nmmap(0x2c39291000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c39291000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39291000, 4096, \".bss\") = 0\r\nrt_sigprocmask(SIG_BLOCK, ~[], [RTMIN], 8) = 0\r\nrt_sigprocmask(SIG_SETMASK, [RTMIN], NULL, 8) = 0\r\nmmap(NULL, 409600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39292000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39292000, 409600, \"linker_alloc\") = 0\r\nmprotect(0x5f94ae2000, 12288, PROT_READ) = 0\r\nmprotect(0x2c3928f000, 4096, PROT_READ) = 0\r\nmprotect(0x2c3923d000, 16384, PROT_READ) = 0\r\nclose(3)                                = 0\r\nclose(4)                                = 0\r\nmunmap(0x2c39148000, 18241)             = 0\r\nmunmap(0x2c38ff5000, 4032)              = 0\r\nmunmap(0x2c38ff1000, 4704)              = 0\r\nmunmap(0x2c38ff0000, 744)               = 0\r\nmunmap(0x2c38fef000, 3706)              = 0\r\nmunmap(0x2c38fee000, 272)               = 0\r\nmunmap(0x2c38fed000, 2688)              = 0\r\nmunmap(0x2c38fe9000, 688)               = 0\r\nmmap(NULL, 20480, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2c38fed000\r\nmprotect(0x2c38fee000, 12288, PROT_READ|PROT_WRITE) = 0\r\nrt_sigprocmask(SIG_BLOCK, ~[], [RTMIN], 8) = 0\r\nrt_sigprocmask(SIG_SETMASK, [RTMIN], NULL, 8) = 0\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fee000, 12288, \"stack_and_tls:main\") = 0\r\nmunmap(0x2c37e8c000, 12288)             = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ|PROT_WRITE) = 0\r\nfaccessat(AT_FDCWD, \"/dev/urandom\", R_OK) = 0\r\ngetrandom(\"\\x69\\x83\\x9e\\xc2\\x0e\\xd6\\x2a\\x9f\\xa3\\x71\\xeb\\x74\\x84\\x23\\xe5\\xc5\\x88\\xa7\\x3e\\x38\\xc0\\xe4\\x40\\x1a\\x6c\\xac\\x2c\\x43\\x46\\x74\\xca\\xde\"..., 40, GRND_NONBLOCK) = 40\r\nmmap(NULL, 1104, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e8c000, 1104, \"arc4random data\") = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ) = 0\r\nnewfstatat(AT_FDCWD, \"/dev/__properties__\", {st_mode=S_IFDIR|0711, st_size=3780, ...}, 0) = 0\r\nfaccessat(AT_FDCWD, \"/dev/__properties__/property_info\", R_OK) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/property_info\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=58100, ...}) = 0\r\nmmap(NULL, 58100, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39148000\r\nclose(3)                                = 0\r\nmmap(NULL, 7400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c37e8d000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c37e8d000, 7400, \"System property context nodes\") = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/properties_serial\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39157000\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:debug_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39265000\r\nclose(3)                                = 0\r\nrt_sigaction(SIGRT_7, {sa_handler=0x2c391d9eb0, sa_mask=[], sa_flags=SA_RESTART}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nprctl(0x37 /* PR_??? */, 0x1, 0, 0, 0)  = -1 EINVAL (Invalid argument)\r\nmprotect(0x2c39247000, 4096, PROT_READ|PROT_WRITE) = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:exported2_default_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c392f6000\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:heapprofd_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c39316000\r\nclose(3)                                = 0\r\nmprotect(0x2c39247000, 4096, PROT_READ) = 0\r\nrt_sigaction(SIGRT_4, {sa_handler=0x2c391c3e38, sa_mask=[], sa_flags=SA_RESTART|SA_SIGINFO}, NULL, 8) = 0\r\nrt_sigaction(SIGRT_6, {sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTART}, {sa_handler=SIG_IGN, sa_mask=[], sa_flags=0}, 8) = 0\r\ngetrandom(\"\\xbd\\x38\\x15\\xfd\", 4, GRND_NONBLOCK) = 4\r\nmmap(NULL, 8858370048, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2c39336000\r\ngetrandom(\"\\x86\\xbb\\x67\\x26\", 4, GRND_NONBLOCK) = 4\r\nsched_getaffinity(0, 128, [0, 1, 2, 3]) = 8\r\nmmap(0x2c69343000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c69343000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c69343000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2c39344000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c39344000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c39344000, 262144, \"scudo:primary\") = 0\r\nfutex(0x2c39244064, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\ngetuid()                                = 2000\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nopenat(AT_FDCWD, \"/system/lib64/libnetd_client.so\", O_RDONLY|O_CLOEXEC) = 3\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/3\", \"/system/lib64/libnetd_client.so\", 4096) = 31\r\nfstat(3, {st_mode=S_IFREG|0644, st_size=33432, ...}) = 0\r\nfstatfs(3, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_NODEV|ST_RELATIME}) = 0\r\npread64(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0000\\0\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c38fe9000\r\nmmap(NULL, 7920, PROT_READ, MAP_PRIVATE, 3, 0x7000) = 0x2c39177000\r\nmmap(NULL, 560, PROT_READ, MAP_PRIVATE, 3, 0x7000) = 0x2c38ff2000\r\nmmap(NULL, 7541, PROT_READ, MAP_PRIVATE, 3, 0) = 0x2c39179000\r\nopenat(AT_FDCWD, \"/system/lib64/libc++.so\", O_RDONLY|O_CLOEXEC) = 4\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/4\", \"/system/lib64/libc++.so\", 4096) = 23\r\nfstat(4, {st_mode=S_IFREG|0644, st_size=710816, ...}) = 0\r\nfstatfs(4, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_NODEV|ST_RELATIME}) = 0\r\npread64(4, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\260\\4\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 4, 0) = 0x2c38ff5000\r\nmmap(NULL, 2688, PROT_READ, MAP_PRIVATE, 4, 0xad000) = 0x2c38ff7000\r\nmmap(NULL, 8080, PROT_READ, MAP_PRIVATE, 4, 0xa8000) = 0x2c3917b000\r\nmmap(NULL, 104313, PROT_READ, MAP_PRIVATE, 4, 0x12000) = 0x2e49336000\r\nopenat(AT_FDCWD, \"/system/lib64/libm.so\", O_RDONLY|O_CLOEXEC) = 5\r\nreadlinkat(AT_FDCWD, \"/proc/self/fd/5\", \"/apex/com.android.runtime/lib64/\"..., 4096) = 46\r\nfstat(5, {st_mode=S_IFREG|0644, st_size=222512, ...}) = 0\r\nfstatfs(5, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=516052, f_bfree=41864, f_bavail=37768, f_files=131072, f_ffree=127160, f_fsid={val=[2209516365, 3809902289]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RDONLY|ST_RELATIME}) = 0\r\npread64(5, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\267\\0\\1\\0\\0\\0\\0\\20\\1\\0\\0\\0\\0\\0\"..., 64, 0) = 64\r\nmmap(NULL, 688, PROT_READ, MAP_PRIVATE, 5, 0) = 0x2c38ffb000\r\nmmap(NULL, 9184, PROT_READ, MAP_PRIVATE, 5, 0x35000) = 0x2c3917d000\r\nmmap(NULL, 480, PROT_READ, MAP_PRIVATE, 5, 0x35000) = 0x2c39180000\r\nmmap(NULL, 6360, PROT_READ, MAP_PRIVATE, 5, 0x2000) = 0x2c39181000\r\nmmap(NULL, 1044480, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2e49350000\r\nmunmap(0x2e49350000, 221184)            = 0\r\nmunmap(0x2e49435000, 106496)            = 0\r\nmmap(0x2e49386000, 304596, PROT_READ, MAP_PRIVATE|MAP_FIXED, 4, 0) = 0x2e49386000\r\nmmap(0x2e493d1000, 363808, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 4, 0x4b000) = 0x2e493d1000\r\nmmap(0x2e4942a000, 25232, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xa4000) = 0x2e4942a000\r\nmmap(0x2e49431000, 697, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 4, 0xaa000) = 0x2e49431000\r\nmmap(0x2e49432000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2e49432000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e49432000, 12288, \".bss\") = 0\r\nmmap(NULL, 520192, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2e49435000\r\nmunmap(0x2e49435000, 57344)             = 0\r\nmunmap(0x2e4947a000, 237568)            = 0\r\nmmap(0x2e49443000, 69508, PROT_READ, MAP_PRIVATE|MAP_FIXED, 5, 0) = 0x2e49443000\r\nmmap(0x2e49454000, 145968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 5, 0x11000) = 0x2e49454000\r\nmmap(0x2e49478000, 712, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 5, 0x35000) = 0x2e49478000\r\nmmap(0x2e49479000, 832, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 5, 0x35000) = 0x2e49479000\r\nmmap(NULL, 520192, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2e4947a000\r\nmunmap(0x2e4947a000, 139264)            = 0\r\nmunmap(0x2e494a5000, 344064)            = 0\r\nmmap(0x2e4949c000, 9276, PROT_READ, MAP_PRIVATE|MAP_FIXED, 3, 0) = 0x2e4949c000\r\nmmap(0x2e4949f000, 15920, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED, 3, 0x3000) = 0x2e4949f000\r\nmmap(0x2e494a3000, 944, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x7000) = 0x2e494a3000\r\nmmap(0x2e494a4000, 945, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x7000) = 0x2e494a4000\r\nmprotect(0x2e494a3000, 4096, PROT_READ) = 0\r\nmmap(NULL, 2147483648, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x2e494a5000\r\nmprotect(0x2c39291000, 4096, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e497a1000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e497a1000) = 0x2e497a1000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49606000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49606000) = 0x2e49606000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49606000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49606000) = 0x2e49606000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49606000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49606000) = 0x2e49606000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e494a5000, 2147483648, \"cfi shadow\") = 0\r\nmprotect(0x2e4942a000, 28672, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e494a5000, 2147483648, \"cfi shadow\") = 0\r\nmprotect(0x2e49478000, 4096, PROT_READ) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c39183000\r\nmprotect(0x2e49617000, 4096, PROT_READ) = 0\r\nmprotect(0x2c39183000, 4096, PROT_READ) = 0\r\nmremap(0x2c39183000, 4096, 4096, MREMAP_MAYMOVE|MREMAP_FIXED, 0x2e49617000) = 0x2e49617000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2e494a5000, 2147483648, \"cfi shadow\") = 0\r\nclose(3)                                = 0\r\nclose(4)                                = 0\r\nclose(5)                                = 0\r\nmunmap(0x2c39181000, 6360)              = 0\r\nmunmap(0x2c39180000, 480)               = 0\r\nmunmap(0x2c3917d000, 9184)              = 0\r\nmunmap(0x2c38ffb000, 688)               = 0\r\nmunmap(0x2e49336000, 104313)            = 0\r\nmunmap(0x2c3917b000, 8080)              = 0\r\nmunmap(0x2c38ff7000, 2688)              = 0\r\nmunmap(0x2c38ff5000, 688)               = 0\r\nmunmap(0x2c39179000, 7541)              = 0\r\nmunmap(0x2c38ff2000, 560)               = 0\r\nmunmap(0x2c39177000, 7920)              = 0\r\nmunmap(0x2c38fe9000, 688)               = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(0x2c49346000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c49346000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c49346000, 262144, \"scudo:primary\") = 0\r\nfutex(0x2e494312f0, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e49434340, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e494312f0, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nfutex(0x2e494312f0, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38fe9000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c38fe9000, 4096, \"atexit handlers\") = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmunmap(0x2c390e4000, 409600)            = 0\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nopenat(AT_FDCWD, \"/dev/__properties__/u:object_r:vendor_socket_hook_prop:s0\", O_RDONLY|O_NOFOLLOW|O_CLOEXEC) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=131072, ...}) = 0\r\nmmap(NULL, 131072, PROT_READ, MAP_SHARED, 3, 0) = 0x2c390e4000\r\nclose(3)                                = 0\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nprctl(PR_GET_DUMPABLE)                  = 1 (SUID_DUMP_USER)\r\nfutex(0x2c3924404c, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nmprotect(0x2c38f7c000, 409600, PROT_READ) = 0\r\nmprotect(0x2c38e9c000, 409600, PROT_READ) = 0\r\nmprotect(0x2c3901c000, 409600, PROT_READ) = 0\r\nmprotect(0x2c39080000, 409600, PROT_READ) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nrt_sigaction(SIGSEGV, NULL, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGSEGV, {sa_handler=0x5f94a4894c, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGFPE, NULL, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGFPE, {sa_handler=0x5f94a48a50, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, {sa_handler=0x2c37ddfc00, sa_mask=~[KILL STOP], sa_flags=SA_ONSTACK|SA_RESTART|SA_SIGINFO}, 8) = 0\r\nrt_sigaction(SIGPIPE, {sa_handler=SIG_IGN, sa_mask=[], sa_flags=SA_RESTART}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nopenat(AT_FDCWD, \"/sys/devices/system/cpu\", O_RDONLY|O_CLOEXEC|O_DIRECTORY) = 3\r\nmmap(0x2d9933e000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2d9933e000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2d9933e000, 262144, \"scudo:primary\") = 0\r\ngetdents64(3, /* 18 entries */, 4200)   = 528\r\ngetdents64(3, /* 0 entries */, 4200)    = 0\r\nclose(3)                                = 0\r\nmembarrier(MEMBARRIER_CMD_QUERY, 0)     = 0x1 (MEMBARRIER_CMD_GLOBAL)\r\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2c38ff2000\r\nmlock(0x2c38ff2000, 4096)               = 0\r\nstatfs(\"/sys/fs/cgroup\", {f_type=CGROUP2_SUPER_MAGIC, f_bsize=4096, f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={val=[0, 0]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_NOSUID|ST_NODEV|ST_NOEXEC|ST_RELATIME}) = 0\r\nopenat(AT_FDCWD, \"/proc/self/mountinfo\", O_RDONLY) = 3\r\nmmap(0x2d79338000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2d79338000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2d79338000, 262144, \"scudo:primary\") = 0\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nmmap(0x2d3933f000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2d3933f000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2d3933f000, 262144, \"scudo:primary\") = 0\r\nread(3, \"18 0 179:19 / / ro,nodev,relatim\"..., 1024) = 1024\r\nmmap(0x2ca9344000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2ca9344000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2ca9344000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2cb9340000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2cb9340000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2cb9340000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2ce9337000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2ce9337000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2ce9337000, 262144, \"scudo:primary\") = 0\r\nread(3, \"tmpfs tmpfs rw,seclabel,mode=755\"..., 1024) = 1024\r\nread(3, \"v /apex/com.android.resolv ro,re\"..., 1024) = 1024\r\nread(3, \" /apex/com.android.runtime ro,re\"..., 1024) = 1024\r\nread(3, \"roid.tethering.inprocess /apex/c\"..., 1024) = 1024\r\nread(3, \"ec,relatime shared:17 - cgroup n\"..., 1024) = 1024\r\nread(3, \"ev,noatime shared:27 - ext4 /dev\"..., 1024) = 1024\r\nread(3, \"ev/block/platform/sdhci-tegra.3/\"..., 1024) = 1024\r\nread(3, \"w,nosuid,nodev,noexec,noatime sh\"..., 1024) = 1024\r\nread(3, \"suid=1023,fsgid=1023,gid=9997,mu\"..., 1024) = 1024\r\nread(3, \"c,noatime shared:32 - sdcardfs /\"..., 1024) = 761\r\nread(3, \"\", 1024)                       = 0\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/proc/self/cgroup\", O_RDONLY) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nread(3, \"6:schedtune:/\\n5:memory:/\\n4:cpuse\"..., 1024) = 86\r\nclose(3)                                = 0\r\nsched_getaffinity(23894, 128, [0, 1, 2, 3]) = 8\r\nstatfs(\"/sys/fs/cgroup\", {f_type=CGROUP2_SUPER_MAGIC, f_bsize=4096, f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={val=[0, 0]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_NOSUID|ST_NODEV|ST_NOEXEC|ST_RELATIME}) = 0\r\nopenat(AT_FDCWD, \"/proc/self/mountinfo\", O_RDONLY) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nread(3, \"18 0 179:19 / / ro,nodev,relatim\"..., 1024) = 1024\r\nread(3, \"tmpfs tmpfs rw,seclabel,mode=755\"..., 1024) = 1024\r\nread(3, \"v /apex/com.android.resolv ro,re\"..., 1024) = 1024\r\nread(3, \" /apex/com.android.runtime ro,re\"..., 1024) = 1024\r\nread(3, \"roid.tethering.inprocess /apex/c\"..., 1024) = 1024\r\nread(3, \"ec,relatime shared:17 - cgroup n\"..., 1024) = 1024\r\nread(3, \"ev,noatime shared:27 - ext4 /dev\"..., 1024) = 1024\r\nread(3, \"ev/block/platform/sdhci-tegra.3/\"..., 1024) = 1024\r\nread(3, \"w,nosuid,nodev,noexec,noatime sh\"..., 1024) = 1024\r\nread(3, \"suid=1023,fsgid=1023,gid=9997,mu\"..., 1024) = 1024\r\nread(3, \"c,noatime shared:32 - sdcardfs /\"..., 1024) = 761\r\nread(3, \"\", 1024)                       = 0\r\nclose(3)                                = 0\r\nopenat(AT_FDCWD, \"/proc/self/cgroup\", O_RDONLY) = 3\r\nfstat(3, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0\r\nread(3, \"6:schedtune:/\\n5:memory:/\\n4:cpuse\"..., 1024) = 86\r\nclose(3)                                = 0\r\nsched_getaffinity(23894, 128, [0, 1, 2, 3]) = 8\r\nopenat(AT_FDCWD, \"/dev/stune//cpu.max\", O_RDONLY) = -1 ENOENT (No such file or directory)\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmmap(0x2c99340000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c99340000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c99340000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2c8933c000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c8933c000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c8933c000, 262144, \"scudo:primary\") = 0\r\nmmap(0x2c7933b000, 262144, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x2c7933b000\r\nprctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME, 0x2c7933b000, 262144, \"scudo:primary\") = 0\r\nrt_sigaction(SIGRT_8, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nrt_sigaction(SIGRT_8, {sa_handler=0x5f94a44fb8, sa_mask=[], sa_flags=SA_RESTART|SA_SIGINFO}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\r\nfutex(0x5f94af4b10, FUTEX_WAKE_PRIVATE, 2147483647) = 0\r\nopenat(AT_FDCWD, \"/dev/stune//memory.max\", O_RDONLY) = -1 ENOENT (No such file or directory)\r\nsysinfo({uptime=71185, loads=[13344, 17408, 15936], totalram=3093553152, freeram=122851328, sharedram=18128896, bufferram=19349504, totalswap=536866816, freeswap=344616960, procs=1612, totalhigh=0, freehigh=0, mem_unit=1}) = 0\r\nmmap(NULL, 274877911040, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = -1 ENOMEM (Out of memory)\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ|PROT_WRITE) = 0\r\nmprotect(0x2c38fe9000, 4096, PROT_READ) = 0\r\nexit_group(-1)                          = ?\r\n+++ exited with 255 +++\r\n```\r\n\u003c/details\u003e\r\n\r\nIt looks like the failure is caused by `mmap` failing with `ENOMEM`.\r\nSetting `DOTNET_GCHeapHardLimit` to lower values solves the issue.\r\n\r\nI tried to find the root cause of the `mmap` failure but was not able to. Empirically I found that on this hardware, running the elf in an infinite bash loop that checks the exit code, setting `DOTNET_GCHeapHardLimit` to:\r\n- 64+GB is guaranteed to fail\r\n- above 40GB fails every second run of the binary\r\n- 32+GB fails every 20th run or so\r\n- Setting it below 32GB doesn\u0027t fail\r\n\r\nI tried to make a minimal C program that does a single `mmap` to reproduce the issue, but interestingly enough, it never fails, even with max long long int value.\r\n\r\nThat leads to the conclusion that the issue is caused not by just a single `mmap`, but by a combination of syscalls.\r\n\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eC program:\u003c/summary\u003e\r\n\r\n```c\r\n#include \u003cstdio.h\u003e\r\n#include \u003cstdlib.h\u003e\r\n#include \u003cunistd.h\u003e\r\n#include \u003cerrno.h\u003e\r\n#include \u003csys/mman.h\u003e\r\n\r\nint main(int argc, char *argv[]) {\r\n    size_t size = 0;\r\n    if (sscanf(argv[1], \"%zu\", \u0026size) != 1) {\r\n      printf(\"invalid arg\\n\");\r\n      return 1;\r\n    }\r\n\r\n    printf(\"mapping %zu\\n\", size);\r\n    void *ptr = mmap(NULL, size, PROT_NONE , MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\r\n\r\n    if (ptr \u003c= 0) {\r\n        perror(\"mmap failed\\n\");\r\n        return 1;\r\n    } else {\r\n        printf(\"mmap succeeded\\n\");\r\n        return 0;\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n### Reproduction Steps\r\n\r\nWith Android NDK r26b in PATH:\r\n\r\n```sh\r\ndotnet new console -o HelloWorld --aot\r\ncd HelloWorld\r\ndotnet publish -r linux-bionic-arm64 -p:DisableUnsupportedError=true -p:PublishAotUsingRuntimePack=true -p:StripSymbols=false\r\nadb push ./bin/Release/net8.0/linux-bionic-arm64/publish/HelloWorld.dll /data/local/tmp/\r\nadb shell /data/local/tmp/HelloWorld\r\n```\r\n\r\n### Expected behavior\r\n\r\nShould output `Hello, World!`\r\n\r\n### Actual behavior\r\n\r\nExit code 255 and `strace` shows `mmap` failed with `ENOMEM`\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nSetting `DOTNET_GCHeapHardLimit` to some small value. Since I\u0027m running the code on an Android device, and the intended use is to run it via JNI from Java code, I can set env before doing a JNI call from Java.\r\n\r\n### Configuration\r\n\r\n- dotnet 8.0.100\r\n- Android TV, Android 11,  4.9.141-tegra-gfad87a91fd8\r\n- Nvidia Shield TV 2015, `NVIDIA/foster_e/foster:11/RQ1A.210105.003/7825230_3167.5736:user/release-keys`\r\n- aarch64\r\n- No such issue on other Android devices I have\r\n\r\n```\r\n[ro.build.characteristics]: [tv]\r\n[ro.build.date]: [Sun Oct 16 20:55:18 PDT 2022]\r\n[ro.build.date.utc]: [1665978918]\r\n[ro.build.description]: [foster_e-user 11 RQ1A.210105.003 7825230_3167.5736 release-keys]\r\n[ro.build.display.id]: [RQ1A.210105.003.7825230_3167.5736]\r\n[ro.build.fingerprint]: [NVIDIA/foster_e/foster:11/RQ1A.210105.003/7825230_3167.5736:user/release-keys]\r\n[ro.build.flavor]: [foster_e-user]\r\n[ro.build.host]: [mobile-u64-5308-d7000]\r\n[ro.build.id]: [RQ1A.210105.003]\r\n[ro.build.product]: [foster]\r\n[ro.build.system_root_image]: [true]\r\n[ro.build.tags]: [release-keys]\r\n[ro.build.type]: [user]\r\n[ro.build.user]: [NVIDIA]\r\n[ro.build.version.all_codenames]: [REL]\r\n[ro.build.version.base_os]: []\r\n[ro.build.version.codename]: [REL]\r\n[ro.build.version.incremental]: [7825230_3167.5736]\r\n[ro.build.version.min_supported_target_sdk]: [23]\r\n[ro.build.version.ota]: [9.1.1(33.2.0.157)]\r\n[ro.build.version.preview_sdk]: [0]\r\n[ro.build.version.preview_sdk_fingerprint]: [REL]\r\n[ro.build.version.release]: [11]\r\n[ro.build.version.release_or_codename]: [11]\r\n[ro.build.version.sdk]: [30]\r\n[ro.build.version.security_patch]: [2022-04-05]\r\n```\r\n\r\n### Other information\r\n\r\nRelated to #85650\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enikarh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`, `area-Codegen-AOT-mono`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-07T19:36:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wEdBD",
                                           "createdAt":  "2024-01-07T23:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@dotnet/gc this looks the same as https://github.com/dotnet/runtime/issues/95257#issuecomment-1833251006. If it is, this is the second customer report.",
                                           "updatedAt":  "2024-01-07T23:30:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wE75H",
                                           "createdAt":  "2024-01-08T03:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "It seems to be caused by W^X, try setting the environment variable `DOTNET_EnableWriteXorExecute=0` and see if it resolves your issue. ",
                                           "updatedAt":  "2024-01-08T03:38:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wFYe_",
                                           "createdAt":  "2024-01-08T06:45:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It seems to be caused by W^X, try setting the environment variable DOTNET_EnableWriteXorExecute=0 and see if it resolves your issue.\r\n\r\nThis won\u0027t help. W^X is not applicable to AOT. `DOTNET_EnableWriteXorExecute` has no effect for AOT compiled binaries.",
                                           "updatedAt":  "2024-01-08T06:45:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wGHRx",
                                           "createdAt":  "2024-01-08T09:34:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nikarh",
                                           "body":  "As mentioned above, `DOTNET_EnableWriteXorExecute=0 ./HelloWorld` did not work. For now, I have only this workaround -  `DOTNET_GCHeapHardLimit=400000000 ./HelloWorld`",
                                           "updatedAt":  "2024-01-08T09:34:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wK5vf",
                                           "createdAt":  "2024-01-08T22:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\\+ @mangod9 For investigation. I think it would be good to ensure our device support is as wide as possible now that Native AOT makes it more appropriate to target niche devices.",
                                           "updatedAt":  "2024-01-08T22:15:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSEgu",
                                           "createdAt":  "2024-01-09T21:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "\u003e @dotnet/gc this looks the same as [#95257 (comment)](https://github.com/dotnet/runtime/issues/95257#issuecomment-1833251006). If it is, this is the second customer report.\r\n\r\nIs this a scenario where multiple GCs are being loaded within the process? ",
                                           "updatedAt":  "2024-01-09T21:01:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSFKv",
                                           "createdAt":  "2024-01-09T21:03:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "No, just one. The mmap fails earlier ",
                                           "updatedAt":  "2024-01-09T21:03:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSgZq",
                                           "createdAt":  "2024-01-09T22:26:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Adding @janvorli since some fixes were done in this space in 9 around retrieving available virtual memory. Looks like the large reservation is failing. ",
                                           "updatedAt":  "2024-01-09T22:26:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSlM-",
                                           "createdAt":  "2024-01-09T22:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@nikarh is it possible that the maximum usable virtual memory size is limited on this device? What does `ulimit -v` show?",
                                           "updatedAt":  "2024-01-09T22:46:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSl4O",
                                           "createdAt":  "2024-01-09T22:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ah, I am sorry I\u0027ve missed that you\u0027ve tested creating a large mapping using a C test program. Then the virtual memory size is not limited and the problem would be caused by used physical memory amount.",
                                           "updatedAt":  "2024-01-09T22:49:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSm-E",
                                           "createdAt":  "2024-01-09T22:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Actually, the reservation that causes the failure is also just virtual memory, so it is strange that your testing C program and dotnet app behaves differently.",
                                           "updatedAt":  "2024-01-09T22:53:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wvVVw",
                                           "createdAt":  "2024-01-15T07:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nikarh",
                                           "body":  "\u003e @nikarh is it possible that the maximum usable virtual memory size is limited on this device? What does `ulimit -v` show?\r\n\r\nUnfortunately not the case:\r\n\r\n```\r\n$ ulimit -v\r\nunlimited\r\n```",
                                           "updatedAt":  "2024-01-15T07:24:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xFXxj",
                                           "createdAt":  "2024-01-17T22:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@nikarh one more idea - can you please share the output of `cat /proc/sys/vm/overcommit_memory`? If that was 2, it would explain the failure. That setting would indicate that the OS would deny any requesting more virtual memory space than there is the size of swap + certain percentage of total physical memory (`cat /proc/sys/vm/overcommit_ratio` would dump that percentage).\r\nAlthough if that was the culprit, I would expect the allocation to fail even when you\u0027ve set the DOTNET_GCHeapHardLimit slightly below the 32GB, unless you have a really large swap.",
                                           "updatedAt":  "2024-01-17T22:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xIO9j",
                                           "createdAt":  "2024-01-18T08:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nikarh",
                                           "body":  "\u003e @nikarh one more idea - can you please share the output of `cat /proc/sys/vm/overcommit_memory`? If that was 2, it would explain the failure. That setting would indicate that the OS would deny any requesting more virtual memory space than there is the size of swap + certain percentage of total physical memory (`cat /proc/sys/vm/overcommit_ratio` would dump that percentage). Although if that was the culprit, I would expect the allocation to fail even when you\u0027ve set the DOTNET_GCHeapHardLimit slightly below the 32GB, unless you have a really large swap.\r\n\r\nUnfortunately, the device is not rooted, and the `shell` user lacks read permissions to `/proc/sys/vm` on this device.",
                                           "updatedAt":  "2024-01-18T09:35:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EA61s",
                                           "createdAt":  "2024-07-08T17:56:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @nikarh, are you still hitting this issue for your scenario? ",
                                           "updatedAt":  "2024-07-08T17:56:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EKVF7",
                                           "createdAt":  "2024-07-09T10:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpnPpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-07-13T05:33:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Hey @nikarh, are you still hitting this issue for your scenario?\r\n\r\nWe have several user reports related to the GC reserving huge amounts of memory on various devices with likely customized linux kernels. https://github.com/dotnet/runtime/issues/95257#issuecomment-1833251006 was the other one. Both are mmap failures. It would be nice if the GC could scale the reservation down to a more reasonable amount given the device - e.g. the other issue I linked seems to imply that if one attempts to reserve 256 GB twice, the second reservation is going to fail - i.e. the GC is doing something within the process that does not coexist very well with someone else also wanting to allocate memory (it\u0027s not clear to me how big is the total limit, but there apparently is a limit and the GC is pushing the process close to it).",
                                           "updatedAt":  "2024-07-09T10:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oFtbu",
                                           "createdAt":  "2025-04-22T04:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Another customer hit the \"can\u0027t reserve 256 GB of address space twice\" issue over at https://github.com/dotnet/runtime/issues/114193#issuecomment-2820061270.",
                                           "updatedAt":  "2025-04-22T04:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oFusO",
                                           "createdAt":  "2025-04-22T04:58:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "so these are failing on devices which have unconventional memory limits? Looking through the history doesnt seem like we know why exactly the virtual reservation fails? ",
                                           "updatedAt":  "2025-04-22T04:58:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oFv4X",
                                           "createdAt":  "2025-04-22T05:02:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The latest issue has a customer trying to solve this problem right now, so it\u0027s possible to ask questions there. From the strace log pasted there, it looks like this machine has\n\n```\nsysinfo({uptime=8612, loads=[71616, 79904, 76704], totalram=8273240064, freeram=2338627584, sharedram=60420096, bufferram=192274432, totalswap=9971953664, freeswap=9971953664, procs=1369, totalhigh=0, freehigh=0, mem_unit=1}) = 0\n```\n\n8 GB of RAM and 8 GB of swap in total. I don\u0027t nearly know enough about memory on Linux to ask additional questions. In my layman eyes, I don\u0027t see why we would reserve more than 16 GB of RAM in such configuration for example.",
                                           "updatedAt":  "2025-04-22T05:02:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oFxCq",
                                           "createdAt":  "2025-04-22T05:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Remind me again whether NativeAOT honors env. vars? DOTNET_GCRegionRange can configure the amount of initial reservation. ",
                                           "updatedAt":  "2025-04-22T05:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oFy2R",
                                           "createdAt":  "2025-04-22T05:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Remind me again whether NativeAOT honors env. vars? DOTNET_GCRegionRange can configure the amount of initial reservation.\n\nIt does, as written in the top-post, the user in **this** issue was able to work around with `DOTNET_GCHeapHardLimit`. The user in https://github.com/dotnet/runtime/issues/95257#issuecomment-1838075574 was also able to work around with tweaking GC settings. The user in the latest issue (https://github.com/dotnet/runtime/issues/114193#issuecomment-2814127354) wasn\u0027t able to work around yet, not clear why, I suspect problem with actually setting the correct env variable.",
                                           "updatedAt":  "2025-04-22T05:11:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oF0hy",
                                           "createdAt":  "2025-04-22T05:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "ok I have asked them about DOTNET_GCRegionRange, if that helps. ",
                                           "updatedAt":  "2025-04-22T05:17:05Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "AOT built binary for aarch64 android fails to run on Nvidia Shield TV",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97186",
        "createdAt":  "2024-01-18T23:36:21Z",
        "number":  97186,
        "author":  "jaredpar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1SDLw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jjonescz",
                                            "createdAt":  "2024-01-19T09:18:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-07T17:50:55Z",
        "body":  "### Description\n\nThe runtime is crashing on OSX when running the compiler unit tests. There is no specific test that causes the crash but the crash is very consistent (approaching 100%). \r\n\r\nUnfortunately, due to this being a OSX dump, the dump files are too large for us to upload a full dump. The best we can get is a mini dump and json report: \r\n\r\n- [crash.dmp][1]\r\n- [crash.dmp.json][2]\r\n\r\nThis is blocking our ability to test on OSX because there is no specific test to disable to work around the crash that we can see. The same tests pass just fine on Windows and Linux.\r\n\r\n[1]: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-roslyn-refs-pull-71706-merge-f38fe728c96a430d94/Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests_Microsoft.CodeAnalysis.Rebuild.UnitTests_Microsoft.CodeAnalysis.Scripting.UnitTests_Microsoft.CodeAnaly..._3/1/crash.34178.dotnet.dmp?helixlogtype=result\r\n[2]: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-roslyn-refs-pull-71706-merge-f38fe728c96a430d94/Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests_Microsoft.CodeAnalysis.Rebuild.UnitTests_Microsoft.CodeAnalysis.Scripting.UnitTests_Microsoft.CodeAnaly..._3/1/crash.34178.dotnet.dmp.crashreport.json?helixlogtype=result\n\n### Reproduction Steps\n\nRun the C# compiler tests in CI. Any build in this pipeline with the `main` branch filter will demonstrate the crash. \r\n\r\nhttps://dnceng-public.visualstudio.com/public/_build?definitionId=95\u0026_a=summary\u0026branchFilter=319%2C319\n\n### Expected behavior\n\nUnit tests pass\n\n### Actual behavior\n\nCrashes with the following stack trace: \r\n\r\n```\r\n__wait4\r\nPROCCreateCrashDump(std::__1::vector\u003cchar const*, std::__1::allocator\u003cchar const*\u003e\u003e\u0026, char*, int, bool)\r\nPROCCreateCrashDumpIfEnabled\r\ninvoke_previous_action(sigaction*, int, __siginfo*, void*, bool)\r\n_sigtramp\r\nWKS::gc_heap::mark_ro_segments()\r\nWKS::gc_heap::mark_phase(int, int)\r\nWKS::gc_heap::gc1()\r\nWKS::gc_heap::garbage_collect(int)\r\nWKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason)\r\nWKS::gc_heap::try_allocate_more_space(alloc_context*, unsigned long, unsigned int, int)\r\nWKS::GCHeap::Alloc(gc_alloc_context*, unsigned long, unsigned int)\r\nAlloc(unsigned long, GC_ALLOC_FLAGS)\r\nAllocateObject(MethodTable*)\r\nMethodTable::FastBox(void**)\r\nJIT_Box(CORINFO_CLASS_STRUCT_*, void*)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.WrapStructural_SimpleInt.Equals(Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt)\r\nSystem.Linq.Enumerable.Contains[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]](System.Collections.Generic.IEnumerable`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e, Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, System.Collections.Generic.IEqualityComparer`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.TestBase`1[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]].CreateSortedSet(System.Collections.Generic.IEnumerable`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e, Int32, Int32)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.TestBase`1[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]].CreateEnumerable(EnumerableType, System.Collections.Generic.IEnumerable`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e, Int32, Int32, Int32)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.ISet_Generic_Tests`1[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]].ISet_Generic_Overlaps(EnumerableType, Int32, Int32, Int32, Int32)\r\nDynamicClass.InvokeStub_ISet_Generic_Tests`1.ISet_Generic_Overlaps(System.Object, System.Span`1\u003cSystem.Object\u003e)\r\nSystem.Reflection.MethodBaseInvoker.InvokeWithManyArgs(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].CallTestMethod(System.Object)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib]].\u003cInvokeTestMethodAsync\u003eb__1()\r\nXunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet]](\u003cAggregateAsync\u003ed__4 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet]](\u003cAggregateAsync\u003ed__4 ByRef)\r\nXunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib]].\u003cInvokeTestMethodAsync\u003eb__0()\r\nXunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core]](\u003cRunAsync\u003ed__9 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core]](\u003cRunAsync\u003ed__9 ByRef)\r\nXunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\nXunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].InvokeTestMethodAsync(System.Object)\r\nXunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].\u003cRunAsync\u003eb__47_0()\r\nXunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\nXunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.Decimal\u003e\u003e)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\nXunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\nXunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\nXunit.Sdk.TestRunner`1+\u003c\u003ec__DisplayClass43_0[[System.__Canon, System.Private.CoreLib]].\u003cRunAsync\u003eb__0()\r\nXunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.__Canon\u003e\u003e)\r\nXunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__43\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__43\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestCaseRunner.RunTestAsync()\r\nXunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__19\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__19\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestCase.RunAsync(Xunit.Abstractions.IMessageSink, Xunit.Sdk.IMessageBus, System.Object[], Xunit.Sdk.ExceptionAggregator, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)\r\nXunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCasesAsync\u003ed__32\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCasesAsync\u003ed__32\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCasesAsync()\r\nXunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__31\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__31\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, System.Object[])\r\nXunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestMethodsAsync\u003ed__38\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestMethodsAsync\u003ed__38\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestMethodsAsync()\r\nXunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__37\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__37\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(Xunit.Abstractions.ITestClass, Xunit.Abstractions.IReflectionTypeInfo, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e)\r\nXunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestClassesAsync\u003ed__28\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestClassesAsync\u003ed__28\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestClassesAsync()\r\nXunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__27\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__27\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(Xunit.Sdk.IMessageBus, Xunit.Abstractions.ITestCollection, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__42\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__42\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.XunitTestAssemblyRunner.\u003c\u003en__0(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14, xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__14 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14, xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__14 ByRef)\r\nXunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__41\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__41\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8, xunit.execution.dotnet]](\u003cRunTestCases\u003ed__8 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8, xunit.execution.dotnet]](\u003cRunTestCases\u003ed__8 ByRef)\r\nXunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\nXunit.Sdk.TestFrameworkExecutor`1[[System.__Canon, System.Private.CoreLib]].RunTests(System.Collections.Generic.IEnumerable`1\u003cXunit.Abstractions.ITestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\nXunit.Xunit2.RunTests(System.Collections.Generic.IEnumerable`1\u003cXunit.Abstractions.ITestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\nXunit.Runner.VisualStudio.VsTestRunner.RunTestsInAssembly(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle, LoggerHelper, Xunit.Runner.VisualStudio.TestPlatformContext, Xunit.Runner.VisualStudio.RunSettings, Xunit.IMessageSinkWithTypes, Xunit.Runner.VisualStudio.AssemblyRunInfo)\r\nXunit.Runner.VisualStudio.VsTestRunner+\u003c\u003ec__DisplayClass20_0.\u003cRunTests\u003eb__4(Xunit.Runner.VisualStudio.AssemblyRunInfo)\r\nSystem.Collections.Generic.List`1[[System.__Canon, System.Private.CoreLib]].ForEach(System.Action`1\u003cSystem.__Canon\u003e)\r\nXunit.Runner.VisualStudio.VsTestRunner.RunTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle, LoggerHelper, Xunit.Runner.VisualStudio.TestPlatformContext, Xunit.Runner.VisualStudio.RunSettings, System.Func`1\u003cSystem.Collections.Generic.List`1\u003cXunit.Runner.VisualStudio.AssemblyRunInfo\u003e\u003e)\r\nXunit.Runner.VisualStudio.VsTestRunner.Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.RunTests(System.Collections.Generic.IEnumerable`1\u003cSystem.String\u003e, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)\r\nMicrosoft.VisualStudio.TestPlatform.Common.ExtensionDecorators.SerialTestRunDecorator.RunTests(System.Collections.Generic.IEnumerable`1\u003cSystem.String\u003e, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.InvokeExecutor(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2\u003cMicrosoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities\u003e, System.Tuple`2\u003cSystem.Uri,System.String\u003e, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTestInternalWithExecutors(System.Collections.Generic.IEnumerable`1\u003cSystem.Tuple`2\u003cSystem.Uri,System.String\u003e\u003e, Int64)\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTestsInternal()\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTests()\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun(System.Collections.Generic.Dictionary`2\u003cSystem.String,System.Collections.Generic.IEnumerable`1\u003cSystem.String\u003e\u003e, System.String, System.String, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)\r\nMicrosoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler+\u003c\u003ec__DisplayClass45_4.\u003cOnMessageReceived\u003eb__3()\r\nMicrosoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler+\u003c\u003ec.\u003c.ctor\u003eb__31_2(System.Action)\r\nMicrosoft.VisualStudio.TestPlatform.Utilities.JobQueue`1[[System.__Canon, System.Private.CoreLib]].SafeProcessJob(System.__Canon)\r\nMicrosoft.VisualStudio.TestPlatform.Utilities.JobQueue`1[[System.__Canon, System.Private.CoreLib]].BackgroundJobProcessor(System.String)\r\nMicrosoft.VisualStudio.TestPlatform.Utilities.JobQueue`1[[System.__Canon, System.Private.CoreLib]].\u003c.ctor\u003eb__16_0()\r\nSystem.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\nSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\nSystem.Threading.Thread.StartCallback()\r\nDispatchCallSimple(unsigned long*, unsigned int, unsigned long long, unsigned int)\r\nThreadNative::KickOffThread_Worker(void*)\r\nManagedThreadBase_DispatchOuter(ManagedThreadCallState*)\r\nManagedThreadBase::KickOff(void (*)(void*), void*)\r\nThreadNative::KickOffThread(void*)\r\nCorUnix::CPalThread::ThreadEntry(void*)\r\n_pthread_start\r\n```\n\n### Regression?\n\nYes this is a recent regression that came around the time of adopting the .NET 8 SDK GA\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\nComplicated\n\n### Other information\n\nAt the moment we are collecting OSX dumps with the following settings: \r\n\r\n```sh\r\nDOTNET_DbgEnableMiniDump=1\r\nDOTNET_DbgMiniDumpName=/cores/crash.%d.%e.dmp\r\nDOTNET_DbgMiniDumpType=1\r\nDOTNET_EnableCrashReport=1\r\n```\r\n\r\nHappy to adjust this as need to help with the investigation. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgscyew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xNmC8",
                                           "createdAt":  "2024-01-18T23:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe runtime is crashing on OSX when running the compiler unit tests. There is no specific test that causes the crash but the crash is very consistent (approaching 100%). \r\n\r\nUnfortunately, due to this being a OSX dump, the dump files are too large for us to upload a full dump. The best we can get is a mini dump and json report: \r\n\r\n- [crash.dmp][1]\r\n- [crash.dmp.json][2]\r\n\r\nThis is blocking our ability to test on OSX because there is no specific test to disable to work around the crash that we can see. The same tests pass just fine on Windows and Linux.\r\n\r\n[1]: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-roslyn-refs-pull-71706-merge-f38fe728c96a430d94/Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests_Microsoft.CodeAnalysis.Rebuild.UnitTests_Microsoft.CodeAnalysis.Scripting.UnitTests_Microsoft.CodeAnaly..._3/1/crash.34178.dotnet.dmp?helixlogtype=result\r\n[2]: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-roslyn-refs-pull-71706-merge-f38fe728c96a430d94/Microsoft.CodeAnalysis.CSharp.Syntax.UnitTests_Microsoft.CodeAnalysis.Rebuild.UnitTests_Microsoft.CodeAnalysis.Scripting.UnitTests_Microsoft.CodeAnaly..._3/1/crash.34178.dotnet.dmp.crashreport.json?helixlogtype=result\n\n### Reproduction Steps\n\nRun the C# compiler tests in CI. Any build in this pipeline with the `main` branch filter will demonstrate the crash. \r\n\r\nhttps://dnceng-public.visualstudio.com/public/_build?definitionId=95\u0026_a=summary\u0026branchFilter=319%2C319\n\n### Expected behavior\n\nUnit tests pass\n\n### Actual behavior\n\nCrashes with the following stack trace: \r\n\r\n```\r\n__wait4\r\nPROCCreateCrashDump(std::__1::vector\u003cchar const*, std::__1::allocator\u003cchar const*\u003e\u003e\u0026, char*, int, bool)\r\nPROCCreateCrashDumpIfEnabled\r\ninvoke_previous_action(sigaction*, int, __siginfo*, void*, bool)\r\n_sigtramp\r\nWKS::gc_heap::mark_ro_segments()\r\nWKS::gc_heap::mark_phase(int, int)\r\nWKS::gc_heap::gc1()\r\nWKS::gc_heap::garbage_collect(int)\r\nWKS::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason)\r\nWKS::gc_heap::try_allocate_more_space(alloc_context*, unsigned long, unsigned int, int)\r\nWKS::GCHeap::Alloc(gc_alloc_context*, unsigned long, unsigned int)\r\nAlloc(unsigned long, GC_ALLOC_FLAGS)\r\nAllocateObject(MethodTable*)\r\nMethodTable::FastBox(void**)\r\nJIT_Box(CORINFO_CLASS_STRUCT_*, void*)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.WrapStructural_SimpleInt.Equals(Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt)\r\nSystem.Linq.Enumerable.Contains[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]](System.Collections.Generic.IEnumerable`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e, Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, System.Collections.Generic.IEqualityComparer`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.TestBase`1[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]].CreateSortedSet(System.Collections.Generic.IEnumerable`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e, Int32, Int32)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.TestBase`1[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]].CreateEnumerable(EnumerableType, System.Collections.Generic.IEnumerable`1\u003cMicrosoft.CodeAnalysis.UnitTests.Collections.SimpleInt\u003e, Int32, Int32, Int32)\r\nMicrosoft.CodeAnalysis.UnitTests.Collections.ISet_Generic_Tests`1[[Microsoft.CodeAnalysis.UnitTests.Collections.SimpleInt, Microsoft.CodeAnalysis.UnitTests]].ISet_Generic_Overlaps(EnumerableType, Int32, Int32, Int32, Int32)\r\nDynamicClass.InvokeStub_ISet_Generic_Tests`1.ISet_Generic_Overlaps(System.Object, System.Span`1\u003cSystem.Object\u003e)\r\nSystem.Reflection.MethodBaseInvoker.InvokeWithManyArgs(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].CallTestMethod(System.Object)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib]].\u003cInvokeTestMethodAsync\u003eb__1()\r\nXunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet]](\u003cAggregateAsync\u003ed__4 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet]](\u003cAggregateAsync\u003ed__4 ByRef)\r\nXunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_1[[System.__Canon, System.Private.CoreLib]].\u003cInvokeTestMethodAsync\u003eb__0()\r\nXunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core]](\u003cRunAsync\u003ed__9 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core]](\u003cRunAsync\u003ed__9 ByRef)\r\nXunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\nXunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].InvokeTestMethodAsync(System.Object)\r\nXunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object)\r\nXunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].\u003cRunAsync\u003eb__47_0()\r\nXunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef)\r\nXunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.Decimal\u003e\u003e)\r\nXunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\nXunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet]](\u003cInvokeTestAsync\u003ed__4 ByRef)\r\nXunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\nXunit.Sdk.TestRunner`1+\u003c\u003ec__DisplayClass43_0[[System.__Canon, System.Private.CoreLib]].\u003cRunAsync\u003eb__0()\r\nXunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.__Canon\u003e\u003e)\r\nXunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__43\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__43\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestCaseRunner.RunTestAsync()\r\nXunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__19\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__19\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestCase.RunAsync(Xunit.Abstractions.IMessageSink, Xunit.Sdk.IMessageBus, System.Object[], Xunit.Sdk.ExceptionAggregator, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)\r\nXunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCasesAsync\u003ed__32\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCasesAsync\u003ed__32\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCasesAsync()\r\nXunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__31\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__31\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, System.Object[])\r\nXunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestMethodsAsync\u003ed__38\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestMethodsAsync\u003ed__38\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestMethodsAsync()\r\nXunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__37\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__37\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(Xunit.Abstractions.ITestClass, Xunit.Abstractions.IReflectionTypeInfo, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e)\r\nXunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestClassesAsync\u003ed__28\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestClassesAsync\u003ed__28\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestClassesAsync()\r\nXunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__27\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__27\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(Xunit.Sdk.IMessageBus, Xunit.Abstractions.ITestCollection, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__42\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__42\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.XunitTestAssemblyRunner.\u003c\u003en__0(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14, xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__14 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14, xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__14 ByRef)\r\nXunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\nXunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__41\u003cSystem.__Canon\u003e ByRef)\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__41\u003cSystem.__Canon\u003e ByRef)\r\nXunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\nXunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8.MoveNext()\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8, xunit.execution.dotnet]](\u003cRunTestCases\u003ed__8 ByRef)\r\nSystem.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8, xunit.execution.dotnet]](\u003cRunTestCases\u003ed__8 ByRef)\r\nXunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\nXunit.Sdk.TestFrameworkExecutor`1[[System.__Canon, System.Private.CoreLib]].RunTests(System.Collections.Generic.IEnumerable`1\u003cXunit.Abstractions.ITestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\nXunit.Xunit2.RunTests(System.Collections.Generic.IEnumerable`1\u003cXunit.Abstractions.ITestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\nXunit.Runner.VisualStudio.VsTestRunner.RunTestsInAssembly(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle, LoggerHelper, Xunit.Runner.VisualStudio.TestPlatformContext, Xunit.Runner.VisualStudio.RunSettings, Xunit.IMessageSinkWithTypes, Xunit.Runner.VisualStudio.AssemblyRunInfo)\r\nXunit.Runner.VisualStudio.VsTestRunner+\u003c\u003ec__DisplayClass20_0.\u003cRunTests\u003eb__4(Xunit.Runner.VisualStudio.AssemblyRunInfo)\r\nSystem.Collections.Generic.List`1[[System.__Canon, System.Private.CoreLib]].ForEach(System.Action`1\u003cSystem.__Canon\u003e)\r\nXunit.Runner.VisualStudio.VsTestRunner.RunTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle, LoggerHelper, Xunit.Runner.VisualStudio.TestPlatformContext, Xunit.Runner.VisualStudio.RunSettings, System.Func`1\u003cSystem.Collections.Generic.List`1\u003cXunit.Runner.VisualStudio.AssemblyRunInfo\u003e\u003e)\r\nXunit.Runner.VisualStudio.VsTestRunner.Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor.RunTests(System.Collections.Generic.IEnumerable`1\u003cSystem.String\u003e, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)\r\nMicrosoft.VisualStudio.TestPlatform.Common.ExtensionDecorators.SerialTestRunDecorator.RunTests(System.Collections.Generic.IEnumerable`1\u003cSystem.String\u003e, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources.InvokeExecutor(Microsoft.VisualStudio.TestPlatform.Common.ExtensionFramework.Utilities.LazyExtension`2\u003cMicrosoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor,Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestExecutorCapabilities\u003e, System.Tuple`2\u003cSystem.Uri,System.String\u003e, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle)\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTestInternalWithExecutors(System.Collections.Generic.IEnumerable`1\u003cSystem.Tuple`2\u003cSystem.Uri,System.String\u003e\u003e, Int64)\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTestsInternal()\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests.RunTests()\r\nMicrosoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun(System.Collections.Generic.Dictionary`2\u003cSystem.String,System.Collections.Generic.IEnumerable`1\u003cSystem.String\u003e\u003e, System.String, System.String, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler)\r\nMicrosoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler+\u003c\u003ec__DisplayClass45_4.\u003cOnMessageReceived\u003eb__3()\r\nMicrosoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler+\u003c\u003ec.\u003c.ctor\u003eb__31_2(System.Action)\r\nMicrosoft.VisualStudio.TestPlatform.Utilities.JobQueue`1[[System.__Canon, System.Private.CoreLib]].SafeProcessJob(System.__Canon)\r\nMicrosoft.VisualStudio.TestPlatform.Utilities.JobQueue`1[[System.__Canon, System.Private.CoreLib]].BackgroundJobProcessor(System.String)\r\nMicrosoft.VisualStudio.TestPlatform.Utilities.JobQueue`1[[System.__Canon, System.Private.CoreLib]].\u003c.ctor\u003eb__16_0()\r\nSystem.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\nSystem.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\nSystem.Threading.Thread.StartCallback()\r\nDispatchCallSimple(unsigned long*, unsigned int, unsigned long long, unsigned int)\r\nThreadNative::KickOffThread_Worker(void*)\r\nManagedThreadBase_DispatchOuter(ManagedThreadCallState*)\r\nManagedThreadBase::KickOff(void (*)(void*), void*)\r\nThreadNative::KickOffThread(void*)\r\nCorUnix::CPalThread::ThreadEntry(void*)\r\n_pthread_start\r\n```\n\n### Regression?\n\nYes this is a recent regression that came around the time of adopting the .NET 8 SDK GA\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\nComplicated\n\n### Other information\n\nAt the moment we are collecting OSX dumps with the following settings: \r\n\r\n```sh\r\nDOTNET_DbgEnableMiniDump=1\r\nDOTNET_DbgMiniDumpName=/cores/crash.%d.%e.dmp\r\nDOTNET_DbgMiniDumpType=1\r\nDOTNET_EnableCrashReport=1\r\n```\r\n\r\nHappy to adjust this as need to help with the investigation. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejaredpar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-18T23:39:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xN-Jt",
                                           "createdAt":  "2024-01-19T01:27:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I have got mac devices, is it possible to reproduce these locally?",
                                           "updatedAt":  "2024-01-19T01:27:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xN_nW",
                                           "createdAt":  "2024-01-19T01:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "GC Regions aren\u0027t enabled for OSX?",
                                           "updatedAt":  "2024-01-19T01:34:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xOAF2",
                                           "createdAt":  "2024-01-19T01:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e I have got mac devices, is it possible to reproduce these locally?\n\nWe tried running the tests locally on Macs and the issue did not reproduce. Unsure if it\u0027s specific to this hardware or some other factor. It reproduces very reliably in CI. ",
                                           "updatedAt":  "2024-01-19T01:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xOA1y",
                                           "createdAt":  "2024-01-19T01:40:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e GC Regions aren\u0027t enabled for OSX?\r\n\r\nYes, it is not enabled for OSX, because of the large dump issue.",
                                           "updatedAt":  "2024-01-19T01:40:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xOBCM",
                                           "createdAt":  "2024-01-19T01:41:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Then maybe the issue can be reproduced on other platforms by disabling regions?",
                                           "updatedAt":  "2024-01-19T01:41:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xO9y0",
                                           "createdAt":  "2024-01-19T04:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "We certainly can disable region using `DOTNET_GCName=clrgc`, this should work on any platforms.",
                                           "updatedAt":  "2024-01-19T04:25:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTMjT",
                                           "createdAt":  "2024-01-19T18:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Do we know how to read the dump? When I tried to open the dump in Visual Studio, it complained wrong file format. When I tried to open it in WinDBG, it reported 25 threads, `lm` showed no modules. I tried to open it with `lldb` on osx, this time it shows 21 threads, but all thread back stack traces are just numbers. \r\n\r\nThe crash report is more interesting, it does indicate `mark_ro_segment` is causing a trap\r\n```\r\n     {\r\n      \"is_managed\" : \"false\",\r\n      \"module_address\" : \"0x7ff818c5a000\",\r\n      \"stack_pointer\" : \"0x70000a07df40\",\r\n      \"native_address\" : \"0x7ff818c5d5ed\",\r\n      \"native_offset\" : \"0x1d\",\r\n      \"native_image_offset\" : \"0x35ed\",\r\n      \"unmanaged_name\" : \"_sigtramp\",\r\n      \"native_module\" : \"libsystem_platform.dylib\"\r\n     },\r\n     {\r\n      \"is_managed\" : \"false\",\r\n      \"module_address\" : \"0x101394000\",\r\n      \"stack_pointer\" : \"0x70000a07e490\",\r\n      \"native_address\" : \"0x101676e05\",\r\n      \"native_offset\" : \"0x2b5\",\r\n      \"native_image_offset\" : \"0x2e2e05\",\r\n      \"unmanaged_name\" : \"WKS::gc_heap::mark_ro_segments()\",\r\n      \"native_module\" : \"libcoreclr.dylib\"\r\n     },\r\n```\r\n\r\nThe `native_image_offset` is potentially useful, it might led us to the instruction where it failed, but I am not sure how to proceed from there.",
                                           "updatedAt":  "2024-01-19T18:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTa28",
                                           "createdAt":  "2024-01-19T18:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Do we know how to read the dump? When I tried to open the dump in Visual Studio, it complained wrong file format.\r\n\r\nMy understanding from chatting with @hoyosjs is that Mac dumps are only openable on Mac. \r\n\r\n\u003e We certainly can disable region using DOTNET_GCName=clrgc, this should work on any platforms.\r\n\r\nI [queued up a PR][1] that disables this for Linux. That should be fairly apples to apples with our Mac runs. If it does crash the dump should upload cause it doesn\u0027t have the same size issues that Mac\u0027s do.\r\n\r\n[1]: https://github.com/dotnet/roslyn/pull/71724\r\n",
                                           "updatedAt":  "2024-01-19T18:36:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTxOh",
                                           "createdAt":  "2024-01-19T19:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODTVPHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "cshung",
                                                                               "createdAt":  "2024-01-19T19:45:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Got a complete run on Linux with `DOTNET_GCName=libclrgc.so` and everything passed. ",
                                           "updatedAt":  "2024-01-19T19:43:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xTytf",
                                           "createdAt":  "2024-01-19T19:48:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Got a complete run on Linux with `DOTNET_GCName=libclrgc.so` and everything passed.\r\n\r\nThat\u0027s sad, which means we have to work with OSX then. Is it possible to capture stress log and/or run with customized `clrgc` with instrumentation?",
                                           "updatedAt":  "2024-01-19T19:48:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xT4p-",
                                           "createdAt":  "2024-01-19T20:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I see local test crashes as well after I sync \u0026 rebuild runtime (after git clean -dfx) \r\n```\r\n(lldb) clrstack -a\r\nOS Thread Id: 0x10aba58 (1)\r\n        Child SP               IP Call Site\r\n00007FF7BFEF9B38 0000000104664b33 [HelperMethodFrame_PROTECTOBJ: 00007ff7bfef9b38] System.RuntimeMethodHandle.InvokeMethod(System.Object, Void**, System.Signature, Boolean)\r\n00007FF7BFEF9DE0 000000012E28696D System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(System.Object, IntPtr*) [/Users/furt/github/wfurt-runtime2/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs @ 36]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEF9DF8) = 0x0000000190476978\r\n        obj (0x00007FF7BFEF9DF0) = 0x0000000190476730\r\n        args (0x00007FF7BFEF9DE8) = 0x0000000000000000\r\n\r\n00007FF7BFEF9E10 000000012E26E18F System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(System.Object, System.Reflection.BindingFlags) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs @ 57]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEF9E78) = 0x0000000190476978\r\n        obj (0x00007FF7BFEF9E70) = 0x0000000190476730\r\n        invokeAttr (0x00007FF7BFEF9E6C) = 0x9047673000000000\r\n    LOCALS:\r\n        0x00007FF7BFEF9E60 = 0x0000000000000000\r\n        0x00007FF7BFEF9E58 = 0x000000019048fb68\r\n\r\n00007FF7BFEF9E90 000000012E28537B System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs @ 127]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEF9EE8) = 0x00000001902b6bf8\r\n        obj (0x00007FF7BFEF9EE0) = 0x0000000190476730\r\n        invokeAttr (0x00007FF7BFEF9EDC) = 0x9047673000000000\r\n        binder (0x00007FF7BFEF9ED0) = 0x0000000000000000\r\n        parameters (0x00007FF7BFEF9EC8) = 0x0000000190052128\r\n        culture (0x00007FF7BFEF9EC0) = 0x0000000000000000\r\n    LOCALS:\r\n        0x00007FF7BFEF9EBC = 0x0000000000000000\r\n\r\n00007FF7BFEF9F00 000000012E285267 System.Reflection.MethodBase.Invoke(System.Object, System.Object[]) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBase.cs @ 56]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEF9F18) = 0x00000001902b6bf8\r\n        obj (0x00007FF7BFEF9F10) = 0x0000000190476730\r\n        parameters (0x00007FF7BFEF9F08) = 0x0000000190052128\r\n\r\n00007FF7BFEF9F30 000000012EFB056C Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].CallTestMethod(System.Object) [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs @ 150]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEF9F48) = 0x00000001904763e0\r\n        testClassInstance (0x00007FF7BFEF9F40) = 0x0000000190476730\r\n\r\n00007FF7BFEF9F60 000000012EFB018F Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_0+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs @ 269]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA190) = 0x00007ff7bfefa298\r\n    LOCALS:\r\n        0x00007FF7BFEFA184 = 0x00000000ffffffff\r\n        0x00007FF7BFEFA178 = 0x00000001904767f0\r\n        0x00007FF7BFEFA174 = 0x0000000000000000\r\n        0x00007FF7BFEFA170 = 0x0000000000000000\r\n        0x00007FF7BFEFA168 = 0x0000000000000000\r\n        0x00007FF7BFEFA160 = 0x0000000000000000\r\n        0x00007FF7BFEFA158 = 0x0000000000000000\r\n        0x00007FF7BFEFA150 = 0x0000000000000000\r\n        0x00007FF7BFEFA148 = 0x0000000000000000\r\n        0x00007FF7BFEFA140 = 0x0000000000000000\r\n\r\n00007FF7BFEFA1B0 000000012EFAFA09 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_0+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFA218) = 0x00007ff7bfefa298\r\n    LOCALS:\r\n        0x00007FF7BFEFA210 = 0x0000000190064118\r\n        0x00007FF7BFEFA208 = 0x0000000000000000\r\n        0x00007FF7BFEFA200 = 0x0000000190476820\r\n        0x00007FF7BFEFA1F8 = 0x0000000000000000\r\n\r\n00007FF7BFEFA240 000000012EFAF930 System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_0+\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA260) = 0x00007ff7bfefa2a8\r\n        stateMachine (0x00007FF7BFEFA250) = 0x00007ff7bfefa298\r\n\r\n00007FF7BFEFA280 000000012EFAF8A6 Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_0[[System.__Canon, System.Private.CoreLib]].\u003cInvokeTestMethodAsync\u003eb__1()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA2C0) = 0x00000001904767f0\r\n    LOCALS:\r\n        0x00007FF7BFEFA298 = 0x00000001904767f0\r\n\r\n00007FF7BFEFA2E0 000000012EFAF65E Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4.MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs @ 48]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA328) = 0x00007ff7bfefa3d0\r\n    LOCALS:\r\n        0x00007FF7BFEFA324 = 0x00000000ffffffff\r\n        0x00007FF7BFEFA318 = 0x0000000190476468\r\n        0x00007FF7BFEFA310 = 0x0000000000000000\r\n        0x00007FF7BFEFA308 = 0x0000000000000000\r\n\r\n00007FF7BFEFA340 000000012EFAF541 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet]](\u003cAggregateAsync\u003ed__4 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFA398) = 0x00007ff7bfefa3d0\r\n    LOCALS:\r\n        0x00007FF7BFEFA390 = 0x0000000190064118\r\n        0x00007FF7BFEFA388 = 0x0000000000000000\r\n        0x00007FF7BFEFA380 = 0x0000000190476820\r\n        0x00007FF7BFEFA378 = 0x0000000000000000\r\n\r\n00007FF7BFEFA3B0 000000012EFAF4AC System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+\u003cAggregateAsync\u003ed__4, xunit.execution.dotnet]](\u003cAggregateAsync\u003ed__4 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA3B8) = 0x00007ff7bfefa3f0\r\n        stateMachine (0x00007FF7BFEFA3B0) = 0x00007ff7bfefa3d0\r\n\r\n00007FF7BFEFA3D0 000000012EFAF460 Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA408) = 0x0000000190476468\r\n        asyncAction (0x00007FF7BFEFA400) = 0x0000000190476910\r\n    LOCALS:\r\n        0x00007FF7BFEFA3D0 = 0x0000000190476910\r\n\r\n00007FF7BFEFA420 000000012EFAF3F3 Xunit.Sdk.TestInvoker`1+\u003c\u003ec__DisplayClass48_0[[System.__Canon, System.Private.CoreLib]].\u003cInvokeTestMethodAsync\u003eb__0() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs @ 242]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA458) = 0x00000001904767f0\r\n    LOCALS:\r\n        0x00007FF7BFEFA450 = 0x0000000190476910\r\n\r\n00007FF7BFEFA470 000000012EFAF1B1 Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9.MoveNext() [/_/src/xunit.core/Sdk/ExceptionAggregator.cs @ 90]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA4C8) = 0x00007ff7bfefa578\r\n    LOCALS:\r\n        0x00007FF7BFEFA4C4 = 0x00000000ffffffff\r\n        0x00007FF7BFEFA4B8 = 0x0000000190476368\r\n        0x00007FF7BFEFA4B0 = 0x0000000000000000\r\n        0x00007FF7BFEFA4A8 = 0x0000000000000000\r\n        0x00007FF7BFEFA4A0 = 0x0000000000000000\r\n\r\n00007FF7BFEFA4E0 000000012EFAF0BB System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core]](\u003cRunAsync\u003ed__9 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFA538) = 0x00007ff7bfefa578\r\n    LOCALS:\r\n        0x00007FF7BFEFA530 = 0x0000000190064118\r\n        0x00007FF7BFEFA528 = 0x0000000000000000\r\n        0x00007FF7BFEFA520 = 0x0000000190476820\r\n        0x00007FF7BFEFA518 = 0x0000000000000000\r\n\r\n00007FF7BFEFA550 000000012EFAF02C System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__9, xunit.core]](\u003cRunAsync\u003ed__9 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilder.cs @ 33]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA558) = 0x00007ff7bfefa590\r\n        stateMachine (0x00007FF7BFEFA550) = 0x00007ff7bfefa578\r\n\r\n00007FF7BFEFA570 000000012EFAEFE1 Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1\u003cSystem.Threading.Tasks.Task\u003e)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA5A8) = 0x0000000190476368\r\n        code (0x00007FF7BFEFA5A0) = 0x00000001904768d0\r\n    LOCALS:\r\n        0x00007FF7BFEFA578 = 0x00000001904768d0\r\n\r\n00007FF7BFEFA5C0 000000012EFAE86B Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs @ 241]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA670) = 0x00007ff7bfefa778\r\n    LOCALS:\r\n        0x00007FF7BFEFA664 = 0x00000000ffffffff\r\n        0x00007FF7BFEFA658 = 0x00000001904763e0\r\n        0x00007FF7BFEFA648 = 0x0000000000000000\r\n        0x00007FF7BFEFA640 = 0x00000001904767f0\r\n        0x00007FF7BFEFA638 = 0x0000000000000000\r\n        0x00007FF7BFEFA630 = 0x0000000000000000\r\n\r\n00007FF7BFEFA690 000000012EFAE5BF System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFA6F8) = 0x00007ff7bfefa778\r\n    LOCALS:\r\n        0x00007FF7BFEFA6F0 = 0x0000000190064118\r\n        0x00007FF7BFEFA6E8 = 0x0000000000000000\r\n        0x00007FF7BFEFA6E0 = 0x0000000000000000\r\n        0x00007FF7BFEFA6D8 = 0x0000000000000000\r\n\r\n00007FF7BFEFA720 000000012EFAE4E0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+\u003cInvokeTestMethodAsync\u003ed__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cInvokeTestMethodAsync\u003ed__48\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA740) = 0x00007ff7bfefa798\r\n        stateMachine (0x00007FF7BFEFA730) = 0x00007ff7bfefa778\r\n\r\n00007FF7BFEFA760 000000012EFAE456 Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].InvokeTestMethodAsync(System.Object)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA7B0) = 0x00000001904763e0\r\n        testClassInstance (0x00007FF7BFEFA7A8) = 0x0000000190476730\r\n    LOCALS:\r\n        0x00007FF7BFEFA778 = 0x00000001904763e0\r\n\r\n00007FF7BFEFA7D0 000000012EFAE28A Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(System.Object) [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestInvoker.cs @ 112]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA808) = 0x00000001904763e0\r\n        testClassInstance (0x00007FF7BFEFA800) = 0x0000000190476730\r\n\r\n00007FF7BFEFA820 000000012EFACCAC Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs @ 206]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA910) = 0x00007ff7bfefaa28\r\n    LOCALS:\r\n        0x00007FF7BFEFA904 = 0x00000000ffffffff\r\n        0x00007FF7BFEFA8F8 = 0x00000001904763e0\r\n        0x00007FF7BFEFA8E8 = 0x0000000000000000\r\n        0x00007FF7BFEFA8E0 = 0x0000000190469258\r\n        0x00007FF7BFEFA8D8 = 0x0000000000000000\r\n        0x00007FF7BFEFA8D0 = 0x0000000000000000\r\n\r\n00007FF7BFEFA930 000000012EFAC7F3 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFA9A8) = 0x00007ff7bfefaa28\r\n    LOCALS:\r\n        0x00007FF7BFEFA9A0 = 0x0000000190064118\r\n        0x00007FF7BFEFA998 = 0x0000000000000000\r\n        0x00007FF7BFEFA990 = 0x0000000000000000\r\n        0x00007FF7BFEFA988 = 0x0000000000000000\r\n\r\n00007FF7BFEFA9D0 000000012EFAC710 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+\u003c\u003cRunAsync\u003eb__47_0\u003ed[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFA9F0) = 0x00007ff7bfefaa48\r\n        stateMachine (0x00007FF7BFEFA9E0) = 0x00007ff7bfefaa28\r\n\r\n00007FF7BFEFAA10 000000012EFAC68B Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].\u003cRunAsync\u003eb__47_0()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAA60) = 0x00000001904763e0\r\n    LOCALS:\r\n        0x00007FF7BFEFAA28 = 0x00000001904763e0\r\n\r\n00007FF7BFEFAA80 000000012EFAC42F Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]].MoveNext() [/_/src/xunit.core/Sdk/ExceptionAggregator.cs @ 107]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAAF8) = 0x00007ff7bfefaba8\r\n    LOCALS:\r\n        0x00007FF7BFEFAAF4 = 0x00000000ffffffff\r\n        0x00007FF7BFEFAAE8 = 0x0000000190476368\r\n        0x00007FF7BFEFAAD8 = 0x0000000000000000\r\n        0x00007FF7BFEFAAD0 = 0x0000000000000000\r\n        0x00007FF7BFEFAAC8 = 0x0000000000000000\r\n        0x00007FF7BFEFAAC0 = 0x0000000000000000\r\n\r\n00007FF7BFEFAB10 000000012EFAC32B System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFAB68) = 0x00007ff7bfefaba8\r\n    LOCALS:\r\n        0x00007FF7BFEFAB60 = 0x0000000190064118\r\n        0x00007FF7BFEFAB58 = 0x0000000000000000\r\n        0x00007FF7BFEFAB50 = 0x0000000000000000\r\n        0x00007FF7BFEFAB48 = 0x0000000000000000\r\n\r\n00007FF7BFEFAB80 000000012EFAC29C System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.Decimal\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAB88) = 0x00007ff7bfefabc0\r\n        stateMachine (0x00007FF7BFEFAB80) = 0x00007ff7bfefaba8\r\n\r\n00007FF7BFEFABA0 000000012EFAC211 Xunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.Decimal\u003e\u003e)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFABD8) = 0x0000000190476368\r\n        code (0x00007FF7BFEFABD0) = 0x0000000190476500\r\n    LOCALS:\r\n        0x00007FF7BFEFABA8 = 0x0000000190476500\r\n\r\n00007FF7BFEFABF0 000000012EFAC171 Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].RunAsync() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs @ 189]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAC08) = 0x00000001904763e0\r\n\r\n00007FF7BFEFAC20 000000012EFABB4B Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator) [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestRunner.cs @ 84]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAC98) = 0x00000001904760f0\r\n        aggregator (0x00007FF7BFEFAC90) = 0x0000000190476368\r\n\r\n00007FF7BFEFACB0 000000012EFAB7BB Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4.MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestRunner.cs @ 67]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAD70) = 0x00007ff7bfefae68\r\n    LOCALS:\r\n        0x00007FF7BFEFAD6C = 0x00000000ffffffff\r\n        0x00007FF7BFEFAD60 = 0x00000001904760f0\r\n        0x00007FF7BFEFAD58 = 0x0000000000000000\r\n        0x00007FF7BFEFAD50 = 0x0000000190475a58\r\n        0x00007FF7BFEFAD4C = 0x0000000000000000\r\n        0x00007FF7BFEFAD40 = 0x0000000000000000\r\n        0x00007FF7BFEFAD38 = 0x0000000000000000\r\n        0x00007FF7BFEFAD30 = 0x0000000000000000\r\n\r\n00007FF7BFEFADB0 000000012EFAB4E2 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet]](\u003cInvokeTestAsync\u003ed__4 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFAE18) = 0x00007ff7bfefae68\r\n    LOCALS:\r\n        0x00007FF7BFEFAE10 = 0x0000000190064118\r\n        0x00007FF7BFEFAE08 = 0x0000000000000000\r\n        0x00007FF7BFEFAE00 = 0x0000000000000000\r\n        0x00007FF7BFEFADF8 = 0x0000000000000000\r\n\r\n00007FF7BFEFAE30 000000012EFAB450 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestRunner+\u003cInvokeTestAsync\u003ed__4, xunit.execution.dotnet]](\u003cInvokeTestAsync\u003ed__4 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAE48) = 0x00007ff7bfefae90\r\n        stateMachine (0x00007FF7BFEFAE38) = 0x00007ff7bfefae68\r\n\r\n00007FF7BFEFAE60 000000012EFAB3FA Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAEA8) = 0x00000001904760f0\r\n        aggregator (0x00007FF7BFEFAEA0) = 0x0000000190476368\r\n    LOCALS:\r\n        0x00007FF7BFEFAE68 = 0x00000001904760f0\r\n\r\n00007FF7BFEFAEC0 000000012EFAB36A Xunit.Sdk.TestRunner`1+\u003c\u003ec__DisplayClass43_0[[System.__Canon, System.Private.CoreLib]].\u003cRunAsync\u003eb__0() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestRunner.cs @ 149]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAEC8) = 0x00000001904762b8\r\n\r\n00007FF7BFEFAEE0 000000012EFAB018 Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.core/Sdk/ExceptionAggregator.cs @ 107]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFAF80) = 0x00007ff7bfefb088\r\n    LOCALS:\r\n        0x00007FF7BFEFAF74 = 0x00000000ffffffff\r\n        0x00007FF7BFEFAF68 = 0x0000000190476368\r\n        0x00007FF7BFEFAF60 = 0x0000000000000000\r\n        0x00007FF7BFEFAF58 = 0x0000000000000000\r\n        0x00007FF7BFEFAF50 = 0x0000000000000000\r\n        0x00007FF7BFEFAF48 = 0x0000000000000000\r\n\r\n00007FF7BFEFAFA0 000000012EFAAEF9 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFB008) = 0x00007ff7bfefb088\r\n    LOCALS:\r\n        0x00007FF7BFEFB000 = 0x0000000190064118\r\n        0x00007FF7BFEFAFF8 = 0x0000000000000000\r\n        0x00007FF7BFEFAFF0 = 0x0000000000000000\r\n        0x00007FF7BFEFAFE8 = 0x0000000000000000\r\n\r\n00007FF7BFEFB030 000000012EFAAE20 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+\u003cRunAsync\u003ed__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](\u003cRunAsync\u003ed__10`1\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB050) = 0x00007ff7bfefb0a0\r\n        stateMachine (0x00007FF7BFEFB040) = 0x00007ff7bfefb088\r\n\r\n00007FF7BFEFB070 000000012EFAAC41 Xunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib]](System.Func`1\u003cSystem.Threading.Tasks.Task`1\u003cSystem.__Canon\u003e\u003e)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB0C0) = 0x0000000190476368\r\n        code (0x00007FF7BFEFB0B0) = 0x00000001904763a0\r\n    LOCALS:\r\n        0x00007FF7BFEFB088 = 0x00000001904763a0\r\n\r\n00007FF7BFEFB0E0 000000012EFAA160 Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestRunner.cs @ 149]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB240) = 0x00007ff7bfefb358\r\n    LOCALS:\r\n        0x00007FF7BFEFB234 = 0x00000000ffffffff\r\n        0x00007FF7BFEFB228 = 0x00000001904760f0\r\n        0x00007FF7BFEFB220 = 0x0000000000000000\r\n        0x00007FF7BFEFB218 = 0x0000000000000000\r\n        0x00007FF7BFEFB210 = 0x0000000000000000\r\n        0x00007FF7BFEFB208 = 0x0000000000000000\r\n        0x00007FF7BFEFB200 = 0x0000000000000000\r\n        0x00007FF7BFEFB1F8 = 0x0000000000000000\r\n\r\n00007FF7BFEFB260 000000012EFA9D03 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__43\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFB2D8) = 0x00007ff7bfefb358\r\n    LOCALS:\r\n        0x00007FF7BFEFB2D0 = 0x0000000190064118\r\n        0x00007FF7BFEFB2C8 = 0x0000000000000000\r\n        0x00007FF7BFEFB2C0 = 0x0000000000000000\r\n        0x00007FF7BFEFB2B8 = 0x0000000000000000\r\n\r\n00007FF7BFEFB300 000000012EFA9C20 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestRunner`1+\u003cRunAsync\u003ed__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__43\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB320) = 0x00007ff7bfefb380\r\n        stateMachine (0x00007FF7BFEFB310) = 0x00007ff7bfefb358\r\n\r\n00007FF7BFEFB340 000000012EFA9B85 Xunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB390) = 0x00000001904760f0\r\n    LOCALS:\r\n        0x00007FF7BFEFB358 = 0x00000001904760f0\r\n\r\n00007FF7BFEFB3B0 000000012EFA7ED6 Xunit.Sdk.XunitTestCaseRunner.RunTestAsync() [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestCaseRunner.cs @ 139]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB438) = 0x0000000190475e40\r\n\r\n00007FF7BFEFB450 000000012EFA781A Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestCaseRunner.cs @ 82]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB520) = 0x00007ff7bfefb620\r\n    LOCALS:\r\n        0x00007FF7BFEFB514 = 0x00000000ffffffff\r\n        0x00007FF7BFEFB508 = 0x0000000190475e40\r\n        0x00007FF7BFEFB500 = 0x0000000000000000\r\n        0x00007FF7BFEFB4F8 = 0x0000000190469258\r\n        0x00007FF7BFEFB4F0 = 0x0000000000000000\r\n        0x00007FF7BFEFB4E8 = 0x0000000000000000\r\n        0x00007FF7BFEFB4E0 = 0x0000000000000000\r\n\r\n00007FF7BFEFB540 000000012EFA752F System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__19\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFB5A8) = 0x00007ff7bfefb620\r\n    LOCALS:\r\n        0x00007FF7BFEFB5A0 = 0x0000000190064118\r\n        0x00007FF7BFEFB598 = 0x0000000000000000\r\n        0x00007FF7BFEFB590 = 0x0000000000000000\r\n        0x00007FF7BFEFB588 = 0x0000000000000000\r\n\r\n00007FF7BFEFB5D0 000000012EFA7450 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCaseRunner`1+\u003cRunAsync\u003ed__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__19\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB5F0) = 0x00007ff7bfefb638\r\n        stateMachine (0x00007FF7BFEFB5E0) = 0x00007ff7bfefb620\r\n\r\n00007FF7BFEFB610 000000012EFA73BF Xunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB650) = 0x0000000190475e40\r\n    LOCALS:\r\n        0x00007FF7BFEFB620 = 0x0000000190475e40\r\n\r\n00007FF7BFEFB670 000000012EFA666B Xunit.Sdk.XunitTestCase.RunAsync(Xunit.Abstractions.IMessageSink, Xunit.Sdk.IMessageBus, System.Object[], Xunit.Sdk.ExceptionAggregator, System.Threading.CancellationTokenSource) [/_/src/xunit.execution/Sdk/Frameworks/XunitTestCase.cs @ 162]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB6D8) = 0x00000001902c7e10\r\n        diagnosticMessageSink (0x00007FF7BFEFB6D0) = 0x0000000190050620\r\n        messageBus (0x00007FF7BFEFB6C8) = 0x00000001904494f8\r\n        constructorArguments (0x00007FF7BFEFB6C0) = 0x0000000190475a58\r\n        aggregator (0x00007FF7BFEFB6B8) = 0x0000000190475e08\r\n        cancellationTokenSource (0x00007FF7BFEFB6B0) = 0x000000019043cc30\r\n\r\n00007FF7BFEFB6F0 000000012EFA6539 Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase) [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestMethodRunner.cs @ 45]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB728) = 0x0000000190475c70\r\n        testCase (0x00007FF7BFEFB720) = 0x00000001902c7e10\r\n\r\n00007FF7BFEFB740 000000012EFA60D8 Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestMethodRunner.cs @ 136]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB808) = 0x00007ff7bfefb948\r\n    LOCALS:\r\n        0x00007FF7BFEFB7FC = 0x00000000ffffffff\r\n        0x00007FF7BFEFB7F0 = 0x0000000190475c70\r\n        0x00007FF7BFEFB7E8 = 0x0000000000000000\r\n        0x00007FF7BFEFB7E0 = 0x00000001902c7e10\r\n        0x00007FF7BFEFB7D8 = 0x0000000000000000\r\n        0x00007FF7BFEFB7D0 = 0x0000000000000000\r\n        0x00007FF7BFEFB7C8 = 0x0000000000000000\r\n\r\n00007FF7BFEFB850 000000012EFA5E03 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCasesAsync\u003ed__32\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFB8C8) = 0x00007ff7bfefb948\r\n    LOCALS:\r\n        0x00007FF7BFEFB8C0 = 0x0000000190064118\r\n        0x00007FF7BFEFB8B8 = 0x0000000000000000\r\n        0x00007FF7BFEFB8B0 = 0x0000000000000000\r\n        0x00007FF7BFEFB8A8 = 0x0000000000000000\r\n\r\n00007FF7BFEFB8F0 000000012EFA5D20 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunTestCasesAsync\u003ed__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCasesAsync\u003ed__32\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB910) = 0x00007ff7bfefb970\r\n        stateMachine (0x00007FF7BFEFB900) = 0x00007ff7bfefb948\r\n\r\n00007FF7BFEFB930 000000012EFA5C85 Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCasesAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFB980) = 0x0000000190475c70\r\n    LOCALS:\r\n        0x00007FF7BFEFB948 = 0x0000000190475c70\r\n\r\n00007FF7BFEFB9A0 000000012EFA564C Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestMethodRunner.cs @ 106]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFBA90) = 0x00007ff7bfefbb98\r\n    LOCALS:\r\n        0x00007FF7BFEFBA84 = 0x00000000ffffffff\r\n        0x00007FF7BFEFBA78 = 0x0000000190475c70\r\n        0x00007FF7BFEFBA70 = 0x0000000000000000\r\n        0x00007FF7BFEFBA68 = 0x0000000000000000\r\n        0x00007FF7BFEFBA60 = 0x0000000000000000\r\n        0x00007FF7BFEFBA58 = 0x0000000000000000\r\n\r\n00007FF7BFEFBAB0 000000012EFA5429 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__31\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFBB18) = 0x00007ff7bfefbb98\r\n    LOCALS:\r\n        0x00007FF7BFEFBB10 = 0x0000000190064118\r\n        0x00007FF7BFEFBB08 = 0x0000000000000000\r\n        0x00007FF7BFEFBB00 = 0x0000000000000000\r\n        0x00007FF7BFEFBAF8 = 0x0000000000000000\r\n\r\n00007FF7BFEFBB40 000000012EFA5350 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+\u003cRunAsync\u003ed__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__31\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFBB60) = 0x00007ff7bfefbbb0\r\n        stateMachine (0x00007FF7BFEFBB50) = 0x00007ff7bfefbb98\r\n\r\n00007FF7BFEFBB80 000000012EFA52C0 Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFBBC0) = 0x0000000190475c70\r\n    LOCALS:\r\n        0x00007FF7BFEFBB98 = 0x0000000190475c70\r\n\r\n00007FF7BFEFBBE0 000000012EFA4E6E Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, System.Object[]) [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestClassRunner.cs @ 168]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFBC58) = 0x0000000190469ed0\r\n        testMethod (0x00007FF7BFEFBC50) = 0x00000001902c7578\r\n        method (0x00007FF7BFEFBC48) = 0x00000001902b9218\r\n        testCases (0x00007FF7BFEFBC40) = 0x0000000190475bb0\r\n        constructorArguments (0x00007FF7BFEFBC38) = 0x0000000190475a58\r\n\r\n00007FF7BFEFBC70 000000012EFA285C Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFBF48) = 0x00007ff7bfefc080\r\n    LOCALS:\r\n        0x00007FF7BFEFBF3C = 0x00000000ffffffff\r\n        0x00007FF7BFEFBF30 = 0x0000000190469ed0\r\n        0x00007FF7BFEFBF28 = 0x0000000000000000\r\n        0x00007FF7BFEFBF20 = 0x00000001904757a8\r\n        0x00007FF7BFEFBF18 = 0x0000000000000000\r\n        0x00007FF7BFEFBF10 = 0x0000000190475bb0\r\n        0x00007FF7BFEFBF08 = 0x0000000000000000\r\n        0x00007FF7BFEFBF00 = 0x0000000000000000\r\n        0x00007FF7BFEFBEF8 = 0x0000000000000000\r\n\r\n00007FF7BFEFBF90 000000012EFA17CD System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestMethodsAsync\u003ed__38\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFC008) = 0x00007ff7bfefc080\r\n    LOCALS:\r\n        0x00007FF7BFEFC000 = 0x0000000190064118\r\n        0x00007FF7BFEFBFF8 = 0x0000000000000000\r\n        0x00007FF7BFEFBFF0 = 0x0000000000000000\r\n        0x00007FF7BFEFBFE8 = 0x0000000000000000\r\n\r\n00007FF7BFEFC030 000000012EFA1630 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunTestMethodsAsync\u003ed__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestMethodsAsync\u003ed__38\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC050) = 0x00007ff7bfefc0b0\r\n        stateMachine (0x00007FF7BFEFC040) = 0x00007ff7bfefc080\r\n\r\n00007FF7BFEFC070 000000012EFA155F Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestMethodsAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC0C0) = 0x0000000190469ed0\r\n    LOCALS:\r\n        0x00007FF7BFEFC080 = 0x0000000190469ed0\r\n\r\n00007FF7BFEFC0E0 000000012EF9D712 Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestClassRunner.cs @ 171]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC1E0) = 0x00007ff7bfefc2e0\r\n    LOCALS:\r\n        0x00007FF7BFEFC1D4 = 0x00000000ffffffff\r\n        0x00007FF7BFEFC1C8 = 0x0000000190469ed0\r\n        0x00007FF7BFEFC1C0 = 0x0000000000000000\r\n        0x00007FF7BFEFC1B8 = 0x0000000190011090\r\n        0x00007FF7BFEFC1B0 = 0x0000000000000000\r\n        0x00007FF7BFEFC1A8 = 0x0000000000000000\r\n        0x00007FF7BFEFC1A0 = 0x0000000000000000\r\n\r\n00007FF7BFEFC200 000000012EF9D3DF System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__37\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFC268) = 0x00007ff7bfefc2e0\r\n    LOCALS:\r\n        0x00007FF7BFEFC260 = 0x0000000190064118\r\n        0x00007FF7BFEFC258 = 0x0000000000000000\r\n        0x00007FF7BFEFC250 = 0x0000000000000000\r\n        0x00007FF7BFEFC248 = 0x0000000000000000\r\n\r\n00007FF7BFEFC290 000000012EF9D300 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+\u003cRunAsync\u003ed__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__37\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC2B0) = 0x00007ff7bfefc2f8\r\n        stateMachine (0x00007FF7BFEFC2A0) = 0x00007ff7bfefc2e0\r\n\r\n00007FF7BFEFC2D0 000000012EF9D26F Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC310) = 0x0000000190469ed0\r\n    LOCALS:\r\n        0x00007FF7BFEFC2E0 = 0x0000000190469ed0\r\n\r\n00007FF7BFEFC330 000000012EF9CD42 Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(Xunit.Abstractions.ITestClass, Xunit.Abstractions.IReflectionTypeInfo, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e) [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestCollectionRunner.cs @ 158]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC3A8) = 0x0000000190469b28\r\n        testClass (0x00007FF7BFEFC3A0) = 0x00000001902b4898\r\n        class (0x00007FF7BFEFC398) = 0x00000001902b4880\r\n        testCases (0x00007FF7BFEFC390) = 0x0000000190469e10\r\n\r\n00007FF7BFEFC3C0 000000012EF9C653 Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC578) = 0x00007ff7bfefc6b8\r\n    LOCALS:\r\n        0x00007FF7BFEFC56C = 0x00000000ffffffff\r\n        0x00007FF7BFEFC560 = 0x0000000190469b28\r\n        0x00007FF7BFEFC558 = 0x0000000000000000\r\n        0x00007FF7BFEFC550 = 0x0000000190469e10\r\n        0x00007FF7BFEFC548 = 0x0000000000000000\r\n        0x00007FF7BFEFC540 = 0x0000000000000000\r\n        0x00007FF7BFEFC538 = 0x0000000000000000\r\n\r\n00007FF7BFEFC5C0 000000012EF9B733 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestClassesAsync\u003ed__28\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFC638) = 0x00007ff7bfefc6b8\r\n    LOCALS:\r\n        0x00007FF7BFEFC630 = 0x0000000190064118\r\n        0x00007FF7BFEFC628 = 0x0000000000000000\r\n        0x00007FF7BFEFC620 = 0x0000000000000000\r\n        0x00007FF7BFEFC618 = 0x0000000000000000\r\n\r\n00007FF7BFEFC660 000000012EF9B650 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunTestClassesAsync\u003ed__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestClassesAsync\u003ed__28\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC680) = 0x00007ff7bfefc6e0\r\n        stateMachine (0x00007FF7BFEFC670) = 0x00007ff7bfefc6b8\r\n\r\n00007FF7BFEFC6A0 000000012EF9B5B5 Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestClassesAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC6F0) = 0x0000000190469b28\r\n    LOCALS:\r\n        0x00007FF7BFEFC6B8 = 0x0000000190469b28\r\n\r\n00007FF7BFEFC710 000000012EF980F3 Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestCollectionRunner.cs @ 101]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC810) = 0x00007ff7bfefc910\r\n    LOCALS:\r\n        0x00007FF7BFEFC804 = 0x00000000ffffffff\r\n        0x00007FF7BFEFC7F8 = 0x0000000190469b28\r\n        0x00007FF7BFEFC7F0 = 0x0000000000000000\r\n        0x00007FF7BFEFC7E8 = 0x0000000190011090\r\n        0x00007FF7BFEFC7E0 = 0x0000000000000000\r\n        0x00007FF7BFEFC7D8 = 0x0000000000000000\r\n        0x00007FF7BFEFC7D0 = 0x0000000000000000\r\n\r\n00007FF7BFEFC830 000000012EF9734F System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__27\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFC898) = 0x00007ff7bfefc910\r\n    LOCALS:\r\n        0x00007FF7BFEFC890 = 0x0000000190064118\r\n        0x00007FF7BFEFC888 = 0x0000000000000000\r\n        0x00007FF7BFEFC880 = 0x0000000000000000\r\n        0x00007FF7BFEFC878 = 0x0000000000000000\r\n\r\n00007FF7BFEFC8C0 000000012EF971A0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+\u003cRunAsync\u003ed__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__27\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC8E0) = 0x00007ff7bfefc928\r\n        stateMachine (0x00007FF7BFEFC8D0) = 0x00007ff7bfefc910\r\n\r\n00007FF7BFEFC900 000000012EF96ACF Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC940) = 0x0000000190469b28\r\n    LOCALS:\r\n        0x00007FF7BFEFC910 = 0x0000000190469b28\r\n\r\n00007FF7BFEFC960 000000012EF94F95 Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(Xunit.Sdk.IMessageBus, Xunit.Abstractions.ITestCollection, System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, System.Threading.CancellationTokenSource) [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestAssemblyRunner.cs @ 235]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFC9B8) = 0x000000019043cb58\r\n        messageBus (0x00007FF7BFEFC9B0) = 0x00000001904494f8\r\n        testCollection (0x00007FF7BFEFC9A8) = 0x00000001902b6210\r\n        testCases (0x00007FF7BFEFC9A0) = 0x00000001904698a8\r\n        cancellationTokenSource (0x00007FF7BFEFC998) = 0x000000019043cc30\r\n\r\n00007FF7BFEFC9D0 000000012EF8E52E Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestAssemblyRunner.cs @ 231]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFCA98) = 0x00007ff7bfefcbf8\r\n    LOCALS:\r\n        0x00007FF7BFEFCA8C = 0x00000000ffffffff\r\n        0x00007FF7BFEFCA80 = 0x000000019043cb58\r\n        0x00007FF7BFEFCA78 = 0x0000000000000000\r\n        0x00007FF7BFEFCA70 = 0x0000000190469ad0\r\n        0x00007FF7BFEFCA68 = 0x0000000000000000\r\n        0x00007FF7BFEFCA60 = 0x0000000000000000\r\n        0x00007FF7BFEFCA58 = 0x0000000000000000\r\n\r\n00007FF7BFEFCAE0 000000012EF8DC23 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__42\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFCB78) = 0x00007ff7bfefcbf8\r\n    LOCALS:\r\n        0x00007FF7BFEFCB70 = 0x0000000190064118\r\n        0x00007FF7BFEFCB68 = 0x0000000000000000\r\n        0x00007FF7BFEFCB60 = 0x0000000000000000\r\n        0x00007FF7BFEFCB58 = 0x0000000000000000\r\n\r\n00007FF7BFEFCBA0 000000012EF8DA30 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunTestCollectionsAsync\u003ed__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__42\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFCBC0) = 0x00007ff7bfefcc28\r\n        stateMachine (0x00007FF7BFEFCBB0) = 0x00007ff7bfefcbf8\r\n\r\n00007FF7BFEFCBE0 000000012EF8D994 Xunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFCC60) = 0x000000019043cb58\r\n        messageBus (0x00007FF7BFEFCC58) = 0x00000001904494f8\r\n        cancellationTokenSource (0x00007FF7BFEFCC50) = 0x000000019043cc30\r\n    LOCALS:\r\n        0x00007FF7BFEFCBF8 = 0x000000019043cb58\r\n\r\n00007FF7BFEFCC80 000000012EF8D678 Xunit.Sdk.XunitTestAssemblyRunner.\u003c\u003en__0(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFCC98) = 0x000000019043cb58\r\n        messageBus (0x00007FF7BFEFCC90) = 0x00000001904494f8\r\n        cancellationTokenSource (0x00007FF7BFEFCC88) = 0x000000019043cc30\r\n\r\n00007FF7BFEFCCB0 000000012EF8C155 Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14.MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/XunitTestAssemblyRunner.cs @ 165]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFCF20) = 0x00007ff7bfefd060\r\n    LOCALS:\r\n        0x00007FF7BFEFCF1C = 0x00000000ffffffff\r\n        0x00007FF7BFEFCF10 = 0x000000019043cb58\r\n        0x00007FF7BFEFCF08 = 0x0000000000000000\r\n        0x00007FF7BFEFCF00 = 0x0000000000000000\r\n        0x00007FF7BFEFCEF8 = 0x0000000000000000\r\n        0x00007FF7BFEFCEF0 = 0x0000000000000000\r\n        0x00007FF7BFEFCED8 = 0x0000000000000000\r\n        0x00007FF7BFEFCED0 = 0x0000000000000000\r\n        0x00007FF7BFEFCEC8 = 0x0000000000000000\r\n        0x00007FF7BFEFCEC0 = 0x0000000000000000\r\n        0x00007FF7BFEFCEB8 = 0x0000000000000000\r\n        0x00007FF7BFEFCEB0 = 0x0000000000000000\r\n        0x00007FF7BFEFCEA8 = 0x0000000000000000\r\n\r\n00007FF7BFEFCF60 000000012EF8B454 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14, xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__14 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFD018) = 0x00007ff7bfefd060\r\n    LOCALS:\r\n        0x00007FF7BFEFD010 = 0x0000000190064118\r\n        0x00007FF7BFEFD008 = 0x0000000000000000\r\n        0x00007FF7BFEFD000 = 0x0000000000000000\r\n        0x00007FF7BFEFCFF8 = 0x0000000000000000\r\n\r\n00007FF7BFEFD030 000000012EF8B3B0 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestAssemblyRunner+\u003cRunTestCollectionsAsync\u003ed__14, xunit.execution.dotnet]](\u003cRunTestCollectionsAsync\u003ed__14 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD048) = 0x00007ff7bfefd0a8\r\n        stateMachine (0x00007FF7BFEFD038) = 0x00007ff7bfefd060\r\n\r\n00007FF7BFEFD060 000000012EF8B355 Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD0F8) = 0x000000019043cb58\r\n        messageBus (0x00007FF7BFEFD0F0) = 0x00000001904494f8\r\n        cancellationTokenSource (0x00007FF7BFEFD0E8) = 0x000000019043cc30\r\n    LOCALS:\r\n        0x00007FF7BFEFD060 = 0x000000019043cc30\r\n\r\n00007FF7BFEFD110 000000012ED7883F Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]].MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/Runners/TestAssemblyRunner.cs @ 196]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD260) = 0x00007ff7bfefd388\r\n    LOCALS:\r\n        0x00007FF7BFEFD254 = 0x00000000ffffffff\r\n        0x00007FF7BFEFD248 = 0x000000019043cb58\r\n        0x00007FF7BFEFD240 = 0x0000000000000000\r\n        0x00007FF7BFEFD238 = 0x0000000190449470\r\n        0x00007FF7BFEFD230 = 0x0000000190063558\r\n        0x00007FF7BFEFD228 = 0x0000000190469258\r\n        0x00007FF7BFEFD220 = 0x0000000000000000\r\n        0x00007FF7BFEFD218 = 0x0000000000000000\r\n        0x00007FF7BFEFD210 = 0x0000000000000000\r\n        0x00007FF7BFEFD208 = 0x0000000000000000\r\n\r\n00007FF7BFEFD280 000000012ED78468 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__41\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFD308) = 0x00007ff7bfefd388\r\n    LOCALS:\r\n        0x00007FF7BFEFD300 = 0x0000000190064118\r\n        0x00007FF7BFEFD2F8 = 0x0000000000000000\r\n        0x00007FF7BFEFD2F0 = 0x0000000000000000\r\n        0x00007FF7BFEFD2E8 = 0x0000000000000000\r\n\r\n00007FF7BFEFD330 000000012ED78380 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+\u003cRunAsync\u003ed__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](\u003cRunAsync\u003ed__41\u003cSystem.__Canon\u003e ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs @ 35]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD350) = 0x00007ff7bfefd3b8\r\n        stateMachine (0x00007FF7BFEFD340) = 0x00007ff7bfefd388\r\n\r\n00007FF7BFEFD370 000000012ED782A5 Xunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync()\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD3D0) = 0x000000019043cb58\r\n    LOCALS:\r\n        0x00007FF7BFEFD388 = 0x000000019043cb58\r\n\r\n00007FF7BFEFD3F0 000000012ED77BDF Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8.MoveNext() [/_/src/xunit.execution/Sdk/Frameworks/XunitTestFrameworkExecutor.cs @ 95]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD448) = 0x00007ff7bfefd528\r\n    LOCALS:\r\n        0x00007FF7BFEFD444 = 0x00000000ffffffff\r\n        0x00007FF7BFEFD438 = 0x0000000190063668\r\n        0x00007FF7BFEFD430 = 0x0000000000000000\r\n        0x00007FF7BFEFD428 = 0x0000000000000000\r\n\r\n00007FF7BFEFD460 000000012ED77A6E System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8, xunit.execution.dotnet]](\u003cRunTestCases\u003ed__8 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncMethodBuilderCore.cs @ 38]\r\n    PARAMETERS:\r\n        stateMachine (0x00007FF7BFEFD4D8) = 0x00007ff7bfefd528\r\n    LOCALS:\r\n        0x00007FF7BFEFD4D0 = 0x0000000190064118\r\n        0x00007FF7BFEFD4C8 = 0x0000000000000000\r\n        0x00007FF7BFEFD4C0 = 0x0000000000000000\r\n        0x00007FF7BFEFD4B8 = 0x0000000000000000\r\n\r\n00007FF7BFEFD4F0 000000012ED779DC System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+\u003cRunTestCases\u003ed__8, xunit.execution.dotnet]](\u003cRunTestCases\u003ed__8 ByRef) [/Users/furt/github/wfurt-runtime2/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncVoidMethodBuilder.cs @ 40]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD4F8) = 0x00007ff7bfefd558\r\n        stateMachine (0x00007FF7BFEFD4F0) = 0x00007ff7bfefd528\r\n\r\n00007FF7BFEFD510 000000012ED7791A Xunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable`1\u003cXunit.Sdk.IXunitTestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions)\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD588) = 0x0000000190063668\r\n        testCases (0x00007FF7BFEFD580) = 0x000000019043cb18\r\n        executionMessageSink (0x00007FF7BFEFD578) = 0x000000019043ca40\r\n        executionOptions (0x00007FF7BFEFD570) = 0x0000000190034ef8\r\n    LOCALS:\r\n        0x00007FF7BFEFD528 = 0x0000000190063668\r\n\r\n00007FF7BFEFD5A0 000000012ED77869 Xunit.Sdk.TestFrameworkExecutor`1[[System.__Canon, System.Private.CoreLib]].RunTests(System.Collections.Generic.IEnumerable`1\u003cXunit.Abstractions.ITestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions) [/_/src/xunit.execution/Sdk/Frameworks/TestFrameworkExecutor.cs @ 100]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD5D0) = 0x0000000190063668\r\n        testCases (0x00007FF7BFEFD5C8) = 0x0000000190393dd8\r\n        executionMessageSink (0x00007FF7BFEFD5C0) = 0x000000019043ca40\r\n        executionOptions (0x00007FF7BFEFD5B8) = 0x0000000190034ef8\r\n\r\n00007FF7BFEFD5F0 000000012ED7776F Xunit.Xunit2.RunTests(System.Collections.Generic.IEnumerable`1\u003cXunit.Abstractions.ITestCase\u003e, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions) [/_/src/xunit.runner.utility/Frameworks/v2/Xunit2.cs @ 110]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFD618) = 0x00000001900504c8\r\n        testCases (0x00007FF7BFEFD610) = 0x0000000190393dd8\r\n        messageSink (0x00007FF7BFEFD608) = 0x000000019043bbc0\r\n        executionOptions (0x00007FF7BFEFD600) = 0x0000000190034ef8\r\n\r\n00007FF7BFEFD630 000000012E29C866 Xunit.ConsoleClient.ConsoleRunner.ExecuteAssembly(System.Object, Xunit.XunitProjectAssembly, Boolean, Boolean, System.Nullable`1\u003cBoolean\u003e, System.Nullable`1\u003cInt32\u003e, Boolean, Boolean, System.Nullable`1\u003cXunit.AppDomainSupport\u003e, Boolean, Boolean, Xunit.XunitFilters, Boolean) [/_/src/Microsoft.DotNet.XUnitConsoleRunner/src/ConsoleRunner.cs @ 396]\r\n    PARAMETERS:\r\n        this (\u003cCLR reg\u003e) = 0x0000000190071720\r\n        consoleLock = \u003cno data\u003e\r\n        assembly (\u003cCLR reg\u003e) = 0x0000000190073268\r\n        serialize = \u003cno data\u003e\r\n        needsXml = \u003cno data\u003e\r\n        parallelizeTestCollections = \u003cno data\u003e\r\n        maxThreadCount = \u003cno data\u003e\r\n        diagnosticMessages = \u003cno data\u003e\r\n        noColor = \u003cno data\u003e\r\n        appDomains = \u003cno data\u003e\r\n        failSkips = \u003cno data\u003e\r\n        stopOnFail (0x00007FF7BFEFD7E8) = 0x0000000000000000\r\n        filters = \u003cno data\u003e\r\n        internalDiagnosticMessages (0x00007FF7BFEFD7F8) = 0x0000000000000000\r\n    LOCALS:\r\n        0x00007FF7BFEFD748 = 0x0000000190034a18\r\n        \u003cno data\u003e\r\n        0x00007FF7BFEFD738 = 0x0000000190034ef8\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        0x00007FF7BFEFD728 = 0x00000001901da158\r\n        0x00007FF7BFEFD720 = 0x00000001900502c8\r\n        0x00007FF7BFEFD718 = 0x00000001900503a0\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n        0x00007FF7BFEFD710 = 0x000000019043b860\r\n        \u003cno data\u003e\r\n        \u003cno data\u003e\r\n\r\n00007FF7BFEFD7C0 000000012E298288 Xunit.ConsoleClient.ConsoleRunner.RunProject(Xunit.XunitProject, Boolean, System.Nullable`1\u003cBoolean\u003e, System.Nullable`1\u003cBoolean\u003e, System.Nullable`1\u003cInt32\u003e, Boolean, Boolean, System.Nullable`1\u003cXunit.AppDomainSupport\u003e, Boolean, Boolean, Boolean) [/_/src/Microsoft.DotNet.XUnitConsoleRunner/src/ConsoleRunner.cs @ 293]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFDAA0) = 0x0000000190071720\r\n        project (0x00007FF7BFEFDA98) = 0x000000019002ad50\r\n        serialize (0x00007FF7BFEFDA94) = 0x0000000000000000\r\n        parallelizeAssemblies (0x00007FF7BFEFDA88) = 0x0000000000000001\r\n        parallelizeTestCollections (0x00007FF7BFEFDA80) = 0x0000000100000001\r\n        maxThreadCount (0x00007FF7BFEFDA78) = 0x0000000000000000\r\n        diagnosticMessages (0x00007FF7BFEFDAE0) = 0x0000000000000000\r\n        noColor (0x00007FF7BFEFDAE8) = 0x0000000000000001\r\n        appDomains (0x00007FF7BFEFDAF0) = 0x0000000000000000\r\n        failSkips (0x00007FF7BFEFDAF8) = 0x0000000000000000\r\n        stopOnFail (0x00007FF7BFEFDB00) = 0x0000000000000000\r\n        internalDiagnosticMessages (0x00007FF7BFEFDB08) = 0x0000000000000000\r\n    LOCALS:\r\n        0x00007FF7BFEFDA70 = 0x0000000190034438\r\n        0x00007FF7BFEFDA68 = 0x0000000190034480\r\n        0x00007FF7BFEFDA60 = 0x00000001900344e8\r\n        0x00007FF7BFEFDA58 = 0x0000000190034890\r\n        0x00007FF7BFEFDA50 = 0x0000000000000000\r\n        0x00007FF7BFEFDA48 = 0x0000000000000000\r\n        0x00007FF7BFEFDA40 = 0x0000000000000000\r\n        0x00007FF7BFEFDA38 = 0x0000000000000000\r\n        0x00007FF7BFEFDA30 = 0x0000000000000000\r\n        0x00007FF7BFEFDA28 = 0x0000000190034960\r\n        0x00007FF7BFEFDA20 = 0x0000000190073268\r\n        0x00007FF7BFEFDA18 = 0x0000000000000000\r\n        0x00007FF7BFEFDA10 = 0x0000000000000000\r\n\r\n00007FF7BFEFDAE0 000000012E258C45 Xunit.ConsoleClient.ConsoleRunner.EntryPoint(System.String[]) [/_/src/Microsoft.DotNet.XUnitConsoleRunner/src/ConsoleRunner.cs @ 81]\r\n    PARAMETERS:\r\n        this (0x00007FF7BFEFDC18) = 0x0000000190071720\r\n        args (0x00007FF7BFEFDC10) = 0x000000019000ef60\r\n    LOCALS:\r\n        0x00007FF7BFEFDC08 = 0x000000019002b8e0\r\n        0x00007FF7BFEFDC00 = 0x0000000190032900\r\n        0x00007FF7BFEFDBF8 = 0x000000019002bce0\r\n        0x00007FF7BFEFDBF4 = 0x0000000000000000\r\n        0x00007FF7BFEFDBF0 = 0x0000000000000000\r\n        0x00007FF7BFEFDBE8 = 0x0000000000000000\r\n\r\n00007FF7BFEFDC30 000000012DCC6AF9 Xunit.ConsoleClient.Program.Main(System.String[]) [/_/src/Microsoft.DotNet.XUnitConsoleRunner/src/Program.cs @ 16]\r\n    PARAMETERS:\r\n        args (0x00007FF7BFEFDC78) = 0x000000019000ef60\r\n    LOCALS:\r\n        0x00007FF7BFEFDC70 = 0x000000019000f930\r\n        0x00007FF7BFEFDC68 = 0x000000019000f960\r\n        0x00007FF7BFEFDC60 = 0x000000019000f9b8\r\n        0x00007FF7BFEFDC5C = 0x0000000000000000\r\n```\r\n\r\nI\u0027m not 100% sure if this is the same issue but I can provide more info if needed. \r\n",
                                           "updatedAt":  "2024-01-19T20:07:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xT5wJ",
                                           "createdAt":  "2024-01-19T20:11:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@wfurt, can we have the native stack?",
                                           "updatedAt":  "2024-01-19T20:11:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xT6qh",
                                           "createdAt":  "2024-01-19T20:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "this? \r\n```\r\n(lldb) bt\r\n* thread #1, queue = \u0027com.apple.main-thread\u0027, stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)\r\n  * frame #0: 0x0000000104664b33 libcoreclr.dylib`PAL_ThrowExceptionFromContext + 19\r\n    frame #1: 0x000000010489e86e libcoreclr.dylib`UnwindManagedExceptionPass2(PAL_SEHException\u0026, _CONTEXT*) + 990\r\n    frame #2: 0x000000010489e9ed libcoreclr.dylib`UnwindManagedExceptionPass1(PAL_SEHException\u0026, _CONTEXT*) + 349\r\n    frame #3: 0x000000010489ed1e libcoreclr.dylib`DispatchManagedException(PAL_SEHException\u0026, bool) + 78\r\n    frame #4: 0x0000000104810781 libcoreclr.dylib`IL_Throw(Object*) + 481\r\n    frame #5: 0x000000012efb57c2\r\n    frame #6: 0x000000012efb56f2\r\n    frame #7: 0x000000012efb2de5\r\n    frame #8: 0x000000012efb2948\r\n    frame #9: 0x000000012efb25fd\r\n    frame #10: 0x000000012efb05ed\r\n    frame #11: 0x0000000104952e81 libcoreclr.dylib`CallDescrWorkerInternal + 124\r\n    frame #12: 0x00000001047b18cc libcoreclr.dylib`CallDescrWorkerWithHandler(CallDescrData*, int) + 92\r\n    frame #13: 0x000000010485729b libcoreclr.dylib`RuntimeMethodHandle::InvokeMethod(Object*, void**, SignatureNative*, bool) + 1931\r\n    frame #14: 0x000000012e28696d\r\n    frame #15: 0x000000012e26e18f\r\n    frame #16: 0x000000012e28537b\r\n    frame #17: 0x000000012e285267\r\n    frame #18: 0x000000012efb056c\r\n    frame #19: 0x000000012efb018f\r\n    frame #20: 0x000000012efafa09\r\n    frame #21: 0x000000012efaf930\r\n    frame #22: 0x000000012efaf8a6\r\n    frame #23: 0x000000012efaf65e\r\n    frame #24: 0x000000012efaf541\r\n    frame #25: 0x000000012efaf4ac\r\n    frame #26: 0x000000012efaf460\r\n    frame #27: 0x000000012efaf3f3\r\n    frame #28: 0x000000012efaf1b1\r\n    frame #29: 0x000000012efaf0bb\r\n    frame #30: 0x000000012efaf02c\r\n    frame #31: 0x000000012efaefe1\r\n    frame #32: 0x000000012efae86b\r\n    frame #33: 0x000000012efae5bf\r\n    frame #34: 0x000000012efae4e0\r\n    frame #35: 0x000000012efae456\r\n    frame #36: 0x000000012efae28a\r\n    frame #37: 0x000000012efaccac\r\n    frame #38: 0x000000012efac7f3\r\n    frame #39: 0x000000012efac710\r\n    frame #40: 0x000000012efac68b\r\n    frame #41: 0x000000012efac42f\r\n    frame #42: 0x000000012efac32b\r\n    frame #43: 0x000000012efac29c\r\n    frame #44: 0x000000012efac211\r\n    frame #45: 0x000000012efac171\r\n    frame #46: 0x000000012efabb4b\r\n    frame #47: 0x000000012efab7bb\r\n    frame #48: 0x000000012efab4e2\r\n    frame #49: 0x000000012efab450\r\n    frame #50: 0x000000012efab3fa\r\n    frame #51: 0x000000012efab36a\r\n    frame #52: 0x000000012efab018\r\n    frame #53: 0x000000012efaaef9\r\n    frame #54: 0x000000012efaae20\r\n    frame #55: 0x000000012efaac41\r\n    frame #56: 0x000000012efaa160\r\n    frame #57: 0x000000012efa9d03\r\n    frame #58: 0x000000012efa9c20\r\n    frame #59: 0x000000012efa9b85\r\n    frame #60: 0x000000012efa7ed6\r\n    frame #61: 0x000000012efa781a\r\n    frame #62: 0x000000012efa752f\r\n    frame #63: 0x000000012efa7450\r\n    frame #64: 0x000000012efa73bf\r\n    frame #65: 0x000000012efa666b\r\n    frame #66: 0x000000012efa6539\r\n    frame #67: 0x000000012efa60d8\r\n    frame #68: 0x000000012efa5e03\r\n    frame #69: 0x000000012efa5d20\r\n    frame #70: 0x000000012efa5c85\r\n    frame #71: 0x000000012efa564c\r\n    frame #72: 0x000000012efa5429\r\n    frame #73: 0x000000012efa5350\r\n    frame #74: 0x000000012efa52c0\r\n    frame #75: 0x000000012efa4e6e\r\n    frame #76: 0x000000012efa285c\r\n    frame #77: 0x000000012efa17cd\r\n    frame #78: 0x000000012efa1630\r\n    frame #79: 0x000000012efa155f\r\n    frame #80: 0x000000012ef9d712\r\n    frame #81: 0x000000012ef9d3df\r\n    frame #82: 0x000000012ef9d300\r\n    frame #83: 0x000000012ef9d26f\r\n    frame #84: 0x000000012ef9cd42\r\n    frame #85: 0x000000012ef9c653\r\n    frame #86: 0x000000012ef9b733\r\n    frame #87: 0x000000012ef9b650\r\n    frame #88: 0x000000012ef9b5b5\r\n    frame #89: 0x000000012ef980f3\r\n    frame #90: 0x000000012ef9734f\r\n    frame #91: 0x000000012ef971a0\r\n    frame #92: 0x000000012ef96acf\r\n    frame #93: 0x000000012ef94f95\r\n    frame #94: 0x000000012ef8e52e\r\n    frame #95: 0x000000012ef8dc23\r\n    frame #96: 0x000000012ef8da30\r\n    frame #97: 0x000000012ef8d994\r\n    frame #98: 0x000000012ef8d678\r\n    frame #99: 0x000000012ef8c155\r\n    frame #100: 0x000000012ef8b454\r\n    frame #101: 0x000000012ef8b3b0\r\n    frame #102: 0x000000012ef8b355\r\n    frame #103: 0x000000012ed7883f\r\n    frame #104: 0x000000012ed78468\r\n    frame #105: 0x000000012ed78380\r\n    frame #106: 0x000000012ed782a5\r\n    frame #107: 0x000000012ed77bdf\r\n    frame #108: 0x000000012ed77a6e\r\n    frame #109: 0x000000012ed779dc\r\n    frame #110: 0x000000012ed7791a\r\n    frame #111: 0x000000012ed77869\r\n    frame #112: 0x000000012ed7776f\r\n    frame #113: 0x000000012e29c866\r\n    frame #114: 0x000000012e298288\r\n    frame #115: 0x000000012e258c45\r\n    frame #116: 0x000000012dcc6af9\r\n    frame #117: 0x0000000104952e81 libcoreclr.dylib`CallDescrWorkerInternal + 124\r\n    frame #118: 0x00000001047b21e3 libcoreclr.dylib`MethodDescCallSite::CallTargetWorker(unsigned long long const*, unsigned long long*, int) + 1587\r\n    frame #119: 0x00000001046ae076 libcoreclr.dylib`RunMain(MethodDesc*, short, int*, PtrArray**) + 742\r\n    frame #120: 0x00000001046ae462 libcoreclr.dylib`Assembly::ExecuteMainMethod(PtrArray**, int) + 450\r\n    frame #121: 0x00000001046d6f61 libcoreclr.dylib`CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 689\r\n    frame #122: 0x000000010469b9b2 libcoreclr.dylib`coreclr_execute_assembly + 226\r\n    frame #123: 0x0000000103198b84 libhostpolicy.dylib`coreclr_t::execute_assembly(int, char const**, char const*, unsigned int*) + 132\r\n    frame #124: 0x00000001031ddf8d libhostpolicy.dylib`run_app_for_context(hostpolicy_context_t const\u0026, int, char const**) + 1117\r\n    frame #125: 0x00000001031de212 libhostpolicy.dylib`run_app(int, char const**) + 98\r\n    frame #126: 0x00000001031dee72 libhostpolicy.dylib`corehost_main + 434\r\n    frame #127: 0x0000000100557f0b libhostfxr.dylib`execute_app(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e const\u0026, corehost_init_t*, int, char const**) + 779\r\n    frame #128: 0x000000010054fc50 libhostfxr.dylib`(anonymous namespace)::read_config_and_execute(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e const\u0026, host_startup_info_t const\u0026, std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e const\u0026, std::__1::unordered_map\u003cknown_options, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e\u003e\u003e, known_options_hash, std::__1::equal_to\u003cknown_options\u003e, std::__1::allocator\u003cstd::__1::pair\u003cknown_options const, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e\u003e\u003e\u003e\u003e\u003e const\u0026, int, char const**, host_mode_t, bool, char*, int, int*) + 272\r\n    frame #129: 0x000000010054ca2a libhostfxr.dylib`fx_muxer_t::handle_exec_host_command(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e const\u0026, host_startup_info_t const\u0026, std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e const\u0026, std::__1::unordered_map\u003cknown_options, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e\u003e\u003e, known_options_hash, std::__1::equal_to\u003cknown_options\u003e, std::__1::allocator\u003cstd::__1::pair\u003cknown_options const, std::__1::vector\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e, std::__1::allocator\u003cstd::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e\u003e\u003e\u003e\u003e\u003e const\u0026, int, char const**, int, host_mode_t, bool, char*, int, int*) + 426\r\n    frame #130: 0x000000010054bd87 libhostfxr.dylib`fx_muxer_t::execute(std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e\u003e, int, char const**, host_startup_info_t const\u0026, char*, int, int*) + 423\r\n    frame #131: 0x0000000100543a8e libhostfxr.dylib`hostfxr_main_startupinfo + 190\r\n    frame #132: 0x0000000100011476 dotnet`exe_start(int, char const**) + 1446\r\n    frame #133: 0x00000001000118a8 dotnet`main + 216\r\n    frame #134: 0x00007ff80bdd141f dyld`start + 1903\r\n```\r\n\r\nI can reproduce while running under lldb. I\u0027m working on binary search now to isolate breaking change. ",
                                           "updatedAt":  "2024-01-19T20:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xUDFn",
                                           "createdAt":  "2024-01-19T20:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@wfurt, yes, this is what I meant by native stack. This doesn\u0027t look like the GC issue we are investigating though, instead,this looks like a managed exception.",
                                           "updatedAt":  "2024-01-19T20:39:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xUEVe",
                                           "createdAt":  "2024-01-19T20:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "OK. The part I\u0027m trying understand is what it would crash the whole test process. I tried several test suites and I get the same results. I _could_ try the coreclr tests as well as Mac is my primary machine.  ",
                                           "updatedAt":  "2024-01-19T20:42:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xoovq",
                                           "createdAt":  "2024-01-23T16:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Any updates here? This bug is blocking our OSX testing as it results in a near 100% failure rate. ",
                                           "updatedAt":  "2024-01-23T16:42:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xp0td",
                                           "createdAt":  "2024-01-23T19:32:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I wasn\u0027t actively working on it for the last few days. I am happy to if I can get myself some useful information that I use.",
                                           "updatedAt":  "2024-01-23T19:32:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xp8J9",
                                           "createdAt":  "2024-01-23T19:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "We\u0027ve offered to change our repo to give any information possible. We are bound by the limits of Helix so full dumps aren\u0027t possible. \r\n\r\n\u003e I wasn\u0027t actively working on it for the last few days\r\n\r\nThis is not very encouraging. There appears to be a runtime bug that blocks the compiler from executing correctly on one of our key operating systems. \r\n\r\n",
                                           "updatedAt":  "2024-01-23T19:53:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xp9Q_",
                                           "createdAt":  "2024-01-23T19:57:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e We\u0027ve offered to change our repo to give any information possible.\r\n\r\nIs it possible to run the CI with an instrumented runtime that emit logs instead of dump files to workaround the limitation that dumps are unavailable?",
                                           "updatedAt":  "2024-01-23T19:57:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xp-Z-",
                                           "createdAt":  "2024-01-23T20:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Is it possible to run the CI with an instrumented runtime that emit logs instead of dump files to workaround the limitation that dumps are unavailable?\r\n\r\nYes. Is there a runtime available that is instrumented that we can use + instructions on how to use it? \r\n",
                                           "updatedAt":  "2024-01-23T20:00:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xp_nf",
                                           "createdAt":  "2024-01-23T20:04:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e \u003e Is it possible to run the CI with an instrumented runtime that emit logs instead of dump files to workaround the limitation that dumps are unavailable?\r\n\u003e \r\n\u003e Yes. Is there a runtime available that is instrumented that we can use + instructions on how to use it?\r\n\r\nThere is none yet, but I can work on instrumenting it. Since we always crash on `mark_ro_segment`, we would like to know which line is failing there, it can be as easily as `printf(\"line number\\n\");` between every line there.  Assuming I am logging to `stdout`, will that information be captured?",
                                           "updatedAt":  "2024-01-23T20:04:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqBk1",
                                           "createdAt":  "2024-01-23T20:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODTzZzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cshung",
                                                                               "createdAt":  "2024-01-23T20:17:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Assuming I am logging to stdout, will that information be captured?\r\n\r\nI _think_ so. The stdout for xunit is captured in the logs so I would expect `stdout` in general to be captured. The `dotnet test` is a multi-process event which is why I have a slight bit of uncertainty. ",
                                           "updatedAt":  "2024-01-23T20:09:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqFmR",
                                           "createdAt":  "2024-01-23T20:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I am working on the instrumentation now, when I am done, I will push a branch to my fork where I have the code changes. As of now, the changes are concentrated in `gc.cpp`, so it will suffice to just change the GC. \r\n\r\nTo make the managed process use the new GC, we need to build a `libclrgc.dylib` next to the loaded `libcoreclr.dylib`, and then set the environment variable `DOTNET_GCName` to `libclrgc.dyilb`, that should make the processes use the new GC.\r\n\r\nFor the first instrumentation round, all I really cared is the very tip of the log when it crashes. Should I worry about the possibility that multiple processes share the same stdout and the log could come from multiple processes?",
                                           "updatedAt":  "2024-01-23T20:21:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqHxt",
                                           "createdAt":  "2024-01-23T20:28:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e To make the managed process use the new GC, we need to build a libclrgc.dylib next to the loaded libcoreclr.dylib, and then set the environment variable DOTNET_GCName to libclrgc.dyilb, that should make the processes use the new GC.\r\n\r\nLet me know when you have it ready and I\u0027ll hack our build to use it. \r\n\r\n\u003e Should I worry about the possibility that multiple processes share the same stdout and the log could come from multiple processes?\r\n\r\nThink we\u0027ll have to just try and see for now. \r\n",
                                           "updatedAt":  "2024-01-23T20:28:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xrXUm",
                                           "createdAt":  "2024-01-24T01:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I have got the instrumentation ready, can we try this branch?\r\n\r\nhttps://github.com/cshung/runtime/tree/public/mark-ro-instrumentation\r\n\r\nDon\u0027t worry about rebasing it, `clrgc` is meant to work across versions.",
                                           "updatedAt":  "2024-01-24T01:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxCQs",
                                           "createdAt":  "2024-01-24T18:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@cshung \r\n\r\nHow do we get an OSX `dotnet` host out of that repo? If you have one locally could you just share it out and I\u0027ll pubish it around. ",
                                           "updatedAt":  "2024-01-24T18:17:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxQ22",
                                           "createdAt":  "2024-01-24T18:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e @cshung\r\n\u003e \r\n\u003e How do we get an OSX `dotnet` host out of that repo? If you have one locally could you just share it out and I\u0027ll pubish it around.\r\n\r\nI am hoping it suffice to just replace the GC, we did quite some work in .net 6/7 time frame to make that possible. By just replacing the GC, we have better chance to reproduce the issue since none of the other things (e.g. vm/jit/libraries) are changed.\r\n\r\nAre you hitting some issues with that? I maybe able to figure out what that is.\r\n\r\nIf you also wanted/needed to replace the `dotnet` host, then I am not sure how to do. @elinor-fung might know how.",
                                           "updatedAt":  "2024-01-24T18:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxYjN",
                                           "createdAt":  "2024-01-24T19:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT923g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cshung",
                                                                               "createdAt":  "2024-01-24T20:12:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elinor-fung",
                                                                               "createdAt":  "2024-01-24T20:19:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e `dotnet host`\r\n\r\nBuild the branch using `./build.sh -c release`. The host will be dropped under `artifacts/bin/osx-x64.Release/corehost`.\r\n\r\nAs @cshung said, it should not be necessary. Dropping private `libclrgc.dylib` and setting env variable should be sufficient.",
                                           "updatedAt":  "2024-01-24T19:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xyIM0",
                                           "createdAt":  "2024-01-24T21:44:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "The problem is that our devs don\u0027t have OSX machines so building ourselves isn\u0027t going to help. Our OSX machine access is through CI only. That is why I was asking if you could share the built GC out and I can take it from there. ",
                                           "updatedAt":  "2024-01-24T21:44:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xyX_L",
                                           "createdAt":  "2024-01-24T22:36:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@cshung Can you queue draft PR with your change? It is the easiest way to get the instrumented GC binary built and shared.",
                                           "updatedAt":  "2024-01-24T22:36:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x5FYm",
                                           "createdAt":  "2024-01-25T18:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@agocke was awesome enough to grab the most recent Roslyn failure bits from Helix, drop them on his Mac and run the tests in a loop for three hours. Eventually he got a full [crash dump][1] ([compressed][2]) for the problem. The dump should be accessible to anyone at Microsoft. Warning: it\u0027s 12GB. \r\n\r\n[1]: https://microsoft-my.sharepoint.com/:u:/p/jaredpar/Eaww0rugWHVFgwMCM1AU-CMBAldpeWCu3EXrReWs_pUS9A?e=aAl2Ym\r\n[2]: https://microsoft-my.sharepoint.com/:u:/p/jaredpar/EV_pwM4_VvRLmHWItxhdIJsBkY1tn--gZOPV-qzoeJhYjA?e=RXaXvD",
                                           "updatedAt":  "2024-01-25T19:21:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x6GTH",
                                           "createdAt":  "2024-01-25T21:50:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Thanks @jaredpar and @agocke, I am trying to open the dump.\r\nI am able to download the dump and open it on a osx arm64 machine, but I can\u0027t extract useful information out of it.\r\n\r\nHere is what I tried:\r\n```\r\nandrewau@boron dotnet % lldb ./dotnet --core ~/Desktop/core\\ -\\ Copy.97526\r\n(lldb) target create \"./dotnet\" --core \"/Users/andrewau/Desktop/core - Copy.97526\"\r\nCore file \u0027/Users/andrewau/Desktop/core - Copy.97526\u0027 (arm64) was loaded.\r\n(lldb) bt\r\n* thread #10, stop reason = ESR_EC_DABORT_EL0 (fault address: 0x1187ce2e8)\r\n  * frame #0: 0x00000001061338f8\r\n(lldb) bt all\r\n  thread #1\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #2\r\n    frame #0: 0x00007ff7ffdd3294\r\n    frame #1: 0x00007ff7ffddf524\r\n    frame #2: 0x00007ff7ffde0e40\r\n  thread #3\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #4\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #5\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #6\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #7\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #8\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #9\r\n    frame #0: 0x00007ff8a45d6a78\r\n* thread #10, stop reason = ESR_EC_DABORT_EL0 (fault address: 0x1187ce2e8)\r\n  * frame #0: 0x00000001061338f8\r\n  thread #11\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #12\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #13\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #14\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #15\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #16\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #17\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #18\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #19\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #20\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #21\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #22\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #23\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #24\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #25\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #26\r\n    frame #0: 0x00007ff8a45d6a78\r\n  thread #27\r\n    frame #0: 0x00007ff8a45d6a78\r\n(lldb) target modules list\r\n[  0] 2026C5B3-94DF-38EC-9053-6CF87776BE3E 0x0000000100000000 /Users/andrewau/toolssw/dotnet/dotnet \r\n[  1] 324E4AD9-E01F-3183-B09F-3E20B326643A 0x00000001800b7000 /usr/lib/dyld \r\n[  2] 375254EB-5A65-35D0-B6B4-773E6763D289 0x0000000180352000 /usr/lib/libc++.1.dylib \r\n[  3] C9A4714E-2961-3FBD-8E74-8615B3A5777E 0x000000018cccd000 /usr/lib/libSystem.B.dylib \r\n[  4] E812122A-DA5B-3F1A-A15C-936C0B9D26BE 0x00000001803e0000 /usr/lib/libc++abi.dylib \r\n[  5] B0558732-E048-33CE-A6D7-2EC929BFCA1D 0x000000018ccc7000 /usr/lib/system/libcache.dylib \r\n[  6] 1A4B497A-69D2-3048-8F47-133482DABAFA 0x000000018cc82000 /usr/lib/system/libcommonCrypto.dylib \r\n[  7] DE627B59-A9DD-30C5-8F6D-BEF3949C64A1 0x000000018ccae000 /usr/lib/system/libcompiler_rt.dylib \r\n[  8] 11CC75EB-6597-33C6-B725-607F7E0B0A28 0x000000018cca4000 /usr/lib/system/libcopyfile.dylib \r\n[  9] 61DEF451-18FC-3FA7-B05A-F80B0BF36404 0x00000001801b3000 /usr/lib/system/libcorecrypto.dylib \r\n[ 10] A53D555D-F748-3010-83FE-385C660A81BD 0x0000000180289000 /usr/lib/system/libdispatch.dylib \r\n[ 11] 33108EF5-2DC1-3E6D-B3BE-C55520E1594F 0x0000000180444000 /usr/lib/system/libdyld.dylib \r\n[ 12] FCB5DECB-A48D-3B82-9E12-03F2AFA3B0F9 0x000000018ccbd000 /usr/lib/system/libkeymgr.dylib \r\n[ 13] 8C3F607B-5FA9-3C80-AC97-66F2BBCF2F85 0x000000018cc5a000 /usr/lib/system/libmacho.dylib \r\n[ 14] 9A7AD27E-0ECF-3D69-AD56-4C41E0AC19DE 0x000000018c1f3000 /usr/lib/system/libquarantine.dylib \r\n[ 15] DE28FFB5-D896-38E2-B585-E9847A7918C3 0x000000018ccba000 /usr/lib/system/libremovefile.dylib \r\n[ 16] 092396DB-281D-3FA0-9E50-43F0B11AA972 0x0000000185b0e000 /usr/lib/system/libsystem_asl.dylib \r\n[ 17] 41DD58AD-E581-3BC7-A2C4-314046BA471F 0x000000018014c000 /usr/lib/system/libsystem_blocks.dylib \r\n[ 18] AB8A0A0B-9A1E-3284-9243-5A0334468AE5 0x00000001802d3000 /usr/lib/system/libsystem_c.dylib \r\n[ 19] 15F74475-A05D-333E-85B8-8BCFF0170FAC 0x000000018ccb2000 /usr/lib/system/libsystem_collections.dylib \r\n[ 20] 136CD597-BE32-3806-8C7E-B144FCC956C6 0x000000018b4ce000 /usr/lib/system/libsystem_configuration.dylib \r\n[ 21] 9176BF94-EF84-3C52-93FD-7014FD23E850 0x000000018a54e000 /usr/lib/system/libsystem_containermanager.dylib \r\n[ 22] 9DF87415-44A0-31F3-BC0B-BFBC6D5BFC2B 0x000000018c8f9000 /usr/lib/system/libsystem_coreservices.dylib \r\n[ 23] A7805817-0D12-3663-8B9B-EE13AA69A1C4 0x00000001837e2000 /usr/lib/system/libsystem_darwin.dylib \r\n[ 24] 458D27F4-5C6F-312C-A552-437FE7B0F705 0x00000002217ba000 /usr/lib/system/libsystem_darwindirectory.dylib \r\n[ 25] 4FCBB463-F915-38A4-AB32-159AF74479E9 0x000000018ccbe000 /usr/lib/system/libsystem_dnssd.dylib \r\n[ 26] E361D92B-A13D-3278-A67E-059BCC1A1942 0x00000001802d0000 /usr/lib/system/libsystem_featureflags.dylib \r\n[ 27] 0B3340BE-7CBE-356F-9ACE-7A062DC0554E 0x0000000180471000 /usr/lib/system/libsystem_info.dylib \r\n[ 28] DBAEE968-94BC-390A-9277-2F0D6696F804 0x000000018cc1f000 /usr/lib/system/libsystem_m.dylib \r\n[ 29] 690A8B04-8E64-3332-B5A5-56A3D5C1C43F 0x0000000180252000 /usr/lib/system/libsystem_malloc.dylib \r\n[ 30] DB1022B7-FDD1-3045-A287-3149C1B3D7DA 0x0000000185a7e000 /usr/lib/system/libsystem_networkextension.dylib \r\n[ 31] 60ECA172-D5DA-3743-AE08-2E397A8C7754 0x0000000183c55000 /usr/lib/system/libsystem_notify.dylib \r\n[ 32] 5F138857-5FE4-30BE-8B63-FDD645DF23A1 0x000000018b4d3000 /usr/lib/system/libsystem_sandbox.dylib \r\n[ 33] C2EA7F93-A263-39A2-BCDC-F26DCE9DFA32 0x000000018ccb7000 /usr/lib/system/libsystem_secinit.dylib \r\n[ 34] CA94FC21-BC40-3B43-B65D-B87ECE9E1D48 0x00000001803fc000 /usr/lib/system/libsystem_kernel.dylib \r\n[ 35] E1840DAA-9C10-393D-A3A3-94DDE6FE0011 0x000000018046a000 /usr/lib/system/libsystem_platform.dylib \r\n[ 36] A7D94C96-7B1F-3229-9BEA-048D037C3292 0x0000000180437000 /usr/lib/system/libsystem_pthread.dylib \r\n[ 37] 16E4B671-D97C-3908-9127-307A83DF3DCD 0x00000001874e3000 /usr/lib/system/libsystem_symptoms.dylib \r\n[ 38] 1F45FD2F-3ABC-3AB3-9A6F-CC9C727ACBDA 0x0000000180198000 /usr/lib/system/libsystem_trace.dylib \r\n[ 39] 0C443A31-8851-30E2-9FAD-B4C7633F5135 0x000000018cc90000 /usr/lib/system/libunwind.dylib \r\n[ 40] 272DC84F-1871-3ADD-8126-2155D6EFF7AB 0x0000000180151000 /usr/lib/system/libxpc.dylib \r\n[ 41] 9BAB9556-7A2A-30A8-ACDE-010BA8E2367D 0x0000000180068000 /usr/lib/libobjc.A.dylib \r\n[ 42] B4164258-BFB1-3871-A2E2-528C373AEF77 0x000000018cc9c000 /usr/lib/liboah.dylib \r\n```\r\n\r\nIt looks like the stack unwind is failing because we don\u0027t have symbols for `libcoreclr.dylib`, and it is not even listed on the module list, am I missing something like matching binaries or symbols?\r\n\r\n",
                                           "updatedAt":  "2024-01-25T21:50:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x6Xai",
                                           "createdAt":  "2024-01-25T22:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Feel free to reach out to @hoyosjs for instructions on debugging on Mac",
                                           "updatedAt":  "2024-01-25T22:54:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x7ycF",
                                           "createdAt":  "2024-01-26T05:18:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Was this done on emulation? I see rosetta loaded and we don\u0027t support dumps using emulation. However, the dump and runtime in it are arm64, so I am confused. And how was this dump collected? Overall, the dump seems to be in a pretty bad state.",
                                           "updatedAt":  "2024-01-26T05:18:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKO5i",
                                           "createdAt":  "2024-01-29T18:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@hoyosjs confirmed with me that the second dump is unfortunately unusable. We might be able to get some info from the 1st dump though. I will work with him on that.\r\n\r\nRegardless, can we run the instrumented bits? It is quite likely that I will need to know why a bad frozen segment get into the heap to begin with, and that cannot be solved by the dump because the crime scene is long gone for that and logging will be the preferred method for debugging.",
                                           "updatedAt":  "2024-01-29T18:04:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKSQW",
                                           "createdAt":  "2024-01-29T18:13:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@cshung \r\n\r\n\u003e Regardless, can we run the instrumented bits?\r\n\r\nSure thing. Was hoping the dump file would be enough. If it\u0027s not though I can queue up the instrumented GC. \r\n\r\n[Pipeline Run](https://dev.azure.com/dnceng-public/public/_build/results?buildId=544856\u0026view=results)",
                                           "updatedAt":  "2024-01-29T18:50:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yLYyQ",
                                           "createdAt":  "2024-01-29T21:17:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e [Pipeline Run](https://dev.azure.com/dnceng-public/public/_build/results?buildId=544856\u0026view=results)\r\n\r\nThank you! It looks like the run is completed, but the only failure is \"Validate Generated Syntax Files\" failing with a \"The system cannot find the path specified.\" on Windows?",
                                           "updatedAt":  "2024-01-29T21:17:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yLlP9",
                                           "createdAt":  "2024-01-29T21:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@cshung Yes. I\u0027ve re-run it a few times and it\u0027s passing every time. Worried whatever timing issues exists is essentially undone by adding printf into the code. Trying a few more runs. ",
                                           "updatedAt":  "2024-01-29T21:53:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ySY3Z",
                                           "createdAt":  "2024-01-30T16:27:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Is there some way we can observe that the new GC is actually in use in the pipeline?\r\nI am going through the log but I can\u0027t see any of the logging statement, or did we just skip the log if the tests pass?\r\n",
                                           "updatedAt":  "2024-01-30T16:27:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ySjVt",
                                           "createdAt":  "2024-01-30T16:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Is there some way we can observe that the new GC is actually in use in the pipeline?\r\n\r\nI don\u0027t know ... can we? 😄 \r\n\r\n\u003e I am going through the log but I can\u0027t see any of the logging statement, or did we just skip the log if the tests pass?\r\n\r\nThe log is not easy to find when tests pass. Have to start digging through the Helix API directly to find it. J\r\n",
                                           "updatedAt":  "2024-01-30T16:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ySpoh",
                                           "createdAt":  "2024-01-30T17:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Tracked down the console log and it does seem like something is going sideways here. Our mac logic which was working one week ago is now no longer hitting. Yay infra. Digging into it. ",
                                           "updatedAt":  "2024-01-30T17:00:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ybSoH",
                                           "createdAt":  "2024-01-31T19:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "Just a link for easy access.\r\nhttps://github.com/dotnet/roslyn/pull/71724",
                                           "updatedAt":  "2024-01-31T19:08:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58qtp2",
                                           "createdAt":  "2024-05-02T21:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "can this be closed now since this hasn\u0027t reproed in a while? ",
                                           "updatedAt":  "2024-05-02T21:00:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58sG6M",
                                           "createdAt":  "2024-05-03T00:10:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgdl2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mangod9",
                                                                               "createdAt":  "2024-05-03T04:38:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Yeah. Can re-open if we see it again.",
                                           "updatedAt":  "2024-05-03T00:10:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58uDlT",
                                           "createdAt":  "2024-05-03T07:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjonescz",
                                           "body":  "I think this happens regularly in [roslyn-CI main runs](https://dev.azure.com/dnceng-public/public/_build?definitionId=95\u0026_a=summary\u0026branchFilter=319) - all these red circles are failing macOS legs:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/3669664/c295352a-c484-4390-ba61-242ed38727a8)\r\n",
                                           "updatedAt":  "2024-05-03T07:19:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xJSV",
                                           "createdAt":  "2024-05-03T15:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@cshung, do you still have the private with logging which you had built to diagnose these? ",
                                           "updatedAt":  "2024-05-03T15:35:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xiOd",
                                           "createdAt":  "2024-05-03T16:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e @cshung, do you still have the private with logging which you had built to diagnose these?\r\n\r\nYes, the instrumentation branch is still there\r\n",
                                           "updatedAt":  "2024-05-03T16:32:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsmMh",
                                           "createdAt":  "2024-06-26T22:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is there any update on the investigation here? Have we been able to run with instrumentation enabled? ",
                                           "updatedAt":  "2024-06-26T22:33:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxzJ7",
                                           "createdAt":  "2024-06-27T08:26:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjonescz",
                                           "body":  "This actually stopped happening when roslyn was updated from .NET 8 to .NET 9 SDK in https://github.com/dotnet/roslyn/pull/73408.",
                                           "updatedAt":  "2024-06-27T08:26:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C5c63",
                                           "createdAt":  "2024-06-28T04:09:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnonvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2024-06-28T04:35:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjonescz",
                                                                               "createdAt":  "2024-06-28T07:43:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mangod9",
                                           "body":  "so is it ok to close for now and reopen if it occurs again? ",
                                           "updatedAt":  "2024-06-28T04:09:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C9yL_",
                                           "createdAt":  "2024-06-28T16:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Does that mean we have an 8.0 bug still?",
                                           "updatedAt":  "2024-06-28T16:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C9ykY",
                                           "createdAt":  "2024-06-28T16:03:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Does that mean we have an 8.0 bug still?\r\n\r\n100% yes. ",
                                           "updatedAt":  "2024-06-28T16:03:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C-ks2",
                                           "createdAt":  "2024-06-28T18:35:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@mangod9 can someone on your team look at this? I think this might meet the 8.0 servicing bar since it\u0027s LTS",
                                           "updatedAt":  "2024-06-28T18:35:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C-nj6",
                                           "createdAt":  "2024-06-28T18:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I think the challenge has been lack of dumps from MacOS, hence @cshung had added some logging to diagnose, but if the issue is not reproing we cant investigate further (unless there is a way to move the toolset back to 8 and try to repro)",
                                           "updatedAt":  "2024-06-28T18:45:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C-o-e",
                                           "createdAt":  "2024-06-28T18:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "It seems like you could manually queue a run with that change.",
                                           "updatedAt":  "2024-06-28T18:50:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C_i_t",
                                           "createdAt":  "2024-06-28T21:41:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I am more than happy to try to figure out what is wrong here.\r\n\r\n### What I can do:\r\n1. Prepare a `libclrgc.dylib` that has the instrumentation allow me to figure out what is going on.\r\n2. Prepare a `libclrgc.dylib` that crashes on a GC, so we can test if we can get it to work or not.\r\n3. Figure out what is going on after I get back the log together with the faulting process.\r\n\r\n### What I don\u0027t know how to:\r\n1. Queue a run with a modified libclrgc.dylib, and\r\n2. Find out the associated logs when a crash happened\r\n\r\n@jaredpar and I used to have a branch [here](https://github.com/dotnet/roslyn/pull/71913) where I can update and push a `libclrgc.dylib` and run, and through some web UI I was able to get back to log. Unfortunately, by the time we have got these setup, the crash no longer repros and there was nothing that we can do at that point. If we could get it to repro again that would be great.\r\n\r\nI don\u0027t know if it is feasible, but it would be great to be able to freeze the Roslyn code and the dotnet used for running so that the bug will hopefully not suddenly go away by itself.",
                                           "updatedAt":  "2024-06-28T21:41:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C_nU3",
                                           "createdAt":  "2024-06-28T22:04:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Once you authenticate you can queue a run against any branch you want.\r\n![image](https://github.com/dotnet/runtime/assets/515774/6a200d10-e2da-422e-8d4d-fd8d263bec90)\r\n\r\nAll you should need to do is take your commits so far, find a Roslyn commit before the SDK update that stopped the failure, reapply the commits on top of Roslyn at that point, then push that branch to `dotnet/roslyn` (not your fork). Then you will be able to queue a build from the UI.",
                                           "updatedAt":  "2024-06-28T22:04:06Z"
                                       }
                                   ],
                         "totalCount":  58
                     },
        "title":  "Runtime crashes on OSX running compiler unit tests",
        "labels":  [
                       "os-mac-os-x",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97434",
        "createdAt":  "2024-01-24T05:36:43Z",
        "number":  97434,
        "author":  "xiaoyuvax",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T21:14:14Z",
        "body":  "### Background and motivation\r\n\r\nThis proposal is based on the rudimentary weakness of current implementation of Microsoft.Extensions.ObjectPool, inspired by the discussions in https://github.com/dotnet/aspnetcore/pull/52935#discussion_r1461473774, and https://github.com/dotnet/aspnetcore/issues/44901.\r\nwherein, the rudimentary problem/defect of taking advantage of ObjectPool in terms of performance, memory cost and manageability is discussed as the LIFECYCLEs of object instances to be pooled r not easy to manage, due to unable to determine reference count, especially in complicated code structure/hierachy.  \r\nOtherwise, to reset the pooled instance is neither performance friendly.\r\nThe actually problem manifests over two dimensions:\r\n1)  spatially, multi-references: an object referenced by multilple other objects whose lifecycles might be hard to determine during runtime.\r\n2)  temporally, non-synchronizable lifecycles of referenced objects:  one object referencing other objects whose lifecycles r not necessarily the same and is also hard to be determined during runtime (typical cases r properties referencing other types).\r\nthus it is not easy to determine when to Return() the objects. A programmer must be carefully design/manage the lifecycles of all types to be pooled as not to mess the things up, as brought challenges for code structuring/organization.\r\nsimply speaking, the weakness/difficulty of Microsoft.Extensions.ObjectPool is : when to call Return()?\r\ntherefore, i think: Can we not call Return()?  \r\n\r\nTherefore, i\u0027d like to propose/expect a low-level solution to replace Microsoft.Extensions.ObjectPool at the GC Level, for i think GC level Object Reusability would be a breaking improvement to the memory management of dotnet.\r\nThe thinking is simple, synchronize the object lifecycle management with that managed by GC, let GC do the dirty thing. ;-)\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.GC;\r\n\r\npublic static partial class GC\r\n{\r\n    //This method register a type to be pooled thereafter, and allow GC not to recycle instances of this type of specified count\r\n    //The implementation may adopt that of Microsoft.Extensions.ObjectPool somehow, but in a lower level fashion, so that \r\n    // programmer doesn\u0027t have to call Return().  \r\n    //here IPooledObjectPolicy\u003cT\u003e is equivalent to  Microsoft.Extensions.ObjectPool.IPooledObjectPolicy\u003cT\u003e\r\n    public static void Poolize\u003cT\u003e(IPooledObjectPolicy\u003cT\u003e poolPolicy);\r\n\r\n    //This method allow retrieve an completely reinitialized instance of specified type T from the framework-level object pool.\r\n    // the destructor and constructor should be orderly called upon the returned instance as to reinitialize it.\r\n    public static T Renew\u003cT\u003e();\r\n\r\n    //This method forcibly put an instance to the framework-level object pool, and is usually not neccessary\r\n    public static T Pool\u003cT\u003e(T object);\r\n}\r\n```\r\n\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n\r\n//Poolize a type\r\nGC.Poolize\u003cMyType\u003e();\r\n\r\n//Renew an object ( i\u0027d strongly recommend C# to introduce a new keyword \"renew\" to facilitate this operation, as detailed in the last part)\r\n// the Renewed object should be default and exactly like the result of new()\r\nMyType obj= GC.Renew\u003cMyType\u003e();          // in next version of C#, it might introduce new keyworkd like MyType obj= renew();\r\n...\r\n\r\n//if necessary, forcibly and explicitly pool the obj before GC process it, as to shorten the lifecycle of the instance, \r\n// as will make the instance to be reinitialized to default..\r\nGC.Pool(obj);\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nStrongly recommend C# introducing the \"renew\" keyword to implement the whole process of above 3 method.\r\n\r\n```csharp\r\n\r\n//this syntax may register a type to GC.Pool, renew an instance;\r\nMyType obj= renew Mytype();        \r\n\r\n//this syntax explicitly pool an instance.\r\nrenew(obj);\r\n\r\n//this syntax renew obj with a new instance while pooling the old instance\r\nvar obj=renew(obj);\r\n```\r\n\r\nthe \"renew\" mechanism will be a great change to the memory management of C#, if implemented in the lowest level, where object should be reinitialized with lowest-possible-level  measure, as to achieve best performance.\r\n\r\notherwise, GC.DePoolize\u003cT\u003e() might also be introduced to unregister the type.\r\n\r\n### Risks\r\n\r\nA dramatical change to the GC mechanism.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcc0OjA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xsMR5",
                                           "createdAt":  "2024-01-24T05:36:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThis proposal is based on the rudimentary weakness of current implementation of Microsoft.Extensions.ObjectPool, inspired by the discussions in https://github.com/dotnet/aspnetcore/pull/52935#discussion_r1461473774, and https://github.com/dotnet/aspnetcore/issues/44901.\r\nwherein, the rudimentary problem/defect of taking advantage of ObjectPool in terms of performance, memory cost and manageability is discussed as the LIFECYCLEs of object instances to be pooled r not easy to manage, due to unable to determine reference count, especially in complicated code structure/hierachy.  \r\nOtherwise, to reset the pooled instance is neither performance friendly.\r\nThe actually problem manifests over two dimensions:\r\n1)  spatially, multi-references: an object referenced by multilple other objects whose lifecycles might be hard to determine during runtime.\r\n2)  temporally, non-synchronizable lifecycles of referenced objects:  one object referencing other objects whose lifecycles r not necessarily the same and is also hard to be determined during runtime (typical cases r properties referencing other types).\r\nthus it is not easy to determine when to Return() the objects. A programmer must be carefully design/manage the lifecycles of all types to be pooled as not to mess the things up, as brought challenges for code structuring/organization.\r\nsimply speaking, the weakness/difficulty of Microsoft.Extensions.ObjectPool is : when to call Return()?\r\ntherefore, i think: Can we not call Return()?  \r\n\r\nTherefore, i\u0027d like to propose/expect a low-level solution to replace Microsoft.Extensions.ObjectPool at the GC Level, for i think GC level Object Reusability would be a breaking improvement to the memory management of dotnet.\r\nThe thinking is simple, synchronize the object lifecycle management with that managed by GC, let GC do the dirty thing. ;-)\n\n### API Proposal\n\n```csharp\r\nnamespace System.GC;\r\n\r\npublic static partial class GC\r\n{\r\n    //This method register a type to be pooled thereafter, and allow GC not to recycle instances of this type of specified count\r\n    //The implementation may adopt that of Microsoft.Extensions.ObjectPool somehow, but in a lower level fashion, so that \r\n    // programmer doesn\u0027t have to call Return().  \r\n    //here IPooledObjectPolicy\u003cT\u003e is equivalent to  Microsoft.Extensions.ObjectPool.IPooledObjectPolicy\u003cT\u003e\r\n    public static void Poolize\u003cT\u003e(IPooledObjectPolicy\u003cT\u003e poolPolicy);\r\n\r\n    //This method allow retrieve an completely reinitialized instance of specified type T from the framework-level object pool.\r\n    // the deconstructor and constructor should be orderly called upon the returned instance as to reinitialize it.\r\n    public static T Renew\u003cT\u003e();\r\n\r\n    //This method forcibly put an instance to the framework-level object pool, and is usually not neccessary\r\n    public static T Pool\u003cT\u003e(T object);\r\n}\r\n```\r\n\r\n\n\n### API Usage\n\n```csharp\r\n\r\n//Poolize a type\r\nGC.Poolize\u003cMyType\u003e();\r\n\r\n//Renew an object ( i\u0027d strongly recommend C# to introduce a new keyword \"renew\" to facilitate this operation, as detailed in the last part)\r\n// the Renewed object should be default and exactly like the result of new()\r\nMyType obj= GC.Renew\u003cMyType\u003e();          // in next version of C#, it might introduce new keyworkd like MyType obj= renew();\r\n...\r\n\r\n//if necessary, forcibly and explicitly pool the obj before GC process it, as to shorten the lifecycle of the instance, \r\n// as will make the instance to be reinitialized to default..\r\nGC.Pool(obj);\r\n\r\n```\r\n\n\n### Alternative Designs\n\nStrongly recommend C# introducing the \"renew\" keyword to implement the whole process of above 3 method.\r\n\r\n```csharp\r\n\r\n//this syntax may register a type to GC.Pool, renew an instance;\r\nMyType obj= renew Mytype();        \r\n\r\n//this syntax explicitly pool an instance.\r\nrenew(obj);\r\n\r\n//this syntax renew obj with a new instance while pooling the old instance\r\nvar obj=renew(obj);\r\n```\r\n\r\nthe \"renew\" mechanism will be a great change to the memory management of C#, if implemented in the lowest level, where object should be reinitialized with lowest-possible-level  measure, as to achieve best performance.\r\n\r\notherwise, GC.DePoolize\u003cT\u003e() might also be introduced to unregister the type.\n\n### Risks\n\nA dramatical change to the GC mechanism.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003exiaoyuvax\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-24T05:36:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xsX6Y",
                                           "createdAt":  "2024-01-24T06:33:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUN1Kg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-01-26T11:13:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think we would welcome prototypes to prove that it is possible to improve overall runtime performance for real world scenarios by introducing APIs like this implemented at GC level. It is unlikely that implementing the proposed API at GC level can improve overall GC and runtime performance more than a fine-tuned standalone object pool.",
                                           "updatedAt":  "2024-01-24T06:33:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xu_6f",
                                           "createdAt":  "2024-01-24T13:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xiaoyuvax",
                                           "body":  "@jkotas so we need expert on this, to build object/memory reusing to the foundation of dotnet memory management rather than a design pattern. dramatically performance improvements may be not,  less memory usage and allocation is still favorable, especially work with NativeAot, what if GC is no longer needed?? Would it be possible that object reusing replaces GC when compiled to native?? ...\r\n\r\nI just found out and tested lately that call Return() in destructor may allow synchronizing pooling-cycle with the GC managed object lifecycle, as solves the lifecycle management problem to some extent (don\u0027t know yet if reusing a resurrected object from the destructor would be problematic), while still i have to write the destructor code and objectpool declarations for each type one by one, which is repetitively boring.\r\n i wonder why not straightly make this Return() operation \"build-in\" for every type (or at least for explicitly registered types)? \r\n\r\nbut it does not solve the reseting performance problem, neither by the lately introduced IResettable interface(actually one can write the resetting code in the destructor per se). so far resetting an object to its initial state is costly, no matter at the machine side or the human side (fine tuning for multitude types r costly), while otherwise properly overwritting existing properties/fields with new business values r complicated and error prone too.\r\nmy proposal requests a low-level \"renew\" implementation in the runtime, better through unsafe codes, e.g. wiping off the memory buffer of an object directly as well as a fast lookup of objectpools for different types, which might be equivalent of a dictionary.\r\n\r\nHowever, according to my experiment \u0026 benchmark, an implementation of a generic objectpool( ConcurrentDictionary\u003cstring, ObjectPool\u003cobject\u003e\u003e) , which serves all known/unknown types, is a performance disaster, cos it took a lot of time to lookup the pool and to cast the instances to requested types.\r\n\r\n\u003e  GenericObjectPool is much worse than DefaultPoolGetObject and new() in performance, but is quite adorable to reduce Allocation and reduce complexity in planning various ObjectPools.\r\n\u003e  |               Method |    N |      Mean |     Error |    StdDev | Ratio | RatioSD |      Gen0 | Allocated | Alloc Ratio |\r\n\u003e  |--------------------- |----- |----------:|----------:|----------:|------:|--------:|----------:|----------:|------------:|\r\n\u003e  | DefaultPoolGetObject | 1000 |  4.065 ms | 0.0365 ms | 0.0341 ms |  1.00 |    0.01 |  867.1875 |   2.59 MB |        0.57 |\r\n\u003e  | GenericPoolGetObject | 1000 | 61.546 ms | 0.5951 ms | 0.5566 ms | 15.07 |    0.23 |  777.7778 |   2.59 MB |        0.57 |\r\n\u003e  |            NewObject | 1000 |  4.084 ms | 0.0432 ms | 0.0404 ms |  1.00 |    0.00 | 1523.4375 |   4.58 MB |        1.00 |\r\n",
                                           "updatedAt":  "2024-01-24T13:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xw9Rj",
                                           "createdAt":  "2024-01-24T18:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUN1HQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cshung",
                                                                               "createdAt":  "2024-01-24T20:35:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xiaoyuvax",
                                                                               "createdAt":  "2024-01-25T02:56:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-01-25T03:34:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-01-26T11:12:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we need expert on this, to build object/memory reusing to the foundation of dotnet memory management rather than a design pattern\r\n\r\nExperts looked at this problem before and did not see any promising solutions.",
                                           "updatedAt":  "2024-01-24T18:03:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xzQ6M",
                                           "createdAt":  "2024-01-25T02:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xiaoyuvax",
                                           "body":  "lololol, should i close this thread quietly...  :`",
                                           "updatedAt":  "2024-01-25T02:58:53Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: GC level ObjectPooling APIs and more",
        "labels":  [
                       "api-suggestion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97600",
        "createdAt":  "2024-01-27T18:30:21Z",
        "number":  97600,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAWRjw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KirillOsenkov",
                                            "createdAt":  "2024-01-27T22:19:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-01-28T14:11:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TFlippy",
                                            "createdAt":  "2024-06-30T22:00:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "caihongxu",
                                            "createdAt":  "2025-03-21T07:34:12Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-07-16T20:01:32Z",
        "body":  "### Description\r\n\r\nI have an application that repeatedly enters and exits no-gc regions. The memory usage increases until `TryStartNoGCRegion` fails (when reaching the commit limit of the machine).\r\n\r\nI\u0027ve narrowed it down to a minimal repro:\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    while (true)\r\n    {\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        GC.TryStartNoGCRegion(1024 * 1024 * 1024);\r\n        GC.EndNoGCRegion();\r\n\r\n        Console.WriteLine(\"Ready\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nWith this code, the memory usage (private bytes) increases by 3GB after each iteration (I suppose the exact value will depend on the number of heaps) and never goes down.\r\n\r\nIf I remove the call to `GC.Collect` then the memory usage doesn\u0027t increase.\r\n\r\nInterestingly, the behavior changes if I add another `GC.Collect` immediately after leaving the no-gc region:\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    while (true)\r\n    {\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        GC.TryStartNoGCRegion(1024 * 1024 * 1024);\r\n        GC.EndNoGCRegion();\r\n\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        Console.WriteLine(\"Ready\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nNow the memory usage still increases at each iteration, but the memory is gradually decommitted. I will still run out of memory if I run the iterations faster than the memory is decommitted.\r\n\r\nIt only happens when server GC is enabled, and only with regions.\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    while (true)\r\n    {\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        GC.TryStartNoGCRegion(1024 * 1024 * 1024);\r\n        GC.EndNoGCRegion();\r\n\r\n        Console.WriteLine(\"Ready\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe memory usage should be stable. The GC should either decommit immediately or reuse the memory that hasn\u0027t been decommitted. \r\n\r\n### Actual behavior\r\n\r\nThe memory usage increases with each iteration.\r\n\r\n### Regression?\r\n\r\nThe issue only happens with regions. \r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOchEAtQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yCmrl",
                                           "createdAt":  "2024-01-27T18:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have an application that repeatedly enters and exits no-gc regions. The memory usage increases until `TryStartNoGCRegion` fails (when reaching the commit limit of the machine).\r\n\r\nI\u0027ve narrowed it down to a minimal repro:\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    while (true)\r\n    {\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        GC.TryStartNoGCRegion(1024 * 1024 * 1024);\r\n        GC.EndNoGCRegion();\r\n\r\n        Console.WriteLine(\"Ready\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nWith this code, the memory usage (private bytes) increases by 3GB at each iteration (I suppose the exact value will depend on the number of heaps) and never goes down.\r\n\r\nIf I remove the call to `GC.Collect` then the memory usage doesn\u0027t increase.\r\n\r\nInterestingly, the behavior changes if I add another `GC.Collect` immediately after leaving the no-gc region:\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    while (true)\r\n    {\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        GC.TryStartNoGCRegion(1024 * 1024 * 1024);\r\n        GC.EndNoGCRegion();\r\n\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        Console.WriteLine(\"Ready\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nNow the memory usage increases at each iteration, but the memory is gradually decommitted. I will still run out of memory if I run the iterations faster than the memory is decommitted.\r\n\r\nIt only happens when server GC is enabled, and only with regions.\n\n### Reproduction Steps\n\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    while (true)\r\n    {\r\n        GC.Collect(2, GCCollectionMode.Forced, true, true);\r\n\r\n        GC.TryStartNoGCRegion(1024 * 1024 * 1024);\r\n        GC.EndNoGCRegion();\r\n\r\n        Console.WriteLine(\"Ready\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nThe memory usage is stable.\n\n### Actual behavior\n\nThe memory usage increases with each iteration.\n\n### Regression?\n\nThe issue only happens with regions. \n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-27T18:30:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yEQC1",
                                           "createdAt":  "2024-01-28T20:45:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "I am able to reproduce it. This requires server GC. Initial investigation shows that the memory is stuck in the global decommit queue.\r\n\r\n| Event Name                                        | Time MSec | Process Name             | TotalCommittedInGlobalDecommit |   |\r\n|---------------------------------------------------|-----------|--------------------------|--------------------------------|---|\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5265.922  | Process(392524) (392524) | 0                              |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5269.329  | Process(392524) (392524) | 0                              |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5298.5    | Process(392524) (392524) | 0                              |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5310.657  | Process(392524) (392524) | 1,054,527,488                  |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5315.756  | Process(392524) (392524) | 1,054,527,488                  |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5321.172  | Process(392524) (392524) | 3,256,889,344                  |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5329.349  | Process(392524) (392524) | 3,239,968,768                  |   |\r\n| Microsoft-Windows-DotNETRuntime/GC/CommittedUsage | 5346.149  | Process(392524) (392524) | 4,335,996,928                  |   |\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-01-28T20:45:18Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "NoGCRegion decommits memory in an inconsistent way",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99164",
        "createdAt":  "2024-03-01T14:53:07Z",
        "number":  99164,
        "author":  "jfheins",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-KHqg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2024-03-04T17:52:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivanthelad",
                                            "createdAt":  "2024-03-21T12:06:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjaart",
                                            "createdAt":  "2025-01-15T10:28:15Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-03-15T14:30:23Z",
        "body":  "### Background and motivation\r\n\r\nWe currently have a memory leak in production. It\u0027s small, so we have a hard time reproducing it on dev machines. Furthermore we find it challenging to analyze the dump we have from production.\r\nWe already log the heap metrics but for this one, the picture is not very clear:\r\n\u003cimg width=\"661\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/5293502/cccae26a-c0a8-4006-95b7-31206824fac3\"\u003e\r\n\r\n\r\n### API Proposal\r\n\r\nIt would be awesome if the .net garbage collector could expose metrics about the number and/or size of objects over time. This should only report objects that cannot be collected and I would be totally fine if it only reports large object heap and gen2 heap.\r\nDue to perf impact, I think it would be wise to put that metric behind a environment variable flag (ENABLE_GC_DETAIL_METRICS or so) and it can be toggled when needed.\r\nAlternatively, passing parameters to the AddRuntimeInstrumentation() method might also work.\r\n\r\n### API Usage\r\n\r\n```csharp\r\nservices.AddOpenTelemetry()\r\n            .WithMetrics(\r\n                m =\u003e\r\n                {\r\n                    m.AddRuntimeInstrumentation(heapDetails: true);\r\n                    m.AddPrometheusExporter();\r\n                })\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdzJQmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc51oY6n",
                                           "createdAt":  "2024-03-01T16:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nWe currently have a memory leak in production. It\u0027s small, so we have a hard time reproducing it on dev machines. Furthermore we find it challenging to analyze the dump we have from production.\r\nWe already log the heap metrics but for this one, the picture is not very clear:\r\n\u003cimg width=\"661\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/5293502/cccae26a-c0a8-4006-95b7-31206824fac3\"\u003e\r\n\r\n\r\n### API Proposal\r\n\r\nIt would be awesome if the .net garbage collector could expose metrics about the number and/or size of objects over time. This should only report objects that cannot be collected and I would be totally fine if it only reports large object heap and gen2 heap.\r\nDue to perf impact, I think it would be wise to put that metric behind a environment variable flag (ENABLE_GC_DETAIL_METRICS or so) and it can be toggled when needed.\r\nAlternatively, passing parameters to the AddRuntimeInstrumentation() method might also work.\r\n\r\n### API Usage\r\n\r\n```csharp\r\nservices.AddOpenTelemetry()\r\n            .WithMetrics(\r\n                m =\u003e\r\n                {\r\n                    m.AddRuntimeInstrumentation(heapDetails: true);\r\n                    m.AddPrometheusExporter();\r\n                })\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejfheins\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-GC-coreclr`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-01T16:44:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53IH3H",
                                           "createdAt":  "2024-03-14T23:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e if the .net garbage collector could expose metrics about the number and/or size of objects over time\r\n\r\nhow would you use this info?\r\n\r\n\u003e This should only report objects that cannot be collected and I would be totally fine if it only reports large object heap and gen2 heap.\r\n\r\nnote that objects in gen2/LOH are not collectable from GC\u0027s POV unless a gen2 GC actually happens. ",
                                           "updatedAt":  "2024-03-14T23:01:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53MlCb",
                                           "createdAt":  "2024-03-15T14:27:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jfheins",
                                           "body":  "\u003e how would you use this info?\r\n\r\nI want to narrow down what causes the memory leak. So in this instance:\r\n\u003cimg width=\"500\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/5293502/e9285303-23fc-42c4-8619-199a138f1125\"\u003e\r\n(the 2 large drops in loh were caused by redeployments)\r\n\r\nI can see that the leak is causes by large objects. But if I had a different set of metrics and a line being labelled \"System.Runtime.CompilerServices.ConditionalWeakTable\u003cSystem.Object, System.Tuple\u003cMicrosoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry, System.Boolean\u003e\u003e+Entry[]\" it would point me into the right direction without the need to dial into the production pod.\r\n\r\n\u003e note that objects in gen2/LOH are not collectable from GC\u0027s POV unless a gen2 GC actually happens.\r\n\r\nThat sounds acceptable to me. I only want to know about objects that were not collected. So if the metric only emits a new data point after a gen2 collection, I\u0027m good with that 👍 \r\n",
                                           "updatedAt":  "2024-03-15T14:30:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add Garbage collector metrics",
        "labels":  [
                       "api-suggestion",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100521",
        "createdAt":  "2024-04-02T14:04:14Z",
        "number":  100521,
        "author":  "Vandersteen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T20:35:47Z",
        "body":  "Hello all,\r\n\r\nI\u0027m looking for guidance surrounding best practices when running multiple .net core apps on a single node.\r\n\r\nBase setup:\r\n\r\nWe have multiple .net core apps running on AKS, most / all of these different apps have a rather low / bursty (from 0 to a little) traffic. However we are encountering a whole range of timeout related issues.\r\n\r\n* Azure SQL server timeouts\r\n* Azure MYSQL server timeouts\r\n* Azure Blob Storage timeouts\r\n* Azure Service bus timeouts\r\n* Http Client timeouts\r\n* ...\r\n\r\nAll of these are very intermittent and hard to reproduce, no special \"large load\" can be detected in the Azure portal (dtu / cpu / ...) for the Azure resources, we\u0027ve had multiple tickets in the past to let azure support investigate these without any clear reason why these happen.\r\n\r\nWe\u0027ve put retry policies in place to alleviate these timeouts as much as possible, but I\u0027m starting to think that our setup might be the reason this is happening.\r\n\r\nAs most of these apps have very low \"traffic\", we run these instances with low requests / limits\r\n\r\n* Memory 256M requests \u0026 limits\r\n* CPU \r\n    * due to the \"bursty\" nature, no limits have been setup, so they can use all of the cpu\u0027s of the nodes when needed, this is to avoid cpu throttling on aks  / k8s side as these make the timeouts way worse\r\n    * In our monitoring, we can see that most apps never pass the 100m cpu usage on average, the nodes average around 400m cpu usage with some spikes to 1 cpu. Rarely / never are they using the full 2 cpu\u0027s available\r\n\r\nWe are using nodes of 8Gi \u0026 2 cpus, which means generally we have around ~10 containers running on a single node.\r\n\r\nAfter reading this [here](https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/workstation-server-gc#server-gc):\r\n\r\n\u003e If you\u0027re running hundreds of instances of an application, consider using workstation garbage collection with concurrent garbage collection disabled. This will result in less context switching, which can improve performance.\r\n\r\n\u003e Server garbage collection can be resource-intensive. For example, imagine that there are 12 processes that use server GC running on a computer that has four logical CPUs. If all the processes happen to collect garbage at the same time, they would interfere with each other, as there would be 12 threads scheduled on the same logical CPU. If the processes are active, it\u0027s not a good idea to have them all use server GC.\r\n\r\nI\u0027m starting to wonder if the timeouts could be related, could it be that we are hitting a similar issue as above, and that we should run our containers with Workstation GC and disable concurrent garbage collection?\r\nCould the GC of another app affect other apps running on the same node (and cause timeouts / blocking / ...).\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeSxxTA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55K0GD",
                                           "createdAt":  "2024-04-02T19:14:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @Vandersteen, Have you correlated the timeouts to memory utilization? Also by \"single node\" do you mean the same container instance or the same pod? Usually the recommendation would be that each service runs in its own container with some resource constraints. ",
                                           "updatedAt":  "2024-04-02T19:14:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55K5tn",
                                           "createdAt":  "2024-04-02T19:19:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vandersteen",
                                           "body":  "We have many different applications\r\n\r\nEach of these applications are run in a separate pod (1 container per pod)\r\n\r\nThere are multiple instances of each pod spread across multiple nodes\r\n\r\nGenerally there are ~10 different pods (applications) per node (we have constraints to avoid putting the same application\u0027s pods on the same node)",
                                           "updatedAt":  "2024-04-05T14:42:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55LHFM",
                                           "createdAt":  "2024-04-02T19:33:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vandersteen",
                                           "body":  "\u003e Have you correlated the timeouts to memory utilization?\r\n\r\nNot yet no, I\u0027ll try and see if I can find something.\r\n\r\nWe\u0027ve been having these kinds of issues since .net core 2.2 and have baked in \u0027retry policies\u0027 / accepted our faith on a lot of these timeouts in the last years. ",
                                           "updatedAt":  "2024-04-02T19:33:35Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Running multiple .net core containers on a single node",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100567",
        "createdAt":  "2024-04-03T01:41:26Z",
        "number":  100567,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-16T13:53:50Z",
        "body":  "**Failed in:** [runtime-coreclr outerloop 20240402.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=627313\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15400982\u0026resultId=110853\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 osx x64 Checked @ OSX.1200.Amd64.Open\r\n    - GC/Features/SustainedLowLatency/scenario/scenario.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\n /private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.sh: line 322: -r:/private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/IL-CG2/*.dll: No such file or directory\r\nwaitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\r\n/private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.sh: line 448: 37615 Segmentation fault: 11  (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /tmp/helix/working/A770093C/w/B12D0911/uploads/Reports/GC.Features/SustainedLowLatency/scenario/scenario.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nin takeLock\r\n/private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/IL-CG2/scenario.dll\r\n16:53:05\r\nResponse file: /private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.dll.rsp\r\n/private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/IL-CG2/scenario.dll\r\n-o:/private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.dll\r\n-r:/tmp/helix/working/A770093C/p/System.*.dll\r\n-r:/tmp/helix/working/A770093C/p/Microsoft.*.dll\r\n-r:/tmp/helix/working/A770093C/p/xunit.*.dll\r\n-r:/tmp/helix/working/A770093C/p/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--method-layout:random\r\n--targetarch:x64\r\n--targetos:osx\r\nRunning CrossGen2:  dotnet /tmp/helix/working/A770093C/p/crossgen2/crossgen2.dll @/private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.dll.rsp  \r\nEmitting R2R PE file: /private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.dll\r\nRunning R2RDump:  dotnet /tmp/helix/working/A770093C/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.dll --out /private/tmp/helix/working/A770093C/w/B12D0911/e/GC/Features/SustainedLowLatency/scenario/scenario.dll.r2rdump --val\r\n16:53:08\r\nin ReleaseLock\r\nin takeLock\r\n/tmp/helix/working/A770093C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true scenario.dll \u0027\u0027\r\n Cleaning up-------gen0: 1442, gen1: 479; gen2: 159, heap size: 128,840,984 bytes\r\n Cleaning up-------gen0: 2853, gen1: 927; gen2: 287, heap size: 126,768,296 bytes\r\n Cleaning up-------gen0: 4268, gen1: 1378; gen2: 416, heap size: 121,615,664 bytes\r\n Cleaning up-------gen0: 5681, gen1: 1829; gen2: 545, heap size: 124,337,792 bytes\r\n Cleaning up-------gen0: 7103, gen1: 2287; gen2: 683, heap size: 131,262,528 bytes\r\n Cleaning up-------gen0: 8523, gen1: 2744; gen2: 820, heap size: 131,251,152 bytes\r\n Cleaning up-------gen0: 9949, gen1: 3207; gen2: 961, heap size: 122,991,672 bytes\r\n Cleaning up-------gen0: 11375, gen1: 3670; gen2: 1102, heap size: 112,445,712 bytes\r\n Cleaning up-------gen0: 12799, gen1: 4130; gen2: 1241, heap size: 118,389,184 bytes\r\n[createdump] Gathering state for process 37615 \r\n[createdump] Crashing thread 65eaa8 signal 11 (000b)\r\n[createdump] Writing crash report to file /cores/coredump.37615.dmp.crashreport.json\r\n[createdump] Crash report successfully written\r\n[createdump] Writing minidump with heap to file /cores/coredump.37615.dmp\r\n[createdump] Written 538673320 bytes (131512 pages) to core file\r\n[createdump] Target process is alive\r\n[createdump] Dump successfully written in 2455ms\r\nin ReleaseLock\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /cores since 4/2/2024 4:53:05 PM\r\nProcessing /cores/coredump.37615.dmp.crashreport.json\r\nPrinting stacktrace from \u0027/cores/coredump.37615.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nErrors while running llvm-symbolizer --pretty-print\r\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symboli\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n    at GC_Features._SustainedLowLatency_scenario_scenario_._SustainedLowLatency_scenario_scenario_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\r\n\u003chtml xmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\"\u003e\r\n\r\n\u003chead\u003e\r\n\r\n\u003cmeta name=ProgId content=Excel.Sheet\u003e\r\n\u003cmeta name=Generator content=\"Microsoft Excel 15\"\u003e\r\n\u003clink id=Main-File rel=Main-File\r\nhref=\"file:///C:/Users/V-WENY~1/AppData/Local/Temp/msohtmlclip1/01/clip.htm\"\u003e\r\n\u003clink rel=File-List\r\nhref=\"file:///C:/Users/V-WENY~1/AppData/Local/Temp/msohtmlclip1/01/clip_filelist.xml\"\u003e\r\n\u003cstyle\u003e\r\n\u003c!--table\r\n\t{mso-displayed-decimal-separator:\"\\.\";\r\n\tmso-displayed-thousand-separator:\"\\,\";}\r\n@page\r\n\t{margin:.75in .7in .75in .7in;\r\n\tmso-header-margin:.3in;\r\n\tmso-footer-margin:.3in;}\r\ntr\r\n\t{mso-height-source:auto;}\r\ncol\r\n\t{mso-width-source:auto;}\r\nbr\r\n\t{mso-data-placement:same-cell;}\r\ntd\r\n\t{padding-top:1px;\r\n\tpadding-right:1px;\r\n\tpadding-left:1px;\r\n\tmso-ignore:padding;\r\n\tcolor:black;\r\n\tfont-size:11.0pt;\r\n\tfont-weight:400;\r\n\tfont-style:normal;\r\n\ttext-decoration:none;\r\n\tfont-family:\"Aptos Narrow\", sans-serif;\r\n\tmso-font-charset:134;\r\n\tmso-number-format:General;\r\n\ttext-align:general;\r\n\tvertical-align:bottom;\r\n\tborder:none;\r\n\tmso-background-source:auto;\r\n\tmso-pattern:auto;\r\n\tmso-protection:locked visible;\r\n\twhite-space:nowrap;\r\n\tmso-rotate:0;}\r\n--\u003e\r\n\u003c/style\u003e\r\n\u003c/head\u003e\r\n\r\n\u003cbody link=\"#467886\" vlink=\"#96607D\"\u003e\r\n\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-04-02T20:52:33.327Z | runtime-coreclr outerloop | Checked | osx.1200.amd64.open | x64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240402.2\",\"AzurePipelinesTestRunId\":\"15400982\",\"BuildId\":\"627313\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"108\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-02-11T18:37:54.24Z | runtime-coreclr superpmi-collect | Checked | osx.1200.arm64 | arm64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"53048233\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"BuildNumber\":\"20240211.1\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"DefinitionId\":\"977\",\"System.StageName\":\"Build\",\"architecture\":\"arm64\",\"BuildId\":\"2375670\",\"Project\":\"internal\",\"configuration\":\"Checked\",\"operatingSystem\":\"OSX.1200.ARM64\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-02-11T18:27:41.42Z | runtime-coreclr superpmi-collect | Checked | ubuntu.2204.amd64.rt | x64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"BuildNumber\":\"20240211.1\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"configuration\":\"Checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"DefinitionId\":\"977\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64\",\"BuildId\":\"2375670\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"53048215\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"architecture\":\"x64\",\"Project\":\"internal\"} | Schedule\r\n2024-02-11T18:27:23.571Z | runtime-coreclr superpmi-collect | Checked | ubuntu.2004.armarch | arm64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"53048211\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"Project\":\"internal\",\"System.JobName\":\"__default\",\"architecture\":\"arm64\",\"System.PhaseName\":\"run_test_p1__linux_arm64_checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64)Ubuntu.2004.ArmArch@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionId\":\"977\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"System.JobId\":\"34b2f53b-add1-5e74-7a39-5a11483297fc\",\"BuildNumber\":\"20240211.1\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"2375670\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-02-11T18:25:32.517Z | runtime-coreclr superpmi-collect | Checked | ubuntu.2004.armarch | arm | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"Project\":\"internal\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"53048207\",\"BuildId\":\"2375670\",\"DefinitionId\":\"977\",\"configuration\":\"Checked\",\"BuildNumber\":\"20240211.1\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"operatingSystem\":\"(Ubuntu.1804.Arm32)Ubuntu.2004.Armarch@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\"} | Schedule\r\n2024-02-04T18:41:10.867Z | runtime-coreclr superpmi-collect | Checked | osx.1200.arm64 | arm64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"System.JobId\":\"765fd5e9-e47f-5cb0-4cbf-499eaaaee93e\",\"configuration\":\"Checked\",\"DefinitionId\":\"977\",\"System.PhaseName\":\"run_test_p1__osx_arm64_checked\",\"BuildId\":\"2369727\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240204.1\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"architecture\":\"arm64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.ARM64\",\"System.StageName\":\"Build\",\"Project\":\"internal\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"AzurePipelinesTestRunId\":\"53001665\"} | Schedule\r\n2024-02-04T18:26:14.606Z | runtime-coreclr superpmi-collect | Checked | ubuntu.2004.armarch | arm64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"System.StageName\":\"Build\",\"BuildNumber\":\"20240204.1\",\"System.StageAttempt\":\"1\",\"Project\":\"internal\",\"BuildId\":\"2369727\",\"System.JobId\":\"34b2f53b-add1-5e74-7a39-5a11483297fc\",\"architecture\":\"arm64\",\"DefinitionId\":\"977\",\"AzurePipelinesTestRunId\":\"53001609\",\"System.JobName\":\"__default\",\"operatingSystem\":\"(Ubuntu.1804.Arm64)Ubuntu.2004.ArmArch@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"System.PhaseName\":\"run_test_p1__linux_arm64_checked\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"configuration\":\"Checked\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-02-04T18:25:21.481Z | runtime-coreclr superpmi-collect | Checked | ubuntu.2204.amd64.rt | x64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng/\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   superpmi-collect\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240204.1\",\"Project\":\"internal\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageAttempt\":\"1\",\"BuildId\":\"2369727\",\"operatingSystem\":\"Ubuntu.2204.Amd64\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"53001599\",\"DefinitionId\":\"977\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-02-03T07:21:20.949Z | runtime-coreclr pgostress | Checked-syntheticpgo | ubuntu.2004.armarch.open | arm64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm64_checked\",\"DefinitionId\":\"230\",\"System.JobId\":\"34b2f53b-add1-5e74-7a39-5a11483297fc\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm64.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8\",\"DefinitionName\":\"runtime-coreclr   pgostress\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240202.1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-syntheticpgo\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"552059\",\"AzurePipelinesTestRunId\":\"13130954\",\"architecture\":\"arm64\"} | Schedule\r\n2024-02-03T07:20:52.1Z | runtime-coreclr pgostress | Checked-syntheticpgo | ubuntu.2204.amd64.open.rt | x64 | GC/Features/SustainedLowLatency/scenario/scenario.sh | Failed | {\"configuration\":\"Checked-syntheticpgo\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"230\",\"BuildNumber\":\"20240202.1\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"13130932\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   pgostress\",\"BuildId\":\"552059\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\"} | Schedule\r\n\r\n\r\n\r\n\u003c/body\u003e\r\n\r\n\u003c/html\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpiUgsQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59lBDq",
                                           "createdAt":  "2024-05-13T07:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhl6dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2024-05-13T07:56:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomeksowi",
                                                                               "createdAt":  "2024-05-13T11:33:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SzpejnaDawid",
                                           "body":  "At now, I\u0027m working on this issue because we have the same problem on `RISC-V64`. I notice this test will pass if  `\u003cConcurrentGarbageCollection\u003efalse\u003c/ConcurrentGarbageCollection\u003e` is set.\r\n",
                                           "updatedAt":  "2024-05-13T07:34:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc597stN",
                                           "createdAt":  "2024-05-15T15:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmCAIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "clamp03",
                                                                               "createdAt":  "2024-06-18T05:47:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SzpejnaDawid",
                                           "body":  "I also found these tests fail from time to time:\r\n- GC/Features/HeapExpansion/plug/plug.sh        // tested for risc-v64 and x64\r\n- GC/Features/HeapExpansion/bestfit/bestfit.sh  // tested for risc-v64 and x64\r\n\r\nAll of them use Pinned Objects. Hazards among threads seems to be crucial because on slower machines i could recreate this errors. `bestfit` test is the most annoying because failure occurs `1/35` tests on my PC and when I used `gdb` i couldn\u0027t recreate the error.  For `plug.sh` and `scenario.sh` I discovered that both failures are related with `background_mark_phase` (I used `gdb` to examine both tests).\r\n",
                                           "updatedAt":  "2024-05-15T15:04:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BKst2",
                                           "createdAt":  "2024-06-14T01:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20240613.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=706979\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17640996\u0026resultId=115249\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr linux arm Checked @ (Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\r\n    - GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\n waitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\r\n/root/helix/work/workitem/e/GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh: line 455:  3496 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true FinalizeTimeout.dll \u0027\u0027\r\nMain start\r\nFinalizer start\r\nFinalizer end\r\nMain end\r\nFinalizer start\r\n[createdump] Gathering state for process 3496 corerun\r\n[createdump] Crashing thread 0db4 signal 11 (000b)\r\n[createdump] Writing crash report to file /home/helixbot/dotnetbuild/dumps/coredump.3496.dmp.crashreport.json\r\n[createdump] Crash report successfully written\r\n[createdump] Writing minidump with heap to file /home/helixbot/dotnetbuild/dumps/coredump.3496.dmp\r\n[createdump] Written 27295744 bytes (6664 pages) to core file\r\n[createdump] Target process is alive\r\n[createdump] Dump successfully written in 98ms\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 6/13/2024 7:54:52 PM\r\nProcessing /home/helixbot/dotnetbuild/dumps/coredump.3496.dmp.crashreport.json\r\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/coredump.3496.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nStack trace:\r\n----------------------------------\r\nThread Id: 0xda8\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xdab\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xdac\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xdad\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xdae\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xdaf\r\n      Child SP               IP Call Site\r\n 0xf3b47f30 0xf7ab69aa 0xf7ab69aa\r\n 0xf3b48278 0xf105cbb8 FinalizeTimeout+BlockingFinalizerOnShutdown.Finalize()\r\n 0xf3b482e0 0xf76613f6 0xf76613f6\r\n 0xf3b482f0 0xf74d25ea libcoreclr.so!CallDescrWorker(CallDescrData*) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:0:5\r\n 0xf3b48718 0xf74d24ba libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4236:13\r\n (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:69:5\r\n 0xf3b48740 0xf74d27f2 libcoreclr.so!DispatchCallSimple(unsigned int*, unsigned int, unsigned int, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:0:9\r\n 0xf3b487a0 0xf74574e8 libcoreclr.so!MethodTable::CallFinalizer(Object*) at /__w/1/s/src/coreclr/vm/methodtable.cpp:0:5\r\n 0xf3b487d8 0xf75183f0 libcoreclr.so!FinalizerThread::GetFinalizerThread() at /__w/1/s/src/coreclr/vm/finalizerthread.h:41:9\r\n (inlined by) FinalizerThread::FinalizeAllObjects() at /__w/1/s/src/coreclr/vm/finalizerthread.cpp:108:9\r\n 0xf3b48808 0xf7518c10 libcoreclr.so!InterlockedAnd at /__w/1/s/src/coreclr/pal/inc/pal.h:3643:1\r\n (inlined by) FinalizerThread::SignalFinalizationDone(int) at /__w/1/s/src/coreclr/vm/finalizerthread.cpp:488:9\r\n (inlined by) FinalizerThread::FinalizerThreadWorker(void*) at /__w/1/s/src/coreclr/vm/finalizerthread.cpp:354:9\r\n 0xf3b48a70 0xf749f976 libcoreclr.so!ManagedThreadBase_DispatchMiddle(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n (inlined by) ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_0::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at /__w/1/s/src/coreclr/vm/threads.cpp:7325:13\r\n (inlined by) ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_0\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at GC_Scenarios._FinalizeTimeout_FinalizeTimeout_FinalizeTimeout_._FinalizeTimeout_FinalizeTimeout_FinalizeTimeout_sh()\r\n\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-06-13T19:30:12.492Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"DefinitionId\":\"108\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"17640996\",\"configuration\":\"Checked\",\"BuildId\":\"706979\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240613.3\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"System.StageName\":\"Build\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\"} | Schedule\r\n2024-05-09T02:18:47.007Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\",\"configuration\":\"Checked-no_tiered_compilation\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"BuildId\":\"670046\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildNumber\":\"20240508.3\",\"DefinitionId\":\"108\",\"AzurePipelinesTestRunId\":\"16612930\"} | Schedule\r\n2024-05-09T02:18:45.812Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"108\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"BuildId\":\"670046\",\"Reason\":\"Schedule\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"Project\":\"public\",\"BuildNumber\":\"20240508.3\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"AzurePipelinesTestRunId\":\"16612920\",\"configuration\":\"Checked\",\"architecture\":\"arm\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-08T23:33:04.014Z | runtime-nativeaot-outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"build_linux_arm_Checked_NativeAOT_Pri0\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"531ca2ce-eccb-527e-1ec0-55002e52e870\",\"DefinitionId\":\"265\",\"BuildNumber\":\"20240508.2\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16610852\",\"BuildId\":\"669858\",\"Project\":\"public\",\"DefinitionName\":\"runtime-nativeaot-outerloop\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm\"} | Schedule\r\n2024-05-08T20:55:20.943Z | runtime | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionName\":\"runtime\",\"DefinitionId\":\"129\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"669797\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"16607856\",\"BuildNumber\":\"20240508.40\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-08T20:55:19.474Z | runtime | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"configuration\":\"Checked\",\"DefinitionId\":\"129\",\"BuildNumber\":\"20240508.40\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"BuildId\":\"669797\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16607854\",\"architecture\":\"arm\"} | Schedule\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-05-08T19:20:43.463Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16606342\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"BuildId\":\"669628\",\"architecture\":\"arm\",\"configuration\":\"Checked-no_tiered_compilation\",\"Project\":\"public\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240508.2\",\"DefinitionId\":\"108\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-08T19:20:41.712Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240508.2\",\"DefinitionId\":\"108\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"AzurePipelinesTestRunId\":\"16606340\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"669628\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\"} | Schedule\r\n2024-05-08T11:35:56.729Z | runtime-nativeaot-outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"configuration\":\"Checked\",\"System.JobId\":\"531ca2ce-eccb-527e-1ec0-55002e52e870\",\"BuildId\":\"669222\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240508.1\",\"architecture\":\"arm\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16596980\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"build_linux_arm_Checked_NativeAOT_Pri0\",\"DefinitionId\":\"265\",\"DefinitionName\":\"runtime-nativeaot-outerloop\"} | Schedule\r\n2024-05-08T10:18:34.795Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16596180\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildNumber\":\"20240508.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildId\":\"669221\",\"configuration\":\"Checked-no_tiered_compilation\",\"Reason\":\"Schedule\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.StageAttempt\":\"1\",\"architecture\":\"arm\",\"DefinitionId\":\"108\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-08T10:18:33.232Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16596178\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"BuildId\":\"669221\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"DefinitionId\":\"108\",\"BuildNumber\":\"20240508.1\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\"} | Schedule\r\n2024-05-08T09:16:15.601Z | runtime-coreclr pgo | Checked-defaultpgo | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"BuildNumber\":\"20240508.1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"669200\",\"Project\":\"public\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.JobName\":\"__default\",\"DefinitionId\":\"144\",\"AzurePipelinesTestRunId\":\"16595346\",\"DefinitionName\":\"runtime-coreclr   pgo\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm\",\"configuration\":\"Checked-defaultpgo\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-08T08:55:12.152Z | runtime | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"16594958\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-no_tiered_compilation\",\"BuildNumber\":\"20240508.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"129\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"architecture\":\"arm\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"DefinitionName\":\"runtime\",\"BuildId\":\"669202\",\"System.JobAttempt\":\"1\",\"Project\":\"public\"} | Schedule\r\n2024-05-08T08:55:10.576Z | runtime | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"129\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240508.1\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"AzurePipelinesTestRunId\":\"16594956\",\"DefinitionName\":\"runtime\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"BuildId\":\"669202\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"architecture\":\"arm\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-08T07:27:00.809Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16592990\",\"configuration\":\"Release-no_tiered_compilation\",\"BuildNumber\":\"20240507.1\",\"BuildId\":\"669106\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"135\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_linux_arm_release\",\"System.JobId\":\"72dfe29e-04cf-5892-e89c-87a9854dd748\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-08T07:27:00.809Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16592990\",\"configuration\":\"Release-no_tiered_compilation\",\"BuildNumber\":\"20240507.1\",\"BuildId\":\"669106\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"135\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_linux_arm_release\",\"System.JobId\":\"72dfe29e-04cf-5892-e89c-87a9854dd748\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-08T07:26:57.972Z | coreclr-release-outerloop-nightly | Release | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"669106\",\"AzurePipelinesTestRunId\":\"16592988\",\"System.PhaseName\":\"run_test_p1_R2R_linux_arm_release\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionId\":\"135\",\"architecture\":\"arm\",\"BuildNumber\":\"20240507.1\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"72dfe29e-04cf-5892-e89c-87a9854dd748\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Release\"} | Schedule\r\n2024-05-08T07:23:41.546Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.PhaseName\":\"run_test_p1__linux_arm_release\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"135\",\"System.JobName\":\"__default\",\"BuildId\":\"669106\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240507.1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16592840\",\"architecture\":\"arm\",\"configuration\":\"Release-no_tiered_compilation\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"ae69a820-8040-5321-6217-15d430a2ab03\"} | Schedule\r\n2024-05-08T07:23:40.155Z | coreclr-release-outerloop-nightly | Release | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"135\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16592838\",\"Reason\":\"Schedule\",\"configuration\":\"Release\",\"System.JobId\":\"ae69a820-8040-5321-6217-15d430a2ab03\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_release\",\"BuildNumber\":\"20240507.1\",\"Project\":\"public\",\"BuildId\":\"669106\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\"} | Schedule\r\n2024-05-06T05:24:02.857Z | runtime-coreclr jitstress | Checked-jitstress1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-jitstress1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"109\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"666407\",\"AzurePipelinesTestRunId\":\"16528844\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240505.1\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-05-06T05:24:01.384Z | runtime-coreclr jitstress | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_tiered\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16528852\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"109\",\"BuildId\":\"666407\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"architecture\":\"x64\",\"Project\":\"public\"} | Schedule\r\n2024-05-06T05:24:00.009Z | runtime-coreclr jitstress | Checked-jitstress2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Project\":\"public\",\"BuildNumber\":\"20240505.1\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"666407\",\"AzurePipelinesTestRunId\":\"16528842\",\"configuration\":\"Checked-jitstress2\",\"DefinitionId\":\"109\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-05-06T05:23:57.087Z | runtime-coreclr jitstress | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"BuildId\":\"666407\",\"AzurePipelinesTestRunId\":\"16528846\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"109\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress1_tiered\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-06T03:47:23.446Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | osx.1200.arm64.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_tiered\",\"System.PhaseName\":\"run_test_p1_R2R_osx_arm64_checked\",\"DefinitionId\":\"114\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"BuildId\":\"666362\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.JobId\":\"99f15f99-448d-5593-a271-dbdf553789a6\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16528362\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"BuildNumber\":\"20240505.1\",\"architecture\":\"arm64\"} | Schedule\r\n2024-05-06T03:31:02.455Z | runtime-coreclr r2r-extra | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16527936\",\"BuildNumber\":\"20240505.1\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"DefinitionId\":\"114\",\"System.PhaseName\":\"run_test_p1_R2R_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"45a39349-90d5-51c8-4429-a48b2907fbdd\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"configuration\":\"Checked-jitstress1_tiered\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"666362\"} | Schedule\r\n2024-05-06T03:30:58.033Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"45a39349-90d5-51c8-4429-a48b2907fbdd\",\"AzurePipelinesTestRunId\":\"16527918\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p1_R2R_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"BuildId\":\"666362\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240505.1\",\"Project\":\"public\",\"DefinitionId\":\"114\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-jitstress2_tiered\"} | Schedule\r\n2024-05-05T19:40:59.246Z | runtime-coreclr jitstress-random | Checked-jitstress_random_1 | osx.1200.amd64.open | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240505.1\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Reason\":\"Schedule\",\"BuildId\":\"666195\",\"System.JobName\":\"__default\",\"DefinitionId\":\"159\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress-random\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress_random_1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"AzurePipelinesTestRunId\":\"16524440\"} | Schedule\r\n2024-05-05T18:24:04.531Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x80 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"BuildId\":\"666175\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240505.1\",\"configuration\":\"Checked-jitstress2_jitstressregs0x80\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16523722\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"111\"} | Schedule\r\n2024-05-05T18:24:03.184Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x2000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"DefinitionId\":\"111\",\"configuration\":\"Checked-jitstress2_jitstressregs0x2000\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildId\":\"666175\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240505.1\",\"AzurePipelinesTestRunId\":\"16523730\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-05T18:24:01.282Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs8 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"BuildNumber\":\"20240505.1\",\"BuildId\":\"666175\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"111\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16523724\",\"configuration\":\"Checked-jitstress2_jitstressregs8\"} | Schedule\r\n2024-05-05T18:23:59.746Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16523728\",\"configuration\":\"Checked-jitstress2_jitstressregs2\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"666175\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"DefinitionId\":\"111\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\"} | Schedule\r\n2024-05-05T18:23:57.921Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"DefinitionId\":\"111\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"666175\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16523726\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress2_jitstressregs3\",\"BuildNumber\":\"20240505.1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-05T18:23:56.453Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"configuration\":\"Checked-jitstress2_jitstressregs1\",\"System.StageAttempt\":\"1\",\"BuildId\":\"666175\",\"DefinitionId\":\"111\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16523714\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-05T18:23:54.983Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x1000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16523720\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"666175\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_jitstressregs0x1000\",\"architecture\":\"x64\",\"BuildNumber\":\"20240505.1\",\"DefinitionId\":\"111\"} | Schedule\r\n2024-05-05T18:23:53.463Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x10 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"BuildId\":\"666175\",\"configuration\":\"Checked-jitstress2_jitstressregs0x10\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16523718\",\"BuildNumber\":\"20240505.1\",\"architecture\":\"x64\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-05T18:23:52.046Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_jitstressregs4\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"BuildId\":\"666175\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16523716\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"DefinitionId\":\"111\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"architecture\":\"x64\"} | Schedule\r\n2024-05-05T05:23:23.043Z | runtime-coreclr jitstress | Checked-jitstress2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665914\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"109\",\"configuration\":\"Checked-jitstress2\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16515340\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\"} | Schedule\r\n2024-05-05T05:23:21.689Z | runtime-coreclr jitstress | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress1_tiered\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"DefinitionId\":\"109\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16515342\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"665914\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-05-05T05:23:18.752Z | runtime-coreclr jitstress | Checked-jitstress1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"AzurePipelinesTestRunId\":\"16515336\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"109\",\"BuildId\":\"665914\",\"configuration\":\"Checked-jitstress1\"} | Schedule\r\n2024-05-05T05:23:17.345Z | runtime-coreclr jitstress | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"DefinitionId\":\"109\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16515338\",\"System.StageAttempt\":\"1\",\"BuildId\":\"665914\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"configuration\":\"Checked-jitstress2_tiered\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-05-05T03:50:23.556Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | osx.1200.arm64.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665904\",\"architecture\":\"arm64\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16514966\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"System.StageName\":\"Build\",\"DefinitionId\":\"114\",\"BuildNumber\":\"20240504.1\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.PhaseName\":\"run_test_p1_R2R_osx_arm64_checked\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress2_tiered\",\"System.JobId\":\"99f15f99-448d-5593-a271-dbdf553789a6\"} | Schedule\r\n2024-05-05T03:50:18.934Z | runtime-coreclr r2r-extra | Checked-jitstress1_tiered | osx.1200.arm64.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"114\",\"BuildId\":\"665904\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm64\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16514972\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.PhaseName\":\"run_test_p1_R2R_osx_arm64_checked\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress1_tiered\",\"Reason\":\"Schedule\",\"System.JobId\":\"99f15f99-448d-5593-a271-dbdf553789a6\"} | Schedule\r\n2024-05-05T03:29:14.895Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16514730\",\"System.JobName\":\"__default\",\"BuildId\":\"665904\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"Project\":\"public\",\"System.JobId\":\"45a39349-90d5-51c8-4429-a48b2907fbdd\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"114\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_tiered\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_x64_checked\"} | Schedule\r\n2024-05-04T21:29:31.966Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nossse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nossse3\",\"BuildId\":\"665757\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16513136\",\"architecture\":\"x64\"} | Schedule\r\n2024-05-04T21:28:50.478Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse42 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Project\":\"public\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse42\",\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"System.JobName\":\"__default\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16513126\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-04T21:28:31.425Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse41 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16513124\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"BuildId\":\"665757\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse41\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:27:31.21Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse3_4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"665757\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse3_4\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16513120\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:01:37.259Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nopclmulqdq | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"DefinitionId\":\"115\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16512600\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"BuildId\":\"665757\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress_isas_1_x86_nopclmulqdq\"} | Schedule\r\n2024-05-04T21:01:32.755Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noaes | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress_isas_1_x86_noaes\",\"AzurePipelinesTestRunId\":\"16512576\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"BuildId\":\"665757\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-04T21:01:28.211Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nobmi2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16512594\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nobmi2\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:01:26.552Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nolzcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-jitstress_isas_1_x86_nolzcnt\",\"BuildId\":\"665757\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16512598\",\"DefinitionId\":\"115\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-04T21:01:25.051Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noavx2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"BuildId\":\"665757\",\"AzurePipelinesTestRunId\":\"16512602\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-jitstress_isas_1_x86_noavx2\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:01:23.457Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nobmi2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512588\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"665757\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"architecture\":\"x64\",\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nobmi2\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"115\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\"} | Schedule\r\n2024-05-04T21:01:21.878Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nohwintrinsic | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionId\":\"115\",\"AzurePipelinesTestRunId\":\"16512572\",\"configuration\":\"Checked-jitstress_isas_1_x86_nohwintrinsic\",\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"architecture\":\"x64\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T21:01:19.011Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noavx512 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512564\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_2_x86_noavx512\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:01:17.808Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nofma | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"665757\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16512570\",\"BuildNumber\":\"20240504.1\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress_isas_2_x86_nofma\",\"architecture\":\"x64\",\"DefinitionId\":\"115\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-04T21:01:15.179Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse3\",\"BuildId\":\"665757\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16512586\",\"DefinitionId\":\"115\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-04T21:01:12.355Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse3_4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse3_4\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16512556\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"115\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T21:01:10.703Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse41 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16512574\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse41\",\"DefinitionId\":\"115\",\"architecture\":\"x64\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"Reason\":\"Schedule\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:01:08.08Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noavx | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16512544\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"configuration\":\"Checked-jitstress_isas_1_x86_noavx\",\"BuildId\":\"665757\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:01:02.971Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noavx | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665757\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress_isas_2_x86_noavx\",\"AzurePipelinesTestRunId\":\"16512566\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"115\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-04T21:01:01.511Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noavx2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress_isas_2_x86_noavx2\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665757\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16512552\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:01:00.266Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240504.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16512560\",\"DefinitionId\":\"115\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-04T21:00:58.734Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nossse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress_isas_1_x86_nossse3\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionId\":\"115\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16512592\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"665757\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:00:57.267Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse2\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16512512\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"BuildId\":\"665757\"} | Schedule\r\n2024-05-04T21:00:51.399Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nobmi1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240504.1\",\"BuildId\":\"665757\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512542\",\"DefinitionId\":\"115\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress_isas_1_x86_nobmi1\"} | Schedule\r\n2024-05-04T21:00:49.89Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nobmi1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"configuration\":\"Checked-jitstress_isas_2_x86_nobmi1\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512516\",\"BuildId\":\"665757\",\"BuildNumber\":\"20240504.1\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:00:48.53Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"115\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16512504\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse3\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"665757\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:00:46.952Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nolzcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"DefinitionId\":\"115\",\"AzurePipelinesTestRunId\":\"16512526\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nolzcnt\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"665757\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:00:45.373Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nohwintrinsic | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"AzurePipelinesTestRunId\":\"16512550\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665757\",\"Project\":\"public\",\"DefinitionId\":\"115\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"configuration\":\"Checked-jitstress_isas_2_x86_nohwintrinsic\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-04T21:00:42.467Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildNumber\":\"20240504.1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16512530\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-04T21:00:40.919Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nopopcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nopopcnt\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16512522\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"DefinitionId\":\"115\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-04T21:00:32.215Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noavx512 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16512524\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"configuration\":\"Checked-jitstress_isas_1_x86_noavx512\"} | Schedule\r\n2024-05-04T21:00:30.733Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse42 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse42\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16512502\",\"BuildId\":\"665757\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:00:29.379Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse2\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"16512506\"} | Schedule\r\n2024-05-04T21:00:26.176Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nopopcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16512508\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"configuration\":\"Checked-jitstress_isas_2_x86_nopopcnt\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\",\"BuildId\":\"665757\"} | Schedule\r\n2024-05-04T21:00:22.863Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noaes | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_2_x86_noaes\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"115\",\"BuildNumber\":\"20240504.1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16512500\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-04T21:00:18.816Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nopclmulqdq | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionId\":\"115\",\"BuildId\":\"665757\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16512498\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress_isas_2_x86_nopclmulqdq\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T21:00:17.263Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nofma | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked-jitstress_isas_1_x86_nofma\",\"Reason\":\"Schedule\",\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16512514\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-04T18:24:51.244Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x80 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665686\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16511542\",\"DefinitionId\":\"111\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"configuration\":\"Checked-jitstress2_jitstressregs0x80\"} | Schedule\r\n2024-05-04T18:24:49.807Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs8 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_jitstressregs8\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665686\",\"AzurePipelinesTestRunId\":\"16511550\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T18:24:48.244Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x1000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress2_jitstressregs0x1000\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16511540\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"BuildId\":\"665686\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"DefinitionId\":\"111\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T18:24:46.915Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x10 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16511554\",\"DefinitionId\":\"111\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2_jitstressregs0x10\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"BuildNumber\":\"20240504.1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"665686\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-04T18:24:45.479Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16511544\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"BuildId\":\"665686\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress2_jitstressregs2\",\"architecture\":\"x64\"} | Schedule\r\n2024-05-04T18:24:43.947Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16511552\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"111\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-jitstress2_jitstressregs4\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"BuildId\":\"665686\"} | Schedule\r\n2024-05-04T18:24:42.243Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_jitstressregs1\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16511538\",\"BuildId\":\"665686\",\"BuildNumber\":\"20240504.1\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"DefinitionId\":\"111\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\"} | Schedule\r\n2024-05-04T18:24:40.774Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_jitstressregs3\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665686\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16511548\",\"architecture\":\"x64\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\"} | Schedule\r\n2024-05-04T18:24:39.166Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x2000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16511546\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240504.1\",\"BuildId\":\"665686\",\"DefinitionId\":\"111\",\"configuration\":\"Checked-jitstress2_jitstressregs0x2000\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\"} | Schedule\r\n2024-05-04T05:26:23.627Z | runtime-coreclr jitstress | Checked-jitstress2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"DefinitionId\":\"109\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"BuildNumber\":\"20240503.1\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"665438\",\"configuration\":\"Checked-jitstress2\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16503820\"} | Schedule\r\n2024-05-04T05:26:21.923Z | runtime-coreclr jitstress | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16503818\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"665438\",\"DefinitionId\":\"109\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked-jitstress1_tiered\",\"BuildNumber\":\"20240503.1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-04T05:26:18.658Z | runtime-coreclr jitstress | Checked-jitstress1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16503822\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"DefinitionId\":\"109\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"665438\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"BuildNumber\":\"20240503.1\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress1\"} | Schedule\r\n2024-05-04T05:26:13.779Z | runtime-coreclr jitstress | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"109\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"665438\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16503824\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress2_tiered\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240503.1\"} | Schedule\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2024-06-14T01:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BoYXN",
                                           "createdAt":  "2024-06-18T02:39:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20240617.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=710652\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17758634\u0026resultId=115207\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr linux arm Checked @ (Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\r\n    - GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\n waitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\r\n/root/helix/work/workitem/e/GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh: line 455:  3025 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/uploads/Reports/GC.Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true FinalizeTimeout.dll \u0027\u0027\r\nMain start\r\nFinalizer start\r\nFinalizer end\r\nMain end\r\n[createdump] Gathering state for process 3025 corerun\r\n[createdump] Crashing thread 0bda signal 11 (000b)\r\n[createdump] Writing crash report to file /home/helixbot/dotnetbuild/dumps/coredump.3025.dmp.crashreport.json\r\n[createdump] Crash report successfully written\r\n[createdump] Writing minidump with heap to file /home/helixbot/dotnetbuild/dumps/coredump.3025.dmp\r\n[createdump] Written 27066368 bytes (6608 pages) to core file\r\n[createdump] Target process is alive\r\n[createdump] Dump successfully written in 85ms\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 6/17/2024 7:34:20 PM\r\nProcessing /home/helixbot/dotnetbuild/dumps/coredump.3025.dmp.crashreport.json\r\nPrinting stacktrace from \u0027/home/helixbot/dotnetbuild/dumps/coredump.3025.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nStack trace:\r\n----------------------------------\r\nThread Id: 0xbd1\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xbd2\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xbd3\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xbd4\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xbd5\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xbd6\r\n      Child SP               IP Call Site\r\n 0xf3b631b0 0xf7ad09aa 0xf7ad09aa\r\n 0xf3b634f8 0xf14ee20e System.Diagnostics.Tracing.EventListener.DisposeOnShutdown()\r\n 0xf3b63530 0xf1258968 System.AppContext.OnProcessExit()\r\n----------------------------------\r\nThread Id: 0xbd8\r\n      Child SP               IP Call Site\r\n----------------------------------\r\nThread Id: 0xbd9\r\n      Child SP               IP Call Site\r\n 0xeddb11f8 0xf7ad09aa 0xf7ad09aa\r\n 0xeddb1520 0xf103a7c4 FinalizeTimeout.ThreadMain()\r\n 0xeddb1528 0xf13715b8 System.Threading.Thread.StartCallback()\r\n 0xeddb1540 0xf767b76e 0xf767b76e\r\n 0xeddb1550 0xf74eccea libcoreclr.so!CallDescrWorker(CallDescrData*) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:0:5\r\n 0xeddb1978 0xf74ecbba libcoreclr.so!NativeExceptionHolderBase::~NativeExceptionHolderBase() at /__w/1/s/src/coreclr/pal/inc/pal.h:4220:13\r\n (inlined by) CallDescrWorkerWithHandler(CallDescrData*, int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:65:5\r\n 0xeddb19a0 0xf74ecef2 libcoreclr.so!DispatchCallSimple(unsigned int*, unsigned int, unsigned int, unsigned int) at /__w/1/s/src/coreclr/vm/callhelpers.cpp:0:9\r\n 0xeddb1a00 0xf750373a libcoreclr.so!ThreadNative::KickOffThread_Worker(void*) at /__w/1/s/src/coreclr/vm/comsynchronizable.cpp:0:5\r\n 0xeddb1a28 0xf74ba2e6 libcoreclr.so!ManagedThreadBase_DispatchMiddle(ManagedThreadCallState*) at /__w/1/s/src/coreclr/vm/threads.cpp:0:5\r\n (inlined by) ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_0::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::\u0027lambda\u0027(Param*)::operator()(Param*) const at /__w/1/s/src/coreclr/vm/threads.cpp:7325:13\r\n (inlined by) ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_0::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const at /__w/1/s/src/coreclr/vm/threads.cpp:7327:9\r\n (inlined by) ManagedTh\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at GC_Scenarios._FinalizeTimeout_FinalizeTimeout_FinalizeTimeout_._FinalizeTimeout_FinalizeTimeout_FinalizeTimeout_sh()\r\n\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-06-17T19:24:22.281Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   outerloop\",\"BuildId\":\"710652\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"AzurePipelinesTestRunId\":\"17758634\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"108\",\"BuildNumber\":\"20240617.3\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\"} | Schedule\r\n2024-06-16T10:22:59.312Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"AzurePipelinesTestRunId\":\"17711704\",\"Reason\":\"Schedule\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"configuration\":\"Checked\",\"System.JobName\":\"__default\",\"architecture\":\"arm\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"BuildId\":\"709294\",\"BuildNumber\":\"20240616.1\"} | Schedule\r\n2024-06-16T02:20:10.391Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"17708296\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"BuildId\":\"709209\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"108\",\"BuildNumber\":\"20240615.3\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"configuration\":\"Checked\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"architecture\":\"arm\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"DefinitionName\":\"runtime-coreclr   outerloop\"} | Schedule\r\n2024-06-15T19:27:07.465Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"709096\",\"operatingSystem\":\"(Alpine.317.Arm64.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm64v8\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_linux_musl_arm64_checked\",\"System.JobId\":\"8e219403-74a1-530a-f547-c14188aff86d\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"architecture\":\"arm64\",\"DefinitionId\":\"108\",\"BuildNumber\":\"20240615.2\",\"AzurePipelinesTestRunId\":\"17704484\",\"configuration\":\"Checked\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-06-15T19:24:24.204Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.JobName\":\"__default\",\"architecture\":\"arm\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240615.2\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"AzurePipelinesTestRunId\":\"17704432\",\"BuildId\":\"709096\",\"DefinitionId\":\"108\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\"} | Schedule\r\n\r\n\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-06-14T10:24:13.999Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   outerloop\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"DefinitionId\":\"108\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240614.1\",\"System.JobName\":\"__default\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"architecture\":\"arm\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"17662376\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"BuildId\":\"707705\",\"configuration\":\"Checked\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-06-14T02:27:48.012Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_musl_arm64_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240613.5\",\"DefinitionId\":\"108\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"BuildId\":\"707420\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"7c87b8fc-cd86-5445-5ca8-4814cf8d81d6\",\"architecture\":\"arm64\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.317.Arm64.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm64v8\",\"AzurePipelinesTestRunId\":\"17654062\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-06-13T19:30:12.492Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"67940218-a6cd-574d-6681-11ea1e4ee273\",\"DefinitionId\":\"108\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"17640996\",\"configuration\":\"Checked\",\"BuildId\":\"706979\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240613.3\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"System.StageName\":\"Build\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1__linux_musl_arm_checked\"} | Schedule\r\n2024-05-09T02:18:47.007Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\",\"configuration\":\"Checked-no_tiered_compilation\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"BuildId\":\"670046\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildNumber\":\"20240508.3\",\"DefinitionId\":\"108\",\"AzurePipelinesTestRunId\":\"16612930\"} | Schedule\r\n2024-05-09T02:18:45.812Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"108\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"BuildId\":\"670046\",\"Reason\":\"Schedule\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"Project\":\"public\",\"BuildNumber\":\"20240508.3\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"AzurePipelinesTestRunId\":\"16612920\",\"configuration\":\"Checked\",\"architecture\":\"arm\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-08T23:33:04.014Z | runtime-nativeaot-outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"build_linux_arm_Checked_NativeAOT_Pri0\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"531ca2ce-eccb-527e-1ec0-55002e52e870\",\"DefinitionId\":\"265\",\"BuildNumber\":\"20240508.2\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16610852\",\"BuildId\":\"669858\",\"Project\":\"public\",\"DefinitionName\":\"runtime-nativeaot-outerloop\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm\"} | Schedule\r\n2024-05-08T20:55:20.943Z | runtime | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionName\":\"runtime\",\"DefinitionId\":\"129\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"669797\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"16607856\",\"BuildNumber\":\"20240508.40\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-08T20:55:19.474Z | runtime | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"configuration\":\"Checked\",\"DefinitionId\":\"129\",\"BuildNumber\":\"20240508.40\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"BuildId\":\"669797\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16607854\",\"architecture\":\"arm\"} | Schedule\r\n2024-05-08T19:20:43.463Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16606342\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"BuildId\":\"669628\",\"architecture\":\"arm\",\"configuration\":\"Checked-no_tiered_compilation\",\"Project\":\"public\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240508.2\",\"DefinitionId\":\"108\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-08T19:20:41.712Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240508.2\",\"DefinitionId\":\"108\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"AzurePipelinesTestRunId\":\"16606340\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"669628\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\"} | Schedule\r\n2024-05-08T11:35:56.729Z | runtime-nativeaot-outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"configuration\":\"Checked\",\"System.JobId\":\"531ca2ce-eccb-527e-1ec0-55002e52e870\",\"BuildId\":\"669222\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240508.1\",\"architecture\":\"arm\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16596980\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"build_linux_arm_Checked_NativeAOT_Pri0\",\"DefinitionId\":\"265\",\"DefinitionName\":\"runtime-nativeaot-outerloop\"} | Schedule\r\n2024-05-08T10:18:34.795Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16596180\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"BuildNumber\":\"20240508.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildId\":\"669221\",\"configuration\":\"Checked-no_tiered_compilation\",\"Reason\":\"Schedule\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.StageAttempt\":\"1\",\"architecture\":\"arm\",\"DefinitionId\":\"108\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-08T10:18:33.232Z | runtime-coreclr outerloop | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16596178\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"BuildId\":\"669221\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"DefinitionId\":\"108\",\"BuildNumber\":\"20240508.1\",\"configuration\":\"Checked\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\"} | Schedule\r\n2024-05-08T09:16:15.601Z | runtime-coreclr pgo | Checked-defaultpgo | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"860c965f-b28e-50d5-65d2-e40bd59f3a69\",\"BuildNumber\":\"20240508.1\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_checked\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"669200\",\"Project\":\"public\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.JobName\":\"__default\",\"DefinitionId\":\"144\",\"AzurePipelinesTestRunId\":\"16595346\",\"DefinitionName\":\"runtime-coreclr   pgo\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm\",\"configuration\":\"Checked-defaultpgo\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-08T08:55:12.152Z | runtime | Checked-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"16594958\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-no_tiered_compilation\",\"BuildNumber\":\"20240508.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"129\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"architecture\":\"arm\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"DefinitionName\":\"runtime\",\"BuildId\":\"669202\",\"System.JobAttempt\":\"1\",\"Project\":\"public\"} | Schedule\r\n2024-05-08T08:55:10.576Z | runtime | Checked | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"DefinitionId\":\"129\",\"configuration\":\"Checked\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240508.1\",\"System.JobId\":\"5875517b-40f2-5b27-5b45-8b8aba144595\",\"AzurePipelinesTestRunId\":\"16594956\",\"DefinitionName\":\"runtime\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"BuildId\":\"669202\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.PhaseName\":\"run_test_p0_coreclr__linux_arm_checked\",\"architecture\":\"arm\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-08T07:27:00.809Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16592990\",\"configuration\":\"Release-no_tiered_compilation\",\"BuildNumber\":\"20240507.1\",\"BuildId\":\"669106\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"135\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_linux_arm_release\",\"System.JobId\":\"72dfe29e-04cf-5892-e89c-87a9854dd748\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-08T07:27:00.809Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"architecture\":\"arm\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16592990\",\"configuration\":\"Release-no_tiered_compilation\",\"BuildNumber\":\"20240507.1\",\"BuildId\":\"669106\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"135\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_linux_arm_release\",\"System.JobId\":\"72dfe29e-04cf-5892-e89c-87a9854dd748\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-08T07:26:57.972Z | coreclr-release-outerloop-nightly | Release | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"669106\",\"AzurePipelinesTestRunId\":\"16592988\",\"System.PhaseName\":\"run_test_p1_R2R_linux_arm_release\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionId\":\"135\",\"architecture\":\"arm\",\"BuildNumber\":\"20240507.1\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"72dfe29e-04cf-5892-e89c-87a9854dd748\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"configuration\":\"Release\"} | Schedule\r\n2024-05-08T07:23:41.546Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\",\"System.PhaseName\":\"run_test_p1__linux_arm_release\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"135\",\"System.JobName\":\"__default\",\"BuildId\":\"669106\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240507.1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16592840\",\"architecture\":\"arm\",\"configuration\":\"Release-no_tiered_compilation\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"ae69a820-8040-5321-6217-15d430a2ab03\"} | Schedule\r\n2024-05-08T07:23:40.155Z | coreclr-release-outerloop-nightly | Release | ubuntu.2004.armarch.open | arm | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"135\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16592838\",\"Reason\":\"Schedule\",\"configuration\":\"Release\",\"System.JobId\":\"ae69a820-8040-5321-6217-15d430a2ab03\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_arm_release\",\"BuildNumber\":\"20240507.1\",\"Project\":\"public\",\"BuildId\":\"669106\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"architecture\":\"arm\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"(Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\"} | Schedule\r\n2024-05-06T05:24:02.857Z | runtime-coreclr jitstress | Checked-jitstress1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-jitstress1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"109\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"666407\",\"AzurePipelinesTestRunId\":\"16528844\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240505.1\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-05-06T05:24:01.384Z | runtime-coreclr jitstress | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_tiered\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16528852\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"109\",\"BuildId\":\"666407\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"architecture\":\"x64\",\"Project\":\"public\"} | Schedule\r\n2024-05-06T05:24:00.009Z | runtime-coreclr jitstress | Checked-jitstress2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Project\":\"public\",\"BuildNumber\":\"20240505.1\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"666407\",\"AzurePipelinesTestRunId\":\"16528842\",\"configuration\":\"Checked-jitstress2\",\"DefinitionId\":\"109\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-05-06T05:23:57.087Z | runtime-coreclr jitstress | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"BuildId\":\"666407\",\"AzurePipelinesTestRunId\":\"16528846\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"109\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress1_tiered\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-06T03:47:23.446Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | osx.1200.arm64.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_tiered\",\"System.PhaseName\":\"run_test_p1_R2R_osx_arm64_checked\",\"DefinitionId\":\"114\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\",\"BuildId\":\"666362\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.JobId\":\"99f15f99-448d-5593-a271-dbdf553789a6\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16528362\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"BuildNumber\":\"20240505.1\",\"architecture\":\"arm64\"} | Schedule\r\n2024-05-06T03:31:02.455Z | runtime-coreclr r2r-extra | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16527936\",\"BuildNumber\":\"20240505.1\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"DefinitionId\":\"114\",\"System.PhaseName\":\"run_test_p1_R2R_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"45a39349-90d5-51c8-4429-a48b2907fbdd\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"configuration\":\"Checked-jitstress1_tiered\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"666362\"} | Schedule\r\n2024-05-06T03:30:58.033Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"45a39349-90d5-51c8-4429-a48b2907fbdd\",\"AzurePipelinesTestRunId\":\"16527918\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p1_R2R_linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"BuildId\":\"666362\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240505.1\",\"Project\":\"public\",\"DefinitionId\":\"114\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-jitstress2_tiered\"} | Schedule\r\n2024-05-05T19:40:59.246Z | runtime-coreclr jitstress-random | Checked-jitstress_random_1 | osx.1200.amd64.open | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240505.1\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Reason\":\"Schedule\",\"BuildId\":\"666195\",\"System.JobName\":\"__default\",\"DefinitionId\":\"159\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress-random\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress_random_1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"AzurePipelinesTestRunId\":\"16524440\"} | Schedule\r\n2024-05-05T18:24:04.531Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x80 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"BuildId\":\"666175\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240505.1\",\"configuration\":\"Checked-jitstress2_jitstressregs0x80\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16523722\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"111\"} | Schedule\r\n2024-05-05T18:24:03.184Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x2000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"DefinitionId\":\"111\",\"configuration\":\"Checked-jitstress2_jitstressregs0x2000\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildId\":\"666175\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240505.1\",\"AzurePipelinesTestRunId\":\"16523730\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-05T18:24:01.282Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs8 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"BuildNumber\":\"20240505.1\",\"BuildId\":\"666175\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"111\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16523724\",\"configuration\":\"Checked-jitstress2_jitstressregs8\"} | Schedule\r\n2024-05-05T18:23:59.746Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16523728\",\"configuration\":\"Checked-jitstress2_jitstressregs2\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"666175\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"DefinitionId\":\"111\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\"} | Schedule\r\n2024-05-05T18:23:57.921Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"DefinitionId\":\"111\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"666175\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16523726\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress2_jitstressregs3\",\"BuildNumber\":\"20240505.1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-05T18:23:56.453Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"configuration\":\"Checked-jitstress2_jitstressregs1\",\"System.StageAttempt\":\"1\",\"BuildId\":\"666175\",\"DefinitionId\":\"111\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16523714\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-05T18:23:54.983Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x1000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16523720\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"666175\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_jitstressregs0x1000\",\"architecture\":\"x64\",\"BuildNumber\":\"20240505.1\",\"DefinitionId\":\"111\"} | Schedule\r\n2024-05-05T18:23:53.463Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x10 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"BuildId\":\"666175\",\"configuration\":\"Checked-jitstress2_jitstressregs0x10\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16523718\",\"BuildNumber\":\"20240505.1\",\"architecture\":\"x64\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-05T18:23:52.046Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_jitstressregs4\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"BuildId\":\"666175\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16523716\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Reason\":\"Schedule\",\"DefinitionId\":\"111\",\"BuildNumber\":\"20240505.1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"architecture\":\"x64\"} | Schedule\r\n2024-05-05T05:23:23.043Z | runtime-coreclr jitstress | Checked-jitstress2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665914\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"109\",\"configuration\":\"Checked-jitstress2\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16515340\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\"} | Schedule\r\n2024-05-05T05:23:21.689Z | runtime-coreclr jitstress | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress1_tiered\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"DefinitionId\":\"109\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16515342\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"665914\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-05-05T05:23:18.752Z | runtime-coreclr jitstress | Checked-jitstress1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"AzurePipelinesTestRunId\":\"16515336\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"109\",\"BuildId\":\"665914\",\"configuration\":\"Checked-jitstress1\"} | Schedule\r\n2024-05-05T05:23:17.345Z | runtime-coreclr jitstress | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"DefinitionId\":\"109\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16515338\",\"System.StageAttempt\":\"1\",\"BuildId\":\"665914\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"configuration\":\"Checked-jitstress2_tiered\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-05-05T03:50:23.556Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | osx.1200.arm64.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665904\",\"architecture\":\"arm64\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16514966\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"System.StageName\":\"Build\",\"DefinitionId\":\"114\",\"BuildNumber\":\"20240504.1\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.PhaseName\":\"run_test_p1_R2R_osx_arm64_checked\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress2_tiered\",\"System.JobId\":\"99f15f99-448d-5593-a271-dbdf553789a6\"} | Schedule\r\n2024-05-05T03:50:18.934Z | runtime-coreclr r2r-extra | Checked-jitstress1_tiered | osx.1200.arm64.open | arm64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"114\",\"BuildId\":\"665904\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"arm64\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16514972\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"System.PhaseName\":\"run_test_p1_R2R_osx_arm64_checked\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress1_tiered\",\"Reason\":\"Schedule\",\"System.JobId\":\"99f15f99-448d-5593-a271-dbdf553789a6\"} | Schedule\r\n2024-05-05T03:29:14.895Z | runtime-coreclr r2r-extra | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16514730\",\"System.JobName\":\"__default\",\"BuildId\":\"665904\",\"DefinitionName\":\"runtime-coreclr   r2r-extra\",\"Project\":\"public\",\"System.JobId\":\"45a39349-90d5-51c8-4429-a48b2907fbdd\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"114\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_tiered\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_x64_checked\"} | Schedule\r\n2024-05-04T21:29:31.966Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nossse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nossse3\",\"BuildId\":\"665757\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16513136\",\"architecture\":\"x64\"} | Schedule\r\n2024-05-04T21:28:50.478Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse42 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Project\":\"public\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse42\",\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"System.JobName\":\"__default\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16513126\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-04T21:28:31.425Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse41 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16513124\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"BuildId\":\"665757\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse41\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:27:31.21Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse3_4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"665757\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse3_4\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16513120\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:01:37.259Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nopclmulqdq | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"DefinitionId\":\"115\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16512600\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"BuildId\":\"665757\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress_isas_1_x86_nopclmulqdq\"} | Schedule\r\n2024-05-04T21:01:32.755Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noaes | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress_isas_1_x86_noaes\",\"AzurePipelinesTestRunId\":\"16512576\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"BuildId\":\"665757\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-04T21:01:28.211Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nobmi2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16512594\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nobmi2\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:01:26.552Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nolzcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-jitstress_isas_1_x86_nolzcnt\",\"BuildId\":\"665757\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16512598\",\"DefinitionId\":\"115\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-04T21:01:25.051Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noavx2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"BuildId\":\"665757\",\"AzurePipelinesTestRunId\":\"16512602\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-jitstress_isas_1_x86_noavx2\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:01:23.457Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nobmi2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512588\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"665757\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"architecture\":\"x64\",\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nobmi2\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"115\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\"} | Schedule\r\n2024-05-04T21:01:21.878Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nohwintrinsic | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionId\":\"115\",\"AzurePipelinesTestRunId\":\"16512572\",\"configuration\":\"Checked-jitstress_isas_1_x86_nohwintrinsic\",\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"architecture\":\"x64\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T21:01:19.011Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noavx512 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512564\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_2_x86_noavx512\",\"DefinitionId\":\"115\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:01:17.808Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nofma | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"665757\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16512570\",\"BuildNumber\":\"20240504.1\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress_isas_2_x86_nofma\",\"architecture\":\"x64\",\"DefinitionId\":\"115\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-04T21:01:15.179Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse3\",\"BuildId\":\"665757\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16512586\",\"DefinitionId\":\"115\",\"System.StageName\":\"Build\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-04T21:01:12.355Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse3_4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse3_4\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16512556\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"115\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T21:01:10.703Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse41 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16512574\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse41\",\"DefinitionId\":\"115\",\"architecture\":\"x64\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"Reason\":\"Schedule\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:01:08.08Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noavx | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16512544\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"configuration\":\"Checked-jitstress_isas_1_x86_noavx\",\"BuildId\":\"665757\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:01:02.971Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noavx | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665757\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress_isas_2_x86_noavx\",\"AzurePipelinesTestRunId\":\"16512566\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"115\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\"} | Schedule\r\n2024-05-04T21:01:01.511Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noavx2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress_isas_2_x86_noavx2\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665757\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16512552\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:01:00.266Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240504.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16512560\",\"DefinitionId\":\"115\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-04T21:00:58.734Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nossse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress_isas_1_x86_nossse3\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionId\":\"115\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Project\":\"public\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16512592\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"665757\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:00:57.267Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse2\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16512512\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"BuildId\":\"665757\"} | Schedule\r\n2024-05-04T21:00:51.399Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nobmi1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240504.1\",\"BuildId\":\"665757\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512542\",\"DefinitionId\":\"115\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress_isas_1_x86_nobmi1\"} | Schedule\r\n2024-05-04T21:00:49.89Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nobmi1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"Project\":\"public\",\"configuration\":\"Checked-jitstress_isas_2_x86_nobmi1\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16512516\",\"BuildId\":\"665757\",\"BuildNumber\":\"20240504.1\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:00:48.53Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionId\":\"115\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16512504\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse3\",\"System.StageName\":\"Build\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"665757\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T21:00:46.952Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nolzcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"DefinitionId\":\"115\",\"AzurePipelinesTestRunId\":\"16512526\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"BuildNumber\":\"20240504.1\",\"configuration\":\"Checked-jitstress_isas_2_x86_nolzcnt\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"665757\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2024-05-04T21:00:45.373Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nohwintrinsic | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"AzurePipelinesTestRunId\":\"16512550\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665757\",\"Project\":\"public\",\"DefinitionId\":\"115\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"configuration\":\"Checked-jitstress_isas_2_x86_nohwintrinsic\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-04T21:00:42.467Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nosse | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildNumber\":\"20240504.1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-jitstress_isas_2_x86_nosse\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"16512530\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-04T21:00:40.919Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nopopcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_1_x86_nopopcnt\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"16512522\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"DefinitionId\":\"115\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-04T21:00:32.215Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_noavx512 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16512524\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"configuration\":\"Checked-jitstress_isas_1_x86_noavx512\"} | Schedule\r\n2024-05-04T21:00:30.733Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse42 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse42\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16512502\",\"BuildId\":\"665757\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"115\"} | Schedule\r\n2024-05-04T21:00:29.379Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nosse2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"configuration\":\"Checked-jitstress_isas_1_x86_nosse2\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"BuildId\":\"665757\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"16512506\"} | Schedule\r\n2024-05-04T21:00:26.176Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nopopcnt | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"115\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16512508\",\"System.JobName\":\"__default\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"configuration\":\"Checked-jitstress_isas_2_x86_nopopcnt\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\",\"BuildId\":\"665757\"} | Schedule\r\n2024-05-04T21:00:22.863Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_noaes | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobAttempt\":\"1\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildId\":\"665757\",\"configuration\":\"Checked-jitstress_isas_2_x86_noaes\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"115\",\"BuildNumber\":\"20240504.1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16512500\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\"} | Schedule\r\n2024-05-04T21:00:18.816Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_2_x86_nopclmulqdq | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionId\":\"115\",\"BuildId\":\"665757\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16512498\",\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress_isas_2_x86_nopclmulqdq\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T21:00:17.263Z | runtime-coreclr jitstress-isas-x86 | Checked-jitstress_isas_1_x86_nofma | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildNumber\":\"20240504.1\",\"Project\":\"public\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked-jitstress_isas_1_x86_nofma\",\"Reason\":\"Schedule\",\"BuildId\":\"665757\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"DefinitionName\":\"runtime-coreclr   jitstress-isas-x86\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16512514\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"DefinitionId\":\"115\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\"} | Schedule\r\n2024-05-04T18:24:51.244Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x80 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"BuildId\":\"665686\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16511542\",\"DefinitionId\":\"111\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"configuration\":\"Checked-jitstress2_jitstressregs0x80\"} | Schedule\r\n2024-05-04T18:24:49.807Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs8 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_jitstressregs8\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildId\":\"665686\",\"AzurePipelinesTestRunId\":\"16511550\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"Project\":\"public\"} | Schedule\r\n2024-05-04T18:24:48.244Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x1000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"configuration\":\"Checked-jitstress2_jitstressregs0x1000\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16511540\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"BuildId\":\"665686\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobName\":\"__default\",\"DefinitionId\":\"111\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240504.1\"} | Schedule\r\n2024-05-04T18:24:46.915Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x10 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"AzurePipelinesTestRunId\":\"16511554\",\"DefinitionId\":\"111\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2_jitstressregs0x10\",\"Project\":\"public\",\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"BuildNumber\":\"20240504.1\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"665686\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-05-04T18:24:45.479Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"16511544\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"BuildId\":\"665686\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-jitstress2_jitstressregs2\",\"architecture\":\"x64\"} | Schedule\r\n2024-05-04T18:24:43.947Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs4 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16511552\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageAttempt\":\"1\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"111\",\"System.StageName\":\"Build\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-jitstress2_jitstressregs4\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240504.1\",\"architecture\":\"x64\",\"BuildId\":\"665686\"} | Schedule\r\n2024-05-04T18:24:42.243Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"configuration\":\"Checked-jitstress2_jitstressregs1\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16511538\",\"BuildId\":\"665686\",\"BuildNumber\":\"20240504.1\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"DefinitionId\":\"111\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\"} | Schedule\r\n2024-05-04T18:24:40.774Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs3 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"configuration\":\"Checked-jitstress2_jitstressregs3\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildNumber\":\"20240504.1\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"BuildId\":\"665686\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\",\"System.StageAttempt\":\"1\",\"DefinitionId\":\"111\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"AzurePipelinesTestRunId\":\"16511548\",\"architecture\":\"x64\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\"} | Schedule\r\n2024-05-04T18:24:39.166Z | runtime-coreclr jitstress2-jitstressregs | Checked-jitstress2_jitstressregs0x2000 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"AzurePipelinesTestRunId\":\"16511546\",\"architecture\":\"x64\",\"System.PhaseAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"Project\":\"public\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"BuildNumber\":\"20240504.1\",\"BuildId\":\"665686\",\"DefinitionId\":\"111\",\"configuration\":\"Checked-jitstress2_jitstressregs0x2000\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   jitstress2-jitstressregs\"} | Schedule\r\n2024-05-04T05:26:23.627Z | runtime-coreclr jitstress | Checked-jitstress2 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"DefinitionId\":\"109\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"BuildNumber\":\"20240503.1\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"System.StageName\":\"Build\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"BuildId\":\"665438\",\"configuration\":\"Checked-jitstress2\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16503820\"} | Schedule\r\n2024-05-04T05:26:21.923Z | runtime-coreclr jitstress | Checked-jitstress1_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"AzurePipelinesTestRunId\":\"16503818\",\"System.PhaseAttempt\":\"1\",\"BuildId\":\"665438\",\"DefinitionId\":\"109\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked-jitstress1_tiered\",\"BuildNumber\":\"20240503.1\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-05-04T05:26:18.658Z | runtime-coreclr jitstress | Checked-jitstress1 | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"16503822\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"DefinitionId\":\"109\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"BuildId\":\"665438\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"BuildNumber\":\"20240503.1\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress1\"} | Schedule\r\n2024-05-04T05:26:13.779Z | runtime-coreclr jitstress | Checked-jitstress2_tiered | ubuntu.2204.amd64.open.rt | x64 | GC/Scenarios/FinalizeTimeout/FinalizeTimeout/FinalizeTimeout.sh | Failed | {\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1__linux_x64_checked\",\"DefinitionId\":\"109\",\"DefinitionName\":\"runtime-coreclr   jitstress\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"665438\",\"System.JobId\":\"6dfec640-5b96-5d95-2a5b-7c236ea2d5c5\",\"AzurePipelinesTestRunId\":\"16503824\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-jitstress2_tiered\",\"System.JobAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240503.1\"} | Schedule\r\n\u003c/details\u003e\r\n\r\n",
                                           "updatedAt":  "2024-06-18T02:39:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C6nCX",
                                           "createdAt":  "2024-06-28T08:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20240627.5](https://dev.azure.com/dnceng-public/public/_build/results?buildId=723534\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18157254\u0026resultId=115159\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 osx x64 Checked no_tiered_compilation @ OSX.1200.Amd64.Open\r\n    - tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/tracing/../eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.sh: line 341: -r:/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/*.dll: No such file or directory\r\nwaitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\r\n/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/tracing/../eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.sh: line 467: 35895 Segmentation fault: 11  (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /tmp/helix/working/D0570AF0/w/ADEA0966/uploads/eventpipe/eventsourceerror/eventsourceerror/output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nin takeLock\r\n/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\r\n19:50:46\r\nResponse file: /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll.rsp\r\n/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\r\n-o:/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll\r\n-r:/tmp/helix/working/D0570AF0/p/System.*.dll\r\n-r:/tmp/helix/working/D0570AF0/p/Microsoft.*.dll\r\n-r:/tmp/helix/working/D0570AF0/p/xunit.*.dll\r\n-r:/tmp/helix/working/D0570AF0/p/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--method-layout:random\r\n--targetarch:x64\r\n--targetos:osx\r\nRunning CrossGen2:  dotnet /tmp/helix/working/D0570AF0/p/crossgen2/crossgen2.dll @/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll.rsp  \r\nEmitting R2R PE file: /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll\r\nRunning R2RDump:  dotnet /tmp/helix/working/D0570AF0/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll --out /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll.r2rdump --val\r\n19:50:49\r\n/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/TestLibrary.dll\r\n19:50:49\r\nResponse file: /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll.rsp\r\n/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/TestLibrary.dll\r\n-o:/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll\r\n-r:/tmp/helix/working/D0570AF0/p/System.*.dll\r\n-r:/tmp/helix/working/D0570AF0/p/Microsoft.*.dll\r\n-r:/tmp/helix/working/D0570AF0/p/xunit.*.dll\r\n-r:/tmp/helix/working/D0570AF0/p/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--method-layout:random\r\n--targetarch:x64\r\n--targetos:osx\r\nRunning CrossGen2:  dotnet /tmp/helix/working/D0570AF0/p/crossgen2/crossgen2.dll @/private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll.rsp  \r\nEmitting R2R PE file: /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll\r\nRunning R2RDump:  dotnet /tmp/helix/working/D0570AF0/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll --out /private/tmp/helix/working/D0570AF0/w/ADEA0966/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll.r2rdump --val\r\n19:50:53\r\n/private/tmp/helix/working/D0570AF0/w/AD\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 146\r\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 128\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor19|0_20(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-06-28T02:45:21.083Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"108\",\"AzurePipelinesTestRunId\":\"18157254\",\"BuildId\":\"723534\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240627.5\"} | Schedule\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-06-28T08:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fp-jB",
                                           "createdAt":  "2024-07-22T08:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr outerloop 20240721.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=749526\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18967128\u0026resultId=117218\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr osx x64 Checked no_tiered_compilation @ OSX.1200.Amd64.Open\r\n    - tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n waitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\r\n/private/tmp/helix/working/9AB208BE/w/B5CC09E7/e/tracing/tracing/../eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.sh: line 467: 28654 Segmentation fault: 11  (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /tmp/helix/working/9AB208BE/w/B5CC09E7/uploads/eventpipe/eventsourceerror/eventsourceerror/output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/tmp/helix/working/9AB208BE/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true eventsourceerror.dll \u0027\u0027\r\n  0.0s: ==TEST STARTING==\r\n  1.2s: Started sending sentinel events...\r\n  1.2s: Connecting to EventPipe...\r\n  1.9s: Creating EventPipeEventSource...\r\n  2.0s: EventPipeEventSource created\r\n  2.0s: Dynamic.All callback registered\r\n  2.0s: Running optional trace validator\r\n  2.0s: Finished running optional trace validator\r\n  2.0s: Starting stream processing...\r\n  2.6s: Saw sentinel event\r\n  2.6s: Stopped sending sentinel events\r\n  2.6s: Starting event generating action...\r\n  2.6s: Stopping event generating action\r\n  2.6s: Sending StopTracing command...\r\n  2.6s: Saw new provider \u0027IllegalTypesEventSource\u0027\r\n  2.8s: Saw new provider \u0027Microsoft-DotNETCore-EventPipe\u0027\r\n  2.8s: Saw new provider \u0027Microsoft-Windows-DotNETRuntimeRundown\u0027\r\n[createdump] Gathering state for process 28654 \r\n[createdump] Crashing thread 58b25 signal 11 (000b)\r\n[createdump] Writing crash report to file /cores/coredump.28654.dmp.crashreport.json\r\n[createdump] Crash report successfully written\r\n[createdump] Writing minidump with heap to file /cores/coredump.28654.dmp\r\n[createdump] Written 401678584 bytes (98066 pages) to core file\r\n[createdump] Target process is alive\r\n  8.4s: Stopping stream processing\r\n  8.4s: Dropped 0 events\r\n[createdump] Dump successfully written in 5740ms\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest failed. Trying to see if dump file was created in /cores since 7/21/2024 7:20:39 PM\r\nProcessing /cores/coredump.28654.dmp.crashreport.json\r\nPrinting stacktrace from \u0027/cores/coredump.28654.dmp.crashreport.json\u0027\r\nInvoking llvm-symbolizer --pretty-print\r\nErrors while running llvm-symbolizer --pretty-print\r\nSystem.ComponentModel.Win32Exception (2): An error occurred trying to start process \u0027llvm-symbolizer\u0027 with working directory \u0027/private/tmp/helix/working/9AB208BE/w/B5CC09E7/e/tracing/tracing\u0027. No such file or directory\r\n   at System.Diagnostics.Process.ForkAndExecProcess(ProcessStartInfo startInfo, String resolvedFilename, String[] argv, String[] envp, String cwd, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32\u0026 stdinFd, Int32\u0026 stdoutFd, Int32\u0026 stderrFd, Boolean usesTerminal, Boolean throwOnNoExec) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 496\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 456\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.TryPrintStackTraceFromCrashReport(String crashReportJsonFile, TextWriter outputWriter)\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\nSet up CORE_ROOT and run.\r\n\u003e /private/tmp/helix/working/9AB208BE/w/B5CC09E7/e/tracing/tracing/../eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.sh\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 146\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor19|0_20(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-07-22T06:25:17.554Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.StageName\":\"Build\",\"Project\":\"public\",\"BuildId\":\"749562\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"134\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240721.1\",\"AzurePipelinesTestRunId\":\"18968848\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-07-22T06:22:18.344Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionId\":\"134\",\"BuildId\":\"749562\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240721.1\",\"AzurePipelinesTestRunId\":\"18968836\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"94bcf053-7b40-5111-f380-056c9b4b6421\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_checked\",\"DefinitionName\":\"runtime-coreclr   crossgen2 outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\"} | Schedule\r\n2024-07-22T06:21:29.617Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"AzurePipelinesTestRunId\":\"18968832\",\"BuildNumber\":\"20240721.1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"b98d1326-0c22-5cb0-0518-a01616fe181e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionId\":\"134\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_arm64_checked\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"architecture\":\"arm64\",\"BuildId\":\"749562\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-07-22T02:19:49.496Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"configuration\":\"Checked-no_tiered_compilation\",\"BuildId\":\"749526\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"18967148\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"108\",\"architecture\":\"x64\",\"BuildNumber\":\"20240721.3\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"System.StageName\":\"Build\",\"operatingSystem\":\"OSX.1200.Amd64.Open\"} | Schedule\r\n2024-07-22T02:18:08.057Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"configuration\":\"Checked-no_tiered_compilation\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"AzurePipelinesTestRunId\":\"18967128\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"DefinitionId\":\"108\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240721.3\",\"System.StageAttempt\":\"1\",\"BuildId\":\"749526\",\"Project\":\"public\",\"System.JobName\":\"__default\"} | Schedule\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-07-21T10:18:54.968Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"BuildNumber\":\"20240721.1\",\"System.JobName\":\"__default\",\"BuildId\":\"749181\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"AzurePipelinesTestRunId\":\"18953760\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"architecture\":\"x64\",\"DefinitionId\":\"108\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   outerloop\"} | Schedule\r\n2024-07-21T07:26:21.238Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"135\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"ed94b4c4-ff55-5657-ff29-58e87100eb6d\",\"BuildNumber\":\"20240720.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"18952430\",\"BuildId\":\"749114\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_release\",\"configuration\":\"Release-no_tiered_compilation\"} | Schedule\r\n2024-07-21T07:17:28.489Z | runtime-coreclr crossgen2-composite gcstress | Checked-heapverify1 | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"18952284\",\"DefinitionId\":\"141\",\"DefinitionName\":\"runtime-coreclr   crossgen2-composite   gcstress\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_Composite_osx_arm64_checked\",\"BuildId\":\"749113\",\"Reason\":\"Schedule\",\"System.JobId\":\"4b5575ba-4f05-5198-bc88-a075c735caa5\",\"configuration\":\"Checked-heapverify1\",\"System.StageName\":\"Build\",\"architecture\":\"arm64\",\"Project\":\"public\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"BuildNumber\":\"20240720.1\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-07-21T06:18:18.543Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"Reason\":\"Schedule\",\"DefinitionId\":\"134\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"b98d1326-0c22-5cb0-0518-a01616fe181e\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"18951998\",\"BuildId\":\"749107\",\"BuildNumber\":\"20240720.1\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"architecture\":\"arm64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_arm64_checked\"} | Schedule\r\n2024-07-21T06:17:36.66Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"DefinitionName\":\"runtime-coreclr crossgen2   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"18951994\",\"BuildId\":\"749107\",\"DefinitionId\":\"134\",\"System.JobName\":\"__default\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"BuildNumber\":\"20240720.1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-07-20T19:22:45.652Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"BuildNumber\":\"20240720.2\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"architecture\":\"x64\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"18946692\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"BuildId\":\"748944\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-07-20T07:27:15.343Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"18933762\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildId\":\"748560\",\"System.JobId\":\"ed94b4c4-ff55-5657-ff29-58e87100eb6d\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"DefinitionId\":\"135\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240719.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_release\"} | Schedule\r\n2024-07-20T07:00:46.822Z | runtime-coreclr crossgen2 | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"29eafa29-58bb-5a4a-b8d7-ac7ba8f4fdef\",\"DefinitionId\":\"124\",\"AzurePipelinesTestRunId\":\"18933468\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_osx_x64_checked\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Checked-no_tiered_compilation\",\"BuildNumber\":\"20240719.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"BuildId\":\"748563\",\"DefinitionName\":\"runtime-coreclr   crossgen2\",\"Project\":\"public\"} | Schedule\r\n2024-07-20T06:24:55.525Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionName\":\"runtime-coreclr   crossgen2 outerloop\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"AzurePipelinesTestRunId\":\"18932828\",\"Project\":\"public\",\"architecture\":\"x64\",\"BuildNumber\":\"20240719.1\",\"DefinitionId\":\"134\",\"System.StageName\":\"Build\",\"BuildId\":\"748543\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-07-20T02:31:34.366Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"108\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"18931014\",\"BuildId\":\"748490\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240719.3\"} | Schedule\r\n2024-07-19T07:26:42.813Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"Project\":\"public\",\"DefinitionId\":\"135\",\"System.StageAttempt\":\"1\",\"configuration\":\"Release-no_tiered_compilation\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"18892276\",\"BuildId\":\"747260\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240718.1\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_release\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"ed94b4c4-ff55-5657-ff29-58e87100eb6d\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"operatingSystem\":\"OSX.1200.Amd64.Open\"} | Schedule\r\n2024-07-19T07:08:24.08Z | runtime-coreclr crossgen2 | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_osx_x64_checked\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionId\":\"124\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"BuildId\":\"747262\",\"System.JobId\":\"29eafa29-58bb-5a4a-b8d7-ac7ba8f4fdef\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   crossgen2\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"18891800\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildNumber\":\"20240718.1\"} | Schedule\r\n2024-07-19T06:25:10.367Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.StageAttempt\":\"1\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"architecture\":\"x64\",\"BuildId\":\"747218\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"BuildNumber\":\"20240718.1\",\"configuration\":\"Checked-no_tiered_compilation\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"134\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"18890578\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\"} | Schedule\r\n2024-07-19T06:22:53.83Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"134\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_arm64_checked\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"b98d1326-0c22-5cb0-0518-a01616fe181e\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240718.1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"AzurePipelinesTestRunId\":\"18890536\",\"Project\":\"public\",\"BuildId\":\"747218\"} | Schedule\r\n2024-06-28T02:45:21.083Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"108\",\"AzurePipelinesTestRunId\":\"18157254\",\"BuildId\":\"723534\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240627.5\"} | Schedule\r\n\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-07-22T08:23:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F6X6B",
                                           "createdAt":  "2024-07-24T01:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr crossgen2 20240722.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=751456\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19031306\u0026resultId=110496\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 osx x64 Checked no_tiered_compilation @ OSX.1200.Amd64.Open\r\n    - tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/tracing/../eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.sh: line 341: -r:/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/*.dll: No such file or directory\r\nwaitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\r\n/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/tracing/../eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.sh: line 467: 63462 Segmentation fault: 11  (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /tmp/helix/working/B35D098B/w/A41F08F3/uploads/eventpipe/eventsourceerror/eventsourceerror/output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\nin takeLock\r\n/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\r\n03:13:54\r\nResponse file: /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll.rsp\r\n/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/Microsoft.Diagnostics.NETCore.Client.dll\r\n-o:/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll\r\n-r:/tmp/helix/working/B35D098B/p/System.*.dll\r\n-r:/tmp/helix/working/B35D098B/p/Microsoft.*.dll\r\n-r:/tmp/helix/working/B35D098B/p/xunit.*.dll\r\n-r:/tmp/helix/working/B35D098B/p/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--method-layout:random\r\n--hot-cold-splitting\r\n--targetarch:x64\r\n--targetos:osx\r\nRunning CrossGen2:  dotnet /tmp/helix/working/B35D098B/p/crossgen2/crossgen2.dll @/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll.rsp  \r\nEmitting R2R PE file: /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll\r\nRunning R2RDump:  dotnet /tmp/helix/working/B35D098B/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll --out /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/Microsoft.Diagnostics.NETCore.Client.dll.r2rdump --val\r\n03:13:56\r\n/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/TestLibrary.dll\r\n03:13:56\r\nResponse file: /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll.rsp\r\n/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/IL-CG2/TestLibrary.dll\r\n-o:/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll\r\n-r:/tmp/helix/working/B35D098B/p/System.*.dll\r\n-r:/tmp/helix/working/B35D098B/p/Microsoft.*.dll\r\n-r:/tmp/helix/working/B35D098B/p/xunit.*.dll\r\n-r:/tmp/helix/working/B35D098B/p/mscorlib.dll\r\n--verify-type-and-field-layout\r\n--method-layout:random\r\n--hot-cold-splitting\r\n--targetarch:x64\r\n--targetos:osx\r\nRunning CrossGen2:  dotnet /tmp/helix/working/B35D098B/p/crossgen2/crossgen2.dll @/private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll.rsp  \r\nEmitting R2R PE file: /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll\r\nRunning R2RDump:  dotnet /tmp/helix/working/B35D098B/p/R2RDump/R2RDump.dll --header --sc --in /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll --out /private/tmp/helix/working/B35D098B/w/A41F08F3/e/tracing/eventpipe/eventsourceerror/eventsourceerror/TestLibrary.dll.r2rdump --val\r\n03:13:5\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 146\r\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 128\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor19|0_20(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-07-22T06:25:17.554Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.StageName\":\"Build\",\"Project\":\"public\",\"BuildId\":\"749562\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"134\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240721.1\",\"AzurePipelinesTestRunId\":\"18968848\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.PhaseAttempt\":\"1\"} | Schedule\r\n2024-07-22T06:22:18.344Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionId\":\"134\",\"BuildId\":\"749562\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildNumber\":\"20240721.1\",\"AzurePipelinesTestRunId\":\"18968836\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"94bcf053-7b40-5111-f380-056c9b4b6421\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_checked\",\"DefinitionName\":\"runtime-coreclr   crossgen2 outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"architecture\":\"x64\"} | Schedule\r\n2024-07-22T06:21:29.617Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"AzurePipelinesTestRunId\":\"18968832\",\"BuildNumber\":\"20240721.1\",\"System.JobName\":\"__default\",\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"b98d1326-0c22-5cb0-0518-a01616fe181e\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"DefinitionId\":\"134\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_arm64_checked\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"architecture\":\"arm64\",\"BuildId\":\"749562\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.StageName\":\"Build\"} | Schedule\r\n2024-07-22T02:19:49.496Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"configuration\":\"Checked-no_tiered_compilation\",\"BuildId\":\"749526\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"18967148\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"108\",\"architecture\":\"x64\",\"BuildNumber\":\"20240721.3\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"System.StageName\":\"Build\",\"operatingSystem\":\"OSX.1200.Amd64.Open\"} | Schedule\r\n2024-07-22T02:18:08.057Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"configuration\":\"Checked-no_tiered_compilation\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"AzurePipelinesTestRunId\":\"18967128\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"DefinitionId\":\"108\",\"architecture\":\"x64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"BuildNumber\":\"20240721.3\",\"System.StageAttempt\":\"1\",\"BuildId\":\"749526\",\"Project\":\"public\",\"System.JobName\":\"__default\"} | Schedule\r\n\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-07-21T10:18:54.968Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"BuildNumber\":\"20240721.1\",\"System.JobName\":\"__default\",\"BuildId\":\"749181\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"AzurePipelinesTestRunId\":\"18953760\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"architecture\":\"x64\",\"DefinitionId\":\"108\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"DefinitionName\":\"runtime-coreclr   outerloop\"} | Schedule\r\n2024-07-21T07:26:21.238Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"135\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"System.PhaseAttempt\":\"1\",\"Project\":\"public\",\"System.JobId\":\"ed94b4c4-ff55-5657-ff29-58e87100eb6d\",\"BuildNumber\":\"20240720.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"System.StageAttempt\":\"1\",\"System.StageName\":\"Build\",\"architecture\":\"x64\",\"AzurePipelinesTestRunId\":\"18952430\",\"BuildId\":\"749114\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_release\",\"configuration\":\"Release-no_tiered_compilation\"} | Schedule\r\n2024-07-21T07:17:28.489Z | runtime-coreclr crossgen2-composite gcstress | Checked-heapverify1 | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.StageAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"18952284\",\"DefinitionId\":\"141\",\"DefinitionName\":\"runtime-coreclr   crossgen2-composite   gcstress\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_Composite_osx_arm64_checked\",\"BuildId\":\"749113\",\"Reason\":\"Schedule\",\"System.JobId\":\"4b5575ba-4f05-5198-bc88-a075c735caa5\",\"configuration\":\"Checked-heapverify1\",\"System.StageName\":\"Build\",\"architecture\":\"arm64\",\"Project\":\"public\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"BuildNumber\":\"20240720.1\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-07-21T06:18:18.543Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"Reason\":\"Schedule\",\"DefinitionId\":\"134\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"b98d1326-0c22-5cb0-0518-a01616fe181e\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"18951998\",\"BuildId\":\"749107\",\"BuildNumber\":\"20240720.1\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"architecture\":\"arm64\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_arm64_checked\"} | Schedule\r\n2024-07-21T06:17:36.66Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"DefinitionName\":\"runtime-coreclr crossgen2   outerloop\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"18951994\",\"BuildId\":\"749107\",\"DefinitionId\":\"134\",\"System.JobName\":\"__default\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"BuildNumber\":\"20240720.1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\"} | Schedule\r\n2024-07-20T19:22:45.652Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"BuildNumber\":\"20240720.2\",\"System.StageAttempt\":\"1\",\"Project\":\"public\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"architecture\":\"x64\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"18946692\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"BuildId\":\"748944\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.StageName\":\"Build\",\"DefinitionId\":\"108\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-07-20T07:27:15.343Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"Project\":\"public\",\"AzurePipelinesTestRunId\":\"18933762\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"BuildId\":\"748560\",\"System.JobId\":\"ed94b4c4-ff55-5657-ff29-58e87100eb6d\",\"System.StageAttempt\":\"1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"DefinitionId\":\"135\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240719.1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"System.StageName\":\"Build\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_release\"} | Schedule\r\n2024-07-20T07:00:46.822Z | runtime-coreclr crossgen2 | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"29eafa29-58bb-5a4a-b8d7-ac7ba8f4fdef\",\"DefinitionId\":\"124\",\"AzurePipelinesTestRunId\":\"18933468\",\"System.StageAttempt\":\"1\",\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_osx_x64_checked\",\"System.StageName\":\"Build\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"configuration\":\"Checked-no_tiered_compilation\",\"BuildNumber\":\"20240719.1\",\"System.PhaseAttempt\":\"1\",\"architecture\":\"x64\",\"BuildId\":\"748563\",\"DefinitionName\":\"runtime-coreclr   crossgen2\",\"Project\":\"public\"} | Schedule\r\n2024-07-20T06:24:55.525Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"System.JobAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"DefinitionName\":\"runtime-coreclr   crossgen2 outerloop\",\"Reason\":\"Schedule\",\"System.StageAttempt\":\"1\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"AzurePipelinesTestRunId\":\"18932828\",\"Project\":\"public\",\"architecture\":\"x64\",\"BuildNumber\":\"20240719.1\",\"DefinitionId\":\"134\",\"System.StageName\":\"Build\",\"BuildId\":\"748543\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\"} | Schedule\r\n2024-07-20T02:31:34.366Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"architecture\":\"x64\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"Project\":\"public\",\"System.PhaseAttempt\":\"1\",\"DefinitionId\":\"108\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"System.StageAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobName\":\"__default\",\"System.StageName\":\"Build\",\"AzurePipelinesTestRunId\":\"18931014\",\"BuildId\":\"748490\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"Reason\":\"Schedule\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240719.3\"} | Schedule\r\n2024-07-19T07:26:42.813Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"Project\":\"public\",\"DefinitionId\":\"135\",\"System.StageAttempt\":\"1\",\"configuration\":\"Release-no_tiered_compilation\",\"architecture\":\"x64\",\"System.JobAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"18892276\",\"BuildId\":\"747260\",\"Reason\":\"Schedule\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20240718.1\",\"System.PhaseName\":\"run_test_p1_R2R_osx_x64_release\",\"System.PhaseAttempt\":\"1\",\"System.JobId\":\"ed94b4c4-ff55-5657-ff29-58e87100eb6d\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageName\":\"Build\",\"operatingSystem\":\"OSX.1200.Amd64.Open\"} | Schedule\r\n2024-07-19T07:08:24.08Z | runtime-coreclr crossgen2 | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.PhaseName\":\"run_test_p0_coreclr_R2R_CG2_HotColdSplitting_osx_x64_checked\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionId\":\"124\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"BuildId\":\"747262\",\"System.JobId\":\"29eafa29-58bb-5a4a-b8d7-ac7ba8f4fdef\",\"System.JobName\":\"__default\",\"System.StageAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobAttempt\":\"1\",\"DefinitionName\":\"runtime-coreclr   crossgen2\",\"Reason\":\"Schedule\",\"AzurePipelinesTestRunId\":\"18891800\",\"architecture\":\"x64\",\"Project\":\"public\",\"BuildNumber\":\"20240718.1\"} | Schedule\r\n2024-07-19T06:25:10.367Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.StageAttempt\":\"1\",\"System.JobId\":\"30d857d6-2812-5c31-5c67-e52c43389e0f\",\"architecture\":\"x64\",\"BuildId\":\"747218\",\"System.StageName\":\"Build\",\"Project\":\"public\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"BuildNumber\":\"20240718.1\",\"configuration\":\"Checked-no_tiered_compilation\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"134\",\"System.PhaseAttempt\":\"1\",\"System.JobName\":\"__default\",\"AzurePipelinesTestRunId\":\"18890578\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_x64_checked\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\"} | Schedule\r\n2024-07-19T06:22:53.83Z | runtime-coreclr crossgen2 outerloop | Checked-no_tiered_compilation | osx.1200.arm64.open | arm64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"DefinitionId\":\"134\",\"System.PhaseName\":\"run_test_p1_R2R_Composite_osx_arm64_checked\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"b98d1326-0c22-5cb0-0518-a01616fe181e\",\"architecture\":\"arm64\",\"System.StageName\":\"Build\",\"System.PhaseAttempt\":\"1\",\"BuildNumber\":\"20240718.1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.ARM64.Open\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr   crossgen2   outerloop\",\"AzurePipelinesTestRunId\":\"18890536\",\"Project\":\"public\",\"BuildId\":\"747218\"} | Schedule\r\n2024-06-28T02:45:21.083Z | runtime-coreclr outerloop | Checked-no_tiered_compilation | osx.1200.amd64.open | x64 | tracing/eventpipe/eventsourceerror/eventsourceerror/eventsourceerror.cmd | Failed | {\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"System.JobId\":\"2bb87d59-31ba-55f9-0713-03158c3fd52f\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobAttempt\":\"1\",\"DefinitionId\":\"108\",\"AzurePipelinesTestRunId\":\"18157254\",\"BuildId\":\"723534\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"System.StageName\":\"Build\",\"DefinitionName\":\"runtime-coreclr   outerloop\",\"Reason\":\"Schedule\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1_R2R_CG2_osx_x64_checked\",\"System.StageAttempt\":\"1\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"BuildNumber\":\"20240627.5\"} | Schedule\r\n\r\n\u003c/details\u003e\r\n",
                                           "updatedAt":  "2024-07-24T01:16:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LCsDv",
                                           "createdAt":  "2024-09-05T22:28:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Closing since this hasn\u0027t reproed in a few months",
                                           "updatedAt":  "2024-09-05T22:28:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LG5if",
                                           "createdAt":  "2024-09-06T11:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SzpejnaDawid",
                                           "body":  "**dotnet/runtime**: ce8f49e658d\r\nI checked this tests on RISC-V and x64 with debian and I still get this error.\r\n```\r\n/runtime/artifacts/tests/coreclr/linux.x64.Checked/GC/Features/SustainedLowLatency/scenario# ./scenario.sh \r\nBEGIN EXECUTION\r\n/runtime/artifacts/tests/coreclr/linux.x64.Checked/Tests/Core_Root/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true scenario.dll \u0027\u0027\r\nTID 3847b: TraceGC is not turned on Cleaning up-------gen0: 1102, gen1: 627; gen2: 176, heap size: 32,812,912 bytes\r\n Cleaning up-------gen0: 2205, gen1: 1256; gen2: 353, heap size: 7,753,896 bytes\r\n Cleaning up-------gen0: 3308, gen1: 1884; gen2: 529, heap size: -10,903,992 bytes\r\n Cleaning up-------gen0: 4410, gen1: 2512; gen2: 703, heap size: 42,269,328 bytes\r\n Cleaning up-------gen0: 5513, gen1: 3140; gen2: 880, heap size: 34,975,312 bytes\r\n Cleaning up-------gen0: 6615, gen1: 3768; gen2: 1055, heap size: 40,667,016 bytes\r\n Cleaning up-------gen0: 7720, gen1: 4398; gen2: 1234, heap size: -1,186,208 bytes\r\n./scenario.sh: line 449: 230523 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\n```",
                                           "updatedAt":  "2024-09-06T11:21:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lr29u",
                                           "createdAt":  "2024-09-11T12:26:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SzpejnaDawid",
                                           "body":  "@mangod9 I was able to reproduce the error on `x64`. Could you check whether this issue should really be closed?",
                                           "updatedAt":  "2024-09-11T12:26:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lsxqu",
                                           "createdAt":  "2024-09-11T14:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok thanks for the info, reopening the issue now. The original one was for macOS, are you able to repro this consistently? ",
                                           "updatedAt":  "2024-09-11T14:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MNF9r",
                                           "createdAt":  "2024-09-16T07:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SzpejnaDawid",
                                           "body":  "When it comes to operating system, I checked it on Ubuntu.",
                                           "updatedAt":  "2024-09-16T07:58:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MSG4Z",
                                           "createdAt":  "2024-09-16T17:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e When it comes to operating system, I checked it on Ubuntu.\r\n\r\nI don\u0027t have access to RISC-V hardware, is there something we can do to work on this together?",
                                           "updatedAt":  "2024-09-16T17:56:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MWyLd",
                                           "createdAt":  "2024-09-17T07:44:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SzpejnaDawid",
                                           "body":  "\u003e \u003e When it comes to operating system, I checked it on Ubuntu.\r\n\u003e \r\n\u003e I don\u0027t have access to RISC-V hardware, is there something we can do to work on this together?\r\n\r\n@cshung, Fortunately (or not), I reproduced this error on `x64` so `RISC-V` hardware is not required.",
                                           "updatedAt":  "2024-09-17T07:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6McHOo",
                                           "createdAt":  "2024-09-17T15:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e @cshung, Fortunately (or not), I reproduced this error on `x64` so `RISC-V` hardware is not required.\r\n\r\nI tried to repro this on Ubuntu x64 as well, but I can\u0027t. Can you share more details on how did you get it to reproduce?",
                                           "updatedAt":  "2024-09-17T15:10:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mJSCx",
                                           "createdAt":  "2025-04-08T19:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Doesn\u0027t appear to be blocking-outerloop",
                                           "updatedAt":  "2025-04-08T19:21:40Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Test failure: GC/Features/SustainedLowLatency/scenario/scenario.sh",
        "labels":  [
                       "os-mac-os-x",
                       "arch-x64",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100594",
        "createdAt":  "2024-04-03T17:01:16Z",
        "number":  100594,
        "author":  "markples",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T17:45:01Z",
        "body":  "Easiest repro is to only allocate large objects - `gcperfsim -tc 36 -tagb 100 -tlgb 0 -lohar 1000 -pohar 0 -sohsr 100-4000 -lohsr 16002400-16004800 -pohsr 100-204800 -sohsi 0 -lohsi 0 -pohsi 0 -sohpi 0 -lohpi 0 -sohfi 0 -lohfi 0 -pohfi 0 -allocType reference -testKind time` - but this requires a separate gcperfsim fix.\r\n\r\nThis is due to allocations occurring during BGC.  They are counted as survived but not at the start (i.e., in the numerator but not the denominator).  It looks like inaccuracies are possible for all generations, but it easiest to expose it as \u003e100% with large objects.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfRt9aA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55TYju",
                                           "createdAt":  "2024-04-03T17:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-03T17:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59G31o",
                                           "createdAt":  "2024-05-07T17:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "This issue is still relevant for ephemeral generations, but the impact there is closer to rounding error than the large swings that can be seen in LOH (due to the small -number- of allocations).",
                                           "updatedAt":  "2024-05-07T17:27:03Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "GC sometimes reports survival rates above 100%",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101013",
        "createdAt":  "2024-04-13T21:03:35Z",
        "number":  101013,
        "author":  "mnajj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-01T21:01:40Z",
        "body":  "### Description\r\n\r\nThe issue has been described before in the following issues:\r\n- [Huge memory usage regression in dotnet 7 on Linux](https://github.com/dotnet/runtime/issues/79633)\r\n- [Increased memory consumption after upgrading to .NET 7](https://github.com/dotnet/runtime/issues/84497)\r\n\r\nI\u0027m still facing the same problem after upgrading to .NET version 8.0.3.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhvGtMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56bR1e",
                                           "createdAt":  "2024-04-14T08:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-14T08:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58qucS",
                                           "createdAt":  "2024-05-02T21:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "this might be related to https://github.com/dotnet/runtime/pull/100502, can you please check? ",
                                           "updatedAt":  "2024-05-02T21:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F4sIk",
                                           "createdAt":  "2024-07-23T20:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Another possibility is that it is #101022, @mnajj it might be worth trying the workaround described there.",
                                           "updatedAt":  "2024-07-23T20:14:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G8a0x",
                                           "createdAt":  "2024-08-01T21:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@mnajj, we will need additional details to investigate further. I would also check on latest servicing build since there have been networking related leaks fixed in 8.0.5+ I believe",
                                           "updatedAt":  "2024-08-01T21:01:35Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Linux huge memory consumption in .NET 8",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102116",
        "createdAt":  "2024-05-11T15:05:06Z",
        "number":  102116,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQhXOg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-05-12T04:15:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2025-09-15T08:31:35Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-07T17:44:40Z",
        "body":  "### Discussed in https://github.com/dotnet/runtime/discussions/102093\r\n\r\n\u003cdiv type=\u0027discussions-op-text\u0027\u003e\r\n\r\n\u003csup\u003eOriginally posted by **neon-sunset** May 10, 2024\u003c/sup\u003e\r\nCurrently, SRV GC + DATAS will nicely scale down heapcount to 1/2/3 heaps on light to moderate long-running allocation traffic, keeping memory usage lower and throughput higher than WKS GC.\r\n\r\nThis is particularly useful and important for lightweight NativeAOT deployments, especially when they are published as native libraries (e.g. https://github.com/dotnet/runtime/discussions/102048)\r\n\r\nHowever, as DATAS scales down the heapcount, it does not scale down the respective GC threads, keeping the entire `Environment.ProcessorCount` set of threads alive throughout the lifetime of the application. This leads to a scenario where only one GC thread is active when GC is triggered and all others sit idle without doing useful work.\r\n\r\nThis can be particularly problematic as modern systems often come with lots of cores - due to SMT, even 8-core systems have at least 16 GC threads alive, 32 threads alive for 16C and so on and so forth. This will only keep getting worse as manufacturers add E-cores. It is also already problematic on `osx-*` RIDs as they also have additional autorelease pool thread per core.\r\n\r\nHas despawning of idle threads that do not have a heap associated with them been considered for DATAS? If so, is there a reasoning, besides \"we just did not get to this yet\" to keep `.ProcessorCount` of GC threads alive at all times?\u003c/div\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfYjY0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59heWA",
                                           "createdAt":  "2024-05-11T15:05:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-11T15:05:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59iNjQ",
                                           "createdAt":  "2024-05-12T05:05:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhgGtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2024-05-12T08:31:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Thanks for creating this issue. This is something we have considered and will investigate once current DATAS tuning work is complete. ",
                                           "updatedAt":  "2024-05-12T05:05:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider despawning idle SRV GC threads when DATAS is in use",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103582",
        "createdAt":  "2024-06-17T15:51:58Z",
        "number":  103582,
        "author":  "baal2000",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T13:50:01Z",
        "body":  "### Description\r\nAfter upgrading a production environment comprised of a pool of large memory footprint processes running in Docker containers, one container per Ubuntu 20.04 VM host ranging from ~30 GB up to 1TB RAM from .NET 7 with segment-based `libcrlgc.so` GC heap (due to https://github.com/dotnet/runtime/issues/86183) to a default .NET 8 configuration some of the processes experienced sporadic out of memory crashes.\r\n\r\n### Analysis\r\nA typical pattern before was the process cycling between hitting the available memory limit, then deep gen 2 GC, then again raising to the limit, then gen2 GC, etc.\r\n![image](https://github.com/dotnet/runtime/assets/22180333/45b259af-8a26-44e7-abbc-02cb53025fe0)\r\nUnder .NET 8 (standard region-based GC) the pattern had changed to almost a straight line ending in out of memory\r\n![image](https://github.com/dotnet/runtime/assets/22180333/07dc6aee-0c07-4781-bccf-54ad7fdd2528)\r\nReverting to .NET 7 with segment-based `libcrlgc.so` GC heap reversed the pattern and the process became stable.\r\n\r\nThe heap sizes looked similar under both scenarios:\r\n![image](https://github.com/dotnet/runtime/assets/22180333/1c23d715-ee52-49b3-b28f-799360af0c05)\r\nAfter taking a fill memory dump for both scenarios, the .NET native  top object usage looked similarly:\r\n.net 7 (segment-based GC heap)\r\n```\r\n  kilobytes |Object count|Type\r\n  23,402,813| 272,323,647|Class1\r\n  11,726,220|      63,078|Class2[]\r\n   5,024,993|     117,549|Class1[]\r\n   3,877,060|         173|$.ValueTuple\u003cClass2,Class1\u003e[]\r\n   3,214,924|  22,861,688|Class3\r\n     850,206|      13,871|$.Collections.Generic.HashSet+Entry\u003cClass4\u003e[]\r\n     698,673|   1,527,108|$.Int32[]\r\n     664,435|  28,349,262|Class5\r\n     664,193|  11,920,171|$.String\r\n     608,850|   3,247,205|Class6\r\n....    \r\n       9,165|     233,684|Free\r\n\r\n  60,011,021| 453,466,459|TOTAL\r\n```\r\n.net 8 (region-based GC heap)\r\n```\r\n  kilobytes |Object count|Type\r\n  26,227,185| 305,189,069|Class1\r\n  12,293,589|      57,454|Class2[]\r\n   3,988,836|      80,069|Class1[]\r\n   3,074,227|  21,861,170|Class3\r\n   1,613,392|          91|$.ValueTuple\u003cClass2,.Class1\u003e[]\r\n   1,500,896|      12,276|$.Collections.Generic.HashSet+Entry\u003cClass4\u003e[]\r\n     633,966|  27,049,234|Class5\r\n     615,378|   3,282,018|Class6\r\n     539,491|     758,663|$.Int32[]\r\n\r\n      29,343|      23,047|Free\r\n\r\n  57,974,870| 451,380,242|TOTAL\r\n```\r\nScaling up the machine up to 1.5+ its original size\r\n![image](https://github.com/dotnet/runtime/assets/22180333/50055392-ba46-4167-ae4c-592d6e1f0d01)\r\nhad eliminated the OM crashes but required 1.5+ more CPU cores that in turn costed 1.5+ in dollars for a more expensive cloud infrastructure.\r\n\r\nTo test the theory that the difference was due to the GC heap mode and not related to the framework version change from .NET 7 to .NET 8, we tried switching from .NET 7 `libcrlgc.so` -\u003e .NET 8 `default` -\u003e .NET 8 `libcrlgc.so` -\u003e .NET 8 `DOTNET_GCDynamicAdaptationMode` on another server that had experienced a similar issue. The test confirmed that the pattern was only dependent on the segment `libcrlgc.so` vs. region - based heap. Switching to DATAS for region - based heap didn\u0027t not affect the pattern.\r\n![image](https://github.com/dotnet/runtime/assets/22180333/48ce594a-378b-4043-b6b5-9e6e62cd3e04)\r\n\r\n### Configuration\r\n* .NET 7 \u0026 8\r\n* Ubuntu 20.04 x64\r\n\r\n### Regression?\r\nFeels like one. Could be triggered when a process is already running close to its maximum available memory limit with no space to spare. The region-based GC heap might optimize its activity based on some factors: for instance minimizing GC pauses or busy preserving its pools of memory regions not realizing that there is a bigger issue of insufficient memory at hands that needs to be dealt with urgently.\r\n\r\nNote that this is the second critical issue after https://github.com/dotnet/runtime/issues/97316 that we had experienced with the region-based GC heap mode that needs to be addressed by the team for the new GC mode to deliver on its better proformance promise.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuylxkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BkR_P",
                                           "createdAt":  "2024-06-17T15:52:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-17T15:52:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BlSvi",
                                           "createdAt":  "2024-06-17T18:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "thanks for reporting the issue @baal2000. Would you be able to capture GCCollectOnly traces for both .NET 8 regions and  with clrgc (segments) so we could investigate the differences? \r\n\r\nAlso some clarifications: \r\n1. Are the OOMs expected since the working set is getting close to the limits with Regions? \r\n2. Are you observing any latency differences or the perf other than memory concerns is comparable? ",
                                           "updatedAt":  "2024-06-17T18:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bl6QS",
                                           "createdAt":  "2024-06-17T18:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 \r\n\r\n- If you are asking about after the fact the working set stays this high with regions then the answer is OOM would be likely. \r\n- The other perfomance metrics weren\u0027t that different. For example the CPU: \r\n![image](https://github.com/dotnet/runtime/assets/22180333/b3ad3c54-5428-41d7-a96b-15b374920cd9)\r\n- Please post the `dotnet-trace` command with parameters (including for how long) you\u0027d like us to run for both .NET 8 regions and with clrgc (segments) \r\n",
                                           "updatedAt":  "2024-06-17T18:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B3Cq0",
                                           "createdAt":  "2024-06-19T13:11:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "CC: @cshung ",
                                           "updatedAt":  "2024-06-19T13:11:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B3UxB",
                                           "createdAt":  "2024-06-19T13:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "The dotnet-trace command is available here:\r\n\r\nhttps://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#how-to-collect-top-level-gc-metrics\r\n\r\nI am not sure I can specify a duration for you. The duration needs to be long enough so that it is sufficient to look at the growth over time, but not too long that stress your disk space. In general, GCCollect traces are supposed to be lightweight, logging just before and after GCs, so you should be able to turn it on for hours without issues.",
                                           "updatedAt":  "2024-06-19T13:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B4tCw",
                                           "createdAt":  "2024-06-19T16:54:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "I think an hour would be fine here.  We\u0027d like to see several GCs of the increase during regions and several of the oscillations under segments, so `\r\ndotnet trace collect -p \u003cpid\u003e -o \u003coutputpath with .nettrace extension\u003e --profile gc-collect --duration 01:00:00`\r\n\r\nAdditionally, since you have a dump, we could also use a few values from that.\r\n\r\n```\r\n?? coreclr!SVR::gc_heap::global_regions_to_decommit[0].size_committed_in_free_regions\r\n?? coreclr!SVR::gc_heap::global_regions_to_decommit[1].size_committed_in_free_regions\r\n?? coreclr!SVR::gc_heap::global_regions_to_decommit[2].size_committed_in_free_regions\r\n?? coreclr!SVR::gc_heap::global_free_huge_regions.size_committed_in_free_regions\r\n\r\n// for a sampling of x --  they should be similar though outliers would be interesting\r\n?? coreclr!SVR::g_heaps[x]-\u003efree_regions[0].size_committed_in_free_regions\r\n?? coreclr!SVR::g_heaps[x]-\u003efree_regions[1].size_committed_in_free_regions\r\n?? coreclr!SVR::g_heaps[x]-\u003efree_regions[2].size_committed_in_free_regions\r\n```\r\n\r\nI believe you\u0027ll need to replace `??` with `p` and drop the `coreclr!`.  Thank you!",
                                           "updatedAt":  "2024-06-19T16:54:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zmb2Q",
                                           "createdAt":  "2025-01-08T08:03:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "After looking at various traces on this, we believe that the large/huge region freelist policy may be holding onto way too many regions.  #109431 is intended to address this.",
                                           "updatedAt":  "2025-01-08T08:03:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66_2IX",
                                           "createdAt":  "2025-07-30T17:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@baal2000, since we have back ported the change to 9, can we close this issue out? ",
                                           "updatedAt":  "2025-07-30T17:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67ACBA",
                                           "createdAt":  "2025-07-30T18:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 just noticed https://github.com/dotnet/runtime/pull/117543 \nDoes that put us back for .net 8, eg. have to continue with `DOTNET_GCName=libclrgc.so`?\n\nI am also worried that .net 9 and even 10 could follow per https://github.com/dotnet/runtime/issues/117319#issuecomment-3039212975 as the behavior could depend on other GC configurations like DATAS.",
                                           "updatedAt":  "2025-07-30T18:05:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67FMO3",
                                           "createdAt":  "2025-07-31T06:22:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "We are working on making a better fix in 8. Are you able to validate on 9 however if the issue is resolved for you? ",
                                           "updatedAt":  "2025-07-31T06:22:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67KKcl",
                                           "createdAt":  "2025-07-31T13:34:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 We haven\u0027t been testing on .net 9: assuming it\u0027s the same issue/fix.   \n\nThere is a blocking issue for .net 9 regarding its failure to terminate the runtime after an unhandled exception that prevents us from deployment under this framework. \n",
                                           "updatedAt":  "2025-07-31T13:34:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67KXGT",
                                           "createdAt":  "2025-07-31T13:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baal2000",
                                           "body":  "@mangod9 Could you please confirm that: \n- .net 9 port [#115167](https://github.com/dotnet/runtime/pull/115167) is safe from the rollback perspective regardless of DATAS enablement.  \n\n\u003eWe are working on making a better fix in 8. \n\nWhat would be the timeline for that?",
                                           "updatedAt":  "2025-07-31T13:50:00Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Process memory exhaustion under region-based GC heap mode",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105390",
        "createdAt":  "2024-07-24T09:36:48Z",
        "number":  105390,
        "author":  "jedrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-28T21:32:46Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nHosting Environment: I\u0027m running multiple .NET Docker containers on the same Linux Docker host. My goal is to optimize memory usage over performance.\r\n\r\nTo achieve the goal mentioned above, I set **DOTNET_GCHighMemPercent=0x5** and **DOTNET_GCConserveMemory=9**, assuming that the garbage collector would run more aggressively when memory usage exceeds 5% of total physical memory. However, I did not observe any difference until I imposed a memory limit on the container (docker run --memory \u003cvalue\u003e with the value limit being roughly equivalent to the physical memory).\r\n\r\nI don\u0027t want to set a static memory limit on the container because it needs to process large data sets for background jobs. Instead, when memory usage exceeds **DOTNET_GCHighMemPercent**, the garbage collector should run more aggressively to reduce memory consumption.\r\n \r\n\r\n### Configuration\r\n.Net 6 \r\nOS version: Docker WSL 2 ubuntu Linux (on windows 11)\r\nArchitecture: x64\r\nResource: 4 vCPUs and 8GBs Ram assigned \r\nDockerfile build upon\r\n\r\n\u003e FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\r\n\r\n### Steps to reproduce?\r\nSniped code that increase memory\r\n![image](https://github.com/user-attachments/assets/d13ad46c-2379-4f4c-a659-7ff0b8139fec)\r\n\r\nTrigger the endpoints multiple times with the same input using the following commands:\r\n1. CMD1: _docker run --rm -p 8080:80 -e DOTNET_GCHighMemPercent=0x5 -e DOTNET_GCConserveMemory=9 --name mem mem_\r\n    Memory usage\r\n![image](https://github.com/user-attachments/assets/d137a99b-f1a6-41b8-8e4c-82630e4a39be)\r\n\r\n2. CMD2: _docker run --rm -p 8080:80 -e DOTNET_GCHighMemPercent=0x5 -e DOTNET_GCConserveMemory=9 --memory=6500m --name mem mem_\r\n   Memory usage \r\n![image](https://github.com/user-attachments/assets/0b3d7bd6-ae8b-4ab8-8e10-c5678ecdb01c)\r\n\r\n\r\n### Concerns\r\nWhy there is a difference in memory consumption with and without a memory limit on the container when DOTNET_GCHighMemPercent is set?\r\n\r\nIn additional, Can I check if there\u0027s a way to configure the GC to release memory down to 80% of DOTNET_GCHighMemPercent when memory usage exceeds DOTNET_GCHighMemPercent?\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhfRSaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6F9FJr",
                                           "createdAt":  "2024-07-24T09:37:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-24T09:37:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Memory Consumption Differences in Running .NET 6 WebAPI Linux Docker container (with DOTNET_GCHighMemPercent Configured) With and Without Docker memory Limit",
        "labels":  [
                       "question",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105780",
        "createdAt":  "2024-07-31T22:38:20Z",
        "number":  105780,
        "author":  "jhudsoncedaron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-16T14:02:22Z",
        "body":  "### Description\r\n\r\nActive worker thread is hung up with a diagnostic call stack that looks something like this:\r\n\r\nntdll.dll!syscall_gate\r\nKERNELBASE.dll!WaitForMultipleObjects\r\n???\r\nCORINFO_HELP_NEWARR_1_VC\r\ninlined!StringBuilder.ctor\r\nCedaron.Common.HL7.DLL!Cedaron.Common.HL7.HL7Segment.HL7Decode\r\n\r\nAll managed stacks as follows:\r\n\r\n```\r\nMain thread:\r\n \tntdll.dll!00007ff9df400d24()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9d464c()\tWaitForSingleObject\r\n \t[Managed to Native Transition]\t\r\n \tSystem.Private.CoreLib.dll!System.Threading.Monitor.Wait(object obj, int millisecondsTimeout) Line 156\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ManualResetEventSlim.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 561\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 3072\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.InternalWaitCore(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 3007\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) Line 2768\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout) Line 2728\tC#\r\n \t[Waiting on Async Operation, double-click or press enter to view Async Call Stacks]\t\r\n\tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) Line 631\tC#\r\n \tCedaron.Interface.Engine.dll!Cedaron.Interface.Engine.Program.Main(string[] args) Line 300\tC#\r\n\r\nBackground task scheduler thread:\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n \tCedaron.Common.dll!Cedaron.Common.Portable.MultiWaiter.Win32WaitForAnyObject(nint[] waithandle, int tv_sec, int tv_msec)\tUnknown\r\n \tCedaron.Common.dll!Cedaron.Common.Portable.MultiWaiter.WaitForAnyRead(System.Collections.Generic.IList\u003cCedaron.Common.Either\u003cSystem.Net.Sockets.Socket, Cedaron.Common.Portable.IMultiWaitable\u003e\u003e waitfor, int tv_sec, int tv_msec)\tUnknown\r\n\tCedaron.Interface.Engine.dll!Cedaron.Interface.Engine.InterfaceEngine.BackgroundJobRunner()\r\n\r\nBackground keepalive thread:\r\n \tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n\tSystem.Private.CoreLib.dll!System.Threading.Thread.Sleep(int millisecondsTimeout) Line 367\tC#\r\n \tCedaron.Interface.FormBuilder.dll!Cedaron.Interface.FormBuilder.APIConfiguration.RefreshToken()\tUnknown\r\n\r\n.NET TP Gate:\r\n \tntdll.dll!00007ff9df400d24()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9d464c()\tWaitForSingleObject\r\n \t[Managed to Native Transition]\t\r\n\u003e\tSystem.Private.CoreLib.dll!System.Threading.WaitHandle.WaitOneNoCheck(int millisecondsTimeout) Line 128\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.PortableThreadPool.GateThread.GateThreadStart() Line 48\tC#\r\n\r\n.NET ThreadPool IO:\r\n \tntdll.dll!00007ff9df4030c4()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dcab2724()\tUnknown\r\n \t[Managed to Native Transition]\t\r\n\u003e\tSystem.Private.CoreLib.dll!System.Threading.PortableThreadPool.IOCompletionPoller.Poll() Line 188\tC#\r\n\r\n.NET Timer:\r\n \tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n\u003e\tSystem.Private.CoreLib.dll!System.Threading.WaitHandle.WaitOneNoCheck(int millisecondsTimeout) Line 128\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.TimerQueue.TimerThread() Line 87\tC#\r\n\r\nConnection Listener:\r\n \tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n \tCedaron.Common.dll!Cedaron.Common.Portable.MultiWaiter.Win32WaitForAnyObject(nint[] waithandle, int tv_sec, int tv_msec)\tUnknown\r\n \tCedaron.Common.dll!Cedaron.Common.Portable.MultiWaiter.WaitForAnyRead(System.Collections.Generic.IList\u003cCedaron.Common.Either\u003cSystem.Net.Sockets.Socket, Cedaron.Common.Portable.IMultiWaitable\u003e\u003e waitfor, int tv_sec, int tv_msec)\tUnknown\r\n \tCedaron.HL7.Client.dll!Cedaron.HL7.Client.SocketTransport.GetConnected(System.Action monitor, int monitorinterval)\tUnknown\r\n\u003e\tCedaron.Interface.Engine.dll!Cedaron.Interface.Receivers.TCP.Cedaron.Interface.Declarations.IInterfaceReceiver.ReceiveLoop()\r\n \tCedaron.Interface.Engine.dll!Cedaron.Interface.Engine.Interface.ReceiveLoop()\r\n\r\n.NET Finalizer:\r\n\u003e\tntdll.dll!00007ff9df400d24()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9d464c()\tWaitForSingleObject\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\nOnly Active Worker Thread:\r\n \tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n\u003e\tCedaron.Common.HL7.dll!Cedaron.Common.HL7.HL7Segment.HL7Decode(string data, int offset, int length, char msh1, string msh2, bool translateunknownesc) Line 391\tC#\r\n \tCedaron.Common.HL7.dll!Cedaron.Common.HL7.HL7Segment.HL7Segment(string msgdata, int offset, int length, char msh1, string msh2, bool translateunknownesc) Line 300\tC#\r\n \tCedaron.Common.HL7.dll!Cedaron.Common.HL7.HL7Message.HL7Message(byte[] message, int offset, int length, bool translateunknownesc) Line 523\tC#\r\n \tCedaron.Interface.FormBuilder.dll!Cedaron.Interface.FormBuilder.ADT.UpdateManualPromoteRecords()\r\n \tCedaron.Interface.FormBuilder.dll!Cedaron.Interface.FormBuilder.ADT.ProcessADT()\r\n \tCedaron.Interface.FormBuilder.dll!Cedaron.Interface.FormBuilder.ADT.Cedaron.Interface.Declarations.IMessageProcessor.ProcessMessage()\r\n \tCedaron.Interface.FormBuilder.dll!Cedaron.Interface.FormBuilder.DatabaseArchiver.Cedaron.Interface.Declarations.IMessageProcessor.ProcessMessage()\r\n \tCedaron.Interface.Engine.dll!Cedaron.Interface.Engine.Interface.ProcessMessage()\r\n \tCedaron.Interface.Engine.dll!Cedaron.Interface.Receivers.TCP.Cedaron.Interface.Declarations.IInterfaceReceiver.ReceiveLoop.AnonymousMethod__0(Cedaron.HL7.Client.HL7BlockingStream stream)\r\n \tCedaron.Interface.Engine.dll!Cedaron.Interface.Receivers.TCP.Cedaron.Interface.Declarations.IInterfaceReceiver.ReceiveLoop()\r\n \tCedaron.Interface.Engine.dll!Cedaron.Interface.Engine.Interface.ReceiveLoop()\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Debugger:\r\n\u003e\tntdll.dll!00007ff9df400d24()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9d464c()\tWaitForSingleObject\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Event Pipe:\r\n \t[Waiting on a lock, load symbols for ntdll.dll to show thread lock information]\t\r\n\u003e\tntdll.dll!00007ff9df403cc4()\tUnknown\r\n \tntdll.dll!00007ff9df379f09()\tUnknown\r\n \tntdll.dll!00007ff9df3774c2()\tUnknown\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET Server GC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET TP Worker:\r\n \tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n\u003e\tSystem.Private.CoreLib.dll!System.Threading.LowLevelLifoSemaphore.WaitForSignal(int timeoutMs) Line 140\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.LowLevelLifoSemaphore.Wait(int timeoutMs, bool spinWait) Line 65\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() Line 100\tC#\r\n\r\n.NET BGC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET BGC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET BGC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET BGC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET BGC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET BGC:\r\n\u003e\tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n.NET TP Worker:\r\n \tntdll.dll!00007ff9df400254()\tUnknown\r\n \tKERNELBASE.dll!00007ff9dc9ad71e()\tWaitForMultipleObjects\r\n \t[Managed to Native Transition]\t\r\n\u003e\tSystem.Private.CoreLib.dll!System.Threading.LowLevelLifoSemaphore.WaitForSignal(int timeoutMs) Line 140\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.LowLevelLifoSemaphore.Wait(int timeoutMs, bool spinWait) Line 65\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() Line 100\tC#\r\n \t[Native to Managed Transition]\t\r\n \tkernel32.dll!00007ff9dde74cb0()\tUnknown\r\n \tntdll.dll!00007ff9df3deceb()\tUnknown\r\n\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nNo controlled reproduction available. We currently get the issue about three times per two weeks.\r\n\r\n### Expected behavior\r\n\r\n`new StringBuilder()` does not hang forever.\r\n\r\n### Actual behavior\r\n\r\n`new StringBuilder()` calls WaitForMultipleObjects, which does not return\r\n\r\n### Regression?\r\n\r\nYes; Issue is less than three months old. \r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET Runtime 8.0.7 via dotnet publish -r win-x64\r\nOS: Windows Server Core; probably 2022\r\n\r\n\r\n### Other information\r\n\r\nWe have a full memory dump but can\u0027t release it publicly. This is a production instance and PHI is on the stack.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqJ3ORQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6G0RXG",
                                           "createdAt":  "2024-08-01T02:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Is this with regular CoreCLR with a JIT or with native AOT? `RhpNewArray` is a native AOT specific method, but the stacktraces you have shared look like regular CoreCLR with a JIT.\r\n",
                                           "updatedAt":  "2024-08-01T02:47:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G0YDI",
                                           "createdAt":  "2024-08-01T03:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jkotas : I\u0027m sorry I don\u0027t understand the difference. When I did a code search for CORINFO_HELP_NEWARR_1_VC ; it seems to be mapped to RhpNewArray by RyuJIT. The environment is whatever `dotnet publish -r win-x64` spits out.",
                                           "updatedAt":  "2024-08-01T03:12:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G0aSN",
                                           "createdAt":  "2024-08-01T03:22:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @VSadov ",
                                           "updatedAt":  "2024-08-01T03:22:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G0aSf",
                                           "createdAt":  "2024-08-01T03:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-01T03:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G0zww",
                                           "createdAt":  "2024-08-01T04:26:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @jhudsoncedaron, you mention that this started occurring recently, so do you observe that this is a regression in 8.0.7? ",
                                           "updatedAt":  "2024-08-01T04:26:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G5Z7t",
                                           "createdAt":  "2024-08-01T14:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : Barring exotic hypotheses, yes; however we jumped straight from 8.0.5 to 8.0.7 and are not sure of the exact start date of the problem. Support was slow to report the issue to engineering. In addition, we just turned on gcDynamic a couple of months ago.\r\n\r\nHowever exotic hypotheses are on the table; the data being processed as seen in the dump is trying to allocate about 5,000 StringBuilder objects in 50ms.",
                                           "updatedAt":  "2024-08-01T14:21:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G8tq3",
                                           "createdAt":  "2024-08-01T21:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @jhudsoncedaron, are you able to privately share a dump to investigate further? ",
                                           "updatedAt":  "2024-08-01T21:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G8vif",
                                           "createdAt":  "2024-08-01T21:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : I will ask the guy capable of approving immediately. If that doesn\u0027t work, there\u0027s other ways of getting necessary information from a dump.",
                                           "updatedAt":  "2024-08-01T21:49:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G8wc7",
                                           "createdAt":  "2024-08-01T21:51:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : Dump upload is not happening. So it comes down to tell me what to look for and I can look for it.",
                                           "updatedAt":  "2024-08-01T21:51:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G9b8T",
                                           "createdAt":  "2024-08-02T00:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "So I feel the need to explain a few things.\r\n\r\nWe are not sitting idle on this. At once other things are happening.\r\n1) We are trying to switch that one instance to workstation GC to see if it clears it (this will hit production first).\r\n2) We are optimizing the allocation-hot loop (in fact the very one with the blocked thread) to allocate less stuff. This should make it happen less often.\r\n3) We looked at the wait handle code; and found a very unlikey pathway that could corrupt wait handle references. This requires two billion exceptions to be thrown from the same finally block where the only possible exception is OutOfMemoryException allocating a List enumerator. On triggering the fault it would overflow the reference counter inside SafeWaitHandle; but I don\u0027t see how it could cause this particular fault. (Fix: replace that particular foreach loop with a counted loop).\r\n4) We are trying to find a way to reproduce this in a dev environment. It\u0027s not looking promising.\r\n5) The dump contains Medical Records data. There\u0027s no way any production dump is getting uploaded anywhere until all other options are exhausted. I am reasonably certain a paid support case will happen first.\r\n",
                                           "updatedAt":  "2024-08-02T00:11:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G9yEy",
                                           "createdAt":  "2024-08-02T01:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Could you please load the dump into windbg debugger and the stacktraces of all threads from windbg? The stacktraces above seems to be from Visual Studio and they are missing low-level details that we need to diagnose this.\r\n\r\nAlso, could you please run `!threads` command in windbg and share its output?",
                                           "updatedAt":  "2024-08-02T01:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HCR9s",
                                           "createdAt":  "2024-08-02T14:28:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Output of !threads and ~e!dumpstacks\r\n\r\nUnfortunately !stacks is broken. What\u0027s it mean \"PsActiveProcessHead!\"?\r\n\r\n[stacks-lightredacted.txt](https://github.com/user-attachments/files/16471665/stacks-lightredacted.txt)\r\n",
                                           "updatedAt":  "2024-08-02T14:28:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HEafe",
                                           "createdAt":  "2024-08-02T20:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Could you please share the output of `~*k` and `!sos.threads`? \r\n\r\n`~*k` has more precise stacktraces. `dumpstack` prints approximate stacktraces and it is hard to tell what\u0027s exactly going on from those.\r\n\r\n`!sos.threads` is explicitly invoking threads command from [sos debugger extension](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/sos-debugging-extension). The `!threads` output that you have shared is from built-in windbg `!threads` command. It is missing .NET runtime specific information. If the sos extension is not present in your windbg, it probably means that your windbg is too old. Try installing latest windbg from https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools . ",
                                           "updatedAt":  "2024-08-02T20:16:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HExM1",
                                           "createdAt":  "2024-08-02T21:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jkotas : You\u0027re in luck, both windbg and sos.dll were downloaded and installed anew (for the first time on this SSD) today. Here\u0027s the output of your additional commands. I didn\u0027t find anything worth redacting this time around.\r\n\r\n[stacks2-full.txt](https://github.com/user-attachments/files/16475545/stacks2-full.txt)\r\n",
                                           "updatedAt":  "2024-08-02T21:37:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HFZi5",
                                           "createdAt":  "2024-08-03T02:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e [stacks2-full.txt](https://github.com/user-attachments/files/16475545/stacks2-full.txt)\r\n\r\nThis shows that all threads are waiting for GC to finish, but there does not seem to be any thread making progress to finish the GC.\r\n\r\nOne possible explanation of this situation is use-after-free bug with Win32 HANDLEs somewhere else in the program. If some other part of the program inadvertently  waited on the HANDLE used by the GC, it can explain why the GC gets stuck like this.\r\n\r\nIt may be useful to find the thread that\u0027s holding the ThreadStore lock that the `.NET EventPipe` thread is trying to acquire. It may give us some clues. Could you please find the `OwningThread` from the CRTICAL_SECTION argument passed in into RtlEnterCriticalSection?\r\n```\r\n   1  Id: 1568.1be8 Suspend: 0 Teb: 000000cf`a93fd000 Unfrozen \".NET EventPipe\"\r\n # Child-SP          RetAddr               Call Site\r\n00 000000cf`a987f558 00007ff9`df379f09     ntdll!NtWaitForAlertByThreadId+0x14\r\n01 000000cf`a987f560 00007ff9`df3774c2     ntdll!RtlpEnterCriticalSectionContended+0x339\r\n02 000000cf`a987f680 00007ff9`d52f8c6a     ntdll!RtlEnterCriticalSection+0x42\r\n03 000000cf`a987f6b0 00007ff9`d5364498     coreclr!CrstBase::Enter+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] \r\n04 (Inline Function) --------`--------     coreclr!ThreadStore::Enter+0x10 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 5179] \r\n05 000000cf`a987f6e0 00007ff9`d5368e0b     coreclr!ThreadSuspend::LockThreadStore+0x90 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 1894] \r\n06 (Inline Function) --------`--------     coreclr!ThreadStore::LockThreadStore+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 5201] \r\n07 (Inline Function) --------`--------     coreclr!StateHolder\u003c\u0026ThreadStore::LockThreadStore,\u0026ThreadStore::UnlockThreadStore\u003e::Acquire+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\inc\\holder.h @ 354] \r\n08 (Inline Function) --------`--------     coreclr!StateHolder\u003c\u0026ThreadStore::LockThreadStore,\u0026ThreadStore::UnlockThreadStore\u003e::{ctor}+0x5 [D:\\a\\_work\\1\\s\\src\\coreclr\\inc\\holder.h @ 340] \r\n09 000000cf`a987f710 00007ff9`d5368631     coreclr!ThreadStore::AddThread+0x1f [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 5227] \r\n0a 000000cf`a987f740 00007ff9`d5658c20     coreclr!SetupUnstartedThread+0x59 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 879] \r\n0b 000000cf`a987f770 00007ff9`d565b411     coreclr!ep_rt_thread_create+0x100 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eventing\\eventpipe\\ep-rt-coreclr.h @ 855] \r\n0c 000000cf`a987f830 00007ff9`d5655030     coreclr!sample_profiler_enable+0x45 [D:\\a\\_work\\1\\s\\src\\native\\eventpipe\\ep-sample-profiler.c @ 204] \r\n```\r\n",
                                           "updatedAt":  "2024-08-03T02:37:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HQdwo",
                                           "createdAt":  "2024-08-05T14:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "0:001\u003e !locks\r\n\r\nCritSec +36c3c6f0 at 000002be36c3c6f0\r\nWaiterWoken        No\r\nLockCount          1\r\nRecursionCount     1\r\nOwningThread       1bf0\r\nEntryCount         0\r\nContentionCount    42\r\n*** Locked\r\n\r\nScanned 48 critical sections\r\n\r\nOh good there\u0027s exactly one held critical section; must be this one. OwningThread is 1bf0 which is a .NET Server GC thread.\r\n\r\nConfirmed: 1be8 coreclr!CrstBase::Enter this-\u003emCriticalSection:\r\n```\r\nLockCount -6\r\nRecursionCount 1\r\nOwningThread 0x1bf0\r\nLockSemaphore 0xffffffffffffffff\r\nSpinCount 0x200007cf\r\n```\r\n\r\nI think the event pipe is a red herring. We don\u0027t use it. This thread appears to be from when we tried to run dotnet-stacks on the already deadlocked process.\r\n\r\n\u003e This shows that all threads are waiting for GC to finish, but there does not seem to be any thread making progress to finish the GC.\r\n\r\nWhich was my original analysis of the stacks from Visual Studio.\r\n\r\n\u003e One possible explanation of this situation is use-after-free bug with Win32 HANDLEs somewhere else in the program.\r\n\r\nThat particular explanation would require the HANDLE that was used after it was freed to have been allocated before the GC\u0027s event HANDLE. I am having a hard time believing this as I would expect the GC to eagerly allocate its own resources at process startup.\r\n\r\nCorrect me if I\u0027m wrong but I think this is testable hypothesis. If there\u0027s an early handle in managed code that is being used after it\u0027s freed, while being allocated before the GC runs the first time, I should be able to move the problem to a different handle by putting the following at the top of main: `GC.Collect(); GC.WaitForPendingFinalizers();`.\r\n\r\n",
                                           "updatedAt":  "2024-08-05T14:48:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HR1f2",
                                           "createdAt":  "2024-08-05T17:52:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-05T17:52:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HR3iJ",
                                           "createdAt":  "2024-08-05T17:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I have noticed that [stacks2-full.txt](https://github.com/user-attachments/files/16475545/stacks2-full.txt) shows 8x `.NET Server GC` threads, but only 6x `.NET BGC` threads. Did we lose or fail to create two .NET BGC threads?\r\n\r\nThis looks like GC threading issue. cc @dotnet/gc ",
                                           "updatedAt":  "2024-08-05T17:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HR5Zi",
                                           "createdAt":  "2024-08-05T18:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@jhudsoncedaron You can test whether the problem is related to background GC (BGC) by trying to disable it: https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#background-gc",
                                           "updatedAt":  "2024-08-05T18:03:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HSJ-B",
                                           "createdAt":  "2024-08-05T18:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jkotas : Yes I noticed that too. Since the number was even I didn\u0027t think much of it.",
                                           "updatedAt":  "2024-08-05T18:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTCzZ",
                                           "createdAt":  "2024-08-05T21:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Current status of the running code has been set to:\r\nServer GC ON\r\nDATAS ON\r\nBackground GC OFF (confirmed by dump)\r\n\r\nNow we wait, I guess. If it doesn\u0027t recur it was likely a fault in background GC.",
                                           "updatedAt":  "2024-08-05T21:04:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTg5_",
                                           "createdAt":  "2024-08-05T22:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "SVR threads are created during initialization, but BGC threads are created on demand and DATAS is on, so the 6 vs 8 could be normal behavior.  However, the BGC join object is created during initialization.  Disabling DATAS (but leaving BGC enabled) would provide another interesting data point on this.  Also [GC traces](https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#how-to-collect-top-level-gc-metrics) will probably be useful in determining context for any possible GC issues here.",
                                           "updatedAt":  "2024-08-05T22:40:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTi84",
                                           "createdAt":  "2024-08-05T22:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "DATAS - DOTNET_GCDynamicAdaptationMode or System.GC.DynamicAdaptationMode",
                                           "updatedAt":  "2024-08-05T22:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HtEj3",
                                           "createdAt":  "2024-08-08T21:59:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@jhudsoncedaron, did the issue not reproduce without BGC? Also since this is 8, assume you have explicitly enabled DATAS?  ",
                                           "updatedAt":  "2024-08-08T21:59:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HtW0L",
                                           "createdAt":  "2024-08-08T22:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : Correct, DATAS is enabled explicitly.\r\n\r\nI have not had a report that it reproduced again after setting BGC off; however not enough time has elapsed to be sure. Note that business day assumption is not valid; so we do not yet have 50% confidence.\r\n\r\nThe way the math works out, we need two more weeks for 99% confidence (assuming normal distribution), which is an amazing coincidence because I will be on vacation the next two weeks. Operations is monitoring the situation; however it is likely this thread will not be updated until I return.\r\n\r\nA mitigation is scheduled to be installed Tuesday Evening 8/6. This mitigation reduces the number of allocations required in the allocation-hot loop (the stack that locked up allocating a StringBuilder) by removing the \"small substrings are cheap\" assumption. The number of allocations was reduced by almost two-thirds.",
                                           "updatedAt":  "2024-08-08T22:55:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HtpEF",
                                           "createdAt":  "2024-08-08T23:43:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Perhaps also trying with DATAS off but BGC on would be helpful. We have made quite a few changes to DATAS in 9, but wondering if it has shown reasonable improvements for your app since you have enabled it in 8. ",
                                           "updatedAt":  "2024-08-08T23:43:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Htp3l",
                                           "createdAt":  "2024-08-08T23:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : That\u0027s next on the list to try; however this entails switching back to workstation GC. Trying to enable server GC without DATAS will invariably lock up the server. The only way this server works is with the ability to shuffle memory between running processes on demand.",
                                           "updatedAt":  "2024-08-08T23:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jvm6J",
                                           "createdAt":  "2024-08-26T19:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Status Update: No more incidents occurred after turning off background GC.",
                                           "updatedAt":  "2024-08-26T19:48:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jv0GF",
                                           "createdAt":  "2024-08-26T20:19:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "so just to confirm its with DATAS enabled but BGC disabled? ",
                                           "updatedAt":  "2024-08-26T20:19:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jv0h9",
                                           "createdAt":  "2024-08-26T20:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : Correct; Current status is DATAS enabled, BGC disabled, no more deadlocks.",
                                           "updatedAt":  "2024-08-26T20:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6J6X9O",
                                           "createdAt":  "2024-08-28T00:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "@jhudsoncedaron and I got in contact via email and will go from there.",
                                           "updatedAt":  "2024-08-28T00:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KNvJS",
                                           "createdAt":  "2024-08-29T20:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "I did some debugging with @jhudsoncedaron yesterday (thanks so much for agreeing to do the debugging session!) and GC did try to create 7 BGC threads but one of the BGC threads is simply not there yet we do have a Thread object for it, and the thread creation call returned success. so I\u0027m still looking at that part. this caused the deadlock since we are supposed to have 7 threads joining but only got 6. ",
                                           "updatedAt":  "2024-08-29T20:07:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LabdP",
                                           "createdAt":  "2024-09-09T19:55:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@jhudsoncedaron \r\n\r\nThe instrumented binary is ready and can be accessed at https://github.com/Maoni0/clrgc/tree/main/issues/105780. Detailed instructions on how to use it can be found at https://github.com/Maoni0/clrgc/blob/main/README.md.\r\n\r\nPlease let me know if you need any further assistance or information regarding this.\r\n\r\n",
                                           "updatedAt":  "2024-09-09T19:55:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SJ7X6",
                                           "createdAt":  "2024-11-01T15:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "A little update. I don\u0027t want to say too much right now at the risk of getting it wrong; however Maoni0 has found a bad interaction between DATAS and Background GC in the code.",
                                           "updatedAt":  "2024-11-01T15:30:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ok8zW",
                                           "createdAt":  "2025-04-24T16:48:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "The situation is not good.\n\nWe are trying to come up with a plan to upgrade to .NET 9 and migrate to Linux. While we have received a Windows DLL with a fixed GC; we\u0027re not certain if we can distribute it and we have no Linux equivalent.\n\nAnother thread says \"Does this deadlock happen on startup? Fix for https://github.com/dotnet/runtime/issues/105780 should be included in the latest .NET 9 servicing release\" however it was not.\n\nA recommendation from another thread was set high memory threshold to 1% (the lowest possible value). This cannot and does not function. The failure mode exhibited is after the first time the GC observes it can\u0027t reduce memory below the threshold it gives up on the idea and doesn\u0027t do a very good job of scheduling. I have attached a demonstration program that can have its GC settings tuned to exhibit the various GC behaviors under different settings and watch things fail.\n\n[gcsettings.zip](https://github.com/user-attachments/files/19895934/gcsettings.zip)",
                                           "updatedAt":  "2025-04-24T16:48:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6olRr2",
                                           "createdAt":  "2025-04-24T17:25:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e  and we have no Linux equivalent.\n\u003e \n\nI can build a Linux equivalent, if that solves the immediate issue right away.",
                                           "updatedAt":  "2025-04-24T17:25:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6olUqL",
                                           "createdAt":  "2025-04-24T17:31:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hey @jhudsoncedaron, can you please clarify your comment here: \n\n\u003e Fix for https://github.com/dotnet/runtime/issues/105780 should be included in the latest .NET 9 servicing release\" however it was not.\n\nThere have been a couple of deadlock fixes made to 9.0:\nhttps://github.com/dotnet/runtime/pull/108774\nhttps://github.com/dotnet/runtime/pull/110174\n\nDid the latest .NET 9 servicing release not fix the issues for you? ",
                                           "updatedAt":  "2025-04-24T17:31:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6olWRP",
                                           "createdAt":  "2025-04-24T17:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : I saw #110174 get reverted due to breaking WinForms (which is also why this item is still open). That is the actual fix.\n\n@cshung : Well, if you don\u0027t mind us shipping it that would work. It represents its own minor headache for us but it\u0027s better than can\u0027t upgrade to .NET 9 anytime soon and can\u0027t .NET 10 when it comes out.\n\nMy particular opinion: Don\u0027t enable DATAS on a WinForms project is a perfectly reasonable restriction. A WinForms project that wants server GC is a wild case.\n\n\u003e Did the latest .NET 9 servicing release not fix the issues for you?\n\nAfter watching the first attempt get reverted; we started watching the release notes for every .NET 9 release to see if the fix would finally appear before attempting an upgrade. And it never appeared in the release notes. So I went through the list of all fixes (which links to a set of github issue queries) and didn\u0027t find there either. So, we\u0027re on .NET 8. We would be on .NET 9 as soon as we can get positive confirmation the fix is in .NET 9. Since the issue search failed us; I would accept source code inspection of the latest .NET 9 tag.",
                                           "updatedAt":  "2025-04-24T17:52:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6olsuG",
                                           "createdAt":  "2025-04-24T17:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "No the one which got reverted was this issue: https://github.com/dotnet/runtime/pull/110589. Note that this one only affects Windows so shouldnt affect Linux. https://github.com/dotnet/runtime/pull/110174 has not been reverted and should be included in latest servicing release. Have you tried it out? ",
                                           "updatedAt":  "2025-04-24T17:57:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oluj2",
                                           "createdAt":  "2025-04-24T18:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@mangod9 : We have not. We weren\u0027t going to push .NET 9 into production and onto servers outside of our reach resulting in DATAS on by default thinking the bug was still there so it crashes beyond our reach to fix immediately.\n\nSo I will pass up the chain there were two GC fixes and the one that got reverted wasn\u0027t the one we were waiting for.",
                                           "updatedAt":  "2025-04-24T18:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6om4Fv",
                                           "createdAt":  "2025-04-24T20:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "So that was that; .NET 9 upgrade will most likely happen soon.\n\nThe only reason I can come up with to leave this item open is if somebody else needs the Linux or Mac fixed GC library for .NET 8.",
                                           "updatedAt":  "2025-04-24T20:20:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6onc5F",
                                           "createdAt":  "2025-04-24T21:35:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e The only reason I can come up with to leave this item open is if somebody else needs the Linux or Mac fixed GC library for .NET 8.\n\nJust in case this is needed, the repo has documentation on how to build [here](https://github.com/dotnet/runtime/tree/main/docs/workflow/building/coreclr), we can always cherry-pick whatever change we need and make a build out of it. \n\nFor the `clrgc` library in particular, it is built with compatibility in mind. You can install the latest .NET preview, copy and the library and apply it on earlier .NET version, and it *should* work. The only caveat is that this usage is not regularly tested.",
                                           "updatedAt":  "2025-04-24T21:35:45Z"
                                       }
                                   ],
                         "totalCount":  42
                     },
        "title":  "Deadlock in GC",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106712",
        "createdAt":  "2024-08-20T17:01:02Z",
        "number":  106712,
        "author":  "AndreyAkinshin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T17:43:38Z",
        "body":  "### Description\n\n![image](https://github.com/user-attachments/assets/725c8f8e-afb4-47ec-997e-04a4032369f6)\r\n\n\n### Reproduction Steps\n\nNo stable repro, but it happens from time to time in one of my applications.\n\n### Expected behavior\n\n`GC.GetTotalMemory` should always return only non-negative values\n\n### Actual behavior\n\n`GC.GetTotalMemory` occasionally returns negative values\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows 11 x64, .NET SDK 8.0.204, `net8.0`\n\n### Other information\n\nIf anyone can advise on how to diagnose/debug this issue, I can collect additional information when it happens next time.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvLVhWg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JDbYp",
                                           "createdAt":  "2024-08-20T17:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-20T17:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zj0bP",
                                           "createdAt":  "2025-06-27T10:26:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "firerain-fd",
                                           "body":  "I have the same problem.",
                                           "updatedAt":  "2025-06-27T10:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc632DaE",
                                           "createdAt":  "2025-07-17T14:57:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Is this while using NativeAOT or regular execution mode?",
                                           "updatedAt":  "2025-07-17T14:57:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc633FVh",
                                           "createdAt":  "2025-07-17T16:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "I audited the code and the internal GC total memory calculations are done per-heap using size_t instead of ssize_t/int64, so it makes sense that if we somehow got a very large calculated size, it would be negative. Getting a size that big should be impossible though, so that indicates some sort of rare bug in the underlying calculations. I couldn\u0027t spot any obvious cause, so it would be great if someone could offer more details on the reproduction scenario, even if you can\u0027t share an application with us.\n\ni.e.:\n* How big are your heaps when this isn\u0027t failing?\n* Is your application heavily multithreaded?\n* Is your application under load when you call this?",
                                           "updatedAt":  "2025-07-17T16:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64jB9G",
                                           "createdAt":  "2025-07-21T10:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyAkinshin",
                                           "body":  "In my case, this problem occurs in a small terminal app based on [Terminal.Gui](https://github.com/gui-cs/Terminal.Gui). Its typical memory footprint is about 1-2 MB. The app has several threads: Terminal.Gui threads + some background tasks in the user code for handling long-running operations, but it does not involve heavy multithreading. The app performs very basic tasks with a small number of allocations.",
                                           "updatedAt":  "2025-07-21T10:52:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64pqrN",
                                           "createdAt":  "2025-07-21T18:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Test case I constructed fails instantly on NET9.\n```csharp\nusing System.Threading;\nusing System.Collections.Generic;\n\nbool Running = true;\n\n// See https://aka.ms/new-console-template for more information\nConsole.WriteLine(\"Running...\");\n\nvar threads = new List\u003cThread\u003e();\nfor (int i = 0; i \u003c 8; i++) {\n    var thread = new Thread(ThreadMain);\n    thread.Start();\n    threads.Add(thread);\n}\n\nwhile (true) {\n    var tm = GC.GetTotalMemory(false);\n    if (tm \u003c 0)\n        throw new Exception($\"Got total memory of {tm}\");\n    Thread.Yield();\n}\n\nvoid ThreadMain () {\n    while (Running) {\n        var s = \"x\";\n        for (int i = 0; i \u003c 1024; i++)\n            s += i.ToString();\n        Thread.Yield();\n    }\n}\n```\n\n\u003cimg width=\"1288\" height=\"272\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/89ed2ba3-4fe4-4a1e-8652-43f8de809c21\" /\u003e",
                                           "updatedAt":  "2025-07-21T18:26:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64pulh",
                                           "createdAt":  "2025-07-21T18:32:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Stepping through one iteration at a time shows that it fails after only a couple dozen steps. It looks like the result going negative might correlate with a GC, but Diagnostic Tools doesn\u0027t show a marker for the GC.\n\nI tried calling GetGCMemoryInfo before each iteration and it appears multiple GCs have happened so this might be some sort of race condition with the GC.\n\u003cimg width=\"1006\" height=\"452\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dc220e9d-2ec1-4da7-bb1c-fb0179b13c48\" /\u003e\n\nEDIT: Further testing shows that this regressed sometime between NET6.0 and NET7.0. It is very hard to repro on 6 (it does repro *eventually*) but very easy in 7, 8 and 9.",
                                           "updatedAt":  "2025-07-21T18:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65AeQa",
                                           "createdAt":  "2025-07-22T17:06:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Calling GetTotalMemory again will return a negative value even if you sleep first, so what\u0027s happening is that the GC heap is getting into a bad state of some sort. However, if you keep allocating eventually the GC heap will \"recover\" and become positive again. For example if you leave the threads going:\n\n```\nGot total memory of -3665464\nGot total memory of 6809168\nGot total memory of 1422672 after sleeping 10ms\nGot total memory of 486960 after GetTotalMemory(true)\n```\n\nHowever if you change the repro test to be single threaded:\n```\nRunning...\nGot total memory of -525416\nGot total memory of -517192\nGot total memory of -517192 after sleeping 10ms\nGot total memory of 421176 after GetTotalMemory(true)\n```\nYou can see that the forced GC from `GetTotalMemory(true)` corrected the state of the heap. Between the two GetTotalMemory calls the negative value moved towards zero slightly, probably from some sort of allocation that happened during the writeline call.\n\nHere is the single threaded repro. It takes longer to reproduce but does work:\n```csharp\nusing System.Threading;\nusing System.Collections.Generic;\n\nConsole.WriteLine(\"Running...\");\n\nwhile (true) {\n    var s = \"x\";\n    for (int i = 0; i \u003c 1024; i++)\n        s += i.ToString();\n    Thread.Yield();\n\n    var tm = GC.GetTotalMemory(false);\n    if (tm \u003c 0) {\n        Console.WriteLine($\"Got total memory of {tm}\");\n        tm = GC.GetTotalMemory(false);\n        Console.WriteLine($\"Got total memory of {tm}\");\n        tm = GC.GetTotalMemory(true);\n        Console.WriteLine($\"Got total memory of {tm} after GetTotalMemory(true)\");\n        return;\n    }\n}\n```",
                                           "updatedAt":  "2025-07-22T17:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65CDjW",
                                           "createdAt":  "2025-07-22T18:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "This does not reproduce using a debug or release mode build of corerun from latest main. If any of the reporters can test using one of the .NET 10 preview builds and see if it reproduces for you, I\u0027d really appreciate it! It may be fixed already.\n\nEDIT: I was mistaken. The multithreaded repro does fail on net10, only the single-threaded one is fixed.",
                                           "updatedAt":  "2025-07-22T18:51:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68tWFa",
                                           "createdAt":  "2025-08-07T22:14:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Thank you, @kg for the repro and thanks @AndreyAkinshin for reporting this. \n\nHere is what I have found:\n\n`GCHeap::ApproxTotalBytesInUse` is where the total memory is computed and the reason why we are observing negative total size is because the gen0 fragmentation size is much higher than the gen0 size; for gen0, the total size is estimated as gen0 size - the fragmentation on gen0 to remove the bytes not in use (https://github.com/dotnet/runtime/blob/d104e3e236dcd069ba56fffe2a10ba9d6cc647c9/src/coreclr/gc/gc.cpp#L51800)\n\nThe printed lines from one such run from the multithreaded repro above before the failure is:\n```\n------------------------------------------------------------------------\nGen0: TOTAL SIZE: -3643568, gen0_size: 31328, gen0_frag: 3674896, generation_free_list_space: 2245152, generation_free_obj_space: 481752\nGEN 1: gen_result: 997504, gen_size: 1003072, gen_frag: 5568, generation_free_list_space: 0, generation_free_obj_space: 5568\nGEN 2: gen_result: 284536, gen_size: 284536, gen_frag: 0, generation_free_list_space: 0, generation_free_obj_space: 0\nUOH GEN 3: uoh_gen_result: 0, uoh_gen_size: 0, uoh_gen_frag: 0, generation_free_list_space: 0, generation_free_obj_space: 0\nUOH GEN 4: uoh_gen_result: 8184, uoh_gen_size: 8184, uoh_gen_frag: 0, generation_free_list_space: 0, generation_free_obj_space: 0\nTotal Size: -2353344\n------------------------------------------------------------------------\n```\n\nLooks like this code was introduced around the time we enabled regions: https://github.com/dotnet/runtime/pull/59283/files CC: @mangod9 -- the real question is why the gen0 fragmentation is that high; in this computation it\u0027s based on the sum of the free list space and free object space - both of which are substantially higher than the gen0 size. This is a regions specific issue btw - running this with segments is fine.\n\nPublished a branch with these printfs: https://github.com/mrsharm/runtime/tree/musharm/Gen0FragPrint",
                                           "updatedAt":  "2025-08-07T22:19:23Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "GC.GetTotalMemory occasionaly returns negative values",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108144",
        "createdAt":  "2024-09-23T13:57:47Z",
        "number":  108144,
        "author":  "FlorianRoudautOrchestrade",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-21T05:38:18Z",
        "body":  "### Description\n\nOne of our Winforms applications, with workstation gc, randomly freezes. The application is running on laptops and doing multithreaded (around 24 or 32 threads) calculations that involves a high memory allocation and deallocation.  \r\n\r\nFreezes could happens 2 or 3 times a day. The desktop application is running almost 24/7 on the user machine. Ona a usual cycle, we can see with DotMemory that around 35% of the time is spent in GC.\r\n\r\nDuring the freeze we see in the Task Manager that the application is taking around 5GB, while total used is around 40GBand the machine has 64GB available. The Task Manager also shows CPU activity (around 4% on a machine with 24 virtual CPUs).\r\n\r\nWe have taken dumps and used various tools. Every tool indicates that the process is stuck in a GC cycle. We can analyze the dump using dotnet-dump and the output of clrstack -all is in the file attached.\r\n\r\n\r\n\r\n\r\n[clrstack.txt](https://github.com/user-attachments/files/17098643/clrstack.txt)\r\n\n\n### Reproduction Steps\n\nNo controlled reproduction available. \n\n### Expected behavior\n\nWe expect the Garbage colletion to continue and not freeze the application.\n\n### Actual behavior\n\nThe application is unresponsive\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nWe are decreasing the number of threads launched. With 8 threads, the freeze happens much less often.\n\n### Configuration\n\n.NET Runtime 8.0.8\r\nWindows 11\r\nx64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlGxBkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NKjIx",
                                           "createdAt":  "2024-09-23T13:58:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-23T13:58:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NLfXi",
                                           "createdAt":  "2024-09-23T15:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @FlorianRoudautOrchestrade, can you please indicate which thread you feel is causing the deadlock? I dont see any indication in the stacks attached. Also is the Freeze transient or once you hit it it never unfreezes? ",
                                           "updatedAt":  "2024-09-23T15:12:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NMMUd",
                                           "createdAt":  "2024-09-23T16:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "Hello,\r\n\r\nWe have seen no clue indicating a deadlock. Most of the threads are shown as \"Active\" when opening the dump in visual studio. It\u0027s just that they are all waiting for GC. When we take other dumps, a bit later ( could be 10 seconds or 10 minutes later), all the threads are in the exact same stack trace.\r\n\r\nThe freeze is not stopping, we\u0027ve left the application running for hours and did not unfreeze",
                                           "updatedAt":  "2024-09-23T16:26:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NQVge",
                                           "createdAt":  "2024-09-24T00:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "Can you please elaborate on \"Every tool indicates that the process is stuck in a GC cycle\"?  Are you seeing a single GC spin effectively forever, or are there repeated GCs occurring?  To get more insight into the GC behavior, a gc collect only trace would be very helpful; please see https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md#how-to-collect-top-level-gc-metrics.",
                                           "updatedAt":  "2024-09-24T00:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NTaR0",
                                           "createdAt":  "2024-09-24T08:56:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "To reply to the second question : \" Are you seeing a single GC spin effectively forever, or are there repeated GCs occurring \".\r\nWe have reduced the number of threads used by the process this week end (from 32 to 8). Since then we do not have freezes anymore and we are not capable of reproducing on our machines. My point being, that I cannot use perfview to collect more information now. The only thing we can see if from the dumps of previous freezes, and when doing mutliple dumps of the same freezing process across multiple point in times, the threads are in the exact same position. \r\n\r\nTo reply \"Every tool indicates that the process is stuck in a GC cycle\" , I\u0027ve attached the debug diag analysis\r\n[dump_20240913_171719_CrashHangAnalysis.pdf](https://github.com/user-attachments/files/17111367/dump_20240913_171719_CrashHangAnalysis.pdf)\r\n\r\nWe can see numerous threads in : \r\n\r\nntdll!NtWaitForSingleObject+14\r\nKERNELBASE!WaitForSingleObjectEx+8e\r\ncoreclr!CLREventWaitHelper+20 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397 + 6]\r\ncoreclr!WKS::GCHeap::WaitUntilGCComplete+2e [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gcee.cpp @ 287 + 18]\r\ncoreclr!Thread::RareDisablePreemptiveGC+1c5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2172]\r\n\r\nor \r\n\r\nntdll!NtWaitForSingleObject+14\r\nKERNELBASE!WaitForSingleObjectEx+8e\r\ncoreclr!CLREventWaitHelper+20 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397 + 6]\r\nD:\\a\\_\r\ncoreclr!WKS::GCHeap::WaitUntilGCComplete+2e [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gcee.cpp @ 287 + 18]\r\nD:\\a\\_\r\ncoreclr!Thread::RareDisablePreemptiveGC+1c5 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 2172]\r\nD:\\a\\_\r\ncoreclr!Thread::UserSleep+10a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads.cpp @ 4294 + 4d]\r\nD:\\a\\_\r\ncoreclr!ThreadNative::Sleep+9b [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\comsynchronizable.cpp @ 469 + 24]\r\nD:\\a\\_\r\nSystem.Threading.Thread.Sleep(Int32)+15\r\nOrchestradeCommon.MarketData.Streaming.\r\n\r\nor\r\n\r\nntdll!NtWaitForSingleObject+14\r\nKERNELBASE!WaitForSingleObjectEx+8e\r\ncoreclr!CLREventWaitHelper+20 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\synch.cpp @ 397 + 6]\r\ncoreclr!WKS::gc_heap::wait_for_gc_done+45 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 13072 + 15]\r\n9/13/24, 12:50 PM dump_20240913_171719_CrashHangAnalysis.mht\r\nfile:///C:/Users/andy.farlie/OneDrive - Orchestrade Financial Systems/Documents/DebugDiag/Reports/dump_20240913_171719_CrashHangAnalysi… 19/44\r\ncoreclr!WKS::gc_heap::try_allocate_more_space+5b4b1 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 16882]\r\ncoreclr!WKS::gc_heap::allocate_more_space+31 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 17450 + 11]\r\ncoreclr!WKS::GCHeap::Alloc+84 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 43681 + 17]\r\ncoreclr!JIT_New+318 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\jithelpers.cpp @ 2324 + 237\r\n\r\nEach time, there is a function in the stack mentionning waiting for GC to be completed",
                                           "updatedAt":  "2024-09-24T08:56:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NYeDn",
                                           "createdAt":  "2024-09-24T18:24:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "I don\u0027t see any thread actually performing GC, so this seems to be in thread suspension for GC or something interfering with that.  One idea could be to look at the threads that are not waiting for GC to see if there is anything in the app.  I suspect that for us to find anything more, we would need to look at the dumps if that is possible - if so, could you please share some from a few different freezes via https://developercommunity.visualstudio.com/dotnet?  This would let us look for more details, and seeing more than one might expose things in common between them.",
                                           "updatedAt":  "2024-09-24T18:24:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NanV3",
                                           "createdAt":  "2024-09-24T23:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "the recommendation from DebugDiag just says \r\n\r\n\u003e When a GC is running the .NET objects are not in a valid state and the reported analysis may be inaccurate. Also,\r\nthe thread that triggered the Garbage collection may or may not be a problematic thread. Too many garbage\r\ncollections in a process are bad for the performance of the application. Too many GC\u0027s in a process may indicate a\r\nmemory pressure or symptoms of fragmenation.\r\n\r\nthis is not saying \"this process is stuck in a GC cycle\". it just says too many GCs are bad for perf in _a_ process.\r\n\r\nit\u0027s very understandable you\u0027d see threads waiting for GC to complete because a GC probably did just happen - you have 65 threads, most of which are managed threads, and one GC heap since you are using Workstation GC. so you probably were triggering lots of GCs (but DebugDiag does not have this knowledge because it doesn\u0027t have a way to know that from a dump). \r\n\r\nand when you were capturing the dump, the profiler (JetBrains) is trying to enumerate threads in this process and it\u0027s waiting on the thread store lock which is probably still held by the thread that last triggered a GC - \r\n\r\n```\r\nntdll!NtWaitForAlertByThreadId+14\r\nntdll!RtlpWaitOnAddressWithTimeout+81\r\nntdll!RtlpWaitOnAddress+ae\r\nntdll!RtlpWaitOnCriticalSection+fd\r\nntdll!RtlpEnterCriticalSectionContended+1c4\r\nntdll!RtlEnterCriticalSection+42\r\ncoreclr!CrstBase::Enter+5a [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp @ 328] D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\crst.cpp\r\ncoreclr!ThreadSuspend::LockThreadStore+90 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threadsuspend.cpp @ 1885] D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\threads\r\ncoreclr!ProfilerThreadEnum::Init+25 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\profilingenumerators.cpp @ 527 + 13] D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\profilin\r\ncoreclr!ProfToEEInterfaceImpl::EnumThreads+136 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\proftoeeinterfaceimpl.cpp @ 10158 + 8] D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\proftoe\r\nJetBrains_Profiler_Core!DllGetClassObject+1ffd3\r\nJetBrains_Profiler_Core!DllGetClassObject+1f2c3\r\nJetBrains_Profiler_Core!DllGetClassObject+1fcf1\r\nJetBrains_Profiler_Core!DllGetClassObject+1ecd7\r\ncoreclr!EEToProfInterfaceImpl::ProfilerAttachComplete+d1 [D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\eetoprofinterfaceimpl.cpp @ 2859 + 14] \r\n```\r\n\r\nthis could mean you happened to have just triggered a GC which landed you in this situation, or you were triggering lots of GCs (which was most likely your case since you mentioned your time in GC is so high) so it\u0027s very likely that every time you capture a dump you will see something similar. this is where a trace would be useful if you still have the repro. but from just these callstacks I don\u0027t see anything unusual, especially for a process that is doing lots of GCs.",
                                           "updatedAt":  "2024-09-24T23:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NfggV",
                                           "createdAt":  "2024-09-25T11:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "Thank you both for having a look. \r\n\r\n@markples I\u0027ve created this case and uplaoded the dumps on it https://developercommunity.visualstudio.com/t/Application-freezes-during-GC-github-ca/10753082\r\n\r\n@Maoni0  We see that having a lot of GC is bad. Our code is allocating a fair memory, especially when doing computations on 24 or 32 threads. But that\u0027s the best way we found to minimize computation time. It can run fine for days or hours. \r\n\r\n The issue is that in this case the winforms application is Not Responding, and when we take dumps at different time, the stacks are exactly the same, so we have excluded that GC has worked, calculation resumed and a new GC happened when we took the new dump.\r\n \r\n We tried to trace what is happening during the freeze but dotnet-trace gave a tcp timeout exception and DotTrace was not able to attach to the process either in Timeline or Sampling mode.\r\n\r\nDo you have an idea on what tool we could use to analyze further?",
                                           "updatedAt":  "2024-09-25T11:42:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NkX1z",
                                           "createdAt":  "2024-09-25T19:51:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "The most useful thing would be a trace so that the history up to the freeze can be seen.  From the link above, you can use the command `perfview /GCCollectOnly /AcceptEULA /nogui collect`.  Launch it before or early in the process, then stop it with `s` after the process has been frozen for a while.  The file will be smaller than a dump.  Note that by default this will capture events from all processes on the machine, so things like process names will be shared.",
                                           "updatedAt":  "2024-09-25T19:51:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NqiDd",
                                           "createdAt":  "2024-09-26T11:58:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "Hello,\r\n\r\nThank you. I\u0027ll check with the users to set that up. It may take a couple of weeks",
                                           "updatedAt":  "2024-09-26T11:58:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NqiH7",
                                           "createdAt":  "2024-09-26T11:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1YdLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-27T20:50:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2024-10-09T09:16:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "In dumps that you have shared, the thread that is expected to complete the GC is blocked by:\r\n\r\n```\r\n    Image path: C:\\Program Files\\SentinelOne\\Sentinel Agent 23.2.3.358\\InProcessClient64.dll\r\n    Image name: InProcessClient64.dll\r\n    Timestamp:        Mon Sep 18 04:27:23 2023 (6508341B)\r\n    File version:     23.2.3.358\r\n    Product version:  23.2.3.358\r\n    Information from resource tables:\r\n        CompanyName:      Sentinel Labs, Inc.\r\n        ProductName:      Sentinel Agent\r\n```\r\n\r\nThe code in this .dll intercepted execution of the GC thread and it is spinning in some sort of spinlock.\r\n\r\nThis looks like a bug in SentinelOne software. To validate this theory, you can try disabling the SentinelOne software and see whether the hang will go away. You may want to contact SentinelOne support to diagnose it further.",
                                           "updatedAt":  "2024-09-26T11:58:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NqjA9",
                                           "createdAt":  "2024-09-26T12:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "Thank you very much Jan. How did you spot that?",
                                           "updatedAt":  "2024-09-26T12:00:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nqmqx",
                                           "createdAt":  "2024-09-26T12:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "To find the thread that is expected to execute the GC, open the crash dump in windbg debugger, run `dt coreclr!ThreadStore::s_pThreadStore` command. `m_HoldingThread ` is the thread that is expected to execute the GC.\r\n\r\nThe stacktrace of the thread that is expected to execute the GC as shown by the windbg debugger is incomprehensible since there are no symbols and stackunwinding information for InProcessClient64:\r\n```\r\n0:047\u003e k\r\n # Child-SP          RetAddr               Call Site\r\n00 00000069`3a57bfa0 00007ffe`5489c941     InProcessClient64+0x6d082\r\n01 00000069`3a57bfe0 00007ffe`5489b6a8     InProcessClient64+0x6c941\r\n02 00000069`3a57c020 00007ffe`549d5332     InProcessClient64+0x6b6a8\r\n03 00000069`3a57c0c0 00007ffe`577d0d14     InProcessClient64+0x1a5332\r\n04 00000069`3a57c0c8 00000069`3a57c110     ntdll!ZwSuspendThread+0x14\r\n05 00000069`3a57c0d0 00000001`ffffffff     0x00000069`3a57c110\r\n06 00000069`3a57c0d8 00000000`00000000     0x00000001`ffffffff\r\n```",
                                           "updatedAt":  "2024-09-26T12:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NqySD",
                                           "createdAt":  "2024-09-26T12:22:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODztXVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-09-26T13:52:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "Thank you very much Jan",
                                           "updatedAt":  "2024-09-26T12:22:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PJ1pz",
                                           "createdAt":  "2024-10-09T08:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FlorianRoudautOrchestrade",
                                           "body":  "Hello,\n\nWe have told the client to whitelist the application, so that it\u0027s not scanned by Sentinel. They still had the freeze. \n\nIn the latest dump, we still see the UI thread in WaitUntilGCComplete.\n\n![Image](https://github.com/user-attachments/assets/e362bc8b-4997-4ec0-a5f3-ede75a6b6f7f)\n\nI tried to look up the m_HoldingThread, but I could not find any thread with this id. \n\nRegards,\nFlorian",
                                           "updatedAt":  "2024-10-09T08:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PKPPH",
                                           "createdAt":  "2024-10-09T09:35:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`m_HoldingThread` is the runtime `Thread` pointer. Try to run `!threads` command and match the `m_HoldingThread` value with ThreadOBJ column.\n",
                                           "updatedAt":  "2024-10-09T09:35:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ThDNy",
                                           "createdAt":  "2024-11-13T22:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "Looks like this is affecting Paint.NET 5.1 on .NET 9.0.0. I\u0027m getting reports of it hanging at app startup, and the dump I looked at shows that it\u0027s parked on `PeekMessageW` which _my_ code is calling, not the runtime. SentinelOne\u0027s DLL shows up in the list of loaded modules. One report included a screenshot of Task Manager and PDN is burning at least 1 core of CPU (so probably livelock/spinlock).\n\nIs there any known reliable workaround, like disabling Tiered Compilation or ReadyToRun or something?",
                                           "updatedAt":  "2024-11-13T23:08:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ThTd7",
                                           "createdAt":  "2024-11-13T22:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "Link to discussion about this over on the Paint.NET forum: https://forums.getpaint.net/topic/131939-paintnet-51-not-starting-properly/",
                                           "updatedAt":  "2024-11-13T22:48:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ti3ac",
                                           "createdAt":  "2024-11-14T04:29:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e the dump I looked at shows that it\u0027s parked on PeekMessageW which my code is calling, not the runtime. SentinelOne\u0027s DLL shows up in the list of loaded modules\n\nDid you see a thread spinning inside InProcessClient64.dll with a callstack like https://github.com/dotnet/runtime/issues/108144#issuecomment-2376755889?\n\n\u003e Is there any known reliable workaround, like disabling Tiered Compilation or ReadyToRun or something?\n\nMy guess is that the hang in SentinelOne got exposed by changes in GC thread suspension. There have been quite a few changes around GC thread suspension to make it simpler, more scalable and compatible with CET.\n\nFor example, https://github.com/dotnet/runtime/pull/99076 may be related (just a speculation). If you would like to go on an adventure to prove or disprove this theory, you can try setting `s_pfnQueueUserAPC2Proc` to NULL (either by reaching into coreclr.dll  and setting the static variable to zero or by detouring `GetProcAddress`) to see whether it will make the hang to stop reproducing.",
                                           "updatedAt":  "2024-11-14T04:29:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TqXOh",
                                           "createdAt":  "2024-11-14T20:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "\u003e Did you see a thread spinning inside InProcessClient64.dll with a callstack like https://github.com/dotnet/runtime/issues/108144#issuecomment-2376755889?\n\nYeah, I see on the UI thread: (this is from VS looking at the DMP)\n\n```\n \twin32u.dll!NtUserPeekMessage()\tUnknown\n \tuser32.dll!_PeekMessage()\tUnknown\n \tuser32.dll!PeekMessageW()\tUnknown\n \tInProcessClient64.dll!00007ff857c60b79()\tUnknown\n \tInProcessClient64.dll!00007ff857c60be8()\tUnknown\n \tInProcessClient64.dll!00007ff857c60abc()\tUnknown\n \t[Managed to Native Transition]\t\n\tPaintDotNet.SystemLayer.dll!PaintDotNet.SystemLayer.UIHelpers.BeginModalUIFrameCore(System.Windows.Forms.IWin32Window owner, bool useWaitCursor, System.Action\u003cPaintDotNet.SystemLayer.IModalUIFrame\u003e continuationFn) Line 1084\tC#\n```\n\nThe `BeginModalUIFrameCore` method at the bottom is calling into a P/Invoke for `PeekMessageW`.\n\nThis might not even be related to GC changes in .NET 9 -- I say this because you mention `QueueUserAPC2`. I recently started using `QueueUserAPC` (non-2) for some `Task` awaiters (for a rather specific reason), so I wonder if Sentinel One borked both of those detours.\n\nOh, and the \".NET System Events\" thread has this, although I can\u0027t tell if it\u0027s also snagged or doing just fine:\n```\n\twin32u.dll!NtUserGetMessage()\tUnknown\n \tuser32.dll!GetMessageW()\tUnknown\n \tInProcessClient64.dll!00007ff857c5f116()\tUnknown\n \tInProcessClient64.dll!00007ff857c5f065()\tUnknown\n \tMicrosoft.Win32.SystemEvents.dll!00007ff801026979()\tUnknown\n \t[Managed to Native Transition]\t\n \tMicrosoft.Win32.SystemEvents.dll!Microsoft.Win32.SystemEvents.WindowThreadProc()\tUnknown\n \t[Native to Managed Transition]\t\n \tkernel32.dll!BaseThreadInitThunk()\tUnknown\n \tntdll.dll!RtlUserThreadStart()\tUnknown\n```",
                                           "updatedAt":  "2024-11-14T20:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TqY7t",
                                           "createdAt":  "2024-11-14T20:36:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "`QueueUserAPC2` requires Win11, so I don\u0027t think that\u0027s the issue. I\u0027m getting reports from all supported Windows versions (Win10 v21H2+).",
                                           "updatedAt":  "2024-11-14T20:36:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Trjpl",
                                           "createdAt":  "2024-11-15T00:10:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "Well, cross your fingers\n\nhttps://x.com/ATGardner/status/1857192263564296646\n\n![Image](https://github.com/user-attachments/assets/41076326-8528-44b7-8f92-7f7d9385fdb9)\n",
                                           "updatedAt":  "2024-11-15T00:10:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tu5Qw",
                                           "createdAt":  "2024-11-15T10:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7ItRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2024-11-16T01:52:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "westy",
                                           "body":  "Just to chip in here.\n\nI believe this SentinelOne issue might also be causing application pool recycling in IIS when hosting dotnet applications.\n\nI\u0027m seeing this in my event viewer at random times with a corresponding error page:\n```\n\u003cEvent xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\"\u003e\n    \u003cSystem\u003e\n        \u003cProvider Name=\"Application Error\" Guid=\"{a0e9b465-b939-57d7-b27d-95d8e925ff57}\" /\u003e\n        \u003cEventID\u003e1000\u003c/EventID\u003e\n        \u003cVersion\u003e0\u003c/Version\u003e\n        \u003cLevel\u003e2\u003c/Level\u003e\n        \u003cTask\u003e100\u003c/Task\u003e\n        \u003cOpcode\u003e0\u003c/Opcode\u003e\n        \u003cKeywords\u003e0x8000000000000000\u003c/Keywords\u003e\n        \u003cTimeCreated SystemTime=\"2024-11-15T09:21:23.4586497Z\" /\u003e\n        \u003cEventRecordID\u003e133377\u003c/EventRecordID\u003e\n        \u003cCorrelation /\u003e\n        \u003cExecution ProcessID=\"42268\" ThreadID=\"45152\" /\u003e\n        \u003cChannel\u003eApplication\u003c/Channel\u003e\n        \u003cComputer\u003e\u003cREDACTED\u003e\u003c/Computer\u003e\n        \u003cSecurity UserID=\"S-1-5-82-2262958522-3307127270-12186887-1419743788-1924226574\" /\u003e\n    \u003c/System\u003e\n    \u003cEventData\u003e\n        \u003cData Name=\"AppName\"\u003edotnet.exe\u003c/Data\u003e\n        \u003cData Name=\"AppVersion\"\u003e8.0.1024.46610\u003c/Data\u003e\n        \u003cData Name=\"AppTimeStamp\"\u003e66e8bd32\u003c/Data\u003e\n        \u003cData Name=\"ModuleName\"\u003eInProcessClient64.dll\u003c/Data\u003e\n        \u003cData Name=\"ModuleVersion\"\u003e23.3.4.320\u003c/Data\u003e\n        \u003cData Name=\"ModuleTimeStamp\"\u003e66157ad2\u003c/Data\u003e\n        \u003cData Name=\"ExceptionCode\"\u003ec0000005\u003c/Data\u003e\n        \u003cData Name=\"FaultingOffset\"\u003e000000000005e24f\u003c/Data\u003e\n        \u003cData Name=\"ProcessId\"\u003e0x6c28\u003c/Data\u003e\n        \u003cData Name=\"ProcessCreationTime\"\u003e0x1db373f056866d0\u003c/Data\u003e\n        \u003cData Name=\"AppPath\"\u003eC:\\Program Files\\dotnet\\dotnet.exe\u003c/Data\u003e\n        \u003cData Name=\"ModulePath\"\u003eC:\\Program Files\\SentinelOne\\Sentinel Agent 23.3.4.320\\InProcessClient64.dll\u003c/Data\u003e\n        \u003cData Name=\"IntegratorReportId\"\u003e50fc82e5-d0f2-482e-b2fd-3d93794b38e3\u003c/Data\u003e\n        \u003cData Name=\"PackageFullName\" /\u003e\n        \u003cData Name=\"PackageRelativeAppId\" /\u003e\n    \u003c/EventData\u003e\n\u003c/Event\u003e\n```\n\nReally not happy that I cannot trust the host that we develop our applications on. Thankfully it\u0027s not on the servers, yet...\nI\u0027m starting the fight to get SentinelOne removed!\n\nCheers",
                                           "updatedAt":  "2024-11-15T10:49:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T5rXU",
                                           "createdAt":  "2024-11-17T16:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Could it be the case here that Sentinel One hooks some API that .NET calls with `SuppressGCTransition` (or some FCall) and relies on it obeying the rules, but their hook doesn\u0027t (seeing they call their thing \"AI\" it maybe asks some LLM if the call is \"safe\" or sth) making the GC cause issues all over the place later on? cc @jkotas ",
                                           "updatedAt":  "2024-11-17T16:54:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T5vha",
                                           "createdAt":  "2024-11-17T17:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We would see threads stuck inside `SuppressGCTransition` if it was the case, but the dumps that I have looked at did not have any threads like that.",
                                           "updatedAt":  "2024-11-17T17:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UUxYY",
                                           "createdAt":  "2024-11-20T12:35:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7wuFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-11-20T15:00:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TheCardinalSystem",
                                           "body":  "It would [appear](https://forums.getpaint.net/topic/131939-paintnet-51-not-starting-properly-sentinel-one-antivirus-bug/page/3#elComment_640702) that SentinelOne has released an update to address this issue.",
                                           "updatedAt":  "2024-11-20T12:35:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UbEGT",
                                           "createdAt":  "2024-11-21T05:38:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9aA6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kellyelton",
                                                                               "createdAt":  "2024-12-03T17:16:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "\u003e It would [appear](https://forums.getpaint.net/topic/131939-paintnet-51-not-starting-properly-sentinel-one-antivirus-bug/page/3#elComment_640702) that SentinelOne has released an update to address this issue.\n\nNext two posts said it\u0027s still busted :-\\",
                                           "updatedAt":  "2024-11-21T05:38:17Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "Application freezes during GC ",
        "labels":  [
                       "tracking-external-issue",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108276",
        "createdAt":  "2024-09-26T10:25:54Z",
        "number":  108276,
        "author":  "ww898",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7V6HA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2024-09-26T12:46:56Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-11T05:06:24Z",
        "body":  "Hi, my suggestion is based on the desire to get heap information updates not only at the beginning and end of GC, but also at any other time on request outside of GC. If the application does not perform GC for a long time after attaching the profiler, then we cannot make any assumptions about the amount of memory used. Calling `ForceGC` of course updates the heap information, but performs a full GC in addition, which breaks the picture of memory use.\r\n\r\nhttps://github.com/dotnet/runtime/blob/79a71fc750652191eba18e19b3f98492e882cb5f/src/coreclr/vm/gcenv.ee.cpp#L809-L855",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj3E7LA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Np17z",
                                           "createdAt":  "2024-09-26T10:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-26T10:26:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OGfEu",
                                           "createdAt":  "2024-09-30T20:14:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "That would require non-trivial synchronization since the generation bounds are constantly being updated by allocation. At the very least, this requires some careful design.",
                                           "updatedAt":  "2024-09-30T20:14:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PcTss",
                                           "createdAt":  "2024-10-11T05:06:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ww898",
                                           "body":  "@cshung What do you think about creating the method like `ICorProfilerInfo::ForceGC`, but without gathering garbage in fact?",
                                           "updatedAt":  "2024-10-11T05:06:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Profiler] Ability to call `DiagUpdateGenerationBounds()` from profiler API.",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108473",
        "createdAt":  "2024-10-02T10:03:30Z",
        "number":  108473,
        "author":  "a74nh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-30T15:43:30Z",
        "body":  "### Background\r\n* AIUI, in the coreclr GC, the mark list is an optimisation for post-marking stages where rather than traversing the heap, object by object, it allows the plan phase to skip over objects that are not live (gaps) and just traverse live objects (plugs). To do this, it sorts the object addresses of the live objects.\r\n* For most targets, introsort::sort is used\r\n* For AMD64, vxsort is used. This is a [modified copy](https://github.com/dotnet/runtime/tree/96be510135829ff199c6c341ad461c36bab4809e/src/coreclr/gc/vxsort) of [damageboy/vxsort-cpp](https://github.com/damageboy/vxsort-cpp)\r\n* vxsort is Quicksort with a vectorised partition routine.\r\n* Traditionally, the partition is not vectorizable. However, AVX can use [masks and the permute instruction](https://bits.houmus.org/2020-01-30/this-goes-to-eleven-pt3) to split a vector into two parts.\r\n* ARM64 SVE has similar concepts and can split a vector using predicates and the compact instruction.\r\n\r\n### Suggestion\r\n* Extend the vxsort in coreclr to also work using SVE. I\u0027m not sure how easy this would be to implement.\r\n\r\n### Alternative Suggestion\r\n* [Highway](https://github.com/google/highway/tree/master/hwy/contrib/sort) provides a [highly optimised ](https://opensource.googleblog.com/2022/06/Vectorized%20and%20performance%20portable%20Quicksort.html) version of Quicksort, which does not rely on the special AVX/SVE instructions and instead can vectorise across all targets. I don\u0027t know if use of this would be suitable for coreclr\r\n\r\n### Reference\r\nHere is an example partition routine implemented in C# SVE. All elements less than the first element get written to `left`, all other elements get written to `right`\r\n\r\n```csharp\r\n    public static unsafe void splitArray(ref uint* input, ref uint* left, ref uint* right, int length)\r\n    {\r\n      long i = 0;\r\n\r\n      // Position within the output arrays.\r\n      long index_left = 0;\r\n      long index_right = 0;\r\n\r\n      // Create a vector filled with the first element from input.\r\n      Vector\u003cuint\u003e firstelemvec = Sve.DuplicateSelectedScalarToVector(Sve.LoadVector(Sve.CreateTrueMaskUInt32(), input), 0);\r\n\r\n      // Create a predicate for the loop.\r\n      Vector\u003cuint\u003e ploop = Sve.CreateWhileLessThanMask32Bit(i, length);\r\n\r\n      while(Sve.TestAnyTrue(Sve.CreateTrueMaskUInt32(), ploop))\r\n      {\r\n        // Load from the input array based on the loop predicate.\r\n        Vector\u003cuint\u003e data = Sve.LoadVector(ploop, input + i);\r\n\r\n        // Find all elements in input array less than the first element.\r\n        Vector\u003cuint\u003e pinner = Sve.ConditionalSelect(ploop, Sve.CompareLessThan(data, firstelemvec), Vector\u003cuint\u003e.Zero);\r\n\r\n        // Squash all found elements to the lower lanes of the vector\r\n        Vector\u003cuint\u003e compacted = Sve.Compact(pinner, data);\r\n        \r\n        // Store the squashed elements to the first output array. (This uses the loop predicate, so some additional\r\n        // zeros may be stored)\r\n        Sve.StoreAndZip(ploop, left + index_left, compacted);\r\n\r\n        // Increment the position in the first output array by the number of elements found.\r\n        index_left = Sve.SaturatingIncrementByActiveElementCount(index_left, pinner);\r\n\r\n        // Do the same for the elements greater than or equal, storing into the second output array.\r\n        pinner = Sve.ConditionalSelect(ploop, Sve.CompareGreaterThanOrEqual(data, firstelemvec), Vector\u003cuint\u003e.Zero);\r\n        compacted = Sve.Compact(pinner, data);\r\n        Sve.StoreAndZip(ploop, right + index_right, compacted);\r\n        index_right = Sve.SaturatingIncrementByActiveElementCount(index_right, pinner);\r\n\r\n        // Handle the loop.\r\n        i = Sve.SaturatingIncrementBy32BitElementCount(i, 1);\r\n        ploop = Sve.CreateWhileLessThanMask32Bit(i, length);\r\n      }\r\n    }\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkvWfRA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OXhez",
                                           "createdAt":  "2024-10-02T12:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-02T12:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OZEzm",
                                           "createdAt":  "2024-10-02T15:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cshung",
                                           "body":  "@a74nh I spent some time earlier to look into the possibility of speeding up sorting on ARM64. I\u0027ve got mixed feedback on this one.\r\n\r\nOn one hand, looking at [here](https://github.com/dotnet/runtime/blob/7474054d942907ccdcad9be50a40fa23b29dfc4d/src/coreclr/gc/vxsort/machine_traits.h#L44), it appears to me that all we needed is to implement these methods for a machine, then we can get vxsort working for it. Optimistically, this is probably the easiest path forward.\r\n\r\nOn the other hand, speaking with @Maoni0, she told me that she talk with some other experts on ARM64 and told me that it was blocking on some factors (that I can\u0027t remember) so that we didn\u0027t do it earlier.\r\n\r\n@kunalspathak told me that we can\u0027t have the 512 bits parallelization as in [here](https://github.com/dotnet/runtime/blob/main/src/coreclr/gc/vxsort/machine_traits.avx512.h), still some vectorization should be good.\r\n\r\nI didn\u0027t go any further with this - but generally I think this is a good thing to do.\r\n\r\nIn any case, we can\u0027t use C# inside the GC. \r\n\r\nLet us know if you are interested in contributing.",
                                           "updatedAt":  "2024-10-02T15:13:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OaCzP",
                                           "createdAt":  "2024-10-02T17:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0h9oA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cshung",
                                                                               "createdAt":  "2024-10-02T18:25:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "a74nh",
                                           "body":  "\u003e On one hand, looking at [here](https://github.com/dotnet/runtime/blob/7474054d942907ccdcad9be50a40fa23b29dfc4d/src/coreclr/gc/vxsort/machine_traits.h#L44), it appears to me that all we needed is to implement these methods for a machine, then we can get vxsort working for it. Optimistically, this is probably the easiest path forward.\r\n\r\nAgreed, that seems a sensible place to start. This assumes that the AVX and SVE algorithms are directly compatible.\r\n\r\n\u003e On the other hand, speaking with @Maoni0, she told me that she talk with some other experts on ARM64 and told me that it was blocking on some factors (that I can\u0027t remember) so that we didn\u0027t do it earlier.\r\n\r\nThis could be the availability of SVE ? It\u0027s a fairly new technology, so would have to fall back to the other version on older hardware. Which means we need a check at runtime.\r\n\r\n\u003e @kunalspathak told me that we can\u0027t have the 512 bits parallelization as in [here](https://github.com/dotnet/runtime/blob/main/src/coreclr/gc/vxsort/machine_traits.avx512.h), still some vectorization should be good.\r\n\r\nYes, most machines with SVE are 128bits. But as hardware improves and vector lengths get longer we\u0027ll get a speed up for free.\r\n\r\n\u003e In any case, we can\u0027t use C# inside the GC.\r\n\r\nAgreed. I only provided it in C# because I already had it available (I\u0027m using it in a blog I\u0027m writing about SVE in C#).\r\n\r\n\u003e Let us know if you are interested in contributing.\r\n\r\nIt is possible someone in my team would be able to do this. We\u0027ll have to prioritise it against other work.",
                                           "updatedAt":  "2024-10-02T17:12:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6POBqe",
                                           "createdAt":  "2024-10-09T16:44:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Related: https://github.com/dotnet/runtime/issues/64164\n\n@cshung - Do we know the speed up we get on x64 when trying vxsort vs. introsort. Is there a benchmark that we can use to see if porting vxsort to NEON will benefit? \n\nhttps://github.com/dotnet/runtime/blob/87273d64859e8bf5856d176915624e6f92ed3baf/src/coreclr/gc/gc.cpp#L10485-L10503\n\n\u003e On the other hand, speaking with @Maoni0, she told me that she talk with some other experts on ARM64 and told me that it was blocking on some factors (that I can\u0027t remember) so that we didn\u0027t do it earlier.\n\nWill be good to know that.",
                                           "updatedAt":  "2024-10-09T16:44:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S9Z9E",
                                           "createdAt":  "2024-11-08T19:11:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6E6Ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kunalspathak",
                                                                               "createdAt":  "2024-11-08T19:14:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cshung",
                                           "body":  "\u003e Related: [#64164](https://github.com/dotnet/runtime/issues/64164)\n\u003e \n\u003e [@cshung](https://github.com/cshung) - Do we know the speed up we get on x64 when trying vxsort vs. introsort. Is there a benchmark that we can use to see if porting vxsort to NEON will benefit?\n\u003e \n\nMy earlier PR https://github.com/dotnet/runtime/pull/98712 to enable VxSort on Linux contained some data that could be useful.\n",
                                           "updatedAt":  "2024-11-08T19:11:23Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "ARM64 GC: Use SVE when sorting the mark list",
        "labels":  [
                       "arch-arm64",
                       "area-GC-coreclr",
                       "arm-sve"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109774",
        "createdAt":  "2024-11-13T12:44:31Z",
        "number":  109774,
        "author":  "arekpalinski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T20:37:32Z",
        "body":  "### Description\n\nI\u0027m from [RavenDB](https://github.com/ravendb/ravendb) team and would like to share a report about potentially peculiar behavior of managed memory allocations. In particular it\u0027s about the size, utilization and fragmentation of Large Object Heap.\n\nWe  observe the following issue with one of the following server in RavenDB Cloud. I assume it must be specific to type of queries this instance is handling as it\u0027s not typical pattern that we see somewhere else. The server is crashing due to OOM, at that time we see high managed memory allocation (yellow on below graph):\n\n![Image](https://github.com/user-attachments/assets/46a91fd7-6954-4a1d-b97f-3500aa174924)\n\n\n```\nNov 05 18:19:32 vmf8905577d5 systemd[1]: ravendb.service: A process of this unit has been killed by the OOM killer.\nNov 05 18:19:35 vmf8905577d5 systemd[1]: ravendb.service: Main process exited, code=killed, status=9/KILL\n...\nNov 05 18:19:36 vmf8905577d5 systemd[1]: ravendb.service: Failed with result \u0027oom-kill\u0027.\n```\n\nThe server has steady load of ~100 - 150 request/sec for 24/7. We can see the same pattern of managed allocations. We use the following GC settings:\n\n```\n    \"configProperties\": {\n      \"System.GC.Concurrent\": true,\n      \"System.GC.Server\": true,\n      \"System.GC.RetainVM\": true,\n```\n\nOur first step was to check what takes that space so we collected `dotMemory` dump for analysis of managed memory when it was over 25GB. We found there that most of the memory is taken by LOH. Although out of 24GB that it occupied only 136MB was used:\n\n![Image](https://github.com/user-attachments/assets/a1b44fde-3d4f-4f73-92ad-b0093add033a)\n\n\nWhen looking at the LOH details in `dotMemory` we can see that most of LOH consist of empty areas (no objects allocated, 0% Utilization, 0% Fragmentation)\n\n![Image](https://github.com/user-attachments/assets/9621677f-d791-49c1-8924-6b1175f61a16)\n\nWe do have the mechanism where we force the LOH compaction from time to time during background GC (once it\u0027s gets bigger that 25% of physical memory):\n\nhttps://github.com/ravendb/ravendb/blob/80ba404673f502f2db71269ecba1a135e56e7c95/src/Sparrow/LowMemory/LowMemoryNotification.cs#L150-L154\n\n---\n\nAs next step we tried to experiment with some [GC settings](https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector), collect GC info with the usage of `dotnet-trace` and check info provided by `GC.GetGCMemoryInfo()`.\n\nWe found that with the following settings `DOTNET_GCConserveMemory=8` (so LOH is compacted if it has too much fragmentation) and `\"System.GC.RetainVM\": false` the system behaves stable. We no longer experience oom-killer. The memory usage graph looks as follow for the last couple of days:\n\n![Image](https://github.com/user-attachments/assets/c6bd9470-68bd-47be-9a2d-e04e290c7116)\n\n---\n\nAlthough we\u0027re still wondering whether sizes of LOH we see there are expected. We don\u0027t see LOH of this size anywhere else. We do know that allocations on LOH are mostly due to heavy usage of arrays by Lucene search engine (https://github.com/ravendb/lucenenet). \n\nAlthough we have also noticed that when the size of LOH is very big, the fragmentation reported for it is small (based on info returned by `GC.GetGCMemoryInfo()` or from `.nettrace` file). For example we could see 0% fragmenation of LOH (Induced GC were forced intentionally during `dotnet-trace` recording):\n\n![Image](https://github.com/user-attachments/assets/01288462-3580-48e4-8125-4962b4bbbc8a)\n\n\nBut shortly after that we collected `dotMemory` snapshot, where same as above we see almost empty LOH\n\n![Image](https://github.com/user-attachments/assets/9b366fe6-e105-414f-9feb-ed17f258be09)\n\n---\n\nWe also have another `dotnet-trace` session where we started to collect GC info (` --profile gc-verbose `) when the LOH was:\n\n```\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"56.23 MBytes\",\n\"FragmentationBeforeHumane\": \"56.23 MBytes\",\n\"SizeAfterHumane\": \"24.44 GBytes\",\n\"SizeBeforeHumane\": \"24.44 GBytes\"\n```\n\nafter 1h 20m it was:\n\n```\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"50.44 MBytes\",\n\"FragmentationBeforeHumane\": \"50.44 MBytes\",\n\"SizeAfterHumane\": \"28.99 GBytes\",\n\"SizeBeforeHumane\": \"28.99 GBytes\"\n```\n\nand eventually the size got reduced to 10GB (and 9GB of fragmentation):\n\n```\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"9.05 GBytes\",\n\"FragmentationBeforeHumane\": \"9.05 GBytes\",\n\"SizeAfterHumane\": \"10.25 GBytes\",\n\"SizeBeforeHumane\": \"10.25 GBytes\"\n```\n\nIn PerfView it\u0027s seen as:\n\n![Image](https://github.com/user-attachments/assets/d6fe7276-b5b4-4dea-afa8-1ca2a9a88104)\n\n\nThen we collected `dotMemory` snapshot again and LOH got reduced to 3.14GB (due to GC forced by `dotMemory` so LOH got compacted as I understand):\n\n![Image](https://github.com/user-attachments/assets/4eea3506-f479-43c8-9136-2f68fd4e8189)\n\nWe can provide `.nettrace`, `dotMemory` snapshot files privately if that would be helpful.\n\n\n### Reproduction Steps\n\nIt\u0027s reproduced only on a specific instance. We cannot provided access but we\u0027re able to collect debug assets. \n\n### Expected behavior\n\nLOH will not reach the size of \u003e20GB of memory\n\n### Actual behavior\n\nLOH reaches \u003e20 GB of memory, while fragmentation and utilization is very low\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmmylhw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TbuSP",
                                           "createdAt":  "2024-11-13T12:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-13T12:45:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TdybI",
                                           "createdAt":  "2024-11-13T16:09:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Would you be able to collect and share a [gc-collect only](https://devblogs.microsoft.com/dotnet/work-flow-of-diagnosing-memory-performance-issues-part-1/#continuing-the-analysis) trace on this instance? Also is this a regression after an app (or .NET) update? ",
                                           "updatedAt":  "2024-11-13T16:09:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tm94o",
                                           "createdAt":  "2024-11-14T14:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Please find the output of `dotnet-trace` for `gc-collect` profile:\nhttps://drive.google.com/file/d/1qanKgND8fvBt9WTLgOaiumfJugMQuZIn/view?usp=sharing\n\nThe trace started to be collected right after restarting RavenDB server. Same as previously `DOTNET_GCConserveMemory=8` and `\"System.GC.RetainVM\": false` were applied.\n\n\n\n",
                                           "updatedAt":  "2024-11-14T14:15:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TnzZP",
                                           "createdAt":  "2024-11-14T15:19:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Please find another trace of `gc-collect` after a few hours:\nhttps://drive.google.com/file/d/16WcNFXf5fSNehT7zc_AZaSasFBHFSQGL/view?usp=sharing\n\n\nOnce it started to be collected we had the following LOH stats (note the machine has 32GB of memory):\n\n```\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"85.67 MBytes\",\n\"FragmentationBeforeHumane\": \"85.67 MBytes\",\n\"SizeAfterHumane\": \"31.14 GBytes\",\n\"SizeBeforeHumane\": \"31.14 GBytes\"\n\n...\n\n\n\"HeapSizeHumane\": \"34.73 GBytes\",\n\"HighMemoryLoadThresholdHumane\": \"28.21 GBytes\",\n\"Index\": 497,\n\"MemoryLoadHumane\": \"24.76 GBytes\",\n\"PauseDurations\": [\n\"00:00:00.0172980\",\n\"00:00:00\"\n],\n\"PauseTimePercentage\": 0.13,\n\"PinnedObjectsCount\": 2,\n\"PromotedHumane\": \"32.04 MBytes\",\n\"TotalAvailableMemoryHumane\": \"31.34 GBytes\",\n\"TotalCommittedHumane\": \"35.47 GBytes\"\n```\n\nafter 45 minutes we had:\n\n```\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"103.57 MBytes\",\n\"FragmentationBeforeHumane\": \"103.57 MBytes\",\n\"SizeAfterHumane\": \"32.61 GBytes\",\n\"SizeBeforeHumane\": \"32.61 GBytes\"\n\n...\n\n\"HeapSizeHumane\": \"36.35 GBytes\",\n\"HighMemoryLoadThresholdHumane\": \"28.21 GBytes\",\n\"Index\": 623,\n\"MemoryLoadHumane\": \"26.01 GBytes\",\n\"PauseDurations\": [\n  \"00:00:00.0488880\",\n  \"00:00:00\"\n],\n\"PauseTimePercentage\": 0.13,\n\"PinnedObjectsCount\": 2,\n\"PromotedHumane\": \"58.72 MBytes\",\n\"TotalAvailableMemoryHumane\": \"31.34 GBytes\",\n\"TotalCommittedHumane\": \"37.47 GBytes\"\n```\n\nthen I forced GC 2 times (with `GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce` and then `GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced)`)\n\n```\n{\"BeforeGC\":\"36.254 GBytes\",\"AfterGC\":\"36.025 GBytes\",\"Freed\":\"233.86 MBytes\",\"DurationInMs\":81,\"PinnedObjectsCount\":6,\"FinalizationPendingCount\":409,\"PauseTimePercentage\":\"0.16%\"}\n```\n\n```\n{\"BeforeGC\":\"37.045 GBytes\",\"AfterGC\":\"1.157 GBytes\",\"Freed\":\"35.887 GBytes\",\"DurationInMs\":194,\"PinnedObjectsCount\":4,\"FinalizationPendingCount\":550,\"PauseTimePercentage\":\"0.16%\"}\n```\n\nwhich resulted in the following LOH stats:\n\n```\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"66.03 KBytes\",\n\"FragmentationBeforeHumane\": \"66.03 KBytes\",\n\"SizeAfterHumane\": \"1.28 GBytes\",\n\"SizeBeforeHumane\": \"1.28 GBytes\"\n\n...\n\n\"HeapSizeHumane\": \"1.67 GBytes\",\n\"HighMemoryLoadThresholdHumane\": \"28.21 GBytes\",\n\"Index\": 638,\n\"MemoryLoadBytes\": 26921294233,\n\"MemoryLoadHumane\": \"25.07 GBytes\",\n\"PauseDurations\": [\n  \"00:00:00.0588390\",\n  \"00:00:00\"\n],\n\"PauseTimePercentage\": 0.16,\n\"PinnedObjectsCount\": 2,\n\"PromotedHumane\": \"46.65 MBytes\",\n\"TotalAvailableMemoryHumane\": \"31.34 GBytes\",\n\"TotalCommittedHumane\": \"8.15 GBytes\"\n```\n\n![Image](https://github.com/user-attachments/assets/de3217e4-834e-4001-ba56-b18b0f060eef)\n\n",
                                           "updatedAt":  "2024-11-15T11:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ToR6Q",
                                           "createdAt":  "2024-11-14T16:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kumariaditi52",
                                           "body":  "Please stop the email\r\n\r\nOn Thu, 14 Nov, 2024, 7:46 pm Arkadiusz Paliński, ***@***.***\u003e\r\nwrote:\r\n\r\n\u003e Please find the output of dotnet-trace for gc-collect profile:\r\n\u003e\r\n\u003e https://drive.google.com/file/d/1qanKgND8fvBt9WTLgOaiumfJugMQuZIn/view?usp=sharing\r\n\u003e\r\n\u003e The trace started to be collected right after restarting RavenDB server.\r\n\u003e Same as previously DOTNET_GCConserveMemory=8 and \"System.GC.RetainVM\":\r\n\u003e false were applied.\r\n\u003e\r\n\u003e —\r\n\u003e Reply to this email directly, view it on GitHub\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/109774#issuecomment-2476465704\u003e,\r\n\u003e or unsubscribe\r\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/A5PJBQPR4426FEIKDD2OOVD2ASWE5AVCNFSM6AAAAABRWM25AWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDINZWGQ3DKNZQGQ\u003e\r\n\u003e .\r\n\u003e You are receiving this because you are subscribed to this thread.Message\r\n\u003e ID: ***@***.***\u003e\r\n\u003e\r\n",
                                           "updatedAt":  "2024-11-14T16:27:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TqhpA",
                                           "createdAt":  "2024-11-14T20:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Thanks for sharing the trace. Did the issue start occurring after moving to .NET 8 or is related some other change?  ",
                                           "updatedAt":  "2024-11-14T20:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TtYUw",
                                           "createdAt":  "2024-11-15T07:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "The instance in question has some memory issues for quite long time (there are three nodes and we have a failover mechanism so an occasional restart of one node due to OOM doesn\u0027t affect us much). It was happening even on .NET 7 as well (I don\u0027t know if it could be related to LOH in the past. We didn\u0027t inspect that). I\u0027d say it is not related to .NET 8 update. Also we don\u0027t see any correlation with our changes.\n\nMore likely it\u0027s happening more often recently due to changes of user\u0027s data in a database. Queries might return different set of results. It might be some allocation pattern for specific data and specific queries.\n\n",
                                           "updatedAt":  "2024-11-18T08:59:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UEGrC",
                                           "createdAt":  "2024-11-18T20:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "In the first trace, LOH is growing over time, and BGC (background) is finding 99% of LOH to be live, including at GC # 85.  Near the end of that trace, at # 92 (another BGC, intervening ones are all gen0 and gen1), 90% of the LOH is found to be dead.  This shrinks the LOH size from 26GB to 11GB, but there is 76% fragmentation.  Then at GC # 96, a blocking (or non-concurrent) GC is done, which reduces the size to 5GB and eliminates the fragmentation.\n\nI wanted to double-check that no intervention was done here - in other words that the reclamation of memory worked fairly normally.  (except possibly the large drop in memory - more on that later)\n\nIn the second trace, LOH is again growing over time, and it looks like nothing interesting happens until GC is forced.  There are 3 induced GCs in the log.  The first two do very little, and then the third reclaims most of the memory.  LOH drops from 35GB to 1GB, and no fragmentation is left behind.  This seems both normal and peculiar.  The GC is trying to collect but finds everything live, and there isn\u0027t any fragmentation to clean up.  But then all of a sudden, the state of the heap changes, and reclamation works well.  It seems that either something is happening in the program, or something is different about the full blocking GC, which I don\u0027t think should usually happen.\n\nSo one question about that - when you force GC, do you do any other kind of cleanup?\n\n(mainly for @mangod9: this is memory reported in use by the GC.  I do not see growing freelist or decommit list sizes here.)",
                                           "updatedAt":  "2024-11-18T20:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UELRk",
                                           "createdAt":  "2024-11-18T21:01:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "There is one oddity that I noticed in the traces.  There are a lot of handles (over 200k) at the end of the second trace.  I also see a `MarkWithType` GC event listing basically the full heap under dependent handles.  Handle processing has different algorithms for BGC vs not, though they shouldn\u0027t scan differently (and this wouldn\u0027t explain why it takes 3 forced GCs).\n\nHowever, dependent handles are associated with ConditionalWeakTable, which can be used directly or indirectly (through places such as System.Transaction).  CWT uses a two-pass finalization system for cleanup, which can have problems (see #50683 if interested in details).  Could you please do a memory profile and see if you have CWT in the system, and specifically its internal Container class?  This can take multiple gen2s to clean, and modifications to the CWT can delay the process.",
                                           "updatedAt":  "2024-11-18T21:01:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UJDOK",
                                           "createdAt":  "2024-11-19T11:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "\u003e I wanted to double-check that no intervention was done here - in other words that the reclamation of memory worked fairly normally. (except possibly the large drop in memory - more on that later)\n\nNo external interventions was done there\n\n\u003e So one question about that - when you force GC, do you do any other kind of cleanup?\n\nNo, I forced it manually (with a dedicated HTTP endpoint - `/admin/memory/gc?loh=true`). \nhttps://github.com/ravendb/ravendb/blob/fc318e40649881a130450611c98d1417a5eaf019/src/Raven.Server/Documents/Handlers/Admin/AdminMemoryHandler.cs#L14-L22\nNo other cleanup was done at that time. \n\n---\n\nRegarding `ConditionalWeakTable` usage, yes we do have usages of it via the search engine we use - Lucene.Net. It uses CWT for internal caching purposes quite heavity:\nhttps://github.com/search?q=repo%3Aravendb%2Flucenenet%20ConditionalWeakTable\u0026type=code\n\nOnce I opened the dotMemory snapshot that was collected for the initial report of this issue (please note that I already mentioned, _We can provide .nettrace, dotMemory snapshot files privately if that would be helpful._  I can share it with you) I see:\n\n![Image](https://github.com/user-attachments/assets/0813cf6f-d1b8-497e-b61e-95b0567f21e6)\n\nAfter checking the instances of the first entry (`System.Runtime.CompilerServices.ConditionalWeakTable+Container\u003cObject, ConcurrentDictionary\u003cFieldCacheImpl+Entry, Object\u003e\u003e`)\n\n\n![Image](https://github.com/user-attachments/assets/fbc54289-5c5f-41b0-bd65-7641708c06e2)\n\nwhich points to:\n\nhttps://github.com/ravendb/lucenenet/blob/e791ebbb944e7d67814e189e9875a2ca515b8e9f/src/Lucene.Net/Search/FieldCacheImpl.cs#L49-L58\n\n",
                                           "updatedAt":  "2024-11-19T11:04:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UuNLU",
                                           "createdAt":  "2024-11-23T00:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "Apologies for the delay - I\u0027m still recovering from the windstorm in the NW US.\n \nCould you please clarify which of reports that you show are from a memory dump and which are snapshots?  I\u0027m interested in this for two reasons: (1) https://www.jetbrains.com/help/dotmemory/Analyzing_GC_Roots.html#f-reachable-queue says we won\u0027t be able to see anything on the finalization list, and (2) if the induced GC is collecting a lot, then we won\u0027t be able to see what was there before.\n\nI\u0027m happy to look at a memory dump (if you are willing and able to share that) shared through https://developercommunity.visualstudio.com/dotnet.  I\u0027d saw that ConditionalWeakTable is still just a hunch.  The last info that you shared of course doesn\u0027t point to a lot of memory, so it could only be CWT if the reporting of dead/finalizeable/already-collected objects is off, but since CWT\u0027s double finalization pass is a way to see this \"multiple gen2s in order to reclaim memory\" behavior, I\u0027m not ready to rule it out either.  Thank you!",
                                           "updatedAt":  "2024-11-23T00:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U3Vg0",
                                           "createdAt":  "2024-11-25T10:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "We have only collected snapshots using dotMemory. I don\u0027t think we can share the full memory dump directly. However, we are open to capturing and analyzing it on our end with your assistance.\n\nI think the theory involving `ConditionalWeakTable` aligns well with our observations. In our 3-node cluster, only the node handling traffic is affected. Data replication ensures that all nodes operate on the same dataset, hence indexes process the same documents. However, querying is handled exclusively by one node (as set by current user\u0027s configuration). This is the node experiencing the issue. Lucene\u0027s caches, which use `ConditionalWeakTable` under the covers, store arrays of integers, longs, strings etc resulting in LOH allocations.\n\nOur current mitigation is `DOTNET_GCConserveMemory=8,` which we understand triggers more frequent garbage collections and LOH compaction.  This behavior seems highly specific to the query patterns of this database, as we have not observed similar issues across the rest of RavenDB Cloud.",
                                           "updatedAt":  "2024-11-25T10:16:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U8uDm",
                                           "createdAt":  "2024-11-25T20:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "Understood - there is obviously a lot more information in a full memory dump.\n\nI need to investigate a bit more because it\u0027s a bit odd that the _values_ of the CWT are showing up.  If the cache is calling `Remove`, then the value should be immediately eligible for collection.  It\u0027s the CWT internal objects where I\u0027ve seen this issue.  However, if the cache is simply dropped, then there could be a delay due to the two-pass finalization.\n\nI also need to try to understand why BGCs don\u0027t help.  In other words, what happens during (or before?) the induced GCs that allows collection.  The GCs being close together in time better explains how internal CWT objects could be collected, but it isn\u0027t apparent to me how that would impact the values.\n\nI will spend some time on that.  If you could collect a full memory dump while the memory usage is high (basically, before you went and manually forced the collection before) and take a quick look at it, I think that would be very helpful.  Let\u0027s get firm evidence that it is those integer, long, etc., arrays.  For example, maybe the internal CWT table is growing to be very large and taking LOH space, and then my concerns about the CWT vs. its values are irrelevant.\n\nAlso, if you happen to know about the cache\u0027s pattern of use around `Remove` and could share that, it would also be helpful.  Thanks.",
                                           "updatedAt":  "2024-11-25T20:15:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VIIEp",
                                           "createdAt":  "2024-11-26T21:06:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "I have collected a memory dump (`dotnet-dump collect --type Heap`, which resulted in 39.5GB file). The dump was collected at the time when the memory stats and last GC were as follow:\n\n- memory\n\n```\n\"MemoryInformation\": {\n\"PhysicalMemory\": \"31.341 GBytes\",\n\"WorkingSet\": \"29.636 GBytes\",\n\"ManagedAllocations\": \"36.92 GBytes\", \u003c---- note that machine has 32GB of memory and there was almost no SWAP usage\n\"UnmanagedAllocations\": \"101.09 MBytes\",\n\"EncryptionBuffersInUse\": \"0 Bytes\",\n\"EncryptionBuffersPool\": \"0 Bytes\",\n\"EncryptionLockedMemory\": \"0 Bytes\",\n\"MemoryMapped\": \"6.91 GBytes\",\n\"AvailableMemory\": \"258.38 MBytes\",\n\"AvailableMemoryForProcessing\": \"3.805 GBytes\"\n\n```\n\n- last GC\n\n```\n\"Any\": {\n\"Compacted\": true,\n\"Concurrent\": false,\n\"FinalizationPendingCount\": 187,\n\"FragmentedHumane\": \"350.72 MBytes\",\n\"Generation\": 1,\n\"GenerationInfo\": [\n{\n\"GenerationName\": \"Heap Generation 0\",\n\"FragmentationAfterHumane\": \"0 Bytes\",\n\"FragmentationBeforeHumane\": \"392.45 KBytes\",\n\"SizeAfterHumane\": \"0 Bytes\",\n\"SizeBeforeHumane\": \"303.05 MBytes\"\n},\n{\n\"GenerationName\": \"Heap Generation 1\",\n\"FragmentationAfterHumane\": \"1.38 MBytes\",\n\"FragmentationBeforeHumane\": \"1.15 MBytes\",\n\"SizeAfterHumane\": \"11.11 MBytes\",\n\"SizeBeforeHumane\": \"30.55 MBytes\"\n},\n{\n\"GenerationName\": \"Heap Generation 2\",\n\"FragmentationAfterHumane\": \"189.57 MBytes\",\n\"FragmentationBeforeHumane\": \"213.89 MBytes\",\n\"SizeAfterHumane\": \"1.23 GBytes\",\n\"SizeBeforeHumane\": \"1.23 GBytes\"\n},\n{\n\"GenerationName\": \"Large Object Heap\",\n\"FragmentationAfterHumane\": \"159.76 MBytes\",\n\"FragmentationBeforeHumane\": \"159.76 MBytes\",\n\"SizeAfterHumane\": \"35.98 GBytes\",\n\"SizeBeforeHumane\": \"35.98 GBytes\"\n},\n{\n\"GenerationName\": \"Pinned Object Heap\",\n\"FragmentationAfterHumane\": \"2.36 KBytes\",\n\"FragmentationBeforeHumane\": \"2.36 KBytes\",\n\"SizeAfterHumane\": \"3.56 MBytes\",\n\"SizeBeforeHumane\": \"3.56 MBytes\"\n}\n],\n\"HeapSizeHumane\": \"37.23 GBytes\",\n\"HighMemoryLoadThresholdHumane\": \"28.21 GBytes\",\n\"Index\": 1494,\n\"MemoryLoadHumane\": \"27.27 GBytes\",\n\"PauseDurations\": [\n\"00:00:00.0167700\",\n\"00:00:00\"\n],\n\"PauseTimePercentage\": 0.11,\n\"PinnedObjectsCount\": 2,\n\"PromotedHumane\": \"34.56 MBytes\",\n\"TotalAvailableMemoryHumane\": \"31.34 GBytes\",\n\"TotalCommittedHumane\": \"37.61 GBytes\"\n},\n```\n\nThe server was up for almost 4 days (no induced GC meanwhile). Memory graphs looked as follow for that time frame:\n\n![Image](https://github.com/user-attachments/assets/38bc5aa4-2442-4ea1-bb99-9aa65dbb6f10)\n\n---\n\nAfter opening memory dump in `dotMemory` I can see:\n\n![Image](https://github.com/user-attachments/assets/0f7332e1-6b24-4b38-9fff-a7a0706696d3)\n\nUnreachable objects:\n\n![Image](https://github.com/user-attachments/assets/33a7ce8e-fa45-400c-9f65-c11970b731cd)\n\nFinalizable objects:\n\n![Image](https://github.com/user-attachments/assets/4f3e309c-ff46-45f3-9dee-b0225dc8df48)\n\n\nLOH is huge and empty:\n\n![Image](https://github.com/user-attachments/assets/c8b1b556-c840-4920-a490-038dabd9ce45)\n\nTop LOH heaps sorted by Utilization:\n\n![Image](https://github.com/user-attachments/assets/7f9aab4e-099b-415f-81c8-58ca55962fa2)\n\nThen scrolling a bit down shows thousands of empty LOH heaps:\n\n![Image](https://github.com/user-attachments/assets/44a2de49-be77-41d8-822d-51507de62cc2)\n\n\n\nGen2:\n\n![Image](https://github.com/user-attachments/assets/9cb87e43-c400-423b-b4aa-2d88eaaa20e6)\n\n\n`ConditionalWeakTable+Container` instances:\n\n![Image](https://github.com/user-attachments/assets/c9df7db3-ac90-4823-b882-c0907d4c5817)\n\n---\n\nAround 15 minutes after taking the memory dump I started collecting GC traces (`dotnet-trace collect --profile gc-collect`). Unfortunately it lasted only 1m 44sec and OOM killer happened.\n\nNettrace file: https://drive.google.com/file/d/1tIF5DpjVtJkjbfotBuip5vYLl101waoa/view?usp=sharing\n\nPerfview fails to open it but VS manages to do it.",
                                           "updatedAt":  "2024-11-26T21:06:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VVab7",
                                           "createdAt":  "2024-11-28T07:21:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "In the above comment in the last GC section I provided only GC kind Any . Attaching full GC info so it contains Ephemenral, Background and FullBlocking: [gc-info.json](https://github.com/user-attachments/files/17944208/gc-info.json)\n",
                                           "updatedAt":  "2024-11-28T07:21:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WW1c1",
                                           "createdAt":  "2024-12-06T09:03:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@markples did you have a chance to check the assets I provided above? Do you have any advice how can we proceed here? ",
                                           "updatedAt":  "2024-12-06T09:03:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aQzs3",
                                           "createdAt":  "2025-01-13T20:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "@arekpalinski I think there are two interesting parts to this.  The first (the lesser of the two) is why the OOM occurs at all.  i.e., why didn\u0027t the GC step in?  Part of this is that the OOM killer is stepping in, so the GC never hits a failure to get memory in order to do \"last chance\" sorts of efforts.  For this, you could disable overcommit (especially if this is basically the only work running on the machine).\n\nThe GC also will collect more aggressively as memory pressure goes up, but this needs some sort of a limit.  Running with a memory limit in a container should do this.  Setting GCHeapHardLimit can do so directly.  (edit: in that last trace that you shared, we found a memory load of 90%, so we were just starting to do the \"high memory load\" steps even though the OOM was nearing)\n\nHowever, this seems to be more of a side issue here.  There\u0027s a bit of a surprise in the final OOM symptom, but the high memory usage leading up to that is already a question.  I\u0027ll respond separately about that.",
                                           "updatedAt":  "2025-01-13T20:12:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aQ2lT",
                                           "createdAt":  "2025-01-13T20:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "Oops, one more thing about the above point.  The main strategy with high memory load is to do a GC and to give it more aggressive settings (higher generation) than we would otherwise do.  Typically, this means running a compacting gen2 right before the end, though if just did one and it was unproductive then we might not do another.\n\nFinalizers (in general, but especially so with ConditionalWeakTable\u0027s double finalization strategy) don\u0027t interact well with this.  A GC that \"collects\" finalizable objects of course doesn\u0027t actually reclaim the memory but queues them for actual finalization and then another GC pass (or two for CWT) is needed to collect the object after finalization is done.  And since these objects are typically in gen2 by then, they need multiple gen2s so the \"do one final gen2\" strategy isn\u0027t sufficient.",
                                           "updatedAt":  "2025-01-13T20:17:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aRGZo",
                                           "createdAt":  "2025-01-13T20:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "The second, and probably more interesting part, is the overall memory usage.  I believe that this is different from the other CWT examples that I have seen.  They accumulate many of those Container objects due to the CWT inner workings.  I don\u0027t think we\u0027ve seen evidence of that - mainly the Container objects aren\u0027t a significant part of the memory usage.  A variant on the Container issue is that they can be queued for finalization but waiting to run, but in all of the traces that you\u0027ve shared, the finalization queue is being cleared basically right after each GC that produces work for it.  This includes that final trace that had 5 GCs before the OOM.\n\nThis one, of course, has the strange appearance of the unused LOH space that climbs and climbs.  Sometimes it clears itself out. You\u0027ve been able to get the memory back with multiple induced GCs.  And sometimes it runs to OOM.  It is suspicious when induced GCs help.  While they can change some settings (higher generation, do compaction, etc.), they don\u0027t have any impact on what is reachable.  A background GC sees the same objects and links.  And in fact, in the first trace (where memory was reclaimed without inducing GCs), a background GC is what reclaims memory.  The subsequent compacting GC handles fragmentation that a BGC is unable to handle.  (This pattern is what we want - we only do background GCs while we see that they are getting basically all of the possible benefits, and then we do a blocking one when we see that we can reclaim more.)\n\nI believe that we need to better understand the program\u0027s cache (CWT) behavior.  The successful trace points to some sort of cache-clearing event happening since we have a bunch of BGCs that don\u0027t reclaim the space and then one does.  The induced GC case is odd because not only does it take 3 induced GCs but a background BGC runs in the meantime, so there are 2 gen2 GCs.  We do expect some delay due to finalization.  Is there some kind of gen2 callback that responds differently to normal (not BGC)?  Is the timing coincidental?\n\nAs part of this, I have some suspicion that the reporting tools are being confused by CWT.  The values are not reachable via normal managed links.  A CWT uses internal runtime functionality (dependent handles) to link the key and value.  The GC knows to keep the value if the key is live, but the values won\u0027t have apparent roots unless the runtime functionality is replicated.  Under this conjecture, the large arrays are actually still live.\n\nDo you have a way to get logging about the caches?  Are they limited in size or time?",
                                           "updatedAt":  "2025-01-13T20:52:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6abKWH",
                                           "createdAt":  "2025-01-14T18:28:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markples",
                                           "body":  "One other thing - if you expand the GC tracing to include verbose events, we should see every object being finalized.  This would help us confirm the theory that there isn\u0027t a lot of churning of CWT Container objects.  Thank you!",
                                           "updatedAt":  "2025-01-14T18:28:36Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "LOH increases its size until OOM",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110571",
        "createdAt":  "2024-12-10T13:47:21Z",
        "number":  110571,
        "author":  "sfiruch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T06:45:33Z",
        "body":  "The ServerGC threads in my application spend approx. 50% of their time in `SVR::memcopy`\n\nhttps://github.com/dotnet/runtime/blob/731a96b0018cda0c67bb3fab7a4d06538fe2ead5/src/coreclr/gc/gc.cpp#L1746-L1755\n\nIn x64 the relevant loop looks like this:\n```asm\n@loop:\nmov rax, qword ptr [r10+r9*1]\nmov qword ptr [r9], rax\nlea r9, ptr [r9+0x8]\nsub r11, 0x1\njnz 0x18016b901 \u003cloop\u003e\n```\n\nIf I\u0027m not mistaken, this is a regular memcpy, but without vectorization or other optimizations? Perhaps SVR::memcopy could be implemented with `memcpy` instead, which is more optimized?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmfnVcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6W5nWx",
                                           "createdAt":  "2024-12-10T13:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-10T13:47:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W8m7a",
                                           "createdAt":  "2024-12-10T17:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-bZQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HighPerfDotNet",
                                                                               "createdAt":  "2024-12-10T18:16:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The loop in the SVR::memcopy C++ code of .NET 9.0.0 is unrolled to copy four pointers in each iteration, thus 4*64 bits on amd64; but disassembling the binary for Windows shows the compiler has replaced these four assignments with a nested loop that runs four iterations.\n\n```\n0:000\u003e lmvm coreclr\nstart             end                 module name\n00007ffe`77200000 00007ffe`776b3000   coreclr    (private pdb symbols)  C:\\ProgramData\\dbg\\sym\\coreclr.pdb\\D5F6BC0E477548FEAA685A1872DEF3591\\coreclr.pdb\n    Loaded symbol image file: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\9.0.0\\coreclr.dll\n    Image path: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\9.0.0\\coreclr.dll\n    Image name: coreclr.dll\n    Timestamp:        Tue Oct 29 04:35:40 2024 (672049FC)\n    CheckSum:         004A8D7D\n    ImageSize:        004B3000\n    File version:     9.0.24.52809\n    Product version:  9.0.24.52809\n    File flags:       0 (Mask 3F)\n    File OS:          4 Unknown Win32\n    File type:        0.0 Unknown\n    File date:        00000000.00000000\n    Translations:     0409.04b0\n    Information from resource tables:\n        CompanyName:      Microsoft Corporation\n        ProductName:      Microsoft® .NET\n        InternalName:     CoreCLR.dll\n        OriginalFilename: CoreCLR.dll\n        ProductVersion:   9,0,24,52809 @Commit: 9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3\n        FileVersion:      9,0,24,52809 @Commit: 9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3\n        FileDescription:  .NET Runtime\n        LegalCopyright:   © Microsoft Corporation. All rights reserved.\n        Comments:         Flavor=Retail\n0:000\u003e x coreclr!*::memcopy\n00007ffe`77363ff8 coreclr!SVR::memcopy (unsigned char *, unsigned char *, unsigned int64)\n00007ffe`77363ff8 coreclr!WKS::memcopy (unsigned char *, unsigned char *, unsigned int64)\n0:000\u003e uf coreclr!SVR::memcopy\ncoreclr!SVR::memcopy [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1698]:\n 1698 00007ffe`77363ff8 eb2c            jmp     coreclr!SVR::memcopy+0x2e (00007ffe`77364026)\n\ncoreclr!SVR::memcopy+0x2 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1711]:\n 1711 00007ffe`77363ffa 4c8bd2          mov     r10,rdx\n 1711 00007ffe`77363ffd 4c8bc9          mov     r9,rcx\n 1711 00007ffe`77364000 4c2bd1          sub     r10,rcx\n 1711 00007ffe`77364003 41bb04000000    mov     r11d,4\n\ncoreclr!SVR::memcopy+0x11 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1711]:\n 1711 00007ffe`77364009 4b8b040a        mov     rax,qword ptr [r10+r9]\n 1711 00007ffe`7736400d 498901          mov     qword ptr [r9],rax\n 1711 00007ffe`77364010 4d8d4908        lea     r9,[r9+8]\n 1711 00007ffe`77364014 4983eb01        sub     r11,1\n 1711 00007ffe`77364018 75ef            jne     coreclr!SVR::memcopy+0x11 (00007ffe`77364009)\n\ncoreclr!SVR::memcopy+0x22 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1715]:\n 1715 00007ffe`7736401a 4883c120        add     rcx,20h\n 1716 00007ffe`7736401e 4883c220        add     rdx,20h\n 1718 00007ffe`77364022 4983e820        sub     r8,20h\n\ncoreclr!SVR::memcopy+0x2e [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1718]:\n 1718 00007ffe`77364026 4983f820        cmp     r8,20h\n 1718 00007ffe`7736402a 73ce            jae     coreclr!SVR::memcopy+0x2 (00007ffe`77363ffa)\n\ncoreclr!SVR::memcopy+0x34 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1722]:\n 1722 00007ffe`7736402c 41f6c010        test    r8b,10h\n 1722 00007ffe`77364030 7428            je      coreclr!SVR::memcopy+0x62 (00007ffe`7736405a)\n\ncoreclr!SVR::memcopy+0x3a [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1724]:\n 1724 00007ffe`77364032 4c8bd2          mov     r10,rdx\n 1724 00007ffe`77364035 4c8bc9          mov     r9,rcx\n 1724 00007ffe`77364038 4c2bd1          sub     r10,rcx\n 1724 00007ffe`7736403b 41bb02000000    mov     r11d,2\n\ncoreclr!SVR::memcopy+0x49 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1724]:\n 1724 00007ffe`77364041 4b8b0411        mov     rax,qword ptr [r9+r10]\n 1724 00007ffe`77364045 498901          mov     qword ptr [r9],rax\n 1724 00007ffe`77364048 4d8d4908        lea     r9,[r9+8]\n 1724 00007ffe`7736404c 4983eb01        sub     r11,1\n 1724 00007ffe`77364050 75ef            jne     coreclr!SVR::memcopy+0x49 (00007ffe`77364041)\n\ncoreclr!SVR::memcopy+0x5a [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1726]:\n 1726 00007ffe`77364052 4883c110        add     rcx,10h\n 1727 00007ffe`77364056 4883c210        add     rdx,10h\n\ncoreclr!SVR::memcopy+0x62 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1731]:\n 1731 00007ffe`7736405a 41f6c008        test    r8b,8\n 1731 00007ffe`7736405e 7406            je      coreclr!SVR::memcopy+0x6e (00007ffe`77364066)\n\ncoreclr!SVR::memcopy+0x68 [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1733]:\n 1733 00007ffe`77364060 488b02          mov     rax,qword ptr [rdx]\n 1733 00007ffe`77364063 488901          mov     qword ptr [rcx],rax\n\ncoreclr!SVR::memcopy+0x6e [D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp @ 1735]:\n 1735 00007ffe`77364066 c3              ret\n```\n\n[Compiler Explorer shows x64 msvc v19.30 VS17.0 `-O1` doing this kind of conversion](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIM6SuADJ4DJgAcj4ARpjE/gEADqgKhE4MHt6%2B/qRJKY4CIWGRLDFxZgF2mA5pQgRMxAQZPn4VmPb5DLX1BIUR0bHxtnUNTVkVwz2hfSUD5QCUtqhexMjsHOYAzKHI3lgA1CYbbgoE%2BIIAdAiH2CYaAIKb27uYB0cn6FhUl9e3D/deKSMe2UABUAEoAfVBYNeABE9l5QgQEgRiBCCAAqQ5We6/ABuqDw6D2aASAE8IIjBAAOdEYvboNgsUgIpG0zF7BRMlkpABemHRnLw/LmvxMAHYcXc9jKSQITkL%2BYKFLzJCjiHDFZhUFQINCoeC5hjJNjfrK9ngqHsIHyXmAwId4Sq1ajRfdzRKpebzehUGbvTLPf6A%2BaoProXNGZgWKKAKwWDQmWPwx3WvXgg1guZc6NxhNJ2Gm90h0PpyERqMxpMWLgFzVhjMRnNV%2BO15NF6Ul2UN8uGyt5sx11M9zPZpkDgsdrvdsuj/vVjZDjbwkdN8cLycbL3ThlMg6WVPO9VTnfN/dWZec1XHrfB70SwvFgMAdwQdBeUFtewAtIfr67XhuS8j1dE9A3FR8HggjgFloThY14PwOC0UhUE4NxrGsTklhWF5Nh4UgCE0GCFgAaxAWMNH0ThJEQ4jUM4XgFBAKiiOQmDSDgWAkDQFgEnfMgKAgXj%2BPoOI8WQBIEghPEuAATghDYNAhAA1IQuHFCFlNUAA2aQaFoAhYmYiAonoqJQnqMlOAIizmGIMkAHkom0Ko2II3i2EERyGFoaz2NILAoi8YA3DEWhmO4XgsBYQxgHEAL8GINy8DxTBIpQzBVCqLwjJs3gkTaejaDwKJiCsjwsHo1E8BYfLSDS4gomSTBYWjOKSqMYiFioAxgAUFS8EwZ9HISRh6v4QQRDEdgpBkQRFBUdQAt0Lh9DilBMMsfRSuYyAFlQFE0ki79HII1BGuIIl0vgBZKmqZwIFcUY/DW4IpmKUo9FyVIBBe77kl%2Bhhek%2BgY1vujouhGTxmj0CGagmEH%2BjicGJn%2B1HuiRmYUbunDVgkWD4LogK0I4PZdMkPYWAUCS9lkuTziUvY1I084NGtXBCBIfcNi4OZeDYrQ5jIiiqLgjhaNIJCUNJpiWMI7rCY4MxiZlxiFfY4WGuMtIQEkIA%3D%3D), but not `-O2`.",
                                           "updatedAt":  "2024-12-10T18:21:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W8vAE",
                                           "createdAt":  "2024-12-10T18:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "coreclr!SVR::memcopy in .NET 6.0.2 for Windows AMD64 has likewise been de-unrolled (rerolled?) by the compiler.\n\ncoreclr!SVR::memcopy in .NET Core 2.1.30 for Windows AMD64 however preserves the unrolling.",
                                           "updatedAt":  "2024-12-10T18:10:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W-YAP",
                                           "createdAt":  "2024-12-10T21:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "`O1` is shorthand for `Minimize Size`, so it makes sense that optimizations include finding duplicate patterns and merging them more aggressively.\n\n`O2` is shorthand for `Maximize Speed` and would be the thing to use if we want the best performance (albeit at the cost of larger codegen in many cases, naturally)\n\n(https://learn.microsoft.com/en-us/cpp/build/reference/o1-o2-minimize-size-maximize-speed?view=msvc-170)",
                                           "updatedAt":  "2024-12-10T21:31:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W-o8e",
                                           "createdAt":  "2024-12-10T22:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I guess the next step should be to add some `#pragma` that prevents this specific function from being optimised for size, and measure how that change affects the throughput of an application.",
                                           "updatedAt":  "2024-12-10T22:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W-yRS",
                                           "createdAt":  "2024-12-10T22:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "Calling `memcpy` might be easier than optimizing `SVR::memcopy`. Typical `memcpy` implementations use SIMD registers. I don\u0027t know enough about GC-specific requirements - but the compiler optimized version makes it look as if using SIMD registers should be possible.",
                                           "updatedAt":  "2024-12-10T22:10:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W_EP5",
                                           "createdAt":  "2024-12-10T22:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "SIMD may not be possible to use due to atomicity requirements.\n\nFor example, on x64 only 128-bit aligned vectors are guaranteed atomic; there is no such guarantee for 256-bit aligned vectors or unaligned vectors. This could theoretically result in tears of `ptr-width` values in various edge cases.",
                                           "updatedAt":  "2024-12-10T22:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W_OVM",
                                           "createdAt":  "2024-12-10T23:01:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "\u003e SIMD may not be possible to use due to atomicity requirements.\n\u003e \n\u003e For example, on x64 only 128-bit aligned vectors are guaranteed atomic; there is no such guarantee for 256-bit aligned vectors or unaligned vectors. This could theoretically result in tears of `ptr-width` values in various edge cases.\n\nThat\u0027s a good point! Even in that case 128-bit registers and unrolling might be applicable.",
                                           "updatedAt":  "2024-12-10T23:01:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W_THs",
                                           "createdAt":  "2024-12-10T23:10:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Sorry, missed a comment in there; they are only atomic if AVX is also implemented. They are not guaranteed atomic on downlevel hardware. So you effectively need to manually code it with a dynamic (cached) check for AVX support.",
                                           "updatedAt":  "2024-12-10T23:10:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XjQ2w",
                                           "createdAt":  "2024-12-14T00:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hi @sfiruch, do you have a repro and/or traces you can share which show 50% time being spent in memcpy? ",
                                           "updatedAt":  "2024-12-14T00:59:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Xl-Ym",
                                           "createdAt":  "2024-12-14T19:06:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "\u003e Hi [@sfiruch](https://github.com/sfiruch), do you have a repro and/or traces you can share which show 50% time being spent in memcpy?\n\nSure thing! Here\u0027s a trace, with a ServerGC pre-selected: https://share.firefox.dev/4iAnIzg. It\u0027s from a data-processing pipeline that allocates a lot.\n\n(I can also share the `.etl` if you prefer. Just let me know how to share it privately)",
                                           "updatedAt":  "2024-12-14T19:06:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Z3dOK",
                                           "createdAt":  "2025-01-09T23:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Hi @sfiruch, just took a look at the link you sent and it seems like the % of samples from SVR::memcopy is 13% - it\u0027s probably best if you share the trace to musharm@microsoft.com? We can take a look from there. Thanks!",
                                           "updatedAt":  "2025-01-09T23:36:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Z884d",
                                           "createdAt":  "2025-01-10T14:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "\u003e For example, on x64 only 128-bit aligned vectors are guaranteed atomic; there is no such guarantee for 256-bit aligned vectors or unaligned vectors. This could theoretically result in tears of `ptr-width` values in various edge cases.\n\nFor context, according to \"Intel® 64 and IA-32 Architectures Software Developer Manuals, volume 3A\" a qword accesses is not guaranteed atomic if it spans a cache-line boundary. Does anyone know if the runtime never ever uses pointers spanning a cache-line-boundary in the memory blocks passed to SVR::memcopy? If that\u0027s not always the case, even the current implementation might be broken.\n\nUpdate: Just tried various things, and couldn\u0027t get the runtime to use unaligned pointers. It appears to be a non-issue.\n\nTL;DR - The copy on x64 could use qword copies for the unaligned first/last elements, and copy using 128bit SSE otherwise, ideally unrolled a bit.",
                                           "updatedAt":  "2025-01-10T16:29:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Z-dVz",
                                           "createdAt":  "2025-01-10T17:10:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "\u003e Hi [@sfiruch](https://github.com/sfiruch), just took a look at the link you sent and it seems like the % of samples from SVR::memcopy is 13% - it\u0027s probably best if you share the trace to [musharm@microsoft.com](mailto:musharm@microsoft.com)? We can take a look from there. Thanks!\n\nSure thing, I sent you the ETL via mail.\n\nAlso, did you notice that SVR::memcopy occurs three times in the flamegraph? The first one is only 13%, but including the other two occurrences it represents approx. 50%.",
                                           "updatedAt":  "2025-01-10T17:10:22Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[GC] Could SVR::memcopy be more efficient?",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113193",
        "createdAt":  "2025-03-06T06:47:13Z",
        "number":  113193,
        "author":  "zackliu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T20:37:46Z",
        "body":  "Currently, the runtime finds the lowest memory limit in the hierarchy https://github.com/dotnet/runtime/pull/93611 However, in the real cgroupv2 hierarchy, the memory management needs to be more complex. \n\nFor example, if the parent cgroup has a 1000MB memory limit and contains four subcgroups, each with a 500MB limit, the runtime should, of course, respect the 500MB limit of its own subcgroup. But if the total memory usage in the parent cgroup approaches 1000MB, the runtime should also recognize the low memory pressure at the parent level and trigger GC accordingly.\n\nI think this can be abstracted as a common scenario: how to make the runtime aware of memory pressure from a larger environment. In the issue https://github.com/dotnet/runtime/issues/93030 there\u0027re some proposals, and I think we need to proceed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOohn-Gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6h81x1",
                                           "createdAt":  "2025-03-12T08:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "this means we actually had a problem when we added the hierarchy support? because `GetCGroupMemoryLimitV2` would retrieve the smallest `memory.max` when it walks up the hierarchy, but `GCToOSInterface::GetMemoryStatus` would use just the current cgroup\u0027s physical memory load and divide it with a potentially much smaller limit that `GetCGroupMemoryLimitV2` retrieved, instead of doing what `GetCGroupMemoryLimitV2` does but with memory load, ie, walk up the hierarchy and retrieve the smallest memory load at each level. @janvorli, what do you think? of course this would mean walking the hierarchy every time we ask for memory load... \n\nactually, looking at the code for `GetCGroupMemoryLimitV2`, does this account for the scenario where my process is running in a cgroup with memroy.max of 5GB, its parent cgroup has a memory.max of 3GB but does not enable memory in its `subtree_control`, shouldn\u0027t it get 5GB instead of 3GB? but this impl would get 3GB, right? since it does not check `subtree_control`. ",
                                           "updatedAt":  "2025-03-12T08:46:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iBMYa",
                                           "createdAt":  "2025-03-12T15:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Maoni0 let me refresh my memory on how the hierarchical limits work before answering the questions. It\u0027s been a while since I\u0027ve made that change. \nHowever, I think that for the last question, if the subtree_control disables memory then no child node can re-enable it. See:\n\u003e Top-down Constraint[¶](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#top-down-constraint)\nResources are distributed top-down and a cgroup can further distribute a resource only if the resource has been distributed to it from the parent. This means that all non-root “cgroup.subtree_control” files can only contain controllers which are enabled in the parent’s “cgroup.subtree_control” file. A controller can be enabled only if the parent has the controller enabled and a controller can’t be disabled if one or more children have it enabled.\n",
                                           "updatedAt":  "2025-03-12T15:11:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iB7LH",
                                           "createdAt":  "2025-03-12T16:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e doing what `GetCGroupMemoryLimitV2` does but with memory load, ie, walk up the hierarchy and retrieve the smallest memory load at each level.\n\nWe would actually need to retrieve the _largest_ memory load in the hierarchy, not the smallest, right? And yes, it seems it would make sense to do that to handle the scenario described by the issue.\n\n",
                                           "updatedAt":  "2025-03-12T16:14:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iD__f",
                                           "createdAt":  "2025-03-12T19:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "\u003e We would actually need to retrieve the _largest_ memory load in the hierarchy, not the smallest, right? And yes, it seems it would make sense to do that to handle the scenario described by the issue.\n\noops, of course by smallest I meant largest in this case😆\n",
                                           "updatedAt":  "2025-03-12T19:57:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iGf4a",
                                           "createdAt":  "2025-03-13T02:12:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zackliu",
                                           "body":  "Getting the load in the hierarchy seems the correct behavior. And in the container scenario, as there\u0027s cgroup namespace, the root cgroup that runtime can see is the container\u0027s cgroup. It\u0027s usually not too deep.",
                                           "updatedAt":  "2025-03-13T02:12:20Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Better supporting memory management in cgroup hierarchy",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113693",
        "createdAt":  "2025-03-19T14:40:16Z",
        "number":  113693,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T15:00:34Z",
        "body":  "we will likely use the segmented mode of coreclr gc. nativeaot uses the same gc and runtimelabs nativeaot/wasm is already using it\n\n- check whether we want to configure segment sizes for wasm, WKS::GCHeap::Initialize()",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwUc3sg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6jIbAT",
                                           "createdAt":  "2025-03-19T14:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-19T14:40:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jIjPZ",
                                           "createdAt":  "2025-03-19T14:50:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-19T14:50:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jNybp",
                                           "createdAt":  "2025-03-19T22:18:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-19T22:18:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A9WX9",
                                           "createdAt":  "2025-08-29T14:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "note: the `mmap` implementation in emscripten/wasi-libc is very limitted and leads to memory leaks and fragmentation. \nIn mono we don\u0027t use it anymore. \n\n- Instead we use dlmalloc `posix_memalign`-\u003e `sbrk` to allocate pages for the GC pages for small objects.\n- For large objects we don\u0027t even use LOH because of the `posix_memalign` overhead for LOH pages.\n\nSee\nhttps://github.com/dotnet/runtime/pull/118099\nhttps://github.com/dotnet/runtime/pull/108512\n",
                                           "updatedAt":  "2025-08-29T14:52:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A_gKq",
                                           "createdAt":  "2025-08-29T18:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "runtimelab has GC PAL implementation without mmap that appears to be working well: https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/coreclr/gc/wasm/gcenv.wasm.cpp . We may want to bring that over (as the first step at least).",
                                           "updatedAt":  "2025-08-29T18:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BMwSY",
                                           "createdAt":  "2025-09-01T08:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e runtimelab has GC PAL implementation without mmap that appears to be working well: https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/coreclr/gc/wasm/gcenv.wasm.cpp . We may want to bring that over (as the first step at least).\n\nThey call `memset` on the page when allocated and when freed too. \nI wonder if that\u0027s necessary or duplicated by allocation of individual GC heap objects. It\u0027s quite expensive on wasm.\n\nThey also ignore partial release of a page so far.\n\nOther than that it looks like good start.",
                                           "updatedAt":  "2025-09-01T08:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BRzey",
                                           "createdAt":  "2025-09-01T15:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I wonder if that\u0027s necessary or duplicated by allocation of individual GC heap objects\n\nIt is necessary. It should not be duplicated by allocation of individual GC heap object. The GC keeps track of what is zero initialized and takes advantage of the newly committed memory to be zero initialized. Alternatively, we can delete the zero initialization from here and change the GC to expect newly committed memory to not be zero initialized for wasm.",
                                           "updatedAt":  "2025-09-01T15:00:34Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[wasm coreclr] gc",
        "labels":  [
                       "arch-wasm",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114222",
        "createdAt":  "2025-04-03T16:55:44Z",
        "number":  114222,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:03:17Z",
        "body":  "## Build Information\n\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908\nBuild error leg or test failing: coreclr linux x64 Checked no_tiered_compilation @ Ubuntu.2004.Amd64.Open\n\n## Error Message\n\n```json\n{\n  \"ErrorMessage\" : [\"now try Int32.MaxValue-0:\", \"Array dimensions exceeded supported range.\"],\n  \"BuildRetry\" : false,\n  \"ExcludeConsoleLog\" : false\n}\n```\n\n- PR: https://github.com/dotnet/runtime/pull/113475\n- Queue: `coreclr linux x64 Checked no_tiered_compilation`\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908\u0026view=logs\u0026j=c81c7d5b-8afb-5809-79b1-a180a61efadc\u0026t=a1c46222-07fc-5cf8-54f7-a53ed2cd901a\u0026l=30\n- Log file: https://helixr1107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-113475-merge-1761bf7d8f8c457b82/PayloadGroup0/1/console.0a41e3f4.log?helixlogtype=result\n- Output:\n```\n Starting:    GC.LargeMemory.XUnitWrapper (parallel test collections = on, max threads = 2)\n    GC/LargeMemory/Regressions/largearraytest/largearraytest.sh [FAIL]\n      /datadisks/disk1/work/AFAD09E5/w/B36F09DF/e/GC/LargeMemory/Regressions/largearraytest/largearraytest.sh: line 454: 63489 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\n      \n      Return code:      1\n      Raw output file:      /datadisks/disk1/work/AFAD09E5/w/B36F09DF/uploads/Reports/GC.LargeMemory/Regressions/largearraytest/largearraytest.output.txt\n      Raw output:\n      BEGIN EXECUTION\n      /datadisks/disk1/work/AFAD09E5/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true largearraytest.dll \u0027\u0027\n      now try Int32.MaxValue-0: \n      Array dimensions exceeded supported range.\n      now try Int32.MaxValue-1: \n      Array dimensions exceeded supported range.\n      now try Int32.MaxValue-2: \n      Array dimensions exceeded supported range.\n      now try Int32.MaxValue-3: \n      Array dimensions exceeded supported range.\n      now try Int32.MaxValue-4: \n      Array dimensions exceeded supported range.\n...\n...\n      Array dimensions exceeded supported range.\n      now try Int32.MaxValue-56: 2147483591\n      now try Int32.MaxValue-57: 2147483590\n      now try Int32.MaxValue-58: 2147483589\n      now try Int32.MaxValue-59: Expected: 100\n      Actual: 137\n      END EXECUTION - FAILED\n      Test failed. Trying to see if dump file was created in /home/helixbot/dotnetbuild/dumps since 4/3/2025 1:07:47 AM\n      Test Harness Exitcode is : 1\n      To run the test:\n      \u003e set CORE_ROOT=/datadisks/disk1/work/AFAD09E5/p\n      \u003e /datadisks/disk1/work/AFAD09E5/w/B36F09DF/e/GC/LargeMemory/Regressions/largearraytest/largearraytest.sh\n      Expected: True\n      Actual:   False\n      Stack Trace:\n           at GC_LargeMemory._Regressions_largearraytest_largearraytest_._Regressions_largearraytest_largearraytest_sh()\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n           at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n      Output:\n        /datadisks/disk1/work/AFAD09E5/w/B36F09DF/e/GC/LargeMemory/Regressions/largearraytest/largearraytest.sh: line 454: 63489 Killed                  $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\n        \n        Return code:      1\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1002908\r\n**Error message validated:** `[now try Int32.MaxValue-0: Array dimensions exceeded supported range.`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 4/3/2025 4:56:08 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153192](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153192)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153192\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31855842\u0026resultId=113288)|dotnet/runtime#119751|\r\n|[1153042](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153042)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153042\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31854804\u0026resultId=113288)|dotnet/runtime#119791|\r\n|[1153034](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153034)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153034\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31854668\u0026resultId=113288)|dotnet/runtime#119829|\r\n|[1153053](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153053)|dotnet/runtime|[GC\\\\Features\\\\HeapExpansion\\\\plug\\\\plug.cmd](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153053\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31854242\u0026resultId=116960)||\r\n|[1148595](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148595)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148595\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31722384\u0026resultId=120842)||\r\n|[1148527](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148527)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148527\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31719584\u0026resultId=120842)||\r\n|[1148270](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148270)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148270\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31709590\u0026resultId=120840)||\r\n|[1146708](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146708)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146708\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31648566\u0026resultId=113288)|dotnet/runtime#118535|\r\n|[1146688](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146688)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146688\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31647870\u0026resultId=113288)|dotnet/runtime#118540|\r\n|[1146634](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146634)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146634\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31646954\u0026resultId=113288)|dotnet/runtime#118491|\r\n|[1146612](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146612)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146612\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31644496\u0026resultId=120842)||\r\n|[1146613](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146613)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146613\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31643728\u0026resultId=113288)||\r\n|[1146542](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146542)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146542\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31641176\u0026resultId=120840)||\r\n|[1145669](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145669)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145669\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31612972\u0026resultId=120840)||\r\n|[1145623](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145623)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145623\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31608698\u0026resultId=113288)||\r\n|[1145418](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145418)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145418\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31605524\u0026resultId=113288)|dotnet/runtime#118540|\r\n|[1145377](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145377)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145377\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31604156\u0026resultId=120940)||\r\n|[1145385](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145385)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145385\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31604434\u0026resultId=113288)|dotnet/runtime#118537|\r\n|[1144728](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144728)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144728\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31579094\u0026resultId=120840)||\r\n|[1139240](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139240)|dotnet/runtime|[PayloadGroup0.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139240\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31388494\u0026resultId=113288)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|4|7|20|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpX4Zgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lfLOk",
                                           "createdAt":  "2025-04-03T16:56:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T16:56:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lfhmC",
                                           "createdAt":  "2025-04-03T17:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "I am guessing this is related to container size. Probably needs to be updated for the memory size it\u0027s running in. ",
                                           "updatedAt":  "2025-04-03T17:39:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[8.0] GC Large array test failure",
        "labels":  [
                       "os-linux",
                       "arch-x64",
                       "area-GC-coreclr",
                       "runtime-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114738",
        "createdAt":  "2025-04-16T14:32:51Z",
        "number":  114738,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T15:25:28Z",
        "body":  "## Description\n\nThis is a tracking issue for investigation work on potential benefits of different GC variants on Android:\n- [ ] Investigate what tuning parameters we should adjust for regions GC for mobile [ref](https://github.com/dotnet/runtime/pull/114448#issuecomment-2807085481)\n- [ ] Investigate using server GC for Android apps [ref](https://github.com/dotnet/runtime/pull/114448#issuecomment-2807085481)\n- [ ] TBD - any other potential benefit",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp4bwHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nefHA",
                                           "createdAt":  "2025-04-16T14:33:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-16T14:33:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nefYE",
                                           "createdAt":  "2025-04-16T14:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-16T14:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nhvAc",
                                           "createdAt":  "2025-04-16T20:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOscsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2025-04-17T08:59:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "instead of investigating whether we should use segments GC vs regions GC, I would put \"investigate what tuning parameters we should adjust for regions GC for mobile\". for example, one obvious thing to adjust is the region size - the default is 4mb, for small heaps you could totally adjust this down to 1mb.\n\nthe reason why I would not investigate using segments GC to begin with is it\u0027s something we are hoping to phase out so fixing bugs in it is inefficient (it just takes care of a small percentage of scenarios that still use it) and there will be fewer and fewer engineers with even knowledge about it.",
                                           "updatedAt":  "2025-04-16T20:04:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[android] Investigate using different GC variants with CoreCLR on Android",
        "labels":  [
                       "area-GC-coreclr",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115110",
        "createdAt":  "2025-04-28T12:18:58Z",
        "number":  115110,
        "author":  "hyabean",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T15:44:15Z",
        "body":  "### Description\n\nIn server GC mode and concurrent GC mode, GC.WaitForFullGCApproach() does not return when the remaining memory is reduced to zero. \nThe code is based on the example from [GC.RegisterForFullGCNotification(Int32, Int32) Method (System)](https://learn.microsoft.com/en-us/dotnet/api/system.gc.registerforfullgcnotification?view=net-8.0).\n\n\n\n### Reproduction Steps\n\nhttps://github.com/hyabean/GCNotifyTest\n\n### Expected behavior\n\nprint \"GC Notification raised.\"\n\n### Actual behavior\n\nGC.WaitForFullGCApproach() not return even when the remaining memory is 0%.\n\n2025/4/28 19:41:24:Registered for GC notification.\n2025/4/28 19:41:25:Gen 2 collection count: 1\n2025/4/28 19:41:25:allocCount: 1000000\n2025/4/28 19:41:25:allocCount: 2000000\n2025/4/28 19:41:25:allocCount: 3000000\n2025/4/28 19:41:25:allocCount: 4000000\n2025/4/28 19:41:26:allocCount: 5000000\n2025/4/28 19:41:26:allocCount: 6000000\n2025/4/28 19:41:26:allocCount: 7000000\n2025/4/28 19:41:26:Gen 2 collection count: 2\n2025/4/28 19:41:27:allocCount: 8000000\n2025/4/28 19:41:27:allocCount: 9000000\n2025/4/28 19:41:27:allocCount: 10000000\n2025/4/28 19:41:27:allocCount: 11000000\n2025/4/28 19:41:28:allocCount: 12000000\n2025/4/28 19:41:28:allocCount: 13000000\n2025/4/28 19:41:28:Gen 2 collection count: 3\n2025/4/28 19:41:28:allocCount: 14000000\n2025/4/28 19:41:29:allocCount: 15000000\n2025/4/28 19:41:29:allocCount: 16000000\n2025/4/28 19:41:29:allocCount: 17000000\n2025/4/28 19:41:30:allocCount: 18000000\n2025/4/28 19:41:30:Gen 2 collection count: 4\n2025/4/28 19:41:32:allocCount: 19000000\n2025/4/28 19:41:34:allocCount: 20000000\n2025/4/28 19:41:35:allocCount: 21000000\n2025/4/28 19:41:35:Gen 2 collection count: 5\n2025/4/28 19:41:36:allocCount: 22000000\n2025/4/28 19:41:39:allocCount: 23000000\n2025/4/28 19:41:43:Gen 2 collection count: 6\n2025/4/28 19:41:48:allocCount: 24000000\n2025/4/28 19:41:50:allocCount: 25000000\n2025/4/28 19:41:52:allocCount: 26000000\n2025/4/28 19:41:52:allocCount: 27000000\n2025/4/28 19:41:53:Gen 2 collection count: 7\n2025/4/28 19:42:34:allocCount: 28000000\n2025/4/28 19:42:35:allocCount: 29000000\n2025/4/28 19:42:36:Gen 2 collection count: 8\n2025/4/28 19:43:16:allocCount: 30000000\n2025/4/28 19:43:17:allocCount: 31000000\n2025/4/28 19:43:18:allocCount: 32000000\n2025/4/28 19:43:19:allocCount: 33000000\n2025/4/28 19:43:20:Gen 2 collection count: 9\n2025/4/28 19:43:20:allocCount: 34000000\n2025/4/28 19:44:21:allocCount: 35000000\n2025/4/28 19:44:22:allocCount: 36000000\n2025/4/28 19:44:22:Gen 2 collection count: 10\n\n[PerfViewData_gcnotify3.etl.zip](https://github.com/user-attachments/files/19939677/PerfViewData_gcnotify3.etl.zip)\n[PerfViewData_gcnotify3.log.txt](https://github.com/user-attachments/files/19939678/PerfViewData_gcnotify3.log.txt)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8.0.15\nWindows 10 专业版 22H2\nx64\n\n### Other information\n\nSometimes, the notification is triggered at the beginning of program execution, but it stops being \nafter a few tens of seconds. The memory remains full, and both garbage collection (GC) and allocations are very slow.\n\n[log triggered at begin.txt](https://github.com/user-attachments/files/19939722/log.triggered.at.begin.txt)\n\n2025/4/28 19:57:45:Registered for GC notification.\n2025/4/28 19:57:45:Gen 2 collection count: 1\n2025/4/28 19:57:45:allocCount: 1000000\n2025/4/28 19:57:45:allocCount: 2000000\n2025/4/28 19:57:46:allocCount: 3000000\n2025/4/28 19:57:46:allocCount: 4000000\n2025/4/28 19:57:46:allocCount: 5000000\n2025/4/28 19:57:46:allocCount: 6000000\n2025/4/28 19:57:47:allocCount: 7000000\n2025/4/28 19:57:47:GC Notification raised.\n2025/4/28 19:57:47:Gen 2 collection count: 2\n2025/4/28 19:57:47:Redirecting requests.\n2025/4/28 19:57:47: bAllocate : False\n...\n2025/4/28 19:57:47: bAllocate : False\n2025/4/28 19:57:47:Induced a collection.\n2025/4/28 19:57:47: bAllocate : False\n2025/4/28 19:57:47: bAllocate : False\n2025/4/28 19:57:47:GC Notification not applicable 2.\n2025/4/28 19:57:47: bAllocate : False\n2025/4/28 19:57:47:Accepting requests again.\n2025/4/28 19:57:47:Gen 2 collection count: 3\n2025/4/28 19:57:47:allocCount: 8000000\n2025/4/28 19:57:47:allocCount: 9000000\n2025/4/28 19:57:47:allocCount: 10000000\n2025/4/28 19:57:47:allocCount: 11000000\n2025/4/28 19:57:47:allocCount: 12000000\n2025/4/28 19:57:47:allocCount: 13000000\n2025/4/28 19:57:47:allocCount: 14000000\n2025/4/28 19:57:48:GC Notification raised.\n2025/4/28 19:57:48:Redirecting requests.\n2025/4/28 19:57:48: bAllocate : False\n...\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48:Induced a collection.\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48:GC Notification raised.\n2025/4/28 19:57:48:Accepting requests again.\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48:Gen 2 collection count: 4\n2025/4/28 19:57:48:allocCount: 15000000\n2025/4/28 19:57:48:allocCount: 16000000\n2025/4/28 19:57:48:allocCount: 17000000\n2025/4/28 19:57:48:allocCount: 18000000\n2025/4/28 19:57:48:allocCount: 19000000\n2025/4/28 19:57:48:GC Notification raised.\n2025/4/28 19:57:48:Redirecting requests.\n2025/4/28 19:57:48: bAllocate : False\n...\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48:Induced a collection.\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48:GC Notification raised.\n2025/4/28 19:57:48:Accepting requests again.\n2025/4/28 19:57:48: bAllocate : False\n2025/4/28 19:57:48:Gen 2 collection count: 5\n2025/4/28 19:57:48:allocCount: 20000000\n2025/4/28 19:57:48:allocCount: 21000000\n2025/4/28 19:57:48:allocCount: 22000000\n2025/4/28 19:57:48:allocCount: 23000000\n2025/4/28 19:57:48:allocCount: 24000000\n2025/4/28 19:57:48:allocCount: 25000000\n2025/4/28 19:57:49:GC Notification raised.\n2025/4/28 19:57:49:Redirecting requests.\n2025/4/28 19:57:49: bAllocate : False\n...\n2025/4/28 19:57:49: bAllocate : False\n2025/4/28 19:57:49:Induced a collection.\n2025/4/28 19:57:49: bAllocate : False\n...\n2025/4/28 19:57:49: bAllocate : False\n2025/4/28 19:57:49:GC Notification raised.\n2025/4/28 19:57:49: bAllocate : False\n2025/4/28 19:57:49:Accepting requests again.\n2025/4/28 19:57:49:Gen 2 collection count: 6\n2025/4/28 19:57:49:allocCount: 26000000\n2025/4/28 19:57:49:allocCount: 27000000\n2025/4/28 19:57:49:allocCount: 28000000\n2025/4/28 19:57:49:allocCount: 29000000\n2025/4/28 19:57:49:allocCount: 30000000\n2025/4/28 19:57:49:allocCount: 31000000\n2025/4/28 19:57:49:Gen 2 collection count: 7\n2025/4/28 19:57:49:allocCount: 32000000\n2025/4/28 19:57:49:allocCount: 33000000\n2025/4/28 19:57:50:allocCount: 34000000\n2025/4/28 19:57:50:allocCount: 35000000\n2025/4/28 19:57:50:allocCount: 36000000\n2025/4/28 19:57:50:allocCount: 37000000\n2025/4/28 19:57:51:allocCount: 38000000\n2025/4/28 19:57:51:allocCount: 39000000\n2025/4/28 19:57:52:allocCount: 40000000\n2025/4/28 19:57:52:allocCount: 41000000\n2025/4/28 19:57:52:allocCount: 42000000\n2025/4/28 19:57:53:Gen 2 collection count: 8\n2025/4/28 19:57:54:allocCount: 43000000\n2025/4/28 19:57:54:Gen 2 collection count: 9\n2025/4/28 19:57:56:allocCount: 44000000\n2025/4/28 19:57:56:allocCount: 45000000\n2025/4/28 19:57:57:Gen 2 collection count: 10\n2025/4/28 19:57:57:allocCount: 46000000\n2025/4/28 19:57:58:allocCount: 47000000\n2025/4/28 19:58:05:allocCount: 48000000\n2025/4/28 19:58:07:Gen 2 collection count: 11\n2025/4/28 19:58:07:allocCount: 49000000\n2025/4/28 19:58:26:allocCount: 50000000\n2025/4/28 19:58:27:allocCount: 51000000\n2025/4/28 19:58:28:Gen 2 collection count: 12\n2025/4/28 19:59:05:allocCount: 52000000\n2025/4/28 19:59:05:allocCount: 53000000\n2025/4/28 19:59:07:Gen 2 collection count: 13\n2025/4/28 19:59:07:allocCount: 54000000\n2025/4/28 19:59:46:allocCount: 55000000\n2025/4/28 19:59:46:allocCount: 56000000\n2025/4/28 19:59:47:Gen 2 collection count: 14\n2025/4/28 20:00:42:allocCount: 57000000\n2025/4/28 20:00:43:allocCount: 58000000\n2025/4/28 20:00:44:Gen 2 collection count: 15\n2025/4/28 20:00:44:allocCount: 59000000\n2025/4/28 20:01:45:allocCount: 60000000\n2025/4/28 20:01:45:allocCount: 61000000\n2025/4/28 20:01:46:Gen 2 collection count: 16\n2025/4/28 20:02:46:allocCount: 62000000\n2025/4/28 20:02:47:allocCount: 63000000\n2025/4/28 20:02:48:Gen 2 collection count: 17\n2025/4/28 20:02:48:allocCount: 64000000\n2025/4/28 20:04:01:allocCount: 65000000\n2025/4/28 20:04:02:allocCount: 66000000\n2025/4/28 20:04:03:Gen 2 collection count: 18\n2025/4/28 20:04:03:allocCount: 67000000\n2025/4/28 20:05:23:allocCount: 68000000\n2025/4/28 20:05:24:allocCount: 69000000\n2025/4/28 20:05:25:Gen 2 collection count: 19\n2025/4/28 20:06:50:allocCount: 70000000\n2025/4/28 20:06:51:allocCount: 71000000\n2025/4/28 20:06:52:allocCount: 72000000\n2025/4/28 20:06:53:allocCount: 73000000\n2025/4/28 20:06:54:Gen 2 collection count: 20\n2025/4/28 20:06:54:allocCount: 74000000\n2025/4/28 20:08:35:allocCount: 75000000\n2025/4/28 20:08:36:allocCount: 76000000\n2025/4/28 20:08:37:allocCount: 77000000\n2025/4/28 20:08:37:allocCount: 78000000\n2025/4/28 20:08:38:Gen 2 collection count: 21\n2025/4/28 20:10:21:allocCount: 79000000\n2025/4/28 20:10:21:allocCount: 80000000\n2025/4/28 20:10:23:allocCount: 81000000\n2025/4/28 20:10:23:Gen 2 collection count: 22\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvc7g9Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o-5gN",
                                           "createdAt":  "2025-04-28T12:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-28T12:19:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pVyCE",
                                           "createdAt":  "2025-04-30T07:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hyabean",
                                           "body":  "There might be an issue with the example of [GC.RegisterForFullGCNotification](https://learn.microsoft.com/en-us/dotnet/api/system.gc.registerforfullgcnotification?view=net-8.0). Because the memory is being referenced by List\u003cbyte[]\u003e load, the GC might assume that even performing a FULL GC cannot clean up the heap. If we regularly clear half of the \u0027load\u0027 objects, notification triggering should work as expected. ",
                                           "updatedAt":  "2025-04-30T07:25:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69zuD1",
                                           "createdAt":  "2025-08-13T15:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@hyabean, there is usually no guarantees for these notifications. Assume this is not blocking a key scenario for you? ",
                                           "updatedAt":  "2025-08-13T15:44:10Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Full GC notify not raised on Server GC",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115411",
        "createdAt":  "2025-05-08T20:30:43Z",
        "number":  115411,
        "author":  "Treit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T20:34:22Z",
        "body":  "The following repo has a demonstration program which can be used to reproduce the issue:\n\nhttps://github.com/Treit/DeserializationLatencyIssue\n\n### .NET 9 results (5 minute run)\n```\n--------------------------------------------------\nTotal deserializations: 134338.\nDeserializations per second: 446.61/s\nTotal slow deserialization: 76.\nMin deserialization time: 0.28 ms.\nAvg deserialization time: 2.10 ms.\nMax deserialization time: 2531.10 ms.\nTotal GC events: 2501\nGC Start events: 1251\nGC End events: 1250\nTotal system memory: 63.44 GB\nAverage memory usage: 53.42 GB (84.21%)\nPeak memory usage: 63.29 GB (99.76%)\n--------------------------------------------------\n```\n### .NET 9 with Segments-based (crlgc.dll) GC results (5 minute run)\n```\n--------------------------------------------------\nTotal deserializations: 240808.\nDeserializations per second: 801.77/s\nTotal slow deserialization: 20.\nMin deserialization time: 0.28 ms.\nAvg deserialization time: 1.22 ms.\nMax deserialization time: 5723.17 ms.\nTotal GC events: 762\nGC Start events: 381\nGC End events: 381\nTotal system memory: 63.44 GB\nAverage memory usage: 29.24 GB (46.09%)\nPeak memory usage: 61.6 GB (97.10%)\n--------------------------------------------------\n```\n\n## Steps to repro (PowerShell):\n.NET 9:\n```ps\ncd DeserializationStress\n$env:DOTNET_GCName=\"\"\ndotnet run --configuration Release 300\n```\n\n.NET 9 with Sements-based (clrgc.dll) GC:\n```ps\ncd DeserializationStress\n$env:DOTNET_GCName=\"clrgc.dll\"\ndotnet run --configuration Release 300\n```\n\n# Additional background\nThe scenario in question is based on a real-world large-scale web service.\n\nThe web service requests result in a lot of Large Object Heap (LOH) allocations. About 50% of all allocations are strings, as the service does a lot of heavy JSON processing and produces large JSON responses to send back to the caller (sometimes megabytes in size).\n\n## Issue after moving from .NET 6 to .NET 9.\nThe service showed a decrease in availability (measured by number of failed requests) due to requests timing out, shortly after moving to .NET 9. Requests are required to complete in a few seconds, so any introduced latency can cause timeouts to become more frequent, which was the case here.\n\nIn particular, it was observed that JSON serialization and deserialization operations that should normally complete in tens of milliseconds at most were increasingly taking multiple seconds, failing the call.\n\nThe results of the stress test program intended to simulate this issue (see above) show the difference in performance between the old GC implementation and the new GC implementation pretty clearly.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOviCBwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6quqCs",
                                           "createdAt":  "2025-05-08T21:26:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-08T21:26:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qvMP5",
                                           "createdAt":  "2025-05-08T21:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "this is an internal customer whose traces I have already looked at. this scenario is doing extremely temporary LOH allocations (during BGCs the LOH surv rate was 3%). and this triggers a BGC tuning condition that would block the large object allocations because it\u0027s considered \"allocated too much during BGC\". this tuning itself did not change. what changed was with regions the LOH size is a lot smaller than with segments. so this exposes a tuning weakness in this very extreme situation.",
                                           "updatedAt":  "2025-05-08T21:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-IIHB",
                                           "createdAt":  "2025-08-14T20:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@Maoni0, since your PR has merged can this be closed? ",
                                           "updatedAt":  "2025-08-14T20:34:22Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Performance regression with regions-based GC when LOH has many short-lived allocations",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115879",
        "createdAt":  "2025-05-22T07:45:22Z",
        "number":  115879,
        "author":  "arekpalinski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T21:18:09Z",
        "body":  "### Description\n\nWe ([RavenDB](https://github.com/ravendb/ravendb) team) are investigating an issue related to GC where a RavenDB cluster node running Windows Server 2022 (`WIN`) experiences significantly more frequent GCs and higher GC pause times compared to its counterpart running on Ubuntu 24.04.2 (`ARM`), despite both nodes having the same workload and configuration. \n\nThis is a replica cluster that receives replicated data from the main cluster, with no external requests. Both nodes have identical databases, configurations, and GC settings specified in the `Raven.Server.runtimeconfig.json` file:\n\n\n```\n{\n  \"runtimeOptions\": {\n    \"tfm\": \"net8.0\",\n    \"includedFrameworks\": [\n      {\n        \"name\": \"Microsoft.NETCore.App\",\n        \"version\": \"8.0.16\"\n      },\n      {\n        \"name\": \"Microsoft.AspNetCore.App\",\n        \"version\": \"8.0.16\"\n      }\n    ],\n    \"configProperties\": {\n      \"System.GC.Concurrent\": true,\n      \"System.GC.Server\": true,\n      \"System.GC.RetainVM\": true,\n      \"System.Reflection.Metadata.MetadataUpdater.IsSupported\": false,\n      \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization\": false,\n      \"System.Runtime.TieredPGO\": true\n    }\n  }\n}\n```\n\nBoth nodes have identical hardware configurations (2 cores, 8 GB memory). The difference lies in their operating systems and processor architecture:\n\n- `WIN`: Windows Server 2022 on x64.\n- `ARM`: Ubuntu 24.04.2 on ARM64.\n\nThe issue becomes noticeable after a restart of the cluster nodes (regular updates of RavenDB) but that isn\u0027t always the case, it doesn\u0027t reproduce always. Initially, GC behavior is similar for both nodes, but within a few minutes, the `WIN` node begins triggering GCs much more frequently. On analyzing the GC traces, we consistently observe the `WIN` node triggering GCs due to **\"Internal Tuning\"**, whereas the `ARM` node does not exhibit this behavior.\n\n\n### Configuration\n\n- 2 cores. 8 GB memory  \n\n- `WIN`: Windows Server 2022 (x64)  \n- `ARM`: Ubuntu 24.04.2 (ARM64)  \n\n- .NET 8.0.16  \n\n### Analysis\n\nInitially, both nodes show similar GC activity. After a few minutes, however, the GC on `WIN` becomes significantly more frequent, leading to smaller heap sizes for Gen0 and Gen1, and subsequently, a much higher **PauseTimePercentage**:\n\n![Image](https://github.com/user-attachments/assets/9f8acbc3-ccce-4aa1-9d19-8c37807c30a9)\n\n  - GC traces collected using `dotnet-trace collect --profile gc-verbose --name Raven.Server --duration 00:05:00` revealed:  \n\n    - **`WIN` node**: 163 GCs in 5 minutes  \n      ![Image](https://github.com/user-attachments/assets/937969a0-8add-4d4d-82f4-9290949c8c90)  \n\n    - **`ARM` node**: 47 GCs in 5 minutes  \n      ![Image](https://github.com/user-attachments/assets/6009d7d0-1b39-47bc-8c20-aca0814daad1)  \n\n    - The primary reason for GC on the `WIN` node is \"Internal Tuning\", while this is absent on the `ARM` node.  \n\n---\n\n17 hours later, the issue persists with the `WIN` node still showing higher GC activity:\n\n![Image](https://github.com/user-attachments/assets/be9f94dd-554a-4bde-8162-70f8d7eb7fe8)\n\n  - **Pause Time Percentage (PauseTimePercentage):**  \n    - `WIN` node: 4.69%  \n    - `ARM` node: Stable and much lower  \n\n  - GC traces for `WIN` node - there are \"Internal Tuning\" reasons but there are also GC where the reason isn\u0027t specified:  \n    ![Image](https://github.com/user-attachments/assets/99289796-06a4-4812-b44a-6f60f156bee7)  \n\n\n### Regression?\n\nThis does not appear to be a regression, as we have observed similar behavior in the past.\n\n\n---\n\nWe are seeking assistance in understanding:  \n\n1. What does \"Internal Tuning\" mean in this context, and why might it disproportionately affect the `WIN` node?  \n2. Are there GC or runtime optimizations that are platform/architecture-specific that could explain this behavior?  \n3. Are there any additional steps we should take to investigate or mitigate this problem?  \n\nDetailed insights on \"Internal Tuning\" triggers and how they differ between platforms would be greatly appreciated.\n\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvM2YFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6s3iRO",
                                           "createdAt":  "2025-05-22T07:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-22T07:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s8TQu",
                                           "createdAt":  "2025-05-22T14:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Hello @arekpalinski, would you be able to share the traces collected? Ideally with `gc-collect` profile would be better. Do you observe overall throughput differences between win-x64 and Lin-arm64 as well for you scenario? ",
                                           "updatedAt":  "2025-05-22T14:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s88la",
                                           "createdAt":  "2025-05-22T15:25:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@mangod9 thanks for looking into this. I have collected new traces using `dotnet-trace collect --profile gc-collect --name Raven.Server --duration 00:05:00`:\n\n- https://drive.google.com/file/d/1mKwS9Ll3x2ZFYBhfDIPeuY0dm5whCAQH/view?usp=sharing\n- https://drive.google.com/file/d/1onELbpZDjtTUqoZ21A7ebIxM6twpXkhG/view?usp=sharing\n\nWe don\u0027t see overall throughput / performance differences between the nodes although there isn\u0027t much activity there (in particular no requests / queries), it\u0027s just receives replicated data and process the indexes on them. This cluster is used as secondary replica only. ",
                                           "updatedAt":  "2025-05-22T15:25:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tX2x7",
                                           "createdAt":  "2025-05-26T06:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Just an update. After more than 4 days since the restart the GC activity looks as follow:\n\n![Image](https://github.com/user-attachments/assets/0f3bd8a8-676f-4428-9fb9-ea6352eb1c44)\n\n- overall Pause Time % went down to 3.96%\n- GC is still triggered much more often than on `ARM` node\n- still mostly due to \"Internal Tuning\"\n\nTraces collected on `WIN` node with `gc-collect` profile: https://drive.google.com/file/d/19IhZ0N-mLVWtYq160LI8p2v94ilJCYUi/view?usp=sharing\n",
                                           "updatedAt":  "2025-05-26T06:35:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6trVyM",
                                           "createdAt":  "2025-05-27T19:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "We hope to look through the traces later this week but wondering if both win and lin containers are running with same request/limits (are they running in containers or VMs)? Wonder if the linux container might be getting more resources?",
                                           "updatedAt":  "2025-05-27T19:52:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tvyI4",
                                           "createdAt":  "2025-05-28T05:28:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Those are regular VMs, not the containers.",
                                           "updatedAt":  "2025-05-28T05:28:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vNGZI",
                                           "createdAt":  "2025-06-04T10:17:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Just an update form our side. The server got restarted meanwhile a few days ago and the issue got reproduced again.  Pause Time % was  around 4-5% constantly.\n\nYesterday it got restarted again.  GC Pause Time is lower since then - 2.7% (but still significantly higher than on ARM node which is doing GC less frequently).\n\n![Image](https://github.com/user-attachments/assets/5ba5de27-22c0-4906-b9ee-fd1c8d40bc73)\n\nAnother `gc-collect` tracing for analysis:\nhttps://drive.google.com/file/d/15sJEzlhQmkam7Bi3qXnJafTb47B1dsE_/view?usp=sharing\n\n",
                                           "updatedAt":  "2025-06-04T10:25:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xkgZZ",
                                           "createdAt":  "2025-06-17T06:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Did you have a chance to take a look at the provided GC traces?",
                                           "updatedAt":  "2025-06-17T06:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xrpqx",
                                           "createdAt":  "2025-06-17T16:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Sorry didnt get a chance to look into this yet. One overall observation could be related to cache sizes and whether the two hardware configurations get different gen0 budgets. Can you try setting `DOTNET_GCgen0size=1E00000` to check if that makes any difference? \n\nWill look into them later this week. ",
                                           "updatedAt":  "2025-06-17T16:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zUmVp",
                                           "createdAt":  "2025-06-26T13:33:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Setting `DOTNET_GCgen0size=1E00000` didn\u0027t make a difference. Please find GC traces here:\nhttps://drive.google.com/file/d/1LIabGpmBfAAc8VESvDkCqzlx2PZ0WXDD/view?usp=sharing\n",
                                           "updatedAt":  "2025-06-26T13:33:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zhpi0",
                                           "createdAt":  "2025-06-27T07:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Also tried much greater value - `DOTNET_GCgen0size=C400000`. Still the same result. WIN node has a lot of `Internal Tuning` GC\n\nhttps://drive.google.com/file/d/1KbNcm8X_L3Ioq9Sax5N_rJpa3YofIbCY/view?usp=sharing\n\n![Image](https://github.com/user-attachments/assets/60518d60-7c92-4b2e-8948-fea78f552810)\n",
                                           "updatedAt":  "2025-06-27T07:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zo2Hi",
                                           "createdAt":  "2025-06-27T17:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Ok, interesting that updating the gen0size doesnt help. Sorry we have been behind in investigating this. Assuming this is not immediately blocking? \n\n@mrsharm is planning to look into this. ",
                                           "updatedAt":  "2025-06-27T17:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zpUOO",
                                           "createdAt":  "2025-06-27T18:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Hi @arekpalinski, thanks for all the details! \n\n- Would it be possible to capture a trace from the start of the two processes with the first couple of GCs? The rationale here is to see if from the get-go, there is a discrepancy in the gen* sizes indicative of a large difference in the initial budgets.\n- Is there a difference in the cache topology between the machines e.g., are the L3 cache sizes different amongst the two? \n\n## Observations from Traces\n\n- The workload between the two configurations is 31% different Windows vs. ARM (8GB vs. 11.325GB of allocs) with a corresponding heap size difference of 33% (1.891 GB vs. 2.532 GB). Not saying that the difference in workloads is the causative factor here since there is a huge difference in the heap sizes:\n\n![Image](https://github.com/user-attachments/assets/8f49196c-f7b7-43fa-89a1-f554b4962a2a)\n\nMy next step is to create a simple app that runs on the same hardware and configuration on the two different architectures to discern the differences in the budgets. ",
                                           "updatedAt":  "2025-06-27T18:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z6Yd_",
                                           "createdAt":  "2025-06-30T09:22:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "\u003e Assuming this is not immediately blocking?\n\nNo, it\u0027s not blocking.\n\n\u003e Would it be possible to capture a trace from the start of the two processes with the first couple of GCs? \n1. I removed `DOTNET_GCgen0size` (it was set on `WIN` node only)\n2. RavenDB service got restarted\n3. Shortly after restart `dotnet-trace collect --profile gc-collect --name Raven.Server --duration 00:20:00` was executed. Traces are here: https://drive.google.com/file/d/1FpB3YMhcuLh-OcOEJjPlqf-uKfu6V3em/view?usp=sharing\n\nHere is how GC activity looked in the first 13 minutes after the restart:\n\n![Image](https://github.com/user-attachments/assets/031a9461-feb1-4a53-983d-60fb16a14305)\n\n\u003e Is there a difference in the cache topology between the machines e.g., are the L3 cache sizes different amongst the two?\n\nApparently there is:\n\n- `WIN` node (this is `t3a.large` instance on AWS, processor  AMD EPYC 7571) - L3 cache size: 3MB \n\n```\n\u003e (Get-WmiObject Win32_CacheMemory | Where Level -eq 3).InstalledSize\n3072\n```\n\nAlthough running another command gave different result:\n\n```\n\u003e wmic cpu get L3CacheSize\nL3CacheSize\n65536\n```\n\nI collected also:\n\n```\n\u003e Get-CimInstance -ClassName Win32_CacheMemory | Format-Table -Property *\n\nDeviceID       ErrorCorrectType Availability Status StatusInfo BlockSize CacheSpeed CacheType InstalledSize Level MaxCa\n                                                                                                                  cheSi\n                                                                                                                     ze\n--------       ---------------- ------------ ------ ---------- --------- ---------- --------- ------------- ----- -----\nCache Memory 0                6            3 OK              3      1024          1         5          3072     3  3072\nCache Memory 1                6            3 OK              3      1024          1         5         16384     4 16384\nCache Memory 2                6            3 OK              3     65536          1         5         65536     5 65536\n```\n\n- `ARM` node - L3 cache size: 32 MB\n\n```\n$ lscpu | grep \"L3 cache\"\nL3 cache:                             32 MiB (1 instance)\n```\n\nAlso `lstopo` returned:\n\n```\n\u003e lstopo\nMachine (7810MB total)\n  Package L#0\n    NUMANode L#0 (P#0 7810MB)\n    L3 L#0 (32MB)\n      L2 L#0 (1024KB) + L1d L#0 (64KB) + L1i L#0 (64KB) + Core L#0 + PU L#0 (P#0)\n      L2 L#1 (1024KB) + L1d L#1 (64KB) + L1i L#1 (64KB) + Core L#1 + PU L#1 (P#1)\n```",
                                           "updatedAt":  "2025-06-30T09:22:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64ordj",
                                           "createdAt":  "2025-07-21T17:23:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Hi @arekpalinski,\n\nThanks for your patience! Took a look at the L3 cache size values and the traces - the hypothesis is that since there is a big discrepancy in the L3 cache size for both cases (3 MB vs. 32MB), the initial gen0 sizes chosen will be different. We choose the initial gen0 sizes based on the last level cache size for Server GC and since that value was significantly less for Windows, the gen0 budget was lower thereby causing more frequent GCs as it\u0027ll take less to allocate on the heap before a GC is triggered.\n\nBtw, are these instances running on bare metal or VMs? We have seen a discrepancy in the values reported for certain AMD processors (but for Linux) when it comes to the reporting of the last level cache sizes for certain VMs - such as for: https://github.com/dotnet/runtime/pull/108492.\n\nBest,\nM.  ",
                                           "updatedAt":  "2025-07-21T17:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65I4Tt",
                                           "createdAt":  "2025-07-23T07:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "Those are VMs in AWS. `ARM` node is `t4g.large` instance type, while `WIN` node is of `t3a.large` type.",
                                           "updatedAt":  "2025-07-23T07:00:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68jhw-",
                                           "createdAt":  "2025-08-07T10:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "@mrsharm just checking if you have any updates here",
                                           "updatedAt":  "2025-08-07T10:11:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68uR4V",
                                           "createdAt":  "2025-08-08T00:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrsharm",
                                           "body":  "Hi @arekpalinski, here\u0027s an update: my original hypothesis was only partially correct that the L3 cache sizes caused the Gen0 budgets to be different. However, the real reason for the large discrepancy in the number of GCs was because of significantly higher memory load for WIN that eventually caused a full blocking GC with reason `InducedLowMemory` (GC #20) and aggressively continued to GC; this condition wasn\u0027t prevalent in ARM and as a result, there were no full blocking GCs done - only Background GCs (BGCs).\n\nGetting some visuals on the Memory Load, we observe:\n```\n=== MemoryLoad Summary Statistics ===\nAverage MemoryLoad - ARM: 29.4%\nAverage MemoryLoad - WIN: 80.0%\nAverage MemoryLoad Difference (ARM - WIN): -50.6%\nMax MemoryLoad - ARM: 33%\nMax MemoryLoad - WIN: 92%\n```\n\n\u003cimg width=\"693\" height=\"526\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d45aef37-58a8-4922-aa60-034bb21ee62e\" /\u003e\n\n^ here\u0027s the full trend.\n\nCharting the Gen0 Budgets (FinalYoungestDesired in the same Raw XML View), we find a significant drop in the gen0 budget after ~the 20th GC i.e., right after the InducedLowMemory after the memory load ramped up:\n\n\u003cimg width=\"773\" height=\"446\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2792a46a-3d59-4310-bd47-a53c7f28a9b5\" /\u003e\n \n**Despite a similar workload of allocations, would you happen to know why the memory load of WIN was significantly difference than ARM?**\n",
                                           "updatedAt":  "2025-08-08T00:51:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68zZgX",
                                           "createdAt":  "2025-08-08T11:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekpalinski",
                                           "body":  "\n\u003e Despite a similar workload of allocations, would you happen to know why the memory load of WIN was significantly difference than ARM?\n\nNot really, `WIN` and `ARM` nodes are in the the same replica cluster that receives replicated data from the main cluster, with no external requests. Both nodes have identical databases, configurations, indexes. \n\nLooking at the last 7 days of memory graphs look comparable (but average managed memory allocation is lower on WIN - 895MB vs 1.2GB):\n\n- WIN\n\n\u003cimg width=\"2310\" height=\"299\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/041a4e16-9c18-48cb-8c40-8c3e02011418\" /\u003e\n\n- ARM\n\n\u003cimg width=\"2346\" height=\"303\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2e8263ba-8e14-4cc7-a15d-50e6b0664054\" /\u003e\n\nNote that we use memory-mapped files internally. As a result, high memory usage is expected, but the operating system can reclaim this memory if needed.\n\n- For reference, the GC activity at this moment\n\n\u003cimg width=\"709\" height=\"904\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a1e10a77-c947-44b8-9926-767b126cea19\" /\u003e",
                                           "updatedAt":  "2025-08-08T11:43:50Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Frequent GC Triggered by \u0027Internal Tuning\u0027 on Windows node compared to Linux/ARM node in .NET 8.0.16",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116431",
        "createdAt":  "2025-06-09T00:51:47Z",
        "number":  116431,
        "author":  "sultanaalyami",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T14:51:30Z",
        "body":  "### Environment\n\n* **.NET SDK Version:** 10.0.100-preview.4.25258.110\n* **Operating System:** Android 15 (via Termux) running Ubuntu 24.04 (Noble Numbat) via `proot-distro`\n* **Architecture:** ARM64 (aarch64)\n* **Host Device:** Samsung SM-F956B (Galaxy Z Fold 6)\n* **Termux Version:** `googleplay.2025.01.18`\n* **proot-distro Version:** `v4.25.0`\n* **Wasmtime Version:** Not yet installed (N/A for this specific issue)\n\n### Description\n\nI am attempting to set up a .NET development environment on my ARM64 Android device (Samsung SM-F956B, Galaxy Z Fold 6) using **Termux** and **`proot-distro`** (to host Ubuntu 24.04). My long-term goal is to explore the feasibility of running ASP.NET Core SignalR Hubs within a WebAssembly (WASM) / WebAssembly System Interface (WASI) environment, potentially for serverless or edge compute solutions.\n\nAfter successfully downloading and extracting the **.NET 10 Preview 4 SDK** for `linux-arm64` into the Ubuntu environment (which runs inside `proot-distro`), I consistently encounter a `GC heap initialization failed with error 0x8007000E` (E_OUTOFMEMORY) when running any `dotnet` command (e.g., `dotnet --info`, `dotnet new console`).\n\n### Steps to Reproduce\n\n1.  Install Termux from F-Droid.\n2.  Inside Termux, install `proot-distro`:\n    ```bash\n    pkg install proot-distro -y\n    ```\n3.  Install Ubuntu 24.04 LTS:\n    ```bash\n    proot-distro install ubuntu\n    ```\n4.  Log in to the Ubuntu environment:\n    ```bash\n    proot-distro login ubuntu\n    ```\n5.  Inside Ubuntu, update packages and install essential tools:\n    ```bash\n    apt update \u0026\u0026 apt upgrade -y\n    apt install curl wget git -y\n    ```\n6.  Verify architecture (output was `arm64`):\n    ```bash\n    dpkg --print-architecture\n    ```\n7.  Download .NET 10.0.100-preview.4 SDK for Linux ARM64:\n    ```bash\n    mkdir -p ~/dotnet\n    wget [https://builds.dotnet.microsoft.com/dotnet/Sdk/10.0.100-preview.4.25258.110/dotnet-sdk-10.0.100-preview.4.25258.110-linux-arm64.tar.gz](https://builds.dotnet.microsoft.com/dotnet/Sdk/10.0.100-preview.4.25258.110/dotnet-sdk-10.0.100-preview.4.25258.110-linux-arm64.tar.gz) -O dotnet-sdk.tar.gz\n    ```\n8.  Extract the SDK:\n    ```bash\n    tar -xzf dotnet-sdk.tar.gz -C ~/dotnet\n    ```\n9.  Add .NET to PATH:\n    ```bash\n    echo \u0027export DOTNET_ROOT=$HOME/dotnet\u0027 \u003e\u003e ~/.bashrc\n    echo \u0027export PATH=$PATH:$HOME/dotnet\u0027 \u003e\u003e ~/.bashrc\n    source ~/.bashrc\n    ```\n10. Attempt to verify installation (this is where the error occurs):\n    ```bash\n    dotnet --info\n    ```\n\n### Expected Behavior\n\n`dotnet --info` should display the SDK information without any errors, indicating a successful initialization of the .NET CoreCLR runtime.\n\n### Actual Behavior\n\nThe command consistently fails with the following output:\n\nGC heap initialization failed with error 0x8007000E\nFailed to create CoreCLR, HRESULT: 0x8007000E\nThis error suggests an OutOfMemory condition or a failure to allocate necessary memory segments.\n\n### Troubleshooting Performed\n\n1.  **Verified sufficient storage:** `df -h /data/data/com.termux/files/home` shows ample free space (`291G` available).\n2.  **Verified successful SDK download:** The `wget` operation completed 100% with no errors.\n3.  **Attempted Termux/device restart:** Performed a full restart of the Android device and the Termux app.\n4.  **Attempted to add swap space within the `proot-distro` Ubuntu environment:**\n    ```bash\n    fallocate -l 8G /swapfile # or dd if=/dev/zero...\n    chmod 600 /swapfile\n    mkswap /swapfile\n    swapon /swapfile # Fails with \"swapon failed: Function not implemented\"\n    ```\n    Despite `swapon` failing (due to `proot-distro` limitations for direct kernel interaction), `free -h` command\u0027s output **shows significant available RAM (`Mem: 10Gi total`, `3.5Gi available`) and active Swap space (`Swap: 8.0Gi total`, `4.7Gi used`)**. This suggests that system-level swap is active (possibly via Android\u0027s ZRAM or similar mechanisms) and that the `0x8007000E` error is likely **not a simple total memory exhaustion**, but rather a failure to allocate specific types of memory or to initialize the GC heap within the `proot-distro`\u0027s emulated environment, potentially due to underlying kernel/syscall compatibility issues or specific memory management semantics that CoreCLR expects.\n\n### Potential Root Cause (Hypothesis)\n\nGiven the ample memory resources reported by `free -h` and the `swapon` failure, it is hypothesized that the issue might be related to:\n1.  **CoreCLR\u0027s specific memory allocation requirements:** The runtime may be trying to allocate memory segments (e.g., for its GC heap) in a way that is not fully compatible with the memory management layer provided by `proot-distro` or the Android Bionic linker\u0027s specific `TLS` segment alignment.\n2.  **`proot-distro` / Android kernel limitations:** Despite `proot-distro` providing a Linux user-space environment, there might be underlying kernel-level syscalls or memory mapping features that are either not fully implemented or have different behaviors compared to a native Linux kernel.\n3.  **Preview build instability:** As this is a preview version of .NET 10, it might contain bugs or new features that are less stable in highly specialized environments like Termux/proot-distro.\n\n### Request\n\nI am seeking **engineering guidance and insights** into how to resolve this `GC heap initialization failed` issue. My primary goal is to establish a functional .NET development and execution environment on ARM64 Android devices to validate the feasibility of running complex .NET workloads (such as ASP.NET Core SignalR Hubs) in WASM/WASI for serverless or edge compute scenarios. Resolving this foundational issue is crucial for my research.\n\nI am open to:\n* Trying specific environment variables for CoreCLR (`COMPlus_` variables).\n* Exploring alternative `proot-distro` configurations or Linux distributions.\n* Any insights into CoreCLR\u0027s memory allocation patterns or requirements in such emulated/constrained environments.\n\nYour expertise in this area would be highly appreciated. Thank you.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuyyGEw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wMm-d",
                                           "createdAt":  "2025-06-09T00:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "Because this is a problem starting up the CoreCLR, I tagged the runtime folks. It may also be faster if I transfer this to the runtime repo - would that be ok with you? ",
                                           "updatedAt":  "2025-06-09T00:54:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wMm-k",
                                           "createdAt":  "2025-06-09T01:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sultanaalyami",
                                           "body":  "Absolutely! Please feel free to transfer it to the `dotnet/runtime` repo.\nThank you for looking into this.\n",
                                           "updatedAt":  "2025-06-09T01:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wNr8H",
                                           "createdAt":  "2025-06-09T17:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-09T17:03:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wN4_L",
                                           "createdAt":  "2025-06-09T17:21:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "can you try configuring GCRegionRange as described here: https://learn.microsoft.com/en-us/dotnet/core/runtime-config/garbage-collector#region-range. Probably set it to something closer to the physical memory available on the device. ",
                                           "updatedAt":  "2025-06-09T17:21:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67LIYT",
                                           "createdAt":  "2025-07-31T14:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiEDyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LineCatOvO",
                                                                               "createdAt":  "2025-09-12T16:50:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "atikattar1104",
                                           "body":  "this workaround that worked for me for this is setting GC heap hard limit to `10000000` using: \n\n```\nexport DOTNET_GCHeapHardLimit=10000000\n```\nand then calling powershell makes it run without any error. \n\nthis sets the limit to approx 7GB. \n\n![Image](https://github.com/user-attachments/assets/c20d5ffd-e8cc-414c-a423-b757e6268395)\n\noriginally found in this comment: https://github.com/dotnet/runtime/issues/79612#issuecomment-1352378682",
                                           "updatedAt":  "2025-07-31T14:51:30Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "GC heap initialization failed (0x8007000E) on ARM64 Linux (Ubuntu 24.04 via Termux/proot-distro)",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116959",
        "createdAt":  "2025-06-24T11:38:15Z",
        "number":  116959,
        "author":  "grisha-kotler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T21:18:40Z",
        "body":  "### Description\n\nWe (the [RavenDB](https://github.com/ravendb/ravendb) team) are investigating an issue related to an `OutOfMemoryException` that occurs when RavenDB attempts to allocate an array. While some allocation sizes are unknown, they should be relatively small. What we know for certain is that one of the allocations was for `512KB` and failed repeatedly.\n\n### Reproduction Steps\n\nThis issue has occurred only twice in our production environment. RavenDB is configured as a 3-node cluster running on Windows Server 2019 Datacenter (OS build: 17763.5696.amd64fre.rs5_release.180914-1434). Each machine has 256 GB of memory and is hosted on Azure. The issue has only manifested on a single node.\ndotnet 8.0.8.\n\n### Expected behavior\n\nAllocating a `512KB` array should succeed if sufficient memory is available.\n\n### Actual behavior\n\nFor the following `OutOfMemoryException`, we know that we were trying to allocate `512KB`:\nhttps://github.com/ravendb/ravendb/blob/d2ef025e68205a33f3a91e9132de46c7d2323831/src/Voron/Data/BTrees/Tree.Stream.cs#L90\n\n```\nFailed to copy the file: _78hfo.fdt, EXCEPTION: System.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n   at System.GC.AllocateNewArray(IntPtr typeHandle, Int32 length, GC_ALLOC_FLAGS flags)\n   at Voron.Data.BTrees.Tree.StreamToPageWriter.Write(Stream stream) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Voron\\Data\\BTrees\\Tree.Stream.cs:line 90\n   at Raven.Server.Indexing.VoronIndexOutput.CopyFileStream() in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Indexing\\VoronIndexOutput.cs:line 136\n```\n\n```\nEXCEPTION: System.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n   at System.Collections.Generic.Dictionary`2.Resize(Int32 newSize, Boolean forceNewHashCodes)\n   at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\n   at Voron.Impl.Scratch.ScratchBufferPool.Allocate(LowLevelTransaction tx, Int32 numberOfPages) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Voron\\Impl\\Scratch\\ScratchBufferPool.cs:line 223\n   at Voron.Impl.LowLevelTransaction.AllocatePage(Int32 numberOfPages, Int64 pageNumber, Nullable`1 previousVersion, Boolean zeroPage) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Voron\\Impl\\LowLevelTransaction.cs:line 783\n   at Voron.Impl.LowLevelTransaction.ModifyPageInternal(Int64 num) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Voron\\Impl\\LowLevelTransaction.cs:line 538\n   at Voron.Data.BTrees.Tree.MultiAdd(Slice key, Slice value) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Voron\\Data\\BTrees\\Tree.MultiTree.cs:line 59\n   at Raven.Server.Documents.Indexes.IndexStorage.ReferencesBase.WriteReferencesForSingleCollectionInternal(Tree referencesTree, String collection, Dictionary`2 references, RavenTransaction tx) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\Indexes\\IndexStorage.cs:line 704\n   at Raven.Server.Documents.Indexes.IndexStorage.ReferencesBase.WriteReferencesForSingleCollection(String collection, Dictionary`2 references, RavenTransaction tx) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\Indexes\\IndexStorage.cs:line 714\n   at Raven.Server.Documents.Indexes.Workers.HandleReferencesBase.HandleItems(ActionType actionType, QueryOperationContext queryContext, TransactionOperationContext indexContext, Lazy`1 writeOperation, IndexingStatsScope stats, Int64 pageSize, TimeSpan maxTimeForDocumentTransactionToRemainOpen, CancellationToken token) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\Indexes\\Workers\\HandleReferences.cs:line 175\n   at Raven.Server.Documents.Indexes.Workers.HandleReferencesBase.Execute(QueryOperationContext queryContext, TransactionOperationContext indexContext, Lazy`1 writeOperation, IndexingStatsScope stats, CancellationToken token) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\Indexes\\Workers\\HandleReferences.cs:line 106\n   at Raven.Server.Documents.Indexes.Index.DoIndexingWork(IndexingStatsScope stats, CancellationToken cancellationToken) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\Indexes\\Index.cs:line 2331\n   at Raven.Server.Documents.Indexes.Index.ExecuteIndexing() in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\Indexes\\Index.cs:line 1567\n```\n\n```\nException of type \u0027System.OutOfMemoryException\u0027 was thrown.\n ---\u003e System.OutOfMemoryException: Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\n   at System.IO.MemoryStream.Write(ReadOnlySpan`1 buffer)\n   at Sparrow.Json.AbstractBlittableJsonTextWriter.DisposeInternal() in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Sparrow\\Json\\AbstractBlittableJsonTextWriter.cs:line 701\n   at Raven.Server.Documents.ETL.Providers.ElasticSearch.ElasticSearchEtl.\u003c\u003ec__DisplayClass21_1.\u003cLoadInternal\u003eb__0(List`1 inserts, Stream stream) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\ETL\\Providers\\Elasticsearch\\ElasticSearchEtl.cs:line 132\n   at Elasticsearch.Net.StreamableData`1.Write(Stream writableStream, IConnectionConfigurationValues settings)\n   at Elasticsearch.Net.HttpConnection.SetContent(HttpRequestMessage message, RequestData requestData)\n   at Elasticsearch.Net.HttpConnection.Request[TResponse](RequestData requestData)\n   at Elasticsearch.Net.RequestPipeline.CallElasticsearch[TResponse](RequestData requestData)\n   at Elasticsearch.Net.Transport`1.Request[TResponse](HttpMethod method, String path, PostData data, IRequestParameters requestParameters)\n   --- End of inner exception stack trace ---\n   at Elasticsearch.Net.Transport`1.Request[TResponse](HttpMethod method, String path, PostData data, IRequestParameters requestParameters)\n   at Elasticsearch.Net.ElasticLowLevelClient.Bulk[TResponse](String index, PostData body, BulkRequestParameters requestParameters)\n   at Raven.Server.Documents.ETL.Providers.ElasticSearch.ElasticSearchEtl.LoadInternal(IEnumerable`1 records, DocumentsOperationContext context, EtlStatsScope scope) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\ETL\\Providers\\Elasticsearch\\ElasticSearchEtl.cs:line 139\n   at Raven.Server.Documents.ETL.EtlProcess`6.Load(IEnumerable`1 items, DocumentsOperationContext context, TStatsScope stats) in D:\\Builds\\RavenDB-5.4-net80-Custom\\54166\\src\\Raven.Server\\Documents\\ETL\\EtlProcess.cs:line 467\n```\n\nDuring that time, the managed allocations on that node are approximately `9GB`, while available memory is `5.8GB`. The page file size is `80.9GB`, with `25GB` currently in use.\n\nYou can see the comparison with the other nodes below. The node in question is Node G.\n\n![Image](https://github.com/user-attachments/assets/507566df-d2b4-4910-879f-1ed9a73a52f4)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRestarting the RavenDB process resolves the issue temporarily, but it recurs the following day. Since then, most of the load has been redirected to another node in the cluster.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nWe are using native memory allocations via `Marshal.AllocHGlobal((IntPtr)size)`, which doesn\u0027t fail and returns contiguous memory. Although we don\u0027t have logging for the allocated size, I believe we do have allocations of `512KB` and larger.\nhttps://github.com/ravendb/ravendb/blob/d2ef025e68205a33f3a91e9132de46c7d2323831/src/Sparrow/Utils/NativeMemory.cs#L140\n\n![Image](https://github.com/user-attachments/assets/d1fb26fd-5cc7-47cf-a990-9621ec59a054)\n\n**RAMMap**\n\n![Image](https://github.com/user-attachments/assets/002b7659-ebdc-43e8-8d9d-c55d7287a9f9)\n\n![Image](https://github.com/user-attachments/assets/dd45feca-f445-4200-ad65-d89c175f9d45)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt91bDA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6y4MXi",
                                           "createdAt":  "2025-06-24T16:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "nit:\n\u003e Allocating a `512KB` array should succeed if sufficient memory is available.\n\n... is really\n\n\u003e Allocating a `512KB` array should succeed if sufficient _contiguous_ memory is available.\n\n(although I would have believed generally a 512KB array should be small enough, yes, especially as the pool supports larger sizes than that)",
                                           "updatedAt":  "2025-06-24T16:03:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zEAh-",
                                           "createdAt":  "2025-06-25T09:59:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grisha-kotler",
                                           "body":  "\u003e nit:\n\u003e \n\u003e \u003e Allocating a `512KB` array should succeed if sufficient memory is available.\n\u003e \n\u003e ... is really\n\u003e \n\u003e \u003e Allocating a `512KB` array should succeed if sufficient _contiguous_ memory is available.\n\u003e \n\u003e (although I would have believed generally a 512KB array should be small enough, yes, especially as the pool supports larger sizes than that)\n\nWe are using native memory allocations via `Marshal.AllocHGlobal((IntPtr)size)`, which doesn\u0027t fail and returns contiguous memory. Although we don\u0027t have logging for the allocated size, I believe we do have allocations of `512KB` and larger.\nhttps://github.com/ravendb/ravendb/blob/d2ef025e68205a33f3a91e9132de46c7d2323831/src/Sparrow/Utils/NativeMemory.cs#L140\n\nAll errors are related to array allocations.",
                                           "updatedAt":  "2025-06-25T09:59:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zLOyw",
                                           "createdAt":  "2025-06-25T20:33:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... arrays in C# must occupy a contiguous region of memory, instantiated on the heap (outside of specialized `stackalloc` cases) by the memory manager.  If for some reason it can\u0027t find a free block that size, you get OOM, regardless of how much memory your system has.  \nThere can be a few different reasons it can\u0027t find a properly sized block, including that GC wasn\u0027t able to compact free memory sufficiently to make such a block available.  If your application has a _lot_ of these 512KB arrays, the likelihood goes up that you\u0027ll hit this.  The use of `ArrayPool` helps, but if you\u0027re renting/returning too many values you can still hit it; it may be worth it to use a dedicated pool with a configurable number of stored arrays.",
                                           "updatedAt":  "2025-06-25T20:33:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60Su5s",
                                           "createdAt":  "2025-07-01T16:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Do you happen to have a dump you can share when the OOM occurred? ",
                                           "updatedAt":  "2025-07-01T16:52:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61RXIJ",
                                           "createdAt":  "2025-07-06T09:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grisha-kotler",
                                           "body":  "@Clockwork-Muse I\u0027m attaching the memory information that was collected using `GC.GetGCMemoryInfo(GCKind.Any)`, `GC.GetGCMemoryInfo(GCKind.Background)`, `GC.GetGCMemoryInfo(GCKind.Ephemeral)`, and `GC.GetGCMemoryInfo(GCKind.FullBlocking)`.\n[admin.memory.gc.json](https://github.com/user-attachments/files/21087493/admin.memory.gc.json)\n\nWe also have the memory information that we collected using the Windows API during that time:\n```\n\"MemoryInformation\":\n{\n        \"PhysicalMemory\": \"256 GBytes\",\n        \"WorkingSet\": \"237.537 GBytes\",\n        \"ManagedAllocations\": \"10.38 GBytes\",\n        \"UnmanagedAllocations\": \"4.39 GBytes\",\n        \"AvailableMemory\": \"8.03 GBytes\",\n}\n```\n\nFrom the attached file, I can see that the LOH is experiencing approximately 37-38% fragmentation, which is quite high. I\u0027m not sure how or when the heap expands, but shouldn\u0027t it expand when it cannot find suitable free space in the fragmented area?\n\n@mangod9 We didn\u0027t collect the dump, but we can try reproducing the issue again and collect the dump file. Full memory dump, I assume?",
                                           "updatedAt":  "2025-07-06T09:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc633VsM",
                                           "createdAt":  "2025-07-17T16:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "\u003e We didn\u0027t collect the dump, but we can try reproducing the issue again and collect the dump file. Full memory dump, I assume?\n\nCorrect a dump and/or GCCollectOnly trace if you are able to reproduce it consistently would be helpful. ",
                                           "updatedAt":  "2025-07-17T16:45:41Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "OutOfMemoryException during array allocation",
        "labels":  [
                       "area-GC-coreclr",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117186",
        "createdAt":  "2025-07-01T03:02:29Z",
        "number":  117186,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:03:54Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1082334\nBuild error leg or test failing: System.Text.Json.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/117180\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"System.Text.Json.Tests\",\"ASSERT FAILED\",\"ValidateInner\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1082334\r\n**Error message validated:** `[System.Text.Json.Tests ASSERT FAILED ValidateInner`]\r\n**Result validation:** :x: Known issue did not match with the provided build.\r\n**Validation performed at:** 7/1/2025 3:09:12 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1149008](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008)|dotnet/runtime|[System.Text.Json.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149008\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31735180\u0026resultId=207931)|dotnet/runtime#119599|\r\n|[1144329](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144329)|dotnet/runtime|[System.Text.Json.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144329\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31562398\u0026resultId=207612)|dotnet/runtime#119516|\r\n|[1135713](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135713)|dotnet/runtime|[System.Text.Json.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135713\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31265216\u0026resultId=207591)|dotnet/runtime#119226|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|3|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxHLNFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60GZI6",
                                           "createdAt":  "2025-07-01T03:02:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-01T03:02:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60GZy_",
                                           "createdAt":  "2025-07-01T03:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Unfortunately, the crash dump is corrupted due to out of disk space, so it is not possible to investigate further.",
                                           "updatedAt":  "2025-07-01T03:05:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69ztJc",
                                           "createdAt":  "2025-08-13T15:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "since this hasn\u0027t reproed in a few weeks moving it to 11 for now. ",
                                           "updatedAt":  "2025-08-13T15:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69zuGi",
                                           "createdAt":  "2025-08-13T15:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-13T15:44:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AaHfX",
                                           "createdAt":  "2025-08-27T12:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Likely the same underlying issue as #119140",
                                           "updatedAt":  "2025-08-27T12:46:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ecs0X",
                                           "createdAt":  "2025-09-16T06:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T06:35:58Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "System.Text.Json.Tests fails with GC hole assert",
        "labels":  [
                       "area-GC-coreclr",
                       "blocking-clean-ci",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117319",
        "createdAt":  "2025-07-04T13:33:46Z",
        "number":  117319,
        "author":  "KeterSCP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHgmow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rs-blade",
                                            "createdAt":  "2025-07-18T05:06:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-15T05:35:07Z",
        "body":  "### Description\n\nStarting from 8.0.17 runtime version, GC does not return unmanaged memory to the OS on forced full GC.\n\nSuspected change is https://github.com/dotnet/runtime/pull/115023\nRelated: https://github.com/dotnet/runtime/discussions/108081\n\n### Reproduction Steps\n\n1. Make sure you have both 8.0.16 and 8.0.17 runtimes installed, 8.0.410 and 8.0.411 respective versions of SDK\n\n2. Program.csproj:\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n    \u003cPropertyGroup\u003e\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\n        \u003cRollForward\u003eDisable\u003c/RollForward\u003e\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\n        \u003cServerGarbageCollection\u003etrue\u003c/ServerGarbageCollection\u003e\n    \u003c/PropertyGroup\u003e\n\u003c/Project\u003e\n```\n\n3. Program.cs:\n\n```csharp\nusing System.Diagnostics;\nusing System.Runtime.CompilerServices;\n\nConsole.WriteLine(Environment.Version);\n\nfor (int i = 0; i \u003c 10; i++)\n{\n    _ = Allocate();\n}\n\nConsole.WriteLine($\"Private memory before GC: {GetPrivateMemoryMb()} MB\");\nTriggerGc(); // No matter how many times you call this, process private memory stays the same on 8.0.17\nConsole.WriteLine($\"Private memory after GC: {GetPrivateMemoryMb()} MB\");\n\n[MethodImpl(MethodImplOptions.NoInlining)]\nint Allocate()\n{\n    var data = new byte[1_000_000_000];\n    return data.Length;\n}\n\nvoid TriggerGc()\n{\n    GC.Collect(generation: 2, GCCollectionMode.Forced, blocking: true, compacting: true);\n    GC.WaitForPendingFinalizers();\n    Thread.Sleep(1000);\n}\n\ndouble GetPrivateMemoryMb()\n{\n    using var process = Process.GetCurrentProcess();\n    var mb = process.PrivateMemorySize64 / 1024.0 / 1024.0;\n    return Math.Round(mb, 2);\n}\n```\n\n4. Run `dotnet clean -c Release \u0026\u0026 dotnet run -c Release -p:RuntimeFrameworkVersion=\u00278.0.16\u0027`\n\n5. Run `dotnet clean -c Release \u0026\u0026 dotnet run -c Release -p:RuntimeFrameworkVersion=\u00278.0.17\u0027`\n\n### Expected behavior\n\nBehavior should not change between **patch** versions of runtime, and preferably, GC should return memory to the OS on forced compacting GC.\n\n### Actual behavior\n\n```\n8.0.16\nPrivate memory before GC: 9614.54 MB\nPrivate memory after GC: 60.44 MB\n```\n\n```\n8.0.17\nPrivate memory before GC: 9614.56 MB\nPrivate memory after GC: 9615.96 MB\n```\n\n### Regression?\n\nYes. Regression from 8.0.16\n\n### Known Workarounds\n\n- Use 8.0.16 runtime version\n\n### Configuration\n\nOS: Windows 11\nArchitecture: x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtxuNyA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60-khs",
                                           "createdAt":  "2025-07-04T13:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-04T13:34:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60-6tg",
                                           "createdAt":  "2025-07-04T14:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZWXzQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2025-07-04T14:03:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Thanks for reporting this issue @KeterSCP, we have heard about it through other channels recently. Hence: https://github.com/dotnet/runtime/tree/undo_distribute_regions. ",
                                           "updatedAt":  "2025-07-04T14:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61IyAX",
                                           "createdAt":  "2025-07-05T14:00:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KeterSCP",
                                           "body":  "@mangod9 not sure if it is related, but while experimenting with allocation values inside memory-constrained environment (docker container), I managed to get a set of different outcomes when allocating the same specific amount of bytes in a loop:\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003eSource code\u003c/summary\u003e\n  \n  ```csharp\nusing System.Diagnostics;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\nvar iterationAllocationSize = int.Parse(args[0].Replace(\"_\", \"\"));\n\nconst int iterations = 20;\n\nConsole.WriteLine($\"{Environment.Version} {RuntimeInformation.ProcessArchitecture}\");\n\nConsole.WriteLine($\"Expected total allocation size: {iterationAllocationSize * iterations / 1024.0 / 1024.0} MB\");\nConsole.WriteLine($\"Private memory before Allocate: {GetPrivateMemoryMb()} MB\");\n\nfor (int i = 0; i \u003c iterations; i++)\n{\n    _ = Allocate();\n}\n\nConsole.WriteLine($\"Private memory before GC: {GetPrivateMemoryMb()} MB\");\nTriggerGc();\nConsole.WriteLine($\"Private memory after GC: {GetPrivateMemoryMb()} MB\");\n\n[MethodImpl(MethodImplOptions.NoInlining)]\nint Allocate()\n{\n    var data = new byte[iterationAllocationSize];\n    return data.Length;\n}\n\nvoid TriggerGc()\n{\n    GC.Collect(generation: 2, GCCollectionMode.Forced, blocking: true, compacting: true);\n    GC.WaitForPendingFinalizers();\n    Thread.Sleep(1000);\n}\n\ndouble GetPrivateMemoryMb()\n{\n    using var process = Process.GetCurrentProcess();\n    var mb = process.PrivateMemorySize64 / 1024.0 / 1024.0;\n    return Math.Round(mb, 2);\n}\n  ```\n  \n\u003c/details\u003e\n\n- .NET 8.0.16 outcomes:\n\n1. Allocations succeed, process exits with 0 code.\n2. Allocations fail with OOM.\n3. Allocations succeed, process hangs indefinitely.\n\n\u003cimg width=\"1310\" height=\"408\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0943053d-1cd9-460a-a63e-04490deecc6f\" /\u003e\n\n- .NET 8.0.17 hanged 10/10 times.\n\nI managed to get dumps via `dotnet-dump` both for 8.0.16 and 8.0.17 hanged processes if you would like to analyze it (dumps do **not** contain sensitive information):\n\n[frozen_8_0_16.zip](https://github.com/user-attachments/files/21076724/frozen_8_0_16.zip)\n\n[frozen_8_0_17.zip](https://github.com/user-attachments/files/21076726/frozen_8_0_17.zip)",
                                           "updatedAt":  "2025-07-05T14:00:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61Jl4W",
                                           "createdAt":  "2025-07-05T15:33:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Does the issue only occur with DynamicAdaptationMode enabled? ",
                                           "updatedAt":  "2025-07-05T15:33:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61JrWv",
                                           "createdAt":  "2025-07-05T15:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KeterSCP",
                                           "body":  "Yes, without DATAS freeze does not occur. And 8.0.16 fails with OOM somewhere near 33.5 MB/iteration, while 8.0.17 OOMs at ~156 MB/iteration.\n\nI also checked .NET 9.0.6 and it behaves the same as 8.0.17, failing near 156 MB/iteration, but AFAIK .NET 9 has DATAS enabled by default, so the issue with freeze seems to be fixed in .NET 9",
                                           "updatedAt":  "2025-07-05T15:47:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61K38V",
                                           "createdAt":  "2025-07-05T18:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZdP1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2025-07-05T18:22:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "yeah there have been a few reliability fixes for DATAS in 9, which we hadn\u0027t back ported to 8 since its not the default. If this is a blocker we can look into it, but since more tuning has gone into 9 as well, prefer to not enable DATAS in 8. ",
                                           "updatedAt":  "2025-07-05T18:17:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61K5Ed",
                                           "createdAt":  "2025-07-05T18:22:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KeterSCP",
                                           "body":  "Completely not a blocker - just something that came up as a side thing during experiment while investigating memory consumption of our arm64 kubernetes pods",
                                           "updatedAt":  "2025-07-05T18:22:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63F7Hw",
                                           "createdAt":  "2025-07-15T03:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEakjZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2025-07-15T05:35:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Maoni0",
                                           "body":  "hi, I just got back from vacation today and took a look at this. \n\nwhat happened was in https://github.com/dotnet/runtime/pull/105521, the calls to `region_free_list::age_free_regions` was refactored into `gc_heap::age_free_regions` which also included a bug fix that\u0027s to age the huge free regions on the global huge free list if we are aging all regions -\n\n```cplusplus\n    if (age_all_region_kinds)\n    {\n        global_free_huge_regions.age_free_regions();\n    }\n```\nthis was done a long time ago and during the recent 8.0 port of https://github.com/dotnet/runtime/pull/109431 (https://github.com/dotnet/runtime/pull/115023, which went into the 8.0 release you got) we missed the few lines of changes in https://github.com/dotnet/runtime/pull/105521 that changed the calls from `region_free_list::age_free_regions` to `gc_heap::age_free_regions` so the huge free regions were not properly aged, and therefore not put on the decommit list to be decommmitted. all we need to do to make the 8.0 port work is to get the few lines of changes in https://github.com/dotnet/runtime/pull/105521 that did that. \n\n[8.0port_fix.patch](https://github.com/user-attachments/files/21225290/8.0port_fix.patch)\n\n",
                                           "updatedAt":  "2025-07-15T03:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63G43I",
                                           "createdAt":  "2025-07-15T05:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaktNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Maoni0",
                                                                               "createdAt":  "2025-07-15T06:04:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KeterSCP",
                                           "body":  "Hi @Maoni0! Hope you had a great time vacationing.\nThanks for the analysis. Yeah, it seems very reasonable to keep optimization from https://github.com/dotnet/runtime/pull/109431 alongside with fix of the decommit problem.",
                                           "updatedAt":  "2025-07-15T05:35:07Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Change in GC behavior in 8.0.17",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117683",
        "createdAt":  "2025-07-15T21:01:24Z",
        "number":  117683,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T22:11:44Z",
        "body":  "I user reported that they are A/B testing this feature on/off. We should ensure we have some coverage of this feature. I have not heard us discussing it.\n\nhttps://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt6l-JA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc63Xcde",
                                           "createdAt":  "2025-07-16T00:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-16T00:50:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63qX4k",
                                           "createdAt":  "2025-07-16T22:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-16T22:08:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider testing Transparent Huge Pages",
        "labels":  [
                       "os-linux",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117813",
        "createdAt":  "2025-07-18T14:57:39Z",
        "number":  117813,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-18T16:36:51Z",
        "body":  "Context: https://github.com/dotnet/runtime/pull/116383#discussion_r2167781942\n\nTry to reuse NativeAOT\u0027s implementation.\n\nWe should also think about https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/coreclr/gc/wasm/gcenv.wasm.cpp#L61-L63",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuC4W4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64KjRa",
                                           "createdAt":  "2025-07-18T14:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-18T14:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64KmlR",
                                           "createdAt":  "2025-07-18T15:03:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-18T15:03:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64Lhbj",
                                           "createdAt":  "2025-07-18T16:36:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-18T16:36:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm coreclr] Simplify gcenv for wasm, reuse NativeAOT\u0027s implementation",
        "labels":  [
                       "arch-wasm",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118038",
        "createdAt":  "2025-07-24T21:08:18Z",
        "number":  118038,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:04:12Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1104948\nBuild error leg or test failing: nativeaot.SmokeTests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/117910\n\n```\n        BEGIN EXECUTION\n        call C:\\h\\w\\AEF5099F\\p\\nativeaottest.cmd C:\\h\\w\\AEF5099F\\w\\B5D309AE\\e\\nativeaot\\SmokeTests\\FrameworkStrings\\Baseline\\ Baseline.dll \n        Object reference not set to an instance of an object.\n        Object reference not set to an instance of an object.\n        Interface maps for generic interfaces on arrays cannot be retrieved.\n        Interface maps for generic interfaces on arrays cannot be retrieved.\n        Resources in CoreLib:\n        Resources in reflection library:\n        Expected: 100\n        Actual: 100\n        END EXECUTION - PASSED\n        PASSED\n        Test Harness Exitcode is : 0\n        To run the test:\n        \u003e set CORE_ROOT=C:\\h\\w\\AEF5099F\\p\n        \u003e C:\\h\\w\\AEF5099F\\w\\B5D309AE\\e\\nativeaot\\SmokeTests\\FrameworkStrings\\Baseline\\Baseline.cmd\n    nativeaot\\SmokeTests\\Exceptions\\Exceptions\\Exceptions.cmd [FAIL]\n      Assertion failed: (n_heaps \u003c= heap_number) || !gc_t_join.joined(), file D:\\a\\_work\\1\\s\\src\\coreclr\\gc\\gc.cpp, line 7040\n      \n      Return code:      1\n      Raw output file:      C:\\h\\w\\AEF5099F\\w\\B5D309AE\\uploads\\Reports\\nativeaot.SmokeTests\\Exceptions\\Exceptions\\Exceptions.output.txt\n```\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"Assertion failed: (n_heaps \u003c= heap_number) || !gc_t_join.joined()\", \"gc.cpp, line 7040\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1104948\n**Error message validated:** `[Assertion failed: (n_heaps \u003c= heap_number) || !gc_t_join.joined() gc.cpp, line 7040`]\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\n**Validation performed at:** 7/24/2025 9:09:40 PM UTC\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1150109](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150109)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150109\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31768968\u0026resultId=100461)|dotnet/runtime#119786|\r\n|[1143685](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143685)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143685\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31539062\u0026resultId=100461)|dotnet/runtime#118492|\r\n|[1137609](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137609)|dotnet/runtime|[nativeaot.SmokeTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1137609\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31327766\u0026resultId=100461)|dotnet/runtime#118940|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|3|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwAUyXQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65sQ61",
                                           "createdAt":  "2025-07-25T00:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEb3IIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-07-25T01:07:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Servicing dup of https://github.com/dotnet/runtime/issues/106602",
                                           "updatedAt":  "2025-07-25T00:17:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65sREf",
                                           "createdAt":  "2025-07-25T00:17:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-25T00:17:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ABTJd",
                                           "createdAt":  "2025-08-25T20:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-08-25T20:00:29Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "gc.cpp assert during the nativeaot.SmokeTests runs",
        "labels":  [
                       "area-GC-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118225",
        "createdAt":  "2025-07-31T02:44:20Z",
        "number":  118225,
        "author":  "VincentBu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T06:48:49Z",
        "body":  "The following lines are call stacks of assert failure: `((heap_number == 0) \u0026\u0026 (VolatileLoadWithoutBarrier (\u0026settings.gc_index) == 0)) || (n_heaps \u003c= heap_number) || !gc_t_join.joined()`. This error occurs in following cases:\n\n* DATAS-linux-POH\n* Server-linux-POH\n* Server-Windows-Normal\n\n```\n # Child-SP          RetAddr               Call Site\n00 00007cfe`1c370490 00007cfe`1df79420     libc_so!wait4+0x57\n01 00007cfe`1c3704c0 00007cfe`1df7a6f8     libcoreclr!PROCCreateCrashDump+0x390 [/home/vbibu/runtime-net10/src/coreclr/pal/src/thread/process.cpp @ 2306] \n02 00007cfe`1c370530 00007cfe`1df77afd     libcoreclr!PROCCreateCrashDumpIfEnabled+0xad8 [/home/vbibu/runtime-net10/src/coreclr/pal/src/thread/process.cpp @ 2535] \n03 00007cfe`1c3705d0 00007cfe`1df2c733     libcoreclr!PROCAbort+0x2d [/home/vbibu/runtime-net10/src/coreclr/pal/src/thread/process.cpp @ 2569] \n04 00007cfe`1c3705f0 00007cfe`1e25b050     libcoreclr!invoke_previous_action+0x223\n05 00007cfe`1c370640 00007cfe`1df81bf1     libc_so!_sigaction+0x40\n06 00007cfe`1c370be8 00007cfe`1df291e2     libcoreclr!DBG_DebugBreak+0x1 [/home/vbibu/runtime-net10/src/coreclr/pal/src/arch/amd64/debugbreak.S @ 9] \n07 00007cfe`1c370bf0 00007cfe`1de33652     libcoreclr!DebugBreak+0x2f2 [/home/vbibu/runtime-net10/src/coreclr/pal/src/debug/debug.cpp @ 414] \n08 00007cfe`1c370cd0 00007cfe`1de333fb (T) libcoreclr!SVR::gc_heap::gc_thread_function+0x252 [/home/vbibu/runtime-net10/src/coreclr/gc/gc.cpp @ 7108] \n09 00007cfe`1c370d30 00007cfe`1dcfaca3     libcoreclr!SVR::gc_heap::gc_thread_stub+0xc6 [/home/vbibu/runtime-net10/src/coreclr/gc/gc.cpp @ 38097] \n0a (Inline Function) --------`--------     libcoreclr!\u003cunnamed-namespace\u003e::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::operator() const+0x4f [/home/vbibu/runtime-net10/src/coreclr/vm/gcenv.ee.cpp @ 1595] \n0b 00007cfe`1c370df0 00007cfe`1df7db23     libcoreclr!\u003cunnamed-namespace\u003e::CreateNonSuspendableThread(void (*)(void*), void*, char16_t const*)::$_1::__invoke+0x53 [/home/vbibu/runtime-net10/src/coreclr/vm/gcenv.ee.cpp @ 1576] \n0c 00007cfe`1c370e20 00007cfe`1e2a8134     libcoreclr!CorUnix::CPalThread::ThreadEntry+0x3b3 [/home/vbibu/runtime-net10/src/coreclr/pal/src/thread/thread.cpp @ 1622] \n0d 00007cfe`1c370ee0 00007cfe`1e3287dc     libc_so!pthread_condattr_setpshared+0x4d4\n0e 00007cfe`1c370f80 ffffffff`ffffffff     libc_so!_xmknodat+0x23c\n0f 00007cfe`1c370f88 00000000`00000000     0xffffffff`ffffffff\n```\n\nI will update this thread if we run into it in other case.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuw_8CA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67D_wI",
                                           "createdAt":  "2025-07-31T02:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-31T02:44:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Assert failure ((heap_number == 0) \u0026\u0026 (VolatileLoadWithoutBarrier (\u0026settings.gc_index) == 0)) || (n_heaps \u003c= heap_number) || !gc_t_join.joined() in reliability framework test",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118240",
        "createdAt":  "2025-07-31T14:05:35Z",
        "number":  118240,
        "author":  "atikattar1104",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-07T16:11:34Z",
        "body":  "an issue #85757 (https://github.com/dotnet/runtime/issues/85757) with merge request #85844 (https://github.com/dotnet/runtime/pull/85844) which shows this error, also occurs on 64-bit aarch64 platforms, while the issue and merge request were only specifies for 32-bit systems.\n\ni have been trying to run powershell v7.5.2 on android using termux, and faced this issue. \n\nthanks to this comment: https://github.com/dotnet/runtime/issues/79612#issuecomment-1352378682 \ni was able to solve this. \n\nalso, many users who are trying to use powershell using docker and proot environment, were also facing this exact issue. \n\nplease note this. \n\nthanks. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuyyr8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67LCIB",
                                           "createdAt":  "2025-07-31T14:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcq3aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atikattar1104",
                                                                               "createdAt":  "2025-07-31T14:39:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Possibly related: #116431",
                                           "updatedAt":  "2025-07-31T14:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67LCKN",
                                           "createdAt":  "2025-07-31T14:36:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-31T14:36:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67LKvz",
                                           "createdAt":  "2025-07-31T14:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atikattar1104",
                                           "body":  "\u003e Possibly related: [#116431](https://github.com/dotnet/runtime/issues/116431)\n\n@MihaZupan yeah, i agree. this may be the exact same issue users are facing. \n\ni have posted the workaround that works for me. let\u0027s see if that helps. ",
                                           "updatedAt":  "2025-07-31T14:47:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "32-bit error of `GC heap initialisation failed on error 0x8007000E` also exists for 64-bit.",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118433",
        "createdAt":  "2025-08-06T09:29:12Z",
        "number":  118433,
        "author":  "shshheyi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T21:10:23Z",
        "body":  "### Description\n\nIn linux-arm64, I generated a simple test so by Native AOT. But when I call the so function in a netcore ConsoleApp, it crash. \nBut i test it in linux-x64, it works fine.\n\n\n\n### Reproduction Steps\n\n1. Create a C# Library project \"grgbanking_io\", with the simple code:\n```C#\nusing System.Runtime.InteropServices;\n\nnamespace grgbanking_io\n{\n    public class StdApi\n    {\n        [UnmanagedCallersOnly(EntryPoint = \"native_add\")]\n        public static int NativeAdd(int a, int b) =\u003e a + b;\n\n    }\n}\n```\n\n2. Publish the NativeAOT so with the command:\n```shell\ndotnet publish -c Release -r linux-arm64 --self-contained /p:PublishAot=true\n```\n\n3. Create a netcore ConsoleApp project \"ConsoleTest\", with the simple code:\n```C#\nusing System.Runtime.InteropServices;\n\nnamespace ConsoleTest\n{\n    public partial class Program\n    {\n        \n        private const string _soName = \"grgbanking_io\";\n\n        [LibraryImport(_soName, EntryPoint = \"native_add\")]\n        private static partial int _nativeAdd(int a, int b);\n\n\n        static void Main(string[] args)\n        {\n            try\n            {\n                int result = _nativeAdd(3, 5);\n                Console.WriteLine($\"Result: {result}\");\n            }\n\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"Exception: {0}\", ex);\n            }\n            \n        }\n    }\n}\n```\n\n4. Publish the ConsoleApp with the same command:\n```shell\ndotnet publish -c Release -r linux-arm64 --self-contained /p:PublishAot=true\n```\n\n5. Copy the so and so.dbg files into the ConsoleApp\u0027s publish dir\n6. Run the ConsoleApp in gdb, will find the crash info.\n\n### Expected behavior\n\nwork normal\n\n### Actual behavior\n\nThe gdb info:\n```shell\nThread 1 \"ConsoleTest\" received signal SIGABRT, Aborted.\n0x0000007ff7d68eac in raise () from /lib/aarch64-linux-gnu/libc.so.6\n(gdb) bt\n#0  0x0000007ff7d68eac in raise () from /lib/aarch64-linux-gnu/libc.so.6\n#1  0x0000007ff7d55aa0 in abort () from /lib/aarch64-linux-gnu/libc.so.6\n#2  0x0000007ff4c3da20 in RhFailFast() () from /root/grgbanking_io/ConsoleTest/bin/Release/net10.0/linux-arm64/publish/grgbanking_io.so\n#3  0x0000007ff4c4f85c in Thread::ReversePInvokeAttachOrTrapThread(ReversePInvokeFrame*) () from /root/grgbanking_io/ConsoleTest/bin/Release/net10.0/linux-arm64/publish/grgbanking_io.so\n#4  0x0000007ff4cf9a7c in native_add () from /root/grgbanking_io/ConsoleTest/bin/Release/net10.0/linux-arm64/publish/grgbanking_io.so\n#5  0x00000055555bfa64 in ConsoleTest_ConsoleTest_Program___nativeAdd ()\n#6  0x00000055555bfabc in ConsoleTest_ConsoleTest_Program__Main ()\n#7  0x0000005555626c30 in __managed__Main ()\n#8  0x0000007ff7d55e18 in __libc_start_main () from /lib/aarch64-linux-gnu/libc.so.6\n#9  0x0000005555556d3c in _start () #\n```\n\n\n### Regression?\n\nI test in net8 ,net9 and net10preview6，it all crashed.\nBut in net10preview6, it shows the error info:\n```shell\nFatal error. .NET runtime failed to initialize.\n```\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET Version: net8 ,net9 and net10preview6\nOS: linux-arm64, Debian 11\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvOFeJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68T6Ua",
                                           "createdAt":  "2025-08-06T10:31:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issue:\n- https://github.com/dotnet/runtime/issues/95257",
                                           "updatedAt":  "2025-08-06T10:31:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68VVj1",
                                           "createdAt":  "2025-08-06T11:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdbEXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shshheyi",
                                                                               "createdAt":  "2025-08-07T06:38:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Can you try setting the `DOTNET_GCHeapHardLimitPercent` environment variable to 8 before you run the program?\n\nRun `export DOTNET_GCHeapHardLimitPercent=8` before launching the executable.",
                                           "updatedAt":  "2025-08-06T11:08:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68gv6g",
                                           "createdAt":  "2025-08-07T06:37:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shshheyi",
                                           "body":  "@MichalStrehovsky , Thanks, I tried to set the environment variable DOTNET_GCHeapHardLimitPercent, and then run the consoleApp, it  worked.\n```shell\nroot@emptech:~/grgbanking_io/ConsoleTest/bin/Release/net10.0/linux-arm64/publish# export DOTNET_GCHeapHardLimitPercent=8\nroot@emptech:~/grgbanking_io/ConsoleTest/bin/Release/net10.0/linux-arm64/publish# ./ConsoleTest\nResult: 8\n```\n\n\n\u003e Can you try setting the `DOTNET_GCHeapHardLimitPercent` environment variable to 8 before you run the program?\n\u003e \n\u003e Run `export DOTNET_GCHeapHardLimitPercent=8` before launching the executable.\n\n",
                                           "updatedAt":  "2025-08-07T06:37:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68gxKM",
                                           "createdAt":  "2025-08-07T06:39:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Thank you! Moving this to the GC area path. This is an ongoing support cost.",
                                           "updatedAt":  "2025-08-07T06:39:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68gxS9",
                                           "createdAt":  "2025-08-07T06:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T06:40:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68pFcv",
                                           "createdAt":  "2025-08-07T16:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@MichalStrehovsky, assume this is the same issue of large reservation size?",
                                           "updatedAt":  "2025-08-07T16:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68thCT",
                                           "createdAt":  "2025-08-07T22:42:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e [@MichalStrehovsky](https://github.com/MichalStrehovsky), assume this is the same issue of large reservation size?\n\nWe have two GCs in the process (JIT-based CoreCLR and native AOT), the runtime is failing to initialize in the second, and everything gets fixed with the `export DOTNET_GCHeapHardLimitPercent=8` workaround, so my guess is that.",
                                           "updatedAt":  "2025-08-07T22:42:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68uGEN",
                                           "createdAt":  "2025-08-08T00:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is there anything special about `DOTNET_GCHeapHardLimitPercent=8`, so generally any smaller value would do? \n\nWe are planning to change the reservation size to 2x Physical Memory for NativeAOT case, wonder if that would help alleviate this issue? ",
                                           "updatedAt":  "2025-08-08T00:18:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68vhrr",
                                           "createdAt":  "2025-08-08T04:56:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shshheyi",
                                           "body":  "@mangod9 When use only one NativeAOT so lib, I tested the DOTNET_GCHeapHardLimitPercent, if \u003c 50%, it can work normal.But in my final App, may use 3 or more NativeAOT so libs. Can share the size in one process no matter how many NativeAOT so libs it used?",
                                           "updatedAt":  "2025-08-08T04:58:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68vnJ6",
                                           "createdAt":  "2025-08-08T05:11:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e We are planning to change the reservation size to 2x Physical Memory for NativeAOT case, wonder if that would help alleviate this issue?\n\nWhy only for native AOT?\n\nMost reports (including this and #95257 linked above by the bot) involve JIT-based CoreCLR loading a native AOT library. We know that 256 GB + 256 GB reservation is too much for many systems. Do we have data that 256 GB + 2 * Physical Memory would work?\n\nWe have data that even the first 256 GB (without native AOT in the picture at all) is problematic:\n\n* #116431, in the Future milestone\n* #79612, closed even though https://github.com/dotnet/runtime/issues/79612#issuecomment-1352378682 was hinting at potential fix\n\nI haven\u0027t tried following all the linked issues, looks like there is more to it.\n\nCc @agocke \n\n\u003e Is there anything special about `DOTNET_GCHeapHardLimitPercent=8`, so generally any smaller value would do?\n\nThe number is a copypaste from https://github.com/dotnet/runtime/issues/95257#issuecomment-1834466629, I haven\u0027t put thought into it.",
                                           "updatedAt":  "2025-08-08T05:11:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68vyNm",
                                           "createdAt":  "2025-08-08T05:42:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "We cannot change the default for SVR or WKS since it might cause regressions for larger applications. As an initial step we can update it for NativeAOT. \n\nWe could also improve the error message and provide the configuration needed to get the scenario to work per the specific app requirements. \n\n@Maoni0 ",
                                           "updatedAt":  "2025-08-08T05:42:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68zg_h",
                                           "createdAt":  "2025-08-08T11:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e We cannot change the default for SVR or WKS since it might cause regressions for larger applications. As an initial step we can update it for NativeAOT.\n\nHaving different defaults for things that affect GC perf makes it very hard to root cause perf issues between native AOT and CoreCLR. Random perf differences are even more expensive for us to root cause than a failure to initialize the runtime. I don\u0027t find a native AOT specific fix acceptable and I would prefer not to do anything then.",
                                           "updatedAt":  "2025-08-08T11:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc684V4k",
                                           "createdAt":  "2025-08-08T18:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "@shshheyi, assuming the workaround to manually configure the hard limit works for you. We have another issue tracking the case of multiple runtimes within the same process case. ",
                                           "updatedAt":  "2025-08-08T18:01:30Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Crash when Netcore ConsoleApp use LibraryImport to call a function in a so generated by Native AOT in linux-arm64",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118503",
        "createdAt":  "2025-08-07T22:06:31Z",
        "number":  118503,
        "author":  "SyntaxJuggler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:03Z",
        "body":  "Description\nOur application uses high-performance, unsafe-based data structures with manual memory management via NativeMemory (e.g., unmanaged heap queues and registries).\n\nLocally, everything works correctly — memory is released after task completion. However, when running in Docker containers (with containerd as runtime), memory usage continues to grow and remains close to the peak level, even when the workload drops and queues are cleared.\n\nWe explicitly free all memory using NativeMemory.Free(...), and the data structures shrink their allocations after inactivity or size reduction. However, this memory is not released back to the host OS (even after forced GC and trimming), which leads to memory usage staying near the high watermark.\n\nThis behavior occurs even when memory limits are applied to the container — the memory usage simply plateaus at the limit instead of going down.\n\nConfiguration\n.NET version: 9.0.0-preview* (or your version)\n\nOS: Linux, tested on Ubuntu 22.04 and 24.04\n\nContainer runtime: containerd (tested on Docker and Kubernetes)\n\nArchitecture: x64\n\nGC: Server GC enabled\n\njemalloc: Tried with LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so.2 — didn\u0027t help\n\nManual GC + GC.Collect(...) + GC.WaitForPendingFinalizers + GC.TryStartNoGCRegion/End\n\nRegression?\nNot sure if it\u0027s a regression. But locally memory is released fine, and in containers it\u0027s not.\n\nData\nMinimal example:\n\n\u003cimg width=\"795\" height=\"274\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/990c47f2-70ab-4b88-bc00-ba71da982fd7\" /\u003e\n\nHere\u0027s a memory usage graph captured during testing. As visible, after tasks finish and queues are cleared, memory is not returned to the host system.\n\nThe collections used are written in pure unsafe C# with full manual allocation and deallocation logic.\n\nAnalysis\nIt appears the unmanaged memory allocated via NativeMemory.Alloc* is never actually released to the OS from within the container, even when manually freed. We expect that after clearing/scheduling all tasks and releasing memory, the process should gradually release unused memory pages back to the host. This only happens reliably outside Docker, not inside.\n\nAny ideas what could be preventing release of unmanaged memory back to the OS in containerized environments?\n/cc @Maoni0 @mangod9\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvOXwJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68tSIU",
                                           "createdAt":  "2025-08-07T22:07:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T22:07:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68tUtl",
                                           "createdAt":  "2025-08-07T22:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issues:\n- https://github.com/dotnet/runtime/issues/95922\n- https://github.com/dotnet/runtime/issues/98524\n- https://github.com/dotnet/runtime/issues/109933",
                                           "updatedAt":  "2025-08-07T22:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc681m14",
                                           "createdAt":  "2025-08-08T14:37:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "GC doesnt have any knowledge of manually allocated memory using NativeMemory.Alloc so will not track and/or hold on to it. In most cases this would mean your Alloc/Free patterns don\u0027t match which might lead to a leak. \n \n\u003e Locally, everything works correctly\n\nAre you running within a container as well locally? Can you provide a repro related to this? We have seen some cases related to openssl which have caused some memory growth, but aren\u0027t aware of any ",
                                           "updatedAt":  "2025-08-08T14:37:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc685fAl",
                                           "createdAt":  "2025-08-08T20:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SyntaxJuggler",
                                           "body":  "\u003e GC doesnt have any knowledge of manually allocated memory using NativeMemory.Alloc so will not track and/or hold on to it. In most cases this would mean your Alloc/Free patterns don\u0027t match which might lead to a leak.\n\u003e \n\u003e \u003e Locally, everything works correctly\n\u003e \n\u003e Are you running within a container as well locally? Can you provide a repro related to this? We have seen some cases related to openssl which have caused some memory growth, but aren\u0027t aware of any\n\nI tried using managed versions of the collections where most of the memory is allocated, and the results were completely identical — the memory allocated to the application remains occupied even after I explicitly cleared it. I also reviewed the code that uses unmanaged memory, and based on the comparison, it\u0027s clear that the issue is not caused by a memory leak on my side.\n\nAccording to dotMemory Profiler, most of the large collections reside in the LOH, taking up around 80 MB. Even after clearing them, the application’s memory usage doesn\u0027t significantly drop. It appears that only Gen 0, Gen 1, and Gen 2 allocations are properly collected, which impacts GC-related metrics — but memory in the LOH and unmanaged memory (excluding my code) is not being returned to the OS.\n\nFor instance, if the total memory usage grows from 60 to 180 MB, and 80–100 MB is due to LOH collections, there are still around 20 MB used by other components — possibly libraries or lingering unmanaged allocations (e.g., native buffers, retained connections). However, since all of those resources were explicitly disposed or closed, that memory should have been released as well — yet it remains.\n\n",
                                           "updatedAt":  "2025-08-08T20:21:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Memory not released to host OS after NativeMemory.Free in Docker container with containerd runtime",
        "labels":  [
                       "tenet-performance",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118826",
        "createdAt":  "2025-08-17T22:08:29Z",
        "number":  118826,
        "author":  "timcassell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:03Z",
        "body":  "### Description\n\nhttps://github.com/dotnet/BenchmarkDotNet/issues/2822\n\n### Reproduction Steps\n\nRun the provided repro in https://github.com/dotnet/BenchmarkDotNet/issues/2822#issuecomment-3193740385\n\n### Expected behavior\n\nAllocated bytes are reported correctly.\n\n### Actual behavior\n\nAllocated bytes sometimes report zero.\n\n### Regression?\n\nYes, it repros in .Net 9 and 10, does not repro in .Net 8.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```pwsh\nBenchmarkDotNet v0.15.2, Windows 10 (10.0.19045.6216/22H2/2022Update)\nAMD Ryzen 7 9800X3D 4.70GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK 10.0.100-preview.6.25358.103\n  [Host]     : .NET 8.0.18 (8.0.1825.31117), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n  Job-AIONMJ : .NET 10.0.0 (10.0.25.35903), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n  Job-YDJZTJ : .NET 8.0.18 (8.0.1825.31117), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n  Job-XGIHIM : .NET 9.0.7 (9.0.725.31616), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvqfU-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-a22n",
                                           "createdAt":  "2025-08-17T23:06:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@timcassell can you point to the code that is measuring memory allocations in BDN?",
                                           "updatedAt":  "2025-08-17T23:06:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-a356",
                                           "createdAt":  "2025-08-17T23:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "https://github.com/dotnet/BenchmarkDotNet/blob/e2d30d37433444b0f43088727a14885d76c56bfc/src/BenchmarkDotNet/Engines/Engine.cs#L270-L273\nhttps://github.com/dotnet/BenchmarkDotNet/blob/e2d30d37433444b0f43088727a14885d76c56bfc/src/BenchmarkDotNet/Engines/GcStats.cs#L151",
                                           "updatedAt":  "2025-08-17T23:13:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-a4LI",
                                           "createdAt":  "2025-08-17T23:15:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-17T23:15:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-a4TI",
                                           "createdAt":  "2025-08-17T23:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Thanks, I was curious if `GetTotalAllocatedBytes` result could be accidentally boxed (JIT may hoist allocations in some cases), but it\u0027s clearly not the case here.",
                                           "updatedAt":  "2025-08-17T23:16:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-mZH9",
                                           "createdAt":  "2025-08-18T17:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Could this be another symptom of https://github.com/dotnet/runtime/issues/106712 ? I see code in the GcStats.cs that clamps values to zero if they are negative.",
                                           "updatedAt":  "2025-08-18T17:01:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-p9T6",
                                           "createdAt":  "2025-08-18T23:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "That does not appear to be the case here. I printed the read values before the subtraction (where the clamp occurs), and both are positive, but the second read is smaller than the first read.\n\n```\nAllocated Initial: 130296238672, Final: 123078689664\n```",
                                           "updatedAt":  "2025-08-18T23:00:50Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Measured allocations randomly zero",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118833",
        "createdAt":  "2025-08-18T05:40:08Z",
        "number":  118833,
        "author":  "rohansaw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:04Z",
        "body":  "### Description\n\nWhen running the Simulation software `APSIM` that uses dotnet8, I notice an excessive reservation of virtual memory on our `RHEL` systems. For each process 2x ram size is reserved, while in reality only a few GB are ever used, which leads to each process reserving 2TB of ram on our systems. \n\nOn our `AMD EPYC` nodes (multiple), this causes a conflict leading to the OS crashing since `Numad` seems to hit an edge case here, when running hundreds of these processes in parallel. \n\nThe developers of APSIM pointed out that this issue is likely originating from the way dotnet handles virtual memory reservation - [see original issue with APSIM](https://github.com/APSIMInitiative/ApsimX/issues/10155).\n\nThis is observed with dotnet `8.0.412`. If necessary I can also provide kernel logs of the system crash from numad. We are only observing these crashes from the `APSIM` application build around `.NET`.\n\n\n### Reproduction Steps\n\n```bash\nwget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh\nchmod +x ./dotnet-install.sh\n# My Installed Version == 8.0.412\n./dotnet-install.sh --channel 8.0\nexport DOTNET_ROOT=/path/to/dotnet\n\n#APSIM INSTALL\ngit clone https://github.com/APSIMInitiative/ApsimX.git\ncd ApsimX\ndotnet build -c Release ApsimX.sln\n\n# run apsim with an example file\n/path/to/my/dotnet8 ApsimX/bin/Release/net8.0/Models --cpu-count 8 apsimfile.apsimx\n\n```\n\n### Expected behavior\n\nA more reasonable size of virtual memory should be reserved for each process instead of having more than 100 processes each reserving 2TB of vmem.\n\n### Actual behavior\n\nEach process reserves 2TB of RAM on our 1TB RAM system.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvpLlOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-dvL9",
                                           "createdAt":  "2025-08-18T07:27:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T07:27:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-kWLr",
                                           "createdAt":  "2025-08-18T14:35:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEepn-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rohansaw",
                                                                               "createdAt":  "2025-08-18T15:02:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "Is this causing any functional issues for you? We are working on reducing the reservation size to min(256gb, 2 x physical_memory) for Workstation. You can also reduce the reservation size by using `DOTNET_GCRegionRange` environment variable to limit the reservation size. ",
                                           "updatedAt":  "2025-08-18T14:35:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-kuU7",
                                           "createdAt":  "2025-08-18T15:01:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rohansaw",
                                           "body":  "We are currently experiencing an OS crash caused by `numad` under `RHEL 9` on and `AMD EPYC` system connected to a `GPFS`. So far, we were only able to reproduce this crash with the usage from the .NET based `APSIM` simulation tool that reserves this large amounts of memory - the working theory was that crash might caused by such  an untested path of `numad`. \n\nHowever, I just used `DOTNET_GCRegionRange` limited to 128GB and am still experiencing the crashes, so we do not seem to have any functional issues from this. Thank you for pointing this out!",
                                           "updatedAt":  "2025-08-18T15:01:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Excessive reservation of virtual memory on RHEL",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118943",
        "createdAt":  "2025-08-20T21:56:39Z",
        "number":  118943,
        "author":  "SingleAccretion",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMM_ww==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "cyraid",
                                            "createdAt":  "2025-08-21T22:05:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyraid",
                                            "createdAt":  "2025-08-21T22:11:35Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-19T18:01:09Z",
        "body":  "WASM memory model makes it very similar to an environment with very restricted virtual address space, where we don\u0027t want to reserve large blocks of memory upfront (since they also get \u0027committed\u0027 right away). It is also an environment where this restriction can be very tight (\u003c 32 MB).\n\nRight now, the default 32 bit config reserves something like ~50MB of memory on startup, which is pretty large, and this number doesn\u0027t respect the WASM memory limits because the necessary code is 64-bit only.\n\nIs fixing that \"just work\" or something trickier?\n\nRef: https://github.com/dotnet/runtime/pull/85844.\nContext: https://github.com/dotnet/runtimelab/issues/3150.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwu9Ejg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_OUm0",
                                           "createdAt":  "2025-08-20T21:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-20T21:58:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C70SO",
                                           "createdAt":  "2025-09-09T12:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-09T12:20:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[WASM / CoreCLR GC] Can we support the hard heap limits on 32 bit?",
        "labels":  [
                       "arch-wasm",
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119140",
        "createdAt":  "2025-08-27T12:37:30Z",
        "number":  119140,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:04:23Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1132704\nBuild error leg or test failing: System.Text.RegularExpressions.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/119132\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"System.Text.RegularExpressions.Tests\",\"!CREATE_CHECK_STRING(bSmallObjectHeapPtr || bLargeObjectHeapPtr)\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132704\r\n**Error message validated:** `[System.Text.RegularExpressions.Tests !CREATE_CHECK_STRING(bSmallObjectHeapPtr || bLargeObjectHeapPtr)`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/27/2025 12:37:54 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1145551](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145551)|dotnet/runtime|[System.Text.RegularExpressions.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145551\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31606548\u0026resultId=218337)|dotnet/runtime#118754|\r\n|[1133611](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133611)|dotnet/runtime|[System.Text.RegularExpressions.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133611\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31197998\u0026resultId=218788)|dotnet/runtime#119162|\r\n|[1132704](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132704)|dotnet/runtime|[System.Text.RegularExpressions.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132704\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31171528\u0026resultId=218310)|dotnet/runtime#119132|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|3|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwGiOMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AaCrI",
                                           "createdAt":  "2025-08-27T12:41:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/111922",
                                           "updatedAt":  "2025-08-27T12:49:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AaG6W",
                                           "createdAt":  "2025-08-27T12:45:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Analysis of the dump `runfo get-helix-payload -j 4ee844af-5426-4fc1-8e0e-c9e9e8a27146 -w System.Text.RegularExpressions.Tests -o c:\\helix_payload`:\n\nStacktrace of the crash:\n```\nlibcoreclr!Object::ValidateInner+0x5ff [/__w/1/s/src/coreclr/vm/object.cpp @ 562] \nlibcoreclr!OBJECTREF::OBJECTREF+0x58 [/__w/1/s/src/coreclr/vm/object.cpp @ 1088] \nlibcoreclr!MethodDescCallSite::Call_RetOBJECTREF+0x20 [/__w/1/s/src/coreclr/vm/callhelpers.h @ 449] \nlibcoreclr!LCGMethodResolver::GetLocalSig+0x1bd [/__w/1/s/src/coreclr/vm/callhelpers.h @ 15732480] \nlibcoreclr!CEEInfo::getMethodInfoWorker+0x21b [/__w/1/s/src/coreclr/vm/jitinterface.cpp @ 15732480] \nlibcoreclr!CEECodeGenInfo::CEECodeGenInfo+0x10d [/__w/1/s/src/coreclr/vm/jitinterface.cpp @ 10747] \nlibcoreclr!CEEJitInfo::CEEJitInfo+0x12 [/__w/1/s/src/coreclr/vm/jitinterface.h @ 816] \nlibcoreclr!UnsafeJitFunction+0x440 [/__w/1/s/src/coreclr/inc/volatile.h @ 13395] \n```\n\nThe object reference is valid. GC heap is not corrupted. The object was allocated very recently.\n\nI think that the most likely explanation of the assertion failure is a race condition (memory model issue) in `GCHeap::IsHeapPointer` where it may return false for recently allocated objects from a different thread. @dotnet/gc Could you please take a look?\n\nThis is likely the same underlying problem as #117186",
                                           "updatedAt":  "2025-08-27T12:45:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AaI4y",
                                           "createdAt":  "2025-08-27T12:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-27T12:47:55Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Text.RegularExpressions.Tests fail with CREATE_CHECK_STRING(bSmallObjectHeapPtr || bLargeObjectHeapPtr)",
        "labels":  [
                       "area-GC-coreclr",
                       "blocking-clean-ci",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119236",
        "createdAt":  "2025-09-01T01:51:47Z",
        "number":  119236,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:12Z",
        "body":  "**Failed in:** [runtime-coreclr gcstress-extra 20250830.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1135660)\n\n**Failed tests:**\n```\ncoreclr windows x86 Checked gcstress0xc_jitminopts_heapverify1 @ Windows.10.Amd64.Open\n    - GC/API/WeakReference/Finalize2/Finalize2.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      C:hwA4B5094FwAE6C093CuploadsAPIWeakReferenceFinalize2output.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwA4B5094Fpcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  Finalize2.dll \nRunning ~GetTargetTest\ngetTarget passed\n\nRunning ~IsAliveTest\nIsAliveTest passed\n\nRunning ~SetTargetTest\nsetTarget failed\n\n\nShort WR Test Failed!\n\n\nRunning ~SetTargetTest\nCaught expected InvalidOperationException\nsetTarget passed\n\nRunning ~IsAliveTest\nIsAliveTest passed\n\nRunning ~GetTargetTest\ngetTarget passed\n\n\nLong WR Test Passed!\n\n\nTest Failed!\nXunit.Sdk.EqualException: Assert.Equal() Failure: Values differ\nExpected: 100\nActual:   1\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/EqualityAsserts.cs:line 174\n   at Xunit.Assert.Equal[T](T expected, T actual) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/EqualityAsserts.cs:line 96\n   at __GeneratedMainWrapper.Main()\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nFAILED\nTest failed. Trying to see if dump file was created in C:cores since 8/30/2025 10:51:48 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwA4B5094FwAE6C093CeGCGC../API/WeakReference/Finalize2/Finalize2.cmd\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Xunit.Assert.True(Boolean condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 123\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor72|0_73(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwUihag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BSKFq",
                                           "createdAt":  "2025-09-01T15:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-01T15:35:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Test failure: GC/API/WeakReference/Finalize2/Finalize2.cmd",
        "labels":  [
                       "arch-x86",
                       "os-windows",
                       "GCStress",
                       "area-GC-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119418",
        "createdAt":  "2025-09-05T23:49:08Z",
        "number":  119418,
        "author":  "heh-ad",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:09Z",
        "body":  "### Description\n\nIn a C++/CLI program, when specifying a custom GC with `System.GC.Name`, such as clrgc.dll. It will load it from a wrong place included in the `PATH` environment variable, such as from the PowerShell folder.\n\nIf the wrong custom GC is loaded and it is not compatible with the current .NET runtime, then it will cause a crash.\n\n\u003cimg width=\"2525\" height=\"1524\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/28fbd27e-0f82-4606-b7d5-78c423633163\" /\u003e\n\n### Reproduction Steps\n\nInstall .NET 10 preview 7 and PowerShell 7.5.2. Make sure `C:\\Program Files\\PowerShell\\7\\` added to the `PATH` environment variable.\n\nCreate a C++ console application which loads a C++/CLI library. Add the `RuntimeHostConfigurationOption` to the C++/CLI project.\n```XML\n  \u003cItemGroup\u003e\n    \u003cRuntimeHostConfigurationOption Include=\"System.GC.Name\" Value=\"clrgc.dll\" /\u003e\n  \u003c/ItemGroup\u003e\n```\n\nBuild and run the application.\n\nThe code is attached as [StandaloneGC.zip](https://github.com/user-attachments/files/22182809/StandaloneGC.zip). Please try the `Debug | x64` configuration.\n\n### Expected behavior\n\nclrgc.dll is loaded from C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\10.0.0-preview.7.25380.108 and it shows \"Hello World!\" in the console.\n\n### Actual behavior\n\nclrgc.dll is loaded from C:\\Program Files\\PowerShell\\7\\ which is still .NET 9, and it crashes when starting the .NET runtime.\n\n### Regression?\n\nIt worked in .NET 8.\n\n### Known Workarounds\n\nAvoid using a custom GC in a C++/CLI program in .NET 9+.\n\n### Configuration\n\n.NET 10 preview 7 on Windows 11 24H2 x64\n\n### Other information\n\nIt is probably caused by https://github.com/dotnet/runtime/pull/101874, which added `APP_CONTEXT_BASE_DIRECTORY` as the search path for the custom GC. But for a C++/CLI program, it is empty. Then `HostInformation::GetProperty` still returns true and `CLRLoadLibrary` will load it from the one in the PowerShell folder when `libraryName` doesn\u0027t contain the full path.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwlGM7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7CUYzs",
                                           "createdAt":  "2025-09-06T00:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-06T00:31:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Custom GC is loaded from the wrong place in a C++/CLI program",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119424",
        "createdAt":  "2025-09-06T08:39:15Z",
        "number":  119424,
        "author":  "Alikhalesi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:08:26Z",
        "body":  "### Description\n\nIn gc_heap::make_unused_array, when HOST_64BIT is enabled and the object size exceeds 4 GB—such that the size is represented entirely in the high DWORD (e.g., size = 17179869160)—the first call to SetFree(size) results in the creation of a free object with Array::m_NumComponents = 0.\n\nThis occurs because SetFree internally casts the size to a uint32_t, truncating the high DWORD. As a result:\n\nA free object is created with len = 0, which is misleading or invalid.\n\nImmediately afterward, the function correctly splits the large object into multiple valid chunks using the proper logic.\n\nAdditionally, for certain sizes like 34359738393, the low DWORD is 1, causing the first free object to be created with len = 1, which is inefficient. Ideally, the allocation should begin with a chunk size of UINT32_MAX to maximize utilization.\n\n\nPotential Fix: \n\nThe initial call to SetFree(size) can be skipped entirely when HOST_64BIT is defined, as the subsequent logic already handles large object sizes correctly.\n\n\n#ifndef HOST_64BIT\n    ((CObjectHeader*)x)-\u003eSetFree(size);\n#endif\n\nAlternatively, conditionally call SetFree only when size \u003c= UINT32_MAX.\n\nI\u0027d like to take ownership of this issue and work on a fix. Assigning it to myself if that\u0027s okay.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwn7Flw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7CaoD6",
                                           "createdAt":  "2025-09-06T10:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-06T10:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CaowL",
                                           "createdAt":  "2025-09-06T10:18:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhMgBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Alikhalesi",
                                                                               "createdAt":  "2025-09-07T07:42:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Objects larger than 2GB are very unusual. The amount of possible creations is also very limited. The performance of the function should be optimized in favor of small objects.",
                                           "updatedAt":  "2025-09-06T10:18:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cd-CP",
                                           "createdAt":  "2025-09-06T17:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhME_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Alikhalesi",
                                                                               "createdAt":  "2025-09-07T03:16:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mangod9",
                                           "body":  "It\u0027s fine to work on a fix, but if you are able to write some perf tests and provide some concrete numbers across different object sizes with your change it would be useful to determine perf tradeoffs. Thanks!",
                                           "updatedAt":  "2025-09-06T17:06:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CfsWX",
                                           "createdAt":  "2025-09-06T19:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhME-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Alikhalesi",
                                                                               "createdAt":  "2025-09-07T03:16:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This is about shaving nanoseconds when dealing with 2GB+ arrays. There is no way to measure that in a meaningful way. \n\nI see this as code clarity improvement, not a performance fix.",
                                           "updatedAt":  "2025-09-06T19:20:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Inefficient or invalid free object creation in gc_heap::make_unused_array for large sizes on HOST_64BIT",
        "labels":  [
                       "area-GC-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119700",
        "createdAt":  "2025-09-15T01:53:38Z",
        "number":  119700,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:13Z",
        "body":  "**Failed in:** [runtime-coreclr jitstress2-jitstressregs 20250913.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1147457)\n\n**Failed tests:**\n```\ncoreclr linux arm Checked jitstress2_jitstressregs0x80 @ (Debian.13.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-13-helix-arm32v7\n    - GC/Scenarios/THDChaos/thdchaos/thdchaos.cmd\n```\n\n**Error message:**\n```\nProcess terminated.\nOnUnhandledException called recursively\n   at System.Environment.FailFast(System.Runtime.CompilerServices.StackCrawlMarkHandle, System.String, System.Runtime.CompilerServices.ObjectHandleOnStack, System.String)\n   at System.Environment.FailFast(System.Threading.StackCrawlMark ByRef, System.String, System.Exception, System.String)\n   at System.Environment.FailFast(System.String)\n   at System.AppContext.OnUnhandledException(System.Object)\n   at System.Runtime.EH.DispatchEx(System.Runtime.StackFrameIterator ByRef, ExInfo ByRef)\n   at System.Runtime.EH.RhThrowEx(System.Object, ExInfo ByRef)\n   at System.Threading.Thread.StartCore()\n   at DefaultNamespace.LivingObject.ThreadStart()\n   at System.Threading.Thread.StartCallback()\n[createdump] Problem suspending thread: ptrace(ATTACH, 528) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 538) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 539) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 540) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 541) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 542) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 544) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 545) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 546) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 547) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 548) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 549) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 550) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 551) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 552) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 553) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 554) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 555) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 556) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 558) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 559) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 560) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 561) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 562) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 563) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 564) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 565) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 566) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 567) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 568) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 569) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 570) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 571) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 572) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 573) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 574) FAILED No such process (3)\n[createdump] Problem suspending thread: ptrace(ATTACH, 580) FAILED No such process (3)\n[createdump] Problem suspendi\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor49|0_50(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxC9QUg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EHLg5",
                                           "createdAt":  "2025-09-15T01:54:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T01:54:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EL1BS",
                                           "createdAt":  "2025-09-15T10:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T10:16:54Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failure: GC/Scenarios/THDChaos/thdchaos/thdchaos.cmd",
        "labels":  [
                       "arch-arm32",
                       "os-linux",
                       "JitStress",
                       "area-GC-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119701",
        "createdAt":  "2025-09-15T01:57:16Z",
        "number":  119701,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T18:01:17Z",
        "body":  "**Failed in:** [runtime-coreclr gcstress-extra 20250913.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1147527)\n\n**Failed tests:**\n```\ncoreclr linux x64 Checked heapverify1 @ AzureLinux.3.Amd64.Open\n    - GC/Scenarios/muldimjagary/muldimjagary/muldimjagary.cmd\n```\n\n**Error message:**\n```\nwaitpid() returned successfully (wstatus 00000000) WEXITSTATUS 0 WTERMSIG 0\n/datadisks/disk1/work/91870829/w/BEF10A47/e/GC/Scenarios/GC-scenarios1/../muldimjagary/muldimjagary/muldimjagary.sh: line 477:  4465 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\n\nReturn code:      1\nRaw output file:      /datadisks/disk1/work/91870829/w/BEF10A47/uploads/muldimjagary/muldimjagary/output.txt\nRaw output:\nBEGIN EXECUTION\n/datadisks/disk1/work/91870829/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false -p System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true muldimjagary.dll \u0027\u0027\nTest should return with ExitCode 100 ...\n[createdump] Gathering state for process 4465 corerun\n[createdump] Crashing thread 1256 signal 5 (0005)\n[createdump] Writing crash report to file /datadisks/disk1/dumps/coredump.4465.dmp.crashreport.json\n[createdump] Crash report successfully written\n[createdump] Writing minidump with heap to file /datadisks/disk1/dumps/coredump.4465.dmp\n[createdump] Written 173965312 bytes (42472 pages) to core file\n[createdump] Target process is alive\n[createdump] Dump successfully written in 731ms\nExpected: 100\nActual: 134\nEND EXECUTION - FAILED\nTest failed. Trying to see if dump file was created in /datadisks/disk1/dumps since 9/13/2025 10:22:24 PM\nProcessing /datadisks/disk1/dumps/coredump.4465.dmp.crashreport.json\nPrinting stacktrace from \u0027/datadisks/disk1/dumps/coredump.4465.dmp.crashreport.json\u0027\nInvoking llvm-symbolizer --pretty-print\nStack trace:\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\nGCToOSInterface::Sleep(unsigned int) at /__w/1/s/src/coreclr/gc/unix/gcenv.unix.cpp:325:46\n?? at ??:0:0\nWKS::gc_heap::disable_preemptive(bool) at /__w/1/s/src/coreclr/gc/gc.cpp:1741:9\n (inlined by) WKS::gc_heap::allocate_soh(int, unsigned long, alloc_context*, unsigned int, int) at /__w/1/s/src/coreclr/gc/gc.cpp:18318:13\n?? at ??:0:0\nWKS::gc_heap::allocate_more_space(alloc_context*, unsigned long, unsigned int, int) at /__w/1/s/src/coreclr/gc/gc.cpp:19859:5\n (inlined by) WKS::gc_heap::allocate(unsigned long, alloc_context*, unsigned int) at /__w/1/s/src/coreclr/gc/gc.cpp:19888:19\n (inlined by) WKS::GCHeap::Alloc(gc_alloc_context*, unsigned long, unsigned int) at /__w/1/s/src/coreclr/gc/gc.cpp:50638:34\n?? at ??:0:0\nAlloc(ee_alloc_context*, unsigned long, GC_ALLOC_FLAGS) at /__w/1/s/src/coreclr/vm/gchelpers.cpp:419:44\n?? at ??:0:0\nAlloc(unsigned long, GC_ALLOC_FLAGS) at /__w/1/s/src/coreclr/vm/gchelpers.cpp:492:10\n (inlined by) AllocateSzArray(MethodTable*, int, GC_ALLOC_FLAGS) at /__w/1/s/src/coreclr/vm/gchelpers.cpp:685:31\n?? at ??:0:0\nRhpGcAlloc at /__w/1/s/src/coreclr/vm/gchelpers.cpp:0:22\n?? at ??:0:0\n?? at /__w/1/s/src/coreclr/runtime/amd64/AllocFast.S:279:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\nCorUnix::CPalSynchronizationManager::ReadBytesFromProcessPipe(int, unsigned char*, int) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:1852:24\n?? at ??:0:0\nCorUnix::CPalSynchronizationManager::ReadCmdFromProcessPipe(int, CorUnix::CPalSynchronizationManager::SynchWorkerCmd*, void**, unsigned int*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:1680:16\n?? at ??:0:0\nCorUnix::CPalSynchronizationManager::WorkerThread(void*) at /__w/1/s/src/coreclr/pal/src/synchmgr/synchmanager.cpp:1560:26\n?? at ??:0:0\nCorUnix::CPalThread::ThreadEntry(void*) at /__w/1/s/src/coreclr/pal/src/thread/thread.cpp:1624:5\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\n?? at ??:0:0\nipc_retry_syscall(int) at /__w/1/s/src/native/eventpipe/ds-ipc-pal-socket.c:304:16\n (inlined by) ipc_poll_fds(pollfd*, unsigned long, unsigned int) at /__w/1/s/src/native/eventpipe/ds-ipc-pal-socket.c:505:11\n (inlined by) ds_ipc_poll(_DiagnosticsIpcPollHandle*, unsigned long, unsigned int, void (*)(char const*, unsigned int)) at /_\n```\n\n**Stack trace:**\n```\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in /_/src/arcade/src/Microsoft.DotNet.XUnitAssert/src/BooleanAsserts.cs:line 141\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor37|0_38(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxCMnEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EHNEl",
                                           "createdAt":  "2025-09-15T02:01:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/107528\n- https://github.com/dotnet/runtime/issues/94157\n- https://github.com/dotnet/runtime/issues/88307",
                                           "updatedAt":  "2025-09-15T02:01:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EIyHB",
                                           "createdAt":  "2025-09-15T06:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`verify_soh_segment_list` failing at: \n```\nlibcoreclr!GCToOSInterface::DebugBreak+0x5\nlibcoreclr!WKS::FATAL_GC_ERROR+0x5 [/__w/1/s/src/coreclr/gc/gcpriv.h @ 116] \nlibcoreclr!WKS::gc_heap::verify_soh_segment_list+0xc6 [/crossrootfs/x64/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h @ 48326] \nlibcoreclr!WKS::gc_heap::background_sweep+0x145f [/__w/1/s/src/coreclr/gc/gc.cpp @ 47124] \nlibcoreclr!WKS::gc_heap::gc1+0x316 [/__w/1/s/src/coreclr/gc/gc.cpp @ 15732480] \nlibcoreclr!WKS::gc_heap::bgc_thread_function+0x1ac [/crossrootfs/x64/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h @ 40356] \n```\n\n\u003e Here are possible related and/or duplicate issues\n\nNotice that this test has been failing with low frequency for years.",
                                           "updatedAt":  "2025-09-15T06:17:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EIycS",
                                           "createdAt":  "2025-09-15T06:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T06:17:46Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Test failure: GC/Scenarios/muldimjagary/muldimjagary/muldimjagary.cmd",
        "labels":  [
                       "os-linux",
                       "GCStress",
                       "arch-x64",
                       "area-GC-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    }
]
