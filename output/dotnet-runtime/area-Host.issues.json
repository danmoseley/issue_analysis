[
    {
        "url":  "https://github.com/dotnet/runtime/issues/2456",
        "createdAt":  "2016-06-30T16:34:55Z",
        "number":  2456,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB6XyA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rainersigwald",
                                            "createdAt":  "2016-06-30T16:36:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "weshaggard",
                                            "createdAt":  "2016-06-30T19:34:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dagood",
                                            "createdAt":  "2016-09-15T22:38:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darxis",
                                            "createdAt":  "2017-01-13T22:21:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamesqo",
                                            "createdAt":  "2017-06-10T14:07:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trotter",
                                            "createdAt":  "2017-12-13T22:51:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cottsak",
                                            "createdAt":  "2018-03-26T05:52:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mschonaker",
                                            "createdAt":  "2018-04-09T15:15:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nguerrera",
                                            "createdAt":  "2018-06-30T15:43:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jrockwood",
                                            "createdAt":  "2018-10-16T20:50:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fwanggg",
                                            "createdAt":  "2019-01-31T16:01:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nedex",
                                            "createdAt":  "2019-05-02T20:25:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cwharris",
                                            "createdAt":  "2019-05-15T04:44:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onionhammer",
                                            "createdAt":  "2019-06-06T18:56:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loligans",
                                            "createdAt":  "2020-04-23T01:06:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2020-04-23T01:40:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nathan-moore",
                                            "createdAt":  "2021-04-15T15:29:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dave-yotta",
                                            "createdAt":  "2021-04-23T12:07:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "merlinaudio",
                                            "createdAt":  "2021-06-10T10:49:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trass3r",
                                            "createdAt":  "2021-07-17T11:42:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jjonescz",
                                            "createdAt":  "2021-09-03T11:41:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aaronamm",
                                            "createdAt":  "2021-09-08T18:51:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucabol",
                                            "createdAt":  "2021-10-04T08:00:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ocmehtva",
                                            "createdAt":  "2021-11-16T10:52:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ghost4Man",
                                            "createdAt":  "2022-04-22T12:57:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-dodonov",
                                            "createdAt":  "2022-11-23T18:27:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2022-12-01T17:49:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EdVinyard",
                                            "createdAt":  "2023-02-17T01:47:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gmkado",
                                            "createdAt":  "2023-04-08T00:28:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dewijones92",
                                            "createdAt":  "2023-10-29T07:16:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreSteenveld",
                                            "createdAt":  "2023-12-15T12:09:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "616b2f",
                                            "createdAt":  "2024-02-22T15:00:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajelinski",
                                            "createdAt":  "2024-05-15T11:27:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gwr",
                                            "createdAt":  "2024-07-03T16:48:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gbtb",
                                            "createdAt":  "2024-07-07T12:45:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andreasgrosche",
                                            "createdAt":  "2025-03-25T21:36:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "captainsafia",
                                            "createdAt":  "2025-04-30T22:01:03Z"
                                        }
                                    ],
                          "totalCount":  37
                      },
        "updatedAt":  "2022-10-17T09:01:59Z",
        "body":  "## Steps to reproduce\n\nIt is too hard to debug applications when they aren\u0027t launched from VS.  Today, you need to add some \"Console.ReadLine()\" calls in order to have the process wait for you to attach to the process.\n## Expected  behavior\n\nThere should be an easy way to say \"launch this .net core app and attach a debugger\" or \"wait for a debugger to be attached\".\n## Actual behavior\n\nThis isn\u0027t possible today.\n## Notes\n\nI think even if we enabled something simple in the host like:\n\nif `--debug` is passed before the assembly to run, print out a message like:  \"DEBUG MODE: attach a debugger to process `\u003cprocess id\u003e` and then hit ENTER to continue\".  That waits for the ENTER, and then your entry method is invoked.\n\n/cc @schellap @gkhanna79 @piotrpMSFT @blackdwarf @brthor @ericstj @weshaggard \n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTFM8OA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTcxOTQ0NA==",
                                           "createdAt":  "2016-06-30T16:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "@eerhardt Are you not able to use VS debugger do the same by pointing it to a command line?\n",
                                           "updatedAt":  "2016-06-30T16:52:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTcyMjU5NA==",
                                           "createdAt":  "2016-06-30T17:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Are you not able to use VS debugger do the same by pointing it to a command line?\n\nThat approach is less than ideal because:\n1. I need to create a dummy project so I can tell VS to \"point to a command line\"\n2. I need to ensure I created a .NET Core dummy project.\n   - If I use a Windows Desktop C# console app I get an error:\n\n```\n---------------------------\nMicrosoft Visual Studio\n---------------------------\nA fatal error has occurred and debugging needs to be terminated. For more details, please see the Microsoft Help and Support web site. HRESULT=0x8000ffff. ErrorCode=0x0.\n---------------------------\nOK   \n---------------------------\n```\n1. Maybe I don\u0027t have VS, and I only have WinDBG, or some other debugger.  When I move my app into \"production\" or off of my dev box, I don\u0027t want to install full VS just to debug the app.\n2. Maybe my intent isn\u0027t to do traditional VS debugging, but instead I want to get the process ID and do some other monitoring while the app runs.\n",
                                           "updatedAt":  "2016-06-30T17:03:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTcyMzU0OA==",
                                           "createdAt":  "2016-06-30T17:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blackdwarf",
                                           "body":  "@eerhardt so, in summary, the proposal is to, at least, have an easy way for people to get a PID of the host running? \n",
                                           "updatedAt":  "2016-06-30T17:06:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTcyMzU2NQ==",
                                           "createdAt":  "2016-06-30T17:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "BTW - without this \u0027feature\u0027, folks have been inventing it themselves by using `DebugHelper.HandleDebugSwitch` and copying that file around.\n\nSee https://github.com/search?p=3\u0026q=org%3Adotnet+DebugHelper\u0026type=Code for all the places it is used in our \u0027dotnet\u0027 repos today.\n",
                                           "updatedAt":  "2016-06-30T17:06:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTcyMzY2OA==",
                                           "createdAt":  "2016-06-30T17:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e so, in summary, the proposal is to, at least, have an easy way for people to get a PID of the host running?\n\nAND pause the app until I say \"GO\"\n",
                                           "updatedAt":  "2016-06-30T17:07:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTcyNDM3NQ==",
                                           "createdAt":  "2016-06-30T17:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blackdwarf",
                                           "body":  "@eerhardt got it. The pause part is actually the more useful one, as getting the PID can be done in different ways. I have to say, this could be useful actually, from a user\u0027s POV.\n",
                                           "updatedAt":  "2016-06-30T17:09:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTczMjk5MQ==",
                                           "createdAt":  "2016-06-30T17:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "schellap",
                                           "body":  "@eerhardt trying to understand this ask... how did desktop framework work without this feature?\n\nAFAIK, no program suspends on its own for a potential debugger attach, so why should a managed program host do this?\n",
                                           "updatedAt":  "2016-06-30T17:38:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTc2NDExOQ==",
                                           "createdAt":  "2016-06-30T19:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e no program suspends on its own for a potential debugger attach\n\nSee my link above.  That shows at least 3 programs that we wrote in the CLI and in core-setup.\n\nAlso, CoreRun.exe does this today:\n\n```\nC:\\cli\u003e\\core-setup\\pkg\\Tools\\CoreRun.exe /d\nRuns executables on CoreCLR\n\nUSAGE: coreRun [/d] [/v] Managed.exe\n\n  where Managed.exe is a managed executable built for CoreCLR\n        /v causes verbose output to be written to the console\n        /d causes coreRun to wait for a debugger to attach before\n         launching Managed.exe\n\n  CoreCLR is searched for in %core_root%, then in the directory\n  that coreRun.exe is in, then finally in %windir%\\system32\\.\n```\n\nI won\u0027t go searching for all the programs in the world that do this, but suffice it to say, this seems valuable to a lot of people if we have that DebugHelper class, and CoreRun.exe implemented it. And the only reason I knew about CoreRun.exe is because @rainersigwald pointed it out to me, because he uses it. So we have users outside of the .NET team who use this switch in CoreRun.\n\n\u003e how did desktop framework work without this feature\n\ndesktop framework was very \"VS centric\".  .NET Core runs on platforms VS isn\u0027t capable of running on.\n",
                                           "updatedAt":  "2016-06-30T19:30:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTc2NTkyNA==",
                                           "createdAt":  "2016-06-30T19:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rainersigwald",
                                           "body":  "@schellap The problem is that it\u0027s easy to `vsjitdebugger.exe MyProgram.exe` or `windbg.exe MyProgram.exe` or set ImageFileExecutionOptions to break into the start of a desktop executable. Those are much less desirable here because I don\u0027t want to step into the CLR host--I want to step into my program.\n\nAlso, every program I maintain has a clause [like this](https://github.com/Microsoft/msbuild/blob/838628dca8034184f5ef5152528f146d07b656ad/src/XMakeCommandLine/XMake.cs#L445-454):\n\n``` C#\nif (Environment.GetEnvironmentVariable(\"{something}DEBUGONSTART\") == 1)\n{\n    Debugger.Launch();\n}\n```\n\nSure would be nice if it were built in.\n",
                                           "updatedAt":  "2016-06-30T19:38:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyOTc2OTE2OQ==",
                                           "createdAt":  "2016-06-30T19:51:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "schellap",
                                           "body":  "@rainersigwald and @eerhardt, thanks. We can bake this in with some switch that doesn\u0027t conflict with dotnet.dll.\n\n@eerhardt, sorry... I wanted to call out that most programs native or managed (incl. Desktop apps) don\u0027t have this support, for these handful of programs you quoted. They are being debugged fine... did not ask to list what programs do this today.\n",
                                           "updatedAt":  "2016-06-30T19:51:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMDUyMjM5Ng==",
                                           "createdAt":  "2016-07-05T16:01:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "I guess I still have more questions to understand this better. If the goal is to attach the debugger before any managed application is launched, then doing \"windbg dotnet \u003capp.dll\u003e\" is equivalent to what you are requesting for. \n\n@rainersigwald Can you please explain your workflow while using the switch? Is it the case that you do not own the process that launches the application?\n",
                                           "updatedAt":  "2016-07-05T16:01:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzMDUyOTY4MA==",
                                           "createdAt":  "2016-07-05T16:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC18iFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jagt",
                                                                               "createdAt":  "2023-02-13T13:58:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rainersigwald",
                                           "body":  "@gkhanna79 I use this all the time to debug unit tests with xunit: `corerun /d xunit.console.netcore.exe ...`.\n\nI like being able to use VS to debug using the session I\u0027m using to develop, with persistent breakpoints and mental state built up over multiple runs of the program under test. But when the entry-point application is a netcore app that\u0027s not my code, it\u0027s really inconvenient to set VS up to launch it.\n\nMaybe there\u0027s a better way, but the only way I know is to create a new bogus xproj and configure it to launch the application. My mental cost/benefit calculation always makes it seem like it\u0027s cheaper to launch with the debug flag and manually attach from my VS.\n\nJust prefixing the command line with `vsjitdebugger.exe` almost works, but it launches in native-debugging mode and doesn\u0027t hit managed breakpoints.\n\nIf there\u0027s an actually-easy way to get a running instance of VS to attach to a short-lived program via command line, I\u0027d be happy. This seems like a way to get that.\n",
                                           "updatedAt":  "2016-07-05T16:28:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NzkxNzg3OQ==",
                                           "createdAt":  "2017-04-28T06:25:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@gkhanna79 this sounds like a feature, and we\u0027re past feature complete..",
                                           "updatedAt":  "2017-04-28T06:25:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODAyMDkwMQ==",
                                           "createdAt":  "2017-04-28T14:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "Yeah, this nice to have and can move out.",
                                           "updatedAt":  "2017-04-28T14:57:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNzU2NzMwOQ==",
                                           "createdAt":  "2017-06-10T14:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jamesqo",
                                           "body":  "I would also like to have this option for so I can debug during `dotnet test`.",
                                           "updatedAt":  "2017-06-10T14:08:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NzU4NTg3Mg==",
                                           "createdAt":  "2018-02-22T06:58:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZT7uw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ghost4Man",
                                                                               "createdAt":  "2022-04-22T13:02:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gingters",
                                           "body":  "If you think about implementing that, please make sure that the implementation does *not* print to console.\r\n\r\nIf you write a .net core console application that is used to stream out some data into stdout and you want to pipe that to another console application, any extra console output will mess that up.",
                                           "updatedAt":  "2018-02-22T06:58:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NzczMDg5NA==",
                                           "createdAt":  "2018-02-22T16:09:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving this out again; feature complete is next week and this won\u0027t make it",
                                           "updatedAt":  "2018-02-22T16:09:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDgyNjIzNA==",
                                           "createdAt":  "2018-06-05T19:10:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 3.0\r\n\r\ncc @jeffschwMSFT \r\n\r\nSummary:\r\n1) Corerun already does this [coreclr\u0027s corerun /d switch](https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/coreclr/hosts/corerun/corerun.cpp)\r\n2) Add the PID to the message to make attaching easier\r\n3) To prevent interferrence of the running application, do not display a message to stdout\\stderr by default, or display by default but provide a way to turn that off. Consider using the existing COREHOST_TRACE and `-v` options (need to discuss)\r\n",
                                           "updatedAt":  "2018-06-05T19:10:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMTU0ODQxNw==",
                                           "createdAt":  "2018-06-30T15:38:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAYwS5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "steveharter",
                                                                               "createdAt":  "2018-07-03T19:09:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "See https://twitter.com/migueldeicaza/status/1013061980284997632?s=21 for others talking about this same thing. It would be great if this was just built in to the platform.  (Note the link to the tweet about forgetting to remove Thread.Sleep(30s) from the code, causing slow startup)",
                                           "updatedAt":  "2018-06-30T15:38:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjQ4MDExMA==",
                                           "createdAt":  "2018-10-03T01:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gholt-aws",
                                           "body":  "I\u0027d love to see this make it into 3.0.\r\nIf this is accurate (https://github.com/OmniSharp/omnisharp-vscode/issues/1059), getting this feature would be very helpful.",
                                           "updatedAt":  "2018-10-03T01:07:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjY3NTczOQ==",
                                           "createdAt":  "2018-10-03T15:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "I would like to get @tommcdon perspective on this feature ask.",
                                           "updatedAt":  "2018-10-03T15:16:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjcxNDcyNw==",
                                           "createdAt":  "2018-10-03T16:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @noahfalk and @mikem8361.  The \"wait for attach\" approach sounds interesting and is potentially useful, esp for remote VS debug scenarios.",
                                           "updatedAt":  "2018-10-03T16:58:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjcyODQ3OQ==",
                                           "createdAt":  "2018-10-03T17:37:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "We need to be clear about what the flag is waiting for: a native debugger attach (which is what corerun\u0027s /d is waiting for) or a managed debugger attach (like from VS or VSCode).  These are very different features.",
                                           "updatedAt":  "2018-10-03T17:37:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjc1NDQ1Mg==",
                                           "createdAt":  "2018-10-03T18:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "Maybe `--vsdebug` then? To be clear in the intend. However since this is .NET I would assume VS debugger by default. That\u0027s what 99.98% of customer would need, imo.",
                                           "updatedAt":  "2018-10-03T18:50:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjc1ODgwNA==",
                                           "createdAt":  "2018-10-03T19:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "I don\u0027t think we can assume what debugger is going to used. It depends on the dev. Some devs want to debug the runtime itself or debug natively using VS, windbg, cdb on Windows or lldb on Linux/MacOS. Others may want to debug the just the managed code using VS/VSCode on Windows or VSCode on Linux/MacOS. \r\n\r\nEither we purpose two flags like \"--native-debug\" and \"--managed-debug\" or be very clear about which scenario we are talking about here.",
                                           "updatedAt":  "2018-10-03T19:01:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjc2NDQyMA==",
                                           "createdAt":  "2018-10-03T19:17:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "Maybe then `--debug \u003cname\u003e` with the support of few to begin with and with a way to extend the list in the future?",
                                           "updatedAt":  "2018-10-03T19:17:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzI4Mzg3Nw==",
                                           "createdAt":  "2019-12-19T01:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODV36WQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidruhmann",
                                                                               "createdAt":  "2020-01-28T14:12:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bliles",
                                                                               "createdAt":  "2022-04-19T14:00:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Ghost4Man",
                                                                               "createdAt":  "2022-04-22T13:05:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "macpersia",
                                                                               "createdAt":  "2022-10-25T10:31:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gtalton-kroll",
                                                                               "createdAt":  "2024-02-07T15:52:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "adaviding",
                                           "body":  "I want to help convince people that this is an important feature by looking at an example from the Java ecosystem.  This may also inform the design that you eventually choose.\r\n\r\nEver since Java 1.3 (or maybe 1.5), when you launch a java program, you can pass args like the following to java.exe:\r\n\r\n`-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1234`\r\n\r\nThe JRE then acts like a remote debugging host over port 1234.  I understand that `dotnet` has `vsdbg` which doesn\u0027t use ports, but we can ignore that difference for now.  Take a look at the `suspend=` part of the string.\r\n\r\n* `suspend=y` would imply that program execution is suspended until a debugger is attached\r\n* `suspend=n` would imply that the program runs normally, and only halts if a debugger asks it to (once attached).\r\n\r\nI think `--suspend` would be good nomenclature for you guys to use in this case.\r\n\r\n```\r\ndotnet run --suspend ...\r\n```",
                                           "updatedAt":  "2019-12-19T01:10:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzI4NjI0Nw==",
                                           "createdAt":  "2019-12-19T01:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODV36jQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gtalton-kroll",
                                                                               "createdAt":  "2024-02-07T15:52:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adaviding",
                                           "body":  "I would also like to suggest that being able to specify a unique port at startup eliminates the need to know the PID of the process that you are trying to debug.  I get that you have committed to using `vsdbg` instead of ports, but maybe there is a way to pass some unique integer (e.g. `1234`) when the program is started up ...\r\n\r\n```\r\ndotnet run --debug 1234 --suspend ...\r\n```\r\n\r\n... such that you can now ask `vsdbg` to connect to the process where `1234` was uniquely specified, so you don\u0027t need to know the PID anymore.",
                                           "updatedAt":  "2019-12-19T01:19:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzI4NzEzNQ==",
                                           "createdAt":  "2019-12-19T01:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@shirhatti ",
                                           "updatedAt":  "2019-12-19T01:22:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODExODE1OA==",
                                           "createdAt":  "2020-04-23T01:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoq-oA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jarvisuser90",
                                                                               "createdAt":  "2020-07-20T20:32:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "angelobreuer",
                                                                               "createdAt":  "2022-02-27T21:48:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gbtb",
                                                                               "createdAt":  "2024-07-07T12:47:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "loligans",
                                           "body":  "This functionality would be tremendously helpful when debugging startup issues in a remote container.",
                                           "updatedAt":  "2020-04-23T01:08:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODEyMTk4Mw==",
                                           "createdAt":  "2020-04-23T01:21:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abatishchev",
                                           "body":  "@jeffschwMSFT any chance this can be addressed since June 2016? That would be really helpful, a lot. My example: when a Service Fabric services which is just a `dotnet.exe run` command (aka a guest executable) fails on startup by whatever nonobvious reason)without any traces lefts other than non-zero error code - it\u0027s painful, frustrating, and hard to debug.",
                                           "updatedAt":  "2020-04-23T01:21:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODU3NTYwNw==",
                                           "createdAt":  "2020-04-23T18:32:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KathleenDollard",
                                           "body":  "Question: Now that we have self-contained and runtime-dependent executables, is this feature needed only when doing `dotnet run` and `dotnet \u003cassemblyFileName\u003e`?\r\n\r\nThe approaches suggested here only work in that scenario because any variation of --debug may already be a switch. \r\n\r\nSystem.CommandLine solved this by providing an alternate syntax for switches going to the startup model `[debug]` but unless the community strongly coalesced around an alternate syntax, I don\u0027t see a good answer for the executable scenarios. ",
                                           "updatedAt":  "2020-04-23T18:32:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODU3ODc2OQ==",
                                           "createdAt":  "2020-04-23T18:36:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "Well if the dotnet.exe used the System.CommandLine for parsing its args, then that would be great too (you\u0027d get [debug] for free) ",
                                           "updatedAt":  "2020-04-23T18:37:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTYxNjU0Ng==",
                                           "createdAt":  "2021-04-23T12:14:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQjzMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loligans",
                                                                               "createdAt":  "2021-11-01T22:35:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "angelobreuer",
                                                                               "createdAt":  "2022-02-27T21:48:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Yes please, It\u0027s a pain to debug tests/apps in (e.g. local) kube clusters (and this should be the de-facto standard imo), and VS is so so slow to release support in tools for these environments.  And half of my team don\u0027t use VS anyway, and some others aren\u0027t even on windows.  Anything to make this easier and remove random stuff from our code/tooling.\r\n\r\n**Moved rant to end**: And then it\u0027s some convoluted stuff e.g. that docker stuff that\u0027s supported in the csproj with some rapid build stuff, or connect to azure kube cluster but don\u0027t actually run your app in it - most of us have a local kube cluster or some other cloud service...just such a pain, I have just a container for you to connect to and run a proc my dude, I\u0027ve mounted my host/source fs, when I press F5 or run test...why so complex?\r\n\r\nI swear I\u0027m going to write a extension for vs that supports remote/container test run and debug at some point, it\u0027s like, an excel macro of a few clicks at best.  I\u0027m sure the laggy test explorer is easily replaced too, for those who have ever virtualized a listview 🤦 ",
                                           "updatedAt":  "2021-04-23T12:19:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MTBMC",
                                           "createdAt":  "2022-10-16T20:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wasabii",
                                           "body":  "Something nobody here has thought of: this would be nice to exist on compiled platform dependent executables as well. And that means if you use command line arguments, you\u0027d be getting in the way of their processing.\r\n\r\nAn environmental variable might be better.",
                                           "updatedAt":  "2022-10-16T20:45:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MUzw4",
                                           "createdAt":  "2022-10-17T09:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dave-yotta",
                                           "body":  "Don\u0027t think it would get in the way: `dotnet run --debug MyApp.dll \u003carguments here\u003e`?",
                                           "updatedAt":  "2022-10-17T09:01:59Z"
                                       }
                                   ],
                         "totalCount":  36
                     },
        "title":  "dotnet.exe host should have a --debug switch",
        "labels":  [
                       "enhancement",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2688",
        "createdAt":  "2017-04-10T04:00:39Z",
        "number":  2688,
        "author":  "livarcocc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5MkBQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mpdreamz",
                                            "createdAt":  "2017-08-02T19:39:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rmja",
                                            "createdAt":  "2017-10-26T07:15:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dasMulli",
                                            "createdAt":  "2018-02-14T18:35:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2018-03-15T11:30:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rockstardev",
                                            "createdAt":  "2018-06-18T23:04:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dotjoe-zz",
                                            "createdAt":  "2018-09-22T01:20:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trigger-segfault",
                                            "createdAt":  "2018-10-05T02:55:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdrianoCahete",
                                            "createdAt":  "2018-11-06T02:54:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevindqc",
                                            "createdAt":  "2019-01-30T21:44:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ibworks",
                                            "createdAt":  "2019-03-15T16:47:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spottedmahn",
                                            "createdAt":  "2019-05-20T17:05:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anilkaygisiz",
                                            "createdAt":  "2019-05-21T08:45:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emiliavanderwerf",
                                            "createdAt":  "2019-05-22T13:53:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "connorads",
                                            "createdAt":  "2019-09-23T13:52:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Edacth",
                                            "createdAt":  "2019-11-21T20:18:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "burgonb",
                                            "createdAt":  "2019-11-26T17:51:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brent-williams",
                                            "createdAt":  "2020-02-23T10:05:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vratojr",
                                            "createdAt":  "2020-04-20T07:12:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikkelbu",
                                            "createdAt":  "2020-04-21T07:06:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bakanych",
                                            "createdAt":  "2020-08-14T03:56:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "2mik",
                                            "createdAt":  "2020-09-25T09:19:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "code-bringer",
                                            "createdAt":  "2021-03-09T22:38:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sdudnic",
                                            "createdAt":  "2021-05-18T09:51:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rmadsen-ks",
                                            "createdAt":  "2022-02-09T09:22:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2023-01-26T02:47:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colotiline",
                                            "createdAt":  "2023-07-17T13:56:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dibarbet",
                                            "createdAt":  "2023-11-17T23:23:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fowl2",
                                            "createdAt":  "2024-07-08T10:56:17Z"
                                        }
                                    ],
                          "totalCount":  28
                      },
        "updatedAt":  "2024-11-20T19:28:38Z",
        "body":  "_From @benaadams on April 9, 2017 18:15_\n\nCurrently if you run a dotnet program with the shared host its listing in Task manager isn\u0027t particularly informative:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1142958/24839744/3780ca9c-1d58-11e7-8b6b-5f72aa67e7dc.png)\r\n\r\nThey all look the same; with more and more adoption will get harder to distinguish between portable dotnet apps. \r\n\r\nIt would be better if it took the description from the entry point dll. While I\u0027m not sure if there is an api to change the running process name; svchost seems to manage it, so it may be possible:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1142958/24839749/4675476c-1d58-11e7-981c-374f79131d45.png)\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#6279_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlGD_Sg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MzQ1NTg4OQ==",
                                           "createdAt":  "2017-04-12T02:38:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@livarcocc how is this a setup issue? wouldn\u0027t it be dotnet.exe that would set its own process name (if such a thing is possible)?",
                                           "updatedAt":  "2017-04-12T02:38:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MzQ3MjA3OA==",
                                           "createdAt":  "2017-04-12T04:38:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "@danmosemsft dotnet.exe is produced from core-setup.",
                                           "updatedAt":  "2017-04-12T04:38:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MzQ3MjgwNg==",
                                           "createdAt":  "2017-04-12T04:45:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Ah that makes sense. ",
                                           "updatedAt":  "2017-04-12T04:45:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODE5NzYyNQ==",
                                           "createdAt":  "2017-04-29T22:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mstum",
                                           "body":  "So I know that CoreRT is kinda intended to solve the \"Let\u0027s make a monolithic executable with no dependencies\" scenario, but I do wonder if it makes sense to explore the idea of \"Let\u0027s create a monolithic, big executable (thing static linking in C++)\" here, without worrying about the AOT/.net Native part that CoreRT tries to solve.\r\n\r\nBut that might be an entirely different issue altogether.",
                                           "updatedAt":  "2017-04-29T22:10:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5ODE5ODI3MQ==",
                                           "createdAt":  "2017-04-29T22:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "@mstum [il-repack](https://github.com/gluck/il-repack) might do this? https://github.com/dotnet/corefx/issues/11672#issuecomment-295844213",
                                           "updatedAt":  "2017-04-29T22:24:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjE1ODk4OA==",
                                           "createdAt":  "2017-06-05T10:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "axel-habermaier",
                                           "body":  "This is really annoying: We have an application that consists of multiple different processes, which we\u0027re considering to update to .NET core. However, we\u0027re having several issues stopping us from doing so at the moment, one of which is the fact that all processes would now be called \u0027dotnet\u0027 or \u0027apphost\u0027 when using self contained deployment. This reduces the user experience. In particular, application crashes now show \"dotnet stopped working\", which is completely surprising for our users, as they don\u0027t even know (nor care) what \"dotnet\" is.\r\n\r\nAdditionally, it makes debugging harder. Due to the fact that native code debugging of .NET core 2.0 projects is not supported by VS at the moment, we have to manually attach the debugger to the process we want to debug -- the fact that all processes are just called \"dotnet\" doesn\u0027t really help, as you can imagine.",
                                           "updatedAt":  "2017-06-05T10:47:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjI0OTc5Mg==",
                                           "createdAt":  "2017-06-05T17:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mellinoe",
                                           "body":  "I agree that we should do something here. @gkhanna79 Can we figure out a plan for the next release cycle about this?",
                                           "updatedAt":  "2017-06-05T17:23:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTkzMjIxNw==",
                                           "createdAt":  "2017-08-11T22:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA8wN9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2017-08-11T23:09:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pnstickne",
                                                                               "createdAt":  "2020-02-27T23:00:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "benaadams",
                                           "body":  "From https://github.com/dotnet/coreclr/issues/13340\r\n\r\n\u003e I\u0027m creating a program that needs to get a list of currently executing processes in memory and take action to kill a given process, if it\u0027s a different instance of the same (currently executing program) that has become hung for some reason; where I have a criteria based on start time to declare a given process as being hung. This logic is being developed on a windows machine using \"dotnet\" core, then packaged and run on a Ubuntu machine.\r\n\r\n\u003e If I get a list of processes via \"Process.GetProcesses\", I can see my currently executing logic in the list as \"dotnet\". This isn\u0027t real helpful, as what if there are X different \"dotnet\" programs running on this machine, they all look like they are the same logic due to the \"dotnet\" name. Some of them MIGHT be hung instances of the logic I\u0027m after, some of them MIGHT be totally other \"dotnet\" assemblies.",
                                           "updatedAt":  "2017-08-11T22:26:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzOTU3NzY0Ng==",
                                           "createdAt":  "2017-10-26T07:32:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRVRBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2017-10-26T15:05:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rockstardev",
                                                                               "createdAt":  "2018-06-18T23:04:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "beyti",
                                                                               "createdAt":  "2018-10-19T08:59:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "songzheng45",
                                                                               "createdAt":  "2018-10-25T06:24:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Syltty",
                                                                               "createdAt":  "2018-12-28T13:47:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevindqc",
                                                                               "createdAt":  "2019-01-30T21:43:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2019-05-20T17:06:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "simonachmueller",
                                                                               "createdAt":  "2019-07-05T08:47:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FreeAsInBeer",
                                                                               "createdAt":  "2020-03-12T13:16:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ku3mich",
                                                                               "createdAt":  "2021-06-13T17:57:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MithrilMan",
                                                                               "createdAt":  "2021-10-20T09:45:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ruandv",
                                                                               "createdAt":  "2024-01-05T06:20:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "rmja",
                                           "body":  "@axel-habermaier for the debugging part, as a workaround, you can start dotnet with the `start` command, e.g.:\r\n\r\n```\r\nstart \"My App\" dotnet MyApp.dll\r\n```\r\n\r\nThe \"My App\" text will show in the Title column when attaching to a process in VS",
                                           "updatedAt":  "2017-10-26T07:32:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NzM0MzM5MA==",
                                           "createdAt":  "2018-01-12T20:18:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "See also https://github.com/dotnet/core-setup/issues/2817\r\n\r\nSome options depending on scenario:\r\n1) Add Task Manager extension to list app name (need to research this more to see if currently possible)\r\n2) Support a named exe (like standalone exe) but can use the shared framework",
                                           "updatedAt":  "2018-01-12T20:18:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTYwMjk1Nw==",
                                           "createdAt":  "2018-02-14T13:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ehsaanwelcome",
                                           "body":  "After updated to .net core 2.0\r\nI do not see app name in process list (only dotne.exe) while attaching debugger in VS.\r\nIf i do trace the right process, VS do not re-attach process after rebuilding as there are multiple dotnet.exe processes.\r\nBefore, it gets easily re-attach in debug menu by having app name.",
                                           "updatedAt":  "2018-02-14T13:12:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTk4MDcwMg==",
                                           "createdAt":  "2018-02-15T16:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@ehsaanwelcome before 2.0, where did you see the app name in the VS debugger attach dialog? In the `Process` column or `Title` column?\r\n\r\nNote if you have a standalone app (or \"self contained application\") then it will be named `\u003cmyapp\u003e.exe` and will appear as `Process` (process name) in the attach dialog, otherwise you\u0027ll have a portable app (or \"framework dependent application\") which `Process` will always be `dotnet.exe`.\r\n\r\nAlso to help with your debugging you could use the tip from @tmja that will show a string of your choice in `Title` column: `start \"My App\" dotnet MyApp.dll`",
                                           "updatedAt":  "2018-02-15T16:25:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDAzMDU4NA==",
                                           "createdAt":  "2018-03-02T19:40:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2LacA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Valdas3",
                                                                               "createdAt":  "2019-01-15T08:42:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AdrianoCahete",
                                                                               "createdAt":  "2019-04-25T17:51:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2019-05-20T17:10:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ducman",
                                                                               "createdAt":  "2019-09-27T16:29:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "burgonb",
                                                                               "createdAt":  "2019-11-26T17:49:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevingentile",
                                                                               "createdAt":  "2021-03-22T19:59:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xyfy",
                                                                               "createdAt":  "2023-02-16T08:55:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "ehsaanwelcome",
                                           "body":  "@steveharter, consider following scenario\r\nVS2017\r\nNet461\r\ndotnet watch run\r\n\r\n1. VS =\u003e debug =\u003e **attach to process** (each dotnet process shows **app name as process name**)\r\n2. change code\r\n3. recompile by dotnet watch (new process id is assigned to process)\r\n4. VS =\u003e debug =\u003e **re-attach to process** (no need to repeat step 1 as process name is same although process id is different therefore VS detect the right process by name and attach process automatically)\r\n\r\nNow change Net461 to netcoreapp2.0\r\n1. VS =\u003e debug =\u003e **attach to process** (each dotnet process shows **dotnet.exe** so i have to first trace the right process in task manager)\r\n2. change code\r\n3. recompile by dotnet watch (new process id is assigned to process)\r\n4. VS =\u003e debug =\u003e **re-attach to process** won\u0027t work so VS redirects to step 1 again which means i have to again trace the right process\r\n\r\nin first scenario debugging was very easier, change code =\u003e save it =\u003e dotnet watch run trigger compilation =\u003e VS re-attach =\u003e debugger attach sucessfully\r\n\r\n",
                                           "updatedAt":  "2018-03-02T19:40:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDAzMjM5MA==",
                                           "createdAt":  "2018-03-02T19:46:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWmrVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hmol",
                                                                               "createdAt":  "2018-05-16T08:22:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@steveharter can we set the Title even if we can\u0027t change the (process) Name? In VS, the Title shows up as the path to dotnet.exe. If we can set it to the parameters given to dotnet.exe (after `dotnet exec` maybe and with path stripped so it\u0027s just a dll name) that would help a lot.",
                                           "updatedAt":  "2018-03-02T19:47:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDg0NzM5Mw==",
                                           "createdAt":  "2018-06-05T20:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA18hEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2019-05-20T17:09:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "burgonb",
                                                                               "createdAt":  "2019-11-26T17:50:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The Title can\u0027t be changed in a running process unless it is a GUI app. From the host, we could change the current console\u0027s title, but that doesn\u0027t really work since it would be too late. It is too late because the title would be changed after the process starts (VS would still show the previous title), and would be wrong when launching another app later.\r\n\r\nHowever, if we leverage the functionality planned in 3.0 for GUI apps https://github.com/dotnet/core-setup/issues/196 to add metadata for non-GUI apps as well then the Title etc would be present in the framework-dependent \u003capp\u003e.exe.\r\n\r\nSetting 3.0 milestone to assume this for now.",
                                           "updatedAt":  "2018-06-08T19:07:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NjI5OTM3Mg==",
                                           "createdAt":  "2018-12-11T17:59:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jceddy",
                                           "body":  "@rmja \r\n\u003e for the debugging part, as a workaround, you can start dotnet with the `start` command, e.g.:\r\n\u003e \r\n\u003e ```\r\n\u003e start \"My App\" dotnet MyApp.dll\r\n\r\nUnfortunately this doesn\u0027t work when specifying what to start in web.config for IIS\r\n\r\n",
                                           "updatedAt":  "2018-12-11T17:59:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODAzMDE4Mg==",
                                           "createdAt":  "2019-04-30T16:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "With apphost being the default, I feel this situation is much better.  But the underlying ask of having details show for dotnet.exe launched apps is still open.",
                                           "updatedAt":  "2019-04-30T16:54:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNDE4NjM4OA==",
                                           "createdAt":  "2019-06-20T21:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "\u003e \r\n\u003e \r\n\u003e The Title can\u0027t be changed in a running process unless it is a GUI app. From the host, we could change the current console\u0027s title, but that doesn\u0027t really work since it would be too late. It is too late because the title would be changed after the process starts (VS would still show the previous title), and would be wrong when launching another app later.\r\n\u003e \r\n\u003e However, if we leverage the functionality planned in 3.0 for GUI apps dotnet/runtime#2455 to add metadata for non-GUI apps as well then the Title etc would be present in the framework-dependent .exe.\r\n\u003e \r\n\u003e Setting 3.0 milestone to assume this for now.\r\n\r\nI can confirm this works. In fact, on Windows (but I think the 3.0 GUI stuff only works on Windows too) you can already use the existing Win32 API to create a window with a title. I\u0027m using this, with a `#if DEBUG` block around it.\r\n\r\n```\r\n#if DEBUG\r\n    delegate IntPtr WndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam);\r\n    class DebuggerForm\r\n    {\r\n        const UInt32 WS_EX_NOACTIVATE = 0x08000000;\r\n        const UInt32 WS_MINIMIZE = 0x20000000;\r\n        const int SW_SHOWMINNOACTIVE = 7;\r\n        const UInt32 WM_DESTROY = 2;\r\n\r\n        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\r\n        struct WNDCLASSEX\r\n        {\r\n            [MarshalAs(UnmanagedType.U4)]\r\n            public int cbSize;\r\n            [MarshalAs(UnmanagedType.U4)]\r\n            public int style;\r\n            public IntPtr lpfnWndProc;\r\n            public int cbClsExtra;\r\n            public int cbWndExtra;\r\n            public IntPtr hInstance;\r\n            public IntPtr hIcon;\r\n            public IntPtr hCursor;\r\n            public IntPtr hbrBackground;\r\n            public string lpszMenuName;\r\n            public string lpszClassName;\r\n            public IntPtr hIconSm;\r\n        }\r\n\r\n        private WndProc delegWndProc = myWndProc;\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        [return: MarshalAs(UnmanagedType.Bool)]\r\n        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\r\n\r\n        [System.Runtime.InteropServices.DllImport(\"user32.dll\", SetLastError = true)]\r\n        static extern bool DestroyWindow(IntPtr hWnd);\r\n\r\n        [DllImport(\"user32.dll\", SetLastError = true, EntryPoint = \"CreateWindowEx\")]\r\n        public static extern IntPtr CreateWindowEx(UInt32 dwExStyle, UInt16 lpClassName, string lpWindowName, UInt32 dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);\r\n\r\n        [DllImport(\"user32.dll\", SetLastError = true, EntryPoint = \"RegisterClassEx\")]\r\n        static extern System.UInt16 RegisterClassEx([In] ref WNDCLASSEX lpWndClass);\r\n\r\n        [DllImport(\"kernel32.dll\")]\r\n        static extern uint GetLastError();\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        static extern IntPtr DefWindowProc(IntPtr hWnd, uint uMsg, IntPtr wParam, IntPtr lParam);\r\n\r\n        internal bool Create(string name)\r\n        {\r\n            WNDCLASSEX windowClass = new WNDCLASSEX();\r\n            windowClass.cbSize = Marshal.SizeOf(typeof(WNDCLASSEX));\r\n            windowClass.style = 0;\r\n            windowClass.hbrBackground = IntPtr.Zero;\r\n            windowClass.cbClsExtra = 0;\r\n            windowClass.cbWndExtra = 0;\r\n            windowClass.hInstance = Marshal.GetHINSTANCE(this.GetType().Module);\r\n            windowClass.hIcon = IntPtr.Zero;\r\n            windowClass.hCursor = IntPtr.Zero;\r\n            windowClass.lpszMenuName = null;\r\n            windowClass.lpszClassName = \"DebuggerForm\";\r\n            windowClass.lpfnWndProc = Marshal.GetFunctionPointerForDelegate(delegWndProc);\r\n            windowClass.hIconSm = IntPtr.Zero;\r\n            ushort regResult = RegisterClassEx(ref windowClass);\r\n\r\n            if (regResult == 0)\r\n            {\r\n                uint error = GetLastError();\r\n                return false;\r\n            }\r\n            string wndClass = windowClass.lpszClassName;\r\n\r\n            IntPtr hWnd = CreateWindowEx(WS_EX_NOACTIVATE, regResult, name, WS_MINIMIZE, 0, 0, 200, 200, IntPtr.Zero, IntPtr.Zero, windowClass.hInstance, IntPtr.Zero);\r\n\r\n            if (hWnd == ((IntPtr)0))\r\n            {\r\n                uint error = GetLastError();\r\n                return false;\r\n            }\r\n            ShowWindow(hWnd, SW_SHOWMINNOACTIVE);\r\n\r\n            return true;\r\n        }\r\n\r\n        private static IntPtr myWndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam)\r\n        {\r\n            switch (msg)\r\n            {\r\n                case WM_DESTROY:\r\n                    DestroyWindow(hWnd);\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n            return DefWindowProc(hWnd, msg, wParam, lParam);\r\n        }\r\n    }\r\n#endif\r\n```\r\n\r\nNow simply call this in your Startup.cs and you\u0027re all set.\r\n```\r\n#if DEBUG\r\n            new DebuggerForm().Create(\"WebRunner\");\r\n#endif\r\n```\r\n\r\nThis has 1 minor disadvantage: somehow the message loop doesn\u0027t work quite as expected. Your dotnet process will show up as \"Not Responding\" in the task manager. The window itself is completely hidden and web requests work as expected. Since this is not really an issue for me I haven\u0027t spent any time trying to fix it, though I\u0027m sure it could be done.\r\n\r\n![image](https://user-images.githubusercontent.com/13274276/59881938-26be2200-93b1-11e9-84f2-800c91a1ed2a.png)\r\nThe correct dotnet.exe is now named \"WebRunner\".\r\n\r\nI\u0027m basically waiting for 3.0 to replace the ugly Win32 API with something that\u0027s less ugly, but either way it\u0027s a bit of a hack.",
                                           "updatedAt":  "2019-06-20T21:15:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NDYxMjgxOQ==",
                                           "createdAt":  "2020-09-18T02:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "burkenyo",
                                           "body":  "I build portable .net core apps on a Mac and run them on desktops and in containers . Being able to distinguish the various “dotnet” processes would be very helpful!",
                                           "updatedAt":  "2020-09-18T02:34:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzgwMzEyNQ==",
                                           "createdAt":  "2020-10-05T18:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "warrenlbrown",
                                           "body":  "On a Mac, without being able to distinguish the processes in .Net Core 3.1, we cannot monitor our own processes to determine whether to stop, start, etc. them. This seems like a big hole, and I cannot see anyway around it using System.Diagnostics Process stuff. StartInfo is n/a, and the process name (the DLL name) is not available anywhere I can see when trying to monitor these processes from another. One  hack (and VERY ugly) I can think of is to write the application.DLL name and associated dotnet pid to a temp file in some agreed upon location. Another which only applies to *nix and Mac, would be to use the output of the ps command, which given the nature of the application is not a pretty way to do things either. Does anybody have any idea what MS plans are in this area? (Kind of like their omission of named/global Mutex and EventWaitHandle.) Thank you.",
                                           "updatedAt":  "2020-10-05T18:28:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BhCcB",
                                           "createdAt":  "2022-04-14T13:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODA6Q8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colotiline",
                                                                               "createdAt":  "2023-07-17T13:57:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "shinkathe",
                                           "body":  "![image](https://user-images.githubusercontent.com/2289820/163399344-a3709688-e800-4a47-97a4-747f99d56c22.png)\r\n\r\nVScode attaching looks like this atm. Pure guesswork needed.",
                                           "updatedAt":  "2022-04-14T13:20:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h9Jj1",
                                           "createdAt":  "2023-07-20T07:29:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colotiline",
                                           "body":  "I add PID (`Process.GetCurrentProcess().Id`) to app startup logs as a workaround.",
                                           "updatedAt":  "2023-07-20T07:29:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Thhag",
                                           "createdAt":  "2024-11-13T23:34:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7zJ3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "cdhanna",
                                                                               "createdAt":  "2024-11-20T19:27:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DomenPigeon",
                                           "body":  "Any progress on this?",
                                           "updatedAt":  "2024-11-13T23:34:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UYP9K",
                                           "createdAt":  "2024-11-20T19:28:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cdhanna",
                                           "body":  "I would love to see a solution to this problem. ",
                                           "updatedAt":  "2024-11-20T19:28:37Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "Get process description from dll info",
        "labels":  [
                       "enhancement",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3095",
        "createdAt":  "2018-03-24T08:26:11Z",
        "number":  3095,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-24T02:44:05Z",
        "body":  "We\u0027re not hosting .NET Core in the IIS worker process in 2.1 and as a result we\u0027d like to make the application base match the application path. See https://github.com/aspnet/IISIntegration/issues/725.\r\n\r\nIs there any way to tweak the CLR settings today via an API call?\r\n\r\n/cc @jkotalik @pakrym ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQgYGhg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTg4MTIyNQ==",
                                           "createdAt":  "2018-03-24T12:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "How does ` \\\\?\\` get into `AppDomain.CurrentDomain.BaseDirectory` under IIS ?\r\n\r\n@JeremyKuhne Do you think that we should be always stripping ` \\\\?\\` from `AppDomain.CurrentDomain.BaseDirectory` ? Or is it expected that the callers of various framework APIs that return paths are prepared to deal with ` \\\\?\\` prefix on Windows?",
                                           "updatedAt":  "2018-03-24T12:08:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTkxNDk2NQ==",
                                           "createdAt":  "2018-03-24T18:34:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "That part I\u0027m not sure about but even without that syntax the app base is incorrect. We\u0027d like to be able to set it properly.",
                                           "updatedAt":  "2018-03-24T18:34:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTkyMDEzOA==",
                                           "createdAt":  "2018-03-24T19:51:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can set the AppDomain base directory to anything you want using `AppContext.SetData(\"APP_CONTEXT_BASE_DIRECTORY\", ...)`. \r\n\r\nThis sounds like the general problem that you would like to run your managed code before the apps Main method is invoked. Do you have a way to do that in the ASP.NET IIS host today?",
                                           "updatedAt":  "2018-03-24T19:51:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTkyMjgzOA==",
                                           "createdAt":  "2018-03-24T20:32:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e Do you think that we should be always stripping \\\\?\\\r\n\r\nI think you should probably strip it, particularly if the path doesn\u0027t end in a period or space. Outside of that everything else should work fine.",
                                           "updatedAt":  "2018-03-24T20:32:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTk0NjEyOA==",
                                           "createdAt":  "2018-03-25T05:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e You can set the AppDomain base directory to anything you want using AppContext.SetData(\"APP_CONTEXT_BASE_DIRECTORY\", ...).\r\n\r\nNo I can\u0027t it\u0027s too late. I actually don\u0027t want to run any managed code. I just want to configure the host before my main runs.\r\n\r\n\u003e This sounds like the general problem that you would like to run your managed code before the apps Main method is invoked. Do you have a way to do that in the ASP.NET IIS host today?\r\n\r\nI don\u0027t want to revert to this yet. The CoreCLR hosting APIs lets us set the app base, we just need a way to set it from host_fxr_main.",
                                           "updatedAt":  "2018-03-25T05:12:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTk0NjkwNQ==",
                                           "createdAt":  "2018-03-25T05:36:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The argument for `hostfxr_main` is the command line. Are you asking for a new command line option for `dotnet exec` that lets you set appbase?",
                                           "updatedAt":  "2018-03-25T05:36:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTk0ODI5OA==",
                                           "createdAt":  "2018-03-25T06:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes or a new API that lets us set args + host settings.",
                                           "updatedAt":  "2018-03-25T06:15:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI0NjM1Ng==",
                                           "createdAt":  "2018-03-26T17:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "The command line argument would be less desirable because then we would have to check that user didn\u0027t set it on his own and get into the business of argument parsing.",
                                           "updatedAt":  "2018-03-26T17:28:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI0NzE2NQ==",
                                           "createdAt":  "2018-03-26T17:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "At the same time though, I don\u0027t want to add unnecessary bloat to hostfxr, like a simple call to set the BaseDirectory on the AppDomain. ",
                                           "updatedAt":  "2018-03-26T17:36:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI0OTc3NQ==",
                                           "createdAt":  "2018-03-26T17:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "We can just add a native alternative to `AppContext.SetData` ",
                                           "updatedAt":  "2018-03-26T17:38:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI1OTQwOQ==",
                                           "createdAt":  "2018-03-26T18:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "What does the user specified command line option for IIS hosting looks like today? Can users provide the host command line options?\r\n\r\nNote that this would be host option (the one that comes before the .dll name to execute). dotnet exec has host command line options to configure close to everything imaginable: \r\n\r\n```\r\nhost-options:\r\n  --additionalprobingpath \u003cpath\u003e      Path containing probing policy and assemblies to probe for\r\n  --depsfile \u003cpath\u003e                   Path to \u003capplication\u003e.deps.json file\r\n  --runtimeconfig \u003cpath\u003e              Path to \u003capplication\u003e.runtimeconfig.json file\r\n  --fx-version \u003cversion\u003e              Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx   Roll forward on no candidate shared framework is enabled\r\n  --additional-deps \u003cpath\u003e            Path to additonal deps.json file\r\n```",
                                           "updatedAt":  "2018-03-26T18:08:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI2ODQ0NQ==",
                                           "createdAt":  "2018-03-26T18:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "\u003e Can users provide the host command line options?\r\n\r\nYes, we are passing contents of arguments property from web.config directly to `hostfxr_main` so it can contain host arguments.",
                                           "updatedAt":  "2018-03-26T18:37:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI3MDgyOQ==",
                                           "createdAt":  "2018-03-26T18:45:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Make sense - you are basically doing dotnet exec inproc. Could you please explain to me why the appbase is not set correctly? Why is the appbase set correctly if the same application is run directly from command line?",
                                           "updatedAt":  "2018-03-26T18:45:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI3ODQ3NQ==",
                                           "createdAt":  "2018-03-26T19:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "The `\\\\?\\` part is coming from ANCM calculating absolute path (_wfullpath + https://github.com/aspnet/IISIntegration/blob/b70191fb82bef2346a931a3c645f5cb8132c8a79/src/IISLib/util.cxx#L7) - we can change this part.\r\n\r\n@davidfowl wants additionally to change it to point to IIS site location instead of entry dll location.\r\n",
                                           "updatedAt":  "2018-03-26T19:16:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI4NjU1OQ==",
                                           "createdAt":  "2018-03-26T19:39:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "When we launch w3wp.exe, it has the current working directory to C:\\Windows\\System32\\inetsrv, which is what is returned by Environment.CurrentDirectory. \r\nFor the AppDomain itself, it does return the correct path to the application. We can strip the ```\\\\?\\``` portion.",
                                           "updatedAt":  "2018-03-26T19:39:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjI5MDAzNw==",
                                           "createdAt":  "2018-03-26T19:51:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAUafWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2018-03-26T21:14:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not think you should be in the business of stripping `\\\\?\\` portion from appbase. The same problem exists for simple command line activation. Try: `dotnet \\\\?\\C:\\HelloWorld\\bin\\Debug\\netcoreapp2.0\\publish\\HelloWorld.dll`. This should be fixed in a more central place so that the fix applies to everybody, not just for IIS hosting.\r\n\r\nDo you still think you need the API to set the appbase, assuming we will figure out the central place where to handle `\\\\?\\` ?",
                                           "updatedAt":  "2018-03-26T19:51:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjczMDQ0NA==",
                                           "createdAt":  "2018-03-28T01:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "/cc @steveharter ",
                                           "updatedAt":  "2018-03-28T01:34:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzA1MjQ4Ng==",
                                           "createdAt":  "2018-03-28T22:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Other properties values are passed in via the runtimeconfig:\r\n```\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n```\r\n\r\nIf we could use this mechanism, then the hostfxr API entry point addition wouldn\u0027t need to change, and the code to pull in this setting would just be in hostpolicy.\r\n\r\nHowever I assume we don\u0027t want to leverage this mechanism because you don\u0027t want to write the appbase setting to the runtimeconfig, correct?\r\n",
                                           "updatedAt":  "2018-03-28T22:02:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzA1NTQ1NQ==",
                                           "createdAt":  "2018-03-28T22:14:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I have fixed the title to what I believe the actual problem is. It is not specific to IIS or hosting. To reproduce the problem:\r\n\r\n1. Create console app at c:\\HelloWorld\r\n2. Change the code to (repro from https://github.com/aspnet/IISIntegration/issues/725):\r\n```\r\nvar fileName = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"test.xml\");\r\nvar doc = new XmlDocument();\r\ndoc.Load(fileName);\r\n```\r\n3. Publish it and run it using `dotnet \\\\?\\C:\\HelloWorld\\bin\\Debug\\netcoreapp2.0\\publish\\HelloWorld.dll`\r\n\r\nResult: System.UriFormatException: Invalid URI: The hostname could not be parsed.\r\n\r\nNote that running the app using `dotnet C:\\HelloWorld\\bin\\Debug\\netcoreapp2.0\\publish\\HelloWorld.dll` works as expected.",
                                           "updatedAt":  "2018-03-28T22:15:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzI1MjkyMA==",
                                           "createdAt":  "2018-03-29T14:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "So implementation options as I see them:\r\n1) Add a new entry point to hostfxr (e.g. `hostfxr_main_with_clr_properties`) that takes the information, probably a name-value pair (e.g. \"APP_CONTEXT_BASE_DIRECTORY\", \"C:\\\\foo\")\r\n2) Add a new host option (e.g. `--appbase`)\r\n3) Write a setting (e.g. `appBase`) to the runtimeconfig in the `configProperties`\r\n\r\nIf option 3 is acceptable to ASP.NET then that is the least intrusive to the host (only requires hostpolicy changes, and not \"contract\" additions between hostfxr and hostpolicy); easiest to implement.\r\n\r\nOption 2 would expose it to everyone, which probably isn\u0027t a good idea.\r\n\r\nOption 1 something like:\r\n```\r\nSHARED_API int32_t hostfxr_main_with_clr_properties(const int argc, const pal::char_t* argv[], const int property_count, const pal::char_t* property_names[], const pal::char_t* property_values[])\r\n```\r\n",
                                           "updatedAt":  "2018-03-29T14:28:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzI1NzkzNg==",
                                           "createdAt":  "2018-03-29T14:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@steveharter The actual problem from the linked bug is that code out there chokes on paths starting with `\\\\?` . I do not think that this problem should be fixed by providing an API to set appbase path. \r\n\r\nI think that the best solutions to this problem is to strip `\\\\?` from the paths when it does not need to be there. This does not require any host API changes. We just need to find the right place to do it.",
                                           "updatedAt":  "2018-03-29T14:43:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzI3ODg0NQ==",
                                           "createdAt":  "2018-03-29T15:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "OK, so I assume the original \"make the application base match the application path\" requirement no longer holds.\r\n\r\nFrom the previous code [link ](https://github.com/aspnet/IISIntegration/blob/b70191fb82bef2346a931a3c645f5cb8132c8a79/src/IISLib/util.cxx#L7) it appears `\\\\?\\UNC\\` is another variant to account for.",
                                           "updatedAt":  "2018-03-29T15:45:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYyOTIxMw==",
                                           "createdAt":  "2018-03-30T21:38:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I\u0027m assuming we need this for 2.1.0. Correct?",
                                           "updatedAt":  "2018-03-30T21:38:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYyOTMzNw==",
                                           "createdAt":  "2018-03-30T21:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "Yes",
                                           "updatedAt":  "2018-03-30T21:39:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYyOTgyOQ==",
                                           "createdAt":  "2018-03-30T21:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Where will the `\\\\?` and `\\\\?\\UNC\\` be stripped at?\r\n- In the host\r\n- In the CLR\r\n- In corefx\r\n- By ASP.NET",
                                           "updatedAt":  "2018-03-30T21:42:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYyOTkwMA==",
                                           "createdAt":  "2018-03-30T21:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Noe enough info for it to be actionable yet, marking as Post-ZBB.",
                                           "updatedAt":  "2018-03-30T21:42:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYzMDA5OQ==",
                                           "createdAt":  "2018-03-30T21:43:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "ASP.NET is out of equation here (repro doesn\u0027t even have it https://github.com/dotnet/core-setup/issues/3896#issuecomment-377055455). So it has to be either host of clr",
                                           "updatedAt":  "2018-03-30T21:43:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTM2ODUyOA==",
                                           "createdAt":  "2018-04-06T20:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@pakrym why is it important for 2.1? Is it a regression from 2.0? Were there new features added that depend on it?\r\nIt seems to be in limbo state and we do not quite have design in place / the component responsible identified.",
                                           "updatedAt":  "2018-04-06T20:30:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTM4OTQ2Ng==",
                                           "createdAt":  "2018-04-06T21:36:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "@karelz it\u0027s not a regression but paths starting with `\\\\?\\` are completely valid windows paths that are handled incorrectly by the host.\r\n\r\nWe hit it in AspNetCore IIS module scenario where it was normalizing all paths by `\\\\?\\` before calling dotnet and caused all kinds of failures in different parts of the framework (Uri handling for example)",
                                           "updatedAt":  "2018-04-06T21:36:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTM5MjIxNQ==",
                                           "createdAt":  "2018-04-06T21:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Is the scenario more common / more important in 2.1 than in 2.0?\r\nGiven that it came late and we do not have agreement on solution, I\u0027d like to understand why it is important to fix it in 2.1. How should I compare it to other 2.1-critical work?",
                                           "updatedAt":  "2018-04-06T21:45:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MjkwMDQ0MQ==",
                                           "createdAt":  "2018-04-19T22:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAVf82Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2018-04-19T22:52:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karelz",
                                           "body":  "Moving to Future - it does not seem to be critical for 2.1.",
                                           "updatedAt":  "2018-04-19T22:30:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Mjk5MDYwMg==",
                                           "createdAt":  "2018-04-20T06:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes we can punt this for now.",
                                           "updatedAt":  "2018-04-20T06:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CBgaG",
                                           "createdAt":  "2022-04-24T02:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Did we ever fix this??",
                                           "updatedAt":  "2022-04-24T02:44:04Z"
                                       }
                                   ],
                         "totalCount":  33
                     },
        "title":  "Applications invoked using \\\\?\\ path on Windows do not work well",
        "labels":  [
                       "bug",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3156",
        "createdAt":  "2018-05-01T19:59:32Z",
        "number":  3156,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAV_RGg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidebbo",
                                            "createdAt":  "2018-05-01T20:15:08Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-28T17:31:49Z",
        "body":  "There is a desire in certain environments to get details about .NET Core apps being launched in order to aid in analysis of issues, distribution of frameworks and dependencies being loaded, etc. (similar to the way that .NET apps log to the Windows Event log when they crash to capture details of failure). This can be particularly useful to discover how many apps are using a given shared framework version (to aid in planning to uninstall that version), or which apps are using a particular dependency (in case there is a security or compliance issue of some kind).\r\n\r\nTo this end, the host layer should log details about the app being launched to the appropriate sink for the OS (e.g. ETW on Windows, LTTng on Linux). The following details would be helpful:\r\n- Path and version of dotnet host\r\n- Path, name and version of any shared frameworks depended on by the application, including details of whether the app will run on that version or be rolled forward to a newer version\r\n- Path and contents of any additional deps being applied\r\n- Names and versions of any dependencies declared by the application in its deps file\r\n- Name and version of the application assembly\r\n- Path of the application assembly\r\n\r\nIt might be good to enable configuring which of these details is logged, e.g. via ETW event names or keywords.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONHFlzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTc3OTYxNw==",
                                           "createdAt":  "2018-05-01T20:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Petermarcu",
                                           "body":  "@brianrob ",
                                           "updatedAt":  "2018-05-01T20:26:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTgwNzU0OA==",
                                           "createdAt":  "2018-05-01T22:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Would like this to be considered for next minor release, or even better, a servicing release 😄 ",
                                           "updatedAt":  "2018-05-01T22:18:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTgwOTgxMg==",
                                           "createdAt":  "2018-05-01T22:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "CoreCLR has the concept of the RuntimeInformation event which does a stripped-down version of this for things that the runtime knows, and it is quite valuable.  This is what is logged in the RuntimeInformation event:\r\n\r\n - Runtime version\r\n - Path to coreclr.dll/libcoreclr.so\r\n - Startup flags\r\n - Command line (not always populated in the case of CoreCLR)\r\n - COM object GUID\r\n\r\nIt can be quite useful and I can imagine that the information requested here would also be quite valuable.  One thing to note is that amost all of the information requested here is information that the host has but the runtime does not.  This complicates things just a bit because the component that knows how to log to the platform-dependent and platform-independent loggers is the runtime.  I would recommend designing a mechanism to pass this information from the host to the runtime and let the runtime log it.  This will guarantee that the information is exposed in all the right logging mechanisms on each platform (both platform-independent and platform-dependent).\r\n\r\nI can help with details on exactly what to do here.",
                                           "updatedAt":  "2018-05-01T22:30:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTgxMDE1Nw==",
                                           "createdAt":  "2018-05-01T22:32:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Sounds great.\r\n\r\nWhere is the RuntimeInformation event logged today?",
                                           "updatedAt":  "2018-05-01T22:32:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NTgxMDk4MA==",
                                           "createdAt":  "2018-05-01T22:36:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "It\u0027s logged in a few places:\r\n\r\n - Runtime start-up\r\n - During rundown (when stopping trace collection) in case we didn\u0027t capture or lost the start-up event.\r\n\r\nThe code that does the actual logging is here: https://github.com/dotnet/coreclr/blob/86f418f0bd196ba84ab702410500271a4f8b0c33/src/vm/eventtrace.cpp#L4926.\r\n\r\nIt is called from a few different places.",
                                           "updatedAt":  "2018-05-01T22:36:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzA0NzE5Mg==",
                                           "createdAt":  "2018-06-13T18:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@blowdart ",
                                           "updatedAt":  "2018-06-13T18:53:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzA0ODEzMg==",
                                           "createdAt":  "2018-06-13T18:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Oh yes, I want this for security scanning, including fingerprinting of assemblies (SHA and signer would be great) loaded during startup, and even better, runtime, for dynamic loaded.",
                                           "updatedAt":  "2018-06-13T18:56:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNDU2MTI4MA==",
                                           "createdAt":  "2018-10-31T04:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Curious where this has landed? Are we getting this for 3.0?",
                                           "updatedAt":  "2018-10-31T04:57:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzQ1OTc1OQ==",
                                           "createdAt":  "2019-05-30T19:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "We are still gathering details on what should be logged.  We should put this on the potential list for .NET Core 3.1",
                                           "updatedAt":  "2019-05-30T19:44:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDA2NzIwNA==",
                                           "createdAt":  "2019-09-10T18:39:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "*ping* ?",
                                           "updatedAt":  "2019-09-10T18:39:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDA2Nzk3Mw==",
                                           "createdAt":  "2019-09-10T18:41:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "It is on our backlog.  @DamianEdwards are you the right person to get the specifics on what is needed?  We explored this in late .NET Core 3, but the requirements were not solid enough for us to build something.\r\n\r\ncc @vitek-karas @elinor-fung @lpereira ",
                                           "updatedAt":  "2019-09-10T18:41:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDk4NzM1Mg==",
                                           "createdAt":  "2019-09-12T20:13:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Right owner would be someone on @glennc\u0027s team I think, and I know for sure @blowdart is interested too. I provided a strawman summary up front on this issue and I think it\u0027s probably still a good place to start.",
                                           "updatedAt":  "2019-09-12T20:13:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MzM3NDE0NQ==",
                                           "createdAt":  "2019-10-17T21:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@vitek-karas, @shirhatti, and @noahfalk talked about this issue. Here are some notes.\r\n\r\n* When the host fails to load the runtime, the error logging is limited, since the apphost is a simple native app that cannot take many dependencies. The tracing is limited to:\r\n    * The error logging to console (or upcoming UI message on windows)\r\n    * Tracing information, when the app is actually run with `COREHOST_TRACE` turned on\r\n* Once the runtime is loaded, we can send ETW, event-pipes, etc.\r\n* In .net core 3/3.1 the host-runtime interface is limited to the host passing a set of strings to the runtime. In .net 5, this will be replaced with a set of callbacks from the runtime to the host -- and therefore, the runtime can expose APIs to request specific information from the host.\r\n\r\nHere is the work we agreed to perform in 3.1:\r\n* If/when the runtime is loaded: \r\n    * Log all properties passed to the runtime\r\n    * Log the set of frameworks loaded, along with requested-version and resolved-version for each framework.\r\n* No change in the case where the host fails to load the runtime\r\n\r\nThis will be achieved by:\r\n* The host writes a string containing the above information as a new property passed to the runtime\r\n* The runtime will generate an event containing all properties passed to it.\r\n* The values of some of the well-known properties may be well-structured (if it is easy enough to do). Otherwise we log the actual strings passed in.",
                                           "updatedAt":  "2019-10-17T21:43:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MTI3MTYzMw==",
                                           "createdAt":  "2019-11-07T21:25:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Based on recent offline discussion with @blowdart the security scanning aspect is a somewhat different ask. In addition it might already be sort of \"resolved\" by existing assembly loader tracing.",
                                           "updatedAt":  "2019-11-07T21:25:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTc2MjgxMw==",
                                           "createdAt":  "2019-11-19T23:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1hp5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2019-11-20T20:59:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "For the work agreed upon [here](https://github.com/dotnet/core-setup/issues/4112#issuecomment-543374145), I\u0027m in the process of making the following changes: \r\n\r\n* The Host passes a new property `FX_RESOLUTION` to the runtime. This property is constructed simply as:\r\n```\r\n    Foreach fx in fx_definitions, \r\n       Add to FX_RESOLUTION  \r\n             Framework: fx-\u003eget_name().c_str(),\r\n             Min: fx-\u003eget_requested_version().c_str(),\r\n             Resolved: fx-\u003eget_found_version().c_str(),\r\n```\r\n* A new event `RuntimeProperties` is added to the runtime, with the schema: \r\n```\r\n\u003ctemplate tid=\"RuntimeProperties\"\u003e\r\n    \u003cdata name=\"ClrInstanceID\" inType=\"win:UInt16\" /\u003e\r\n    \u003cdata name=\"TRUSTED_PLATFORM_ASSEMBLIES\" inType=\"win:UnicodeString\" /\u003e\r\n    \u003cdata name=\"NATIVE_DLL_SEARCH_DIRECTORIES\" inType=\"win:UnicodeString\" /\u003e\r\n    \u003cdata name=\"PLATFORM_RESOURCE_ROOTS\" inType=\"win:UnicodeString\" /\u003e\r\n    \u003cdata name=\"APP_CONTEXT_BASE_DIRECTORY\" inType=\"win:UnicodeString\" /\u003e\r\n    \u003cdata name=\"APP_CONTEXT_DEPS_FILES\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"PROBING_DIRECTORIES\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"FX_PRODUCT_VERSION\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"JIT_PATH\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"FX_DEPS_FILE\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"APP_PATHS\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"APP_NI_PATHS\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"FX_RESOLUTION\" inType=\"win:UnicodeString”/\u003e\r\n    \u003cdata name=\"Others\" inType=\"win:UnicodeString”/\u003e\r\n\r\n    \u003cUserData\u003e\r\n        \u003cRuntimeProperties xmlns=\"myNs\"\u003e\r\n            \u003cClrInstanceID\u003e %1 \u003c/ClrInstanceID\u003e\r\n            \u003cTRUSTED_PLATFORM_ASSEMBLIES\u003e %2 \u003c/TRUSTED_PLATFORM_ASSEMBLIES\u003e\r\n            \u003cNATIVE_DLL_SEARCH_DIRECTORIES\u003e %3 \u003c/NATIVE_DLL_SEARCH_DIRECTORIES\u003e\r\n            \u003cPLATFORM_RESOURCE_ROOTS\u003e %4 \u003c/PLATFORM_RESOURCE_ROOTS\u003e\r\n            \u003cAPP_CONTEXT_BASE_DIRECTORY\u003e %5 \u003c/APP_CONTEXT_BASE_DIRECTORY\u003e\r\n            \u003cAPP_CONTEXT_DEPS_FILES\u003e %6 \u003c/APP_CONTEXT_DEPS_FILES\u003e\r\n            \u003cAPP_CONTEXT_DEPS_FILES\u003e %6 \u003c/APP_CONTEXT_DEPS_FILES\u003e\r\n            \u003cPROBING_DIRECTORIES\u003e %6 \u003c/PROBING_DIRECTORIES\u003e\r\n            \u003cFX_PRODUCT_VERSION\u003e %6 \u003c/FX_PRODUCT_VERSION\u003e\r\n            \u003cJIT_PATH\u003e %6 \u003c/JIT_PATH\u003e\r\n            \u003cFX_DEPS_FILE\u003e %7 \u003c/FX_DEPS_FILE\u003e\r\n           \u003cAPP_PATHS\u003e %10 \u003c/APP_PATHS\u003e\r\n            \u003cAPP_NI_PATHS\u003e %11 \u003c/APP_NI_PATHS\u003e\r\n            \u003cFX_RESOLUTION\u003e %12 \u003c/FX_RESOLUTION\u003e\r\n            \u003cOthers\u003e %13 \u003c/Others\u003e\r\n        \u003c/RuntimeProperties\u003e\r\n    \u003c/UserData\u003e\r\n\u003c/template\u003e\r\n```\r\n* The event will be fired on startup, when enabled.\r\n\r\nA sample output of the event is here:\r\n```\r\n\r\n\r\nTRUSTED_PLATFORM_ASSEMBLIES = C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.AspNetCore.Connections.Abstractions.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.Extensions.Identity.Stores.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.AspNetCore.Authentication.dll;webapi\\bin\\Debug\\netcoreapp3.0\\publish\\asp.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.AspNetCore.Http.Connections.Common.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\System.Runtime.Serialization.Formatters.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.AspNetCore.Antiforgery.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\System.IO.IsolatedStorage.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.AspNetCore.Mvc.Localization.dll;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\\r\nNATIVE_DLL_SEARCH_DIRECTORIES = C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\;\r\nPLATFORM_RESOURCE_ROOTS = \r\nFX_DEPS_FILE = webapi\\bin\\Debug\\netcoreapp3.0\\publish\\asp.deps.json\r\nFX_PRODUCT_VERSION = 3.0.0\r\nAPP_CONTEXT_BASE_DIRECTORY = webapi\\bin\\Debug\\netcoreapp3.0\\publish\\\r\nAPP_CONTEXT_DEPS_FILES = webapi\\bin\\Debug\\netcoreapp3.0\\publish\\asp.deps.json;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0\\Microsoft.AspNetCore.App.deps.json;C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\Microsoft.NETCore.App.deps.json\r\nPROBING_DIRECTORIES = \r\nJIT_PATH = C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App\\3.0.0\\clrjit.dll\r\nFX_RESOLUTION=Framework:\u0027Microsoft.AspNetCore.App\u0027, Min:\u00273.0.0\u0027, Resolved:\u00273.0.0\u0027; Framework:\u0027Microsoft.NETCore.App\u0027, Min:\u00273.0.0\u0027, Resolved:\u00273.0.0\u0027\r\nOthes = System.GC.Server = true\r\n```\r\n\r\n@shirhatti can you please verify if the output is what\u0027d you\u0027d like to have? \r\n@noahfalk, @vitek: Please let me know if you have any additional comments about the implementation. Thanks.\r\n\r\n",
                                           "updatedAt":  "2019-11-20T03:53:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTgyNTc5OQ==",
                                           "createdAt":  "2019-11-20T03:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@noahfalk  recommended structuring the schema for some items (like TPA, FX_RESOLUTION) as arrays of structured items, rather than strings. I\u0027ll update it.",
                                           "updatedAt":  "2019-11-20T03:53:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NjQ1ODI5Ng==",
                                           "createdAt":  "2019-11-20T22:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1nhXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2019-11-21T18:26:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I would change the name of the property in `FX_RESOLUTION` from `Min` to `Requested`, that better describes the intent of the message.",
                                           "updatedAt":  "2019-11-20T22:02:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MjQyMDIwNA==",
                                           "createdAt":  "2019-12-06T03:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "I discussed the logging format issue with  @shirhatti, who preferred publishing the runtime properties as simple strings (that are also human readable) rather than binary blobs. So, we\u0027ll try implementing the event with data-definitions as individual strings, as described [above](https://github.com/dotnet/core-setup/issues/4112#issuecomment-555762813)",
                                           "updatedAt":  "2019-12-06T03:43:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NDAxMzI3OQ==",
                                           "createdAt":  "2020-08-31T20:14:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@vitek-karas @swaroop-sridhar I\u0027m thinking that this is a 6.0 item now, any objections?",
                                           "updatedAt":  "2020-08-31T20:14:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NDAxNjgzMw==",
                                           "createdAt":  "2020-08-31T20:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "agreed 😢 ",
                                           "updatedAt":  "2020-08-31T20:21:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NDAxNzU1NQ==",
                                           "createdAt":  "2020-08-31T20:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "Me too.",
                                           "updatedAt":  "2020-08-31T20:23:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzQwNzUzMg==",
                                           "createdAt":  "2020-09-04T21:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "In order to make the event extensible, we\u0027d agreed that the event\u0027s payload will contain two arrays -- for property names and values -- similar to what\u0027s passed in to the runtime. Initially, we only report the following properties: `FX_PRODUCT_VERSION` and `FX_RESOLUTION`, and this can be expanded based on use-cases. ",
                                           "updatedAt":  "2020-09-04T21:49:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzQyMTMwMA==",
                                           "createdAt":  "2020-09-04T22:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "@swaroop-sridhar do you have a plan for how this data will ultimately get logged?  If it gets logged from the runtime, or managed code, we have the ability to use the runtime support for tracing.  Is the idea here to extend the interface between the host and the runtime to pass this data, and then the runtime is responsible for logging it?",
                                           "updatedAt":  "2020-09-04T22:11:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzQzMDE5MQ==",
                                           "createdAt":  "2020-09-04T22:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "The `FX_RESOLUTION` property will be computed by the host, and passed on to the runtime, as an additional property.\r\nThe input properties will be logged by the runtime at startup (ex: in CreateAppDomain).\r\nPlease see: https://github.com/dotnet/runtime/pull/644  and https://github.com/dotnet/runtime/pull/690 ",
                                           "updatedAt":  "2020-09-04T22:24:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzQzOTU4Mg==",
                                           "createdAt":  "2020-09-04T22:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "Sounds good.  Thanks much @swaroop-sridhar.",
                                           "updatedAt":  "2020-09-04T22:39:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ5NzM1Nw==",
                                           "createdAt":  "2021-07-14T00:46:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I believe this work has been completed in #690",
                                           "updatedAt":  "2021-07-14T00:46:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTg0Njg2MA==",
                                           "createdAt":  "2021-07-14T12:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "#690 was never merged - as far as I know this functionality doesn\u0027t exist in the runtime yet. The only even which is there is Runtime Start - which logs version of CoreCLR and BCL, but nothing else.",
                                           "updatedAt":  "2021-07-14T12:25:23Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "Log details of app being launched by dotnet(.exe) to ETW/LTTng",
        "labels":  [
                       "enhancement",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3163",
        "createdAt":  "2018-05-10T22:39:39Z",
        "number":  3163,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-25T23:58:35Z",
        "body":  "@JustArchi commented on [Thu May 10 2018](https://github.com/dotnet/coreclr/issues/17952)\n\nSteps to reproduce:\r\n\r\n1. `dotnet publish -c Release -r win-x64 -o out` (any app)\r\n2. Manually rename `out` directory to `out;` or any other with a semicolon\r\n3. Run `YourApp.exe`\r\n\r\nResult:\r\n\r\n```\r\nFailed to initialize CoreCLR, HRESULT: 0x80070057\r\n```\r\n\r\nThank you in advance.\r\n\r\n```\r\nNarzędzia wiersza polecenia programu .NET (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.200\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n```\n\n---\n\n@danmosemsft commented on [Thu May 10 2018](https://github.com/dotnet/coreclr/issues/17952#issuecomment-388207207)\n\n```\r\n00 00000042`2b17d470 00007ffd`4c6cc488 KERNELBASE!RaiseException+0x68 minkernel\\kernelbase\\xcpt.c @ 922]\r\n01 00000042`2b17d550 00007ffd`4c6cbe2f coreclr!RaiseTheExceptionInternalOnly+0x2fc e:\\a\\_work\\104\\s\\src\\vm\\excep.cpp @ 2996]\r\n*** ERROR: Module load completed but symbols could not be loaded for C:\\dotnet21\\shared\\Microsoft.NETCore.App\\2.1.0-preview3-26411-06\\System.Private.CoreLib.dll\r\n02 00000042`2b17d690 00007ffd`34b675b4 coreclr!IL_Throw+0x16f e:\\a\\_work\\104\\s\\src\\vm\\jithelpers.cpp @ 4860]\r\n03 00000042`2b17d850 00007ffd`34671f08 System_Private_CoreLib!System.AppDomain.NormalizeAppPaths(System.String)+0x4f5624\r\n04 00000042`2b17d8c0 00007ffd`4c773283 System_Private_CoreLib!System.AppDomain.Setup(System.Object)+0x2c8\r\n05 00000042`2b17d950 00007ffd`4c70a2ed coreclr!CallDescrWorkerInternal+0x83 E:\\A\\_work\\104\\s\\src\\vm\\amd64\\CallDescrWorkerAMD64.asm @ 101]\r\n\r\n```\r\n\r\nbecause NormalizeAppPaths splits on ;\r\n`               int nextPos = values.IndexOf(Path.PathSeparator, pos);`\r\n\r\nbecause `TRUSTED_PLATFORM_ASSEMBLIES` contained a set of semi colon separated paths including the app\u0027s binary path. This setup information comes from the host. It is impossible for AppDomain to know that the semicolon is part of the path. The host should either agree on some escaping mechanism, or use a character that is not a valid part of a path, or pass an array in some other way.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiaC4bg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODI4MDUzNw==",
                                           "createdAt":  "2018-05-11T07:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jkotas is it feasible for runtime to dump at least managed exception message to console here ",
                                           "updatedAt":  "2018-05-11T07:09:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODM2NDUwMA==",
                                           "createdAt":  "2018-05-11T13:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The exception message we would print in this case is something like \"Absolute path required\" because of we see relative path where absolute path was expected. It would not be really helpful, and it is not easy to do this early during startup.\r\n\r\nI think the error handling for this case would be best in the host because of that\u0027s where the problem starts.\r\n\r\nOf course, it would be even better to fix this problem and deal with paths that contain semicolons properly end-to-end. Also, we have similar problems with other types of corner-case paths, like https://github.com/dotnet/coreclr/issues/16162 .\r\n\r\ncc @jeffschwMSFT ",
                                           "updatedAt":  "2018-05-11T13:32:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JoLhu",
                                           "createdAt":  "2024-08-25T22:05:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-25T22:05:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "CoreCLR doesn\u0027t start if path includes a semicolon (on Windows)",
        "labels":  [
                       "bug",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3320",
        "createdAt":  "2018-10-24T17:25:16Z",
        "number":  3320,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-12-29T22:42:37Z",
        "body":  "this is follow-up on  dotnet/core-setup#3228.\r\n\r\nright now we get this on FreeBSD running dotnet --info\r\n \r\n\r\n\u003e Runtime Environment:\r\n\u003e  OS Name:     FreeBSD\r\n\u003e  OS Version:  11\r\n\u003e  OS Platform: FreeBSD\r\n\u003e  RID: freebsd.11-x64\r\n\u003e \r\nTo be consistent with other platforms this should be updated to retune something like 11.2 for version (or 12.0) and rid should be freebsd.11.2-64\r\n\r\ncc: @bartonjs \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON5eRTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjU4NjE3OQ==",
                                           "createdAt":  "2019-02-22T23:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dagood",
                                           "body":  "Based on https://github.com/dotnet/core-setup/pull/3228, this is a host change. (Setting label.)",
                                           "updatedAt":  "2019-02-22T23:39:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43l5FN",
                                           "createdAt":  "2021-10-02T04:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arrowd",
                                           "body":  "Haskell Stack doesn\u0027t discriminate between minor version. Neither should .NET, because minor releases are guaranteed to be ABI compatible.\r\n",
                                           "updatedAt":  "2021-10-02T04:33:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Update platform functions to use major and minor version number on FreeBSD",
        "labels":  [
                       "os-freebsd",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3453",
        "createdAt":  "2019-02-09T11:42:21Z",
        "number":  3453,
        "author":  "Symbai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBBrtA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wjk",
                                            "createdAt":  "2019-02-18T23:46:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreyMikhailov",
                                            "createdAt":  "2021-03-21T16:40:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kirill78Z",
                                            "createdAt":  "2021-08-10T11:13:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BelarminoVicenzo",
                                            "createdAt":  "2021-10-28T14:17:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-12-21T16:30:14Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-12-21T16:30:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fbrosseau",
                                            "createdAt":  "2021-12-21T16:32:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yfdyh000",
                                            "createdAt":  "2022-04-08T19:28:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hastarin",
                                            "createdAt":  "2022-05-05T04:18:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomihbk",
                                            "createdAt":  "2022-07-04T21:29:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "tomihbk",
                                            "createdAt":  "2022-07-04T21:29:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "g-lashuk",
                                            "createdAt":  "2022-11-23T12:56:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Forge36",
                                            "createdAt":  "2023-05-26T15:11:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-09-26T17:36:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "suikabyte",
                                            "createdAt":  "2023-12-04T06:39:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kkamikadzee",
                                            "createdAt":  "2024-05-13T06:24:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2024-06-21T21:14:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SylwesterZarebski",
                                            "createdAt":  "2024-10-08T10:48:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ferenc-a",
                                            "createdAt":  "2024-12-16T11:00:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhudler",
                                            "createdAt":  "2025-04-09T14:57:17Z"
                                        }
                                    ],
                          "totalCount":  20
                      },
        "updatedAt":  "2022-01-05T14:50:31Z",
        "body":  "Publishing a self-contained app currently copies over 250 files into the output directory, which is a bit messy. Is there a way to specify the location for the runtime files so for example I can put them all into a \"bin\" or \"runtime\" folder to get a clean output directory with just my app files?\r\n\r\nWhen you give your self contained app to others they first have to scroll through all over these over 250 runtime files just to find the actual executable. It really doesn\u0027t look nice and most of the time it\u0027s the first thing I\u0027m getting to hear.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO_KNUw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjEyNjQyNw==",
                                           "createdAt":  "2019-02-10T12:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Currently there\u0027s no option to do this. In theory it\u0027s possible, but our build/SDK doesn\u0027t do that.\r\nPossibly a better solution would the proposed \"single-exe\" capability dotnet/designs#52",
                                           "updatedAt":  "2019-02-10T12:00:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjEzNTcwMg==",
                                           "createdAt":  "2019-02-10T14:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "In theory it could solve the issue. But the single-exe solution according to the notes slows down the start time of the application by extracting all the file to disk. There is a huge difference between 200ms more start time or 2 seconds more start time. Without seeing it in action I cannot say whether it\u0027s better or not. \r\n\r\nAnother question, is there a way to get rid of unused runtime DLLs? As if now it seems it just copies the whole .NET Core Runtime into the folder. If I can reduce the files from \u003e250 to maybe just 50-70 I\u0027m actually using it would be a great help.",
                                           "updatedAt":  "2019-02-10T14:04:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MjEzOTM4NQ==",
                                           "createdAt":  "2019-02-10T14:56:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAjDbSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2019-02-10T19:58:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@sbomer would know if there\u0027s a way to use ILLinker to do that.\r\n\r\n@Symbai I\u0027m not questioning your scenario, I do agree that it would be great to have the option to put all the runtime files into a subdirectory..",
                                           "updatedAt":  "2019-02-10T14:56:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mjk1MTk1NQ==",
                                           "createdAt":  "2019-02-12T21:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Yup, the linker should be able to do that (instructions at https://github.com/mono/linker/blob/master/corebuild/README.md). The linker is a bit broken at the moment and is likely to change, so consider waiting until the next release if you\u0027d like a better experience. Happy to help if needed.",
                                           "updatedAt":  "2019-02-12T21:55:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODczNTc5Nw==",
                                           "createdAt":  "2019-07-05T11:59:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@Symbai can you try the single-file in the latest preview? See this for how to enable it: https://github.com/dotnet/sdk/pull/3074\r\n\r\nIt does extract onto disk the first time you run the app, but subsequent runs should simply reuse the files which are already on the disk...",
                                           "updatedAt":  "2019-07-05T11:59:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODkxNjc0MA==",
                                           "createdAt":  "2019-07-06T10:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMlBjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raducoriu",
                                                                               "createdAt":  "2023-11-14T15:10:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Symbai",
                                           "body":  "It does work but it\u0027s not exactly what I had in mind. Rather something like this https://github.com/0xd4d/dnSpy/blob/master/Build/AppHostPatcher/Program.cs . It allows to tell the native .NET Core apphost executable to launch the application.dll from a sub folder. This way the folder structure is a bit more clean and user friendly. So it becomes:\r\n\r\n```\r\nProgram.exe\r\nbin\\Program.dll\r\nbin\\....\r\n```\r\n\r\nAn improved version of this would only move all the .NET Core files into a sub folder so it becomes:\r\n\r\n```\r\nProgram.exe\r\nbin\\Program.dll\r\nbin\\core\\System.dll\r\nbin\\core\\...\r\n```\r\n\r\nWhile single file is neat it comes with some other issues. For example launching files from detachable drives and avoid leaving \"traces\" on the host computer. Or if you store your settings in the program folder to make it portable. When using the single file option uses a temp folder instead which makes it difficult to programmatically define the setting file storage then.\r\n\r\nBut if this cannot be done or won\u0027t be done then you\u0027re welcome to close the issue and link to the single file option.",
                                           "updatedAt":  "2019-07-06T10:55:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTI0OTQ3MQ==",
                                           "createdAt":  "2019-07-08T14:30:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH3KQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "redoz",
                                                                               "createdAt":  "2020-06-03T11:14:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hmartinez82",
                                                                               "createdAt":  "2020-06-26T17:35:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FarmV",
                                                                               "createdAt":  "2022-04-29T09:50:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T17:38:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The approach implemented by @0xd4d is possible today without external tools, it\u0027s just not very easy to use:\r\n```XML\r\n  \u003cUsingTask TaskName=\"CreateAppHost\" AssemblyFile=\"$(MicrosoftNETBuildTasksAssembly)\" /\u003e\r\n  \u003cTarget Name=\"PostBuild\" AfterTargets=\"PostBuildEvent\"\r\n          DependsOnTargets=\"_GetAppHostPaths\"\u003e\r\n    \u003cCreateAppHost AppHostSourcePath=\"$(AppHostSourcePath)\"\r\n                   AppHostDestinationPath=\"$(OutputPath)\\app.exe\"\r\n                   AppBinaryName=\"bin\\app.dll\"\r\n                   IntermediateAssembly=\"$(OutputPath)\\app.dll\"/\u003e\r\n  \u003c/Target\u003e\r\n```\r\n\r\nThis is essentially what the SDK does to produce the original app.exe. Currently there\u0027s no way to customize that process (I filed https://github.com/dotnet/sdk/issues/3405 for that). The above basically recreates the `app.exe` from scratch (so duplicating the work which SDK already did), but with the ability to customize the imprinted path (in the above sample it \"moves\" the code into a `bin` folder).\r\n\r\nThe problem with the above snippet is that it relies on internal SDK stuff (`_GetAppHostPaths`) which we want to keep \"private\" and thus have the ability to change them without breaking people. So if you do decide to use this approach, it comes with \"can be broken at any time\" tag on it.\r\n\r\nThe larger feature ask here is to be able to customize the layout of the application output folder (moving files into subfolders). This would require larger changes to the system, on the host side it would require a fix for https://github.com/dotnet/core-setup/issues/5645. On the SDK side it would require a way to specify the desired structure and then the actual implementation which would know how to generate the right `.deps.json` for it. So far we don\u0027t have that on the plans anywhere (that I\u0027m aware of).",
                                           "updatedAt":  "2019-07-08T14:30:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTM2MTk1MA==",
                                           "createdAt":  "2019-07-08T19:35:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "@vitek-karas Thanks for explaining this to me. Do you think I should leave this issue open or rather close it as there are no plans for it anywhere like you said?",
                                           "updatedAt":  "2019-07-08T19:35:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTM3NTI0Nw==",
                                           "createdAt":  "2019-07-08T20:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIrxcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "hmartinez82",
                                                                               "createdAt":  "2020-06-26T17:39:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "We are \"making\" the plans for .NET 5 now, so I would say now is actually the best time to come up with \"ideas\". The larger SDK feature is something which would probably be better tracked in the [SDK repo](https://github.com/dotnet/sdk) (the right people will see that and so on). Also because I think most of the work would be on the SDK side.\r\n\r\nIf you can spare some time, please create an issue there describing the scenario - the technical details are not that interesting at this point, but do try to answer the \"why do I want this\", \"what\u0027s the problem I\u0027m facing now\", \"why single-file doesn\u0027t work for me\" and so on. These are the questions we generally have the hardest time answering - it\u0027s you, the users who know best.",
                                           "updatedAt":  "2019-07-08T20:16:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTM3NTU1Mg==",
                                           "createdAt":  "2019-07-08T20:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAsHquQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2019-07-09T20:31:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "In any case, thanks a lot for providing the feedback and answering our questions - these kinds of discussions help so much to understand what are the issues with the product.",
                                           "updatedAt":  "2019-07-08T20:17:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjc2Njc0NQ==",
                                           "createdAt":  "2019-07-31T09:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEC6tjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sthch",
                                                                               "createdAt":  "2025-01-17T03:02:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liesauer",
                                           "body":  "you can try this tool [NetCoreBeauty](https://github.com/nulastudio/NetCoreBeauty), and it should works, but it still have a bug that cannot  be fixed it a short time, see https://github.com/dotnet/core-setup/issues/5645#issuecomment-516764531.",
                                           "updatedAt":  "2019-07-31T09:12:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDMxMzMxMQ==",
                                           "createdAt":  "2020-06-26T17:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hmartinez82",
                                           "body":  "@sbomer Do you know if it\u0027s possible to have a single copy of the runtime, that came from a self-contained deployment for instance, and have multiple exes that are in subfolders use the runtime in the topmost folder:\r\n\r\n- MainProg.exe\r\n- runtime dlls\r\n- SubFolders\r\n- - SubFolder1\r\n- - - App1.exe\r\n- - - App1 specific deps\r\n- - SubFolder2\r\n- - - App2.exe\r\n- - - App2 specific deps\r\n\r\nI\u0027m finding it impossible to tell App1.exe and App2.exe to use the runtime files from the top-most folder. \r\n\r\nI\u0027ve looked for docs on the matter and I can\u0027t find anything, not even on the deps.json and runtime.json docs\r\n",
                                           "updatedAt":  "2021-03-22T14:24:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDMxODM3Nw==",
                                           "createdAt":  "2020-06-26T18:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMlC0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2020-06-26T18:06:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hmartinez82",
                                                                               "createdAt":  "2020-06-26T18:26:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "hmartinez82",
                                                                               "createdAt":  "2020-06-26T22:00:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zi-j",
                                                                               "createdAt":  "2020-08-05T20:58:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T17:40:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T17:40:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raducoriu",
                                                                               "createdAt":  "2023-11-14T15:12:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@hmartinez82 currently this is not possible (or would be pretty tricky) since the host expect the self-contained \"runtime\" to live next to the app.\r\n\r\nWhat you could do instead is build the apps as framework dependent. Then when installing:\r\n* Get the \"zip\" download for the specific runtime version/target\r\n* Unzip it to some location  - can be in \"runtime\" subfolder to your main folder\r\n* Install the apps as shown above (but really anywhere, it doesn\u0027t matter)\r\n* Run the apps via a \"script\" - all you need to do is set `DOTNET_ROOT=path` env. variable to point to the runtime folder and then run the app from that environment. On Windows you may also want to set `DOTNET_MULTILEVEL_LOOKUP=0` to make sure the apps will not use the globally installed .NET Core (if there\u0027s any).\r\n\r\nI know this is not ideal as it requires you to run the app via a script, but it\u0027s the only solution we have today.\r\n\r\nIt\u0027s not a self-contained app anymore, but you control the version of the runtime fully - so it\u0027s very similar in that sense.",
                                           "updatedAt":  "2020-06-26T18:02:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzY2MTA4OA==",
                                           "createdAt":  "2021-03-21T21:14:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kimimaru4000",
                                           "body":  "@vitek-karas With .NET 5 having been released for some time now, are there, by any chance, updates on this feature? Is there another issue I can follow to see progress on it?",
                                           "updatedAt":  "2021-03-21T21:14:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzk5NTc5Mg==",
                                           "createdAt":  "2021-03-22T11:37:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I\u0027m not aware of any progress on this. It\u0027s not a very common ask, so it\u0027s relatively low on the priority list AFAIK. But as mentioned above changes to the output layout are mostly an SDK concern, so it would be better to track that in the dotnet/sdk repo. The above discussion is all basically \"How can I modify the app AFTER SDK built it to fit my needs\". It\u0027s unlikely we will invest much into scenarios which are not directly produced by the SDK (since most people would not use it anyway).",
                                           "updatedAt":  "2021-03-22T11:37:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc478o1T",
                                           "createdAt":  "2022-01-05T14:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ltbyun",
                                           "body":  "still not asigned",
                                           "updatedAt":  "2022-01-05T14:50:31Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Specify runtime files location for self-contained apps",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3565",
        "createdAt":  "2019-04-26T12:53:19Z",
        "number":  3565,
        "author":  "tobyash86",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBz_47g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "talenfisher",
                                            "createdAt":  "2021-03-13T05:12:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "deanward81",
                                            "createdAt":  "2021-07-27T10:29:33Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-02-22T12:28:29Z",
        "body":  "## Expected  behavior\r\n\r\nSpecifying additional probing path should be possible by setting an environment variable (similarly --additional-deps can be specified by DOTNET_ADDITIONAL_DEPS variable).\r\n\r\nThis feature is required in cases when the goal is to load external dependency dynamically (e.g. some profiling software monitoring .NET Core application).\r\n\r\n## Actual behavior\r\n\r\nThe only way to set additional probing path can be done by:\r\n\r\n- specifying commandline argument for dotnet.exe (cannot be done e.g. for ASP.NET Core)\r\n- specifying the setting in runtime config json file (config file should be placed in the application directory, but in dependency injection scenarios app folder location may be unknown; also this approach would require json file generation depending on application specific data)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPnNaIg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-c1oi",
                                           "createdAt":  "2022-02-22T12:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tobyash86",
                                           "body":  "This FR has become **essential for .NET 6 as the issue #3368 is reproducible** on builds:\r\n* 6.0.101\r\n* 6.0.200\r\n\r\nAlternatively, assembly resolver should properly process additional deps .json file. Currently, IMO it performs poorly as the path to the assembly is inside the .json file, but resolver ignores it. Please see attached files:\r\n[deps_and_trace.zip](https://github.com/dotnet/runtime/files/8116555/deps_and_trace.zip)\r\n\r\n\r\n**Resolving additional dependency without specifying --additionalprobingpath is working fine with .NET 5.0, so this is a regression.**\r\n\r\nPlease see same logs from .NET 5 run:\r\n[corehost.trace.log.zip](https://github.com/dotnet/runtime/files/8116514/corehost.trace.log.zip)\r\n\r\n**Currently it is a major blocker for my business.** Please provide a solution or help me to find some viable workaround.",
                                           "updatedAt":  "2022-02-22T12:28:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Feature request: User should be able to specify --additionalprobingpath in form of environment variable.",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3569",
        "createdAt":  "2019-04-30T02:22:56Z",
        "number":  3569,
        "author":  "peterhuene",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7OhHw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KarateJB",
                                            "createdAt":  "2019-10-13T03:16:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamers99",
                                            "createdAt":  "2019-11-10T04:10:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CommanderTvis",
                                            "createdAt":  "2019-12-28T16:13:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2020-01-27T01:56:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Const-me",
                                            "createdAt":  "2020-03-01T22:11:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SteveWilkes",
                                            "createdAt":  "2020-03-27T12:09:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sipsorcery",
                                            "createdAt":  "2020-03-30T15:43:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m4k2k",
                                            "createdAt":  "2020-04-23T10:44:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KostaMadorsky",
                                            "createdAt":  "2020-04-23T16:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MatGhp",
                                            "createdAt":  "2020-05-11T17:38:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gusarov",
                                            "createdAt":  "2020-06-22T13:17:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qwertie",
                                            "createdAt":  "2020-07-19T00:47:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "riussi",
                                            "createdAt":  "2020-08-02T15:13:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "j0nimost",
                                            "createdAt":  "2021-01-22T07:45:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "miltonhowe",
                                            "createdAt":  "2021-02-16T16:02:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asasine",
                                            "createdAt":  "2021-09-14T18:38:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mszeqli",
                                            "createdAt":  "2021-09-28T03:05:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fman028",
                                            "createdAt":  "2021-12-17T00:24:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AgentFire",
                                            "createdAt":  "2022-05-05T16:26:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ashkansirous",
                                            "createdAt":  "2022-08-24T13:39:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kspeakman",
                                            "createdAt":  "2022-08-26T16:55:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mkArtak",
                                            "createdAt":  "2022-10-13T04:28:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wesley-bf",
                                            "createdAt":  "2023-01-09T15:23:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "echeg",
                                            "createdAt":  "2023-07-08T18:10:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xantilon",
                                            "createdAt":  "2024-09-23T08:37:27Z"
                                        }
                                    ],
                          "totalCount":  25
                      },
        "updatedAt":  "2023-04-24T10:58:52Z",
        "body":  "_From @sillyousu on Tuesday, 30 April 2019 02:19:35_\r\n\r\n## Steps to reproduce\r\n\r\ncreate a hello world project:\r\n```\r\nmkdir ClassLib\r\ncd ClassLib\r\ndotnet new classlib\r\ncd ..\r\nmkdir Main \r\ncd Main\r\ndotnet new console\r\ndotnet  add reference ..\\ClassLib\\ClassLib.csproj\r\ndotnet build\r\ndotnet .\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll\r\n```\r\n```\r\n.\r\n├── ClassLib\r\n│   ├── Class1.cs\r\n│   └── ClassLib.csproj\r\n└── Main\r\n    ├── Main.csproj\r\n    └── Program.cs\r\n```\r\n\r\n## Expected  behavior\r\nmeaningful error message\r\n\r\n## Actual behavior\r\n```\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\\u0027.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\supei\\xd\\sims\\fooo\\Main\u003e dotnet.exe --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n_Copied from original issue: dotnet/cli#11267_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMImHg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzgwNDQ3Mw==",
                                           "createdAt":  "2019-04-30T02:26:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKx0vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2025-03-20T20:19:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "peterhuene",
                                           "body":  "@sillyousu thank you for reporting this issue.\r\n\r\n@vitek-karas is there something we could do in the host to have a more helpful error message for users when someone accidentally execs a `netstandard` assembly?",
                                           "updatedAt":  "2019-04-30T02:26:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Nzg5NTk4OA==",
                                           "createdAt":  "2019-04-30T10:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMQiLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Lechus",
                                                                               "createdAt":  "2019-11-04T09:59:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jamers99",
                                                                               "createdAt":  "2019-11-10T04:11:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "miltonhowe",
                                                                               "createdAt":  "2021-02-16T16:04:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ashkansirous",
                                                                               "createdAt":  "2022-08-24T13:40:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jvu-parsec",
                                                                               "createdAt":  "2023-11-09T19:52:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This error case happens whenever we try to run any class library (not just `netstandard`).\r\n* The host doesn\u0027t find `.runtimeconfig.json` - so it thinks it should be a self-contained app\r\n* It doesn\u0027t find `hostpolicy` either - and fails\r\n\r\nI don\u0027t think there\u0027s any specific bit of information which the host could use to determine the exact scenario. What we could do is extend the error message with something like:  \r\n```\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\\u0027.\r\nPlease make sure that `C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll` is an application. It\u0027s not possible to directly execute class libraries and other types of dependent projects.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```",
                                           "updatedAt":  "2019-04-30T10:03:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTkzOTExNw==",
                                           "createdAt":  "2019-07-10T07:11:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc0NPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jamers99",
                                                                               "createdAt":  "2019-11-10T04:11:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MuiBienCarlota",
                                                                               "createdAt":  "2020-04-08T14:22:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artemious7",
                                                                               "createdAt":  "2020-05-01T13:43:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "haochangindependentsolutions",
                                                                               "createdAt":  "2020-08-12T02:31:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brenwebber",
                                                                               "createdAt":  "2020-08-12T15:09:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergeylebed",
                                                                               "createdAt":  "2020-09-02T12:29:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dotnetprofessional",
                                                                               "createdAt":  "2020-09-04T22:21:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omghb",
                                                                               "createdAt":  "2020-09-29T13:50:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aressler38",
                                                                               "createdAt":  "2020-10-01T20:01:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomgron",
                                                                               "createdAt":  "2020-10-02T20:15:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tjhleeds",
                                                                               "createdAt":  "2020-10-29T17:48:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cloudsere",
                                                                               "createdAt":  "2020-11-11T11:30:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vhnatyk",
                                                                               "createdAt":  "2020-12-31T13:17:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rag-altx",
                                                                               "createdAt":  "2021-01-03T20:27:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joshmouch",
                                                                               "createdAt":  "2021-01-19T19:55:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trevorchunestudy",
                                                                               "createdAt":  "2021-02-18T15:58:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "climateactiondarwin",
                                                                               "createdAt":  "2021-03-02T06:33:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabriellebourdages",
                                                                               "createdAt":  "2021-03-04T22:11:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Saibamen",
                                                                               "createdAt":  "2021-08-05T12:49:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mszeqli",
                                                                               "createdAt":  "2021-09-28T03:05:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fman028",
                                                                               "createdAt":  "2021-12-17T00:25:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "arjunkalarikkal",
                                                                               "createdAt":  "2022-03-10T11:58:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "c0shea",
                                                                               "createdAt":  "2022-08-15T21:13:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ashkansirous",
                                                                               "createdAt":  "2022-08-24T13:40:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sayitfast",
                                                                               "createdAt":  "2022-12-05T21:30:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VictorioBerra",
                                                                               "createdAt":  "2023-04-08T14:27:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrLeh",
                                                                               "createdAt":  "2025-08-01T14:48:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  27
                                                         },
                                           "author":  "borysl",
                                           "body":  "I\u0027ve reproduced this issue when was running xunit tests with the project reference",
                                           "updatedAt":  "2019-07-10T07:11:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTk5NjA3MQ==",
                                           "createdAt":  "2019-07-10T09:56:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "I met the error with dot net framework project",
                                           "updatedAt":  "2019-07-10T09:56:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMDI2ODE2OQ==",
                                           "createdAt":  "2019-07-10T23:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@borysl @WeihanLi - I\u0027m just trying to understand your comments better:\r\n* Is it that you\u0027ve ran into this by also trying to run a non-app project and are simply reporting the fact that the error message is confusing?\r\n* Is it that you were trying to do something you think should work and it failed?\r\n\r\nThe scenario described above is supposed to fail, this issues is about the fact that the failure message is rather confusing.",
                                           "updatedAt":  "2019-07-10T23:30:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMDI5MjQ3NQ==",
                                           "createdAt":  "2019-07-11T01:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "Thanks for your reply @vitek-karas , this is not exactly the same with my scene, I\u0027m running a web project with dotnet framework, so I opened a new issue here \u003chttps://github.com/dotnet/core-setup/issues/7149\u003e",
                                           "updatedAt":  "2019-07-11T01:41:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODk4NzYzNg==",
                                           "createdAt":  "2019-08-07T08:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDAtHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ysangkok",
                                                                               "createdAt":  "2019-09-26T06:01:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sgaliamov",
                                                                               "createdAt":  "2019-10-14T18:37:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergedevillez",
                                                                               "createdAt":  "2023-08-08T11:37:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "AbhishekHumagain",
                                           "body":  "Add this json to the **application.runtimeconfig.json** file.\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.2\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"2.0.0\"\r\n    }\r\n  }\r\n}",
                                           "updatedAt":  "2019-08-07T08:02:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODk4OTIzNQ==",
                                           "createdAt":  "2019-08-07T08:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwBFGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahaleiii",
                                                                               "createdAt":  "2019-09-05T22:12:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "I don\u0027t think that\u0027s bug or something need change, you can not run `dotnet`/`dotnet exec` with a class library, the class library had no entry point for an executable program, maybe more clearly error info",
                                           "updatedAt":  "2019-08-07T08:10:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTExMDQxMg==",
                                           "createdAt":  "2019-08-27T02:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joanna1010",
                                           "body":  "I am having the same issue when deploying my Function app in Azure.\r\n\r\nGoing into https://my-web-app.scm.azurewebsites.net\r\nand trying to do dotnet myapp.dll\r\nhere\u0027s the output\r\n\r\n![image](https://user-images.githubusercontent.com/5986383/63736593-b8796c80-c8d7-11e9-9dd8-ab3c5b16fe75.png)\r\n\r\nBy default, Function app boilerplate makes it as class library and you can deploy that dll straight into Azure, means it must be able to be executed properly right?",
                                           "updatedAt":  "2019-08-27T02:34:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTQ2NTIxNg==",
                                           "createdAt":  "2019-08-27T20:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwBFJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahaleiii",
                                                                               "createdAt":  "2019-09-05T22:12:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@joanna1010 As was already mentioned above in this issue, classlib projects are not meant to be executed via `dotnet project.dll`. Ignoring all other problems, what method should that actually invoke in the managed code? Applications have clearly defined entry point - the `Main`. But classlibs don\u0027t have anything like that.\r\n\r\nI do agree that it would be nice to provide a better error message, and we\u0027ll try to look into that.\r\n\r\nRegarding Azure Functions - I don\u0027t know how exactly should Azure Functions be executed, but I would be very surprised if it was `dotnet classlib.dll`. If you\u0027re having issues running your Azure Function project, please create an issue in the respective area. I don\u0027t know for sure, but https://github.com/Azure/Azure-Functions looks promising.",
                                           "updatedAt":  "2019-08-27T20:16:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODQxNTU4MA==",
                                           "createdAt":  "2019-10-31T14:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODW6O9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mthamil",
                                                                               "createdAt":  "2020-07-31T22:05:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tjhleeds",
                                                                               "createdAt":  "2020-10-29T17:49:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hugener",
                                                                               "createdAt":  "2020-10-29T20:02:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tshallenberger",
                                                                               "createdAt":  "2020-12-06T09:19:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pdmoore",
                                                                               "createdAt":  "2020-12-08T18:56:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "psxvoid",
                                                                               "createdAt":  "2021-01-09T07:11:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trevorchunestudy",
                                                                               "createdAt":  "2021-02-09T21:53:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabriellebourdages",
                                                                               "createdAt":  "2021-03-04T22:13:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fman028",
                                                                               "createdAt":  "2021-12-17T00:26:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Stadzior",
                                                                               "createdAt":  "2022-04-26T09:22:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rsilvanet",
                                                                               "createdAt":  "2022-08-16T12:31:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dfederm",
                                                                               "createdAt":  "2024-02-15T16:20:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "Smurf-IV",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e I\u0027ve reproduced this issue when was running xunit tests with the project reference\r\n\r\nSame here via a `azure-pipelines.yml` file. Needing to run VSTest@2 due to needing to use rosyln against a .netcore 2.2 test dll that also performs runtime compile tests against output files.\r\nHere is the yml extract:\r\n```yml\r\n- task: VSTest@2\r\n  inputs:\r\n    testSelector: \u0027testAssemblies\u0027\r\n    testAssemblyVer2: |\r\n             **\\*test*.dll\r\n             !**\\*TestAdapter.dll\r\n             !**\\obj\\**\r\n    runInParallel: true\r\n    codeCoverageEnabled: true\r\n    publishRunAttachments: true\r\n    configuration: $(buildConfiguration)\r\n#    runSettingsFile: \u0027Test.runsettings\u0027\r\n    testRunTitle: $(Agent.JobName)\r\n    timeoutInMinutes: 20\r\n    diagnosticsEnabled: true\r\n    collectDumpOn: \u0027always\u0027\r\n```\r\n\r\nI then get the following for each of the Test.dlls\r\n```\r\n\r\n##[error]Testhost process exited with error: A fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027d:\\a\\1\\s\\Tests\\CSharp.Tests\\bin\\Release\\netcoreapp2.2\\\u0027.\r\n##[error]Failed to run as a self-contained app. If this should be a framework-dependent app, add the d:\\a\\1\\s\\Tests\\CSharp.Tests\\bin\\Release\\netcoreapp2.2\\testhost.runtimeconfig.json file specifying the appropriate framework.\r\n##[error]. Please check the diagnostic logs for more information.\r\n```\r\nBut the files _still_ run against `Xunit`. (See the end)\r\n**BUT**, because of the errors, the `VSTest` action fails!\r\n\r\n\r\n```\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (64-bit .NET Core 4.6.28008.02)\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (64-bit .NET Core 4.6.28008.02)\r\n[xUnit.net 00:00:06.55]   Discovering: 2CSharp.Tests\r\n[xUnit.net 00:00:06.64]   Discovered:  CSharp.Tests\r\n[xUnit.net 00:00:06.65]   Starting:    CSharp.Tests\r\n[xUnit.net 00:00:07.27]   Finished:    CSharp.Tests\r\n\r\n\r\n  √ LaTeX2CSharp.Tests.CSharpTests.A100_SimplePower [1ms]\r\n  √ LaTeX2CSharp.Tests.CSharpTests.A050_SimpleRoot [1ms]\r\n  ! LaTeX2CSharp.Tests.CSharpTests.A140_NumberInVarName [1ms]\r\netc.\r\n```",
                                           "updatedAt":  "2019-10-31T15:03:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTcyMzk5Mw==",
                                           "createdAt":  "2019-11-05T08:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5_i8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mthamil",
                                                                               "createdAt":  "2020-07-31T22:05:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carios23",
                                                                               "createdAt":  "2021-04-09T03:43:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Breno709",
                                                                               "createdAt":  "2021-06-15T15:25:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mike-E-angelo",
                                                                               "createdAt":  "2022-01-13T11:02:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Stadzior",
                                                                               "createdAt":  "2022-04-26T09:23:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rahulbhadre",
                                                                               "createdAt":  "2023-04-17T11:11:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "rob83ert",
                                           "body":  "\u003e \u003e I\u0027ve reproduced this issue when was running xunit tests with the project reference\r\n\u003e \r\n\u003e Same here via a `azure-pipelines.yml` file. Needing to run VSTest@2 due to needing to use rosyln against a .netcore 2.2 test dll that also performs runtime compile tests against output files.\r\n\u003e Here is the yml extract:\r\n\u003e \r\n\u003e ```yaml\r\n\u003e - task: VSTest@2\r\n\u003e   inputs:\r\n\u003e     testSelector: \u0027testAssemblies\u0027\r\n\u003e     testAssemblyVer2: |\r\n\u003e              **\\*test*.dll\r\n\u003e              !**\\*TestAdapter.dll\r\n\u003e              !**\\obj\\**\r\n\u003e     runInParallel: true\r\n\u003e     codeCoverageEnabled: true\r\n\u003e     publishRunAttachments: true\r\n\u003e     configuration: $(buildConfiguration)\r\n\u003e #    runSettingsFile: \u0027Test.runsettings\u0027\r\n\u003e     testRunTitle: $(Agent.JobName)\r\n\u003e     timeoutInMinutes: 20\r\n\u003e     diagnosticsEnabled: true\r\n\u003e     collectDumpOn: \u0027always\u0027\r\n\u003e ```\r\n\u003e \r\n\u003e I then get the following for each of the Test.dlls\r\n\u003e \r\n\u003e ```\r\n\u003e \r\n\u003e ##[error]Testhost process exited with error: A fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027d:\\a\\1\\s\\Tests\\CSharp.Tests\\bin\\Release\\netcoreapp2.2\\\u0027.\r\n\u003e ##[error]Failed to run as a self-contained app. If this should be a framework-dependent app, add the d:\\a\\1\\s\\Tests\\CSharp.Tests\\bin\\Release\\netcoreapp2.2\\testhost.runtimeconfig.json file specifying the appropriate framework.\r\n\u003e ##[error]. Please check the diagnostic logs for more information.\r\n\u003e ```\r\n\u003e \r\n\u003e But the files _still_ run against `Xunit`. (See the end)\r\n\u003e **BUT**, because of the errors, the `VSTest` action fails!\r\n\u003e \r\n\u003e ```\r\n\u003e [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (64-bit .NET Core 4.6.28008.02)\r\n\u003e [xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (64-bit .NET Core 4.6.28008.02)\r\n\u003e [xUnit.net 00:00:06.55]   Discovering: 2CSharp.Tests\r\n\u003e [xUnit.net 00:00:06.64]   Discovered:  CSharp.Tests\r\n\u003e [xUnit.net 00:00:06.65]   Starting:    CSharp.Tests\r\n\u003e [xUnit.net 00:00:07.27]   Finished:    CSharp.Tests\r\n\u003e \r\n\u003e \r\n\u003e   √ LaTeX2CSharp.Tests.CSharpTests.A100_SimplePower [1ms]\r\n\u003e   √ LaTeX2CSharp.Tests.CSharpTests.A050_SimpleRoot [1ms]\r\n\u003e   ! LaTeX2CSharp.Tests.CSharpTests.A140_NumberInVarName [1ms]\r\n\u003e etc.\r\n\u003e ```\r\n\r\nI have the exact same problem...",
                                           "updatedAt":  "2019-11-05T08:50:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDE5OTg1NA==",
                                           "createdAt":  "2019-11-06T08:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQqA7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Leon99",
                                                                               "createdAt":  "2019-11-07T23:32:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jamers99",
                                                                               "createdAt":  "2019-11-10T04:19:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mertsch",
                                                                               "createdAt":  "2020-01-08T16:21:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chrfin",
                                                                               "createdAt":  "2020-01-16T08:23:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "junkbondtrader",
                                                                               "createdAt":  "2020-03-06T16:41:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dapoulin",
                                                                               "createdAt":  "2020-03-12T16:10:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "artemious7",
                                                                               "createdAt":  "2020-05-01T19:35:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artemious7",
                                                                               "createdAt":  "2020-05-01T19:35:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "artemious7",
                                                                               "createdAt":  "2020-05-01T19:36:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tomgron",
                                                                               "createdAt":  "2020-05-15T19:52:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmedasani",
                                                                               "createdAt":  "2020-09-25T15:40:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tjhleeds",
                                                                               "createdAt":  "2020-10-29T17:58:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoshLefebvre",
                                                                               "createdAt":  "2020-11-11T23:28:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rafno",
                                                                               "createdAt":  "2020-11-23T12:57:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liamehenderson",
                                                                               "createdAt":  "2020-12-07T15:52:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabriellebourdages",
                                                                               "createdAt":  "2021-03-05T20:33:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GothicSecret",
                                                                               "createdAt":  "2021-03-30T12:24:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarcoDeJesus",
                                                                               "createdAt":  "2021-03-31T16:26:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "laurawalker",
                                                                               "createdAt":  "2021-05-04T10:33:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "s-ayyar",
                                                                               "createdAt":  "2021-06-10T22:49:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iqb-dawn",
                                                                               "createdAt":  "2021-10-07T15:15:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fman028",
                                                                               "createdAt":  "2021-12-17T00:51:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "c0shea",
                                                                               "createdAt":  "2022-08-15T21:14:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jamesW360DotNet",
                                                                               "createdAt":  "2022-08-18T06:48:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jergron",
                                                                               "createdAt":  "2022-09-27T14:07:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yigolden",
                                                                               "createdAt":  "2022-11-18T01:49:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "luisferomero",
                                                                               "createdAt":  "2023-01-24T13:44:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ychikazawa",
                                                                               "createdAt":  "2023-03-01T09:43:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jvu-parsec",
                                                                               "createdAt":  "2023-11-09T21:27:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LouisGordon",
                                                                               "createdAt":  "2023-12-14T18:45:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BarriosAE",
                                                                               "createdAt":  "2023-12-19T01:57:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "michaeltg17",
                                                                               "createdAt":  "2023-12-27T20:44:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  32
                                                         },
                                           "author":  "Smurf-IV",
                                           "body":  "@robertborr @borysl\r\nI found the solution to \"My\" problem.\r\nNotice the following line contains `**\\*test*.dll`\r\nThis means that \"Any\" file that has _test_ in the filename and is a dll will be used.\r\n\r\nXUnit places a file called `testhost.dll` in the output directory, which matches the glob and is based on `.netcore 1.x` hence the need of the runner to attempt to use that as the runner policy for that _test.dll_\r\n\r\nI changed the filer to be `**\\*test.dll` (removed the last `*`) and now all is happy again; i.e. the first message is not displayed and th xunit runner still works as expected.",
                                           "updatedAt":  "2019-11-06T08:26:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MjEyNzMzMQ==",
                                           "createdAt":  "2019-12-05T13:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqqQ3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Mertsch",
                                                                               "createdAt":  "2020-01-08T16:20:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ja-son",
                                                                               "createdAt":  "2020-11-03T21:33:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "philipp-ranft",
                                                                               "createdAt":  "2021-01-07T10:48:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lloydkevin",
                                                                               "createdAt":  "2022-08-16T18:58:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Interface007",
                                           "body":  "I came to this page because of having the same message in my logs.\r\n\r\nTLDR: \r\nI was able to solve my problem by removing a project reference from one test-assembly to another. \r\n\r\nLong description with a hint about searching for causes of failed builds:\r\nHave the same issue with an in azure hosted build agent and with an on-prem build agent when running a VSTest task:\r\n```\r\n- task: VSTest@2\r\n  inputs:\r\n    testSelector: \u0027testAssemblies\u0027\r\n    testAssemblyVer2: |\r\n        **\\YYY.*.Tests.dll\r\n        !**\\obj\\**\r\n    searchFolder: \u0027$(System.DefaultWorkingDirectory)\u0027\r\n    diagnosticsEnabled: true\r\n    codeCoverageEnabled: true\r\n```\r\nAs you can see in the task definition, it specifies to only get files matching \"YYY.*.Tests.dll\", which only includes my test projects.\r\n\r\nUnfortunately, when clicking on the link of the commit hash of the \"run\", you see the changes of that particular commit - not the changes between ins run and the previous run. Between the last \"successful run\" and the first \"failing run\" I did several commits locally that I pushed to Azure DevOps in one single push operation.\r\n\r\nSo, the changes shown with the \"failing run\" may not include the cause of the failure - you have to find the changes between the two commits manually.",
                                           "updatedAt":  "2019-12-05T13:25:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTQ1Nzg1Mw==",
                                           "createdAt":  "2019-12-28T23:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCylreA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Alex-D-Green",
                                                                               "createdAt":  "2020-01-29T07:46:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tjhleeds",
                                                                               "createdAt":  "2020-10-29T17:52:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabriellebourdages",
                                                                               "createdAt":  "2021-03-05T20:35:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adr050",
                                                                               "createdAt":  "2023-01-13T07:43:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "MichaelSchreiber",
                                           "body":  "As mentioned in the preceding posts, in most cases the actual source of the issue seems to be that **\\*test*.dll is the default when creating a VSTest task. This includes testhost.dll and the test task tries to execute it as a test dll.\r\nOne way to reduce the frequency in wich this issue occurs is to add the exclusion !**\\*testhost.dll to the default for the VSTest task as it is already done with !**\\*TestAdapter.dll.\r\nConcerning a better error message, adding something like \"If this error occurs in a test task, excluding testhost.dll via !**\\*testhost.dll may solve the issue\" might help users to find a solution pretty fast.",
                                           "updatedAt":  "2019-12-28T23:04:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzAyMTUxMg==",
                                           "createdAt":  "2020-01-10T12:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GitSnafu",
                                           "body":  "I just got hit by this issue after upgrading my app to netcoreapp3.1 from netcoreapp3.0.\r\n\r\nIn my case the hostpolicy.dll simply doesn\u0027t exist in C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\3.1.0. In fact there\u0027s only a single file in that folder so it looks like the 3.1 runtime installation is incomplete/corrupted. Note that it still comes up as being installed when running `dotnet --list-runtimes`.\r\n\r\n```\r\nMicrosoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All] \r\nMicrosoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App] \r\nMicrosoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App] \r\nMicrosoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App] \r\nMicrosoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App] \r\nMicrosoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App] \r\n```\r\n",
                                           "updatedAt":  "2020-01-10T12:45:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzExMzk2OQ==",
                                           "createdAt":  "2020-01-10T16:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@GitSnafu Would be interesting to know how you installed it (and if the installation failed). The way dotnet checks for frameworks is simply by looking for a folder with a given name, it doesn\u0027t check the contents (it trusts the installer to do its job). So it\u0027s not surprising that it reports the framework as available even if there\u0027s nothing in it.\r\n\r\nWhat file is in that folder?\r\n\r\nYou should be able to fix this by reinstalling 3.1 I think.",
                                           "updatedAt":  "2020-01-10T16:48:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MzYwMDA5Mg==",
                                           "createdAt":  "2020-01-13T10:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GitSnafu",
                                           "body":  "@vitek-karas Yes, re-installing it most likely will fix the issue, which is why I thought it was worth mentioning it in case anyone else encounters this error for similar reasons.\r\n\r\nThe only file in that folder was mscordaccore_amd64_amd64_4.700.19.56402.dll.\r\n\r\nI believe it was installed using Ansible. All other servers I\u0027ve checked that would\u0027ve also had it installed in the same way look good, so it seems like there was just an issue with this particular instance.",
                                           "updatedAt":  "2020-01-13T10:37:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDU2NzI3NA==",
                                           "createdAt":  "2020-01-15T09:15:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "So far I was only able to determine that such file is used by dump debugging (!analyze in windbg). Would be interesting to know how exactly it got installed, as such action is effectively breaking for the .NET Core installation on the machine.",
                                           "updatedAt":  "2020-01-15T09:15:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NjIwMzg4Mg==",
                                           "createdAt":  "2020-01-20T10:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AudricCh",
                                           "body":  "Hi,\r\n\r\nI wanna know where we are about this.\r\n\r\nI\u0027m trying to use a dotnet command to generate a swagger file using SwashBuckle\r\n\u003e dotnet swagger tofile --output ./ ./MyApi/bin/Debug/net47/MyApi.dll swagger.json\r\n\r\nAnd I\u0027ve got the following message\r\n\u003e A fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027D:\\MyApi\\bin\\Debug\\net47\\\u0027.\r\n\u003e Failed to run as a self-contained app. If this should be a framework-dependent app, specify the appropriate framework in D:\\MyApp\\bin\\Debug\\net47\\MyApi.runtimeconfig.json.\r\n\r\nAnd the MyApi.runtimeconfig.json file looks great :\r\n`{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"net47\",\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  }\r\n}`\r\n\r\nIs it just about the NetCore / NetStandard compatibility ?\r\nThanks",
                                           "updatedAt":  "2020-01-20T10:15:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NjIwNTEwMg==",
                                           "createdAt":  "2020-01-20T10:18:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@AudricCh You\u0027re trying to run .NET Framework application on .NET Core - that is not going to work. The `net47` TFM is .NET Framework 4.7.\r\n\r\nThe interesting question in this case would be how did you build the app such that it produced `.runtimeconfig.json` even for `net47` TFM. That should not happen.\r\n\r\nCan you please file a new issue for that in https://github.com/dotnet/sdk repo? Thanks a lot!",
                                           "updatedAt":  "2020-01-20T10:18:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDg1MDg3NA==",
                                           "createdAt":  "2020-02-25T12:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB5RY-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mthamil",
                                                                               "createdAt":  "2020-07-31T22:08:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "popcatalin81",
                                                                               "createdAt":  "2021-09-07T09:17:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mikail-gultekin",
                                           "body":  "Hi,\r\n\r\nIn our team at my company, all the developers have this problem when we try to run tests on Visual Studio Test Explorer.  Here is the test compiler output message:\r\n```\r\nMicrosoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException: Testhost process exited with error: A fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Program Files\\dotnet\u0027.\r\n. Please check the diagnostic logs for more information.\r\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.ThrowExceptionOnConnectionFailure(Int32 connTimeout)\r\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(IEnumerable`1 sources, String runSettings)\r\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler)\r\n```\r\nProject settings (from .csproj):\r\n```\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.0\u003c/TargetFramework\u003e\r\n    \u003cStartupObject\u003eTestAutomation.Tests.Program\u003c/StartupObject\u003e\r\n    \u003cApplicationIcon /\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cPublishTrimmed\u003efalse\u003c/PublishTrimmed\u003e\r\n    \u003cPublishReadyToRun\u003efalse\u003c/PublishReadyToRun\u003e\r\n    \u003cRuntimeIdentifier\u003ewin10-x64\u003c/RuntimeIdentifier\u003e\r\n  \u003c/PropertyGroup\u003e\r\n```\r\nWe use x64 based PCs.\r\nProcessor  Architecture for AnyCPU Projects: x64\r\n\r\nAny ideas to solve our case?\r\n\r\nThanks.\r\n",
                                           "updatedAt":  "2020-02-25T12:50:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDg5MTIyOQ==",
                                           "createdAt":  "2020-02-25T14:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@mikail-gultekin just to make sure - please check that you have VS setup to run tests with x64 (I think it\u0027s a separate setting from how to run AnyCPU - it\u0027s under the Test menu)",
                                           "updatedAt":  "2020-02-25T14:24:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDg5MjIzOA==",
                                           "createdAt":  "2020-02-25T14:26:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@elinor-fung Another good candidate for improving error messages in the hosting space. In this case I would say there are in fact two scenarios we should try to differentiate:\r\n* Missing hostpolicy - and we\u0027re looking for it in the app\u0027s folder (probably missing `.runtimeconfig.json` or broken self-contained app)\r\n* Missing hostpolicy - and we\u0027re looking for it in the global location \"ProgramFiles/dotnet\". This needs investigation as to when exactly it happens and then come up with a reasonable error message for that case.",
                                           "updatedAt":  "2020-02-25T14:26:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDkxNDQ3MQ==",
                                           "createdAt":  "2020-02-25T15:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikail-gultekin",
                                           "body":  "\u003e @mikail-gultekin just to make sure - please check that you have VS setup to run tests with x64 (I think it\u0027s a separate setting from how to run AnyCPU - it\u0027s under the Test menu)\r\n\r\nyou mean **Processor Architecture for AnyCPU Projects** setting?If it is, I have already set it to x64 and still no luck. Thanks for quick reply btw.",
                                           "updatedAt":  "2020-02-25T15:10:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MTkyOTk1OA==",
                                           "createdAt":  "2020-02-27T11:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikail-gultekin",
                                           "body":  "If anyone interested; I could not wait until this problem to be solved so I tried VSCode. I run \u0026 debug all my test cases without any problem.",
                                           "updatedAt":  "2020-02-27T11:46:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDk5MTEwOQ==",
                                           "createdAt":  "2020-03-05T02:12:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA_fhuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "awcab",
                                                                               "createdAt":  "2020-03-11T19:33:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "peheje",
                                                                               "createdAt":  "2020-03-30T07:00:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Thanks for the repro @mikail-gultekin. Would you be able to check if you still hit this issue if you don\u0027t make the test project self-contained (should just be removing the `\u003cRuntimeIdentifier\u003e` property)?\r\n\r\nIt looks like this is an issue when the test project is set to build self-contained. I was able to repro the same error by  grabbing the [unit-testing-using-dotnet-test sample](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-using-dotnet-test) and adding `\u003cRuntimeIdentifier\u003ewin10-x64\u003c/RuntimeIdentifier\u003e`.\r\n\r\nI think this is because, when run through VS, `testhost` - which appears to be a built apphost - is used to discover tests and given the runtimeconfig and deps files of the test project through the `--runtimeconfig` and `--depsfile` command line arguments. The runtimeconfig of the test project indicates that it is self-contained (which dictates where the host looks for `hostpolicy`), but the `testhost` app is not, leading to the error. The desired host behaviour around this is not clear to me: #33207.\r\n\r\nThe .NET Core Test Explorer extension in VSCode runs through `dotnet test` directly to discover and then run, so it does not hit this.",
                                           "updatedAt":  "2020-03-05T02:12:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTgyMDUyNA==",
                                           "createdAt":  "2020-03-06T15:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB5RZpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "popcatalin81",
                                                                               "createdAt":  "2021-09-07T09:18:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "Tried this and I am able to trigger this with: \r\n\r\n```cs\r\n// file UnitTest1.cs\r\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\r\n\r\nnamespace UnitTestProject36\r\n{\r\n    [TestClass]\r\n    public class UnitTest1\r\n    {\r\n        [TestMethod]\r\n        public void TestMethod1()\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n```csproj\r\n\u003c!-- file UnitTestProject36.csproj --\u003e\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e    \r\n    \u003cIsPackable\u003efalse\u003c/IsPackable\u003e\r\n    \r\n     \u003c!-- need both to see the behavior --\u003e\r\n    \u003cRuntimeIdentifier\u003ewin10-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003c!-- does not fail before 16.4.0 --\u003e\r\n    \u003cPackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.4.0\" /\u003e   \r\n    \r\n    \u003cPackageReference Include=\"MSTest.TestAdapter\" Version=\"2.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"MSTest.TestFramework\" Version=\"2.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n Ultimately it boils down to this. The RED is the one that fails:\r\n\r\n![image](https://user-images.githubusercontent.com/5735905/76096132-d7af3000-5fc5-11ea-9bc4-b1563677178c.png)\r\n\r\nThe problem can be replicated also by running the test host by itself using the commands we see in logs and reducing the parameters to just depsfile and runtime config (don\u0027t get confused by the access denied error in the second case, that is test host running correctly):\r\n\r\n```powershell\r\nPS\u003e \u0026 \u0027~\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\u0027 --depsfile .\\UnitTestProject36.deps.json --runtimeconfig .\\UnitTestProject36.runtimeconfig.json\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Program Files\\dotnet\u0027.\r\n\r\n\r\nPS\u003e \u0026 \u0027~\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\u0027 --depsfile .\\UnitTestProject36.deps.json --runtimeconfig .\\good.runtimeconfig.json\r\nUnhandled exception. System.ComponentModel.Win32Exception (5): Access is denied.\r\n```\r\n\r\n@elinor-fung do you see anything that we could do to allow the test host to run?\r\n",
                                           "updatedAt":  "2020-03-06T15:30:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTg0Nzg4Nw==",
                                           "createdAt":  "2020-03-06T16:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "Here is how the test host searches for the hostpolicy.\r\nFirst line is where the failing test host searches for the hostpolicy, the rest of the lines is the working test host : \r\n\r\n![image](https://user-images.githubusercontent.com/5735905/76098014-f82cb980-5fc8-11ea-94c7-c5e018dc5ffe.png)\r\n\r\nThe testhost will fail to run with any of the runtimeconfigs when dotnet root is set to a path that does not have any dotnets: \r\n\r\n```\r\nPS\u003e \u0026 \u0027~\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\u0027 --depsfile .\\UnitTestProject36.deps.json --runtimeconfig .\\good.runtimeconfig.json\r\nA fatal error occurred, the required library hostfxr.dll could not be found.\r\nIf this is a self-contained application, that library should exist in [C:\\Users\\jajares\\.nuget\\packages\\microsoft.testplIf this is a framework-dependent application, install the runtime in the default location [C:\\Program Files\\dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location.\r\n\r\nPS\u003e \u0026 \u0027~\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\u0027 --depsfile .\\UnitTestProject36.deps.json --runtimeconfig .\\UnitTestProject36.runtimeconfig.json\r\nA fatal error occurred, the required library hostfxr.dll could not be found.\r\natform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\].\r\nIf this is a framework-dependent application, install the runtime in the default location [C:\\Program Files\\dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location.\r\n```\r\n\r\nRunning the `.\\UnitTestProject36.exe`  produces no error, but I can confirm that it executed, and I see it pick up the hostpolicy from the current folder. \r\n\r\nCopying the testhost.exe into the output folder will also allow it to run correctly. \r\n\r\nI was not able to find any combination of parameters and env variables that would allow me to run the testhost.exe from the nuget cache with the configs from the project without requiring the runtime to be available in a shared folder. \r\n\r\n--- \r\n\r\nThese are my logs: \r\n\r\n```\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\u003e $env:COREHOST_TRACE=1; $env:COREHOST_TRACE_VERBOSITY=3;        \r\n\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\u003e .\\testhost.exe\r\nTracing enabled\r\n--- Invoked apphost [version: 2.1.0, commit hash: caa7b7e2bad98e56a687fb5cbaf60825500800f7] main = {\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\testhost.exe\r\n}\r\nThe managed DLL bound to this executable is: \u0027testhost.dll\u0027\r\nResolved fxr [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\hostfxr.dll]...\r\nLoaded library from C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\hostfxr.dll\r\nInvoking fx resolver [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\hostfxr.dll] v2\r\nHost path: [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\testhost.exe]\r\nDotnet path: [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\]\r\nApp path: [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\testhost.dll]\r\nTracing enabled @ Fri Mar  6 16:20:27 2020 GMT\r\n--- Invoked hostfxr_main_startupinfo [commit hash: 916b5cba268e1e1e803243004f4276cf40b2dda8]\r\nDetecting mode... CoreCLR present in dotnet root [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\] and checking if [testhost.deps.json] file present=[0]\r\nUsing dotnet root path [C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\]\r\nLoaded library from C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\hostpolicy.dll\r\nTracing enabled @ Fri Mar  6 16:20:27 2020 GMT\r\n--- Invoked hostpolicy [commit hash: 916b5cba268e1e1e803243004f4276cf40b2dda8] [runtime.win-x64.Microsoft.NETCore.DotNetHostPolicy,3.1.2,runtimes/win-x64/native][x64] corehost_main = {\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\testhost.exe\r\n}\r\nDeps file:\r\nLoaded library from C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\coreclr.dll\r\nLaunch host: C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\testhost.exe, app: C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\testhost.dll, argc: 0, args:\r\nUnhandled exception. System.ComponentModel.Win32Exception (5): Access is denied.\r\n  ^^^^ access denied means success \r\n\r\n \r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\u003e \u0026 \"C:\\Users\\jajares\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\" --runtimeconfig \"C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.runtimeconfig.json\" --depsfile \"C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.deps.json\"\r\nTracing enabled\r\n--- Invoked apphost [version: 2.1.0, commit hash: caa7b7e2bad98e56a687fb5cbaf60825500800f7] main = {\r\nC:\\Users\\jajares\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\r\n--runtimeconfig\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.runtimeconfig.json\r\n--depsfile\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.deps.json\r\n}\r\nThe managed DLL bound to this executable is: \u0027testhost.dll\u0027\r\nUsing default installation location [C:\\Program Files\\dotnet] as runtime location.\r\nA fatal error occurred, the required library hostfxr.dll could not be found.\r\nIf this is a self-contained application, that library should exist in [C:\\Users\\jajares\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\].  If this is a framework-dependent application, install the runtime in the default location [C:\\Program Files\\dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location.\r\n\r\n\r\n\r\n-------  I set the DOTNET_ROOT but still no dice ----- \r\n\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\u003e $env:DOTNET_ROOT=\"C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\\"\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\u003e \u0026 \"C:\\Users\\jajares\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\" --runtimeconfig \"C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.runtimeconfig.json\" --depsfile \"C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.deps.json\"\r\nTracing enabled\r\n--- Invoked apphost [version: 2.1.0, commit hash: caa7b7e2bad98e56a687fb5cbaf60825500800f7] main = {\r\nC:\\Users\\jajares\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.exe\r\n--runtimeconfig\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.runtimeconfig.json\r\n--depsfile\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\UnitTestProject36.deps.json\r\n}\r\nThe managed DLL bound to this executable is: \u0027testhost.dll\u0027\r\nUsing environment variable DOTNET_ROOT=[C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\] as runtime location.\r\nA fatal error occurred, the required library hostfxr.dll could not be found.\r\nIf this is a self-contained application, that library should exist in [C:\\Users\\jajares\\.nuget\\packages\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\].  If this is a framework-dependent application, install the runtime in the default location [C:\\Program Files\\dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location.\r\nC:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\u003e gi C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\\hostfxr.dll\r\n\r\n\r\n    Directory: C:\\Projects\\temp\\UnitTestProject36\\UnitTestProject36\\bin\\Debug\\netcoreapp3.1\\win10-x64\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        17/01/2020    21:24         599424 hostfxr.dll\r\n\r\n```\r\n\r\n@elinor-fung  I am out of options here, it seems that what ever I try the host will look for hostfxr next to the executable, ignoring the DOTNET_ROOT. Is there a variable / param I am missing? ",
                                           "updatedAt":  "2020-03-06T16:35:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjAxNjAzOQ==",
                                           "createdAt":  "2020-03-07T00:10:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBffJpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nohwnd",
                                                                               "createdAt":  "2020-03-13T10:24:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trevorchunestudy",
                                                                               "createdAt":  "2021-02-09T22:06:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "The host will always first look for `hostfxr` next to the executable, then fallback to `DOTNET_ROOT`, followed by shared global installs.\r\n\r\nFor the `DOTNET_ROOT` environment variable, it is expected to point to the root directory with a [specific layout](https://github.com/dotnet/designs/blob/master/accepted/2020/install-locations.md#net-core-install-layout) - when that variable is set, the host will look for `hostfxr` under `%DOTNET_ROOT%\\host\\fxr\\\u003cversion\u003e`.\r\n\r\nI haven\u0027t been able to think of a way to configure having the `testhost.exe` be able to handle being given a self-contained config. Running the `testhost.dll` through `dotnet.exe` would work though - e.g. `dotnet exec --runtimeconfig \u003cpathToRuntimeConfigJson\u003e --depsfile \u003cpathToDepsJson\u003e \u003cnugetCache\u003e\\microsoft.testplatform.testhost\\16.4.0\\build\\netcoreapp2.1\\x64\\testhost.dll`",
                                           "updatedAt":  "2020-03-07T00:10:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjQyOTM2MQ==",
                                           "createdAt":  "2020-03-09T09:47:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "@elinor-fung one possible way to do this is to set the DOTNET_ROOT to the self-contained folder, and create a symlink to hostfxr from the self-contained folder that is in the correct relative path (host/fxr/version).  This will allow testhost.exe run even if it not next to the hostfxr. But that is definitely **not a production-ready solution**. \r\n\r\nI am patching the testhost targets to copy the .exe into the output folder, which allows the .exe to be picked up from the folder, before falling back to the .nuget location.",
                                           "updatedAt":  "2020-03-09T10:15:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjQzMDU5MQ==",
                                           "createdAt":  "2020-03-09T09:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA9kmsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nohwnd",
                                                                               "createdAt":  "2020-03-09T10:23:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Just want to make some things easier to read:\r\n* When there\u0027s no `runtimeconfig.json` or it doesn\u0027t contain `framework`/`frameworks` property then it represents a self-contained app. (This includes the case where there\u0027s `includedFrameworks` property - that one is only used for self-contained apps and is only used for dynamic loading of dependencies - which is typically not used at all by test projects).\r\n* Self-contained apps are expected to have the `hostfxr` (and `hostpolicy`) in the same folder as the app executable.\r\n\r\nI think we need to first figure out what is the story around self-contained and tests:\r\n* What are the scenarios where having a self-contained test is useful (I can sort of think about a few, but none feels very compelling to me, so I would like to understand if there are good ones here)\r\n* Do we want to support self-contained tests? We need to be explicit about this - currently we\u0027re not.\r\n  * If the answer is yes than we need to invest into it - given the experience described in this issue there are obviously gaps here. For example I don\u0027t think we treat test projects as \"executables\" always - I suspect that we treat them as classlibs for a large portion of the SDK. This can obviously create issues.\r\n  * If the answer is no then we should try to actively prevent it - with at least a warning and suggestion what to do.\r\n\r\nSimilarly I think we need to be explicit about supporting `OutputType=exe` within test projects. This does weird things:\r\n* It creates a `mytest.exe` in the output - which does nothing (it runs the auto-generated `Main` which is a no-op). Basically very confusing - if I get an `.exe` I should be able to run it. Or at the very least it should tell me \"this is not how you run this thing\".\r\n\r\nAlso worth looking into is interaction between running tests and publish properties like `PublishTrimmed` and similar. \r\n\r\nThere are specific issues which makes the experience worse:\r\n* Specifying a RID in the project file makes the result self-contained - this is a bad default. I think @richlander is trying to change this for .NET 5, but if and how is still largely undecided.\r\n\r\nOther random observations:\r\n* Using `dotnet test -r win-x64` has completely different effect from my expectations - the `-r` in this case means \"result directory\", not RID. Seems very confusing.\r\n",
                                           "updatedAt":  "2020-03-09T09:50:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjQ1MjE1NQ==",
                                           "createdAt":  "2020-03-09T10:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "\u003e Specifying a RID in the project file makes the result self-contained \r\n\r\nI will fix the copying of `testhost.exe` into the output. The targets file specifies to do this on Publish, and because the build now behaves like publish I think it is okay to do this. \r\n\r\n\u003e Do we want to support self-contained tests? We need to be explicit about this - currently we\u0027re not.\r\n\r\nI agree that this needs more discussion, and will discuss these points with our team. Thanks for the summary!\r\n\r\n",
                                           "updatedAt":  "2020-03-09T10:40:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODUxNzUyNA==",
                                           "createdAt":  "2020-03-13T02:26:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBDZoQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vitalybibikov",
                                                                               "createdAt":  "2020-04-27T11:10:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FreBon",
                                                                               "createdAt":  "2020-05-06T21:49:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "foggerty",
                                           "body":  "Hey all, I came across, and fixed (for me) the same error today when setting up a build in Azure.  I was playing around with the command-line test runner, wondering if it was an issue with different assemblies using different .NET versions (I\u0027ve had problems with that before, we have a couple of rather large solutions with multiple projects using different .NET versions), and noticed that one of the assemblies was appearing in the \\bin directory for one of the others.\r\n\r\nOnce this was fixed (i.e. move the \u0027shared\u0027 code up into a common assembly), everything started working.\r\n\r\nBefore:\r\n\r\nTestAssembly1 -\u003e reference TestCommon\r\nTestAssembly2 -\u003e reference TestCommon \u0026 TestAssembly1\r\n\r\nAfter:\r\n\r\nTestAssembly1 -\u003e reference TestCommon\r\nTestAssembly2 -\u003e reference TestCommon\r\n\r\nHope this helps someone else :-)\r\n",
                                           "updatedAt":  "2020-03-13T02:26:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTkxMjUzOQ==",
                                           "createdAt":  "2020-04-27T11:11:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlkA1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarcoDeJesus",
                                                                               "createdAt":  "2021-03-31T15:58:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitalybibikov",
                                           "body":  "I have this error when:\r\n\r\nTestProjectA -\u003e references TestProjectB\r\n\r\nSolution is:\r\n1. Eliminate the reference and place common dependencies in a Shared lib, as it is mentioned by @foggerty\r\n\r\nOr\r\n\r\n2.  Setup ignore filters properly, to exclude project TestProjectB from execution, when referenced by TestProjectA\r\n\r\ne.g.\r\n```\r\n**\\bin\\**\\*.IntegrationTests.dll\r\n!**\\obj\\**\r\n!**\\TestProjectA\\bin\\**\\TestProjectB.dll\r\n```\r\n",
                                           "updatedAt":  "2020-04-27T11:11:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDA5MjYxNg==",
                                           "createdAt":  "2020-05-05T14:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NaomiN",
                                           "body":  "So, what is the solution? I created a very simple console app, built it. I am able to run this exe from the obj\\Release\\netcoreapp3.1 folder on my local, but when I copy content of that folder to another computer, I\u0027m getting that error. I used all the defaults when creating my exe (used VS 2019)",
                                           "updatedAt":  "2020-05-05T14:34:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDEyMzgyMg==",
                                           "createdAt":  "2020-05-05T15:27:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@NaomiN You should not use the files in `obj` those are intermediate build assets, they might or might not work even locally. The working output should be in `bin\\Release\\netcoreapp3.1` folder. It should also work if you copy that folder to a different machine - given two assumptions:\r\n* You build on the same OS as you\u0027re going to run on (so for example x64 Windows -\u003e x64 Windows)\r\n* The target machine has .NET Core runtime installed on it (ideally the same version)",
                                           "updatedAt":  "2020-05-05T15:27:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDIyOTk0Nw==",
                                           "createdAt":  "2020-05-05T18:30:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NaomiN",
                                           "body":  "My local is Windows 10 x64, I am using Visual Studio 2019 and I\u0027ve been trying to copy to Windows Server 2012 (I think). I am not sure about everything installed on the server, I know it has 2017 installed, but I was unable to open that project in VS 2017 as it and I don\u0027t have admin rights on that server to install anything. ",
                                           "updatedAt":  "2020-05-05T18:30:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDIzMzQ3NA==",
                                           "createdAt":  "2020-05-05T18:37:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@NaomiN if the target machine doesn\u0027t have the necessary .NET Core runtime installed (and you can\u0027t install it yourself) you can use self-contained deployment. Once the app is ready publish it with\r\n```console\r\ndotnet publish -r win-x64 -c Release\r\n```\r\n\r\nThis will create a folder like `bin\\Release\\netcoreapp3.1\\win-x64\\publish` which should contain everything the app will need to run (including the .NET Core runtime). You will notice that the folder is quite large (should be more than 100 files and at least 50MB in size, probably more).\r\n\r\nIf you copy that folder to the target machine it should just work. Make sure that the runtime identifier you pass in to the `-r win-x64` matches the target machine. (So if the server is x86 it should be `win-x86` for example, but it can be linux/mac anything supported).\r\n\r\nPlease make sure that the target system is supported as well: https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1-supported-os.md",
                                           "updatedAt":  "2020-05-05T18:37:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTMwODkxNQ==",
                                           "createdAt":  "2020-05-07T15:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcWrng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Solaflex",
                                                                               "createdAt":  "2020-05-18T09:05:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "robsmitha",
                                                                               "createdAt":  "2020-07-29T22:01:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martin-marquardt",
                                                                               "createdAt":  "2025-07-29T16:01:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "nohwnd",
                                           "body":  "When you encounter this problem with vstest (mstest, xunit or nunit), please update your Microsoft.NET.Test.SDK to 16.6.1 where this problem was solved. https://github.com/microsoft/vstest/commit/3726dae401bd4ca1e8cbe16d869cab5e9d673ed6",
                                           "updatedAt":  "2020-05-07T15:00:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTM0NTM3MA==",
                                           "createdAt":  "2020-05-20T09:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBQtpng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nohwnd",
                                                                               "createdAt":  "2020-05-20T14:24:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omghb",
                                                                               "createdAt":  "2020-06-26T14:18:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattBolitho",
                                                                               "createdAt":  "2020-09-17T13:22:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "canpolat",
                                           "body":  "I had this same problem today and upgrading to Microsoft.NET.Test.SDK version 16.6.1 did not solve it. But some other comments in this thread helped me, so here is my story, hopefully it helps someone :)\r\n\r\nThe problem in my case was inheritance.\r\n\r\nI had a Shared XUnit test project that:\r\n- Tested some shared functionality that is in a Shared library\r\n- Provided two base test classes to be used by other test projects\r\n\r\nDue to the second point, all other test projects were referencing to this Shared test project and therefore the Azure Pipelines test runner was trying to run the Shared test project after each and every other test project. And, for some reason that was failing.\r\n\r\nI created a separate project for the two base test classes and removed the references to Shared test project. This solved the problem in my case (I also named the new project so that the filter does not pick it up).\r\n\r\nBTW: Everything worked fine when run locally on Visual Studio, but the tests failed when I ran them in the Azure Pipeline.",
                                           "updatedAt":  "2020-05-20T09:06:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDIxMTQ3Mg==",
                                           "createdAt":  "2020-06-26T14:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBffOeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattBolitho",
                                                                               "createdAt":  "2020-09-17T13:22:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dbsxdbsx",
                                                                               "createdAt":  "2020-11-02T08:44:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vhnatyk",
                                                                               "createdAt":  "2020-12-31T13:25:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "vhnatyk",
                                                                               "createdAt":  "2020-12-31T13:25:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quasarea",
                                                                               "createdAt":  "2021-01-12T12:18:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pbernier99",
                                                                               "createdAt":  "2021-01-27T14:23:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trevorchunestudy",
                                                                               "createdAt":  "2021-02-09T22:17:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "omghb",
                                           "body":  "I have the same issue as @canpolat . It started as soon one XUnit test project referenced another one. The issue occurs only in the Azure DevOps Pipeline. VS 2019 is able to run all tests.\r\n\r\nI can confirm: Upgrading to Microsoft.NET.Test.SDK version 16.6.1 did not solve it.\r\n\r\nAt the moment I use a very dirty workaround to overcome this error. Is there a better solution than removing the reference to another XUnit test project?",
                                           "updatedAt":  "2020-06-26T14:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tBNH",
                                           "createdAt":  "2021-07-21T14:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czimbortibor",
                                           "body":  "@vitek-karas @elinor-fung I have a slightly different setup but with the same error message outcome (altough extremely weird paths in it...): \r\n```\r\nCannot use file stream for [D:\\Windows\\system32\\[myapp].deps.json]: No such file or directory\r\n\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027D:\\Windows\\system32\\\u0027.\r\n\r\nFailed to run as a self-contained app.\r\n\r\n  - The application was run as a self-contained app because \u0027D:\\Windows\\system32\\[myapp].runtimeconfig.json\u0027 was not found.\r\n\r\n  - If this should be a framework-dependent app, add the \u0027D:\\Windows\\system32\\[myapp].runtimeconfig.json\u0027 file and specify the appropriate framework.\r\n```\r\n\r\n#### Background\r\n- a recently migrated ASP.NET core 2.1 app to 3.1. Running on Azure App service. Similar apps have been migrated in the same fashion, all without issue.\r\n- framework dependent, `dotnet --list-runtimes` produces everything from 2.1.26 to 5.0.7, as far as I can see they are installed correctly, with `hostpolicy.dll` in them.\r\n- InProcess hosting\r\n\r\n#### [myapp].runtimeconfig.json\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.1\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"3.1.0\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true,\r\n      \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization\": false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### [myapp].deps.json\r\n```\r\n{\r\n  \"runtimeTarget\": {\r\n    \"name\": \".NETCoreApp,Version=v3.1\",\r\n    \"signature\": \"\"\r\n  },\r\n  \"compilationOptions\": {\r\n    \"defines\": [\r\n      \"TRACE\",\r\n      \"RELEASE\",\r\n      \"NETCOREAPP\",\r\n      \"NETCOREAPP3_1\"\r\n    ],\r\n    \"languageVersion\": \"8.0\",\r\n    \"platform\": \"\",\r\n    \"allowUnsafe\": false,\r\n    \"warningsAsErrors\": false,\r\n    \"optimize\": true,\r\n    \"keyFile\": \"\",\r\n    \"emitEntryPoint\": true,\r\n    \"xmlDoc\": false,\r\n    \"debugType\": \"portable\"\r\n  },\r\n  \"targets\": {\r\n    \".NETCoreApp,Version=v3.1\": {\r\n    ...\r\n```\r\n#### [myapp].web.config\r\n```\r\n\u003cconfiguration\u003e\r\n    \u003csystem.webServer\u003e\r\n        \u003chandlers\u003e\r\n            \u003cadd name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /\u003e\r\n        \u003c/handlers\u003e\r\n        \u003caspNetCore processPath=\"dotnet\" arguments=\".\\[myapp].dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\"..\\..\\LogFiles\\stdout\" forwardWindowsAuthToken=\"false\" hostingModel=\"inprocess\"\u003e\r\n            \u003cenvironmentVariables /\u003e\r\n        \u003c/aspNetCore\u003e\r\n        ...\r\n```\r\n#### aspnetcore-debug\r\n```\r\n[aspnetcorev2.dll] Initializing logs for \u0027D:\\Program Files\\IIS\\Asp.Net Core Module\\V2\\aspnetcorev2.dll\u0027. Process Id: 39152.. File Version: 13.1.19331.0. Description: IIS ASP.NET Core Module V2. Commit: 62eee6e6d21c95668a9e9529dce6562cc6c9f3bf.\r\n[aspnetcorev2.dll] Resolving hostfxr parameters for application: \u0027dotnet\u0027 arguments: \u0027.\\[myapp].dll\u0027 path: \u0027D:\\home\\site\\wwwroot\\\u0027\r\n[aspnetcorev2.dll] Known dotnet.exe location: \u0027\u0027\r\n[aspnetcorev2.dll] Process path \u0027dotnet.exe\u0027 is dotnet, treating application as portable\r\n[aspnetcorev2.dll] Resolving absolute path to dotnet.exe from \u0027dotnet.exe\u0027\r\n[aspnetcorev2.dll] Invoking where.exe to find dotnet.exe\r\n[aspnetcorev2.dll] where.exe invocation returned: \u0027D:\\Program Files (x86)\\dotnet\\dotnet.exe\r\nD:\\Program Files\\dotnet\\dotnet.exe\r\n\u0027\r\n[aspnetcorev2.dll] Current process bitness type detected as isX64=1\r\n[aspnetcorev2.dll] Processing entry \u0027D:\\Program Files (x86)\\dotnet\\dotnet.exe\u0027\r\n[aspnetcorev2.dll] Binary type 0\r\n[aspnetcorev2.dll] Processing entry \u0027D:\\Program Files\\dotnet\\dotnet.exe\u0027\r\n[aspnetcorev2.dll] Binary type 6\r\n[aspnetcorev2.dll] Found dotnet.exe via where.exe invocation at \u0027D:\\Program Files\\dotnet\\dotnet.exe\u0027\r\n[aspnetcorev2.dll] Resolving absolute path to hostfxr.dll from \u0027D:\\Program Files\\dotnet\\dotnet.exe\u0027\r\n[aspnetcorev2.dll] hostfxr.dll located at \u0027D:\\Program Files\\dotnet\\host\\fxr\\5.0.7\\hostfxr.dll\u0027\r\n[aspnetcorev2.dll] Treating \u0027.\\[myapp.dll\u0027 as a single path argument\r\n[aspnetcorev2.dll] Parsed hostfxr options: dotnet location: \u0027D:\\Program Files\\dotnet\\dotnet.exe\u0027 hostfxr path: \u0027D:\\Program Files\\dotnet\\host\\fxr\\5.0.7\\hostfxr.dll\u0027 arguments:\r\n[aspnetcorev2.dll] Argument[0] = \u0027D:\\Program Files\\dotnet\\dotnet.exe\u0027\r\n[aspnetcorev2.dll] Argument[1] = \u0027.\\[myapp].dll\u0027\r\n[aspnetcorev2.dll] Loading hostfxr from location D:\\Program Files\\dotnet\\host\\fxr\\5.0.7\\hostfxr.dll\r\n[aspnetcorev2.dll] Event Log: \u0027Unable to locate application dependencies. Ensure that the versions of Microsoft.NetCore.App and Microsoft.AspNetCore.App targeted by the application are installed.\u0027 \r\nEnd Event Log Message.\r\n[aspnetcorev2.dll] Canceling standard stream pipe reader\r\n[aspnetcorev2.dll] Failed HRESULT returned: 0x8000ffff at F:\\workspace.1\\_work\\1\\s\\src\\Servers\\IIS\\AspNetCoreModuleV2\\AspNetCore\\HandlerResolver.cpp:78 \r\n[aspnetcorev2.dll] Event Log: \u0027Could not find \u0027aspnetcorev2_inprocess.dll\u0027. Exception message:\r\nCannot use file stream for [D:\\Windows\\system32\\[myapp].deps.json]: No such file or directory\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027D:\\Windows\\system32\\\u0027.\r\nFailed to run as a self-contained app.\r\n  - The application was run as a self-contained app because \u0027D:\\Windows\\system32\\[myapp].runtimeconfig.json\u0027 was not found.\r\n  - If this should be a framework-dependent app, add the \u0027D:\\Windows\\system32\\[myapp].runtimeconfig.json\u0027 file and specify the appropriate framework.\r\n\u0027 \r\nEnd Event Log Message.\r\n[aspnetcorev2.dll] Failed HRESULT returned: 0x8000ffff at F:\\workspace.1\\_work\\1\\s\\src\\Servers\\IIS\\AspNetCoreModuleV2\\AspNetCore\\HandlerResolver.cpp:171 \r\n[aspnetcorev2.dll] Failed HRESULT returned: 0x8000ffff at F:\\workspace.1\\_work\\1\\s\\src\\Servers\\IIS\\AspNetCoreModuleV2\\AspNetCore\\applicationinfo.cpp:181 \r\n[aspnetcorev2.dll] Failed HRESULT returned: 0x8000ffff at F:\\workspace.1\\_work\\1\\s\\src\\Servers\\IIS\\AspNetCoreModuleV2\\AspNetCore\\applicationinfo.cpp:96 \r\n[aspnetcorev2.dll] Event Log: \u0027Failed to start application \u0027/LM/W3SVC/621136035/ROOT\u0027, ErrorCode \u00270x8000ffff\u0027.\u0027 \r\nEnd Event Log Message.\r\n```\r\n\r\n\r\nChanging the deployment to a self-contained package seems to resolve the issue, but that\u0027s not really preferred.",
                                           "updatedAt":  "2021-07-21T14:04:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40vScb",
                                           "createdAt":  "2021-07-22T10:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@czimbortibor Does the output directory for your up accidentally contain `hostfxr.dll`, or `coreclr.dll` (and maybe even `hostpolicy.dll`)? The muxer can run in a wierd backcompat mode if it finds that some of the runtime dlls are located next to the app (and it\u0027s not a self-contained package).",
                                           "updatedAt":  "2021-07-22T10:32:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40vUUo",
                                           "createdAt":  "2021-07-22T10:47:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czimbortibor",
                                           "body":  "@vitek-karas Does not contain any of those \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/21295949/126627698-53022018-d28c-4e0e-9f80-a1b13b7afcd5.png)\r\n",
                                           "updatedAt":  "2021-07-22T10:47:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40vVUN",
                                           "createdAt":  "2021-07-22T10:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czimbortibor",
                                           "body":  "@vitek-karas And unfortunately running the app via CMD seem to be a hanged up command, no stdoutput or event log\r\n``` dotnet .\\SRM.dll ```",
                                           "updatedAt":  "2021-07-22T10:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40vYoi",
                                           "createdAt":  "2021-07-22T11:20:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I must admit that I don\u0027t know if it should be possible to run the \"to be hosted\" service directly. But that should not be the problem (if you want to validate that it at least started you can try to set `COREHOST_TRACE=1` and `COREHOST_TRACEFILE=host.txt` and run it, the `host.txt` should contain lot of debug info, but if it failed you should the errors in it as well.).\r\n\r\nI don\u0027t know if it\u0027s possible, but if one can modify the env. variable when running inside the service - then setting the above will definitely help. The debug trace should have enough information in it to answer what\u0027s going on.",
                                           "updatedAt":  "2021-07-22T11:20:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40vy0Z",
                                           "createdAt":  "2021-07-22T14:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czimbortibor",
                                           "body":  "The dependency loading logs are a very useful thing to know about @vitek-karas! Unfortunately the file doesn\u0027t even get created for the problematic app. Neither locally nor on the app service. It is though created with the other similar apps I\u0027ve mentioned originally and I could follow nicely how the dependencies got loaded.\r\nSomething seems off then in the project. Going to investigate, revert the migration, etc..\r\nAny other tips are most welcomed",
                                           "updatedAt":  "2021-07-22T14:10:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wRIT",
                                           "createdAt":  "2021-07-22T17:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@jkotalik may know some tricks how to get more detailed logs from ASP.NET\u0027s side of things (the hosting in IIS).",
                                           "updatedAt":  "2021-07-22T17:00:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wiYe",
                                           "createdAt":  "2021-07-22T18:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czimbortibor",
                                           "body":  "@vitek-karas It\u0027s incredible. Ignore my previous comment about the dependency loading log file not being created, not sure what was I hallucinating. It\u0027s created now:\r\n```\r\nTracing enabled @ Thu Jul 22 17:25:30 2021 GMT\r\n--- Invoked hostfxr_get_native_search_directories [commit hash: 556582d964cc21b82a88d7154e915076f6f9008e]\r\nAttempting to use argv[0] as path [D:\\Program Files\\dotnet\\dotnet.exe]\r\nHost path: [D:\\Program Files\\dotnet\\dotnet.exe]\r\nDotnet path: [D:\\Program Files\\dotnet\\]\r\nApp path: [D:\\Program Files\\dotnet\\dotnet.dll]\r\nChecking if CoreCLR path exists=[D:\\Program Files\\dotnet\\coreclr.dll]\r\n--- Executing in muxer mode...\r\nUsing the provided arguments to determine the application to execute.\r\nUsing dotnet root path [D:\\Program Files\\dotnet\\]\r\nApp runtimeconfig.json from [D:\\Windows\\system32\\SRM.dll]\r\nRuntime config is cfg=D:\\Windows\\system32\\SRM.runtimeconfig.json dev=D:\\Windows\\system32\\SRM.runtimeconfig.dev.json\r\nAttempting to read runtime config: D:\\Windows\\system32\\SRM.runtimeconfig.json\r\nAttempting to read dev runtime config: D:\\Windows\\system32\\SRM.runtimeconfig.dev.json\r\nRuntime config [D:\\Windows\\system32\\SRM.runtimeconfig.json] is valid=[1]\r\nExecuting as a self-contained app as per config file [D:\\Windows\\system32\\SRM.runtimeconfig.json]\r\n--- Resolving hostpolicy.dll version from deps json [D:\\Windows\\system32\\SRM.deps.json]\r\nCannot use file stream for [D:\\Windows\\system32\\SRM.deps.json]: No such file or directory\r\nThe expected hostpolicy.dll directory is [D:\\Windows\\system32\\]\r\nThe hostpolicy.dll was not found in [D:\\Windows\\system32\\]\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027D:\\Windows\\system32\\\u0027.\r\nFailed to run as a self-contained app.\r\n  - The application was run as a self-contained app because \u0027D:\\Windows\\system32\\SRM.runtimeconfig.json\u0027 was not found.\r\n  - If this should be a framework-dependent app, add the \u0027D:\\Windows\\system32\\SRM.runtimeconfig.json\u0027 file and specify the appropriate framework.\r\n```\r\n\r\nUpon specifying the full path to the `SRM.dll` in the webconfig it is working 🤯 Or renaming the project executable whilst not touching the webconfig it is also working!\r\n```\r\n\u003caspNetCore processPath=\"dotnet\" arguments=\".\\NOT_S_R_M.dll\" \r\n         stdoutLogEnabled=\"false\" stdoutLogFile=\"..\\..\\LogFiles\\stdout\" forwardWindowsAuthToken=\"false\" \r\n         hostingModel=\"inprocess\"\u003e\r\n\u003c/aspNetCore\u003e\r\n```\r\n\r\nWhat do you think is happening here?",
                                           "updatedAt":  "2021-07-22T18:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40woT_",
                                           "createdAt":  "2021-07-22T19:07:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7Zovw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adityamandaleeka",
                                                                               "createdAt":  "2021-07-23T01:31:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timpr",
                                                                               "createdAt":  "2021-09-22T19:21:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "My guess is that:\r\n* The app path is `.\\srm.dll` and because the process starts with current directory in `D:\\Windows\\system32` it gets resolved as `D:\\Windows\\system32\\srm.dll`.\r\n* `D:\\Windows\\system32\\app.dll` exists - it\u0027s part of Windows (it\u0027s a native dll). But the host doesn\u0027t look into the file, the fact that it exists is enough to \"try to run it\".\r\n* But no other .NET related files are there, so the host is effectively confused and for historical reasons treats the app as self-contained - and fails to find `hostpolicy.dll` in it. (Note that it thinks the application directory is `D:\\Windows\\system32`).\r\n\r\nIf you rename your app to any name which cannot be found in System32 I would expect the process to fail, unless there\u0027s some other magic which tries it multiple times with different \"current directory\".\r\n\r\nI think the root issue here is that the hosting should not run with current directory set to System32. There should be a well defined, application dependent directory which is used as the current directory. Or alternatively it should not allow relative paths in the configuration - as those can be easily misinterpreted.",
                                           "updatedAt":  "2021-07-22T19:07:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40x7_u",
                                           "createdAt":  "2021-07-23T09:11:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czimbortibor",
                                           "body":  "@vitek-karas I followed your guesses and would like to point out a few things:\r\n\r\n- If I followed the conversation on this issue (https://github.com/dotnet/aspnetcore/issues/4206) correctly and the subsequent fix for it (https://github.com/dotnet/aspnetcore/pull/6150) then they state that the current directory for the application should match the expectation when setting up the host for a 3.1 site as per the [recommended ways](https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-5.0\u0026tabs=visual-studio#configuration), like\r\n```\r\nvar host = new HostBuilder()\r\n                .UseContentRoot(Directory.GetCurrentDirectory())\r\n                .ConfigureWebHost(webBuilder =\u003e ...\r\n```\r\nSo for me the `D:\\home\\site\\wwwroot\\` should have been correctly determined with a webconfig of ``` \u003caspNetCore processPath=\"dotnet\" arguments=\".\\SRM.dll\" ... hostingModel=\"inprocess\"```. \r\nSee an excerpt from an additional dependency loading log for a similar app with the exact same configuration (code and webconfig):\r\n```\r\nAttempting to use argv[0] as path [D:\\Program Files\\dotnet\\dotnet.exe]\r\nHost path: [D:\\Program Files\\dotnet\\dotnet.exe]\r\nDotnet path: [D:\\Program Files\\dotnet\\]\r\nApp path: [D:\\Program Files\\dotnet\\dotnet.dll]\r\nChecking if CoreCLR path exists=[D:\\Program Files\\dotnet\\coreclr.dll]\r\n--- Executing in muxer mode...\r\nUsing the provided arguments to determine the application to execute.\r\nUsing dotnet root path [D:\\Program Files\\dotnet\\]\r\nApp runtimeconfig.json from [D:\\home\\site\\wwwroot\\BVO.dll]\r\nRuntime config is cfg=D:\\home\\site\\wwwroot\\BVO.runtimeconfig.json dev=D:\\home\\site\\wwwroot\\BVO.runtimeconfig.dev.json\r\nAttempting to read runtime config: D:\\home\\site\\wwwroot\\BVO.runtimeconfig.json\r\nAttempting to read dev runtime config: D:\\home\\site\\wwwroot\\BVO.runtimeconfig.dev.json\r\nRuntime config [D:\\home\\site\\wwwroot\\BVO.runtimeconfig.json] is valid=[1]\r\n...\r\n```\r\n\r\n- Indeed the `D:\\Windows\\system32\\srm.dll` exists on the app service\r\n- Upon renaming the app and referencing it still with a relative path (and same code setup for the `HostBuilder`) it does not fail and I consider that as expected. Example of course is given with the previous dependency log (for a `BVO.dll` app)\r\n\r\n@jkotalik Do you think I might have missed something here? 👀 \r\n\r\n\r\nAll in all thank you for lighting up the way to see this potential mixup with the folders and assemblies. Quite probably a rename of the app will follow in any case.",
                                           "updatedAt":  "2021-07-23T09:13:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Fyt4",
                                           "createdAt":  "2021-08-27T21:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "turric4n",
                                           "body":  "I have same error here. I cannot run any dotnet app without runtimeconfig.json file. \r\n\r\nThe expected hostpolicy.dll directory is [C:\\Program Files\\dotnet]",
                                           "updatedAt":  "2021-08-27T21:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42F4Qo",
                                           "createdAt":  "2021-08-27T22:38:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e  I cannot run any dotnet app without runtimeconfig.json file.\r\n\r\nAll .NET applications must have a `.runtimeconfig.json` file. Most of them will have it as separate file next to the main app binary. In case of a single-file app, the file is embedded in the executable.",
                                           "updatedAt":  "2021-08-27T22:38:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zZux",
                                           "createdAt":  "2021-09-14T19:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "asasine",
                                           "body":  "I get this issue when publishing a framework-dependent, single-file executable that\u0027s restored, built, and published in separate steps.\r\n\r\nCommands used to reproduce on Linux:\r\n```bash\r\nadam@ADAM-DEV:~/src$ mkdir DotnetRuntime3569Repro\r\nadam@ADAM-DEV:~/src$ cd DotnetRuntime3569Repro/\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ dotnet new console --framework net5.0 -n MyExe -o .\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning \u0027dotnet restore\u0027 on ./MyExe.csproj...\r\n  Determining projects to restore...\r\n  Restored /home/adam/src/DotnetRuntime3569Repro/MyExe.csproj (in 85 ms).\r\nRestore succeeded.\r\n\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ dotnet restore MyExe.csproj --runtime linux-x64\r\n  Determining projects to restore...\r\n  Restored /home/adam/src/DotnetRuntime3569Repro/MyExe.csproj (in 107 ms).\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ dotnet build MyExe.csproj --runtime linux-x64 --no-restore\r\nMicrosoft (R) Build Engine version 16.10.2+857e5a733 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  MyExe -\u003e /home/adam/src/DotnetRuntime3569Repro/bin/Debug/net5.0/linux-x64/MyExe.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.32\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ dotnet publish MyExe.csproj --runtime linux-x64 --no-restore --no-build --self-contained false /p:PublishSingleFile=true\r\nMicrosoft (R) Build Engine version 16.10.2+857e5a733 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  MyExe -\u003e /home/adam/src/DotnetRuntime3569Repro/bin/Debug/net5.0/linux-x64/publish/\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ ./bin/Debug/net5.0/linux-x64/publish/MyExe\r\nA fatal error was encountered. The library \u0027libhostpolicy.so\u0027 required to execute the application was not found in \u0027/usr/share/dotnet\u0027.\r\nFailed to run as a self-contained app.\r\n  - The application was run as a self-contained app because \u0027/home/adam/src/DotnetRuntime3569Repro/bin/Debug/net5.0/linux-x64/publish/MyExe.runtimeconfig.json\u0027 was not found.\r\n  - If this should be a framework-dependent app, add the \u0027/home/adam/src/DotnetRuntime3569Repro/bin/Debug/net5.0/linux-x64/publish/MyExe.runtimeconfig.json\u0027 file and specify the appropriate framework.\r\n```\r\n\r\nIt does not reproduce when calling publish directly, only when publish is called with `--no-restore --no-build` after previously restoring and building.\r\n```bash\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ rm -rf bin obj\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ dotnet publish MyExe.csproj --runtime linux-x64 --self-contained false /p:Pu\r\nblishSingleFile=true\r\nMicrosoft (R) Build Engine version 16.10.2+857e5a733 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored /home/adam/src/DotnetRuntime3569Repro/MyExe.csproj (in 108 ms).\r\n  MyExe -\u003e /home/adam/src/DotnetRuntime3569Repro/bin/Debug/net5.0/linux-x64/MyExe.dll\r\n  MyExe -\u003e /home/adam/src/DotnetRuntime3569Repro/bin/Debug/net5.0/linux-x64/publish/\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ ./bin/Debug/net5.0/linux-x64/publish/MyExe\r\nHello World!\r\n```\r\n\r\nThe error is identical minus the library name and path (`hostpolicy.dll` in `C:\\Program Files\\dotnet` vs `libhostpolicy.so` in `/usr/share/dotnet`). When building on Linux for win-x64 then copying the resulting MyExe.exe to a Windows machine, the error, library name, and path are identical.\r\n\r\n---\r\n\r\n.NET info (Linux)\r\n```bash\r\nadam@ADAM-DEV:~/src/DotnetRuntime3569Repro$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.302\r\n Commit:    c005824e35\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/5.0.302/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.8\r\n  Commit:  35964c9215\r\n\r\n.NET SDKs installed:\r\n  3.1.412 [/usr/share/dotnet/sdk]\r\n  5.0.302 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.18 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n \r\n.NET info (Windows)\r\n```powershell\r\nPS C:\\Users\\adsasine\\src\\DotnetRuntime3569Repro\u003e dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.400\r\n Commit:    d61950f9bf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.400\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.9\r\n  Commit:  208e377a53\r\n\r\n.NET SDKs installed:\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```",
                                           "updatedAt":  "2021-09-14T19:24:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zgR8",
                                           "createdAt":  "2021-09-14T20:00:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCM6afg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "campersau",
                                                                               "createdAt":  "2022-02-03T12:53:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@asasine This is a known limitation of publish currently. In short all three `restore`, `build` and `publish` need to be done with the same properties, otherwise it\u0027s not guaranteed to work (using `--no-restore` and `--no-build` that is).\r\n\r\nIn this case it\u0027s exaggerated by the unfortunate behavior that specifying just `--runtime linux-x64` automatically implies `--self-contained true`. So in your sample the build is done as self-contained, while the publish is then done as framework-dependent - and things breaks.\r\n\r\nI would recommend to not use `--no-build` (and in some cases also `--no-restore`) as it tends to break publish in \"weird\" ways. If you set everything in the project file and only run `dotnet build`, `dotnet publish --no-build` - that should work, but adding more to the command line can cause weird behavior.",
                                           "updatedAt":  "2021-09-14T20:00:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc422nLC",
                                           "createdAt":  "2021-09-15T18:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "asasine",
                                           "body":  "Thanks for quick response! We have a requirement to separate restore from build/publish. With your suggestion, I got this to work by explicitly listing the runtime, SelfContained, and PublishSingleFile properties when restoring, building, and publishing:\r\n\r\n```bash\r\nrm -rf bin obj\r\ndotnet restore MyExe.csproj --runtime linux-x64\r\ndotnet build MyExe.csproj --no-restore --runtime linux-x64 -p:SelfContained=false\r\ndotnet publish MyExe.csproj --no-restore --no-build --runtime linux-x64 -p:SelfContained=false -p:PublishSingleFile=true\r\n./bin/Debug/net5.0/linux-x64/publish/MyExe\r\n```\r\n\r\nSetting the properties in the project file didn\u0027t work for us due to some confounding errors from the SDK. Adding `\u003cPublishSingleFile\u003eTrue\u003c/PublishSingleFile\u003e` to the project file wasn\u0027t an option without specifying a runtime when building (error NETSDK1097) but specifying a runtime wasn\u0027t an option when building against a solution file (error NETSDK113 from `dotnet build MySolution.sln --runtime linux-x64`)",
                                           "updatedAt":  "2021-09-15T18:42:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc424w7B",
                                           "createdAt":  "2021-09-16T12:16:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I understand the need to do restore separately from the rest. In general I would recommend to specify the same input to restore as for the rest of the commands if possible. But it\u0027s true that the `restore` typically doesn\u0027t need to know as many details. On the other hand `build` and `publish` need to be almost identical, otherwise the behavior is going to be weird.\r\n\r\nYou can combine project + command line settings. So for example you can specify `\u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e` in the project file and then pass in `--runtime linux-x64` on the command line. (But you need to specify the RID one way or another).\r\n\r\nI must admit I don\u0027t know about NETSDK1134 - it seems weird since publish on solution works with RID on the command line. Might be wort filing an issue on the dotnet/sdk repo.",
                                           "updatedAt":  "2021-09-16T12:16:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc429Hac",
                                           "createdAt":  "2021-09-17T18:16:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi All,\r\n\r\nI am also getting the same Issue, while trying to run test cases from Azure Pipeline.\r\n\r\n##[error]Testhost process exited with error: A fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027F:\\_agent\\_work\\_temp\\dotnet\u0027.\r\n##[error]. Please check the diagnostic logs for more information.\r\n\r\nBelow on is my csprojfile setting.\r\n\u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n    \u003cGenerateAssemblyConfigurationAttribute\u003efalse\u003c/GenerateAssemblyConfigurationAttribute\u003e\r\n    \u003cGenerateAssemblyCompanyAttribute\u003efalse\u003c/GenerateAssemblyCompanyAttribute\u003e\r\n    \u003cGenerateAssemblyProductAttribute\u003efalse\u003c/GenerateAssemblyProductAttribute\u003e\r\n    \u003cStyleCopTreatErrorsAsWarnings\u003efalse\u003c/StyleCopTreatErrorsAsWarnings\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\nAny help will be much apricated ?\r\n",
                                           "updatedAt":  "2021-09-17T18:19:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46zCf1",
                                           "createdAt":  "2021-12-06T05:45:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alokraj68",
                                           "body":  "Having the same issue after upgrading my project from .net core 2.0 to 3.1 for projects and tests.\r\n\r\ntried upgrading Microsoft.NET.Test.SDK to 17.0.0 but had no luck with it. \r\nThe test is failing in only the Azure pipeline. not able to replicate the issue in VS 2019.",
                                           "updatedAt":  "2021-12-06T05:45:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48UrZD",
                                           "createdAt":  "2022-01-13T11:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mike-E-angelo",
                                           "body":  "+1 with running into this issue with Azure Pipeline.  My `testAssemblyVer2` is `**\\*.testing.dll` with no success.",
                                           "updatedAt":  "2022-01-13T11:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Crxy8",
                                           "createdAt":  "2022-05-05T16:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AgentFire",
                                           "body":  "For me it was missing the `Microsoft.NET.Test.Sdk` nuget reference. -_-\r\n",
                                           "updatedAt":  "2022-05-05T16:27:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CsZ2r",
                                           "createdAt":  "2022-05-05T18:53:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Can you share the steps you are using? That would help.",
                                           "updatedAt":  "2022-05-05T18:53:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IElh9",
                                           "createdAt":  "2022-08-09T09:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KepplerSystems",
                                           "body":  "We run into the same problem. On Visual Studio 2022 test is working, in azure pipeline is failing with:\r\n\r\n##[error]Testhost process exited with error: A fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\hostedtoolcache\\windows\\dotnet\u0027.\r\n\r\nDoes anyone have any idea?",
                                           "updatedAt":  "2022-08-09T09:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IEpKa",
                                           "createdAt":  "2022-08-09T10:04:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KepplerSystems",
                                           "body":  "Finally found a solution for us.\r\nWe found out, that VSTest searches for all **test** files. So VSTest tries to open MSTest.TestApdater and similar files. This causes the \u0027hostpolicy.dll\u0027 error for us.\r\nAfter setting the path to the Test.dll explicitly, the test runs working.\r\n\r\nI hope, this is helpful for some of you.\r\n\r\nSources that helped us to investigate:\r\nhttps://developercommunity.visualstudio.com/t/the-library-hostpolicydll-required-to-execute-the/1047863",
                                           "updatedAt":  "2022-08-09T10:04:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IFX2z",
                                           "createdAt":  "2022-08-09T13:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "turric4n",
                                           "body":  "\u003e Finally found a solution for us. We found out, that VSTest searches for all **test** files. So VSTest tries to open MSTest.TestApdater and similar files. This causes the \u0027hostpolicy.dll\u0027 error for us. After setting the path to the Test.dll explicitly, the test runs working.\r\n\u003e \r\n\u003e I hope, this is helpful for some of you.\r\n\u003e \r\n\u003e Sources that helped us to investigate: https://developercommunity.visualstudio.com/t/the-library-hostpolicydll-required-to-execute-the/1047863\r\n\r\nWell I had the same error and I realized that Dotnet and Visual Studio combination don\u0027t work fine inside symlink paths.  Take a look if you are opening a solution that is inside a symlink.",
                                           "updatedAt":  "2022-08-09T13:15:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PZkB9",
                                           "createdAt":  "2022-11-30T12:55:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dnperfors",
                                           "body":  "In our company we use Citrix VDI where you have an application image and a user personalization layer (UPL).\r\nSometimes it happens that when the application image is update, the UPL contains empty runtime and SDK directories of versions that were installed in a previous application image, but are removed from the new application image.\r\nThis results in exactly this error message when using a tool that is build against a runtime that was removed.",
                                           "updatedAt":  "2022-11-30T12:55:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PZkvC",
                                           "createdAt":  "2022-11-30T12:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "turric4n",
                                           "body":  "\u003e \r\n\r\nTry to avoid the usage of Symlinks. Because I found some VS/dotnet execution problems behaviour. ",
                                           "updatedAt":  "2022-11-30T12:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZdxvF",
                                           "createdAt":  "2023-04-08T21:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzMMdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xantilon",
                                                                               "createdAt":  "2024-09-23T08:54:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VictorioBerra",
                                           "body":  "I just want to throw my hat into the ring with a simple use-case, and simple reproduction here (uses .NET 7) https://github.com/VictorioBerra/netcore-console-test-exe\r\n\r\n1. Imagine you want to build a console app (super common use-case) `dotnet new console --name consoleApp`\r\n2. You then want to deploy it, self-contained (super common use-case). Most people will add `\u003cRuntimeIdentifier\u003e...` to their csproj and call it a day.\r\n3. You then want to TEST the console app (e2e/integration) (super common use-case). So you do `dotnet new xunit --name tests` followed by `dotnet add tests/tests.csproj reference consoleApp/consoleApp.csproj`\r\n\r\nSo far so good, now that you reference consoleApp, you can just launch the exe right?\r\n\r\n```csharp\r\npublic class UnitTest1\r\n{\r\n    [Fact]\r\n    public void Test1()\r\n    {\r\n        Process.Start(@\"./consoleApp.exe\");\r\n    }\r\n}\r\n```\r\n\r\nBoom, error. `Failed to run as a self-contained app. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found...`.\r\n\r\nMy \"fix\" is to remove `\u003cRuntimeIdentifier\u003e...`, and pass that to `dotnet publish -r win-x64` but I liked the idea of having the RID right there in the project file for all commands to respect. I also have a solution build process that call `dotnet restore`, followed by `dotnet build --no-restore` followed by `dotnet publish --no-restore --no-builld` so I have to refactor all that and figure out all the warnings and errors I get when passing `-r`. IE: `error NE\r\nTSDK1134: Building a solution with a specific RuntimeIdentifier is not supported.` and ` One of \u0027--self-contained\u0027 or \u0027--no-self-contained\u0027 options are required when \u0027--runtime\u0027 is used.`. A bunch of stuff I have to scratch my head over just because I passed `-r` to a dotnet command when before it worked in my csproj without any issues.\r\n\r\nI feel like its super common use-cases that bring users to this field of landmines.\r\n\r\nIf someone would advise on my reproduction and the proper way to do it, I would really appreciate it. I have considered publishing before my tests and invoking the published asset. Not sure if that is frowned upon? Again, would love advice.",
                                           "updatedAt":  "2023-04-08T21:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZlM71",
                                           "createdAt":  "2023-04-11T08:44:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@VictorioBerra \r\nThis scenario is basically hitting two problems:\r\n* Specifying RID (RuntimeIdentifier) will also opt-in to self-contained. In .NET 7 if you do this from command line you\u0027ll get the warning you mentioned, but you will not get a warning if it\u0027s done from the project file. In any case in .NET 8 we\u0027re changing this and RID will not imply self-contained anymore.\r\n* Referencing an self-contained exe project from a framework-dependent project is currently broken. I can\u0027t find the issue currently - but it\u0027s somewhere in dotnet/sdk repo. This is basically what happens if you reference the exe from the test project. Note that there\u0027s a warning about this: MSB3270 (at least that\u0027s what I get on .NET 7 SDK). But fixing the warning by specifying RuntimeIdentifier for the test doesn\u0027t fix it - it produces the wrong output as you observed.\r\n\r\nI would recommend to create a new issue in the dotnet/sdk repo about this (the failure is caused by the SDK producing invalid layout on disk - possibly without any warnings/errors whatsoever).\r\n\r\nAs for testing - if you want to do end-to-end testing of the app (by running it in a separate process) I would recommend to run the test on the published version of the app (or whatever build you will ship to customers). The SDK will probably not be much help here - maybe you could run msbuild task on the app from the test project and get it to build/publish whatever is your shipping config and then use the output of that.",
                                           "updatedAt":  "2023-04-11T08:44:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZniZF",
                                           "createdAt":  "2023-04-11T14:57:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VictorioBerra",
                                           "body":  "@vitek-karas Thank you. I will create a new issue.\r\n\r\nWould you recommend just invoking `Program.Main` over testing against a published version of my app?",
                                           "updatedAt":  "2023-04-11T14:57:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aKNjf",
                                           "createdAt":  "2023-04-18T07:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6GxKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "VictorioBerra",
                                                                               "createdAt":  "2023-04-18T15:25:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Would you recommend just invoking Program.Main over testing against a published version of my app?\r\n\r\nDepends on what the goal of the test is. I would keep at least some tests which start the process - to have a full E2E validation. But for unit-test-style testing, I would prefer something more direct. Either invoke Main or maybe even true unit testing by invoking internal classes (and use `InternalsVisibleToAttribute`). But this is just a personal bias, so take it with a grain of salt. The main reasons I prefer more direct testing:\r\n- It\u0027s faster - executing a separate process is a surprisingly expensive operation. It looks fast if you do it once, but if you have 100s of tests it quickly adds up to seconds and more.\r\n- Debugging - it makes debugging tests much more complicated. Different process, have to attach, or recreate start conditions, may need 2 debuggers to debug the product and the tests, ...\r\n\r\nI\u0027m involved in projects which use both approaches\r\n- the .NET host tests in the runtime repo run external processes - debugging this is tedious and perf is not great (but in lot of cases it has to be done this way).\r\n- the ILLink (trimmer) tool is a command line app, but almost all the tests use something very similar to invoking Main (it goes a bit deeper, but only a little bit). The debugging comfort this offers is invaluable. And the perf is also a lot better.",
                                           "updatedAt":  "2023-04-18T07:56:18Z"
                                       }
                                   ],
                         "totalCount":  72
                     },
        "title":  "The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in",
        "labels":  [
                       "enhancement",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3673",
        "createdAt":  "2019-07-08T14:09:14Z",
        "number":  3673,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAsANxA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2019-07-08T14:44:27Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-26T17:56:52Z",
        "body":  "Currently the only way to pass information between the host and the runtime is the \"runtime properties\" array. This array is not pay-for-play, all the properties which the runtime will ever know must be in it. This means that if there are properties which are filled by the host itself (like `TRUSTED_PLATFORM_ASSEMBLIES`), all the applications will pay the price to create the property and pass it to the runtime.\r\n\r\nThe cost associated with the property is non-zero, there are 3-4 copied of the property names and values made during startup.\r\n\r\nIt would be beneficial to have a pay-for-play mechanism of getting information from the host, and eventually not just information by entire services. The host could expose useful information (which is useful for a very limited set of apps though), like:\r\n* Path to the muxer used to runt he app (if there\u0027s any)\r\n* Path to the `.runtimeconfig.json` used by the app (if any)\r\n\r\nAs for services we\u0027re already running into this problem today. The `AssemblyDependencyResolver` relies on services provided by `hostpolicy`. Today the communication is done via special APIs on `hostpolicy`, which means the runtime/corelib have hardcoded dependency on `hostpolicy` itself. This prevents hosts which are not using our hosting libraries unable to provide such services. (This is not very common and in general we encourage users to always rely on our hosting components, but the direct hosting API still exists and is supported).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiaC3zw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JoLfP",
                                           "createdAt":  "2024-08-25T22:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-25T22:05:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support pay-for-play runtime properties/services",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3773",
        "createdAt":  "2019-09-20T19:56:23Z",
        "number":  3773,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-02T19:58:30Z",
        "body":  "If one day the single-exe bundle integrates the hosting components and the runtime into the `apphost` itself and won\u0027t extract them to disk, the current design of native hosting will break.\r\n\r\nRight now native hosting scenarios which \"Attach\" to a process with .NET Core runtime already running rely on this mechanism:\r\n* Find the `hostfxr` module in the process and get a handle to it\r\n* Get an export from the module\r\n* Call the export to ask `hostfxr` to load the new managed component into the already running runtime (and get a pointer to some managed function back typically).\r\n\r\nIf the hosting and the runtime are all compiled/linked into the host there will be no `hostfxr` module in the process. So the above algorithm will break.\r\n\r\nIn the worst case, existing native hosting code might decide to fallback to search on disk, find a functional `hostfxr` there, load it into the process, which will in turn load `hostpolicy` and eventually the CoreCLR runtime itself. This might lead to having two instanced of the runtime in one process - in a semi working state. This is not expected behavior from the user and it\u0027s not a supported scenario. The code should actively try to prevent it.\r\n\r\nThe minimum solution to this will be to have a way to detect the runtime without relying on a search for known modules/exports. If the runtime is detected and there\u0027s no `hostfxr` simply fail the native hosting request. This would block these scenarios with clear and predictable error. Meaning we can reenable it in the future with a proper solution.\r\n\r\nFor 3.1 we should implement this block, so that in 5 we get a chance to correctly and fully implement the scenario. (Implementing the scenario for real in 3.1 is too risky and too big of a change, especially since we don\u0027t know how exactly the single-exe will look like yet).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIJ5YyA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTEzMTczOA==",
                                           "createdAt":  "2019-09-25T17:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I do not think we need to worry about sharing the runtime and framework bundled in the single-exe with other dynamically loaded components. I think about the single-exe as static linking in C/C++. If you statically link C/C++ runtime or other libraries into your .exe, there is no way to share them with other dynamically loaded components either. The other dynamically loaded components have to bring their own.",
                                           "updatedAt":  "2019-09-25T17:39:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTE0MTc1MQ==",
                                           "createdAt":  "2019-09-25T18:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@jkotas that would mean we would sign up to support (if we support the scenario) two .NET Core runtimes in one process. That feels a bit risky. Note that this proposal is to actually actively block the ability to load anything into the single-exe runtime from the outside (since we don\u0027t know how to do that yet anyway).\r\nWe may decide that we keep that block in place indefinitely.",
                                           "updatedAt":  "2019-09-25T18:04:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzI0ODMyOA==",
                                           "createdAt":  "2019-10-29T04:13:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e sign up to support (if we support the scenario) two .NET Core runtimes in one process\r\n\r\nWe can say that we are not supporting this in the documentation, without actually blocking this. There are many things that we say are unsupported (e.g. private reflection - that is super easy to use too) without being actively blocked.",
                                           "updatedAt":  "2019-10-29T04:13:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Prepare hosting components for single-exe with integrated runtime",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3802",
        "createdAt":  "2019-10-10T16:54:34Z",
        "number":  3802,
        "author":  "ericjohannsen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuhDSQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "foriequal0",
                                            "createdAt":  "2020-02-04T14:47:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-beer",
                                            "createdAt":  "2020-08-09T14:15:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mightyPolo108",
                                            "createdAt":  "2023-02-21T21:48:32Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-06-17T12:25:31Z",
        "body":  "## Steps to reproduce\r\n\r\n- Create a manifest MyRuntimeStore.csproj including (for example) the current version of Newtonsoft.Json\r\n- Execute command: dotnet store --manifest MyRuntimeStore.csproj --runtime win10-x64 --framework netcoreapp3.0 --framework-version 3.0.0 \r\n- Create a .NET Core Console App.\r\n- Edit .csproj to include \u003cTargetManifestFiles\u003eC:\\Users\\USERNAME\\\\.dotnet\\store\\x64\\netcoreapp3.0\\artifact.xml\u003c/TargetManifestFiles\u003e\r\n- Publish the app in Visual Studio\r\n- Run the app using the command line from the publish folder\r\n\r\n## Expected  behavior\r\nThe runtime checks the default user store path. In other words, the default behavior for \"dotnet store\" should align with the default behavior for assembly resolution. Or, if there is a compelling reason not to do so, the behavior should be clearly documented in primary documentation sources.\r\n\r\n## Actual behavior\r\nError:\r\n  An assembly specified in the application dependencies manifest (ManifestDeploy.deps.json) was not found:\r\n    package: \u0027Newtonsoft.Json\u0027, version: \u002712.0.2\u0027\r\n    path: \u0027lib/netstandard2.0/Newtonsoft.Json.dll\u0027\r\n  This assembly was expected to be in the local runtime store as the application was published using the following target manifest files:\r\n    artifact.xml\r\n\r\nHowever,\r\nSET DOTNET_SHARED_STORE=C:\\Users\\USERNAME\\.dotnet\\store\r\ndoes allow the user-specific store to be located, and the app then runs.\r\n\r\n## Environment data",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXxzs3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vx3t9",
                                           "createdAt":  "2023-02-21T21:50:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mightyPolo108",
                                           "body":  "Was there some development?\r\nIam facing same issue at NET6, while assemblies are not loaded from runtime package store.\r\nThanks.",
                                           "updatedAt":  "2023-02-21T21:50:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5es7UU",
                                           "createdAt":  "2023-06-13T08:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HenryShade",
                                           "body":  "\u003e Was there some development? Iam facing same issue at NET6, while assemblies are not loaded from runtime package store. Thanks.\r\n\r\nHi, did you resolve it? I am also facing it.. Thanks",
                                           "updatedAt":  "2023-06-13T08:45:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fHOzf",
                                           "createdAt":  "2023-06-17T12:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mightyPolo108",
                                           "body":  "\u003e \u003e Was there some development? Iam facing same issue at NET6, while assemblies are not loaded from runtime package store. Thanks.\r\n\u003e \r\n\u003e Hi, did you resolve it? I am also facing it.. Thanks\r\n\r\nHi.\r\nWe used small project called NetBeauty which creates a small loader and moves all dependencies to configurable folder.\r\nWorks well so far. ",
                                           "updatedAt":  "2023-06-17T12:25:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "User-specific store default for \"dotnet store\" but not for runtime assembly resolution",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3805",
        "createdAt":  "2019-10-11T11:59:48Z",
        "number":  3805,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-03T01:21:01Z",
        "body":  "Store the exact version information in the `apphost.exe` somewhere so that it\u0027s possible to get it while debugging crash dumps for example. Note that this is different from dotnet/runtime#2667 which removed the version information from the File version resources.\r\n\r\nWe still want/need the file version information to come the application itself, so it won\u0027t denote the actual version of the code inside `apphost.exe`.\r\n\r\nSimilarly we should include some kind of information about the necessary runtime - specifically the requirements on `hostfxr.dll`. This is to help with better error experience when there\u0027s no .NET Core installed on the machine. See dotnet/core-setup#8509 for discussion on the topic. One such possible solution is to embed the TFM into the apphost.\r\n\r\nNote that this information should be included in the binary itself, not in resources or other kinds of metadata (and should we available on all platforms) - probably similarly to how we stamp the apphost with the name of the .dll to run.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIEwE3w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTgxNDU1Ng==",
                                           "createdAt":  "2019-10-14T17:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Would the version information appear at a per-determined specific offset for the tools to retrieve? If so, one approach could be to append version bytes at the end of the file followed by length of string:\r\n\r\n```\r\n+-------------------------  new apphost  -----------------------+\r\n|---------------------------------------------------------------|\r\n||                   ||                 ||                     ||\r\n||      apphost      ||     version     ||    version_length   ||\r\n||                   ||                 ||                     ||\r\n|---------------------------------------------------------------|\r\n+---------------------------------------------------------------+\r\n```",
                                           "updatedAt":  "2019-10-14T17:35:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTgyMTAwMg==",
                                           "createdAt":  "2019-10-14T17:47:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Having a fixed offset is rather tricky (especially cross-platform). I was thinking more about basically a static variable. Similar to:\r\n* Path to the dll - https://github.com/dotnet/core-setup/blob/4ace84dbf94128b4825c76cdd09b46dba7473478/src/corehost/corehost.cpp#L48\r\n* Bundle header location for single-exe: https://github.com/dotnet/core-setup/blob/4ace84dbf94128b4825c76cdd09b46dba7473478/src/corehost/cli/apphost/bundle/marker.cpp#L18\r\n\r\nIn both cases these don\u0027t have a fixed offset, instead it\u0027s based on patterns - the tools search the binary for a specific pattern and when they find it, they overwrite that piece with the data (dll path, header offset, ...).\r\n\r\nWith a stamped `apphost` you can\u0027t easily find it without symbol information, but we should not need to do that. Once the `apphost` is stamped it should look as close to a \"developer\u0027s own app\" as possible. When it\u0027s not stamped, the versioning is done by NuGet.\r\n\r\nThe version is useful for:\r\n* Reporting errors when nothing else but `apphost` can be found - it would help us generate a good error message saying something like \"You need to install .NET Core 3.1 - go here\".\r\n* Reporting errors when we find the wrong version - so we could generate an error message like \"You have .NET Core 3.0, but this app needs .NET Core 3.1 - go here\" (only in case `hostfxr` is too old, which will not happen between 3.0-\u003e3.1 - so that\u0027s just a sample).\r\n* Debugging crash dumps - this is mostly for us - when we do have symbols, it would be easy to simply look at a value of a static variable in the debugger to learn the exact version of the apphost. In theory this should not be necessary as the symbols have a unique MVID, which there could be a way to map it back to versions, but having the static variable is just easier.",
                                           "updatedAt":  "2019-10-14T17:47:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTg0ODg5Ng==",
                                           "createdAt":  "2019-10-14T18:39:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e With a stamped apphost\r\n\r\nAh, I am not familiar with stamped vs. non-stamped(?) apphost. Previously I learned from @dagood that apphost undergoes series of patches in SDK and the produced apphost gets final touches in core-setup (host model). Is that the non-stamped (crafted-for-your-app?) apphost?\r\n\r\n\u003e You need to install .NET Core 3.1 - go here\r\n\r\n(slightly offtopic but) the other day i experienced this kind of an error and was thinking why can\u0027t we instead have `You need to install .NET Core 3.1 - do you want to install it now? [y/N]` and selecting `y` would download the required component via `dotnet-install.{sh,ps1}` script. All the hard work is done, it seems like it is just about wiring [a curl call](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script#examples) with correct arguments; known by the error context. :)",
                                           "updatedAt":  "2019-10-14T18:39:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTg1Mjg5NQ==",
                                           "createdAt":  "2019-10-14T18:47:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAyrSIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2019-10-14T19:43:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Sorry - we don\u0027t have a fixed terminology, so it\u0027s confusing:\r\n* non-stamped/non-patched `apphost` - the binary produced by the build of core-setup repo. Trying to run this will immediately fail. It\u0027s shipped as part of SDK and also as a separate NuGet package.\r\n* stamped/patched `apphost` - this is created by taking the non-stamped `apphost` from above and \"stamping/patching\" it, done by the SDK on developer machine during application build/publish - depending on the scenario this can mean\r\n  * Including the relative path to the managed .dll to run\r\n  * Adding the single-exe manifest and appending the assemblies and/or other files to produce single-exe\r\n  * On Windows - copying all native resources from the managed .dll to the final executable\r\n  * On Windows - marking it as a GUI app (if appropriate, so that it doesn\u0027t open console window on start).\r\n  * Renaming it to the name of the app -\u003e `app.exe`\r\n\r\nRe the install experience:\r\nhttps://github.com/dotnet/core-setup/pull/8509",
                                           "updatedAt":  "2019-10-14T18:47:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Write version information into apphost",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/3835",
        "createdAt":  "2019-11-11T21:17:09Z",
        "number":  3835,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqlggA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "kameko",
                                            "createdAt":  "2019-11-12T11:48:31Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ludwo",
                                            "createdAt":  "2019-11-14T10:02:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "normj",
                                            "createdAt":  "2020-02-14T19:09:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vchirikov",
                                            "createdAt":  "2020-10-15T18:19:29Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "vchirikov",
                                            "createdAt":  "2020-10-15T18:19:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cgytrus",
                                            "createdAt":  "2020-12-16T10:25:20Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "cgytrus",
                                            "createdAt":  "2020-12-16T10:25:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MyNine",
                                            "createdAt":  "2022-09-15T01:33:26Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2021-08-02T19:59:14Z",
        "body":  "The current implementation of `AssemblyDependencyResolver` which underneath is implemented in `hostpolicy` as `corehost_resolve_component_dependencies` currently uses the same probing paths as the app. This means that it gets the paths specified in `.runtimeconfig.json`, `.runtimeconfig.dev.json` and command line `--additionalProbingPath`.\r\n\r\nThe probing paths always include the app folder itself and by default for `dotnet build` the `.runtimeconfig.dev.json` includes NuGet caches in the paths.\r\n\r\nThis means that if we\u0027re trying to \"load a plugin\" using this API, if the plugin has a `.deps.json` record for asset `lib.dll`, but the file is missing from the plugin, we will search for it in the app as well as nuget cache and potentially other places.\r\n\r\nTypically the resolution should fail in such cases (the plugin should behave as close to app as possible). Resolving the dependency from the app\u0027s directory is actually potentially dangerous as it may resolve to a wrong version.\r\n\r\n`AssemblyDependencyResolver` is new in .NET Core 3.0 where the SDK will always copy all necessary references to the output, so the presence of NuGet caches in the `.runtimeconfig.dev.json` is not necessary - and in this case it\u0027s actually hurtful. If the dependency is resolved from NuGet cache (even if it\u0027s the right version), typically in the plugin scenario it will be loaded in isolation into the plugin\u0027s ALC. If the dependency was missing due to it being a \"shared\" dependency, this breaks the sharing contract and duplicate load occurs (same thing happens if it\u0027s resolved from the app folder as well).\r\n\r\nThe correct behavior for plugins would be to only resolve against probing paths which are not from the app. So the app path must be explicitly ignored. Also paths from `.runtimeconfig.json` and `.runtimeconfig.dev.json` for the app should probably be ignored as well (as those belong to the app).\r\n\r\nIt\u0027s sort of questionable if we should also ignore `--additionalProbingPahts`, but we probably should.\r\n\r\nThis would mean that plugins can\u0027t customize the probing paths - so we may consider either:\r\n* Supporting a new API on `AssemblyDependencyResolver` to add probing paths that way\r\n* Supporting parsing `.runtimeconfig.json`/`.runtimeconfig.dev.json` from the plugin itself and getting the paths from there\r\n* Potentially somehow using the app\u0027s probing paths, but avoiding the problem described above\r\n\r\nNote that any change in this will be a breaking change against .NET 3.0.\r\n\r\nThis is related to potential SDK issues where non-private references do not correctly propagate into transitive dependencies. For example https://github.com/dotnet/sdk/issues/1366.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIPBQ6A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MjYyMDI2NA==",
                                           "createdAt":  "2019-11-11T21:18:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Related to this are doc issues https://github.com/dotnet/docs/issues/15811 and https://github.com/dotnet/samples/issues/1760 which try to address the overall scenario and the SDK behavior.",
                                           "updatedAt":  "2019-11-11T21:18:13Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "AssemblyDependencyResolver uses probing paths from the app",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1154",
        "createdAt":  "2019-12-25T20:03:55Z",
        "number":  1154,
        "author":  "Brar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-28T17:35:33Z",
        "body":  "I\u0027m trying to use the new nethost static library that was introduced via #296.\r\nSince I have yet to figure out how to use NuGet packages like `Microsoft.NETCore.DotNetAppHost` (or `Microsoft.NETCore.App.Host.[win-x64|linux-x64]` ) from native C builds I tried to download the daily releases (https://dotnetcli.blob.core.windows.net/dotnet/Runtime/master/dotnet-nethost-latest-win-x64.zip or https://dotnetcli.blob.core.windows.net/dotnet/Runtime/master/dotnet-nethost-latest-linux-x64.tar.gz) where I found out that the static libraries don\u0027t get published.\r\n\r\nIs this an intentional decision or an oversight?\r\n\r\nIf it is an intentional decision, this might be a documentation issue.\r\nHow am I supposed to consume the NuGet packages and are there daily builds of them?\r\nI\u0027ve already read https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting and https://github.com/dotnet/runtime/blob/master/docs/design/features/native-hosting.md and also tried https://github.com/dotnet/samples/tree/master/core/hosting/HostWithHostFxr but all of them don\u0027t show an elegant or recommended way of using them.\r\nThe samples actually show a way which is described as \"relatively complicated\" and recommend CMake for native builds which, to my knowledge, can\u0027t consume NuGet packages.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJzQGrQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTA3MzI0NQ==",
                                           "createdAt":  "2019-12-26T15:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "The switch-to-dotnet/runtime is still in progress for daily SDK builds: https://github.com/dotnet/core-sdk/pull/5924, which include runtime bits. Currently it is pointing to Nov 14 revision: https://github.com/dotnet/core-setup/commit/c77948d92a2f950140f09384f057cb893ec3955a.\r\n\r\n`dotnet-nethost-latest-linux-x64.tar.gz` is also pointing to the same old commit:\r\n\r\n```sh\r\nCDN_URL=\"https://dotnetcli.azureedge.net/dotnet/Runtime/master/dotnet-nethost-latest-linux-x64.tar.gz\"\r\ncurl -sSL $CDN_URL | tar xvz | strings libnethost.so | grep \"@(#)\"\r\n\r\n@(#)Version 5.0.19.56401 @Commit: c77948d92a2f950140f09384f057cb893ec3955a\r\n```",
                                           "updatedAt":  "2019-12-26T15:06:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTI0Njg4MA==",
                                           "createdAt":  "2019-12-27T11:03:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "Thank you @am11.\r\nSo if I understand you correctly the library will appear at the location linked from README.md as the switch-to-dotnet/runtime progresses.\r\nThat solves my primary question, so I\u0027m closing this.",
                                           "updatedAt":  "2019-12-27T11:03:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTI1MDY5OQ==",
                                           "createdAt":  "2019-12-27T11:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "I looks like I\u0027ve prematurely closed this.\r\n\r\n```\r\nCDN_URL=\"https://dotnetcli.azureedge.net/dotnet/Runtime/master/dotnet-nethost-latest-linux-x64.tar.gz\"\r\ncurl -sSL $CDN_URL | tar xvz | strings libnethost.so | grep \"@(#)\"\r\nstrings: \u0027libnethost.so\u0027: No such file\r\n```\r\nIs this a CDN issue?",
                                           "updatedAt":  "2019-12-27T11:26:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTI2NTQ0NA==",
                                           "createdAt":  "2019-12-27T13:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I think just a broken pipe, this should work:\r\n\r\n```sh\r\ncurl -sSL $CDN_URL | tar xvz \u0026\u0026 strings libnethost.so | grep \"@(#)\"\r\n```",
                                           "updatedAt":  "2019-12-27T13:03:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTI2ODA4NQ==",
                                           "createdAt":  "2019-12-27T13:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "\u003e I think just a broken pipe, this should work:\r\n\r\nYou\u0027re right but where is `libnethost.a`?\r\n\r\n`curl -sSL $CDN_URL | tar xvz \u0026\u0026 strings libnethost.a | grep \"@(#)\"`",
                                           "updatedAt":  "2019-12-27T13:19:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTMxNzc5Mg==",
                                           "createdAt":  "2019-12-27T18:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e where is libnethost.a?\r\n\r\nDaily builds hasn\u0027t been published to blob storage in a while (latest build is from Nov 14 commit), and `make` target for `libnethost.a` was added 18 days ago.\r\n\r\n\u003e library will appear at the location linked from README.md as the switch-to-dotnet/runtime progresses.\r\n\r\nYes, if we build the product locally, we can find libnethost.a in tar.gz.\r\n\r\n```sh\r\ngit clone https://github.com/dotnet/runtime dotnet-runtime\r\ncd dotnet-runtime\r\n\r\n./build.sh -c release\r\n./build.sh --subset PkgProj /p:Configuration=Release\r\n\r\ntar xvzf ./artifacts/packages/Release/Shipping/dotnet-nethost-5.0.0-dev.19627.1-linux-x64.tar.gz\r\nstrings libnethost.a | grep \"@(#)\"\r\n```\r\n\r\n@dagood, could you share some insights when can we expect daily runtime builds from new repo?",
                                           "updatedAt":  "2019-12-27T18:03:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MDA2MTA1Ng==",
                                           "createdAt":  "2020-01-01T15:19:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dagood",
                                           "body":  "We have official builds since Dec 21, check out https://github.com/dotnet/runtime/issues/98 for the latest status.",
                                           "updatedAt":  "2020-01-01T15:19:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjIwNjM1NQ==",
                                           "createdAt":  "2020-01-08T18:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "cc @elinor-fung ",
                                           "updatedAt":  "2020-01-08T18:53:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjI2MDU4OQ==",
                                           "createdAt":  "2020-01-08T21:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@dagood, ah thanks!  So currently it is under a different subdomain:\r\n\r\n\u003e `https://dotnetfeed.blob.core.windows.net/dotnet-core/assets/core-setup/Runtime/5.0.0-alpha.1.19618.2/dotnet-nethost-5.0.0-alpha.1.19618.2-linux-x64.tar.gz`\r\n\r\n`s/dotnetcli/dotnetfeed`\r\n\r\n@Brar, this one contains static library: `.a` and its `-win-x64.zip` counterpart has `.lib`.\r\n\r\nIs it because we are waiting for dotnet/toolset and dotnet/core-sdk update to get unblocked https://github.com/dotnet/runtime/issues/98#issuecomment-571361769, before it will appear under `dotnetcli` subdomain (which is fronted by the CDN)? otherwise we can update the [README.md table](https://github.com/dotnet/runtime#daily-builds) by replacing `https://dotnetcli` with `https://dotnetfeed`.",
                                           "updatedAt":  "2020-01-08T21:16:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjI4NDIyMQ==",
                                           "createdAt":  "2020-01-08T22:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dagood",
                                           "body":  "It looks like the location was broken with that build number, the file is intended to be available on dotnetcli same as always--here\u0027s a link from a newer build:\r\n\r\n* https://dotnetcli.blob.core.windows.net/dotnet/Runtime/5.0.0-alpha.1.20058.1/dotnet-nethost-5.0.0-alpha.1.20058.1-linux-x64.tar.gz",
                                           "updatedAt":  "2020-01-08T22:17:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjI5NDU1NA==",
                                           "createdAt":  "2020-01-08T22:45:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Could the version-less `master` tarbar with `latest-linux-x64` be also updated? problem is that this one has old binaries: https://dotnetcli.azureedge.net/dotnet/Runtime/master/dotnet-nethost-latest-linux-x64.tar.gz",
                                           "updatedAt":  "2020-01-08T22:45:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjI5ODQ3MA==",
                                           "createdAt":  "2020-01-08T22:57:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA4njag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2020-01-09T00:57:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dagood",
                                           "body":  "@am11 unfortunately no, the infra that was doing that is very brittle vs. Arcade breaking changes, so we decided to wait for https://github.com/dotnet/arcade/issues/3963 instead of bringing the old infra online in the new dotnet/runtime repo.",
                                           "updatedAt":  "2020-01-08T22:57:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODcwMjA5Nw==",
                                           "createdAt":  "2020-04-23T22:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "This is now being published, but the `libnethost.lib` is incomplete due to source refactoring in https://github.com/dotnet/runtime/pull/2123. In order to link against `libnethost.lib`, `nethost.h` needs to be updated to remove `__declspec(dllimport)` on Windows, and the `libhostmisc.lb` needs to be consumed since that has a bunch of the implementation. I can submit a PR for the header file issue, but I am struggling to figure out how to make this work and get the benefit of https://github.com/dotnet/runtime/pull/2123 without doing some postprocessing of the libs.\r\n\r\nSuggestions are welcome - sorry for hijacking this issue, but it is technically no longer fully published in a consumable way.\r\n\r\n/cc @vitek-karas @jeffschwMSFT ",
                                           "updatedAt":  "2020-04-23T22:22:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODcwNTUxNQ==",
                                           "createdAt":  "2020-04-23T22:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks @AaronRobinsonMSFT  for bringing this up. @swaroop-sridhar @VSadov can you please look into that - it\u0027s kind of related to the host build system (single-file and all)?\r\nWe should obviously add a test...",
                                           "updatedAt":  "2020-04-23T22:32:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTEyNDU3NQ==",
                                           "createdAt":  "2020-04-24T16:46:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@vitek-karas @swaroop-sridhar @VSadov It might be easiest to revert #2123. I can do that if it would help.",
                                           "updatedAt":  "2020-04-24T16:46:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTEyNDcyMA==",
                                           "createdAt":  "2020-04-24T16:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCLizw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-04-24T16:47:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e the libnethost.lib is incomplete due to source refactoring in #2123\r\n\r\nMy vote would be to revert #2123 . Building a couple of .cpp files twice is just fine.",
                                           "updatedAt":  "2020-04-24T16:46:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTEyNjA5Mg==",
                                           "createdAt":  "2020-04-24T16:49:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@vitek-karas @swaroop-sridhar @VSadov If you all concur with @jkotas and it doesn\u0027t impact your other single file work, I will do that revert.",
                                           "updatedAt":  "2020-04-24T16:49:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTEzMDA0OQ==",
                                           "createdAt":  "2020-04-24T16:56:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCLoPw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-04-24T16:59:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "I think it is fine to revert https://github.com/dotnet/runtime/pull/2123. The static host PR will need to merge appropriately, but @VSadov is looking at making changes to the file-moves in the PR anyways. So I think it\u0027ll be OK to adapt to the change. CC:@VSadov ",
                                           "updatedAt":  "2020-04-24T16:56:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTE1NTcyNw==",
                                           "createdAt":  "2020-04-24T17:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "le sigh... Reverting this change is going to be basically impossible. Too many things have built on top of it. I will revert the conceptual change rather the actual commit.",
                                           "updatedAt":  "2020-04-24T17:45:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTIwNDkyOQ==",
                                           "createdAt":  "2020-04-24T19:39:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "Thanks @AaronRobinsonMSFT  This may make some components smaller. For example, libhostcommon has things like info.cpp and header.cpp, which hostfxr and hostpolicy need, but nethost, comhost etc don\u0027t need. ",
                                           "updatedAt":  "2020-04-24T19:39:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI0NjMwMg==",
                                           "createdAt":  "2020-04-24T21:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "My current iteration of single file work no longer moves files under corehost. \r\nProjects will need to be adjusted though if this fix changes where files are.",
                                           "updatedAt":  "2020-04-24T21:27:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI0NzY3NA==",
                                           "createdAt":  "2020-04-24T21:31:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCNhEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "swaroop-sridhar",
                                                                               "createdAt":  "2020-04-24T22:25:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@VSadov I am trying to leave files where they are. However, the CMake files for corehost need a lot of attention. They are in an unacceptable state and make reasoning about this so much harder than they should be for such a simple set of build requirements like corehost.",
                                           "updatedAt":  "2020-04-24T21:31:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1MTA3NA==",
                                           "createdAt":  "2020-04-24T21:42:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Most of the single-file changes are in CMake projects. The change is mostly about hostfxr and policy though, so depending what changes it might not be that hard to merge on top.",
                                           "updatedAt":  "2020-04-24T21:42:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzcwODI2Mw==",
                                           "createdAt":  "2020-07-13T18:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@AaronRobinsonMSFT As far as I can tell, this issue is currently adding tracking a test to make sure that the nethost is buildable as a static library?",
                                           "updatedAt":  "2020-07-13T18:04:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzcxNzM4OA==",
                                           "createdAt":  "2020-07-13T18:24:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@agocke Yes that is true. It is **now** published and used, but a test would be prudent. ",
                                           "updatedAt":  "2020-07-13T18:30:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzcxOTg4OA==",
                                           "createdAt":  "2020-07-13T18:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "\u003e @agocke Yes that is true. It is not published and used, but a test would be prudent.\r\n\r\nI\u0027d say that a static nethost would be the most convenient way to actually use it (for outside projects) if it eventually gets published in a reliable way.\r\n\r\nJust my 2ct.",
                                           "updatedAt":  "2020-07-13T18:29:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzcyMTAwNQ==",
                                           "createdAt":  "2020-07-13T18:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBKR1vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Brar",
                                                                               "createdAt":  "2020-07-14T12:40:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@Brar My mistake. I meant to say \"it is **now**\". I fixed this issue in #35431. Adding testing for the scenario is all that remains.",
                                           "updatedAt":  "2020-07-13T18:31:28Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "The new nethost static library is not published in the daily builds",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32493",
        "createdAt":  "2020-02-18T16:32:20Z",
        "number":  32493,
        "author":  "carlos-quintero",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAnS8Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jozefizso",
                                            "createdAt":  "2020-02-25T20:51:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mterhorst",
                                            "createdAt":  "2020-02-28T18:38:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ThargoN",
                                            "createdAt":  "2020-03-06T09:10:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "suhrab",
                                            "createdAt":  "2020-03-25T17:32:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophHornung",
                                            "createdAt":  "2020-09-02T13:32:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nbelyh",
                                            "createdAt":  "2020-09-26T19:36:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petarpetrovt",
                                            "createdAt":  "2021-10-09T14:49:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GregReddick",
                                            "createdAt":  "2022-01-21T19:33:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gerhard17",
                                            "createdAt":  "2022-11-30T07:17:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gouqi0017",
                                            "createdAt":  "2023-09-05T07:25:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gouqi-Zn",
                                            "createdAt":  "2023-11-22T02:03:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matherm-aboehm",
                                            "createdAt":  "2024-03-11T10:59:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dirvo",
                                            "createdAt":  "2025-03-28T14:52:35Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2023-12-17T18:10:54Z",
        "body":  "Currently:\r\n\r\n- If the .NET Core assembly uses architecture \"x86\" the generated .comhost.dll is for 32-bit.\r\n- If the .NET Core assembly uses architecture \"x64\" the generated .comhost.dll is for 64-bit\r\nSo far so good.\r\n- If the .NET Core assembly uses architecture \"Any CPU\" the generated .comhost.dll is for 64-bit. This case is problematic. If you try to register it as 32-bit COM component, the client gets 0x800700C1 (\"not a valid Win32 application\").\r\n\r\nIf an assembly targets the architecture Any CPU then two .comhost.dll files \r\nshould be generated, because the autor may want to create both x64 and x86 COM servers from the same .NET \"Any CPU\" assembly (ex: consider a .NET-based add-in for Office 64-bit and Office 32-bit). That was possible with .NET Framework with a single build, but it is not possible with .NET Core: two builds are required, one for architecture x86 and another for architecture x64, and you need to move the output files before the second build.\r\n\r\nI suggest the following approach:\r\n\r\n- If the .NET Core assembly uses architecture x86 a .comhost32.dll file is generated for 32-bit\r\n- If the .NET Core assembly uses architecture x64 a .comhost64.dll file is generated for 64-bit\r\n- If the .NET Core assembly uses architecture Any CPU, both .comhost32.dll and .comhost64.dll files are generated.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObtHAlA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzU2MzgxOQ==",
                                           "createdAt":  "2020-02-18T16:57:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA77VwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-02-19T00:51:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "/cc @AaronRobinsonMSFT ",
                                           "updatedAt":  "2020-02-18T16:57:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNjcyNDI4Mw==",
                                           "createdAt":  "2020-12-01T18:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCw8eEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2020-12-01T18:07:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grivus",
                                                                               "createdAt":  "2022-12-08T18:33:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DHowett",
                                           "body":  "This is also important for ARM64 for projects that want 3-architecture builds, like WinAppDriver.",
                                           "updatedAt":  "2020-12-01T18:06:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u0cCU",
                                           "createdAt":  "2023-12-17T18:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozefizso",
                                           "body":  "I created new issue at https://github.com/dotnet/sdk/issues/37570 as the build scripts for COM hosting are in the SDK repository.",
                                           "updatedAt":  "2023-12-17T18:10:53Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support dual comhost.dll (x86, x64) generation for .NET Core assemblies using \"Any CPU\"",
        "labels":  [
                       "enhancement",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43980",
        "createdAt":  "2020-04-27T22:31:55Z",
        "number":  43980,
        "author":  "0xCA",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBG4HKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2020-05-22T03:42:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2020-06-09T20:26:12Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-07-19T17:57:35Z",
        "body":  "Currently there is a Visual C++ Redistributable 2015 requirement for .Net Core 3. This way we can\u0027t have truly portable apps without the need of installing dependency first.\r\n\r\nSelf-contained option is really useful, but it\u0027s not truly self-contained for now. It\u0027s easy to imagine several situations where completely independent assembly would be great to have. Utility app that should run from USB drive on any Win7SP1+ computer, client app that should work without administrator access at limited workstations (installing vcredist requires it), etc.\r\n\r\nI\u0027m sorry if there is a way to have it already which I couldn\u0027t find. Or if it is a wrong place or wrong way to write my suggestion. But if it\u0027s right it\u0027d be great to have these scenarios covered.\r\nThank you for your work! I can\u0027t wait for .Net 5 and AOT.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKs8ESg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODE1NDYzMg==",
                                           "createdAt":  "2020-10-28T19:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joeloff",
                                           "body":  "Still listed as a requirement: https://docs.microsoft.com/en-us/dotnet/core/install/windows?tabs=netcore31#dependencies\r\n\r\nOn some OS versions the VC redist requires additional patches to be installed, e.g. https://support.microsoft.com/en-us/help/2533623/microsoft-security-advisory-insecure-library-loading-could-allow-remot\r\n\r\nThe patch is distributed as an MSU, and patched through CBS. If you want to include patch redist for server OS there will likely need to be different sets of binaries that need to be linked into the SCD image depending on what its targeting.\r\n\r\n",
                                           "updatedAt":  "2020-10-28T19:20:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODIxMDEyMg==",
                                           "createdAt":  "2020-10-28T21:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-28T21:09:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "True self-contained builds",
        "labels":  [
                       "area-Host",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38231",
        "createdAt":  "2020-06-22T19:43:13Z",
        "number":  38231,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGc7Kg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dign17",
                                            "createdAt":  "2021-04-13T11:51:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AkazaRenn",
                                            "createdAt":  "2023-11-26T04:29:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lifka",
                                            "createdAt":  "2024-05-01T22:11:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Stefan137",
                                            "createdAt":  "2025-07-10T07:23:27Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-03-22T15:49:52Z",
        "body":  "To support C++/CLI libraries in .NET Core, `ijwhost` was created as a shim for finding and loading the runtime. All C++/CLI libraries are linked to this shim, such that `ijwhost.dll` is found/loaded when the C++/CLI library is loaded.\r\n\r\nBy default, [Windows\u0027 DLL search](https://docs.microsoft.com/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-desktop-applications) will look for dependencies of a DLL as if they were loaded with just the module name. This means that, depending on how a host application loads the C++/CLI library, the C++/CLI library may fail to load due to `ijwhost.dll` not being found. In order for the load to work one of the following needs to be true:\r\n- `ijwhost.dll` is on the search path\r\n- the host applications specifies either `LOAD_WITH_ALTERED_SEARCH_PATH` or `LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR` flags for `LoadLibrary` such that dependencies are searched for in the same directory as the C++/CLI library\r\n\r\nC++/CLI libraries cannot dictate how their hosts load them and authors should not need to be concerned with how the `ijwhost` shim is found and loaded. The runtime/tooling should make the usage of `ijwhost` hidden to the user such that it just works without user intervention.\r\n\r\nIn .NET Framework, the equivalent shim (`mscoree`/`mscoreei`) is system-wide, so this was not an issue.\r\n\r\nPotential options:\r\n- Make `ijwhost` a static library that gets linked into the C++/CLI library\r\n- ?\r\n\r\n@jkoritzinsky @AaronRobinsonMSFT @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeCBRCw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzczMzI5Nw==",
                                           "createdAt":  "2020-06-22T19:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @swaroop-sridhar\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-22T19:43:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzgyMzg3Mw==",
                                           "createdAt":  "2020-06-22T23:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBLUb3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-07-24T01:33:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Would it be possible to ask the C++/CLI project system to include an assembly manifest like the one in your workaround for #37972 in either their templates or automatically as part of the build?",
                                           "updatedAt":  "2020-06-22T23:44:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzMwODY1NA==",
                                           "createdAt":  "2020-07-24T01:24:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ninds",
                                           "body":  "Hello,\r\nI am observing the same issue when building Excel XLL\u0027s  against .NET 5 (preview) with a modified [XLW](https://github.com/Ninds/xlw).  XLW has a hook to add the containing directory to the PATH :\r\n```cpp\r\nxlw::PathUpdater::PathUpdater()\r\n{\r\n    MEMORY_BASIC_INFORMATION theInfo ;\r\n    HMODULE theHandle = NULL;\r\n    char theDLLPathChar [MAX_PATH + 1] = \"\";\r\n    DWORD dwRet = 0;\r\n    std::string originalPathValue(StringUtilities::getEnvironmentVariable(\"PATH\"));\r\n    bool ok(!originalPathValue.empty());\r\n\r\n    dwRet = static_cast\u003cDWORD\u003e(VirtualQuery (((LPCVOID)this), \u0026theInfo,(static_cast\u003cDWORD\u003e (sizeof (MEMORY_BASIC_INFORMATION)))));\r\n    if (dwRet)\r\n    {\r\n        theHandle = ((HMODULE) (theInfo.AllocationBase));\r\n        GetModuleFileName (theHandle, theDLLPathChar , MAX_PATH);\r\n        xlw::XlfServices.StatusBar = theDLLPathChar;\r\n    }\r\n    else\r\n    {\r\n        ok = false;\r\n        std::cerr \u003c\u003c XLW__HERE__ \u003c\u003c\" Could not attain path of DLL\" \u003c\u003c std::endl;\r\n    }\r\n    if(ok)\r\n    {\r\n        std::string theDLLPath(theDLLPathChar);\r\n        std::string newPathValue(originalPathValue);\r\n        std::string::size_type pos = theDLLPath.find_last_of(\"\\\\\");\r\n        newPathValue+= \";\"+theDLLPath.substr(0,pos);\r\n\r\n        if (!SetEnvironmentVariable(\"Path\", newPathValue.c_str()))\r\n        {\r\n            std::cerr \u003c\u003c XLW__HERE__ \u003c\u003c \" SetEnvironmentVariable failed to set PATH\" \u003c\u003c std::endl;\r\n            ok = false;\r\n        }\r\n        else\r\n        {\r\n            std::cerr \u003c\u003c XLW__HERE__ \u003c\u003c \" PATH set successfully \" \u003c\u003c std::endl;\r\n        }\r\n    }\r\n    if(!ok)\r\n    {\r\n        std::cerr \u003c\u003c XLW__HERE__ \u003c\u003c \" Warning: Unable to initialise PATH to directory of library \" \u003c\u003c std::endl;\r\n    }\r\n} \r\n```\r\nThis is executed quite early on when the XLL is loaded and works for most other dependant dlls that need to be found. It does not work for ijwhost.dll however.\r\n\r\nFor some reason it\u0027s too late. Setting the PATH variable explicitly and externally makes everything work as expected.  \r\n\r\nFor .NET Core 3.1 we don\u0027t even get that far :  \r\n\r\n``` 1\u003eC:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20279.10\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(565,5): error NETSDK1114: Unable to find a .NET Core IJW host. The .NET Core IJW host is only available on .NET Core 3.1 or higher when targeting Windows.```",
                                           "updatedAt":  "2020-07-24T01:24:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzMxMDY4Nw==",
                                           "createdAt":  "2020-07-24T01:34:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @agocke",
                                           "updatedAt":  "2020-07-24T01:34:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTY3MTg3Nw==",
                                           "createdAt":  "2020-11-22T02:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuknwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eladmarg",
                                                                               "createdAt":  "2020-11-22T10:45:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Duy-Thanh",
                                                                               "createdAt":  "2024-08-17T04:45:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mikeoliphant",
                                           "body":  "This is still an issue for me with .NET 5.0 and VS 16.8.2.\r\n\r\nI resolved it by adding a linker manifest to handle \"Ijwhost.dll\", but it took me hours of troubleshooting and scouring the internet to figure that out. It would be great if it could just be handled automatically - ideally with \"Ijwhost.dll\" going away - either being statically linked or through some other mechanism. \r\n\r\nThis is part of a larger problem of C++/CLI being unfriendly for plugin architectures. If your dll is being loaded by a host, the default assembly load path isn\u0027t where your plugin is, so you have to implement an AssemblyLoadContext resolve handler to load assemblies. It works - but it is an extra step that takes time to figure out and implement.\r\n\r\nThis is stuff that should \"just work\", particularly with .NET Core becoming the new mainstream.",
                                           "updatedAt":  "2020-11-22T02:18:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjEwNDg3Ng==",
                                           "createdAt":  "2020-11-23T11:34:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@mikeoliphant could you please describe in a bit more details this:\r\n\r\n\u003e If your dll is being loaded by a host, the default assembly load path isn\u0027t where your plugin is\r\n\r\nI don\u0027t think I follow what is the problem here. Is it that loading plugins requires a resolver (regardless of C++/CLI being used or not)? I don\u0027t see how C++/CLI makes this different.",
                                           "updatedAt":  "2020-11-23T11:34:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjIzOTY4NA==",
                                           "createdAt":  "2020-11-23T15:39:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikeoliphant",
                                           "body":  "\u003e I don\u0027t think I follow what is the problem here. Is it that loading plugins requires a resolver (regardless of C++/CLI being used or not)? I don\u0027t see how C++/CLI makes this different.\r\n\r\nI hadn\u0027t thought about that, but it makes sense that the path issue would still exist in a purely managed context. In C++/CLI the situation is exacerbated by the issue with \"Ijwhost.dll\".",
                                           "updatedAt":  "2020-11-23T15:39:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AWALb",
                                           "createdAt":  "2022-03-25T23:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "datduyng",
                                           "body":  "I am facing this same issue. Our .net6 core web server runnning on Window nano server 1809 is taking dependency on a c++ library. when running the NanoServerApiScanner.exe it says that ijwhost.dll is missing\r\n\r\n![image](https://user-images.githubusercontent.com/35666615/160213670-4eb5c70f-565c-495b-b6d3-72e2f50d2a2f.png)\r\n\r\nWhen searching for the `ijwhost.dll` file there are many instance of this dll found\r\n\r\n![image](https://user-images.githubusercontent.com/35666615/160213744-47582da3-a97f-49f0-870f-ed25d4f6d12d.png)\r\n\r\n\r\nAny help would be greatly appreciated\r\n\r\n\r\n",
                                           "updatedAt":  "2022-03-25T23:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AWc0l",
                                           "createdAt":  "2022-03-26T07:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ruffnik",
                                           "body":  "I got this solved by including the ijwhost.dll in the linker manifest",
                                           "updatedAt":  "2022-03-26T07:08:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54IBgs",
                                           "createdAt":  "2024-03-22T15:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bj-rn",
                                           "body":  "\u003e I resolved it by adding a linker manifest to handle \"Ijwhost.dll\", but it took me hours of troubleshooting and scouring the internet to figure that out.\r\n\r\n@mikeoliphant do you have that process documented somewhere?",
                                           "updatedAt":  "2024-03-22T15:41:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54IFEL",
                                           "createdAt":  "2024-03-22T15:49:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbkl3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bj-rn",
                                                                               "createdAt":  "2024-03-22T16:49:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikeoliphant",
                                           "body":  "\u003e \u003e I resolved it by adding a linker manifest to handle \"Ijwhost.dll\", but it took me hours of troubleshooting and scouring the internet to figure that out.\r\n\u003e \r\n\u003e @mikeoliphant do you have that process documented somewhere?\r\n\r\n![LinkManifest](https://github.com/dotnet/runtime/assets/6710799/9d2195bf-e253-4512-854a-3c715be42711)\r\n",
                                           "updatedAt":  "2024-03-22T15:49:51Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "C++/CLI libraries may fail to load due to `ijwhost.dll` not being on the search path",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43322",
        "createdAt":  "2020-10-12T18:50:11Z",
        "number":  43322,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-17T20:43:24Z",
        "body":  "- [ ] Build separate XUnit runner which loads test assemblies in new ALC\r\n- [ ] Try to unload test assemblies after running is complete",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKrmVKA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI4ODMwNw==",
                                           "createdAt":  "2020-10-12T18:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern, @viktorhofer\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-12T18:50:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI5NDM1NQ==",
                                           "createdAt":  "2020-10-12T19:03:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-12T19:03:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODMwNDAyMg==",
                                           "createdAt":  "2020-10-14T10:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "We already have this for coreclr tests and the test leg is running twice a week in the lab for all pri 1 tests (https://dev.azure.com/dnceng/public/_build?definitionId=671\u0026_a=summary). \r\nIt is not based on a different xunit runner though, but on a mechanism that\u0027s plugged into the generate test .cmd/.sh files.\r\nI know that there are currently two tests failing on all platforms, which I was going to look into but I didn\u0027t have a chance before. And looking at the state today, I\u0027ve noticed that on Linux, 12 more tests started to fail recently. So it needs to be investigated too.",
                                           "updatedAt":  "2020-10-14T10:11:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODQwMzM5NQ==",
                                           "createdAt":  "2020-10-14T13:31:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks @janvorli - the intent of this issue is to make the libraries tests run in secondary ALCs. But I agree we should treat the existing infra for CoreCLR tests and the new one for xUnit similarly. Maybe use the same CI leg for both, if nothing else.",
                                           "updatedAt":  "2020-10-14T13:31:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODQxMTczOA==",
                                           "createdAt":  "2020-10-14T13:44:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ah, ok. There was a prior attempt to run libraries tests in an unloadable ALC, but that wasn\u0027t successfully completed. We\u0027ve hit a lot of issues with xunit that was instantiating a lot of things from the test assemblies via reflection itself, thus leading to many cases when types ended up loaded into both the separate ALC and the default one and types didn\u0027t match at multiple places. @josalem may still have some details / unfinished change.",
                                           "updatedAt":  "2020-10-14T13:44:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODU4NDAzNw==",
                                           "createdAt":  "2020-10-14T18:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "\u003e thus leading to many cases when types ended up loaded into both the separate ALC and the default one and types didn\u0027t match at multiple places.\r\n\r\nIt\u0027s been a while since I\u0027ve looked at this, but that\u0027s what I recall being the issue.  XUnit itself runs all the tests inside an ALC already, but not individual tests.  I think it would be possible, but you might need to modify XUnit itself beyond what the default extension points allow.  Let me see if I can find my code from way back and if it has anything useful in it.",
                                           "updatedAt":  "2020-10-14T18:32:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjgwNTQxNg==",
                                           "createdAt":  "2020-10-26T20:31:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWgSLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CoffeeFlux",
                                                                               "createdAt":  "2020-10-26T20:32:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "srxqds",
                                                                               "createdAt":  "2020-11-12T01:16:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc @CoffeeFlux once Mono\u0027s collectible ALC support is in good shape, we could piggyback on the new xunit runner",
                                           "updatedAt":  "2020-10-26T20:31:20Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Run unit tests under secondary ALC",
        "labels":  [
                       "area-Host",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43331",
        "createdAt":  "2020-10-12T22:18:37Z",
        "number":  43331,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCkYpTw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidfowl",
                                            "createdAt":  "2020-10-13T08:46:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomrus88",
                                            "createdAt":  "2021-12-15T21:48:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kostya9",
                                            "createdAt":  "2022-01-15T12:01:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akhanalcs",
                                            "createdAt":  "2022-04-11T16:19:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2022-06-29T15:29:03Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-06-29T18:37:15Z",
        "body":  "As of .NET 5 only applications are support in single-file publish. Components (plugins, or similar) can only be published as multiple files. This can be cumbersome for even small plugins with just a few files, but it can be rather problematic for either large components or when we actually implement self-contained components which would include 100s of files.\r\n\r\n* [ ] Single-file managed plugins - `AssemblyDependencyResolver` - like support\r\n* [ ] Single-file components loaded via native hosting APIs\r\n  * [ ] Added bonus - single-file self-contained components\r\n* [ ] Single-file applications loaded via native hosting APIs - currently native hosting APIs don\u0027t work on single-file applications. \r\n  * [ ] Single-file FDD app - this should be doable\r\n  * [ ] Single-file SCD app - this is potentially problematic, probably a non-goal\r\n* [ ] Single-file libraries with native binary exports - either [DNNE](https://github.com/AaronRobinsonMSFT/DNNE) or similar\r\n  * [ ] Added bonus - single-file self-contained native libraries implemented in C# (non-AOT)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORcI3tg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzM3MzQxNw==",
                                           "createdAt":  "2020-10-12T22:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-12T22:18:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FvseJ",
                                           "createdAt":  "2022-06-29T15:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsAkaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akhanalcs",
                                                                               "createdAt":  "2022-09-10T21:11:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Nirmal4G",
                                           "body":  "Yep, this is it. I need exactly these features! Should\u0027ve been done in .NET 6 but it seems pushed because there\u0027s little interest. But the truth here is that these kinds of features fall into \"I want this but I don\u0027t know how to request this or even if it\u0027s possible\" box!\r\n\r\nSo, people might not be aware of this. More exposure is required for this issue!",
                                           "updatedAt":  "2022-06-29T15:33:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FvtjY",
                                           "createdAt":  "2022-06-29T15:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@Nirmal4G could you please describe the scenarios where you would need some of these features? It helps us a lot to understand at least at high-level why/how things are used. For example in this case, lot of the design work includes \"what should the SDK do\", it\u0027s not enough that the runtime can run it, but \"how do I build it\" is as important question to answer. And for that, lot of the time it\u0027s necessary to understand what scenario the new functionality should cover.",
                                           "updatedAt":  "2022-06-29T15:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FwExT",
                                           "createdAt":  "2022-06-29T16:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nirmal4G",
                                           "body":  "Currently `NuGet.Build.Tasks.Pack` uses it to pack dependencies into single assembly so that it can be loaded across MSBuild versions, I think! _I tagged relevant people in the linked issue_.\r\n\r\nI want to ship portable MSBuild Tasks (_that\u0027s my first scenario_) that should be able to load across MSBuild versions. We also maintain a multi-file editor internally for our test files for testing an experimental file system, where the app is extended using plugin for each category of file types which provide IO profiling, file container and metadata support.\r\n\r\nFor this \"application\", we have migrated parts of it to .NET Standard and some parts to .NET Core while the core app uses Mono/NETFX because of its plugin system. We want to migrate it to .NET Core but one blocker is that we want to load the plugins without any issues. Currently with a test project, conflicts appear in loading plugins having same dependencies with multiple versions.\r\n\r\nSince these plugins are one-off work, there might not be sources for some versions, only NuGet packages which is also making migration harder. With ILMerge we did make it work for some of the assemblies but some required de-compilation. We also saw that the ILMerge is now archived. So, it would be helpful for .NET linker to do something similar to ILMerge!\r\n\r\nRoughly, these two requests _in theory_ seem to solve our problems as well.\r\n\r\n- Single-file components loaded via native hosting APIs\r\n- Single-file managed plugins - `AssemblyDependencyResolver` - like support",
                                           "updatedAt":  "2022-06-29T16:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FwGAR",
                                           "createdAt":  "2022-06-29T16:53:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks a lot for the scenarios. Regarding the plugins, did you look at this? https://docs.microsoft.com/en-us/dotnet/core/tutorials/creating-app-with-plugin-support. The `AssemblyLoadContext` should be able to provide the isolation necessary to solve the version conflicts without a need for ILMerge (or similar).",
                                           "updatedAt":  "2022-06-29T16:53:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FwH0Y",
                                           "createdAt":  "2022-06-29T17:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nirmal4G",
                                           "body":  "\u003e `AssemblyLoadContext`\r\n\r\nYes, we did but there were some issues. We are still in the process of migrating the plugins. I still don\u0027t know the reason but the test app crashed gloriously when hitting ALC APIs sometimes even before (_might be a different issue_). I\u0027ll provide a detailed issue if you can point me how to debug/trace intermittent crashes in .NET runtime.\r\n\r\nWe also have our internal shared framework which we migrated to .NET Standard/Core thanks to work done in .NET Core 3.1 `FrameworkReference` and targeting packs. But on the deployment side, we want to be able to ship as a single file framework either trimmed with reference to the App being deployed or a full fat assembly. And possibly provide patches with the least disk footprint.",
                                           "updatedAt":  "2022-06-29T17:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fwje2",
                                           "createdAt":  "2022-06-29T18:37:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e I\u0027ll provide a detailed issue if you can point me how to debug/trace intermittent crashes in .NET runtime.\r\n\r\nIf it\u0027s a hard crash that would be really weird - in any case I would be definitely interested in any kind of repro or dump of that.",
                                           "updatedAt":  "2022-06-29T18:37:15Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Single-file everything",
        "labels":  [
                       "area-Host",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43332",
        "createdAt":  "2020-10-12T22:32:40Z",
        "number":  43332,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-09T12:36:41Z",
        "body":  "As of .NET 5 the host only considers up to two locations for SDK and framework resolution:\r\n* The so called \"dotnet root\" location - which is either the location from which `dotnet.exe` was started, or it\u0027s defined by `DOTNET_ROOT` environment variable\r\n* The global install location [details](https://github.com/dotnet/designs/blob/main/accepted/2020/install-locations.md)\r\n\r\nOn Windows it\u0027s possible to use both at the same time (`DOTNET_MULTILEVEL_LOOKUP=1`), on other OSes only one will be considered (the first one found to exist).\r\n\r\nIt\u0027s also not possible to mix/match the SDK and framework locations - there\u0027s no way to tell the system to look for SDKs in one custom location (non-global) but to look for frameworks in another custom location (non-global).\r\n\r\nImprovements in this area would ideally make this more flexible to cover scenarios like:\r\n* [ ] Different private install locations for SDK and for framework - note that if searching for SDK, the resolved SDK would also use the framework from the same location as the SDK itself - this would not allow running SDK on a different framework location.\r\n* [ ] Support version ranges when specifying framework references and SDK versions - one such scenario is a tool (for example dotnet global tool) which would like to run on the latest available version up to a certain maximum. The minimum version would be the TFM the tool was built to target, the maximum version would be the highest version the tool was tested on. So something like `rollForward=\"LatestMajor\"` but with a defined ceiling.\r\n* [ ] Ability to specify custom install location without using environment variables or command line parameters. Something like ability to specify paths in the `global.json` for both SDK and frameworks - this has non-trivial security and performance implications though",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONEhUzw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzM3Nzk5Nw==",
                                           "createdAt":  "2020-10-12T22:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-12T22:32:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzA4NzI4NA==",
                                           "createdAt":  "2021-07-09T10:33:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Version ranges are also potentially more discoverable as users are used to them from NuGet. See https://github.com/dotnet/runtime/issues/54141 for an example where current roll forward works, but it\u0027s not easily discoverable. Being able to support version ranges would solve that.",
                                           "updatedAt":  "2021-07-09T10:33:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzE1NTUzNQ==",
                                           "createdAt":  "2021-07-09T12:36:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Another request for version ranges - this time to effectively specify max-version (so that the app can be tested against that and will never run on anything higher): https://github.com/dotnet/runtime/issues/45306.",
                                           "updatedAt":  "2021-07-09T12:36:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Improve flexibility of framework and SDK resolution",
        "labels":  [
                       "area-Host",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44894",
        "createdAt":  "2020-11-18T21:28:23Z",
        "number":  44894,
        "author":  "MSLukeWest",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T18:53:19Z",
        "body":  "### Description\r\n\r\nRight now calling hostfxr_close doesn\u0027t unload hostpolicy.dll when necessary.  This was mentioned here (and confirmed in the next reply): https://github.com/dotnet/runtime/issues/36479#issuecomment-629501947 \r\n\r\n### Impact\r\n\r\nIn the scenario mentioned in https://github.com/dotnet/runtime/issues/36479 we\u0027re trying to detect whether or not a runtime dependency is satisfied by calling hostfxr_initialize_for_runtime_config with a simple runtimeconfig.json file.  This works as expected, but since calling hostfxr_close leaves the runtime loaded this strategy doesn\u0027t always work well in practice.  For example, see WiX issue https://github.com/wixtoolset/issues/issues/6264 where we want to use this strategy in a Windows installer custom action, but can\u0027t because the runtime staying loaded means:\r\n\r\n1. Multiple runtime checks may not work as expected\r\n2. The behavior of other custom actions that may want to load the runtime would be effected\r\n\r\n### Regression?\r\n\r\nNot a regression, seems like it\u0027s worked this was since at least 3.1\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK4JqFQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyOTk2NzEyNQ==",
                                           "createdAt":  "2020-11-18T21:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003csummary\u003eIssue Details\u003c/summary\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eDescription:\u003c/th\u003e\n    \u003ctd\u003e\n\n### Description\r\n\r\nRight now calling hostfxr_close doesn\u0027t unload hostpolicy.dll when necessary.  This was mentioned here (and confirmed in the next reply): https://github.com/dotnet/runtime/issues/36479#issuecomment-629501947 \r\n\r\n### Impact\r\n\r\nIn the scenario mentioned in https://github.com/dotnet/runtime/issues/36479 we\u0027re trying to detect whether or not a runtime dependency is satisfied by calling hostfxr_initialize_for_runtime_config with a simple runtimeconfig.json file.  This works as expected, but since calling hostfxr_close leaves the runtime loaded this strategy doesn\u0027t always work well in practice.  For example, see WiX issue https://github.com/wixtoolset/issues/issues/6264 where we want to use this strategy in a Windows installer custom action, but can\u0027t because the runtime staying loaded means:\r\n\r\n1. Multiple runtime checks may not work as expected\r\n2. The behavior of other custom actions that may want to load the runtime would be effected\r\n\r\n### Regression?\r\n\r\nNot a regression, seems like it\u0027s worked this was since at least 3.1\r\n\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMSLukeWest\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-18T21:28:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "hostfxr_close doesn\u0027t unload hostpolicy.dll",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46652",
        "createdAt":  "2021-01-06T21:00:18Z",
        "number":  46652,
        "author":  "awakecoding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-09T13:20:44Z",
        "body":  "I am trying to expose the Microsoft.PowerShell.SDK APIs to native code (C/Rust) with a .NET native host that dynamically loads everything (libhostfxr.so, .NET assemblies, etc) from an *existing* PowerShell 7 installation (.NET 5). [I managed to load and run \"pwsh\" from native code instead of launching it as a subprocess](https://twitter.com/awakecoding/status/1346850032067219462). While this works (!), it can only accept the same arguments as the real \"pwsh\" command-line executable.\r\n\r\nThe real deal would be to load and wrap functions from [System.Management.Automation.dll](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell?view=powershellsdk-7.0.0). Imagine being able to call PowerShell.Create(), .AddScript(), .AddCommand(), .Invoke(), etc, all from a C/Rust. API, instead of calling \"pwsh\" with -EncodedCommand and very little control over the PowerShell engine.\r\n\r\nMy work in progress [code and notes are here](https://github.com/awakecoding/pwsh-native-host). I got started using the HostWithHostFxr sample and wrote my own simplified equivalent in C for Linux. During my tests I figured out how to link and call the nethost library, but I decided against using it for now and simply give it the path to the hostfxr library. In the case of PowerShell, it is relatively easy to find the library (excluding the special PowerShell builds that don\u0027t contain it).\r\n\r\nI have collected a list of relevant links and references on .NET native hosting:\r\n\r\n- https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell\r\n- https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting\r\n- https://github.com/dotnet/runtime/blob/master/docs/design/features/native-hosting.md\r\n- https://github.com/dotnet/runtime/blob/master/docs/design/features/host-components.md\r\n- https://github.com/dotnet/samples/tree/master/core/hosting\r\n- https://github.com/dotnet/runtime/tree/master/src/coreclr/hosts\r\n- https://github.com/dotnet/runtime/tree/master/src/installer/corehost\r\n- https://github.com/dotnet/runtime/blob/master/docs/design/features/host-probing.md\r\n- https://github.com/dotnet/runtime/issues/35329\r\n- https://github.com/dotnet/runtime/issues/35465\r\n- https://github.com/dotnet/runtime/pull/36990\r\n- https://github.com/dotnet/docs/issues/16646\r\n- https://github.com/sanosdole/nodeclrhost\r\n\r\nA lot of them are issues answered by @vitek-karas so I hope this gets noticed!\r\n\r\nFollowing some of these tips given in the issues above, I loaded pwsh.dll from its install location using \"hostfxr_initialize_for_dotnet_command_line\" instead of \"hostfxr_initialize_for_runtime_config\" to workaround the issues with PowerShell being a self-contained executable. I then got it working with a call to hostfxr_run_app, which does some magic under the hood to find the Main entry point and call it. I double checked, I managed to run \"pwsh\" in-process, no \"pwsh\" subprocess was created. This alone is sufficient to call \"pwsh\" without leaking command-line parameters to the entire system, so it is a big win already. Someone could use this technique to launch commands with sensitive data.\r\n\r\nNow the problem is that it gets all blurry when trying to go beyond that, especially when trying to load existing . NET APIs and calling them from C. My understanding is that CoreCLR delegates are required to facilitate the bridge between native code and managed code. The sample uses a simple \"default\" delegate type, and then shows how to make a few custom delegate types, but these appear to require additional definitions in the C# code.\r\n\r\nThe correct values to be passed to \"load_assembly_and_get_function_pointer\" aren\u0027t so clear to me when trying to load functions like Microsoft.PowerShell.ManagedPSEntry.Main(System.String[]) in pwsh.dll. I tried a lot of combinations only to trigger different errors. I know one is not supposed to call Main directly, but even then I should be able to load and attempt calling it.\r\n\r\nIf we forget about the pwsh.dll entry point, a valuable function would be [[System.Management.Automation.PowerShell]::Create()](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell.create?view=powershellsdk-7.0.0), a static function inside System.Management.Automation.dll that creates an instance of the PowerShell object. I just don\u0027t know how to get it loaded and called without creating a custom delegate. Maybe I need to resort to using lower-level CoreCLR APIs? My understanding is that the hostfxr APIs do a lot of heavy-lifting under the hood, so maybe they are not the most appropriate for this.\r\n\r\nPlease guide me to the next steps, I\u0027m stuck figuring out how to load random . NET functions and calling them from C# without having to write additional C# boilerplate. Surely there must be a way to do it, just like JNI in Java? I would rather have a lot more boilerplate code in C than boilerplate in C#, because once I get to port this to Rust, I\u0027ll be able to write a lot of automatic helpers. There is also the possibility of generating a lot of code based on the .NET type definitions (nothing that a good PowerShell script can\u0027t handle).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLYCSAA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTY4ODMwMA==",
                                           "createdAt":  "2021-01-06T21:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am trying to expose the Microsoft.PowerShell.SDK APIs to native code (C/Rust) with a .NET native host that dynamically loads everything (libhostfxr.so, .NET assemblies, etc) from an *existing* PowerShell 7 installation (.NET 5). [I managed to load and run \"pwsh\" from native code instead of launching it as a subprocess](https://twitter.com/awakecoding/status/1346850032067219462). While this works (!), it can only accept the same arguments as the real \"pwsh\" command-line executable.\r\n\r\nThe real deal would be to load and wrap functions from [System.Management.Automation.dll](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell?view=powershellsdk-7.0.0). Imagine being able to call PowerShell.Create(), .AddScript(), .AddCommand(), .Invoke(), etc, all from a C/Rust. API, instead of calling \"pwsh\" with -EncodedCommand and very little control over the PowerShell engine.\r\n\r\nMy work in progress [code and notes are here](https://github.com/awakecoding/pwsh-native-host). I got started using the HostWithHostFxr sample and wrote my own simplified equivalent in C for Linux. During my tests I figured out how to link and call the nethost library, but I decided against using it for now and simply give it the path to the hostfxr library. In the case of PowerShell, it is relatively easy to find the library (excluding the special PowerShell builds that don\u0027t contain it).\r\n\r\nI have collected a list of relevant links and references on .NET native hosting:\r\n\r\n- https://github.com/PowerShell/PowerShell/tree/master/docs/host-powershell\r\n- https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting\r\n- https://github.com/dotnet/runtime/blob/master/docs/design/features/native-hosting.md\r\n- https://github.com/dotnet/runtime/blob/master/docs/design/features/host-components.md\r\n- https://github.com/dotnet/samples/tree/master/core/hosting\r\n- https://github.com/dotnet/runtime/tree/master/src/coreclr/hosts\r\n- https://github.com/dotnet/runtime/tree/master/src/installer/corehost\r\n- https://github.com/dotnet/runtime/blob/master/docs/design/features/host-probing.md\r\n- https://github.com/dotnet/runtime/issues/35329\r\n- https://github.com/dotnet/runtime/issues/35465\r\n- https://github.com/dotnet/runtime/pull/36990\r\n- https://github.com/dotnet/docs/issues/16646\r\n- https://github.com/sanosdole/nodeclrhost\r\n\r\nA lot of them are issues answered by @vitek-karas so I hope this gets noticed!\r\n\r\nFollowing some of these tips given in the issues above, I loaded pwsh.dll from its install location using \"hostfxr_initialize_for_dotnet_command_line\" instead of \"hostfxr_initialize_for_runtime_config\" to workaround the issues with PowerShell being a self-contained executable. I then got it working with a call to hostfxr_run_app, which does some magic under the hood to find the Main entry point and call it. I double checked, I managed to run \"pwsh\" in-process, no \"pwsh\" subprocess was created. This alone is sufficient to call \"pwsh\" without leaking command-line parameters to the entire system, so it is a big win already. Someone could use this technique to launch commands with sensitive data.\r\n\r\nNow the problem is that it gets all blurry when trying to go beyond that, especially when trying to load existing . NET APIs and calling them from C. My understanding is that CoreCLR delegates are required to facilitate the bridge between native code and managed code. The sample uses a simple \"default\" delegate type, and then shows how to make a few custom delegate types, but these appear to require additional definitions in the C# code.\r\n\r\nThe correct values to be passed to \"load_assembly_and_get_function_pointer\" aren\u0027t so clear to me when trying to load functions like Microsoft.PowerShell.ManagedPSEntry.Main(System.String[]) in pwsh.dll. I tried a lot of combinations only to trigger different errors. I know one is not supposed to call Main directly, but even then I should be able to load and attempt calling it.\r\n\r\nIf we forget about the pwsh.dll entry point, a valuable function would be [[System.Management.Automation.PowerShell]::Create()](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell.create?view=powershellsdk-7.0.0), a static function inside System.Management.Automation.dll that creates an instance of the PowerShell object. I just don\u0027t know how to get it loaded and called without creating a custom delegate. Maybe I need to resort to using lower-level CoreCLR APIs? My understanding is that the hostfxr APIs do a lot of heavy-lifting under the hood, so maybe they are not the most appropriate for this.\r\n\r\nPlease guide me to the next steps, I\u0027m stuck figuring out how to load random . NET functions and calling them from C# without having to write additional C# boilerplate. Surely there must be a way to do it, just like JNI in Java? I would rather have a lot more boilerplate code in C than boilerplate in C#, because once I get to port this to Rust, I\u0027ll be able to write a lot of automatic helpers. There is also the possibility of generating a lot of code based on the .NET type definitions (nothing that a good PowerShell script can\u0027t handle).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eawakecoding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-06T21:00:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTcxNzUwOA==",
                                           "createdAt":  "2021-01-06T21:21:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "This seems to be very similar to https://github.com/dotnet/runtime/issues/39798.",
                                           "updatedAt":  "2021-01-06T21:21:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTcyOTc5OQ==",
                                           "createdAt":  "2021-01-06T21:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "/cc @AaronRobinsonMSFT \r\n\r\nThanks @rseanhall for the link to the relevant issue. The short answer is - generate boilerplate code in C#. .NET Core doesn\u0027t have an embedding API (similar to JNI), and right now there are no immediate plans to add it (see the already mentioned #39798 for discussion). It\u0027s still possible to do pretty much everything, but it requires you to write \"helpers\" in C#. The idea is basically:\r\n* Write a helper in C# which wraps whatever .NET functionality you need and exposes it in a method which has native code consumable ABI - so basically only primitive types as parameters and so on.\r\n* Expose this helper to the native code - this might require some marshalling annotations (very similar to what you would do in the oposite direction with PInvokes)\r\n* The native hosting APIs then let you get a native callable function pointer to this managed helper method\r\n* Call it from native code\r\n\r\nIn this specific case the [DNNE](https://github.com/AaronRobinsonMSFT/DNNE) which generates some of this code for you is not going to work, since as you mentioned you need to use the specific hosting route to be able to load self-contained app and run code in it.",
                                           "updatedAt":  "2021-01-06T21:37:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTczODY0OA==",
                                           "createdAt":  "2021-01-06T21:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "\u003e #39798\r\n\r\nthanks, definitely adding that to my list of references!",
                                           "updatedAt":  "2021-01-06T21:58:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTc0MjU4OA==",
                                           "createdAt":  "2021-01-06T22:07:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "\u003e /cc @AaronRobinsonMSFT\r\n\u003e \r\n\u003e Thanks @rseanhall for the link to the relevant issue. The short answer is - generate boilerplate code in C#. .NET Core doesn\u0027t have an embedding API (similar to JNI), and right now there are no immediate plans to add it (see the already mentioned #39798 for discussion). It\u0027s still possible to do pretty much everything, but it requires you to write \"helpers\" in C#. The idea is basically:\r\n\u003e \r\n\u003e * Write a helper in C# which wraps whatever .NET functionality you need and exposes it in a method which has native code consumable ABI - so basically only primitive types as parameters and so on.\r\n\u003e * Expose this helper to the native code - this might require some marshalling annotations (very similar to what you would do in the oposite direction with PInvokes)\r\n\u003e * The native hosting APIs then let you get a native callable function pointer to this managed helper method\r\n\u003e * Call it from native code\r\n\u003e \r\n\u003e In this specific case the [DNNE](https://github.com/AaronRobinsonMSFT/DNNE) which generates some of this code for you is not going to work, since as you mentioned you need to use the specific hosting route to be able to load self-contained app and run code in it.\r\n\r\nThanks, at least now I know that trying to avoid C# boilerplate is a dead end. I can live with that, as long as I can find a way to make my wrapper use the same .NET assemblies as pwsh.dll. I guess all I really have to do is make a wrapper class using the same types available to pwsh.dll (and the full PowerShell distribution), call hostfxr_initialize_for_dotnet_command_line for pwsh.dll but then load my own wrapper DLL compiled separately inside that context.\r\n\r\nI didn\u0027t know about [DNNE](https://github.com/AaronRobinsonMSFT/DNNE), it looks great, it is sad that it won\u0027t be usable for my use case. I\u0027ll keep it in mind though. [I know .NET 5 brought many improvements to native interop](https://devblogs.microsoft.com/dotnet/improvements-in-native-code-interop-in-net-5-0/), especially for C# 9 function pointers, etc.\r\n\r\nSince I don\u0027t mind using PowerShell 7 and later only, I can use whatever is available in .NET 5. Are there more than one approaches to how these wrappers could be implemented, or is it pretty much the same as what is shown in the sample DotNetLib library with the CoreCLR custom delegates? Is it worth looking into unsafe C# code and raw pointers, or you would advise against it?\r\n\r\nThanks!",
                                           "updatedAt":  "2021-01-06T22:07:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTc3Njk3MA==",
                                           "createdAt":  "2021-01-06T23:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I should probably clarify - if you build your own copy of DNNE it should be very simple to support the app/self-contained mode with it, since it\u0027s basically just changing two API calls in the native code. And the value of DNNE is that it can generate native (C/C++) headers for managed methods which is not affected by this at all.\r\n\r\nOr maybe send a PR to DNNE - Aaron should be happy with the addition 😄 ",
                                           "updatedAt":  "2021-01-06T23:27:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTc5NzAyMA==",
                                           "createdAt":  "2021-01-07T00:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eOr maybe send a PR to DNNE - Aaron should be happy with the addition 😄\r\n\r\nHey now!\r\n\r\nMore than willing to add configuration options to DNNE.\r\n\r\n\u003eIs it worth looking into unsafe C# code and raw pointers, or you would advise against it?\r\n\r\nIt is a great way forward in my opinion. The natural native pointer support in C# is a huge benefit since it allows you to do most interop in one language.",
                                           "updatedAt":  "2021-01-07T00:34:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjE0MjMzOA==",
                                           "createdAt":  "2021-01-07T14:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas @AaronRobinsonMSFT thanks for the tips, I\u0027ll try getting a proof of concept done with handmade code first, and then move on to experiment with DNNE. Just from the look of it, DNNE reminds me of [rust-bindgen](https://github.com/rust-lang/rust-bindgen).\r\n\r\nUntil I reach my next milestone, would you have additional references for existing projects that consume the hostfxr APIs? From other tickets here I found [nodeclrhost](https://github.com/sanosdole/nodeclrhost), but I guess there are many other real world projects using it out there. Also, is the hostfxr API the best approach, or should I look into other lower-level CoreCLR APIs if I am to wrap a large number of C# functions?",
                                           "updatedAt":  "2021-01-07T14:15:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjE0ODY0Ng==",
                                           "createdAt":  "2021-01-07T14:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbunzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "awakecoding",
                                                                               "createdAt":  "2021-01-07T14:33:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The `hostfxr` are the recommended way. The direct `coreclr` hosting APIs will not really help with your case (other than the self-contained part which you already have figured out) and it might instead cause trouble (you would need to somehow replace the `.deps.json` parsing which is relatively simple for self-contained, but still). Also there are some managed APIs which don\u0027t work without `hostfxr` hosting (for example `AssemblyDependencyResolver` won\u0027t work if you host the runtime by directly calling `coreclr`).",
                                           "updatedAt":  "2021-01-07T14:26:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjI0MzM5OA==",
                                           "createdAt":  "2021-01-07T17:00:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbxMng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-01-07T20:09:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas @AaronRobinsonMSFT I got it working! 😃 [Here\u0027s a screenshot on twitter](https://twitter.com/awakecoding/status/1347220048444870658).\r\n\r\nOf course, this is all very unclean code, but here\u0027s what I did:\r\n\r\nI made a \"NativeHost\" managed DLL that references Microsoft.PowerShell.SDK, and made custom delegates for System.Management.Automation.PowerShell Create/AddScript/Invoke. I build the managed DLL with the Microsoft.PowerShell.SDK nuget package, and I can run the code using the .NET runtime on my system.\r\n\r\nNow the trick to get it working using *only* an existing PowerShell installation was to load the pwsh.dll runtime config, but instead of calling hostfxr_run_app, I loaded my NativeHost.dll inside that context and called it the same way. I double checked with \"lsof\" on Linux to see which files were loaded inside my native-host process, and it confirmed that when using the pwsh.dll runtime context, I only load assemblies from the PowerShell installation. When I load the same code with the .NET runtime, I see the assemblies from the .NET runtime instead.\r\n\r\nThis means I only really need the nuget package to build, not to run. It\u0027s a bit annoying to have to ship an additional file, but it is definitely doable. Otherwise this would be possible 100% in code without additional files on disk other than pointing to a usable PowerShell 7 installation.\r\n\r\nI have one remaining issue: while the zipped copy of PowerShell 7 for Linux works, for some reason I cannot use PowerShell 7 that comes with the Ubuntu 18.04 packages (in \"/opt/microsoft/powershell/7\"). I. checked, and \"/opt/microsoft/powershell/7/libhostfxr.so\" is there and I can load it, but then it fails on get_runtime_delegate with error code 0x80008081 after a successful call to initialize_for_dotnet_command_line. The exact same works with a copy of PowerShell 7 downloaded from the PowerShell GitHub releases. Any idea what might cause this?",
                                           "updatedAt":  "2021-01-07T17:00:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjMwODMzNw==",
                                           "createdAt":  "2021-01-07T18:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbxMlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-01-07T20:09:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Glad to hear it works!\r\n\r\nFor the failure: PowerShell 7.0.* is a .NET Core 3.1 application, PowerShell 7.1.0 is a .NET 5 application. The necessary support to be able to load self-contained apps via `initialize_for_dotnet_command_line` with your setup was only added in .NET 5.\r\n\r\nAs for the unwanted package reference - you can probably use one of the metadata items described here: https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets to only use the NuGet as reference assembly for compilation, but to not include it in the output.",
                                           "updatedAt":  "2021-01-07T18:49:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjMxNTIyMQ==",
                                           "createdAt":  "2021-01-07T19:01:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas hehe, I literally just figured that my installed PowerShell was 7.0.0, while the one I had downloaded was 7.1.0. I downloaded 7.0.3 to check, and it failed as well. I updated my system package to 7.1.0 and now it works.\r\n\r\nThanks for the compilation tip, that will make things easier. Here is my next question: is there a way to load my managed assembly in memory? This would really be the last step, I promise :) If this could be done, then I could compile and embed my bindings inside the native library, and avoid the need to unpack a dll somewhere on disk in order to load it.\r\n\r\nIt may look a bit extreme, but if I can get that managed DLL loaded in memory, then I successfully managed to load and use PowerShell entirely at runtime, using nothing other than the existing, unmodified PowerShell files on disk. That would make it trivial to import as a library in C or Rust projects. Do you know of a way to load my managed assembly in memory?\r\n\r\nI saw get_runtime_delegate can accept \"hdt_load_in_memory_assembly\" instead of \"hdt_load_assembly_and_get_function_pointer\". It looks like what I need, but trying to get the function pointer gives me HostApiUnsupportedScenario (0x800080A6). I am also unsure about the function signature. [I found this design document](https://github.com/dotnet/runtime/blob/master/docs/design/features/IJW-activation.md), but that\u0027s it. Would this be the correct approach to attempt loading my assembly in memory, avoiding the need for the .dll to be loaded from a file?\r\n\r\nIf I can get that last bit done, then I would consider my proof-of-concept 100% completed, and it\u0027s exciting because I would have a relatively clean way to load PowerShell (and the .NET runtime it comes with!) to any native program, as a library with no link-time dependencies, and without the need for additional files on disk other than PowerShell 7.1+.",
                                           "updatedAt":  "2021-01-07T19:01:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjM1MzQ0Ng==",
                                           "createdAt":  "2021-01-07T20:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "maybe @rseanhall has an idea how to load the managed assembly containing the bindings in memory?\r\n\r\nOne way would be to use [Assembly.Load()](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.load?view=net-5.0#System_Reflection_Assembly_Load_System_Byte___), but I need a way to call it without additional bindings, otherwise I run into a chicken or the egg problem (I need bindings to call Assembly.Load() in order to load by bindings...).\r\n\r\nThe signature looks relatively simple: `public static System.Reflection.Assembly Load (byte[] rawAssembly);`\r\n\r\nOtherwise, are there functions for which exported delegate types already exist in .NET core? Those wouldn\u0027t need custom delegate types in a managed DLL to call with the current hostfxr APIs. The only reason why we need those bindings is to define the delegate types and export static functions matching them.",
                                           "updatedAt":  "2021-01-07T20:07:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQxMTc5NQ==",
                                           "createdAt":  "2021-01-07T21:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Honestly even the delegate type would not be enough - there\u0027s basically no good way to construct a `byte[]` in native code (without some serious hacking).\r\n\r\nFor a library I can\u0027t think of a way to do this. There might be a way to do this for an executable (meaning your native code would be an executable which embeds the managed helper) - the .NET 5 single-file bundle probe could in theory be used for that - but it\u0027s something like \"hack level 9000\" 😉 .",
                                           "updatedAt":  "2021-01-07T21:57:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQzMTYxNA==",
                                           "createdAt":  "2021-01-07T22:41:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "I decided to try making a separate \"NativeHelper\" library just to wrap Assembly.Load() + Assembly.LoadFile() and try using it to load my \"real\" wrapper DLL. It won\u0027t solve the issue, but it can help iron out the procedure if I can find a way to do it without the \"NativeHelper\" wrapper.\r\n\r\nI thought it would be easy, but once I load that new assembly and get the function pointers, I can use it to call Assembly.LoadFile (I\u0027ll try Assembly.Load after) without errors. But then I need to replace my calls to load_assembly_and_get_function_pointer by get_function_pointer, as the original function takes the full path to the assembly file (unless I missed something?). I adapted my calls, but it results in 0x80070002 (file not found) error when calling get_function_pointer.\r\n\r\nHere is the original call:\r\n\r\n```\r\n         hostfxr-\u003eload_assembly_and_get_function_pointer(assembly_path,\r\n            \"NativeHost.Bindings, NativeHost\", \"PowerShell_Create\",\r\n            UNMANAGEDCALLERSONLY_METHOD, NULL, (void**) \u0026iface-\u003eCreate);\r\n```\r\n\r\nand the modified call that fails (g_LoadAssemblyFile is my NativeHelper wrapper):\r\n\r\n```\r\n        g_LoadAssemblyFile(assembly_path);\r\n\r\n        rc = hostfxr-\u003eget_function_pointer(\r\n            \"NativeHost.Bindings, NativeHost\", \"PowerShell_Create\",\r\n            UNMANAGEDCALLERSONLY_METHOD, NULL, NULL, (void**) \u0026iface-\u003eCreate);\r\n```\r\n\r\nHere are my native helpers:\r\n\r\n```\r\nnamespace NativeHelper\r\n{\r\n    public static class Bindings\r\n    {\r\n        [UnmanagedCallersOnly]\r\n        public static void LoadAssemblyData(IntPtr ptr, int size)\r\n        {\r\n            byte[] bytes = new byte[size];\r\n            Marshal.Copy(ptr, bytes, 0, size);\r\n            Assembly.Load(bytes);\r\n        }\r\n\r\n        [UnmanagedCallersOnly]\r\n        public static void LoadAssemblyFile(IntPtr ptr)\r\n        {\r\n            string filename = Marshal.PtrToStringUTF8(ptr);\r\n            Assembly.LoadFile(filename);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDid I miss anything? At a bare minimum this would be useful to embed most of the code that is subject to frequent change, where the only external file would be a tiny helper that would remain pretty much the same over time. And then, we could potentially find a way to get rid of it entirely, and reach my dream goal 😄 ",
                                           "updatedAt":  "2021-01-07T22:41:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQzNDk4Mw==",
                                           "createdAt":  "2021-01-07T22:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbyIHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "awakecoding",
                                                                               "createdAt":  "2021-01-07T22:53:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "I fought *hard* in https://github.com/dotnet/runtime/issues/35465 to get the `coreclr_create_delegate` functionality exposed through the hostfxr APIs. This allowed you to call arbitrary static methods without having to have a delegate type for the signature. Of course, the signature would need to be callable by native code. They weren\u0027t interested.\r\n\r\nIf all of the methods you want to call meet that criteria, then you could theoretically use `coreclr_create_delegate` and not even need a managed assembly. You could also target .NET Core 3.1. Like @vitek-karas said though, this could mean some managed APIs don\u0027t work. My statement [here](https://github.com/dotnet/runtime/issues/39587#issuecomment-660917683) is still true: you can currently use a combination of both hostfxr APIs and coreclr APIs to get everything working.\r\n\r\nThe WiX native host is here: https://github.com/wixtoolset/Bal.wixext/blob/master/src/dnchost/dncutil.cpp.",
                                           "updatedAt":  "2021-01-07T22:51:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQzNjA3NA==",
                                           "createdAt":  "2021-01-07T22:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is currently a limitation of the hosting APIs - the `get_function_pointer` can currently only return delegates from the default load context - so it won\u0027t find the assembly there. We do plan to eventually enable this on any ALC (see that it takes a `load_context` parameter, which must be `NULL` for now).\r\n\r\nThis combined with your usage of `Assembly.LoadFile` which will load the assembly into a new custom load context (that\u0027s what it does, always) - so the `get_function_pointer` can\u0027t find it in the default ALC and fails.\r\n\r\nIn general, please don\u0027t use `Assembly.Load*` methods in any code which is potentially related to load contexts (or really any code if at all possible) - these APIs are basically legacy APIs from .NET Framework and thus they try to emulate the behavior from .NET Framework days. It is much better to use the `Load` APIs on `AssemblyLoadContext` since that makes it explicit into which load context the assembly will be loaded. So for example `AssemblyLoadContext.LoadFromAssemblyPath` or `AssemblyLoadContext.LoadFromStream`.\r\n\r\nSo to solve this problem you can call `AssemblyLoadContext.Default.LoadFromAssemblyPath` instead of `Assembly.LoadFile` and it \"should\" work.\r\n",
                                           "updatedAt":  "2021-01-07T22:54:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQzNzcwOQ==",
                                           "createdAt":  "2021-01-07T22:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "The library you specify in `get_function_pointer` must already be loaded. The way we do this is to specify the managed assembly as the target dll, but use the deps.json and runtimeconfig.json file from the application. So for the command line given to `hostfxr_initialize_for_dotnet_command_line`:\r\n\r\n\u003e exec --depsfile \u003cpath\\to\\powershell.deps.json\u003e --runtimeconfig \u003cpath\\to\\powershell.runtimeconfig.json\u003e \u003cpath\\to\\custommanagedassembly.dll\u003e",
                                           "updatedAt":  "2021-01-07T22:58:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ0MDAwNQ==",
                                           "createdAt":  "2021-01-07T23:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas I modified my native helper to use AssemblyLoadContext and it worked this time, including loading from memory. I still have that NativeHelper.dll in the way, but at least now it is limited to just those functions instead of the entire set of bindings:\r\n\r\n```\r\nnamespace NativeHelper\r\n{\r\n    public static class Bindings\r\n    {\r\n        [UnmanagedCallersOnly]\r\n        public static void LoadAssemblyData(IntPtr ptr, int size)\r\n        {\r\n            byte[] bytes = new byte[size];\r\n            Marshal.Copy(ptr, bytes, 0, size);\r\n            Stream stream = new MemoryStream(bytes);\r\n            AssemblyLoadContext.Default.LoadFromStream(stream);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSo... basically the *only* thing I need is this function with 4 lines of code... that\u0027s it. Once I can load my managed DLL from memory, I no longer need other files on disk other than PowerShell.\r\n\r\nI will now take a closer look at what @rseanhall pointed to, maybe I can figure out a way to use coreclr_create_delegate to get rid of this tiny little function that remains :)",
                                           "updatedAt":  "2021-01-07T23:04:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ0MzAxNg==",
                                           "createdAt":  "2021-01-07T23:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "If you can find it - I would be interested to know for sure - I can\u0027t think of a way to do that currently - basically all of the \"load from memory\" APIs take either `byte[]` or `Stream` which are managed objects, and currently there\u0027s now to pass managed object from native code.\r\n\r\nWell - maybe the `byte[]` - @AaronRobinsonMSFT  - will the default marshaling (without any attributes) somehow marshal `byte[]` parameters for reverse-PInvoke? And if so, what would the native signature look like?",
                                           "updatedAt":  "2021-01-07T23:12:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ0ODk1Ng==",
                                           "createdAt":  "2021-01-07T23:29:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eWell - maybe the byte[] - @AaronRobinsonMSFT - will the default marshaling (without any attributes) somehow marshal byte[] parameters for reverse-PInvoke? And if so, what would the native signature look like?\r\n\r\nFor a reverse P/Invoke it would make a copy et al. However, I believe the delegate is what would need the attributes - still doesn\u0027t get around requiring a managed assembly. The signature on would use the [`SizeParamIndex`](https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.marshalasattribute.sizeparamindex) property on the `MarshalAs` attribute. Ideally the ALC API would have a function that takes in a `byte*` that we would only expose via reflection/native so the above scenario would be simple.",
                                           "updatedAt":  "2021-01-07T23:29:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ1MDY4NA==",
                                           "createdAt":  "2021-01-07T23:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas @AaronRobinsonMSFT if we can\u0027t find a way to make it work, would it make sense to extend the hostfxr API to facilitate loading assemblies in memory? Once we can do that, all that is required to do pretty much anything is to compile a DLL with whatever you need. This gives a reasonable one-size-fits-all solution for file-less C# bindings.\r\n\r\n@rseanhall your approach using coreclr_create_delegate is probably the only one that could work without modifying the hostfxr APIs. I\u0027ll give it a shot tomorrow!",
                                           "updatedAt":  "2021-01-07T23:33:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ2MDc0Nw==",
                                           "createdAt":  "2021-01-08T00:02:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eextend the hostfxr API to facilitate loading assemblies in memory?\r\n\r\nPerhaps, but I don\u0027t think we would want such a narrowly defined API. I am of the opinion the entire hosting API could be drastically reduced to a much simpler set to facilitate hosting, but we are bound by backwards compat and ownership costs. I am passively following this thread, but it seems the gist here is the desire to permit a hosting scenario owner to write no managed code. Is that right?\r\n\r\nI think this sort of exists with the single file logic, however it isn\u0027t exposed in a consumable manner. @vitek-karas owns this API surface area but we have talked extensively about what we could do going forward. I think there is a case to be made for a set of APIs that permit ALC creation and ownership release and then a set of APIs that permit loading an assembly in one of those ALCs from either a `char*`/`wchar_t*` or a `byte*`. Once the ALC is primed in the desired manner the other APIs could be updated to accept the ALC to use and we let people do as they wish. The default ALC concept is troublesome though and the interaction model complicated as it relates to loaded assemblies and type interaction. I\u0027m unclear if we would want to permit any interaction with the default ALC but it would be possible.",
                                           "updatedAt":  "2021-01-08T00:02:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Njc0MjA0MA==",
                                           "createdAt":  "2021-01-08T12:57:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Overall this is not that different from the discussions in this issue: https://github.com/AaronRobinsonMSFT/DNNE/issues/30. If we had a way to implement the solution for this issue - it would be basically a solution your problem as well.\r\n\r\nBasically ability to create a single-file library/component/plugin - in this case with the added \"complexity\" of it being a native library. As mentioned above, this would already be possible for executables because the runtime has support for single-file executables (with embedded assemblies) - it\u0027s just not available for libraries (the runtime assumes the embedded assemblies to live in the main module, which would not be true in this case).",
                                           "updatedAt":  "2021-01-08T12:57:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Njc5MDAzOA==",
                                           "createdAt":  "2021-01-08T14:41:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas I think you understand the scope of the problem, the only thing required to make native single-file libraries or applications possible is a way to load assemblies in memory. This way, one can compile the managed DLL required for the bindings at compile time, and embed it inside the final library.\r\n\r\nAt runtime, the library can then load the hostfxr APIs, load the runtime config of an unmodified .NET application (pwsh in my case), and then load in-memory managed DLL that facilitates calling the C# functions from a native language.\r\n\r\nIt is the last part that causes problem right now, as we don\u0027t want to either install or extract this managed DLL, the ideal solution would be to have everything required to load and call unmodified .NET applications built-in to the application or library.\r\n\r\nC doesn\u0027t have an easy way of embedding resources inside libraries (not applications!) other than the good old trick of \"compiling\" resources as a very large static array of bytes. For my C/C++ projects I made my own cross-platform resource compiler, [Yet-Another-Resource-Compiler (YARC)](https://github.com/devolutions/yarc) to streamline the process, even adding optional lz4 compression. However, that part being non-standard, it should really be left up to choice. If we can load assemblies in memory, you just need to figure out a way to embed and load the resources in memory with the technique of your choosing.\r\n\r\nAs for Rust, it has this [magical include_bytes!() macro](http://m4rw3r.github.io/rust/std/macro.include_bytes!.html) to compile the contents of a file as a static array, making the whole process much easier than with C. In all cases, you get the point: loading assemblies in memory makes this kind of embedding possible, and we can successfully compile everything needed to load and call unmodified C# assemblies by compiling the required bindings as an embedded resource loaded at runtime.\r\n\r\nHere\u0027s my plan for Rust support (I haven\u0027t looked at DNNE yet):\r\n\r\n- Use C# reflection to generate bindings for the target assemblies\r\n- Compile the C# bindings (the [UnmanagedCallersOnly] methods for easier FFI) using \"dotnet\"\r\n- Compile the corresponding Rust bindings matching the C# FFI inside the library\r\n- Embed assembly containing C# bindings inside library/application with include_bytes()\r\n\r\nThe result is a generic way to compile Rust code that can call unmodified C# assemblies. I actually like the C# bindings as compiled assemblies, it has its advantages. One can easily adapt the function signatures and use different marshalling strategies that fit the foreign language best. It\u0027s probably the best approach to make the glue layer required, it just needs a way to be loaded entirely in-memory without the need for this glue layer assembly to be in an external file.",
                                           "updatedAt":  "2021-01-08T14:41:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Njc5NzM0OQ==",
                                           "createdAt":  "2021-01-08T14:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas @AaronRobinsonMSFT this being said, the missing functionality is already indirectly exposed through load_assembly_and_get_function_pointer. We have a \"get_function_pointer\" function, so why is there no separate \"load_assembly\" function?\r\n\r\nCalls to load_assembly_and_get_function_pointer [ultimately end up in ComponentActivator.cs](https://github.com/dotnet/runtime/blob/master/src/coreclr/System.Private.CoreLib/src/Internal/Runtime/InteropServices/ComponentActivator.cs). The function looks like this:\r\n\r\n```\r\n        [UnmanagedCallersOnly]\r\n        public static unsafe int LoadAssemblyAndGetFunctionPointer(IntPtr assemblyPathNative,\r\n                                                                   IntPtr typeNameNative,\r\n                                                                   IntPtr methodNameNative,\r\n                                                                   IntPtr delegateTypeNative,\r\n                                                                   IntPtr reserved,\r\n                                                                   IntPtr functionHandle)\r\n        {\r\n            try\r\n            {\r\n                // Validate all parameters first.\r\n                string assemblyPath = MarshalToString(assemblyPathNative, nameof(assemblyPathNative));\r\n                string typeName = MarshalToString(typeNameNative, nameof(typeNameNative));\r\n                string methodName = MarshalToString(methodNameNative, nameof(methodNameNative));\r\n\r\n                if (reserved != IntPtr.Zero)\r\n                {\r\n                    throw new ArgumentOutOfRangeException(nameof(reserved));\r\n                }\r\n\r\n                if (functionHandle == IntPtr.Zero)\r\n                {\r\n                    throw new ArgumentNullException(nameof(functionHandle));\r\n                }\r\n\r\n                // Set up the AssemblyLoadContext for this delegate.\r\n                AssemblyLoadContext alc = GetIsolatedComponentLoadContext(assemblyPath);\r\n\r\n                // Create the function pointer.\r\n                *(IntPtr*)functionHandle = InternalGetFunctionPointer(alc, typeName, methodName, delegateTypeNative);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                return e.HResult;\r\n            }\r\n\r\n            return 0;\r\n        }\r\n```\r\n\r\nThe `GetIsolatedComponentLoadContext(assemblyPath)` is capable of loading assemblies that are not already loaded in the current context using the file path. If all we could do is expose exactly the same thing, except using a byte array or a file path, then one could load assemblies and call get_function_pointer in two separate steps.\r\n\r\nWe just need a new \"load_assembly\" function to complement \"load_assembly_and_get_function_pointer\" and \"get_function_pointer\", and we\u0027d be in business 😄 ",
                                           "updatedAt":  "2021-01-08T14:55:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjgyMTQ1Mg==",
                                           "createdAt":  "2021-01-08T15:37:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@rseanhall I took a closer look at what you pointed to, you seem to have gone through a great deal of pain to make it work.\r\n\r\nSo here\u0027s my understanding:\r\n\r\nThe hostfxr API is the newer recommended option. It is heavily simplified as opposed to the older CoreCLR host API, but it unfortunately fails to provide 100% of the required functionality. The devil being in the details, you are left frustrated having to resort to mixing using the older and newer APIs to complement what the new one is unable to achieve. I hear you, as I appear to face the same kind of wall now, except you came earlier and actually worked to improve the hostfxr APIs before.\r\n\r\nFor the current prototype, my only concern is being able to load additional assemblies in memory, and the only way this appears possible is to load the CoreCLR APIs and mix them with the hostfxr APIs. This kind of defeats the purpose of using the hostfxr APIs entirely, as it\u0027s meant to be easier, not more difficult. I also haven\u0027t looked at how to deal with exception handling, [which is apparently also an open issue](https://github.com/dotnet/runtime/issues/39587).\r\n\r\nI don\u0027t believe in magic, abstractions are nice but not when they make certain things impossible. @vitek-karas @AaronRobinsonMSFT at this point in time, is the older CoreCLR API really the only way to make it work? I know you\u0027ve been pushing for the newer hostfxr APIs and I understand why, but unless they can be updated to fill in the gaps in functionality, it does look like using lower-level APIs would be the way to go.\r\n\r\nI\u0027m open to suggestions. If the CoreCLR API should be deprecated, then the hostfxr API needs improving. @rseanhall already pushed hard for certain changes (thanks!). Aside from the lack of in-memory assembly loading and potential limitations with regards to exception handling, are there other limitations and \"surprises\" I should be aware of?",
                                           "updatedAt":  "2021-01-08T15:41:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjgyNTczMQ==",
                                           "createdAt":  "2021-01-08T15:45:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "I didn\u0027t realize you had glue code, I thought you were just declaring delegates so you could call static methods in Powershell. My comments about `coreclr_create_delegate` don\u0027t really apply since your use case requires a managed assembly anyway. It wouldn\u0027t have helped with loading an assembly.",
                                           "updatedAt":  "2021-01-08T15:45:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjgzMDU3Ng==",
                                           "createdAt":  "2021-01-08T15:53:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBb3R2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "awakecoding",
                                                                               "createdAt":  "2021-01-08T15:58:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "\u003e We just need a new \"load_assembly\" function\r\n\r\nhttps://github.com/dotnet/runtime/pull/37696#discussion_r438061553",
                                           "updatedAt":  "2021-01-08T15:53:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjgzMTMyMA==",
                                           "createdAt":  "2021-01-08T15:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "\u003e I didn\u0027t realize you had glue code, I thought you were just declaring delegates so you could call static methods in Powershell. My comments about `coreclr_create_delegate` don\u0027t really apply since your use case requires a managed assembly anyway. It wouldn\u0027t have helped with loading an assembly.\r\n\r\nMy issue is not really with the glue code, it is that right now I don\u0027t have a way to load my glue code in memory (it has to be in a file on disk, so I can\u0027t link it \"statically\"). So in a way, using coreclr_create_delegate may be the solution to my problem if I can use it without glue code... to load my glue code. I am just not sure how I could use coreclr_create_delegate to load my assembly in memory.",
                                           "updatedAt":  "2021-01-08T15:56:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjgzNzgwNA==",
                                           "createdAt":  "2021-01-08T16:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "\u003e \u003e We just need a new \"load_assembly\" function\r\n\u003e \r\n\u003e [#37696 (comment)](https://github.com/dotnet/runtime/pull/37696#discussion_r438061553)\r\n\r\nLet\u0027s say I were to make a very minimal NativeHelper.dll that I embed into my library with the intent of temporarily extracting to to the disk. Is it possible to call load_assembly_and_get_function_pointer on this file once, and delete it afterwards, or does the file need to remain on disk once it\u0027s been loaded?\r\n\r\nI don\u0027t like this approach because of all the potential issues associated with dumping a DLL in a temporary location (AVs definitely are not going to like that!) but it could serve as a temporary method for isolating just the part that I can\u0027t call without glue code. I would still structure my project such that 99% if of the glue code is in another DLL that is loaded in-memory using the 1% glue code from the NativeHelper.dll, hoping that one day I can get rid of it entirely.",
                                           "updatedAt":  "2021-01-08T16:05:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzM2MTA4Ng==",
                                           "createdAt":  "2021-01-09T20:14:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "Just another thought: rather than expose APIs to load assemblies from a byte buffer, would there be a way to implement a \"file system provider API\" specifically for the assembly loading?\n\nBy this I mean exposing an interface that can be implemented such that when trying to load \"ManagedHost.dll\" from the filesystem, one could intercept the call in memory and provide the result, as if it were there when it isn\u0027t.\n\nI know this is significantly more difficult to implement than the first approach, but I was thinking that with something like this, you no longer have to provide special APIs for anything that expects files.\n\nHow does .NET in WebAssembly work exactly? The browser doesn\u0027t have the \"regular\" file system APIs, but I guess .NET has a special way of looking for \"files\" when loading the assemblies inside the browser environment.",
                                           "updatedAt":  "2021-01-09T20:14:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Nzc4MDQ3OQ==",
                                           "createdAt":  "2021-01-11T09:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@awakecoding That is kind of what the bundle probe in .NET 5 single-file does - it\u0027s not as flexible (can\u0027t load from random memory and so on). Note that loading assemblies is not a simple \"read file\" - the usual way runtime loads assemblies is by memory mapping the files. It\u0027s even more complicated for Ready 2 Run images which are typically loaded via `LoadLibrary` on windows (though single-file now added the support to load from other locations - but it requires a memory copy).\r\n\r\nNot saying it can\u0027t be done, just that it would be relatively significant investment.\r\n\r\nVarious targets have different ways to load assemblies which are specific to that target - WebAssembly\u0027s runtime is modified to load from the browser\u0027s virtual file system, Android\u0027s runtime has a different implementation, iOS another one and so on. They don\u0027t use common API to achieve this. Maybe for some it would make a bit of sense, but I suspect it\u0027s very target depndent. That said, these code paths are scrutinized for security and performance, and thus changing them would involve all of those considerations as well.",
                                           "updatedAt":  "2021-01-11T09:19:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODIyNzM3MQ==",
                                           "createdAt":  "2021-01-11T21:11:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas thanks for the clarification, so if I were to temporarily extract my DLL on disk, I would have to keep it there because of the file lock. I agree we probably shouldn\u0027t make this more complex than it should, I would be more than happy with a solution that works without relying on new APIs.\r\n\r\nTo avoid spending too much time on coreclr_create_delegate, is there much of a difference with this older function as opposed to load_assembly_and_get_function_pointer? both seem to give you a pointer to a delegate which you can call from native code, but you need a function callable from native code for that, which is where you need the bindings to facilitate things.\r\n\r\nHere\u0027s my understanding with regards to the limitations for what you can call without bindings\r\n- static functions only\r\n- primitive types only\r\n- watch out for the GC\r\n\r\nHere\u0027s the challenge: implement this \"simple\" function using nothing more than functions one can call from native code without a managed API wrapper:\r\n\r\n```\r\n        public static void LoadAssemblyData(IntPtr ptr, int size)\r\n        {\r\n            byte[] bytes = new byte[size];\r\n            Marshal.Copy(ptr, bytes, 0, size);\r\n            Stream stream = new MemoryStream(bytes);\r\n            AssemblyLoadContext.Default.LoadFromStream(stream);\r\n        }\r\n```\r\n\r\nI don\u0027t mind if it requires 20 different native function pointers, if it can be done, it\u0027ll solve the problem without any modifications to the current API. It will also be somehow adaptable, so everybody wins. It may seem overkill for just one function, but once I can get it, I will call it to load the rest of the bindings (99.99%).\r\n\r\n[Marshal.Copy() is a static function](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.copy?view=net-5.0#System_Runtime_InteropServices_Marshal_Copy_System_IntPtr_System_Byte___System_Int32_System_Int32_), so I guess we could call it directly to facilitate transferring the byte buffer to managed code?\r\n\r\nI don\u0027t know about the rest, but this is one place where I would love to have PowerShell \"New-Object\". Which static functions could be used to create objects by name, and invoke specific member functions, etc? Are there APIs that are generic over System.Object to do that?\r\n\r\n",
                                           "updatedAt":  "2021-01-11T21:11:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODU3NzUxMg==",
                                           "createdAt":  "2021-01-12T10:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I\u0027m not aware of existing functions which would do what you\u0027re looking for. As you correctly state, you can\u0027t call instance methods via the \"create delegate\" mechanism called directly from native code (you can once you\u0027re in managed and return a bound delegate - that should work, but for that you have to run some code in managed).\r\n\r\nWhile in theory calling `Marshal.Copy` might be possible (although I would be surprised if interop didn\u0027t choke on it in some way) - it would be very dangerous. If you by some trick did get a managed reference back to native, it would create a GC hole - that reference would not be tracked by GC. And so if GC decided to move that object, it would not update the reference and you would end up with basically invalid pointer. But again - I don\u0027t think interop will let you do this (I definitely hope so).\r\n\r\nCurrently I can\u0027t think of a way to do this without file on disk. You\u0027re correct that the changes to allow this would relatively minimal, but they would have to ship in the core framework. And while I do understand your scenario and why you want to do this - it is a very special case. So far what I\u0027ve seen most native hosting scenario always involve custom code on the managed side as well, and thus can easily accommodate couple of additional helpers for native/managed communication.\r\n\r\nYou\u0027re mostly right about `coreclr_create_delegate` and `load_assembly_and_get_function_pointer` being very similar. In fact the latter is implemented by calling the former. The only meaningful differences are:\r\n* `coreclr_create_delegate` always works on the default load context - while the other one always loads into secondary load context.\r\n* `coreclr_create_delegate` doesn\u0027t require managed delegate type - it creates one on the fly. The other one currently requires a matching managed delegate type.",
                                           "updatedAt":  "2021-01-12T10:56:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODkwNTcwMw==",
                                           "createdAt":  "2021-01-12T20:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas thank you for your patience with me, I appreciate it. I\u0027m running out of ideas that don\u0027t seem farfetched at this point, there are many ways one could load and call new functions at runtime, but it would require access to JIT functionality, which is again not exposed to native code directly.\r\n\r\nI\u0027ve asked Raffaele Rialdi on twitter about this, [and he pointed to the possibility of using COM](https://twitter.com/raffaeler/status/1348756838699954176) (even on Linux) \"manually\" to make the calls. Is this even a possibility? In theory COM is cross-platform and I did write a bit of COM interface code the hard way in pure C in the past that would work on Linux. I know it sounds insane, but if you tell me there\u0027s a way to use COM with cross-platform .NET core, I\u0027d be down to give it a shot.\r\n\r\nSpeaking of COM, the old COM hosting APIs support loading assemblies in memory. The [interface header can be found here](https://github.com/dotnet/runtime/blob/master/src/coreclr/pal/prebuilt/inc/mscoree.h) and I am really curious if the actual interface implementation behind it is available in non-Windows builds. [I found that someone recently went quite far in hosting .NET inside Go using this COM interface](https://blog.ropnop.com/hosting-clr-in-golang/), and one of the interesting aspect of the integration is the in-memory assembly loading.\r\n\r\nIs this COM interface implementation available on non-Windows builds? If it is, then I found the solution to my problem, but I won\u0027t keep my hopes up yet. The [design docs say this interface is deprecated and shouldn\u0027t be used any more](https://github.com/dotnet/runtime/blob/master/docs/design/features/native-hosting.md#existing-support), so even if it turns out to be usable, there\u0027s no guarantee it will remain available in the future.\r\n\r\nI\u0027m glad that you understand my use case and why I am trying so hard to find a way to load assemblies in memory, but is it really that much of a very special case? Once you allow in-memory assembly loading, then it becomes possible for any compiled language to compile C# bindings and embed them into libraries or applications, allowing flexible interoperability with unmodified .NET assemblies. Since these bindings really have to match the corresponding foreign language bindings (Rust, C, C++, even Go), they really have to bundled with the executable code. A lot of these languages favor static linking, so shipping multiple files like what is so commonly done with .NET applications is a major pain.\r\n\r\nThis issue is about loading and hosting PowerShell, but the same applies to the regular .NET. Why would you not want to load C# assemblies from any foreign language without the need for shipping additional C# bindings? Everything is statically linked in except the C# code containing the bindings that make the FFI possible, it\u0027s not really something I want outside of my build artifacts as an external file (it is subject to change and very build-specific).\r\n\r\nForget about my \"LoadAssemblyData\" function implementation: is there a potential compromise for a generic-enough API you could consider adding to the hostfxr APIs? All we really need is a way to load and call a managed function in memory inside the hostfxr context. I would use it to load a function in-memory that lets me load my assemblies in-memory, but it doesn\u0027t have to be specific to that.\r\n\r\nThe real underlying need is this: load and call a managed function in memory using the hostfxr APIs. It\u0027s probably cleaner to load that function from a compiled assembly, but it could be just about anything, as long as we get a clean enough way to do it that you feel would possibly serve more than just the current problem I am trying to solve. Surely there are other use cases for loading functions or assemblies entirely in memory? What about cases where the executable can be run but has no write access, etc? One thing I know for sure is that loading assemblies in memory isn\u0027t forbidden in any way inside C# code, so I don\u0027t see why it wouldn\u0027t be useful to expose it to native code as well.\r\n\r\nWould you have alternative suggestions for how the hostfxr API could be improved to allow loading and running a chunk of C# code in memory, or anything else that could be leveraged to make in-memory assembly loading possible? It doesn\u0027t have to be a function explicitly built for loading assemblies, as long as it can be used to do that.\r\n\r\nThe funny thing is that since this is PowerShell, I could very well just call hostfxr_run_app and give it an EncodedCommand that loads an assembly in memory, but then I lose all control over the execution because it\u0027ll be the same as launching PowerShell and waiting for it to finish. If I could do something like that but retain the execution context, it would \"solve\" the problem in a PowerShell-specific way.",
                                           "updatedAt":  "2021-01-12T20:06:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODkyNTM1MA==",
                                           "createdAt":  "2021-01-12T20:26:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "That link about hosting Go in .NET is talking about .NET Framework, not .NET Core. If that functionality was available in .NET Core, I would have used that instead (since I already had the code to work with .NET Framework).",
                                           "updatedAt":  "2021-01-12T20:26:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk0MjkxNQ==",
                                           "createdAt":  "2021-01-12T20:36:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "I have to clarify my words on twitter.\r\nI wrote a custom debugger using the .NET Core Debugging API which are COM based even on Linux.\r\nOf course they don\u0027t use other COM stuff other than the ABI, therefore I was able to write my own infrastructure emulating IUnknown machinery (VTable, AddRef, Release and QueryInterface) in the objects that I had to implement to fully support the calls and the callbacks.\r\nIt was a very long and hard work but my \"emulation\" worked on Windows, Linux and Linux/ARM.\r\nGiven the amount of needed work, it is not something that I reccomend unless there is a specific need (and there is in my case).\r\n\r\nAnyway, I never tried this way for the hosting API. On my side I am hosting .NET Core with them in order to interoperate with NodeJS and it works very well, but I had no need to get rid of the files, therefore I use one of my assembly to load the other assemblies.",
                                           "updatedAt":  "2021-01-12T20:36:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk0NTU4MA==",
                                           "createdAt":  "2021-01-12T20:37:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@rseanhall I hadn\u0027t realized it was specific to the .NET Framework, my bad. Doesn\u0027t .NET Core also have a COM hosting API?\r\n\r\nI checked and libcoreclr.so exports \"GetCLRRuntimeHost\" [which is implemented in corhost.cpp](https://github.com/dotnet/runtime/blob/master/src/coreclr/vm/corhost.cpp). Now I don\u0027t want to get excited too quickly, but it does look like the COM hosting API is built for non-Windows in .NET Core, so maybe there is hope.\r\n\r\nHowever, the corresponding unit test I could find is behind #ifdef WINDOWS and won\u0027t run anything on non-Windows, and since this the old COM hosting API, it is deprecated and could be pulled at any time in a future release. If this works, it would require a fair amount of work and I\u0027d be happy to do it, but we should plan for a possible matching function in the newer APIs.",
                                           "updatedAt":  "2021-01-12T20:37:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk1NDQ5Nw==",
                                           "createdAt":  "2021-01-12T20:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBcNqFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2021-01-12T20:46:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@awakecoding  I think (just my opinion, which could be entirely wrong) that the special case is the fact that you want to load prepackaged .NET code without any modifications (Powershell in this case). That is not very common - most native hosting scenarios I\u0027ve heard of are perfectly OK to package stuff on their own - most of the time it\u0027s actually necessary as they use possibly existing libraries which are shipped as either NuGet or other mechanism, but don\u0027t come \"preinstalled\" on the machine in any way. So the custom host must package them anyway. In such case it\u0027s easy to add one more dll into that package.\r\n\r\nI\u0027m not saying that loading code from memory from custom host is something we don\u0027t want to ever do - there are other scenarios which might require similar capabilities:\r\n* \"Shadow copy\" - like functionality - ability to load all application code into memory and release the files on disk - this could be done by the host - the goal is to be able to overwrite the files on disk while the app is running.\r\n* Single-file components - ability to package mutliple assemblies into one binary and load them from it - not just from the executable (like existing single-file apps), but even managed dlls, or (like in your case) native dlls. These are still loaded \"from file\", but not directly.\r\n\r\nIt\u0027s just that none of these scenarios made it onto the plan yet...",
                                           "updatedAt":  "2021-01-12T20:42:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk2MDAyOQ==",
                                           "createdAt":  "2021-01-12T20:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBcNyfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2021-01-12T20:47:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "awakecoding",
                                                                               "createdAt":  "2021-01-12T21:03:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The old hosting interfaces which are COM-like are definitely deprecated. Some of them might work, but we might pull them out in future versions. Also note that these are not really COM - they just rely on `IUnknown` and vtables - just like @raffaeler usage of debugger interfaces. \r\n\r\nTrue COM support is definitely Windows-only - ability to marshal COM objects/interfaces between native and managed is only available on Windows - the code doesn\u0027t exist in other builds of CoreCLR - @AaronRobinsonMSFT  would be the best person to talk about that. I\u0027m not aware of any plans to change that anytime soon.",
                                           "updatedAt":  "2021-01-12T20:46:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk2ODM3OQ==",
                                           "createdAt":  "2021-01-12T20:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBcNybw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2021-01-12T20:53:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "awakecoding",
                                                                               "createdAt":  "2021-01-12T21:03:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "`ICORRuntimeHost`, the backbone of the example you linked to, is not available on .NET Core.",
                                           "updatedAt":  "2021-01-12T20:50:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk3NzQ3MA==",
                                           "createdAt":  "2021-01-12T20:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eThe old hosting interfaces which are COM-like are definitely deprecated.\r\n\r\nAgree. +1. [all other forms of agreement]\r\n\r\n\u003eTrue COM support is definitely Windows-only - ability to marshal COM objects/interfaces between native and managed is only available on Windows - the code doesn\u0027t exist in other builds of CoreCLR - @AaronRobinsonMSFT would be the best person to talk about that. I\u0027m not aware of any plans to change that anytime soon.\r\n\r\nThis is accurate. Built-in COM ABI support (i.e. COM marshalling on Windows) is unlikely to be made cross-platform by anyone on the runtime team in the foreseeable future. It was a desire of mine years ago but the argument is hard to make given the direction of .NET 5+ and the baggage that comes with the COM ABI. Source generation built on top of the [`ComWrappers`](https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.comwrappers) API is possible to be made [cross platform](https://github.com/dotnet/runtime/issues/36582) and something that I think aligns well with our goals in the interop space.",
                                           "updatedAt":  "2021-01-12T20:56:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk3ODE1OA==",
                                           "createdAt":  "2021-01-12T20:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@raffaeler @vitek-karas  just to make sure we talk of the same level of effort, what I have in mind is similar to the [\"COM in plain C\" codeproject articles](https://www.codeproject.com/Articles/13601/COM-in-plain-C), where you learn how to pretty much implement COM without COM. It\u0027s a lot of work, but it can be done if you\u0027re motivated enough to do it all by hand. However, it\u0027s deprecated and I doubt this is something the .NET team really wants to support in the future.\r\n\r\nI understand your point of view, but I get the feeling that maybe these are much more advanced use cases? All I really want is to load and interact with existing .NET assemblies on disk, without the need for additional files. If there was a generic way to call managed functions from native code, this wouldn\u0027t be a problem, because the compiled bindings wouldn\u0027t be necessary. I\u0027m not against the requirement for compiled .NET assemblies, if only I could \"compile\" them into my application or library.\r\n\r\nAs for shadow copies, or single-file components, wouldn\u0027t all those advanced use cases be made possible by the ability to load assemblies in memory? I am not talking about adding specific APIs for each of those, like \"load_assembly_shadow\", but to use the \"first-level\" in-memory assembly loading to load new .NET functions that would make those possible.\r\n\r\nRather than keep modifying the hosting APIs, all you\u0027d really need is the hosting API to let you load whatever you need in memory, and you can then have full access to managed code to implement anything you want, such as shadow loading of assemblies. For instance, here\u0027s a blog post that [fiddles with the way assemblies are loaded using C# code](https://www.strathweb.com/2019/01/collectible-assemblies-in-net-core-3-0/).",
                                           "updatedAt":  "2021-01-12T20:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1ODk4ODE2Mg==",
                                           "createdAt":  "2021-01-12T21:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The other scenarios I mentioned would probably require something like \"load assembly from memory from the host\u0027 - that\u0027s why I mentioned it. The point of my comment was that these have been considered in the past and so far none of them made the cut.\r\n\r\nDon\u0027t get me wrong I don\u0027t see anything wrong with your request to support such functionality. It\u0027s a resourcing problem, there are other things in the hosting area which also need our attention and are arguably higher priority.",
                                           "updatedAt":  "2021-01-12T21:03:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1OTAwNjE4OA==",
                                           "createdAt":  "2021-01-12T21:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas @AaronRobinsonMSFT in this case, I think it would better to close this issue as what I am asking for is simply not going to happen in the foreseeable future. I think I\u0027ve pushed hard enough for a solution at this point and you\u0027ve all been patient with me, so thank you. I\u0027ll keep watching the development in case something related to this comes up in the future.",
                                           "updatedAt":  "2021-01-12T21:16:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1OTAwODkzMA==",
                                           "createdAt":  "2021-01-12T21:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "If you don\u0027t mind - I would like to keep this opened - it\u0027s a valid scenario. If it\u0027s closed it will fall through and next time around we\u0027ll forget about it.",
                                           "updatedAt":  "2021-01-12T21:17:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1OTAxNzQyMg==",
                                           "createdAt":  "2021-01-12T21:23:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@vitek-karas well, that\u0027s a first for me - I\u0027m used to bots closing important issues after they become \"stale\" in other projects 😆\r\n\r\nIf you ever get an idea we haven\u0027t explored yet that could solve my problem, feel free to post it here, but I think we\u0027ve explored most of what was possible without using a managed assembly file on disk. I\u0027ll go ahead with this approach, possibly just extracting the DLL in a temporary folder to load it from there, and cross fingers this won\u0027t cause the AVs to block my software. I have a lot of use cases that need to work without an installation, which is why I am so keen on static linking and getting everything to work with the bare minimum of files possible.",
                                           "updatedAt":  "2021-01-12T21:23:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1OTA0NTI0Nw==",
                                           "createdAt":  "2021-01-12T21:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "awakecoding",
                                           "body":  "@SteveL-MSFT I know you\u0027ve seen my tweets about this, but I wonder if this something that could interest the PowerShell team? The idea is to allow any native application or library to simply load and call PowerShell without the need to install or copy files other than PowerShell. In other words, a single native executable with no external dependencies would be able to load and call PowerShell.\r\n\r\nNow I\u0027ll save you the whole discussion, but the last piece of the puzzle I\u0027ve been trying to work around is the need for a managed DLL not present in PowerShell containing a single function meant to load an assembly in memory. The goal of loading the assembly in memory is to \"compile and link statically\" the C# bindings making it possible to call the PowerShell managed APIs from C/Rust without installing anything. I would embed the DLL as a resource which would be loaded at runtime into the .NET host in memory.\r\n\r\nNow here\u0027s one very simple PowerShell-specific solution to this problem:\r\n\r\nAdd the required helper function in one of the PowerShell managed DLLs, and I\u0027ve got what I need. It wouldn\u0027t work without PowerShell, but that\u0027s perfectly acceptable to me. All I need is this tiny function:\r\n\r\n```\r\n        public static void LoadAssemblyData(IntPtr ptr, int size)\r\n        {\r\n            byte[] bytes = new byte[size];\r\n            Marshal.Copy(ptr, bytes, 0, size);\r\n            Stream stream = new MemoryStream(bytes);\r\n            AssemblyLoadContext.Default.LoadFromStream(stream);\r\n        }\r\n```\r\n\r\nThis way I could load one of the PowerShell DLLs containing this function with load_assembly_and_get_function_pointer and call it from native code to load my \"real\" assembly containing a much larger set of native-to-managed function wrappers that look the same as LoadAssemblyData. I did a proof-of-concept already with the PowerShell class (.Create/.AddScript/.Invoke).\r\n\r\nWould this be possible?",
                                           "updatedAt":  "2021-01-12T21:44:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzQwMDcwNA==",
                                           "createdAt":  "2021-01-20T07:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e Would this be possible?\r\n\r\n@awakecoding Please open issue in PowerShell repository for discussion and tracking.",
                                           "updatedAt":  "2021-01-20T07:34:44Z"
                                       }
                                   ],
                         "totalCount":  50
                     },
        "title":  "Native Host using existing PowerShell 7 installation",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49137",
        "createdAt":  "2021-03-04T16:05:38Z",
        "number":  49137,
        "author":  "ViktorHofer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-02T22:48:09Z",
        "body":  "The host packages still use `runtime.json` which was the mechanism to define RID based package dependencies in the .NET Core 2.x era. That feature was never publicly exposed by NuGet and is discussed to be removed in NET 6. For more details see https://github.com/NuGet/Home/issues/5862.\r\n\r\nThere are alternatives to runtime.json, i.e.:\r\n- KnownFrameworkPackage with known RIDs\r\n- A single package with multiple RID based folders (bigger package, but easier to maintain)\r\n- Dead ending the package if it isn\u0027t supposed to be used anymore.\r\n\r\ndotnet/sdk still consumes the meta package via the runtime.json mechanism which should be considered when switching to a different restore mechanism.\r\n\r\nHost packages:\r\n- https://www.nuget.org/packages/Microsoft.NETCore.DotNetHostPolicy/\r\n- https://www.nuget.org/packages/Microsoft.NETCore.DotNetHostResolver/\r\n- https://www.nuget.org/packages/Microsoft.NETCore.DotNetAppHost/\r\n- https://www.nuget.org/packages/Microsoft.NETCore.DotNetHost/\r\n\r\ncc @agocke @vitek-karas @ericstj ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhuyhAg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDcyODQ2NQ==",
                                           "createdAt":  "2021-03-04T16:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe host packages still use `runtime.json` which was the mechanism to define RID based package dependencies in the .NET Core 2.x era. That feature was never publicly exposed by NuGet and is discussed to be removed in NET 6. For more details see https://github.com/NuGet/Home/issues/5862.\r\n\r\nThere are alternatives to runtime.json, i.e.:\r\n- KnownFrameworkPackage with known RIDs\r\n- A single package with multiple RID based folders (bigger package, but easier to generate and maintain)\r\n- Dead ending the package if it isn\u0027t supposed to be used anymore. \r\n\r\ncc @agocke @vitek-karas @ericstj \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eViktorHofer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-04T16:05:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDc3NjU3OA==",
                                           "createdAt":  "2021-03-04T17:10:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBiRqqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2021-03-04T17:41:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "The single-package option will require us to add another “join” job like the CrossOS DAC job to get all the artifacts in one place.",
                                           "updatedAt":  "2021-03-04T17:10:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDc4MDU1Nw==",
                                           "createdAt":  "2021-03-04T17:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "IMHO we should just deprecate the runtime.json and make the only method of consumption be SDK and have it work the same way as runtime packs.\r\n\r\n\u003e dotnet/sdk still consumes the meta package via the runtime.json mechanism \r\n\r\nIs this just the internal repo transport or does it show up in the actual product? ",
                                           "updatedAt":  "2021-03-04T17:13:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDc4NDg3MQ==",
                                           "createdAt":  "2021-03-04T17:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e Is this just the internal repo transport or does it show up in the actual product?\r\n\r\nIt\u0027s not exposed in the product, it\u0027s just on the consumption side: https://github.com/dotnet/sdk/blob/0d50c13812b626999aef1853bf23295f38287807/src/Resolvers/Microsoft.DotNet.MSBuildSdkResolver/Microsoft.DotNet.MSBuildSdkResolver.csproj#L58. Some tests as well in the sdk repo.",
                                           "updatedAt":  "2021-03-04T17:19:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDgyMTI1Nw==",
                                           "createdAt":  "2021-03-04T18:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e IMHO we should just deprecate the runtime.json and make the only method of consumption be SDK and have it work the same way as runtime packs.\r\n\r\nCan you please share some more information on the work necessary for that?",
                                           "updatedAt":  "2021-03-04T18:13:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDg2MTYxOA==",
                                           "createdAt":  "2021-03-04T19:14:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This stuff: https://github.com/dotnet/installer/blob/944ec2eb293e807d5235439ca0186d9725856beb/src/redist/targets/GenerateBundledVersions.targets#L100-L120\r\nThen the SDK consuming that and generating PackageDownloads, then manually probing the downloaded directory to raise the assets.\r\n\r\nEssentially what you said above: `KnownFrameworkPackage with known RIDs`. \r\n\r\nFor any internal consumption we might need to see what the usage is to find a suitable replacement.  Might be leveraging those targets in the SDK which compute the right RID-specific package.  Might be just referencing everything and let nuget choose.  The host isn\u0027t so big, so referencing everything isn\u0027t such a huge burden. \r\n\r\n\u003e A single package with multiple RID based folders (bigger package, but easier to maintain)\r\n\r\nAnother alternative to this is meta-package with normal references that apply exclusively (see runtime.native.System.IO.Ports).  \r\n",
                                           "updatedAt":  "2021-03-04T19:14:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDg5MDc3OQ==",
                                           "createdAt":  "2021-03-04T19:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e Another alternative to this is meta-package with normal references that apply exclusively (see runtime.native.System.IO.Ports).\r\n\r\nI prefer any option that doesn\u0027t require a join job (as Jeremy commented above https://github.com/dotnet/runtime/issues/49137#issuecomment-790776578).\r\n\r\n\u003e Essentially what you said above: KnownFrameworkPackage with known RIDs.\r\n\r\nOk that needs closer inspection. If we add Known items to the defaultversions generated file, doesn\u0027t that mean, that the packages will always be downloaded? Anyway, someone will need to take a look and make a switch.",
                                           "updatedAt":  "2021-03-04T19:57:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDg5MTc4MQ==",
                                           "createdAt":  "2021-03-04T19:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "When doing that it would also be good to apply two code clean-ups:\r\n- Change naming from `runtime.*` to `\u003cPackageId\u003e.Runtime.\u003cRID\u003e` as other runtime framework packages\r\n- Move off from the four pkgprojs to .proj ones and use the NuGet Pack Task instead.",
                                           "updatedAt":  "2021-03-04T19:58:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDkxMzQ2Ng==",
                                           "createdAt":  "2021-03-04T20:21:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCY7XrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2021-03-04T22:58:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "glopesdev",
                                                                               "createdAt":  "2022-04-20T18:52:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e I prefer any option that doesn\u0027t require a join job\r\n\r\nNot suggesting a join. Suggesting meta-package that \"knows\" the id\u0027s and versions of child packages.  Essentially same as we do today but put the dependencies in nuspec instead of runtime.json.",
                                           "updatedAt":  "2021-03-04T20:21:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjE4MjA3OA==",
                                           "createdAt":  "2021-03-18T18:21:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "cc @tmds",
                                           "updatedAt":  "2021-03-18T18:21:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CmdGe",
                                           "createdAt":  "2022-05-04T14:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "glopesdev",
                                           "body":  "\u003e Essentially same as we do today but put the dependencies in nuspec instead of runtime.json.\r\n\r\n@ericstj Is there a way to specify RID-specific dependencies in nuspec, to get the same download optimizations that are possible with runtime.json?",
                                           "updatedAt":  "2022-05-04T14:23:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CnlpO",
                                           "createdAt":  "2022-05-04T18:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "No, it\u0027s not possible.  https://github.com/NuGet/Home/issues/1660 https://github.com/dotnet/sdk/issues/4552",
                                           "updatedAt":  "2022-05-04T18:34:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mI3yR",
                                           "createdAt":  "2023-09-11T10:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsXdIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2024-08-01T01:38:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "cc @elinor-fung, @agocke\r\n\r\nWith https://github.com/dotnet/runtime/commit/f76045c2116ca5a723b63575c0fb7845d5f9e65f, the remaining host package that still uses the runtime.json infrastructure is `Microsoft.NETCore.DotNetAppHost`.\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/49233, https://github.com/dotnet/runtime/issues/75966\r\n\r\nUnfortunately another package got added into the installer/pkg umbrella which depends on this infra: https://github.com/dotnet/runtime/tree/main/src/installer/pkg/projects/Microsoft.DotNet.ILCompiler.\r\n\r\nAfter both projects got converted to NuGet Pack task based ones, we will finally be able to delete all the ancient infrastructure around supporting runtime.json based packages under src/installer.",
                                           "updatedAt":  "2023-09-11T10:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzeHU",
                                           "createdAt":  "2024-07-31T23:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Is this done? I think the `ILCompiler` runtimejson is gone, I don\u0027t see one for `DotNetAppHost` either.",
                                           "updatedAt":  "2024-07-31T23:11:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G0XnM",
                                           "createdAt":  "2024-08-01T03:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I still see runtime.json in https://nuget.info/packages/Microsoft.DotNet.ILCompiler/9.0.0-preview.6.24327.7. What\u0027s the package you have looked at?\r\n\r\nThis was recently discussed in https://github.com/dotnet/runtime/pull/102908 . We have removed runtime.json from bundled source built ILCompiler packages, but kept it for regular ILCompiler package.",
                                           "updatedAt":  "2024-08-01T03:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G7KEC",
                                           "createdAt":  "2024-08-01T18:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I was looking at the source code and misread the change to be the other direction (we only include runtime.json in source build).\r\n\r\nOK, I\u0027ll keep this around.",
                                           "updatedAt":  "2024-08-01T18:02:12Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Host packages should not use runtime.json restore infrastructure",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49686",
        "createdAt":  "2021-03-16T08:54:04Z",
        "number":  49686,
        "author":  "arknu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5DWag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "weltkante",
                                            "createdAt":  "2021-03-16T08:55:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "1R053",
                                            "createdAt":  "2021-03-16T08:56:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JoshTefay",
                                            "createdAt":  "2021-06-04T08:16:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SviatoslavRazmyslov",
                                            "createdAt":  "2021-06-04T16:41:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-06-04T16:50:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "govert",
                                            "createdAt":  "2021-08-10T08:54:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevSelchow",
                                            "createdAt":  "2022-01-18T10:42:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Leon99",
                                            "createdAt":  "2022-06-22T00:11:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rand-Random",
                                            "createdAt":  "2022-11-25T14:16:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JS-X-Visual",
                                            "createdAt":  "2024-03-20T15:27:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremy-visionaid",
                                            "createdAt":  "2024-05-14T08:09:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ColonelBadger",
                                            "createdAt":  "2024-07-01T21:57:40Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2024-05-15T01:57:00Z",
        "body":  "### Description\r\n\r\nI\u0027m currently doing a proof-of-concept of using .NET 5+ COM hosting to create an Office (in this case Outlook) addin. See https://github.com/dotnet/winforms/issues/4370 for further details.\r\n\r\nAs part of testing with both .NET 5 and .NET 6 preview, it emerged that COM hosting apparently can only support loading one version of .NET at a time. This effectively makes COM hosting useless for a lot of scenarios since you cannot control what else happens to be loaded in the hosting process.\r\n\r\nI was also under the impression that the new .NET was supposed to solve the side-by-side issues suffered by .NET Framework, so I\u0027m disappointed to see that this has not been solved. I\u0027m aware of the discussion in https://github.com/dotnet/runtime/issues/12018, but I believe this need to be re-assessed. With .NET Framework all 4.x versions could essentially co-exist, so this was less of an issue. But with the much more frequent release cycles of the new .NET, this issue is going to become a lot more common in the future. \r\n\r\nAt least when doing COM hosting, .NET should be able to handle multiple version co-existing at the same time. Otherwise, having support for COM hosting is basically useless.\r\n\r\nPotentially, these APIs could then be utilized to make hosting multiple .NET versions in other scenarios possible.\r\n\r\n### Configuration\r\n\r\n\r\n.NET 5 and .NET 6 preview 2\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfdoIjQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDA3NjI1NA==",
                                           "createdAt":  "2021-03-16T08:54:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027m currently doing a proof-of-concept of using .NET 5+ COM hosting to create an Office (in this case Outlook) addin. See https://github.com/dotnet/winforms/issues/4370 for further details.\r\n\r\nAs part of testing with both .NET 5 and .NET 6 preview, it emerged that COM hosting apparently can only support loading one version of .NET at a time. This effectively makes COM hosting useless for a lot of scenarios since you cannot control what else happens to be loaded in the hosting process.\r\n\r\nI was also under the impression that the new .NET was supposed to solve the side-by-side issues suffered by .NET Framework, so I\u0027m disappointed to see that this has not been solved. I\u0027m aware of the discussion in https://github.com/dotnet/runtime/issues/12018, but I believe this need to be re-assessed. With .NET Framework all 4.x versions could essentially co-exist, so this was less of an issue. But with the much more frequent release cycles of the new .NET, this issue is going to become a lot more common in the future. \r\n\r\nAt least when doing COM hosting, .NET should be able to handle multiple version co-existing at the same time.\r\n\r\nPotentially, these APIs could then be utilized to make hosting multiple .NET versions in other scenarios possible.\r\n\r\n### Configuration\r\n\r\n\r\n.NET 5 and .NET 6 preview 2\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earknu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-16T08:54:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTAwODAxMA==",
                                           "createdAt":  "2021-03-29T01:35:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "/cc: @AaronRobinsonMSFT ",
                                           "updatedAt":  "2021-03-29T01:35:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTAyMDc4MA==",
                                           "createdAt":  "2021-03-29T02:20:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlKJQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "1R053",
                                                                               "createdAt":  "2021-03-29T07:09:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@arknu Sorry this is causing issues for your prototyping. This issue isn\u0027t specific to COM as it is a .NET Core and .NET 5+ technical limitation - there can only be a single instance of the .NET runtime loaded at a time in any given process. There are multiple reasons for this that have been discussed in various issues over the years so I won\u0027t belabor them here, but the reference issue https://github.com/dotnet/runtime/issues/12018 does contain the most important points.\r\n\r\nAs far as a work around for COM scenarios, I would recommend looking at an out-of-proc COM solution. We have a sample for this [here](https://github.com/dotnet/samples/tree/main/core/extensions/OutOfProcCOM).",
                                           "updatedAt":  "2021-03-29T02:20:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTEzNTQ2OA==",
                                           "createdAt":  "2021-03-29T07:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "1R053",
                                           "body":  "@AaronRobinsonMSFT thanks for the example. \r\n\r\nSide question: would it be possible to bundle the .NET Core runtime with the COM dll or somehow place it in a subdirectory and load it from there, so it is not necessary to rely on a separate installation? I have only found documentation for EXE so far but not something applicable for out-of-proc COM. If there is no built-in way is there an equivalent of metahost-\u003eCLRCreateInstance, metahost-\u003eEnumerateInstalledRuntimes or metahost-\u003eGetRuntimes in .NET Core?",
                                           "updatedAt":  "2021-03-29T07:19:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTIyMTYzMA==",
                                           "createdAt":  "2021-03-29T09:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlLRsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "1R053",
                                                                               "createdAt":  "2021-03-29T09:25:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "1R053",
                                                                               "createdAt":  "2021-03-29T09:26:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "You can do custom hosting: https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting\r\nThe `comhost` is using those same APIs - but I don\u0027t think we publicly documented all of the entry points it\u0027s using on the runtime side.\r\n\r\nIn .NET6 we\u0027ve added a new API to `hostfxr` to enumerate installed runtimes: [PR](https://github.com/dotnet/runtime/pull/48097) and the issue with [design](https://github.com/dotnet/runtime/issues/46128).",
                                           "updatedAt":  "2021-03-29T09:22:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ffamu",
                                           "createdAt":  "2022-06-24T19:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjqP6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2022-06-24T22:12:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "govert",
                                           "body":  "For Excel-DNA we\u0027ve taken the approach to support only .NET 6.0 (in addition to .NET Framework 4.x) for in-process Excel add-ins. So far this seems to work fine, and in our experience is working fine when loaded alongside .NET Framework 4.x as well. If another version of .NET Core is loaded already by some independent component or add-in (say targeting .NET 5 or .NET 7), then loading the Excel-DNA add-in will fail. These add-ins are a combination of native .dll exports and COM interop, using a custom runtime host. I think that\u0027s fine and seems like a stable plan for the duration of the long-term support window of .NET 6.\r\n\r\nIn the future - say in the .NET 8 timeframe - we might try to take a Native AOT / DNNE approach to making the add-ins. Is the intention that Native AOT libraries based on .NET 8 would be able to load into the same process where .NET 6 runs (and the .NET Framework 4.x also runs)? I hope so @AaronRobinsonMSFT :-)",
                                           "updatedAt":  "2022-06-24T19:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FfrI9",
                                           "createdAt":  "2022-06-24T20:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Is the intention that Native AOT libraries based on .NET 8 would be able to load into the same process where .NET 6 runs (and the .NET Framework 4.x also runs)?\r\n\r\nThat is a good question. My guess is it will work fine, but diagnostics will be very bad for the Native AOT portion. Unclear if this will be a supported scenario or not, but I don\u0027t see why it would be any worse.\r\n\r\n/cc @agocke @jkotas ",
                                           "updatedAt":  "2022-06-24T20:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FfvsX",
                                           "createdAt":  "2022-06-24T21:21:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "cc @MichalStrehovsky\r\n\r\nI don\u0027t think there are any known issues with loading multiple NativeAOT libraries into the app, although each will be a fully independent process with its own GC space. I don\u0027t know what the debugging experience would be like for multiple NativeAOT libraries. The NativeAOT debugging experience is mostly a native (C++) debugging experience, so it may have little difference.",
                                           "updatedAt":  "2022-06-24T21:21:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FimLp",
                                           "createdAt":  "2022-06-27T00:34:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The diagnostics will be the same as Native AOT in general - on a high level: stack, stepping, breakpoints work, local variable inspection works. Properties don\u0027t show up (one has to look at backing fields), async debugging doesn\u0027t work, the names of types are mangled, but human-readable.\r\n\r\nI think the bigger problem is that Native AOT has no built-in COM support. It\u0027s possible to do COM manually through function pointers, but it\u0027s not pretty.\r\n\r\n\u003e My guess is it will work fine, but diagnostics will be very bad for the Native AOT portion\r\n\r\nI would reserve the term \"very bad\" to how it would be with two CoreCLR\u0027s in the same process, where at least for one of them there would likely be no stack, no locals, no source breakpoints, and stepping only on assembly-level.",
                                           "updatedAt":  "2022-06-27T00:34:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FkYf1",
                                           "createdAt":  "2022-06-27T10:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "govert",
                                           "body":  "\u003e I think the bigger problem is that Native AOT has no built-in COM support. It\u0027s possible to do COM manually through function pointers, but it\u0027s not pretty.\r\n\r\nAm I correct that this is covered by the COM source generator proposal? https://github.com/dotnet/runtime/blob/main/docs/design/features/source-generator-com.md",
                                           "updatedAt":  "2022-06-27T10:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FlgOZ",
                                           "createdAt":  "2022-06-27T14:57:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@govert Yes, that is how COM interop would be supported. The underlying `ComWrappers` API is at least partially supported on Native AOT.\r\n\r\n\u003e I would reserve the term \"very bad\" to how it would be with two CoreCLR\u0027s in the same process, where at least for one of them there would likely be no stack, no locals, no source breakpoints, and stepping only on assembly-level.\r\n\r\nI think that is a rather narrow interpretation. It would be bad in the sense that the managed debugging experience wouldn\u0027t exist at all. One would need to \"attach\" and guess for which .NET version it was attached to (.NET FX vs .NET Core), but far more unintuitive is the user would then need to reattach in native (perhaps mixed?) to get their AOT\u0027d managed code. It is just bad all around and will likely be rather confusing.",
                                           "updatedAt":  "2022-06-27T14:57:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc592giN",
                                           "createdAt":  "2024-05-15T01:56:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeremy-visionaid",
                                           "body":  "I just hit this too after migrating some projects from .NET Framework. Unfortunately, there doesn\u0027t seem to be any warnings in the documentation, as this is a pretty major caveat!\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/core/native-interop/expose-components-to-com\r\n\r\nIt would be great if there were some option for `EnableComHosting` that worked out-of-process by default",
                                           "updatedAt":  "2024-05-15T01:57:00Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "COM hosting breaks with multiple versions of .NET being loaded",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50130",
        "createdAt":  "2021-03-23T21:22:48Z",
        "number":  50130,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-28T23:58:23Z",
        "body":  "Trimming a .NET Core application is expected to give size wins without compromising correctness. However, there are some coding patterns, largely centered around arbitrary use of reflections, that make it challenging for the Trimmer to reason about correctness. Serializers (such as XML and DataContractSerilaizers), feature area like EventSource, and other make heavy use of such patterns. The trimmer does a good job of warning in these cases but for scenarios where these warnings are incorrectly suppressed, trimmed applications can fail in production environment that will be hard to root cause.\r\n\r\nWe should provide a runtime diagnostic feature that can be leveraged in opt-in scenario testing mode that will warn developers of potential problems in their app. Such a feature should have the following:\r\n\r\n- [ ] Metadata in trimmed assemblies on trimmed types. [This ](https://github.com/mono/linker/issues/1804)issue tracks the request in the mono repo\r\n\r\n- [ ] Library support to query the trimmed assemblies to get trimmed metadata\r\n\r\n- [ ] Showcase this feature using a trim-problematic component\r\n\r\n- [ ] Developer Experience to leverage this feature including a mechanism for make problematic types trim safe\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM90LQw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTI3MTQyMg==",
                                           "createdAt":  "2021-03-23T21:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-23T21:22:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTI3MzExMg==",
                                           "createdAt":  "2021-03-23T21:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "cc @agocke ",
                                           "updatedAt":  "2021-03-23T21:25:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTMwNDc3Mw==",
                                           "createdAt":  "2021-03-23T22:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Developer Experience to leverage this feature\r\n\r\nI think we should start with defining the developer experience, and how it fits with all other existing developer experiences around trimming.\r\n\r\nDo we have real world examples that show where the existing developer experiences around trimming fall short?",
                                           "updatedAt":  "2021-03-23T22:20:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTMwOTEwNA==",
                                           "createdAt":  "2021-03-23T22:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I am worried that investing into diagnostics like this will just encourage bad behavior and distract the focus on providing predictable experience.",
                                           "updatedAt":  "2021-03-23T22:28:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTQxOTI1Mw==",
                                           "createdAt":  "2021-03-24T02:11:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @tannergooding, @sbomer\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTrimming a .NET Core application is expected to give size wins without compromising correctness. However, there are some coding patterns, largely centered around arbitrary use of reflections, that make it challenging for the Trimmer to reason about correctness. Serializers (such as XML and DataContractSerilaizers), feature area like EventSource, and other make heavy use of such patterns. The trimmer does a good job of warning in these cases but for scenarios where these warnings are incorrectly suppressed, trimmed applications can fail in production environment that will be hard to root cause.\r\n\r\nWe should provide a runtime diagnostic feature that can be leveraged in opt-in scenario testing mode that will warn developers of potential problems in their app. Such a feature should have the following:\r\n\r\n- [ ] Metadata in trimmed assemblies on trimmed types. [This ](https://github.com/mono/linker/issues/1804)issue tracks the request in the mono repo\r\n\r\n- [ ] Library support to query the trimmed assemblies to get trimmed metadata\r\n\r\n- [ ] Showcase this feature using a trim-problematic component\r\n\r\n- [ ] Developer Experience to leverage this feature including a mechanism for make problematic types trim safe\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`linkable-framework`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-24T02:11:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTQxOTQwMw==",
                                           "createdAt":  "2021-03-24T02:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTrimming a .NET Core application is expected to give size wins without compromising correctness. However, there are some coding patterns, largely centered around arbitrary use of reflections, that make it challenging for the Trimmer to reason about correctness. Serializers (such as XML and DataContractSerilaizers), feature area like EventSource, and other make heavy use of such patterns. The trimmer does a good job of warning in these cases but for scenarios where these warnings are incorrectly suppressed, trimmed applications can fail in production environment that will be hard to root cause.\r\n\r\nWe should provide a runtime diagnostic feature that can be leveraged in opt-in scenario testing mode that will warn developers of potential problems in their app. Such a feature should have the following:\r\n\r\n- [ ] Metadata in trimmed assemblies on trimmed types. [This ](https://github.com/mono/linker/issues/1804)issue tracks the request in the mono repo\r\n\r\n- [ ] Library support to query the trimmed assemblies to get trimmed metadata\r\n\r\n- [ ] Showcase this feature using a trim-problematic component\r\n\r\n- [ ] Developer Experience to leverage this feature including a mechanism for make problematic types trim safe\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `linkable-framework`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-24T02:12:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzQ2NTQzNw==",
                                           "createdAt":  "2021-03-25T20:52:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "One concrete place where this feature would be helpful is in the following `DiagnosticSource` code:\r\n\r\nhttps://github.com/dotnet/runtime/blob/553338882229caaa892227e251a0c15fbb6b13dd/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs#L1148-L1160\r\n\r\nWhat this code does is given a Type (which is either an `Activity` or some object being written to a `DiagnosticSource`), it will create a \"Transform\" that converts all the object\u0027s properties to a set of `KeyValuePair\u003cstring, string\u003e`s. A typical pattern is to use an anonymous type, like ASP.NET is doing here:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/1abdc61c7982ae098d637526cb82f547618cf653/src/Middleware/MiddlewareAnalysis/src/AnalysisMiddleware.cs#L46-L60\r\n\r\n```C#\r\n        public async Task Invoke(HttpContext httpContext)\r\n        {\r\n            var startTimestamp = Stopwatch.GetTimestamp();\r\n            if (_diagnostics.IsEnabled(\"Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareStarting\"))\r\n            {\r\n                _diagnostics.Write(\r\n                    \"Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareStarting\",\r\n                    new\r\n                    {\r\n                        name = _middlewareName,\r\n                        httpContext = httpContext,\r\n                        instanceId = _instanceId,\r\n                        timestamp = startTimestamp,\r\n                    });\r\n            }\r\n```\r\n\r\nThis is problematic because the trimmer won\u0027t see anyone using the `getters` of this type - only the setters are being used. So the DiagnosticSource code above isn\u0027t going to log any of the property values, since the getters are trimmed away.\r\n\r\nOne approach to mitigating this problem is to log a message to the log that says `Type {x} has been modified by trimming. Ensure the necessary properties are preserved to get full diagnostic information.` The feature being proposed here is what would allow the DiagnosticSource code to check if Type was modified or not.",
                                           "updatedAt":  "2021-03-25T20:52:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzUwMTMzNA==",
                                           "createdAt":  "2021-03-25T21:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Does the linker diagnostic produce warning for this case?",
                                           "updatedAt":  "2021-03-25T21:15:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzU0NTYwMA==",
                                           "createdAt":  "2021-03-25T21:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Yes, it produces a warning, which is what I\u0027m trying to address now as part of #45623:\r\n\r\nhttps://github.com/dotnet/runtime/blob/31385d44e4427ac932dc760dabc3a68ddaa32152/src/libraries/System.Diagnostics.DiagnosticSource/src/ILLink/ILLink.Suppressions.xml#L4-L9\r\n\r\nMy current thinking is that since there isn\u0027t a public API that can be annotated here to preserve the properties, the next best thing would be to give a runtime informational message via the log that tells the user their diagnostic information is incomplete.",
                                           "updatedAt":  "2021-03-25T21:41:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODA1MDc4Mw==",
                                           "createdAt":  "2021-03-26T08:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e This is problematic because the trimmer won\u0027t see anyone using the getters of this type - only the setters are being used. So the DiagnosticSource code above isn\u0027t going to log any of the property values, since the getters are trimmed away.\r\n\r\nNote that we would also like to have the freedom to strip the properties themselves if we see they\u0027re not being reflected. We should assume that the code will not see any properties at all (not just properties with missing getters).",
                                           "updatedAt":  "2021-03-26T08:57:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODA1MzU4OA==",
                                           "createdAt":  "2021-03-26T09:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e One approach to mitigating this problem is to log a message to the log that says Type {x} has been modified by trimming. Ensure the necessary properties are preserved to get full diagnostic information. The feature being proposed here is what would allow the DiagnosticSource code to check if Type was modified or not.\r\n\r\nIt might be worth pointing out that for the above ASP.NET example, the diagnostic message would be along the lines of:\r\n\r\nType \u0027\u003c\u003ef__AnonymousType0`2[System.String,System.Int32,System.DateTime]\u0027 has been modified by trimming. Ensure the necessary properties are preserved to get full diagnostic information.\r\n\r\nNot even *I* would be able to figure out what to do with that.",
                                           "updatedAt":  "2021-03-26T09:02:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODI4NTIyNQ==",
                                           "createdAt":  "2021-03-26T14:58:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "We could put the fully qualified type name, so at least you would know what assembly it is coming from.\r\n\r\nAlso, it looks like C# embeds the property names into the generic type names, so you would get the names of the properties in the type name as well, which gives you more information about which type it is referring to:\r\n\r\n`\u003c\u003ef__AnonymousType0\u003c\u003cname\u003ej__TPar, \u003chttpContext\u003ej__TPar, \u003cinstanceId\u003ej__TPar, \u003ctimestamp\u003ej__TPar\u003e`\r\n\r\nOffline @jkotas had the suggestion to add a new generic `Write\u003cT\u003e` API to `DiagnosticsSource`, which we would annotate the generic argument with `[DynamicallyAccessedMembers(PublicProperties)]`. I think that would solve this problem with `DiagnosticSource` since in this case it doesn\u0027t walk the full graph - it just loops over the top level properties of the object.",
                                           "updatedAt":  "2021-03-26T14:58:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk2NzMxMw==",
                                           "createdAt":  "2021-05-11T18:33:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Are we still considering this feature? Or should this issue be closed?",
                                           "updatedAt":  "2021-05-11T18:33:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjQ3NDIzOA==",
                                           "createdAt":  "2021-06-16T15:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "There are no plans to add this right now - closing.",
                                           "updatedAt":  "2021-06-16T15:24:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTI3MDkzMw==",
                                           "createdAt":  "2021-06-21T19:01:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "Opening to reconsider for 7.0.",
                                           "updatedAt":  "2021-06-21T19:01:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2OTUyNzExOQ==",
                                           "createdAt":  "2021-06-28T09:27:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBwdDmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2021-06-28T12:49:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LakshanF",
                                                                               "createdAt":  "2021-06-28T20:45:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I don\u0027t think we should do this. Over the course of .NET 5 and 6 we put a lot of effort into making sure that the behavior of the app before/after trimming is the same (and one doesn\u0027t need to debug their trimmed app to iron out problems caused by trimming).\r\n\r\nThe only possible use for this diagnostic is to aid in experience that we explicitly don\u0027t want to be part of trimming - having to debug the trimmed app because trimming changes the behavior without warnings.\r\n\r\nAdding a feature like this will only encourage the ecosystem to build solutions that are fundamentally not compatible with trimming and pat themselves on the back for \"doing the work to make it compatible with trimming\" (by which they\u0027ll mean suppressing trimming warnings, and putting a runtime assert in place).",
                                           "updatedAt":  "2021-06-28T09:27:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2OTk5OTU1OA==",
                                           "createdAt":  "2021-06-28T20:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Is there any new information here that caused us to reconsider? Otherwise I think the previous decision should stand.",
                                           "updatedAt":  "2021-06-28T20:08:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MDAzNDc0Nw==",
                                           "createdAt":  "2021-06-28T20:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "I agree with @MichalStrehovsky and @jkotas comments above in not pursuing this runtime feature. The position of having the same behavior for trimmed/non-trimmed application allows us to provide a predictable experience for the developer. This feature will fundamentally break that principle. ",
                                           "updatedAt":  "2021-06-28T20:55:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MDEwNjc3OQ==",
                                           "createdAt":  "2021-06-28T23:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "\u003e Is there any new information here that caused us to reconsider?\r\n\r\nWhen we looked at ASP.NET Core + STJ, we found it hard to come up with patterns where we could guarantee that a type was not going to use the reflection based code path. The best option we came up with was a way to use the source generated context if it has metadata, and fallback to a reflection based code path if it does not contain that information. The failure behavior for the fallback is really poor for trimmed types and we had hoped having some way to indicate to the user that it failed was important.",
                                           "updatedAt":  "2021-06-28T23:12:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MDEyNDM1NQ==",
                                           "createdAt":  "2021-06-28T23:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The primary issue is that the default ASP.NET Core + STJ is not really compatible with trimming, and the .NET 6 trimming-compatible model that we were able to come up with is not pleasant to use. In .NET 7, we have to double down on designing a model that is both trimming-compatible and pleasant to use. It will likely require work from accross the team: ASP.NET, libraries - serializers, source generators - Roslyn, runtime, linker.\r\n\r\n\u003e The failure behavior for the fallback is really poor for trimmed types and we had hoped having some way to indicate to the user that it failed was important.\r\n\r\nThe experience would be still poor even with this diagnostic feature. The apps are still going to break at will, one just will have more details about the break. It is not a viable option for larger actively developed apps where debugging failures like this is prohibitively expensive.",
                                           "updatedAt":  "2021-06-28T23:58:23Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Consider adding a runtime diagnostic debug feature for trimmed applications",
        "labels":  [
                       "area-Host",
                       "linkable-framework",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51121",
        "createdAt":  "2021-04-12T15:20:02Z",
        "number":  51121,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODL4szA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yodasad",
                                            "createdAt":  "2025-08-20T05:11:30Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-09T13:06:12Z",
        "body":  "The host currently ignores any usage of \"Additional deps\" (`--additional-deps` or `DOTNET_ADDITIONAL_DEPS`) in self-contained apps. Note that it doesn\u0027t fail, it simply ignores the command line option (or env. variable).\r\n\r\nHistorically this was done because some functionality was not possible to achieve. There\u0027s a good about this here: https://github.com/dotnet/runtime/blob/87798e77ba3bf84bc16645305ca268d20cb81dc6/src/native/corehost/hostpolicy/deps_resolver.cpp#L624-L633\r\n\r\nThe short version is:\r\n1) Self-contained doesn\u0027t have information about frameworks and their versions\r\n2) Self-contained doesn\u0027t have RID fallback graph\r\n\r\nAdditional deps was basically a way to enable plugins. But it required command line/env. variables and was relatively tricky to use correctly. Since then we implemented full plugin support in 3.0 (mostly). The new solution doesn\u0027t require command line options, instead it relies on managed APIs (`AssemblyDependencyResolver`). Along with this we solved all of the problems mentioned above.\r\n1) Self-contained apps carry framework information in their `.runtimeconfig.json`, in the form of `includedFrameworks` property.\r\n2) Self-contained apps carry RID fallback graphs (always)\r\n\r\nSo it should be solvable to implement full support for additional deps on self-contained apps. Alternatively as a half-step, we could implement support for just specifying full file path (`.deps.json`) in which case the framework information is not needed, only the RID fallback graph is. In that case the change is much simpler. It would also us to avoid the relatively troublesome \"roll forward\"/\"roll backward\" behavior implemented in the folder path case.  See for more details: https://github.com/dotnet/runtime/blob/main/docs/design/features/additional-deps.md.\r\n\r\nNote that any change here will be a slight breaking change. For now we ignore additional deps on self-contained apps, starting to honor it (even in limited version) could potentially break some apps. As such the change should be implemented for 6+ only. Open question is if this should be based on the version of the runtime the app uses, or on the app\u0027s TFM (note that so far the host doesn\u0027t really change behavior based on app\u0027s TFM, so this would be potentially problematic as another \"first\").",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMMArGg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzkwMDE0Ng==",
                                           "createdAt":  "2021-04-12T15:20:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe host currently ignores any usage of \"Additional deps\" (`--additional-deps` or `DOTNET_ADDITIONAL_DEPS`) in self-contained apps. Note that it doesn\u0027t fail, it simply ignores the command line option (or env. variable).\r\n\r\nHistorically this was done because some functionality was not possible to achieve. There\u0027s a good about this here: https://github.com/dotnet/runtime/blob/87798e77ba3bf84bc16645305ca268d20cb81dc6/src/native/corehost/hostpolicy/deps_resolver.cpp#L624-L633\r\n\r\nThe short version is:\r\n1) Self-contained doesn\u0027t have information about frameworks and their versions\r\n2) Self-contained doesn\u0027t have RID fallback graph\r\n\r\nAdditional deps was basically a way to enable plugins. But it required command line/env. variables and was relatively tricky to use correctly. Since then we implemented full plugin support in 3.0 (mostly). The new solution doesn\u0027t require command line options, instead it relies on managed APIs (`AssemblyDependencyResolver`). Along with this we solved all of the problems mentioned above.\r\n1) Self-contained apps carry framework information in their `.runtimeconfig.json`, in the form of `includedFrameworks` property.\r\n2) Self-contained apps carry RID fallback graphs (always)\r\n\r\nSo it should be solvable to implement full support for additional deps on self-contained apps. Alternatively as a half-step, we could implement support for just specifying full file path (`.deps.json`) in which case the framework information is not needed, only the RID fallback graph is. In that case the change is much simpler. It would also us to avoid the relatively troublesome \"roll forward\"/\"roll backward\" behavior implemented in the folder path case.  See for more details: https://github.com/dotnet/runtime/blob/main/docs/design/features/additional-deps.md.\r\n\r\nNote that any change here will be a slight breaking change. For now we ignore additional deps on self-contained apps, starting to honor it (even in limited version) could potentially break some apps. As such the change should be implemented for 6+ only. Open question is if this should be based on the version of the runtime the app uses, or on the app\u0027s TFM (note that so far the host doesn\u0027t really change behavior based on app\u0027s TFM, so this would be potentially problematic as another \"first\").\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-12T15:20:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNzkwMDMxNA==",
                                           "createdAt":  "2021-04-12T15:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe host currently ignores any usage of \"Additional deps\" (`--additional-deps` or `DOTNET_ADDITIONAL_DEPS`) in self-contained apps. Note that it doesn\u0027t fail, it simply ignores the command line option (or env. variable).\r\n\r\nHistorically this was done because some functionality was not possible to achieve. There\u0027s a good about this here: https://github.com/dotnet/runtime/blob/87798e77ba3bf84bc16645305ca268d20cb81dc6/src/native/corehost/hostpolicy/deps_resolver.cpp#L624-L633\r\n\r\nThe short version is:\r\n1) Self-contained doesn\u0027t have information about frameworks and their versions\r\n2) Self-contained doesn\u0027t have RID fallback graph\r\n\r\nAdditional deps was basically a way to enable plugins. But it required command line/env. variables and was relatively tricky to use correctly. Since then we implemented full plugin support in 3.0 (mostly). The new solution doesn\u0027t require command line options, instead it relies on managed APIs (`AssemblyDependencyResolver`). Along with this we solved all of the problems mentioned above.\r\n1) Self-contained apps carry framework information in their `.runtimeconfig.json`, in the form of `includedFrameworks` property.\r\n2) Self-contained apps carry RID fallback graphs (always)\r\n\r\nSo it should be solvable to implement full support for additional deps on self-contained apps. Alternatively as a half-step, we could implement support for just specifying full file path (`.deps.json`) in which case the framework information is not needed, only the RID fallback graph is. In that case the change is much simpler. It would also us to avoid the relatively troublesome \"roll forward\"/\"roll backward\" behavior implemented in the folder path case.  See for more details: https://github.com/dotnet/runtime/blob/main/docs/design/features/additional-deps.md.\r\n\r\nNote that any change here will be a slight breaking change. For now we ignore additional deps on self-contained apps, starting to honor it (even in limited version) could potentially break some apps. As such the change should be implemented for 6+ only. Open question is if this should be based on the version of the runtime the app uses, or on the app\u0027s TFM (note that so far the host doesn\u0027t really change behavior based on app\u0027s TFM, so this would be potentially problematic as another \"first\").\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-12T15:20:19Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Allows additional deps for self-contained apps",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51556",
        "createdAt":  "2021-04-20T11:34:02Z",
        "number":  51556,
        "author":  "NN---",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-06T23:43:27Z",
        "body":  "macOS bundle application puts executable in a separate folder and resources in another folder.\r\n.NET dll is considered as a resource since it is not executable which runs.\r\nUnfortunately, .NET published executable expects all files in the same directory.\r\n\r\nThe following directory structure should be supported:\r\n```\r\nContents\\\r\n MacOS\\\r\n  MyExecutable\r\nResources\\\r\n libnative.dylib\r\n System.Runtime.dll\r\n other dlls.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQsMLFA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzIwMTQ5NQ==",
                                           "createdAt":  "2021-04-20T11:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-20T11:34:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzI0NzAxNg==",
                                           "createdAt":  "2021-04-20T12:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nmacOS bundle application puts executable in a separate folder and resources in another folder.\r\n.NET dll is considered as a resource since it is not executable which runs.\r\nUnfortunately, .NET published executable expects all files in the same directory.\r\n\r\nThe following directory structure should be supported:\r\n```\r\nContents\\\r\n MacOS\\\r\n  MyExecutable\r\nResources\\\r\n libnative.dylib\r\n System.Runtime.dll\r\n other dlls.\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-20T12:49:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B2v6v",
                                           "createdAt":  "2022-04-21T08:31:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "@vitek-karas Any update on this ?\r\nThanks.",
                                           "updatedAt":  "2022-04-21T08:31:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B3Afq",
                                           "createdAt":  "2022-04-21T09:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@NN--- No, this is one of many feature requests, we\u0027re trying to prioritize, this one just didn\u0027t make it to the top yet.",
                                           "updatedAt":  "2022-04-21T09:21:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B3026",
                                           "createdAt":  "2022-04-21T12:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "This request is important in macOS due to need of using \u0027--force --deep\u0027 flags for codesign which is not recommended.\r\nAlso this makes it possible to put executable separately from the libraries in any environment.",
                                           "updatedAt":  "2022-04-21T12:33:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5Pwv",
                                           "createdAt":  "2022-04-21T17:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Would single-file work here? You would have to put the native binaries next to the app, but there would be no other .NET DLLs.",
                                           "updatedAt":  "2022-04-21T17:50:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5rhI",
                                           "createdAt":  "2022-04-21T18:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "Single file does work.\n\nHowever I needed several assemblies to not be included due to license restriction, therefore I cannot afford single file.",
                                           "updatedAt":  "2022-04-21T18:56:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9019",
                                           "createdAt":  "2022-04-22T17:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Unfortunately, there are significant technical hurdles to moving System.Private.CoreLib.dll away from clr.dll. Therefore, I don\u0027t think we\u0027ll be able to implement this any time soon.\r\n\r\nOut of curiosity, which license prohibits use in single-file? Single-file uses embedding, so it doesn\u0027t modify the DLL in any way. It\u0027s closer to a unix `tar` file than anything else.",
                                           "updatedAt":  "2022-04-22T17:40:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B98_X",
                                           "createdAt":  "2022-04-22T18:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZXllg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2022-04-22T18:38:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NN---",
                                           "body":  "For instance LGPL license requires an ability to change the provided file by customer.\r\nIf the files are packed inside a single file. it is not possible to replace an LGPL licensed assembly.",
                                           "updatedAt":  "2022-04-22T18:29:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9-u2",
                                           "createdAt":  "2022-04-22T18:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "FWIW https://www.gnu.org/licenses/gpl-faq.html#LGPLStaticVsDynamic seems to imply that you must provide such a layout, but you aren\u0027t required to actually ship that version.",
                                           "updatedAt":  "2022-04-22T18:40:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9_NG",
                                           "createdAt":  "2022-04-22T18:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "Ok. I\u0027ll check this. Thanks.\n\nAnyway, several .NET APIs work differently in a single file in-memory and extracted environment.\nThis means I must also make sure both versions work the same.",
                                           "updatedAt":  "2022-04-22T18:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B-E06",
                                           "createdAt":  "2022-04-22T19:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "That\u0027s true, although the single-file analyzer should now warn about most of those APIs. Based on the last year or so of customer reports, it appears that Assembly.Location is by far the most impactful.",
                                           "updatedAt":  "2022-04-22T19:19:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B-FJZ",
                                           "createdAt":  "2022-04-22T19:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZX8-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2022-04-22T19:21:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NN---",
                                           "body":  "Definitely agree about the analyzer, it works well and very helpful, however it analyzes your code and not code of third parties.\n\nThanks for the answers.",
                                           "updatedAt":  "2022-04-22T19:21:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CFftS",
                                           "createdAt":  "2022-04-25T15:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "Another small difference between single file and extracted files is that if you need a file on the disk when it is extracted you do not have to do anything, while as single file you need to extract it manually from resource for example. ",
                                           "updatedAt":  "2022-04-25T15:40:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CwwsU",
                                           "createdAt":  "2022-05-06T23:43:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Yes, single-file is not particularly suitable if you need direct access to the file. \r\n\r\nAnd if your license (maybe the LGPL, I don\u0027t know) requires being able to build a single-file from binaries only, that is technically possible, but not supported. You could execute the [bundler manually](https://github.com/dotnet/runtime/blob/6a889d234267a4c96ed21d0e1660dce787d78a38/src/installer/managed/Microsoft.NET.HostModel/Bundle/Bundler.cs#L37), and provide exactly the same arguments that were used to construct the bundle on your machine (probably also a specification of what kind of machine you have).",
                                           "updatedAt":  "2022-05-06T23:43:27Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Ability to put libraries in a separate directory",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52688",
        "createdAt":  "2021-05-13T04:26:24Z",
        "number":  52688,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:40:03Z",
        "body":  "The `GetCLRRuntimeHost` export on the `coreclr` binary is a way to get at the COM interface hosting API that is no longer supported in .NET 5+. We should get rid of this API and simplify the internal initialization logic by removing the COM API style. Since it is no longer supported and we have no test coverage assets it is sitting there waiting to get broken.\r\n\r\nhttps://github.com/dotnet/runtime/blob/acb4c469e3c89bf7e82a754de1523785630f18e8/src/coreclr/vm/corhost.cpp#L861-L868\r\n\r\nThe new API is [officially documented with guidance](https://docs.microsoft.com/dotnet/core/tutorials/netcore-hosting) and a sample can be found [here](https://github.com/dotnet/samples/tree/main/core/hosting).\r\n\r\n/cc @vitek-karas @elinor-fung ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUbg06w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDI4Njg4MA==",
                                           "createdAt":  "2021-05-13T04:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `GetCLRRuntimeHost` export on the `coreclr` binary is a way to get at the COM interface hosting API that is no longer supported in .NET 5+. We should get rid of this API and simplify the internal initialization logic by removing the COM API style. Since it is no longer supported and we have no test coverage assets it is sitting there waiting to get broken.\r\n\r\nhttps://github.com/dotnet/runtime/blob/acb4c469e3c89bf7e82a754de1523785630f18e8/src/coreclr/vm/corhost.cpp#L861-L868\r\n\r\nThe new API is [officially documented with guidance](https://docs.microsoft.com/dotnet/core/tutorials/netcore-hosting) and a sample can be found [here](https://github.com/dotnet/samples/tree/main/core/hosting).\r\n\r\n/cc @vitek-karas @elinor-fung \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAaronRobinsonMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-13T04:26:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MDcwODY4NA==",
                                           "createdAt":  "2021-05-13T17:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "If and when this happens, we should make sure it gets announced / tagged as a breaking change.\r\n\r\nThe startup flags should be achievable through runtime config properties via our recommended hosting APIs. I think the only AppDomain flags used in `CreateAppDomainWithManager` now are:\r\n- `APPDOMAIN_IGNORE_UNHANDLED_EXCEPTIONS`\r\n  - Should move towards #42275\r\n- `APPDOMAIN_FORCE_TRIVIAL_WAIT_OPERATIONS`\r\n  - ? \r\n\r\nWe should also have a better story for things like loading in the default ALC to replace `ExecuteInDefaultAppDomain` scenarios that actually need/expect the default ALC.",
                                           "updatedAt":  "2022-02-24T23:10:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RlRpW",
                                           "createdAt":  "2023-01-02T08:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "batzen",
                                           "body":  "If it gets removed, what would be the suggested way to do things like `ExecuteInDefaultAppDomain` does?\r\nCurrently tools like Snoop use the export to get a handle to the runtime host and execute `ExecuteInDefaultAppDomain` afterwards.\r\nIs there any alternative to call .NET code from C++ without using managed C++?",
                                           "updatedAt":  "2023-01-02T08:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RpvRI",
                                           "createdAt":  "2023-01-03T15:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e If it gets removed, what would be the suggested way to do things like ExecuteInDefaultAppDomain does?\r\n\r\n@elinor-fung has been working on a solution to this problem. I believe it is a .NET 8 plan, but that will need to exist before we can remove this API.\r\n\r\n\u003e Is there any alternative to call .NET code from C++ without using managed C++?\r\n\r\nThere are two approaches. The first is to NativeAOT your library and the second is to use the approach that is taken by [DNNE](https://github.com/AaronRobinsonMSFT/DNNE).",
                                           "updatedAt":  "2023-01-03T15:23:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RqCWx",
                                           "createdAt":  "2023-01-03T16:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e There are two approaches. The first is to NativeAOT your library and the second is to use the approach that is taken by [DNNE](https://github.com/AaronRobinsonMSFT/DNNE).\r\n\r\nI don\u0027t think that applies in this case. If I understand it correctly Snoop wants to effectively call into already running managed code - I think it\u0027s something like a UI inspector tool which you \"attach\" to a process. So NativeAOT approach is not applicable because that would not attach to the existing runtime. And DNNE will run into the same limitation as mentioned above because it also relies on nethost/hostfxr.",
                                           "updatedAt":  "2023-01-03T16:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RqgIU",
                                           "createdAt":  "2023-01-03T18:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "batzen",
                                           "body":  "Excatly. Snoop injects itself into a running WPF application to allow users to inspect/modify the UI etc., similar to the live visual tree in Visual Studio.\r\nBecause of that it has to execute it\u0027s code in the runtime started by the target process.",
                                           "updatedAt":  "2023-01-03T18:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RqzUL",
                                           "createdAt":  "2023-01-03T20:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e \u003e There are two approaches. The first is to NativeAOT your library and the second is to use the approach that is taken by [DNNE](https://github.com/AaronRobinsonMSFT/DNNE).\r\n\r\n\u003e I don\u0027t think that applies in this case.\r\n\r\nI was narrowly answering the question of \"Is there any alternative to call .NET code from C++ without using managed C++?\". NativeAOT and DNNE are the specific answers to that. For the combination of calling from C++ and attaching to an existing runtime instance, I agree that is more complicated. @elinor-fung\u0027s proposal, if I recall, is around getting access to the Default ALC and injecting into that so that would be the API.\r\n\r\nI was also under the impression that an already loaded hostfxr will know the current coreclr and can then \"attach\". If the desired runtime versions match, the DNNE approach would just need to call a different API for injection. I agree the NativeAOT approach is a non-starter for attaching and loading to an existing runtime instance.",
                                           "updatedAt":  "2023-01-03T20:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RrQq7",
                                           "createdAt":  "2023-01-03T22:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "\u003e getting access to the Default ALC and injecting into that\r\n\r\nWe currently have a way to get a function pointer to something already loaded into the default ALC, but no way to load an assembly in the default ALC. https://github.com/dotnet/runtime/issues/77696 is the rough idea for adding a similar API that allows loading an assembly into the default ALC.\r\n\r\n\u003e I was also under the impression that an already loaded hostfxr will know the current coreclr and can then \"attach\".\r\n\r\n`nethost` looks for an already loaded `hostfxr`. Assuming the runtime was originally started using `hostfxr` (so \u0027normal\u0027 app run or a native host loading the runtime using `hostfxr` - as opposed to a native host directly loading `coreclr` itself), it will \u0027attach\u0027.",
                                           "updatedAt":  "2023-01-03T22:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RspFf",
                                           "createdAt":  "2023-01-04T09:13:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyF7oA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2023-01-04T15:00:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The original ask is probably based on the discussion here: https://github.com/dotnet/runtime/issues/80092\r\nThe nethost solution once we support loading assemblies into default ALC will work for non-single-file apps. It still doesn\u0027t solve the single-file problem because in that case there\u0027s no `hostfxr` module, the `hostfxr` functionality is part of the executable directly (and is somewhat different, so it\u0027s not even clear if it could be used by component loading even if it could be found).",
                                           "updatedAt":  "2023-01-04T09:13:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rs1nH",
                                           "createdAt":  "2023-01-04T09:54:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "batzen",
                                           "body":  "Single-file wouldn\u0027t be a problem if the single-file host application would contain some exports from `hostfxr`, which shouldn\u0027t be a huge problem, or am i missing something?\r\n\r\nThat way one could either look for a loaded `hostfxr` or try `::GetProcAddress(::GetModuleHandle(nullptr), \"exportName\")` if there is no `hostfxr`.\r\n\r\nThe reason why i am using `GetCLRRuntimeHost` is that it already allows loading assemblies into default ALC and the API is much simpler than using `hostfxr`.\r\nAt least if you don\u0027t have to start a runtime but depend on an already running runtime.\r\nIt\u0027s just a call to `GetCLRRuntimeHost` and then a call to `ICLRRuntimeHost::ExecuteInDefaultAppDomain`.",
                                           "updatedAt":  "2023-01-04T09:54:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rs4vE",
                                           "createdAt":  "2023-01-04T10:05:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@batzen If the functionality exists in the single-file then I agree. But ideally the workflow using our hosting APIs would look the same (or very similar) for single-file and non-single-file.\r\n\r\nThere\u0027s the added issue that we compile a slightly different version of hostfxr code into single-file - it can make certain assumptions and make the code smaller/faster. With this we would have to guarantee that it also provides all of the necessary functionality for hosting APIs to work correctly. Definitely doable, but I don\u0027t know if it\u0027s the case today.",
                                           "updatedAt":  "2023-01-04T10:05:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RtS8u",
                                           "createdAt":  "2023-01-04T11:46:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf0qCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mgaffigan",
                                                                               "createdAt":  "2024-04-28T13:38:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "batzen",
                                           "body":  "@vitek-karas I would go one step further and say the APIs must look the same. The hosting is already quite complex. Having to deal with different APIs would be very far from ideal.\r\n\r\nTo get back to my original question:\r\nI hope that `GetCLRRuntimeHost` etc. won\u0027t get removed till there is a complete alternative that allows achieving the same (executing code in an already running runtime).",
                                           "updatedAt":  "2023-01-04T11:46:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rtgu5",
                                           "createdAt":  "2023-01-04T12:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e  I would go one step further and say the APIs must look the same\r\n\r\nI agree - the problem is that the existing APIs might not be good enough to support it (specifically the nethost which returns path to `hosfxr`, which doesn\u0027t make sense for single-file). So we may need to introduce a new API - which then should work for all cases.",
                                           "updatedAt":  "2023-01-04T12:43:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RuDTr",
                                           "createdAt":  "2023-01-04T14:51:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Ah, thanks for the context - yeah, the existing APIs don\u0027t work with self-contained single-file and `singlefilehost` doesn\u0027t export any hosting APIs like `hostfxr`. https://github.com/dotnet/runtime/issues/3773 tracks hosting components not working with that scenario. @vitek-karas also has a nice write-up at https://github.com/dotnet/runtime/issues/40802#issuecomment-673730451.",
                                           "updatedAt":  "2023-01-04T15:02:20Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Remove the GetCLRRuntimeHost export from coreclr binary",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52818",
        "createdAt":  "2021-05-15T20:25:12Z",
        "number":  52818,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-04T12:31:17Z",
        "body":  "Consider adding  a test case to validate that the managed entry points that are called by natives hosts in ComponentActivator and InMemoryAssemblyLoader generate warnings when trimming. \r\n\r\nPR #52109 added the warnings and was manually verified. Explore adding an automated testcase (perhaps in the SDK) given that the root types ComponentActivator and InMemoryAssemblyLoader are not guarded by the feature switch (we dont want the trimmer to remove the managed entry points entirely when feature is turned off to allow native host callers to get some information on why).  \r\n\r\nThe following test cases are interesting when the feature is turned off (we don\u0027t provide information when feature is turned on and fails since the default is to turn the feature off and require explicit action to turn on):\r\n\r\n1. Native Hosts calling the entry point in a trimmed application gets a warning to indicate that the entry points are not working\r\n2. Developers who don\u0027t use these entry points do not see any trimmer warnings",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONEgSdA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTcyMDIyNw==",
                                           "createdAt":  "2021-05-15T20:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-15T20:25:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MTg1ODM5NQ==",
                                           "createdAt":  "2021-05-16T18:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider adding  a test case to validate that the managed entry points that are called by natives hosts in ComponentActivator and InMemoryAssemblyLoader generate warnings when trimming. \r\n\r\nPR #52109 added the warnings and was manually verified. Explore adding an automated testcase (perhaps in the SDK) given that the root types ComponentActivator and InMemoryAssemblyLoader are not guarded by the feature switch (we dont want the trimmer to remove the managed entry points entirely when feature is turned off to allow native host callers to get some information on why).  \r\n\r\nThe following test cases are interesting when the feature is turned off (we don\u0027t provide information when feature is turned on and fails since the default is to turn the feature off and require explicit action to turn on):\r\n\r\n1. Native Hosts calling the entry point in a trimmed application gets a warning to indicate that the entry points are not working\r\n2. Developers who don\u0027t use these entry points do not see any trimmer warnings\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-16T18:39:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzA5MjU1Mw==",
                                           "createdAt":  "2021-07-09T10:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@LakshanF do  you think we need to do this in 6? Please add the right milestone and remove untriaged.",
                                           "updatedAt":  "2021-07-09T10:43:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzEzODU0OA==",
                                           "createdAt":  "2021-07-09T12:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "These tests are not critical since the risk of the existing behavior changing is low; \r\n\r\n- we are not rooting these types under a feature switch, so completely removing so as to cause problems for native hosts are low\r\n- the default values for the feature switch is to turn off, which will not generate warnings for developers who are not using these APIs (just skeleton code that will thrown for native callers)",
                                           "updatedAt":  "2021-07-09T12:06:55Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Validate Native Host features generate warnings when trimming",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53657",
        "createdAt":  "2021-06-03T01:46:52Z",
        "number":  53657,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-28T17:52:47Z",
        "body":  "1. Create a directory at the default servicing directory path. For 64-bit Windows:\r\n    ```\r\n    mkdir \"%ProgramFiles(x86)%\\coreservicing\"\r\n    ```\r\n2. Run the `ComponentWithDependenciesAndDependencyRemoved` test\r\n    ```\r\n    dotnet test artifacts\\bin\\HostActivation.Tests\\Debug\\net6.0\\HostActivation.Tests.dll --filter ComponentWithDependenciesAndDependencyRemoved\r\n    ```\r\n\r\nTest fails because `ComponentDependency.dll` is not in the resolved assemblies. For example:\r\n```\r\nThe command output did not contain expected result: \"corehost_resolve_component_dependencies assemblies:[C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\ComponentDependency.dll;C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\ComponentWithDependencies.dll;C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\Newtonsoft.Json.dll;]\"\r\n```\r\n\r\nWhere actual output has:\r\n```\r\ncorehost_resolve_component_dependencies assemblies:[C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\ComponentWithDependencies.dll;C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\Newtonsoft.Json.dll;]\r\n```\r\n\r\nLooks like because the servicing directory exists, hostpolicy does the file existence check, doesn\u0027t find `ComponentDependency.dll`, and doesn\u0027t include the assembly in the resolved assemblies.\r\n\r\ncc @mateoatr @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMt9Wiw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzQ5NzQ4Mw==",
                                           "createdAt":  "2021-06-03T01:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n1. Create a directory at the default servicing directory path. For 64-bit Windows:\r\n    ```\r\n    mkdir \"%ProgramFiles(x86)%\\coreservicing\"\r\n    ```\r\n2. Run the `ComponentWithDependenciesAndDependencyRemoved` test\r\n    ```\r\n    dotnet test artifacts\\bin\\HostActivation.Tests\\Debug\\net6.0\\HostActivation.Tests.dll --filter ComponentWithDependenciesAndDependencyRemoved\r\n    ```\r\n\r\nTest fails because `ComponentDependency.dll` is not in the resolved assemblies. For example:\r\n```\r\nThe command output did not contain expected result: \"corehost_resolve_component_dependencies assemblies:[C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\ComponentDependency.dll;C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\ComponentWithDependencies.dll;C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\Newtonsoft.Json.dll;]\"\r\n```\r\n\r\nWhere actual output has:\r\n```\r\ncorehost_resolve_component_dependencies assemblies:[C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\ComponentWithDependencies.dll;C:\\repos\\runtime\\artifacts\\tests\\Debug\\ha\\zwxuhj4j.mal\\ComponentWithDependencies\\Newtonsoft.Json.dll;]\r\n```\r\n\r\nLooks like because the servicing directory exists, hostpolicy does the file existence check, doesn\u0027t find `ComponentDependency.dll`, and doesn\u0027t include the assembly in the resolved assemblies.\r\n\r\ncc @mateoatr @vitek-karas \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eelinor-fung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-03T01:46:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ComponentWithDependenciesAndDependencyRemoved test fails on machines where servicing directory exists",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53729",
        "createdAt":  "2021-06-04T00:12:32Z",
        "number":  53729,
        "author":  "JoshTefay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRSIfA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "logiclink",
                                            "createdAt":  "2021-06-04T07:47:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ds-evo",
                                            "createdAt":  "2021-06-04T12:32:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SviatoslavRazmyslov",
                                            "createdAt":  "2021-06-04T16:39:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgwood",
                                            "createdAt":  "2021-06-04T16:50:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stogle",
                                            "createdAt":  "2021-06-04T19:04:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dcourtet",
                                            "createdAt":  "2021-06-05T09:14:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndresLuga",
                                            "createdAt":  "2021-06-07T18:38:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arknu",
                                            "createdAt":  "2021-06-09T07:53:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maiji1990",
                                            "createdAt":  "2021-06-30T00:21:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "govert",
                                            "createdAt":  "2021-08-10T08:53:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DanielEgbers",
                                            "createdAt":  "2021-08-19T20:41:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fandrei",
                                            "createdAt":  "2021-08-21T00:56:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jklw",
                                            "createdAt":  "2021-09-14T17:16:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexhost",
                                            "createdAt":  "2021-11-11T10:35:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgedde",
                                            "createdAt":  "2021-11-11T10:50:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "appel1",
                                            "createdAt":  "2021-11-11T21:43:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2022-01-15T07:14:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevSelchow",
                                            "createdAt":  "2022-01-18T10:40:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DoCode",
                                            "createdAt":  "2022-05-04T08:03:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trepeschr",
                                            "createdAt":  "2022-06-28T13:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HughWarrington",
                                            "createdAt":  "2022-10-30T05:44:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rand-Random",
                                            "createdAt":  "2022-11-25T14:16:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dgosbell",
                                            "createdAt":  "2023-01-09T02:04:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MRoc",
                                            "createdAt":  "2023-01-09T06:43:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IT-CASADO",
                                            "createdAt":  "2023-01-09T07:41:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HeinziAT",
                                            "createdAt":  "2023-03-06T08:02:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pehdrhi",
                                            "createdAt":  "2023-04-25T19:45:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "keremdemirer",
                                            "createdAt":  "2023-05-30T19:46:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "heartacker",
                                            "createdAt":  "2023-07-01T23:04:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bamo-volue",
                                            "createdAt":  "2023-12-05T14:55:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sbolofsson",
                                            "createdAt":  "2023-12-08T23:02:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hallsbyra",
                                            "createdAt":  "2024-03-06T13:26:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JS-X-Visual",
                                            "createdAt":  "2024-03-20T15:27:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robertmuehsig",
                                            "createdAt":  "2024-04-17T09:52:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mohummedibrahim",
                                            "createdAt":  "2024-08-01T10:37:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "laubjkri",
                                            "createdAt":  "2024-08-03T17:05:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VitaliAntonov",
                                            "createdAt":  "2024-10-27T21:24:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mcpiroman",
                                            "createdAt":  "2024-11-08T19:38:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gabboxl",
                                            "createdAt":  "2024-12-18T13:34:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dallmair",
                                            "createdAt":  "2025-09-17T14:07:12Z"
                                        }
                                    ],
                          "totalCount":  40
                      },
        "updatedAt":  "2024-02-04T12:24:02Z",
        "body":  "Currently, it\u0027s not possible for applications to host both .NET Framework and .NET Core CLRs together in the same process. This creates an impediment for applications that need to load components that can use either runtime. Having support for this would be particularly useful in COM scenarios.\r\n\r\nThe recent announcement that VSTO will not be updated to support building Office add-ins using .NET Core (#5156) mentioned the lack of side-by-side .NET Core/.NET Framework support in the same process was the technical reason for this. If SxS support was implemented then it could be possible to build Office add-ins using .NET Core, even if VSTO was not updated.\r\n\r\nPlease give this serious consideration as there is a large Office developer ecosystem that is currently stranded on .NET Framework 4.8.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcshUPw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDM2NDEwNg==",
                                           "createdAt":  "2021-06-04T05:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@JoshTefay This is a long standing limitation for NET Core and .NET 5+ and at present considered \"by-design\". I would recommend moving this to the [dotnet/runtime](https://github.com/dotnet/runtime) repo where we have a few issues discussing the topic. The latest is https://github.com/dotnet/runtime/issues/49686. I realize trying to determine where to file these issues is very confusing, but in this case I think the dotnet/runtime repo will get better visibility.",
                                           "updatedAt":  "2021-06-04T05:14:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDM2NTk0Nw==",
                                           "createdAt":  "2021-06-04T05:19:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Another discussion with more technical details can be found at https://github.com/dotnet/runtime/issues/12018.",
                                           "updatedAt":  "2021-06-04T05:19:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDM5OTA3MA==",
                                           "createdAt":  "2021-06-04T06:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arknu",
                                           "body":  "The same issue also happens with multiple versions of .NET 5+ in the same process, see https://github.com/dotnet/runtime/issues/49686",
                                           "updatedAt":  "2021-06-04T06:29:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDQ3NDYwNw==",
                                           "createdAt":  "2021-06-04T08:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JoshTefay",
                                           "body":  "@AaronRobinsonMSFT thanks. Could you please move this issue to the recommended repo? I don\u0027t see an option to do this.",
                                           "updatedAt":  "2021-06-04T08:20:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDgxMjYwOQ==",
                                           "createdAt":  "2021-06-04T15:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-04T15:24:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDgxMzA0NQ==",
                                           "createdAt":  "2021-06-04T15:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, it\u0027s not possible for applications to host both .NET Framework and .NET Core CLRs together in the same process. This creates an impediment for applications that need to load components that can use either runtime. Having support for this would be particularly useful in COM scenarios.\r\n\r\nThe recent announcement that VSTO will not be updated to support building Office add-ins using .NET Core (#5156) mentioned the lack of side-by-side .NET Core/.NET Framework support in the same process was the technical reason for this. If SxS support was implemented then it could be possible to build Office add-ins using .NET Core, even if VSTO was not updated.\r\n\r\nPlease give this serious consideration as there is a large Office developer ecosystem that is currently stranded on .NET Framework 4.8.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJoshTefay\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-04T15:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VoG5",
                                           "createdAt":  "2021-08-08T22:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT-D4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dirvo",
                                                                               "createdAt":  "2024-01-24T20:47:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "govert",
                                           "body":  "@AaronRobinsonMSFT  In the recent .NET 5+ / VSTO post (https://github.com/dotnet/core/issues/5156) you say \r\n\r\n\u003e [...] .NET Core/.NET 5+ cannot work together with .NET Framework in the same process and may lead to add-in load failures.\r\n\r\nHowever, previous threads, in particular your comment here: https://github.com/dotnet/runtime/issues/12018#issuecomment-551179800 said (about the same scenario of .NET Framework + .NET Core / .NET 5+ in a process):\r\n\r\n\u003e It was not the intent of the statement to be so restrictive, but rather to convey the scenario has severe limitations with respect to diagnostics and the interaction between the two runtimes. I will update the documentation to provide the correct clarity and hopefully avoid confusion and concern about the associated scenarios.\r\n\r\nMy limited testing so far is that a combination of .NET Framework and one version of a .NET 5+ runtime in a process works and my understanding is that this is a supported scenario, subject to the limitations pointed out by @jeffschwMSFT here https://github.com/dotnet/runtime/issues/12018#issuecomment-549062371\r\n\r\n\u003e Here are a few scenarios that are not supported with full fidelity:\r\n\u003e\r\n\u003e * Assemblies loaded into .NET Framework are not visible in .NET Core and vice versa\r\n\u003e * Debugging does not work well (you can only debug one runtime – not both of them at the same time)\r\n\r\nThe current documentation for COM Interop here: https://docs.microsoft.com/en-us/dotnet/core/native-interop/expose-components-to-com was indeed updated to be consistent with this previous discussion:\r\n\r\n\u003eAdditionally, loading both .NET Framework and .NET Core into the same process does have diagnostic limitations. The primary limitation is the debugging of managed components as it is not possible to debug both .NET Framework and .NET Core at the same time. In addition, the two runtime instances don\u0027t share managed assemblies. This means that it isn\u0027t possible to share actual .NET types across the two runtimes and instead all interactions must be restricted to the exposed COM interface contracts.\r\n\r\nAnd to be clear, for the moment different .NET Core/.NET 5+ versions cannot be simultaneously loaded into a process, but that is a different issue and a significantly smaller restriction.\r\n\r\nIf there is new technical information about limitations in the  scenario with .NET Core/.NET 5+ and .NET Framework in the same process, maybe you can expand a bit. Bit I think it would be really surprising and bad if there are now serious problems with this.\r\n\r\nOtherwise, if it is still supported to run the combination in process, maybe an explicit comment in the .NET 5+ hosting documentation to this effect could be added to clarify things (or if I have missed it, a pointer would correct the misunderstanding raised in the original post in this thread).",
                                           "updatedAt":  "2021-08-08T22:03:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41YdVc",
                                           "createdAt":  "2021-08-09T22:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQf8pA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "airbreather",
                                                                               "createdAt":  "2023-12-25T15:03:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@govert Thank you for asking about this. I agree this area could be described better. Your reading of my statement on dotnet/core#5156 is fair. I think we can agree the word in question here is \"support\" \u0026ndash; as in what are the guarantees between a .NET Framework instance and a .NET Core 3.x/.NET 5+ instance in the same process? The official answer is that it is not supported and untested and therefore there are no guarantees.\r\n\r\nThis invites questions regarding scenarios that people have made work over the past several years. Precise definitions for what users can expect for any of the infinite scenarios involving .NET Framework and .NET Core 3.x/.NET 5+ are impossible so unfortunately the guidance comes down to the following \u0026ndash; your mileage may vary but there are known scenarios where it will not work and we reserve the right to fix or close issues as \"by-design\". We are endeavoring to make transitioning from .NET Framework to .NET 5+ as easy as possible and if that is possible it is strongly recommended since the platform evolution is entirely focused on .NET 5+.\r\n\r\n\u003e If there is new technical information about limitations in the scenario with .NET Core/.NET 5+ and .NET Framework in the same process, maybe you can expand a bit. \r\n\r\nThere are no new technical details or limitations. The only change that should be inferred from this statement is around how we see platform evolution and expectations on the scenario. Since the side-by-side scenario is untested and not on our current roadmap we are simply providing a clear message on what can be expected at present.\r\n\r\n/cc @richlander ",
                                           "updatedAt":  "2021-08-09T23:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ZUAh",
                                           "createdAt":  "2021-08-10T08:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_n53A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-08-10T14:48:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexhost",
                                                                               "createdAt":  "2021-11-11T10:43:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trepeschr",
                                                                               "createdAt":  "2022-06-28T12:47:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HughWarrington",
                                                                               "createdAt":  "2022-10-30T05:46:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gabboxl",
                                                                               "createdAt":  "2024-12-19T09:16:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "govert",
                                           "body":  "@AaronRobinsonMSFT Thank you for the reply.\r\n\r\nOK - I\u0027ll understand the current .NET Framework + .NET 5+ side-by-side behaviour as \u0027not-tested and not-by-design\u0027. For me it seems to work fine so far, but if I run into some weird and unexpected GC or JIT clash I will squeal but not expect my money back ;-)\r\n\r\nI would then like to add a +1 to the suggestion in this thread, that it _should_ be a supported scenario (in your sense, and with limitation as currently known) for a future .NET 5+ version. The debugging etc. limitations are not serious, and even the issue of multiple .NET 5+ versions at once will be an issue that might be kicked down the road a bit. For now I\u0027m likely to strongly advocate to my library users to only target .NET 6 for this scenario, so that we at least have the LTS window without much conflict.\r\n\r\n\u003e We are endeavoring to make transitioning from .NET Framework to .NET 5+ as easy as possible [...]\r\n\r\nA process that may already host .NET Framework independently (and will for the foreseeable long future) is one \u0027environment\u0027 where users might like to transition their extension components, libraries or add-ins to .NET 5+. A lot of the work you\u0027ve done on native exports (UnmanagedCallersOnly etc) and COM components address these scenarios, but a clear message of support would assist our endeavors to enable a transition further. \r\n",
                                           "updatedAt":  "2021-08-10T08:16:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47m_hu",
                                           "createdAt":  "2021-12-23T06:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCutjbw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HughWarrington",
                                                                               "createdAt":  "2022-10-30T05:47:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michaelcheers",
                                           "body":  "Just posting this in case anyone else was trying to integrate interop libraries into .NET Core and came across this issue. Since it seems like getting .NET Framework and .NET Core to work in the same process at the moment is reserved more for technical demonstrations than for production use, we need a workaround. In my own project, I was trying to get the conversion of a Word file to a PDF file to work in my ASP.NET core project. What I ended up doing was creating a separate .NET framework project which I called WordtoPDF.exe and calling it from my code.",
                                           "updatedAt":  "2021-12-23T06:30:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48auja",
                                           "createdAt":  "2022-01-15T08:01:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCK91FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HeinziAT",
                                                                               "createdAt":  "2022-01-21T12:26:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JoshTefay",
                                           "body":  "I see this recently published blog article describes how Microsoft’s own developers are struggling with this issue: https://devblogs.microsoft.com/dotnet/state-of-the-windows-forms-designer-for-net-applications/\r\n\r\nIt describes what is essentially a workaround. Clearly this scenario is not an edge case and is a significant impediment to .NET Framework -\u003e .NET Core migration.\r\n\r\nPerhaps it should be given further consideration for inclusion in .NET 7?\r\n\r\nIf the CoreCLR team has no interest in addressing this issue then maybe consideration should be given to publishing out-of-process hosting guidance and libraries to formalise the workaround the WinForms team has implemented?\r\n ",
                                           "updatedAt":  "2022-01-15T08:01:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48b0XX",
                                           "createdAt":  "2022-01-16T18:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "govert",
                                           "body":  "@JoshTefay Have you run into any unexpected problems when running .NET Framework and .NET 6.0 in the same process?\r\n\r\nApart from the known constraints listed above (assemblies are not shared, and debugging limitations), I would be interested in gathering any information or issues people run into.\r\n\r\nIn my limited testing so far it seems to work fine, and it is a scenario I plan to support for my Excel add-in library.",
                                           "updatedAt":  "2022-01-16T18:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48csGD",
                                           "createdAt":  "2022-01-17T05:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JoshTefay",
                                           "body":  "@govert the primary concern is with the following statements by @AaronRobinsonMSFT above:\r\n\r\n\u003e The official answer is that it is not supported and untested and therefore there are no guarantees.\r\n\r\n\u003e the side-by-side scenario is untested and not on our current roadmap\r\n\r\nIt really makes it a non-starter because if Microsoft doesn\u0027t support it then we can\u0027t use it in software that our customers expect us to support.\r\n\r\n\u003e We are endeavoring to make transitioning from .NET Framework to .NET 5+ as easy as possible and if that is possible it is strongly recommended\r\n\r\nAddressing this issue would not only make transitioning from .NET Framework to .NET 6.0 easy, it would also make it possible for us.",
                                           "updatedAt":  "2022-01-17T05:21:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ClGZr",
                                           "createdAt":  "2022-05-04T07:50:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@govert take a look at this issue: https://github.com/dotnet/runtime/discussions/64942 and related one: https://github.com/Tyrrrz/DotnetRuntimeBootstrapper/issues/27",
                                           "updatedAt":  "2022-05-04T07:50:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yx9f0",
                                           "createdAt":  "2024-02-04T10:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robertmuehsig",
                                           "body":  "\u003e In my limited testing so far it seems to work fine, and it is a scenario I plan to support for my Excel add-in library.\r\n\r\n@govert Do you have a sample somewhere with a .NET Core addin running inside Excel? ",
                                           "updatedAt":  "2024-02-04T10:49:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yyFQ_",
                                           "createdAt":  "2024-02-04T12:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "govert",
                                           "body":  "@robertmuehsig Most of the Excel-DNA samples here compile and will run for both .NET Framework and .NET 6: https://github.com/Excel-DNA/Samples\r\nIf you try, maybe start with the \u0027Ribbon\u0027 sample - https://github.com/Excel-DNA/Samples/tree/master/Ribbon\r\n\r\nThere are quite a few Excel-DNA users that have moved to .NET 6.\r\nWe\u0027re also testing under newer .NET 8 - but then need to be aware of the fact that .NET 6 and .NET 8 cannot run side-by-side (although each can run side-by-side with .NET Framework without problems.)",
                                           "updatedAt":  "2024-02-04T12:24:00Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Add support for .NET Core and .NET Framework side-by-side in same process",
        "labels":  [
                       "area-Host",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53834",
        "createdAt":  "2021-06-07T20:22:30Z",
        "number":  53834,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPK9XQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hoyosjs",
                                            "createdAt":  "2021-06-07T20:29:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2021-06-07T20:56:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2021-06-07T22:44:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jpapp05",
                                            "createdAt":  "2021-06-24T07:40:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Falco20019",
                                            "createdAt":  "2022-01-11T15:39:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrJul",
                                            "createdAt":  "2022-01-20T11:29:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2022-01-29T00:22:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oscargullberg",
                                            "createdAt":  "2022-03-10T13:33:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "achikhv",
                                            "createdAt":  "2022-03-12T04:29:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iq2luc",
                                            "createdAt":  "2022-05-13T20:30:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rocksdanister",
                                            "createdAt":  "2022-10-13T10:51:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-12-12T22:19:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brondavies",
                                            "createdAt":  "2023-05-05T14:25:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "UweKeim",
                                            "createdAt":  "2023-05-05T14:33:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Forge36",
                                            "createdAt":  "2023-05-26T15:47:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennyTK",
                                            "createdAt":  "2023-06-10T03:11:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ld-william",
                                            "createdAt":  "2023-06-13T14:00:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VladWinner",
                                            "createdAt":  "2023-07-31T03:33:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OptiStrat",
                                            "createdAt":  "2023-08-03T12:53:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bilbothebaggins",
                                            "createdAt":  "2023-09-19T09:47:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IrmatDen",
                                            "createdAt":  "2023-09-25T15:32:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-09-26T17:53:53Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-09-26T17:54:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jcummings2",
                                            "createdAt":  "2023-10-11T14:01:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "demchenkov",
                                            "createdAt":  "2023-11-23T16:27:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JLEYDET",
                                            "createdAt":  "2023-12-07T20:01:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shammill",
                                            "createdAt":  "2024-02-01T06:54:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OskiKervinen-MF",
                                            "createdAt":  "2024-02-20T14:29:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rguryanov",
                                            "createdAt":  "2024-03-10T20:14:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asmichi",
                                            "createdAt":  "2024-04-26T11:59:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2024-06-21T21:14:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-24T19:37:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pa-0",
                                            "createdAt":  "2024-10-05T03:28:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ferenc-a",
                                            "createdAt":  "2024-11-12T11:53:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tounaobun",
                                            "createdAt":  "2025-02-20T08:45:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nkelemen18",
                                            "createdAt":  "2025-02-22T01:41:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nsentinel",
                                            "createdAt":  "2025-03-12T19:31:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "heinrich-ulbricht",
                                            "createdAt":  "2025-05-12T07:28:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adadurov",
                                            "createdAt":  "2025-09-08T19:50:01Z"
                                        }
                                    ],
                          "totalCount":  39
                      },
        "updatedAt":  "2025-03-20T02:31:27Z",
        "body":  "This is not currently supported. The closest supported deployment is publishing multiple framework-dependent apps, then setting `DOTNET_ROOT` before running them to use an unzipped copy of the shared framework.\r\n\r\nSupporting this will require both runtime and SDK work to select the appropriate set of shared assemblies.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo0BBLA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjIyOTAxMQ==",
                                           "createdAt":  "2021-06-07T20:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis will require both runtime and SDK work to select the appropriate set of shared assemblies.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `feature request`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-07T20:22:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjMzNDk3MQ==",
                                           "createdAt":  "2021-06-07T23:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasGoulet73",
                                           "body":  "@agocke Does this include publishing an executable projet as self-contained which itself references another executable project ?Both project should end up in the publish folder and use the same self-contained framework.",
                                           "updatedAt":  "2021-06-07T23:53:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjQ2NjMwMA==",
                                           "createdAt":  "2021-06-08T05:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhXbjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jcummings2",
                                                                               "createdAt":  "2022-10-11T13:47:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iq2luc",
                                                                               "createdAt":  "2023-01-17T12:41:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jenokizm",
                                                                               "createdAt":  "2023-02-20T13:28:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T17:54:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shammill",
                                                                               "createdAt":  "2024-02-01T06:54:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SystemCheater",
                                                                               "createdAt":  "2024-03-13T07:21:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fogbank",
                                                                               "createdAt":  "2024-05-18T08:49:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pa-0",
                                                                               "createdAt":  "2024-10-05T03:28:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adadurov",
                                                                               "createdAt":  "2025-09-08T19:48:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "alexrp",
                                           "body":  "This feature would be incredibly useful for projects that ship multiple small and focused command line utilities in a single release.\r\n\r\nBonus points if trimming can be done based on the shared assembly set.",
                                           "updatedAt":  "2021-06-08T05:53:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjYwNjI1OA==",
                                           "createdAt":  "2021-06-08T09:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e @agocke Does this include publishing an executable projet as self-contained which itself references another executable project ?Both project should end up in the publish folder and use the same self-contained framework.\r\n\r\n#52974",
                                           "updatedAt":  "2021-06-08T09:18:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjYxMTMxMg==",
                                           "createdAt":  "2021-06-08T09:25:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Presupposes the UI a bit by assuming that \"project references to exe projects\" is the right way to design this, but yeah, that\u0027s the general idea.",
                                           "updatedAt":  "2021-06-08T09:25:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Njc3NTA4Mg==",
                                           "createdAt":  "2021-06-08T13:37:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH3Q-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2021-06-08T17:16:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T17:55:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "This would be just splendid to be supported. I\u0027ve been thinking about designs for this for a while now. One idea i had would be updating the `FrameworkReference` Item to take a filepath to a project file. The Project file in question would define the framework and maybe even `PackageReference` items used to define common libraries used by more than one project. \r\nThe latter would be increasingly useful where a modularized install scenario requires subdirectories for certain App A, B \u0026 C that all require the dotnet runtime but may depend on different versions of the same library thus should be isolated in their own directories.\r\n\r\n**A.csproj**\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet5.0-windows\u003c/TargetFramework\u003e\r\n    \u003cOutputType\u003ewinexe\u003c/OutputType\u003e\r\n    \u003cUseWPF\u003etrue\u003c/UseWPF\u003e\r\n    \u003cDisableImplicitFrameworkReference\u003etrue\u003c/DisableImplicitFrameworkReference\u003e\r\n    \u003cOutputPath\u003e$(SharedOutputPath)/client\u003c/OutputPath\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Include=\"../runtime/runtime.msbuildproj\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n**B.csproj**\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet5.0-windows\u003c/TargetFramework\u003e\r\n    \u003cDisableImplicitFrameworkReference\u003etrue\u003c/DisableImplicitFrameworkReference\u003e\r\n    \u003cOutputPath\u003e$(SharedOutputPath)/server\u003c/OutputPath\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Include=\"../runtime/runtime.msbuildproj\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n**runtime.msbuildproj**\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.RuntimeCache\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet5.0-windows\u003c/TargetFramework\u003e\r\n    \u003cOutputPath\u003e$(SharedOutputPath)/runtime\u003c/OutputPath\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nThe sdk could then use the FrameworkReference to traverse and query the outputpath of the runtimecache project and tell the respective targets to either generate .deps.json respecting those path (comparable to how it is run during debug when dlls of packagereferences etc. are resolved via path in deps) OR by declaring the outputpath of the frameworkreference project as a probingPath in the deps.json.\r\n\r\nI know this  sounds like a stretch from the original requirement, but it really is in the spirit of the change needed, because theres almost no two individual apps that would generate the exact same sets of dependencies (especially with trimming). If you build everything into a single directory msbuild would have to A) concurrently build in the same directory which is problematic of it self, but theres also the problem of a second app publishing their dependencies in the same directory which might override hard dependencies onto different versions thus generating a whole other range of issues.\r\nWe have this exact usecase and started producing per app directories for a while now and it really is a more sane experience.",
                                           "updatedAt":  "2021-06-08T15:42:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Njk0OTc3NA==",
                                           "createdAt":  "2021-06-08T17:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@MeikTranel Thanks, this seems very interesting.\r\n\r\nFair warning though, no timeline or commitment to this yet. .NET 6 is almost certainly impossible, we have too much work to do for existing scenarios.\r\n\r\nThis could be on the table for .NET 7 though, depending on competing priorities.",
                                           "updatedAt":  "2021-06-08T17:18:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Njk1NDYzOA==",
                                           "createdAt":  "2021-06-08T17:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "Haha sure no worries - I was expecting this 😊\n\nOne thing that would really help immensely would be just the ability to specify a probing path as a relative directory in the runtimeconconfig.json - one can already specify it in as an environment variable with an absolute path so with my utterly minimal knowledge of the host I assumed it should be possible.",
                                           "updatedAt":  "2021-06-08T17:26:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTYwOTYyNA==",
                                           "createdAt":  "2021-06-15T15:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@MeikTranel I just want to make sure I understand what you mean by \"probing path\". Is it the path to the runtime install location (specified via `DOTNET_ROOT` env. variable), or is it a probing path for additional assemblies (which can currently be done via for example command line `--additionalprobingpaths`)?",
                                           "updatedAt":  "2021-06-15T15:41:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTg0MDAzNg==",
                                           "createdAt":  "2021-06-15T21:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "The first one primarily - the latter should already be working with the runtimeconfig.json right?\r\n\r\nOne use case we often use is something like a aspnetcore webapi bundled with a windows service host thats registered via install. Env variables are somewhat awkward in those situations. It almost always requires some sort of wrapping that makes it awkward. It would help tremendously if the runtimeconfig.json parsing or at least small parts of it would happen before the hostfxr is loaded. Basically any mechanism that can be stored permanently within the files built during dotnet build\r\n",
                                           "updatedAt":  "2021-06-15T21:19:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjE4ODA1Mg==",
                                           "createdAt":  "2021-06-16T09:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyxuCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MeikTranel",
                                                                               "createdAt":  "2021-06-24T07:25:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iq2luc",
                                                                               "createdAt":  "2023-01-17T12:42:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks @MeikTranel. Personally I don\u0027t like parsing `.runtimeconfig.json` from the apphost itself (it would bloat the file, which is part of every application). \r\n\r\nOne of the ideas was something like:\r\n* Only allow the path to be relative to the application directory\r\n* Bake the path into the apphost executable as a constant\r\n\r\nThis would have the downside that it\u0027s not possible to modify the path with simple text editor, basically one would have to rebuild the app to do that. The upside is that it\u0027s simple and doesn\u0027t require too much new code in the apphost.",
                                           "updatedAt":  "2021-06-16T09:04:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NzQwNTkyOQ==",
                                           "createdAt":  "2021-06-24T07:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "That seems fine with me.",
                                           "updatedAt":  "2021-06-24T07:25:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48NKKp",
                                           "createdAt":  "2022-01-11T15:35:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrZOLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bilbothebaggins",
                                                                               "createdAt":  "2023-09-19T09:36:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T17:59:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-24T19:33:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Falco20019",
                                           "body":  "Very interested in this. We currently try to achieve this, by basically packing the application as NuGet package through a custom SDK:\r\n\r\n** Sdk\\Tool.props of Company.SDK.Bundle **\r\n```\r\n\u003cProject\u003e\r\n    \r\n    \u003cPropertyGroup\u003e\r\n\t\t\u003cIncludeBuildOutput\u003efalse\u003c/IncludeBuildOutput\u003e\r\n\t\t\u003cCopyBuildOutputToPublishDirectory\u003efalse\u003c/CopyBuildOutputToPublishDirectory\u003e\r\n\t\t\u003cNoWarn\u003e$(NoWarn);NU5100;NU5128\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n\t\t\u003cNone Include=\"$(TargetDir)$(TargetName).*\" Pack=\"true\" PackageCopyToOutput=\"true\" PackagePath=\"contentFiles/any/$(TargetFramework)\" /\u003e\r\n\t\t\u003cNone Remove=\"$(TargetDir)$(TargetName).runtimeconfig.dev.json\" /\u003e\r\n\t\t\u003cNone Remove=\"$(TargetDir)$(TargetName).pdb\" /\u003e\r\n\t\u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nThis allows us, to later deploy them together by creating a Dummy project using just `PackageReference`s onto these packages and setting some properties, to avoid, this generating an empty DLL.\r\n\r\n** Sdk\\Sdk.props of Company.SDK.Bundle **\r\n```\r\n\u003cProject ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cBootstrapperName\u003eNameOfSharedConfiguration\u003c/BootstrapperName\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n    \u003cProjectDepsFileName\u003e$(BootstrapperName).deps.json\u003c/ProjectDepsFileName\u003e\r\n    \u003cGenerateDependencyFile\u003etrue\u003c/GenerateDependencyFile\u003e\r\n    \u003cProjectRuntimeConfigFileName\u003e$(BootstrapperName).runtimeconfig.json\u003c/ProjectRuntimeConfigFileName\u003e\r\n    \u003cGenerateRuntimeConfigurationFiles\u003etrue\u003c/GenerateRuntimeConfigurationFiles\u003e\r\n    \u003cIncludeMainProjectInDepsFile\u003efalse\u003c/IncludeMainProjectInDepsFile\u003e\r\n    \u003cCopyBuildOutputToPublishDirectory\u003efalse\u003c/CopyBuildOutputToPublishDirectory\u003e\r\n    \u003cCopyOutputSymbolsToPublishDirectory\u003efalse\u003c/CopyOutputSymbolsToPublishDirectory\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cImport Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.props\" /\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nThe bundle itself is then created using a simple csproj file:\r\n\r\n** bundle.csproj **\r\n```\r\n\u003cProject Sdk=\"Company.SDK.Bundle\"\u003e\r\n \r\n    \u003cItemGroup\u003e\r\n        \u003cPackageReference Include=\"Company.Tool.Tool1\" Version=\"0.2.*\" /\u003e\r\n        \u003cPackageReference Include=\"Company.Tool.Tool2\" Version=\"0.1.2\" /\u003e\r\n    \u003c/ItemGroup\u003e  \r\n\t\t\r\n    \u003cItemGroup\u003e\r\n        \u003cNone Update=\"some_additional_file_to_bundle\" CopyToOutputDirectory=\"PreserveNewest\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nThis will also create the `deps.json` and the `runtimeconfig.json` for all those tools. The only downside is, that you will need to execute them using `dotnet exec --depsfile NameOfSharedConfiguration.deps.json Tool1.dll` instead of the executable, to avoid issues described in #63617.\r\n\r\nThis has the benefit, that all common dependencies are published together and the dependency trees are calculated over all of them. We started doing this, because we have a dependency on gRPC, which will raise size pretty quickly due to it\u0027s native runtimes included per tool. In a regular deployment, we would have 3 copies of the same files for 90% of the DLLs...",
                                           "updatedAt":  "2022-01-11T15:37:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m1BoJ",
                                           "createdAt":  "2023-09-19T09:47:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bilbothebaggins",
                                           "body":  "Noob here. I can understand that this issue asks about the `dotnet publish` command that cannot do this out of the box.\r\n\r\nBut, what is stopping you from publishing your `n` executables to separate folders and then just copying them all into a single output folder. AFAICT, at least insofar I see my publish folders, there should be no incompatible conflicts/overwrites if one just takes a bunch of exe deploy folders and merges all these into a single output folder (post publish). Yes, there would be a deps.json file for each executable, but that seems like a low overhead to me.\r\n\r\nSince I\u0027m fiddling with these systems myself at the moment, clarification would really help me, although it might not help this issue here overmuch, sorry.",
                                           "updatedAt":  "2023-09-19T09:47:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m1bEj",
                                           "createdAt":  "2023-09-19T10:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@bilbothebaggins One of the problems is how to guarantee dependency version consistency. Simple example:\r\n* A.exe depends on C.dll v1\r\n* B.exe depends on C.dll v2\r\n\r\nThe separate publish processes will produce C.dll to the output, but each will get a different version. If you copy over the directories you\u0027ll end up with one of those versions. Part of the feature should be that this gets resolved at build time, and the dependency is unified across the multiple apps (or you have a way to opt-out and have per-app dependencies).",
                                           "updatedAt":  "2023-09-19T10:58:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m2C-5",
                                           "createdAt":  "2023-09-19T12:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrW9Gw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MeikTranel",
                                                                               "createdAt":  "2024-07-24T14:48:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bilbothebaggins",
                                           "body":  "@vitek-karas Ah ok thanks. \r\n\r\nWhere we hit a similar situation, we already unify all library versions across all projects via [CPM](https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management) and transitive pinning. So I took this for granted. \r\n\r\nGiven unified transitive versions for all dependencies of all cooperating executables, would you expect any other problems when throwing them all in the same folder?",
                                           "updatedAt":  "2023-09-19T12:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m2GFt",
                                           "createdAt":  "2023-09-19T12:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESm6Sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bilbothebaggins",
                                                                               "createdAt":  "2025-05-19T09:13:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Given unified transitive versions for all dependencies of all cooperating executables, would you expect any other problems when throwing them all in the same folder?\r\n\r\nIt should probably work - but I didn\u0027t go through all the details and possible implications, so don\u0027t take this as an official statement please.\r\n\r\nOne other thing to be mindful of - all the apps should be built with the same target framework, and same publish options (self-contained or not, and so on). Any differences in those could cause potential problems.",
                                           "updatedAt":  "2023-09-19T12:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m2gWg",
                                           "createdAt":  "2023-09-19T13:34:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e One of the problems is how to guarantee dependency version consistency.\r\n\r\nAnother would be trimming I guess? Also, are there any plans to work on this in .NET 9?",
                                           "updatedAt":  "2023-09-19T13:34:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GARDj",
                                           "createdAt":  "2024-07-24T14:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "\u003e Given unified transitive versions for all dependencies of all cooperating executables, would you expect any other problems when throwing them all in the same folder?\r\n\r\nThe version is the least of the problems tho. We still have to guarantee that a shared dependency folder is being written to from different rid actors.",
                                           "updatedAt":  "2024-07-24T14:50:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCWkp",
                                           "createdAt":  "2024-07-24T19:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrfyHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IrmatDen",
                                                                               "createdAt":  "2024-07-24T23:58:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2024-07-25T11:12:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Very interesting issue. We also have a scenario that would benefit from this, as we have this windows service host that relies on 2 command line tools that we also control.\r\n\r\nInitially, both tools were being copied to the same folder as the host itself, which created _massive_ issues with dependencies like @vitek-karas described. Recently, we isolated each tool to its own subfolder inside of the host process but this results in quite a bit of duplication as now dependencies that both tools need have to be duplicated.\r\n\r\nI\u0027d love to be able to natively have a \"host\" with \"tools\" where the dependencies are managed more efficiently, and it seems this here would allow at least some of that.",
                                           "updatedAt":  "2024-07-24T19:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GeImJ",
                                           "createdAt":  "2024-07-29T14:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Falco20019",
                                           "body":  "We extended what I posted in https://github.com/dotnet/runtime/issues/53834#issuecomment-1010082473 to resolve some of those issues. We added some tasks to the `Company.SDK.Bundle` for this. This is fixing the `deps.json` and the `runtimeconfig.json` to work even in cases where i.e. one tool adds ASP framework, leading to some framework-dependencies being left out from the publish.\r\n\r\nBut it would still be A LOT easier to just have a concept for this directly available by a concept of .NET (local) tool. Especially since this workaround needs to pre-compile and bundle files which also lead to requirements for the build chain (i.e. if you expect an EXE to be contained, the NuPkg has to be build on a Windows runner).\r\n\r\n** AddToolDependencies.cs of Company.SDK.Bundle **\r\n```cs\r\nusing JetBrains.Annotations;\r\nusing Microsoft.Build.Framework;\r\nusing Microsoft.Build.Utilities;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\n\r\nnamespace Company.SDK.Bundle\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Add dependency JSON files for all tools in the project.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cinheritdoc /\u003e\r\n    [PublicAPI]\r\n    public class AddToolDependencies : Task\r\n    {\r\n        private const string RuntimeConfigFileName = \".runtimeconfig.json\";\r\n        private const string DepsJsonFileName = \".deps.json\";\r\n        private const string RelativePathMetadataName = \"RelativePath\";\r\n\r\n        /// \u003csummary\u003e\r\n        /// The path to the generated dependency file. This should be used as template\r\n        /// for all other tool dependency files.\r\n        /// \u003c/summary\u003e\r\n        [Required]\r\n        public string ProjectDepsFilePath { get; set; } = null!;\r\n\r\n        /// \u003csummary\u003e\r\n        /// All files to be published. The task computes possible outputs from these\r\n        /// files, and returns them in the AdditionalOutputs list.\r\n        /// It detects tools by checking for an .runtimeconfig.json entry.\r\n        /// \u003c/summary\u003e\r\n        [Required]\r\n        public ITaskItem[] ResolvedFileToPublish { get; set; } = null!;\r\n\r\n        /// \u003csummary\u003e\r\n        /// Output items per each tool output. They will have the ProjectDepsFilePath set\r\n        /// as Identity and the tool dependency file as RelativePath.\r\n        /// \u003c/summary\u003e\r\n        [Output]\r\n        public ITaskItem[] AdditionalOutputs { get; private set; } = null!;\r\n\r\n        /// \u003cinheritdoc /\u003e\r\n        public override bool Execute()\r\n        {\r\n            var mainDepsFileRelativeName = Path.GetFileName(ProjectDepsFilePath);\r\n            var inputs = ResolvedFileToPublish\r\n                .Select(input =\u003e input.GetMetadata(RelativePathMetadataName))\r\n                .Where(input =\u003e input.EndsWith(RuntimeConfigFileName));\r\n\r\n            var outputs = new List\u003cITaskItem\u003e();\r\n            foreach (var input in inputs)\r\n            {\r\n                var relativeName = input.Replace(RuntimeConfigFileName, DepsJsonFileName);\r\n                if (relativeName.Equals(mainDepsFileRelativeName)) continue;\r\n\r\n                var ti = new TaskItem(ProjectDepsFilePath);\r\n                ti.SetMetadata(RelativePathMetadataName, relativeName);\r\n\r\n                outputs.Add(ti);\r\n            }\r\n\r\n            AdditionalOutputs = outputs.ToArray();\r\n\r\n            return true;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n** PatchRuntimeConfigs.cs of Company.SDK.Bundle **\r\n```cs\r\nusing JetBrains.Annotations;\r\nusing Microsoft.Build.Framework;\r\nusing Microsoft.Build.Utilities;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\nusing Newtonsoft.Json.Serialization;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\n\r\nnamespace Company.SDK.Bundle\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Path runtime configuration JSON files for all tools in the project.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cinheritdoc /\u003e\r\n    [PublicAPI]\r\n    public class PatchRuntimeConfigs : Task\r\n    {\r\n        private static readonly JsonSerializer Serializer = new JsonSerializer\r\n        {\r\n            ContractResolver = new CamelCasePropertyNamesContractResolver(),\r\n            Formatting = Formatting.Indented,\r\n            DefaultValueHandling = DefaultValueHandling.Ignore\r\n        };\r\n\r\n        [PublicAPI]\r\n        private class RuntimeConfigFramework\r\n        {\r\n            private bool Equals(RuntimeConfigFramework other)\r\n            {\r\n                return Name == other.Name \u0026\u0026 Version == other.Version;\r\n            }\r\n\r\n            public override bool Equals(object? obj)\r\n            {\r\n                if (ReferenceEquals(null, obj)) return false;\r\n                if (ReferenceEquals(this, obj)) return true;\r\n                if (obj.GetType() != GetType()) return false;\r\n                return Equals((RuntimeConfigFramework)obj);\r\n            }\r\n\r\n            public override int GetHashCode()\r\n            {\r\n                // It\u0027s not possible to make those readonly since they are initialized by property through JSON deserialization.\r\n                // The correct way would be to have the properties marked as \"init\" instead of \"set\", but this requires C# 8 which\r\n                // is not possible with netstandard2.1...\r\n\r\n                // ReSharper disable NonReadonlyMemberInGetHashCode\r\n                return HashCode.Combine(Name, Version);\r\n                // ReSharper restore NonReadonlyMemberInGetHashCode\r\n            }\r\n\r\n            public string? Name { get; set; }\r\n            public string? Version { get; set; }\r\n        }\r\n\r\n        private const string RuntimeConfigFileName = \".runtimeconfig.json\";\r\n        private const string CopyToPublishDirectoryMetadataName = \"CopyToPublishDirectory\";\r\n\r\n        /// \u003csummary\u003e\r\n        /// The file name of the generated runtime configuration file.\r\n        /// \u003c/summary\u003e\r\n        [Required]\r\n        public string ProjectRuntimeConfigFileName { get; set; } = null!;\r\n\r\n        /// \u003csummary\u003e\r\n        /// The path to the generated runtime configuration file. This should be used to patch\r\n        /// all other tool runtime configuration files.\r\n        /// \u003c/summary\u003e\r\n        [Required]\r\n        public string ProjectRuntimeConfigFilePath { get; set; } = null!;\r\n\r\n        /// \u003csummary\u003e\r\n        /// All files that were published. The task computes possible outputs from these\r\n        /// files, and returns them in the PatchedOutputs list.\r\n        /// It detects tools by checking for an .runtimeconfig.json entry.\r\n        /// \u003c/summary\u003e\r\n        [Required]\r\n        public ITaskItem[] FileWrites { get; set; } = null!;\r\n\r\n        /// \u003csummary\u003e\r\n        /// Output items per each patched tool. They are references to the original (patched) items.\r\n        /// \u003c/summary\u003e\r\n        [Output]\r\n        public ITaskItem[] PatchedOutputs { get; private set; } = null!;\r\n\r\n        /// \u003cinheritdoc /\u003e\r\n        public override bool Execute()\r\n        {\r\n            var inputs = FileWrites\r\n                .Where(input =\u003e input.GetMetadata(CopyToPublishDirectoryMetadataName) != string.Empty \u0026\u0026\r\n                                input.ItemSpec.EndsWith(RuntimeConfigFileName));\r\n\r\n            var mainRuntimeConfig = ReadFromJsonFile(ProjectRuntimeConfigFilePath);\r\n            var tfm = GetTfm(mainRuntimeConfig);\r\n            if (tfm == null)\r\n            {\r\n                Log.LogError(\"Not able to fetch tfm from ProjectRuntimeConfigFilePath. Patching not possible.\");\r\n                return false;\r\n            }\r\n\r\n            var frameworks = GetFrameworks(mainRuntimeConfig);\r\n            if (frameworks == null)\r\n            {\r\n                Log.LogError(\"Not able to fetch frameworks from ProjectRuntimeConfigFilePath. Patching not possible.\");\r\n                return false;\r\n            }\r\n\r\n            var outputs = new List\u003cITaskItem\u003e();\r\n            foreach (var input in inputs)\r\n            {\r\n                var absoluteName = input.ItemSpec;\r\n                var relativeName = Path.GetFileName(absoluteName);\r\n\r\n                if (relativeName.Equals(ProjectRuntimeConfigFileName)) continue;\r\n                if (!PatchJson(absoluteName, tfm, frameworks)) continue;\r\n\r\n                outputs.Add(input);\r\n            }\r\n\r\n            PatchedOutputs = outputs.ToArray();\r\n\r\n            return true;\r\n        }\r\n\r\n        private string? GetTfm(JObject config)\r\n        {\r\n            if (!config.TryGetValue(\"runtimeOptions\", out var optionsToken) || !(optionsToken is JObject options))\r\n            {\r\n                Log.LogError(\"The config file is not containing the required runtimeOptions property.\");\r\n                return null;\r\n            }\r\n\r\n            if (!options.TryGetValue(\"tfm\", out var tfmToken))\r\n            {\r\n                Log.LogError(\"The config file is not containing the required tfm property.\");\r\n                return null;\r\n            }\r\n\r\n            return tfmToken.Value\u003cstring\u003e();\r\n        }\r\n\r\n        private RuntimeConfigFramework[]? GetFrameworks(JObject config)\r\n        {\r\n            if (!config.TryGetValue(\"runtimeOptions\", out var optionsToken) || !(optionsToken is JObject options))\r\n            {\r\n                Log.LogError(\"The config file is not containing the required runtimeOptions property.\");\r\n                return null;\r\n            }\r\n\r\n            if (options.TryGetValue(\"framework\", out var frameworkToken) \u0026\u0026 frameworkToken is JObject framework)\r\n            {\r\n                return new[] { framework.ToObject\u003cRuntimeConfigFramework\u003e()! };\r\n            }\r\n\r\n            if (!options.TryGetValue(\"frameworks\", out var frameworksToken) || !(frameworksToken is JArray frameworks))\r\n            {\r\n                Log.LogError(\"The config file is not containing the required framework OR frameworks property.\");\r\n                return null;\r\n            }\r\n\r\n            return frameworks.Select(f =\u003e f.ToObject\u003cRuntimeConfigFramework\u003e()!).ToArray();\r\n        }\r\n\r\n        private bool PatchJson(string toolRuntimeConfigPath, string tfm, RuntimeConfigFramework[] frameworks)\r\n        {\r\n            var toolRuntimeConfig = ReadFromJsonFile(toolRuntimeConfigPath);\r\n\r\n            var patchedAnything = PatchTfm(toolRuntimeConfigPath, toolRuntimeConfig, tfm);\r\n            patchedAnything |= PatchFrameworks(toolRuntimeConfigPath, toolRuntimeConfig, frameworks);\r\n\r\n            if (!patchedAnything)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            WriteToJsonFile(toolRuntimeConfigPath, toolRuntimeConfig);\r\n            return true;\r\n        }\r\n\r\n        private bool PatchTfm(string toolRuntimeConfigPath, JObject toolRuntimeConfig, string tfm)\r\n        {\r\n            var toolTfm = GetTfm(toolRuntimeConfig);\r\n            if (toolTfm == null)\r\n            {\r\n                Log.LogError(\"Not able to fetch tfm from {0}. File will remain unpatched.\", toolRuntimeConfigPath);\r\n                return false;\r\n            }\r\n\r\n            // Get highest tfm:\r\n            var highestTfm = string.Compare(tfm, toolTfm, StringComparison.Ordinal) \u003e 0\r\n                ? tfm\r\n                : toolTfm;\r\n\r\n            // Nothing to patch:\r\n            if (toolTfm == tfm) return false;\r\n\r\n            // Replace tfm with highest:\r\n            var runtimeOptions = toolRuntimeConfig[\"runtimeOptions\"]!;\r\n            runtimeOptions[\"tfm\"] = highestTfm;\r\n\r\n            return true;\r\n        }\r\n\r\n        private bool PatchFrameworks(string toolRuntimeConfigPath, JObject toolRuntimeConfig, RuntimeConfigFramework[] frameworks)\r\n        {\r\n            var toolFrameworks = GetFrameworks(toolRuntimeConfig);\r\n            if (toolFrameworks == null)\r\n            {\r\n                Log.LogError(\"Not able to fetch frameworks from {0}. File will remain unpatched.\", toolRuntimeConfigPath);\r\n                return false;\r\n            }\r\n\r\n            // Get runtime framework version:\r\n            var runtimeVersion = frameworks.FirstOrDefault()?.Version;\r\n\r\n            // Patch all tool frameworks to the runtime version:\r\n            var atLeastOnePatched = false;\r\n            foreach (var framework in toolFrameworks)\r\n            {\r\n                if (framework.Version == runtimeVersion) continue;\r\n\r\n                atLeastOnePatched = true;\r\n                framework.Version = runtimeVersion;\r\n            }\r\n\r\n            // Get combination of frameworks:\r\n            var combinedFrameworks = frameworks\r\n                .Union(toolFrameworks)\r\n                .ToArray();\r\n\r\n            // Nothing to patch:\r\n            if (!atLeastOnePatched \u0026\u0026 combinedFrameworks.Length == toolFrameworks.Length) return false;\r\n\r\n            // Make sure we always use \"frameworks\" and not \"framework\":\r\n            var runtimeOptions = toolRuntimeConfig[\"runtimeOptions\"]!;\r\n            runtimeOptions[\"framework\"]?.Parent?.Replace(new JProperty(\"frameworks\"));\r\n\r\n            // Replace frameworks with combined list:\r\n            runtimeOptions[\"frameworks\"] = new JArray(combinedFrameworks.Select(framework =\u003e\r\n                JObject.FromObject(framework, Serializer)));\r\n\r\n            return true;\r\n        }\r\n\r\n        private static JObject ReadFromJsonFile(string path)\r\n        {\r\n            using var reader = new JsonTextReader(File.OpenText(path));\r\n            return JObject.Load(reader);\r\n        }\r\n\r\n        private static void WriteToJsonFile(string fileName, JObject value)\r\n        {\r\n            using var writer = new JsonTextWriter(new StreamWriter(File.Create(fileName)));\r\n            Serializer.Serialize(writer, value);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n** Sdk\\Sdk.targets of Company.SDK.Bundle **\r\n```xml\r\n\u003cProject ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n  \u003cImport Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.targets\" /\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cMSBuildAllProjects\u003e$(MSBuildAllProjects);$(MSBuildThisFileFullPath)\u003c/MSBuildAllProjects\u003e\r\n    \u003c_SDK_MsBuildAssembly\u003enetstandard2.1\\SDK.MSBuild.dll\u003c/_SDK_MsBuildAssembly\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cUsingTask AssemblyFile=\"$(_SDK_MsBuildAssembly)\" TaskName=\"Company.SDK.Bundle.AddToolDependencies\" /\u003e\r\n  \u003cUsingTask AssemblyFile=\"$(_SDK_MsBuildAssembly)\" TaskName=\"Company.SDK.Bundle.PatchRuntimeConfigs\" /\u003e\r\n\r\n  \u003cTarget Name=\"_AddToolDependencies\" AfterTargets=\"ComputeResolvedFilesToPublishList\"\u003e\r\n    \u003cAddToolDependencies ProjectDepsFilePath=\"$(ProjectDepsFilePath)\"\r\n                         ResolvedFileToPublish=\"@(ResolvedFileToPublish)\"\u003e\r\n      \u003cOutput TaskParameter=\"AdditionalOutputs\" ItemName=\"_AdditionalOutputs\" /\u003e\r\n    \u003c/AddToolDependencies\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n      \u003c!-- Copy the .deps.json file from the Bootstrapper to all tools. --\u003e\r\n      \u003cResolvedFileToPublish Include=\"@(_AdditionalOutputs)\"\u003e\r\n        \u003cCopyToPublishDirectory\u003ePreserveNewest\u003c/CopyToPublishDirectory\u003e\r\n      \u003c/ResolvedFileToPublish\u003e\r\n    \u003c/ItemGroup\u003e\r\n\r\n    \u003cMessage Importance=\"High\" Text=\"Added additional tool dependencies:\" Condition=\"\u0027@(_AdditionalOutputs)\u0027 != \u0027\u0027\" /\u003e\r\n    \u003cMessage Importance=\"High\" Text=\"- %(_AdditionalOutputs.RelativePath)\" Condition=\"\u0027@(_AdditionalOutputs)\u0027 != \u0027\u0027\" /\u003e\r\n  \u003c/Target\u003e\r\n\r\n  \u003cTarget Name=\"_PatchRuntimeConfigs\" AfterTargets=\"CopyFilesToPublishDirectory\"\u003e\r\n    \u003cPatchRuntimeConfigs ProjectRuntimeConfigFileName=\"$(ProjectRuntimeConfigFileName)\"\r\n                         ProjectRuntimeConfigFilePath=\"$(ProjectRuntimeConfigFilePath)\"\r\n                         FileWrites=\"@(FileWrites)\"\u003e\r\n      \u003cOutput TaskParameter=\"PatchedOutputs\" ItemName=\"_PatchedOutputs\" /\u003e\r\n    \u003c/PatchRuntimeConfigs\u003e\r\n\r\n    \u003cMessage Importance=\"High\" Text=\"Patched runtime configs:\" Condition=\"\u0027@(_PatchedOutputs)\u0027 != \u0027\u0027\" /\u003e\r\n    \u003cMessage Importance=\"High\" Text=\"- %(_PatchedOutputs.RelativePath)\" Condition=\"\u0027@(_PatchedOutputs)\u0027 != \u0027\u0027\" /\u003e\r\n  \u003c/Target\u003e\r\n\u003c/Project\u003e\r\n```",
                                           "updatedAt":  "2024-07-29T14:19:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GhCr0",
                                           "createdAt":  "2024-07-29T20:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsNkqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Falco20019",
                                                                               "createdAt":  "2024-07-31T06:14:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "This just goes to show how a (naively spelled out of course) simple change would prove tremendous in value. We need in this order:\r\n* Ability to refer to a shared runtime/runtimeconfig.json from an app build.\r\n* Ability to compile that path into the apphost binary directly\r\n* Ability refer to a source project for a shared runtime from host projects to facilitate the above.\r\n\r\nIn that Order. Each of these steps would unlock a whole slew of opportunities and therefore make these next steps easier to build.",
                                           "updatedAt":  "2024-07-29T20:11:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jQEEs",
                                           "createdAt":  "2025-03-20T02:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESm63g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "bilbothebaggins",
                                                                               "createdAt":  "2025-05-19T09:15:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "webprofusion-chrisc",
                                           "body":  "Just adding our own reason for wanting a shared self-contained deployment:\n- We have an app distribution to 150K+ customer servers with multiple exes \n- It\u0027s not appropriate for us to install/update a shared runtime potentially affecting customers own critical app workloads, so (multiple) self-contained exes or single file executables are our main option. \n- Taking up disk space with duplicated runtime per exe is frowned upon in a server environment, so we\u0027re looking to reduce our installed footprint.\n- The issue for us with single file exes are all dependencies being bundled in the exe means one super large exe gets loaded instead of stuff getting loaded on demand, plugin support also gets trickier, some things misbehave as a single file and need special fixes or continuous re-testing. \n- We don\u0027t want to have to rewrite it all in Go 😅\n",
                                           "updatedAt":  "2025-03-20T02:31:26Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "Support deploying multiple exes as a single self-contained set",
        "labels":  [
                       "area-Host",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54745",
        "createdAt":  "2021-06-25T15:08:54Z",
        "number":  54745,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-26T17:32:15Z",
        "body":  "The hostpolicy will access two locations (on Windows, on Linux only the first one) on every run, even though in lot of cases it doesn\u0027t need to.\r\n\r\nThe first location is the core servicing store location, typically in `C:\\Program Files(x86)\\coreservicing`.\r\nThis is because we unconditionally try to add the servicing location to the probing paths. This includes an existence check (if the path doesn\u0027t exist we will not include it in the probing paths).\r\n\r\nThe second location is the breadcrumbs file which is typically located in `C:\\ProgramData\\Microsoft\\NetFramework\\BreadcrumbStore`. This file is created if it doesn\u0027t exist (the content is always empty, the information is in the file name itself).\r\n\r\nNeither operation makes sense if there are no assemblies which can be serviced. This is for example typically the case for self-contained apps, where all libraries are marked as non-serviceable. Same goes for single-file self-contained apps.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM8VOQw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODU2NzQ1MQ==",
                                           "createdAt":  "2021-06-25T15:08:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe hostpolicy will access two locations (on Windows, on Linux only the first one) on every run, even though in lot of cases it doesn\u0027t need to.\r\n\r\nThe first location is the core servicing store location, typically in `C:\\Program Files(x86)\\coreservicing`.\r\nThis is because we unconditionally try to add the servicing location to the probing paths. This includes an existence check (if the path doesn\u0027t exist we will not include it in the probing paths).\r\n\r\nThe second location is the breadcrumbs file which is typically located in `C:\\ProgramData\\Microsoft\\NetFramework\\BreadcrumbStore`. This file is created if it doesn\u0027t exist (the content is always empty, the information is in the file name itself).\r\n\r\nNeither operation makes sense if there are no assemblies which can be serviced. This is for example typically the case for self-contained apps, where all libraries are marked as non-serviceable. Same goes for single-file self-contained apps.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-25T15:08:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODU2ODY0Mw==",
                                           "createdAt":  "2021-06-25T15:10:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Note that the implementation of this will likely require some non-trivial refactoring/changes (we would have to be able to remember to check the servicing store only when actually needed and then perform the existence check). Also breadcrumb writing is a relatively tricky area as it happens asynchronously, but maybe just avoiding it will be easy enough.",
                                           "updatedAt":  "2021-06-25T15:10:42Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Avoid servicing related file IO if no libraries are enabled for servicing in the app",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56160",
        "createdAt":  "2021-07-21T15:39:59Z",
        "number":  56160,
        "author":  "nmuench",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-29T20:02:58Z",
        "body":  "When attempting to use the runtime option --runtimeconfig in order to provide an [application].runtimeconfig.json file to be used when running a dll, the console throws an error that says the option is unkown.\r\n\r\n`Unknown option: --runtimeconfig\r\n.NET SDK (5.0.301)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath \u003cpath\u003e   Path containing probing policy and assemblies to probe for.\r\n  --additional-deps \u003cpath\u003e         Path to additional deps.json file.\r\n  --depsfile                       Path to \u003capplication\u003e.deps.json file.\r\n  --fx-version \u003cversion\u003e           Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward \u003csetting\u003e         Roll forward to framework version  (LatestPatch, Minor, LatestMinor, Major, LatestMajor, Disable).\r\n  --runtimeconfig                  Path to \u003capplication\u003e.runtimeconfig.json file.\r\n`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMLNKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40tTBd",
                                           "createdAt":  "2021-07-21T15:40:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2021-07-21T15:40:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uQUR",
                                           "createdAt":  "2021-07-21T22:31:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sfoslund",
                                           "body":  "@eerhardt is this a runtime issue?",
                                           "updatedAt":  "2021-07-21T22:31:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40uUSf",
                                           "createdAt":  "2021-07-21T23:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Yes, it looks like a `dotnet.exe` host issue.\r\n\r\ncc @vitek-karas @agocke \r\n\r\n@nmuench - what was the full command line you were using to get the error?\r\n\r\nHere\u0027s an example of a command line we use to run our unit tests in dotnet/runtime:\r\n\r\n```\r\n\"C:\\git\\runtime\\artifacts\\bin\\testhost\\net6.0-windows-Debug-x64\\dotnet.exe\" exec --runtimeconfig Microsoft.Extensions.Hosting.Unit.Tests.runtimeconfig.json --depsfile Microsoft.Extensions.Hosting.Unit.Tests.deps.json xunit.console.dll Microsoft.Extensions.Hosting.Unit.Tests.dll -xml testResults.xml -nologo -notrait category=OuterLoop -notrait category=failing\r\n```",
                                           "updatedAt":  "2021-07-21T23:15:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wCal",
                                           "createdAt":  "2021-07-22T15:32:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen attempting to use the runtime option --runtimeconfig in order to provide an [application].runtimeconfig.json file to be used when running a dll, the console throws an error that says the option is unkown.\r\n\r\n`Unknown option: --runtimeconfig\r\n.NET SDK (5.0.301)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath \u003cpath\u003e   Path containing probing policy and assemblies to probe for.\r\n  --additional-deps \u003cpath\u003e         Path to additional deps.json file.\r\n  --depsfile                       Path to \u003capplication\u003e.deps.json file.\r\n  --fx-version \u003cversion\u003e           Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward \u003csetting\u003e         Roll forward to framework version  (LatestPatch, Minor, LatestMinor, Major, LatestMajor, Disable).\r\n  --runtimeconfig                  Path to \u003capplication\u003e.runtimeconfig.json file.\r\n`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enmuench\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-22T15:32:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wgCp",
                                           "createdAt":  "2021-07-22T18:13:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Right -- the key is that the command is `dotnet exec --runtimeconfig ...`. The help text makes it sound like you can just do `dotnet --runtimeconfig` but I don\u0027t think that\u0027s correct.\r\n",
                                           "updatedAt":  "2021-07-22T18:13:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wqOz",
                                           "createdAt":  "2021-07-22T19:19:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Hmm - I didn\u0027t know this, but it\u0027s true. When running in muxer mode (`dotnet app.dll`) `--runtimeconfig` is not a recognized option - so depending on the command line it will be treated as either unknown option, or option passed to the app.\r\nThe help is generated for all options, regardless of when/how they\u0027re valid unfortunately.",
                                           "updatedAt":  "2021-07-22T19:19:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wqaw",
                                           "createdAt":  "2021-07-22T19:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I think it\u0027s also order-dependent. The app DLL has to come first, but after that you can pass `--runtimeconfig`",
                                           "updatedAt":  "2021-07-22T19:21:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wrNI",
                                           "createdAt":  "2021-07-22T19:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzkAZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2021-07-22T19:35:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "You can, but it will be passed to the app as one of its command line arguments, it will NOT be recognized as host option (I just tried).",
                                           "updatedAt":  "2021-07-22T19:26:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wsmf",
                                           "createdAt":  "2021-07-22T19:36:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "in that case we can probably change the help message to something like\r\n\r\n```\r\nUsage: dotnet [\u0027exec\u0027 runtime-options] [path-to-application] [arguments]\r\n```",
                                           "updatedAt":  "2021-07-22T19:36:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ws0r",
                                           "createdAt":  "2021-07-22T19:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzk3CA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2021-07-22T21:27:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "You can still use `--fx-version` or `--roll-forward` or `--additional-deps` or `--additional-probing-path`... it\u0027s ... complicated 😢 ",
                                           "updatedAt":  "2021-07-22T19:38:03Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "CLI Unknown Option: --runtimeconfig ",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56896",
        "createdAt":  "2021-08-05T10:00:57Z",
        "number":  56896,
        "author":  "tippisum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-31T14:41:24Z",
        "body":  "### Background and motivation\n\nCurrently, `coreclr_initialize` is not supported to be called more than once. **On the other hand, there is not any method to retrieve an already initialized host, either.**\r\nAs a result, if one ever want to execute any .NET Core code from native, he must be the _first one to contact coreclr_, or he is _completely out of luck_.\r\n\r\nSituation: one is writing a plugin which is to be loaded by a native host. The native host requires the plugin to have a native entry point and is completely out of his control. At the same time, there are also other plugins which are also completely out of his control.\r\nThen he want to write part of his code in C#, thus necessitate the hosting of .NET Core. However, he is not the first one to be clever enough to use .NET Core, and there is already someone loading coreclr into the process.\r\nIt is not hard to retrieve an already loaded coreclr module (by GetModuleHandleW, for example), but even if one has access to the coreclr module, he cannot run any managed code if `coreclr_initialize` is already called by others and the returned host handle is not shared to him.\r\nHe is okay with the limitations like only one version of coreclr can exist, the host can only be initialized once, etc. He is also willing to accept some caveats like the host initialized by others might not have properties set to what exactly he wants. All he want is just having a chance to even try to load a managed assembly and execute some code.\r\nBut he is still completely out of luck in this case. Any coreclr method to load managed code **requires** a host handle to start with, but he has no way to get such a handle unless he is **the lucky one making the first ever call to `coreclr_initialize` among the whole process**.\r\n\r\nRequest: A way for native users other than the first caller of `coreclr_initialize` to have a chance to try to load and execute any managed code, provided that they are already aware of any limitation and caveats, like only one coreclr version can exist and the host properties cannot be changed.\n\n### API Proposal\n\n```C\r\n//\r\n// Retrieving an already created host handle, provided that there is any.\r\n//\r\n// Parameters:\r\n//  [out] hostHandle - Handle of an already created host\r\n//\r\n// Returns:\r\n//  HRESULT indicating status of the operation. S_OK if there is a suitable handle.\r\n//\r\nextern int coreclr_get_active_host(void** hostHandle);\r\n```     \r\n\n\n### API Usage\n\n```C\r\nHRESULT hr;\r\nvoid* hostHandle;\r\nhr = coreclr_get_active_host(\u0026hostHandle);\r\nif (SUCCEEDED(hr)) {\r\n// coreclr_initialize is already called, try to load my code into this host.\r\n} else {\r\n// try to do host initialization myself.\r\n}\r\n```     \r\n\n\n### Risks\n\nIt is not always possible to load an assembly to a host created by others, the .NET version may differ, some properties may cause conflict, etc.\r\nNonetheless, without such an API it will be plain impossible to ever have a try.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONjLYOA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41PyAK",
                                           "createdAt":  "2021-08-05T10:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently, `coreclr_initialize` is not supported to be called more than once. **On the other hand, there is not any method to retrieve an already initialized host, either.**\r\nAs a result, if one ever want to execute any .NET Core code from native, he must be the _first one to contact coreclr_, or he is _completely out of luck_.\r\n\r\nSituation: one is writing a plugin which is to be loaded by a native host. The native host requires the plugin to have a native entry point and is completely out of his control. At the same time, there are also other plugins which are also completely out of his control.\r\nThen he want to write part of his code in C#, thus necessitate the hosting of .NET Core. However, he is not the first one to be clever enough to use .NET Core, and there is already someone loading coreclr into the process.\r\nIt is not hard to retrieve an already loaded coreclr module (by GetModuleHandleW, for example), but even if one has access to the coreclr module, he cannot run any managed code if `coreclr_initialize` is already called by others and the returned host handle is not shared to him.\r\nHe is okay with the limitations like only one version of coreclr can exist, the host can only be initialized once, etc. He is also willing to accept some caveats like the host initialized by others might not have properties set to what exactly he wants. All he want is just having a chance to even try to load a managed assembly and execute some code.\r\nBut he is still completely out of luck in this case. Any coreclr method to load managed code **requires** a host handle to start with, but he has no way to get such a handle unless he is **the lucky one making the first ever call to `coreclr_initialize` among the whole process**.\r\n\r\nRequest: A way for native users other than the first caller of `coreclr_initialize` to have a chance to try to load and execute any managed code, provided that they are already aware of any limitation and caveats, like only one coreclr version can exist and the host properties cannot be changed.\n\n### API Proposal\n\n```C\r\n//\r\n// Retrieving an already created host handle, provided that there is any.\r\n//\r\n// Parameters:\r\n//  [out] hostHandle - Handle of an already created host\r\n//\r\n// Returns:\r\n//  HRESULT indicating status of the operation. S_OK if there is a suitable handle.\r\n//\r\nextern int coreclr_get_active_host(void** hostHandle);\r\n```     \r\n\n\n### API Usage\n\n```C\r\nHRESULT hr;\r\nvoid* hostHandle;\r\nhr = coreclr_get_active_host(\u0026hostHandle);\r\nif (SUCCEEDED(hr)) {\r\n// coreclr_initialize is already called, try to load my code into this host.\r\n} else {\r\n// try to do host initialization myself.\r\n}\r\n```     \r\n\n\n### Risks\n\nIt is not always possible to load an assembly to a host created by others, the .NET version may differ, some properties may cause conflict, etc.\r\nNonetheless, without such an API it will be plain impossible to ever have a try.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etippisum\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-05T10:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41W72L",
                                           "createdAt":  "2021-08-09T13:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This should be supported since .NET Core 3.0. I should start by saying that native hosting should not call `coreclr` directly, instead it should use native hosting APIs provided by `hostfxr` library. See the [docs](https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting) for a simple guide on what the recommended way to do this is.\r\n\r\nThere\u0027s a helper library `nethost` which implements `get_hostfxr_path` function, which can locate either the already loaded `hostfxr` or find it on disk. (Note that `hostfxr` acts as the native hosting entrypoint, native hosting should not call into `coreclr` directly). See [design doc](https://github.com/dotnet/runtime/blob/main/docs/design/features/native-hosting.md#new-host-binary-for-finding-hostfxr) for more details on this.\r\n\r\nOnce you have the `hostfxr` loaded (using the nethost will return the path to the already loaded `hostfxr` so loading it again will return the already loaded module), you would call `hostxfr_initialize_for_runtime_config` as usual. This will internally either load the runtime (and return what\u0027s also called \"primary\" context) or it will simply try to \"attach\" to the already running runtime (internally this creates so called \"secondary\" context). \r\n\r\nThere many more details on this in the same [design doc](https://github.com/dotnet/runtime/blob/main/docs/design/features/native-hosting.md#initialize-host-context).\r\n\r\nI don\u0027t think we have a sample which would do this, but the idea is that the hosting code should not really see a big difference - the methods to call are exactly the same. So the https://github.com/dotnet/samples/tree/main/core/hosting/HostWithHostFxr sample is basically the exact same code one would use.\r\n\r\nThe design doc also discusses what functionality exists to compare the requirements of the new plugin and the existing runtime in the process (framework version resolution and so on).",
                                           "updatedAt":  "2021-08-09T13:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41bzgN",
                                           "createdAt":  "2021-08-11T04:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tippisum",
                                           "body":  "Yes, I\u0027m aware of the new `hostfxr` hosting options.\r\nBut the problem cannot be solved this way: A single component that chooses to load `coreclr.dll` directly will break all `hostfxr` hosting options, and unfortunately, **there are already codes that load `coreclr.dll` directly**.\r\nI\u0027m OK with trying the `hostfxr` method first, but a `coreclr_get_active_host` style API is still necessary in case there are thirdparty codes that use `coreclr.dll` directly: They already exist now, and they cannot be prevented in the future. Well, the `coreclr` hosting option is not even officially deprecated but just \"not recommended in favor of the new `hostfxr` method\" so it is to be expected that there will still be more and more of them in the future.",
                                           "updatedAt":  "2021-08-11T04:01:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ci2I",
                                           "createdAt":  "2021-08-11T09:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I agree that the messaging around this is problematic (we should make it much more clear that directly calling `coreclr` is not really supported).\r\n\r\nThat said, I don\u0027t think we should be providing two APIs to solve the same problem. The `coreclr` based API (which this issue is about) would not provide any guarantees about anything - no way to validate framework compatibility, runtime versioning, dependency resolution, ... - the runtime simply doesn\u0027t have this information available to it (fixable, but hard). Also this API would only be useful if you basically trust the other component which loaded the coreclr into the process - not for security reasons, but for versioning and compatibility.\r\n\r\nIn addition to that - it would basically mean that every component should be using the `coreclr` directly - since the `hostfxr` way can\u0027t handle that case.\r\n\r\n\u003e there are already codes that load coreclr.dll directly\r\n\r\nWe can\u0027t prevent people doing weird things - you could call `hostpolicy` directly as well - definitely not recommended or supported, but you could. That would get you into yet another state which might be problematic for both `hostfxr` or `coreclr` based hosting calls.\r\n\r\nI think we should fix the docs and basically remove the direct `coreclr` hosting pages - we can keep those in the repo as internal documentation, but avoid exposing these as \"viable even if not encouraged\" hosting option.",
                                           "updatedAt":  "2021-08-11T09:41:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41fGG8",
                                           "createdAt":  "2021-08-12T04:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tippisum",
                                           "body":  "I totally agree that it is not a good idea to do weird things.\r\n\r\nBut the real problem is, **it is not the one who have done weird things that will actually suffer from the consequence**, in fact their components just work as expected. Hell, they cannot even be blamed of doing weird things, as long as the `coreclr` hosting option is not officially deprecated. **It is the cooperative author that will suffer and find himself completely out of hope**. This is not good.\r\n\r\nAs a cooperative plugin author, it is perfectly acceptable to prefer the \"right thing to do\" at first (e.g. use `hostfxr` hosting options) and stick to it whenever possible, but he also have to deal with the situation that there is already someone chooses to load `coreclr.dll` directly.\r\nOf course there are caveats, like versioning and compatibility problems, but **Is there actually any choice**? *\"Accept and live with it, **or die**\"* is not something really about \"trust\".\r\n\r\nI am aware that the proposed `coreclr_get_active_host` does not look great, but consider that\r\n1. \"The right thing to do\", that is, to support side-by-side hosting, is unlikely to be implemented anytime soon.\r\n2. There is not actually any choice. There can be a long list telling \"why it is not a good thing to do and why you would not like to use it\" (versioning, compatibility, etc.), but currently the only possible \"alternative\" is _**\"to die\"**_ (i.e. to give up any hope to run any managed code).\r\n3. It is not hard to implement, and acts as the last resort.\r\n\r\nIt will be good if there is such a last resort before completely giving up and showing an ugly error dialog blaming others doing weird things (the end user will not care, of course) and hoping that the end user will understand this complex technical situation and find the right one to blame (they will not, of course).\r\n\r\nAppendix.\r\nThe current workflow of loading .NET Core code works like this:\r\n1. Publish the managed library as a fake self-contained command line application, then prepare another `.runtimeconfig.json` which is identical to the published one except that it is framework-dependent. *(Only application can be self-contained)*\r\n2. In the native entry point, load `hostfxr.dll` from the published application *(It is not possible to use the system-wide `hostfxr.dll`, see #56968)*\r\n3. Try `hostxfr_initialize_for_runtime_config` with the framework-dependent `.runtimeconfig.json`. This ensures maximum compatibility since it will try to reuse any already loaded context, then resolve to the shared framework runtime.\r\n4. If there is not any loaded context, nor does the user installed any framework runtime, retry with `hostfxr_initialize_for_dotnet_command_line` and load the self-contained runtime.\r\n5. As long as there is no context conflict or anyone else loading `coreclr.dll` directly, the loading progress will success and can support any number of components sharing a single runtime host (either the shared framework one or the first loaded self-contained one).\r\n6. But if there is anyone that already loaded `coreclr.dll` and called `coreclr_initialize`, then all above will fail and there is nothing further one can do before exiting. **\u003c- Currently we are at here**.\r\n7. _**Proposal**: As a last resort, try to open a handle to the already loaded `coreclr.dll` (cooperative components never load `coreclr.dll` themselves), and attach to the initialized host by calling `coreclr_get_active_host`._ \u003c- Proposed API will be called here.\r\n\r\nAs you can see, the proposed API **will not** drive everyone to use `coreclr.dll` directly. In fact, a cooperative component author never _loads_ `coreclr.dll` directly. The proposed API is _only queried upon an already loaded_ `coreclr.dll`, and is only called after all the `hostfxr` methods fail.\r\nAs a result, adding a `coreclr_get_active_host` is not likely to cause any hammer. It will not drive anyone who are currently using `hostfxr` methods to load `coreclr.dll` directly, and it is not likely to make people prefer `coreclr_get_active_host` as a way to share host because the `coreclr_get_active_host` way has significantly more caveats compared to using `hostfxr` (as you have already mentioned).\r\nYou can also make it explicit in the doc that one should never try to load `coreclr.dll` directly in order to use this API, but only query it upon an already loaded `coreclr.dll` module.",
                                           "updatedAt":  "2021-08-12T05:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41fpbN",
                                           "createdAt":  "2021-08-12T09:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "If all components behaved the way you describe it, that would be great. I just don\u0027t have the confidence that it\u0027s going to be that case. But I guess that\u0027s also an argument for adding the new API (since as you already mentioned there are exiting bad-behaving components).\r\n\r\nThe reason I\u0027m a bit hesitant still is that basically we would be adding an API which is unsupported from the very beginning. It\u0027s just really weird. The API would have to be \"unsupported\" because there are so many caveats around using it - there would be basically no meaningful way to use it and be confident that the scenario works - it would all be \"hope it works\". The other reason I\u0027m hesitant is that if it doesn\u0027t work, the failure modes will be all over the place and super hard to diagnose.\r\n\r\nI do understand the need for it if you run into the case you describe though.\r\n\r\nJust to set expectations - even if we do decide to do it, it would not make .NET 6 (it\u0027s way too late for that).\r\n\r\nI wanted to ask some additional questions since the 7 steps you describe above seem a bit weird to me:\r\n\r\n1 - I assume you do all these tricks to have effectively self-contained component, right?\r\n\r\n2 - I haven\u0027t had a chance to look into https://github.com/dotnet/runtime/issues/56968 yet. My guess is that this is because the host has a bit of a weird behavior (long history) that if the app has `hostfxr.dll` and I think also `coreclr.dll` in its directory it will wrongly think it\u0027s self-contained, regardless of what the config says. But since you\u0027re trying to load a self-contained app, you should use the hostfxr from the self-contained runtime.\r\nAnother note - for step 3 to work correctly, you MUST use the already loaded `hostfxr` in the process - that\u0027s what `nethost` library is for - it will return the already loaded `hostfxr` if there\u0027s one.\r\n\r\n4 - Using the same directory for self-contained and framework-dependent app leads to trouble - the host is just not made to work in that case. (which is probably the reason for the issues in step 2)\r\n\r\n6 - Somebody loaded `coreclr` directly. Other than the discussion above, there\u0027s another problem with this case. If there\u0027s a component which loads `coreclr` directly, it will only work if it\u0027s the first one to be loaded. If the components got loaded in the reverse order (your nicely behaving one first, and then the bad-behaving one) it will create a mess - either it will fail if both try to use the exact same `coreclr.dll` file, or it will end up loading two .NET Core runtimes into the same process - which creates a whole new set of problems - it might work, or it might not. This is in no way fault of you nice-behaving component, I\u0027m just describing how trying to cooperate with bad-behaving component is a loosing proposition.\r\n\r\nIf you really need to have the component self-contained (which is problematic and causes lot of trouble as you\u0027re well aware of), there might be a better way to do this:\r\n* Build the component as framework-dependent\r\n* Ship it with a local install of .NET (basically download the .zip for the right runtime, and extract it to some subdirectory) - note that size-wise this is not that different from self-contained app - there will be couple more files (like `dotnet.exe`), but it\u0027s almost the same set.\r\n* Load the `hostfxr.dll` from that local install to do the native hosting - if you were to use `nethost` (recommended) to find `hostfxr` for you, simply specify the local install path in the `dotnet_root` field of `get_hostfxr_parameters` structure. With this it will either return the already loaded `hostfxr`, or it will return the one from the local install.\r\n* Rely solely on `hostfxr_initialize_for_runtime_config` and specify the local install path in the `dotnet_root` field of the `hostfxr_initialize_parameters` (although this might not be 100% necessary, I think it defaults to the location from where the `hostxfr` is from - but it\u0027s better to do it anyway).\r\n\r\nThis will give you benefits:\r\n* No hacks building the component\r\n* Still happily loads into already running .NET runtime in the process (if compatible)\r\n* If the component is the first to load the runtime, it will load the private one (effectively just like self-contained) - no need for special behavior with `hostfxr_initialize_for_dotnet_command_line`\r\n\r\nAnd some downsides:\r\n* You need to somehow figure out where to download the right .zip from (versioning mostly)\r\n* You need to unzip and ship the runtime with the component (dotnet build/publish will not handle it magically for you)\r\n\r\nWe\u0027re discussing a very similar approach to allow multiple executables to share effectively self-contained runtime here: https://github.com/dotnet/runtime/issues/53834\r\n\r\nIt still doesn\u0027t solve the problem of cooperation with bad-behaved components though.",
                                           "updatedAt":  "2021-08-12T09:29:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41gp5T",
                                           "createdAt":  "2021-08-12T15:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tippisum",
                                           "body":  "1. Yes, I do want a self-contained component. I think that should be a very natural use case: if one does control the main application, then \"hosting managed components\" is likely not the point to start with since using managed entry point and loading native components saves a lot of effort and mess. So when a component must be hosted, it should be natural to assume that the main application is completely out of control and is completely unaware of the .NET Core. That means when a component gets loaded into the process, it cannot assume the existence of a system-wide framework runtime. Requiring a separated setup process for end users to \"load a plugin\" also seems not a good idea. So the only solution is to host a self-contained component.\r\n2. Well, in fact it will not fail if I uses the either the framework `hostfxr` or the self-contained one and initialize a framework dependent context. It will also success if I uses the self-contained `hostfxr` and initialize a self-contained context. It does fail if I load the framework `hostfxr` and try to initialize a self-contained context. This is not a blocking issue though, since I can always load the self-contained `hostfxr`. I\u0027m just a bit curious since `dotnet.exe` (which should have a similar behavior as the framework `hostfxr`) does support executing self-contained application.\r\n3. Yes, I forgot to mention a step to first look for an already loaded `hostfxr.dll`. This step should be performed before loading one\u0027s own `hostfxr.dll`. However, this step can be performed without utilizing `nethost` (by directly calling `GetModuleHandleW(L\"hostfxr.dll\")` for example). The `nethost` is not used here, since I either opens an already loaded module or loads the private `hostfxr.dll` from a known location.\r\n4. A \"portable and redistributable\" .NET Core runtime does seems promising, but I have not found any docs about this use case...\r\n\r\nI\u0027m well aware that dealing with uncooperative third party components is nevertheless a mess and cannot be done in a clean and reliable way. But I do think the self-contained component is a justified use case (As I described in 1).\r\nI have an impression that all the CoreCLR hosting APIs are making an overall assumption that every piece of the hosting application is written with hosting CoreCLR in mind, which is not always the case. As I have mentioned, the main application may have no idea about the .NET Core at all (so they will not bother to initialize and share a process-wide hosting environment) and there may be third party components that utilizes legacy `coreclr` hosting options which makes it hard for others to cooperate with.\r\n\r\nThe ultimate solution can be supporting side-by-side hosting, but I do not think this will be implemented anytime soon. So in the meanwhile we still need to deal with various limitations and caveats. I understand you hesitation of adding a public API whose use cases are questionable at its very nature, but we may think this problem the other way:\r\n1. Being an open source project, the distinction between \"public API\"s and \"private implementation detail\"s are not that big. If there is a large enough pressure, people _will_ start hacking all the way around (like bypassing the API and dragging random internal stuffs). And if the alternative is not that \"you can achieve this in a more appropriate manner\" but simply *\"to die\"* then the pressure *will* be high. Even myself is open to the option of hacking into `coreclr.dll` internals. Adding an entry point for people with such need both eases the pressure and provides a chance to tell them what they should do first to be cooperative before start calling this (either by docs or by comments in header files, or the API can even has a special string argument which must be set to something like \"I promise that I\u0027ve already tried the hostfxr hosting options before and I\u0027m fully aware that this API is not supported and I\u0027m calling it as a last resort under my own risk\" to make the API work).\r\n2. If you guys are start deprecating `coreclr` hosting options, then the proposed API is not strictly speaking a public API. On the other hand, if loading `coreclr.dll` is not going to be deprecated anytime soon, then the need of living with that kind of components will be more and more.\r\n3. Despite of the use case being questionable, the definition of the proposed API is pretty clear and stable in the foreseeable future. And it should not take much effort to implement and maintain. Being \"not supported\" is actually what we want: we want people to avoid using it whenever possible, only after they have no other choice.\r\n4. I agree that an API being \"hope to work\" does seem weird, but as we have already discussed, what we are really comparing here is not \"hope to work\" vs \"guaranteed to work\", but \"hope to work\" vs \"*no* hope to work\".",
                                           "updatedAt":  "2021-08-12T15:50:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41g8hT",
                                           "createdAt":  "2021-08-12T17:33:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e A \"portable and redistributable\" .NET Core runtime does seem promising, but I have not found any docs about this use case..\r\n\r\nWe don\u0027t have docs around this since there\u0027s no direct support for it in the SDK.\r\n\r\n\u003e If you guys are start deprecating coreclr hosting options\r\n\r\nWe already consider them deprecated to a large degree - but it\u0027s not correctly reflected in the docs unfortunately. We definitely encourage everyone to NOT use it. Just a note on the word \"deprecated\" here - the APIs will remain and probably keep working as-is for a while (we kind of have to do that for backward compat reasons).\r\n\r\nWhile I agree that with open source software it\u0027s much easier to \"hack\" around into the \"unsupported\" things I think there\u0027s still a big difference:\r\n* Unsupported things are just that - unsupported. If things break... we won\u0027t pay too much attention to it.\r\n* We will not think too much about breaking people by changing these - if it\u0027s beneficial to make changes, we will do it - and break people who rely on this.\r\n\r\nSo typically such solution might work well in one version, but can easily break in future versions.\r\n\r\nOn the topic of self-contained components (plugins) - while I understand the problem with distributing shared framework install, using self-contained deployment model is also not ideal. At least until there\u0027s some kind of support for hosting multiple versions SxS in one process. This doesn\u0027t have a good solution right now, but what we thought might be acceptable is:\r\n- Such components should ideally set `rollForward=LatestMajor`, so that they load the latest available framework on the machine\r\n- With such setting, it typically doesn\u0027t matter much in which order components are loaded, since either of them will end up loading the latest runtime anyway.\r\n\r\nIf one component breaks this (by either using different roll forward setting, or being self-contained), then it is very easy to break things by just loading components in different order. The self-contained is somewhat worse in that it could in theory ship some weird/unsupported version of the runtime (or for example delete some parts of it to save space and so on) - any component loaded after it would have to be able to run on that - which is unreasonable to support correctly.",
                                           "updatedAt":  "2021-08-12T17:33:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41iQWa",
                                           "createdAt":  "2021-08-13T03:53:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tippisum",
                                           "body":  "I\u0027m pretty aware of what you said about compatibility concerns, and I agree that a cooperative component should try loading the framework runtime whenever possible.\r\nHowever, a component still needs to deal with the problem that the target machine may not have a shared framework runtime preinstalled, and, being a \"component\" means it is usually not a great idea to ask for a separate install phase which requires administrative privilege and installs a rather heavy \"framework\" into the user\u0027s machine. So some kind of self-containing is nevertheless necessary.\r\nCurrently I uses a fake self-contained application to achieve this (I do still try to load it as a framework dependent component at first, and only fallback to the self-contained runtime as a backup). It is rather hacky but it does work and to my knowledge it does not strictly break any API contract.\r\nI\u0027m also interested in other options like redistributing a portable .NET runtime, if it can make things work.\r\n\r\nThe core idea is, **people need to make things work**, the right/expected way or not. Whenever there is something not work, there will be a pressure. Even a nice and cooperative author is willing to stick to the best practice at first, he will start doing hacky/unexpected (but still strictly speaking legal) things if \"the best practice\" cannot work. And, well, if it still does not work, then even the most nice and cooperative author will become mad, and either start doing all kinds of \"bad things\", or he eventually comes to a conclusion that the whole framework does not deserve investment and then throws it out of the window and switches to something \"all the way dirty and out of date but can make things work\".",
                                           "updatedAt":  "2021-08-13T03:53:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Mtg4",
                                           "createdAt":  "2021-08-31T14:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The CoreCLR direct hosting sample and guide has been removed in https://github.com/dotnet/docs/pull/25818 and https://github.com/dotnet/samples/pull/4786.",
                                           "updatedAt":  "2021-08-31T14:41:24Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: coreclr retrieving an existing host handle",
        "labels":  [
                       "api-suggestion",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57586",
        "createdAt":  "2021-08-17T17:31:37Z",
        "number":  57586,
        "author":  "alexrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T04:22:26Z",
        "body":  "AFAICT, this platform difference is arbitrary and clearly adds friction. In some languages/ecosystems, it\u0027s not easy to achieve the goal of \"export this function as `stdcall`, but actually, don\u0027t mangle the name as if it is `stdcall`\" (see e.g. https://github.com/ziglang/zig/issues/9575).\r\n\r\nI understand that there may be compatibility concerns with doing this, which is why I would suggest doing this in .NET 7.\r\n\r\nContext:\r\n\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/tools/aot/jitinterface/dllexport.h#L15-L22\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/hosts/inc/coreclrhost.h#L11-L15\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/mono/mono/mini/main-core.c#L13-L25\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/native/corehost/nethost/nethost.h#L9-L37",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPRg1fw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41rHfL",
                                           "createdAt":  "2021-08-17T17:31:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-17T17:31:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41tut5",
                                           "createdAt":  "2021-08-18T14:50:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAFAICT, this platform difference is arbitrary and clearly adds friction. In some languages/ecosystems, it\u0027s not easy to achieve the goal of \"export this function as `stdcall`, but actually, don\u0027t mangle the name as if it is `stdcall`\" (see e.g. https://github.com/ziglang/zig/issues/9575).\r\n\r\nI understand that there may be compatibility concerns with doing this, which is why I would suggest doing this in .NET 7.\r\n\r\nContext:\r\n\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/tools/aot/jitinterface/dllexport.h#L15-L22\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/hosts/inc/coreclrhost.h#L11-L15\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/mono/mono/mini/main-core.c#L13-L25\r\n* https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/native/corehost/nethost/nethost.h#L9-L37\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexrp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-18T14:50:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41twhD",
                                           "createdAt":  "2021-08-18T14:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@AaronRobinsonMSFT you probably know exactly why and what could go wrong if we removed it, right?",
                                           "updatedAt":  "2021-08-18T14:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41t3PP",
                                           "createdAt":  "2021-08-18T15:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Sigh. Yes, this would be a breaking change for all win-x86 customers. Not saying we can\u0027t do it but we should have a serious conversation about our and user expectations. The reason for `stdcall` is historical and there is no real reason it has to be that at this point.\r\n\r\nHere are the things we should think about.\r\n- How impactful is an win-x86 breaking change really going to be? We would need to determine the user count for win-x86 and do a gut check on whether that number is big enough to care about this sort of breaking change.\r\n- Breaking this will cause serious headaches for some people since we\u0027ve changed the symbol and therefore it looks like `cdecl` but it is really `stdcall`. What this means in practice is someone could simply acquire the export via a call to [`GetProcAddress`](https://docs.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress), call it incorrectly, and thus corrupt the stack.\r\n- The other side of the \"small number of people using win-x86\" argument is it isn\u0027t worth the potential fallout/effort/resourcing to changing this. Basically, regardless of our best-effort someone will be impacted.\r\n- If there is a large number of win-x86 users I\u0027d argue this isn\u0027t worth a change because `stdcall` is the Win32 API surface anyways so I\u0027d like to understand why .NET is impacted but Win32 wouldn\u0027t be. I suppose it is possible people just want .NET and none of the Win32 API, but that doesn\u0027t change the fact that the platform we are running is that way and we are simply following the existing pattern.\r\n\r\nI agree this is something to at least consider.",
                                           "updatedAt":  "2021-08-18T15:34:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41t7vD",
                                           "createdAt":  "2021-08-18T15:58:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB22awg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-08-18T16:00:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e In some languages/ecosystems, it\u0027s not easy to achieve the goal of \"export this function as `stdcall`, but actually, don\u0027t mangle the name as if it is `stdcall`\" (see e.g. https://github.com/ziglang/zig/issues/9575).\r\n\r\nWould this problem be addressed if we exported the same symbols both with and without stdcall mangling on x86? (It is only exported without stdcall mangling on x86 right now.)",
                                           "updatedAt":  "2021-08-18T15:58:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41t_jV",
                                           "createdAt":  "2021-08-18T16:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e Would this problem be addressed if we exported the same symbols both with and without stdcall mangling on x86? (It is only exported without stdcall mangling on x86 right now.)\r\n\r\nIf the host resolver would try to load the mangled name also, that would be sufficient for my case. But given this whole dance around `stdcall` mangling, I assumed there might be some very compelling reason why it doesn\u0027t.",
                                           "updatedAt":  "2021-08-18T16:19:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uAZ5",
                                           "createdAt":  "2021-08-18T16:24:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e If the host resolver would try to load the mangled name also, \r\n\r\nWhy would need the host resolver try to load the mangled name also if we exported both mangled and unmangled name?",
                                           "updatedAt":  "2021-08-18T16:24:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uGTK",
                                           "createdAt":  "2021-08-18T17:00:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "I think I\u0027m confused about what you\u0027re suggesting.\r\n\r\nThe issue in my case is that it\u0027s very difficult/annoying to export the unmangled name due to toolchain conventions (`stdcall` implies mangling). So either:\r\n\r\n1. The toolchain I\u0027m working with (Zig) needs to grow a way to override the calling convention mangling. It\u0027s not yet clear if that\u0027s even in the cards, let alone when it would happen.\r\n2. The host resolver needs to try to load both mangled and unmangled names. In this case, I can export the mangled names normally. This has the benefit of also not breaking any existing code that\u0027s doing `stdcall` + unmangled names.\r\n3. The host resolver and runtimes are changed to drop `stdcall` entirely and everyone agrees on `cdecl` everywhere. Might (?) break external users.",
                                           "updatedAt":  "2021-08-18T17:00:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ug_A",
                                           "createdAt":  "2021-08-18T19:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The toolchain I\u0027m working with (Zig) needs to grow a way to override the calling convention mangling\r\n\r\nAre you trying to build coreclr.dll using the Zig toolchain; or are you just trying to consume the standard coreclr.dll from a binary built by the Zig toolchain?",
                                           "updatedAt":  "2021-08-18T19:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41uk7c",
                                           "createdAt":  "2021-08-18T20:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e Are you trying to build coreclr.dll using the Zig toolchain; or are you just trying to consume the standard coreclr.dll from a binary built by the Zig toolchain?\n\nThe former, for a custom runtime experiment. (But consuming it would probably have the exact same issue, just from the other end.)",
                                           "updatedAt":  "2021-08-18T20:17:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Mz7g",
                                           "createdAt":  "2021-08-31T15:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Perhaps in light of https://github.com/dotnet/docs/pull/25818 and https://github.com/dotnet/samples/pull/4786 the compatibility concerns here are not quite as great as I thought?",
                                           "updatedAt":  "2021-08-31T15:11:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42M1NA",
                                           "createdAt":  "2021-08-31T15:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCWyFZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2022-04-07T12:54:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Ever since .NET Core 3.0 we recommended using the `hostfxr` APIs to host .NET from native processes. Those changes simply remove samples/guides for the direct hosting of CoreCLR which has several problems. This has no impact on the compatibility  of the `hostfxr` APIs.",
                                           "updatedAt":  "2021-08-31T15:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42M6ji",
                                           "createdAt":  "2021-08-31T15:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Right, this isn\u0027t about `hostfxr` APIs, it\u0027s about removing `stdcall` from the `coreclr_*` APIs. I\u0027m saying I think the compatibility concerns with doing so aren\u0027t as significant as I thought, since people shouldn\u0027t be using the `coreclr_*` APIs directly as of 3.0 anyway.",
                                           "updatedAt":  "2021-08-31T15:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NBes",
                                           "createdAt":  "2021-08-31T16:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This sounds like a case where it would be fine to dual export.\r\n\r\n`stdcall` does mangle by default (`float __stdcall AddFloats(float x, float y)` becomes `_AddFloats@8`). However, the Win32 SDK itself strips this mangling using a module-definition file (https://docs.microsoft.com/en-us/cpp/build/reference/module-definition-dot-def-files?view=msvc-160) and we could do the same while preserving `stdcall` and preserving back-compat.\r\n\r\nThat is, imagine you have:\r\n```cpp\r\nextern \"C\"\r\n{\r\n  float __stdcall AddFloats(float x, float y)\r\n  {\r\n    return x + y;\r\n  }\r\n}\r\n```\r\n\r\nBy default in this scenario you get an export `_AddFloats@8` and so you get the following:\r\n```cpp\r\n  auto lib = LoadLibrary(L\"Dll1.dll\");\r\n\r\n  auto add1 = GetProcAddress(lib, \"AddFloats\");     // nullptr\r\n  auto add2 = GetProcAddress(lib, \"_AddFloats\");    // nullptr\r\n  auto add3 = GetProcAddress(lib, \"_AddFloats@8\");  // valid\r\n  auto add4 = GetProcAddress(lib, \"AddFloats@8\");   // nullptr\r\n```\r\n\r\nYou can however, define the following and pass it to the linker as `/def:Exports.def`:\r\n```\r\nLIBRARY   Dll1\r\nEXPORTS\r\n   _AddFloats@8\r\n   AddFloats=_AddFloats@8\r\n```\r\n\r\nThat causes (where `add1 == add3`):\r\n```cpp\r\n  auto lib = LoadLibrary(L\"Dll1.dll\");\r\n\r\n  auto add1 = GetProcAddress(lib, \"AddFloats\");     // valid\r\n  auto add2 = GetProcAddress(lib, \"_AddFloats\");    // nullptr\r\n  auto add3 = GetProcAddress(lib, \"_AddFloats@8\");  // valid\r\n  auto add4 = GetProcAddress(lib, \"AddFloats@8\");   // nullptr\r\n```",
                                           "updatedAt":  "2021-08-31T16:18:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NNe1",
                                           "createdAt":  "2021-08-31T17:19:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "My understanding is that this is not about mangling - coreclr exports are not mangled as far as I can tell. I think this issue is about calling convention, right?\r\n\r\nFor example, when `hostpolicy` loads `coreclr` it does `GetProcAddress` on unmangled names: https://github.com/dotnet/runtime/blob/8b94b58b894b286edfc36a02e6890bc6656b8b54/src/native/corehost/hostpolicy/standalone/coreclr_resolver.cpp#L21-L24",
                                           "updatedAt":  "2021-08-31T17:19:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NO2u",
                                           "createdAt":  "2021-08-31T17:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXMb9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2022-04-07T12:57:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2022-04-09T14:50:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eMy understanding is that this is not about mangling - coreclr exports are not mangled as far as I can tell. I think this issue is about calling convention, right?\r\n\r\nIt is hard to separate those concerns actually. The `stdcall` calling convention \"mangles\" the symbol to indicate the calling contract (i.e., \u0027Callee will subtract @N bytes from the stack\u0027). In this sense the mangle indicates the `stdcall` convention. Without that the symbol is assumed to be `cdecl` because of history. Basically mangling and calling convention in this case are coupled. We are currently exporting a `stdcall` function without the conventional symbol format so it is confusing to everyone outside of Microsoft.",
                                           "updatedAt":  "2021-08-31T17:27:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NQj6",
                                           "createdAt":  "2021-08-31T17:36:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e We are currently exporting a stdcall function without the conventional symbol format so it is confusing to everyone outside of Microsoft.\r\n\r\nIf we are already exporting it \"unmangled\", I don\u0027t see the issue. This is exactly what the entire Windows SDK does. `GetProcAddress` itself is `__stdcall` too and by default would be named `_GetProcAddress@8`, but its not. It\u0027s exported \"unmanagled\" as `GetProcAddress`.",
                                           "updatedAt":  "2021-08-31T17:36:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NQm8",
                                           "createdAt":  "2021-08-31T17:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "@tannergooding \r\n\r\n\u003e This sounds like a case where it would be fine to dual export.\r\n\r\nJust to be clear, the problem for me is from the *implementation* side, i.e. I don\u0027t have the ability to export a function that is `stdcall` while being unmangled. So I need the host resolver to change somehow (see https://github.com/dotnet/runtime/issues/57586#issuecomment-901276874). I don\u0027t particularly care whether we do (2) or (3), though in light of https://github.com/dotnet/runtime/issues/57586#issuecomment-909328096, I would argue that (3) is probably fine?",
                                           "updatedAt":  "2021-08-31T17:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NRBq",
                                           "createdAt":  "2021-08-31T17:39:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eJust to be clear, the problem for me is from the implementation side, i.e. I don\u0027t have the ability to export a function that is stdcall while being unmangled.\r\n\r\nExactly. That is what I meant by \"it is confusing to everyone outside of Microsoft\". This is common for us but the rest of the world doesn\u0027t do that because it is confusing.",
                                           "updatedAt":  "2021-08-31T17:39:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NSYf",
                                           "createdAt":  "2021-08-31T17:46:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "So the issue is that the tooling can \"import\" mangled or unmanagled stdcall. However it can only \"export\" mangled stdcall?\r\n\r\nWouldn\u0027t the fix still be similar, if we export both mangled and unmangled, we can also have `pal::get_symbol` (or w/e we use) attempt to lookup both names as well? This would support custom hosts defined in other languages that can\u0027t declare unmangled stdcall.",
                                           "updatedAt":  "2021-08-31T17:48:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NS9k",
                                           "createdAt":  "2021-08-31T17:49:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCWyOcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2021-08-31T17:55:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2022-04-07T12:59:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eWouldn\u0027t the fix still be similar\r\n\r\nOh absolutely. Exporting both is a reasonable solution for sure. I was merely providing context for @vitek-karas that this is both a calling convention and mangling issue because of their tight coupling in this case.",
                                           "updatedAt":  "2021-08-31T17:49:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NTz1",
                                           "createdAt":  "2021-08-31T17:53:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB4gFXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2021-08-31T17:55:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e So the issue is that the tooling can \"import\" mangled or unmanagled stdcall. However it can only \"export\" managled stdcall?\r\n\r\nI think that\u0027s the case, yes. The Zig tooling doesn\u0027t seem to struggle with linking against e.g. Win32 APIs, but several people besides myself have run into the issue of exporting `stdcall` w/o mangling and there seems to be no solution as of yet.\r\n\r\n\u003e Wouldn\u0027t the fix still be similar, if we export both mangled and unmangled, we can also have `pal::get_symbol` (or w/e we use) attempt to lookup both names as well? This would support custom hosts defined in other languages that can\u0027t declare unmangled stdcall.\r\n\r\nThis would be option (2) I mentioned above. Though if we go down this route, I see no particular reason why CoreCLR and Mono should export both mangled and unmangled symbols - they would continue to just work as they are now. The change would just be in the host resolver.",
                                           "updatedAt":  "2021-08-31T17:53:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NVgv",
                                           "createdAt":  "2021-08-31T18:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "That actually sounds much less problematic (the host would obviously prefer the unmangled name first, but it could fall back to the mangled one). Sorry for not understanding the problem in your original description.\r\n\r\nAbove you mention that you\u0027re trying to do this to experiment with custom built runtime. If you\u0027re already rebuilding the entire coreclr, would it make sense to rebuild the host as well - in that case you can tweak it to your liking.\r\nAlternatively you can just build a custom version of hostpolicy which looks up the mangled names (but still exports unmangled), so that you can use such runtime with other hosts. (hostpolicy is for all intents and purposes part of the runtime, so you would need to package it with your coreclr anyway).",
                                           "updatedAt":  "2021-08-31T18:02:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42NXfd",
                                           "createdAt":  "2021-08-31T18:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "By custom runtime, I mean I\u0027m implementing a runtime from scratch. When creating the platform packages for my runtime\u0027s SDK, I fish hostfxr/hostpolicy out of the official .NET packages and repackage them. (Not ideal, I know, but it seems to work fine so far, `stdcall` issue notwithstanding.)",
                                           "updatedAt":  "2021-08-31T18:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49DZxI",
                                           "createdAt":  "2022-01-28T14:58:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMMEQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2022-01-29T22:15:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@alexrp - based on the above, he \"agreed upon\" solution is for the host to try to import both mangled and unmangled names from coreclr.dll. If you can, please send a PR with that change.",
                                           "updatedAt":  "2022-01-28T14:58:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49GDV_",
                                           "createdAt":  "2022-01-29T22:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Great, I\u0027ll try to find time to do a pull request ASAP.",
                                           "updatedAt":  "2022-01-29T22:15:28Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Consider dropping `stdcall` usage in native host interfaces for .NET 7",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57827",
        "createdAt":  "2021-08-20T14:55:12Z",
        "number":  57827,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-26T18:23:23Z",
        "body":  "At present, we have a first-class support in src/tests infrastructure to use live-build of corerun (a non-shipping lightweight host implementing coreclr\u0027s hostirng interface). On building the project, the test infra copies a test template script which sets variables like `CORE_ROOT` and creates a self-contained compressed archive / package with corerun and supporting assemblies. This package can then be sent to other machine (e.g. in Helix) to extract and execute the test.\r\n\r\nWhile corerun has this nice characteristic of being lightweight in terms of size, number of moving parts etc., it is not always desired or enough for all src/tests projects. There are cases where the real shipping host corehost (dotnet.dll, fxr and friends) is required, for which currently there is no first-class support in the test template scripts (.sh, .cmd). The dotnet.exe in Helix environment\u0027s PATH is some older version instead of a live built one. The projects which are currently requiring live\u0027ish dotnet.exe have worked around the problem by injecting a hook script (viz the `CLRCustomTestLauncher` mechanics, which is supported by the template), and downloading package containing some other version of dotnet.exe (still not the live one), and patching it with live bits of coreclr.dll, corelib and since so forth..\r\n\r\n Ideally, I think a test project under src/tests should have the opt-in ability for corehost, such as `\u003cRequiresCorehost\u003etrue\u003c/RequiresCorehost\u003e` in its project configuration, for which the infrastructure will package dotnet.exe, hostfxr.dll and so on in the archive, rather than corerun. Moreover, instead of (or in addition to?) `CORE_ROOT`, it would set `DOTNET_TESTHOST_ROOT` environment variable (to disambiguate with `DOTNET_ROOT` that is another concept, which may lead to undesired side-effects). That way, the \u0027hook\u0027 script will also be able to use either `CORE_ROOT` or `DOTNET_TESTHOST_ROOT` based on what the corresponding test project wishes to use.\r\n\r\n---\r\n* Moved from https://github.com/dotnet/runtime/issues/38034#issuecomment-901568090",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONdJXvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41zunA",
                                           "createdAt":  "2021-08-20T14:55:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAt present, we have a first-class support in src/tests infrastructure to use live-build of corerun (a non-shipping lightweight host implementing coreclr\u0027s hostirng interface). On building the project, the test infra copies a test template script which sets variables like `CORE_ROOT` and creates a self-contained compressed archive / package with corerun and supporting assemblies. This package can then be sent to other machine (e.g. in Helix) to extract and execute the test.\r\n\r\nWhile corerun has this nice characteristic of being lightweight in terms of size, number of moving parts etc., it is not always desired or enough for all src/tests projects. There are cases where the real shipping host corehost (dotnet.dll, fxr and friends) is required, for which currently there is no first-class support in the test template scripts (.sh, .cmd). The dotnet.exe in Helix environment\u0027s PATH is some older version instead of a live built one. The projects which are currently requiring live\u0027ish dotnet.exe have worked around the problem by injecting a hook script (viz the `CLRCustomTestLauncher` mechanics, which is supported by the template), and downloading package containing some other version of dotnet.exe (still not the live one), and patching it with live bits of coreclr.dll, corelib and since so forth..\r\n\r\n Ideally, I think a test project under src/tests should have the opt-in ability for corehost, such as `\u003cRequiresCorehost\u003etrue\u003c/RequiresCorehost\u003e` in its project configuration, for which the infrastructure will package dotnet.exe, hostfxr.dll and so on in the archive, rather than corerun. Moreover, instead of (or in addition to?) `CORE_ROOT`, it would set `DOTNET_TESTHOST_ROOT` environment variable (to disambiguate with `DOTNET_ROOT` that is another concept, which may lead to undesired side-effects). That way, the \u0027hook\u0027 script will also be able to use either `CORE_ROOT` or `DOTNET_TESTHOST_ROOT` based on what the corresponding test project wishes to use.\r\n\r\n---\r\n* Moved from https://github.com/dotnet/runtime/issues/38034#issuecomment-901568090\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eam11\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-20T14:55:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41zyF_",
                                           "createdAt":  "2021-08-20T15:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Can you point out some of the tests that use custom scripts to patch a dotnet.exe layout?\r\n\r\nWe have some tests (particularly in the hosting space) that need to use CoreRun since they use mocked versions of the hosting components.",
                                           "updatedAt":  "2021-08-20T15:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc410lVp",
                                           "createdAt":  "2021-08-20T21:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@jkoritzinsky I think you meant that the hosting tests needs to use the real host (corehost), right?",
                                           "updatedAt":  "2021-08-20T21:53:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc410le9",
                                           "createdAt":  "2021-08-20T21:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I\u0027m thinking of the COM Activation tests and the AssemblyDependencyResolver tests that use the mockhostpolicy hostpolicy in the src/tests tree to do targeted testing of components that use hostpolicy",
                                           "updatedAt":  "2021-08-20T21:55:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Suggestion] Add an opt-in ability to use corehost (dotnet.dll) in projects under src/tests",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59642",
        "createdAt":  "2021-09-27T10:15:13Z",
        "number":  59642,
        "author":  "deeprobin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-01T21:25:11Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nReplace [rapidjson](https://github.com/dotnet/runtime/tree/main/src/native/corehost/json/rapidjson) with [simdjson](https://github.com/simdjson/simdjson)\r\n\r\n### Data\r\n\r\nhttps://github.com/simdjson/simdjson#performance-results\r\n\r\n### Analysis\r\n\r\nSIMDJSON is 4 times faster than RapidJSON",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON5DpVA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43S_gK",
                                           "createdAt":  "2021-09-27T10:15:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @layomia\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nReplace [rapidjson](https://github.com/dotnet/runtime/tree/main/src/native/corehost/json/rapidjson) with [simdjson](https://github.com/simdjson/simdjson)\r\n\r\n### Data\r\n\r\nhttps://github.com/simdjson/simdjson#performance-results\r\n\r\n### Analysis\r\n\r\nSIMDJSON is 4 times faster than RapidJSON\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edeeprobin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-27T10:15:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TEHv",
                                           "createdAt":  "2021-09-27T10:44:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Is json parsing in corehost a bottleneck for you? If so please share some numbers. It\u0027s supposed to parse a relatively small json once, isn\u0027t? while I love simdjson library it sounds a bit overkill for corehost - it will increase binary size.\r\n\r\n",
                                           "updatedAt":  "2021-09-27T10:45:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TEa-",
                                           "createdAt":  "2021-09-27T10:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nReplace [rapidjson](https://github.com/dotnet/runtime/tree/main/src/native/corehost/json/rapidjson) with [simdjson](https://github.com/simdjson/simdjson)\r\n\r\n### Data\r\n\r\nhttps://github.com/simdjson/simdjson#performance-results\r\n\r\n### Analysis\r\n\r\nSIMDJSON is 4 times faster than RapidJSON\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edeeprobin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-27T10:47:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TLKa",
                                           "createdAt":  "2021-09-27T11:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB73q7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2021-09-27T11:19:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Generally, I agree with @EgorBo. However, it won\u0027t be the first time we are improving performance of apps startup by replacing JSON engine in corehost: https://github.com/dotnet/core-setup/pull/7708. Could be worth exploring?",
                                           "updatedAt":  "2021-09-27T11:18:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TNwe",
                                           "createdAt":  "2021-09-27T11:29:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB734HA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2021-09-27T11:45:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e Generally, I agree with @EgorBo. However, it won\u0027t be the first time we are improving performance of apps startup by replacing JSON engine in corehost: [dotnet/core-setup#7708](https://github.com/dotnet/core-setup/pull/7708). Could be worth exploring?\r\n\r\nnice! that pr even reduced binary size. However, I fear simdjson will increase by e.g. half-a-megabyte or so. Still indeed worth exploring then.\r\nI personally would love SimdJSON to power System.Text.Json instead (JsonDocument)",
                                           "updatedAt":  "2021-09-27T11:29:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TXt3",
                                           "createdAt":  "2021-09-27T12:27:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7_svw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ForNeVeR",
                                                                               "createdAt":  "2021-09-28T03:46:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Well, performance-wise it is not a bottleneck for me, however, such an optimization does not hurt in my opinion.\r\nIn my opinion we shouldn\u0027t care about the binary size in the end - or do you want to run the corehost on a floppy disk?\r\n\r\n\r\n\u003e nice! that pr even reduced binary size. However, I fear simdjson will increase by e.g. half-a-megabyte or so. Still indeed worth exploring then.\r\n\r\n@EgorBo \r\n\r\n",
                                           "updatedAt":  "2021-09-27T12:27:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TbAQ",
                                           "createdAt":  "2021-09-27T12:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7826Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2021-09-27T13:19:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2021-09-27T19:46:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e performance-wise it is not a bottleneck for me\r\n\r\nEmpirically speaking, when it comes to performance vs. size in runtime, normally performance takes precedence. We would still need to show numbers to discuss/understand the tradeoffs (I guess it would be a non-trivial work to get there).\r\n\r\n\u003e do you want to run the corehost on a floppy disk?\r\n\r\nImpact on file sizes in .NET is typically frowned upon, there is even a tag for it: \u003ckbd\u003e[size-reduction](https://github.com/dotnet/runtime/issues?q=issue+label:size-reduction)\u003c/kbd\u003e. In case of host, it will impact size of all hosts including singlefilehost where slimmer binaries are preferred: https://github.com/dotnet/runtime/issues/12629.",
                                           "updatedAt":  "2021-09-27T12:46:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TctH",
                                           "createdAt":  "2021-09-27T12:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Then maybe an Optimization Level option would be useful. On the one hand the type optimized for binary size and on the other hand the one optimized for performance. The result can be achieved with preprocessor variables.\r\n\r\nIn Rust for example you can define this in the file Cargo.toml¹, in our case maybe in the Project.csproj file.\r\n\r\n\r\n### References\r\n\r\n[1]: See profiles - https://doc.rust-lang.org/cargo/reference/profiles.html\r\n",
                                           "updatedAt":  "2021-09-27T12:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43TvS-",
                                           "createdAt":  "2021-09-27T14:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB75sDQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2021-09-27T14:35:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "As @am11 mentions size is pretty important, specifically for the host, since it ships with basically every .NET app (so even small increase adds up in some cases).\r\n\r\nI definitely think it\u0027s worth to see what the perf gain would be versus the size regression.\r\n\r\nRegarding \"optimize for size\" - we have the ability to do that in managed code (Trimming), but currently we don\u0027t have that ability in native code. This is mainly due to the fact that the SDK doesn\u0027t actually produce native executables directly, it uses precompiled executables. So we would have to ship two versions of the host, one for perf, one for size. We already have two (normal, single-file) so this would double the number of hosts... \r\nAll of this is doable, just relatively expensive.\r\n\r\nIn the case of the host there\u0027s additional tradeoff to think about - this code runs only during startup. So it\u0027s not just about CPU, it\u0027s also about IO and memory. All of these metrics should be as low as possible. The current hosts are definitely not perfect in this regard, but any changes will have to consider these aspects as well.",
                                           "updatedAt":  "2021-09-27T14:19:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43XjZU",
                                           "createdAt":  "2021-09-28T07:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Related: https://github.com/dotnet/runtime/issues/28937",
                                           "updatedAt":  "2021-09-28T07:15:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43kNYD",
                                           "createdAt":  "2021-10-01T13:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TkTech",
                                           "body":  "If you\u0027re planning on including simdjson verbatim, rather than just the algorithms described in the paper, the size can be tweaked a decent bit with just build-time flags and minimal effort. You\u0027re likely only going to use the OnDemand _or_ the DOM-based API, so the other can be removed. The runtime dispatch can be narrowed if Core requires, say, Haswell at a minimum then Westmere can be discarded. If at least SSE4 is required by other parts of Core, then the fallback parser can be removed.\r\n\r\nI\u0027m sure @lemire can offer some input here. Ultimately someone will need to _try it_ to get realistic numbers since so much can be eliminated based off of how Core will use it.",
                                           "updatedAt":  "2021-10-01T13:40:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43kODh",
                                           "createdAt":  "2021-10-01T13:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lemire",
                                           "body":  "@TkTech For something like a runtime, it would make sense to build a trimmed down kernel version and it would not be hard.",
                                           "updatedAt":  "2021-10-01T13:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43kOlU",
                                           "createdAt":  "2021-10-01T13:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e If at least SSE4 is required by other parts of Core, then the fallback parser can be removed.\r\n\r\nYes, this is the case.\r\n\r\nNote that this issue is about corehost, the hosting layer where we use RapidJSON to parse two/three kinds of json files (deps, runtimeconfig, rid graph etc.). #28937 is tracking the actual runtime libraries part (wider audience).",
                                           "updatedAt":  "2021-10-01T13:46:53Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "[Performance Proposal] Use SIMDJson in Corehost",
        "labels":  [
                       "tenet-performance",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59721",
        "createdAt":  "2021-09-28T20:52:47Z",
        "number":  59721,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-11T03:52:01Z",
        "body":  "CoreCLR has a macro named `TRASH_LASTERROR` in utilcode that is used to make it easier to detect when the \"last system error code\" is not preserved in P/Invoke scenarios.\r\n\r\nHowever, it leaks out in a number of non-P/Invoke scenarios, which impacts some of the DllImportGenerator tests that use DNNE to make the logic of the native side of the generated code tests implemented in managed code. This causes test failures with a Debug/Checked runtime since the expected error code is not set since CoreCLR sets an error code value and leaves it set.\r\n\r\nFor example, it leaks out of `coreclr_create_delegate`\u0027s calls to `StringToUnicode`, as well as `ComponentActivator`\u0027s calls to `Marshal.PtrToStringAuto`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON4fjQg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43amdZ",
                                           "createdAt":  "2021-09-29T00:25:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it leaks out of coreclr_create_delegate\u0027s calls to StringToUnicode, as well as ComponentActivator\u0027s calls to Marshal.PtrToStringAuto\r\n\r\nIs there nothing else in these methods that would modify the last error on some paths in these cases? The last error is very volatile. You have to explicitly save it if you want to preserve it.",
                                           "updatedAt":  "2021-09-29T00:25:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dO-7",
                                           "createdAt":  "2021-09-29T17:54:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCoreCLR has a macro named `TRASH_LASTERROR` in utilcode that is used to make it easier to detect when the \"last system error code\" is not preserved in P/Invoke scenarios.\r\n\r\nHowever, it leaks out in a number of non-P/Invoke scenarios, which impacts some of the DllImportGenerator tests that use DNNE to make the logic of the native side of the generated code tests implemented in managed code. This causes test failures with a Debug/Checked runtime since the expected error code is not set since CoreCLR sets an error code value and leaves it set.\r\n\r\nFor example, it leaks out of `coreclr_create_delegate`\u0027s calls to `StringToUnicode`, as well as `ComponentActivator`\u0027s calls to `Marshal.PtrToStringAuto`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkoritzinsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Interop-coreclr`, `area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-29T17:54:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dPOf",
                                           "createdAt":  "2021-09-29T17:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eThe last error is very volatile. You have to explicitly save it if you want to preserve it.\r\n\r\nAgree. We chatted about this issue offline. We thought it warranted an issue for tracking purposes when using the hosting APIs. The impetus for this was around using DNNE in a test scenario and is being addressed in https://github.com/AaronRobinsonMSFT/DNNE/pull/87.\r\n\r\n/cc @elinor-fung",
                                           "updatedAt":  "2021-09-29T17:56:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dTKs",
                                           "createdAt":  "2021-09-29T18:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Is it really just a DNNE problem? I would expect you have to make fixes in the runtime as well to make this work 100%.",
                                           "updatedAt":  "2021-09-29T18:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dUww",
                                           "createdAt":  "2021-09-29T18:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Is it really just a DNNE problem?\r\n\r\nI believe so. The issue here is DNNE discovers the export lazily so the initial call via a P/Invoke looks like:\r\n\r\n```\r\nManaged\r\n    -\u003e DNNE generated library\r\n        -\u003e Discover export\r\n        -\u003e Call export\r\n```\r\n\r\nWhere as all subsequent ones look like the following:\r\n\r\n```\r\nManaged\r\n    -\u003e DNNE generated library\r\n        -\u003e Call export\r\n```\r\n\r\nFor DNNE, preserving the current error code during \"Discover export\" should address the stated behavior. Are you thinking of another scenario where this could manifest?",
                                           "updatedAt":  "2021-09-29T18:25:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dVnD",
                                           "createdAt":  "2021-09-29T18:30:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I think from the .NET Hosting API perspective, `coreclr_create_delegate` is doing the right thing. The \"right thing\" being it may impact the last error because it is a native call and the caller needs to handle that. That would mean callers like DNNE need to be sensitive to that behavior calls propagate from managed code.",
                                           "updatedAt":  "2021-09-29T18:30:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dXN5",
                                           "createdAt":  "2021-09-29T18:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Do prologs and epilogs of UnmanagedCallersOnly methods preserve the last error in all situations?",
                                           "updatedAt":  "2021-09-29T18:39:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43hxuG",
                                           "createdAt":  "2021-09-30T19:25:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Do prologs and epilogs of UnmanagedCallersOnly methods preserve the last error in all situations?\r\n\r\nI don\u0027t think it is and I believe we want that in this case. Or are you referring to the case where transitioning itself may cause last error to be impacted?",
                                           "updatedAt":  "2021-09-30T19:25:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43h-NC",
                                           "createdAt":  "2021-09-30T20:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I consider transitioning itself (e.g. the call to `JIT_ReversePInvokeEnter` helper) to be part of the prolog/epilog.\r\n\r\n`JIT_ReversePInvokeEnter/JIT_ReversePInvokeExit` helpers do not seem to be guaranteed to preserve the last error on all paths. Also, there may be other helper calls generated by the JIT as part of the prolog/epilog that may be also altering the last error in some situations.",
                                           "updatedAt":  "2021-09-30T20:46:39Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "CoreCLR\u0027s debug/checked last error trashing leaks in non-P/Invoke scenarios",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60422",
        "createdAt":  "2021-10-14T19:29:41Z",
        "number":  60422,
        "author":  "MichalPetryka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-YX1w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2021-10-15T03:50:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-10-18T16:59:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JustAndreww",
                                            "createdAt":  "2024-12-19T15:13:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kuinox",
                                            "createdAt":  "2025-01-22T23:10:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoyBaykiller",
                                            "createdAt":  "2025-01-22T23:32:33Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-11-16T17:58:18Z",
        "body":  "GPU drivers from vendors like Nvidia or AMD have documented exports that they detect in launched executables and automatically use a high-performance GPU in such case.\r\nThis feature is often used by games and game engines, for example Unity does export them from its executable.\r\nCurrently the only way to do so in .NET is to use a custom apphost, which isn\u0027t necessarily an easy thing to do. Providing a csproj property that\u0027d make the SDK use an alternative executable that has the exports would make developing games and graphically intensive applications somewhat easier by removing the need for a custom apphost.\r\n\r\nWhile the documentation for such exports is somewhat lacking, this is what Unity uses in their code (the link to the AMD forum they provide seems to not work anymore, there\u0027s an updated post for it [here](https://gpuopen.com/learn/amdpowerxpressrequesthighperformance/) though):\r\n```C++\r\n// Hint that the discrete gpu should be enabled on optimus/enduro systems\r\n// NVIDIA docs: http://developer.download.nvidia.com/devzone/devcenter/gamegraphics/files/OptimusRenderingPolicies.pdf\r\n// AMD forum post: http://devgurus.amd.com/thread/169965\r\nextern \"C\"\r\n{\r\n    __declspec(dllexport) DWORD NvOptimusEnablement = 0x00000001;\r\n    __declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;\r\n}\r\n```\r\n\r\nImplemeting this suggestion would require the SDK to carry two executable versions and use one of them depending on the switch.\r\nAFAIK the exports are only relevant on Windows, my suggestion would be to just ignore the setting on other platforms.\r\nAs for the property name, I don\u0027t really have any good suggestions, the only thing I could think of was `RequestHighPerformanceGPU`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk9xPKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44Px_8",
                                           "createdAt":  "2021-10-14T19:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-14T19:29:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Pykb",
                                           "createdAt":  "2021-10-14T19:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "What if one could propose for the sdk side of this: ``\u003cUseGpuExports\u003etrue\u003c/UseGpuExports\u003e`` where then it would tell the sdk to choose the version of the apphost with the changes that would fix this issue (built specially for this case)?\r\n\r\nThat would also mean this would need an .NET SDK issue as well for the SDK side too.",
                                           "updatedAt":  "2021-10-14T19:34:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44P2Ki",
                                           "createdAt":  "2021-10-14T19:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nGPU drivers from vendors like Nvidia or AMD have documented exports that they detect in launched executables and automatically use a high-performance GPU in such case.\r\nThis feature is often used by games and game engines, for example Unity does export them from its executable.\r\nCurrently the only way to do so in .NET is to use a custom apphost, which isn\u0027t necessarily an easy thing to do. Providing a csproj property that\u0027d make the SDK use an alternative executable that has the exports would make developing games and graphically intensive applications somewhat easier by removing the need for a custom apphost.\r\n\r\nWhile the documentation for such exports is somewhat lacking, this is what Unity uses in their code (the link to the AMD forum they provide seems to not work anymore, there\u0027s an updated post for it [here](https://gpuopen.com/learn/amdpowerxpressrequesthighperformance/) though):\r\n```C++\r\n// Hint that the discrete gpu should be enabled on optimus/enduro systems\r\n// NVIDIA docs: http://developer.download.nvidia.com/devzone/devcenter/gamegraphics/files/OptimusRenderingPolicies.pdf\r\n// AMD forum post: http://devgurus.amd.com/thread/169965\r\nextern \"C\"\r\n{\r\n    __declspec(dllexport) DWORD NvOptimusEnablement = 0x00000001;\r\n    __declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;\r\n}\r\n```\r\n\r\nImplemeting this suggestion would require the SDK to carry two executable versions and use one of them depending on the switch.\r\nAFAIK the exports are only relevant on Windows, my suggestion would be to just ignore the setting on other platforms.\r\nAs for the property name, I don\u0027t really have any good suggestions, the only thing I could think of was `RequestHighPerformanceGPU`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalPetryka\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-14T19:53:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Qk-q",
                                           "createdAt":  "2021-10-15T00:44:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e \u003e Currently the only way to do so in .NET is to use a custom apphost, which isn\u0027t necessarily an easy thing to do\r\n\r\nI think we should rather investigate how to make custom apphosts easier to build. Introducing build-in support for niche apphost customizations sounds like a non-scalable workaround for the actual problem.",
                                           "updatedAt":  "2021-10-15T00:44:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44QoJw",
                                           "createdAt":  "2021-10-15T01:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Another person suggested that the apphost setup could be a static library that one making a custom apphost could call a single function for and it doing what the official one does on top of the customizations they need to specifically do. All because it seems to be a difficult thing to do:\r\n\r\nPerhaps on the static lib it can be exported as ``apphost_setup()`` where it would do all of the stuff the official one does currently inside that function then when they call it and statically link that apphost code inside their custom one it will then work how they expect it to work.",
                                           "updatedAt":  "2021-10-15T01:12:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Ug6O",
                                           "createdAt":  "2021-10-16T11:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "#10929 #3847",
                                           "updatedAt":  "2021-10-16T11:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44UhcU",
                                           "createdAt":  "2021-10-16T11:52:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "#10929 isn\u0027t really a duplicate since it\u0027s about importing such variables which is already possible. #3847 was ended up with a conclusion that one should use a custom apphost and this issue is about providing a simpler approach to it.",
                                           "updatedAt":  "2021-10-16T11:52:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44XZK6",
                                           "createdAt":  "2021-10-18T11:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "There are actually two parts to making it easier to use custom hosts:\r\n* Possibly provide most of the existing apphost as a static library (this suggestion) - to make it easier to build one\r\n* Add an extension point to the SDK to be able to provide a custom apphost to the build\r\n\r\nAs for this - it should already be relatively straightforward to make a custom app host. The existing apphost is mostly just two things (if I ignore single-file, but making it possible to build a custom host for single-file is a much more complex problem):\r\n* Location hostfxr\r\n* Call into it to run the app\r\n\r\nIt\u0027s basically all in this one file: https://github.com/dotnet/runtime/blob/main/src/native/corehost/corehost.cpp\r\n\r\nThe \"locate hostfxr\" is already exposed as a static lib in the form of `nethost`.\r\nAnd calling into the hostfxr is really just that.\r\n\r\nThat said I could see value in packaging this into a static lib in some way.\r\n\r\nIn my view the SDK part is actually the more important one, as that one feels like more complex to workaround (and in some cases can be downright tricky to do so).",
                                           "updatedAt":  "2021-10-18T11:08:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Mbc2",
                                           "createdAt":  "2022-01-11T11:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartwe",
                                           "body":  "Hinting to get the high performance gpu is now also possible through https://docs.microsoft.com/en-us/windows/win32/api/dxgi1_6/nf-dxgi1_6-idxgifactory6-enumadapterbygpupreference",
                                           "updatedAt":  "2022-01-11T11:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T0-u5",
                                           "createdAt":  "2024-11-15T23:40:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "This would also be very useful for blocking a service called Nahimic by A-Volute. Right now this is destroying Paint.NET 5.1, causing all sorts of graphical issues for a bunch of folks. It\u0027s caused trouble in past versions as well, but it seems to have really caused a ruckus now that I\u0027m using more modern presentation tech (DXGI Flip Mode, Windows.UI.Composition, Advanced Color, etc.).\n\nApparently it has a secret killswitch that @Kaldaien pointed out to me: https://docs.kicad.org/doxygen/windows_2app_8cpp_source.html\n```c\nextern \"C\"\n{\n    // So there exists this malware called Nahimic by A-Volute, which is marketed as an audio enhancement\n    // software. In reality it\u0027s an aggressive form of malware that injects itself wildly into every process\n    // on the system for god knows what reason. It even includes a tracking/analytics package, \u003cinsert tinfoil hat\u003e\n    // Our problem is this garbage basically bugs out OpenGL (why an audio driver does that, who knows, its made by morons)\n    // And then we get issues reported both in our issue tracker and sentry reports as a result\n    // At least these malware authors were nice to include a dumb \"disable\" trick where it checks if the exe is exporting\n    // a symbol called NoHotPatch, so here we are.\n    // Hopefully this works and stops the bug reports. Apparently the worst part is this malware aggressively gets reinstalled\n    // by awful low-tier motherboard vendors like MSI, Alienware and others who bundled it into their driver packages\n    // and distributed it over Windows Update\n    // Did I mention they clearly had issues with other apps so instead of fixing their malware, they blacklisted a hundred common\n    // apps and even some games in their own config? Obviously kicad isn\u0027t on that blacklist :(\n    // This malware seems to no longer be distributed as Nahimic and replaced with \"Sonar\" by SteelSeries.\n    // Time will tell if it\u0027s the same garbage, I\u0027m not volunteering to install it.\n    __declspec(dllexport) void NoHotPatch()\n    {\n        // this is a intentionally empty function\n        return;\n    }\n}\n```\n\nI\u0027m using a custom apphost EXE so I can do this easily, but others aren\u0027t ...",
                                           "updatedAt":  "2024-11-15T23:40:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T262K",
                                           "createdAt":  "2024-11-16T16:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I still feel like the best thing to do is have all of the existing apphosts export these needed symbols, but only when the application opts into them. Then that way Paint.NET and other similar applications would not require a custom apphost to be made.",
                                           "updatedAt":  "2024-11-16T16:40:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T3E8o",
                                           "createdAt":  "2024-11-16T17:58:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "\u003e I still feel like the best thing to do is have all of the existing apphosts export these needed symbols, but only when the application opts into them. Then that way Paint.NET and other similar applications would not require a custom apphost to be made.\n\nI use an apphost for a variety of other reasons as well, but I agree with your point.",
                                           "updatedAt":  "2024-11-16T17:58:17Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Provide an option to use an apphost with exports for GPU drivers",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61136",
        "createdAt":  "2021-11-03T00:26:24Z",
        "number":  61136,
        "author":  "tonybaloney",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-01T20:01:07Z",
        "body":  "### Description\n\nWhilst using the hostfxr API with delegates to call static methods, the example repo works fine for the default method, but when trying different methods I noticed that the returned code is not a `StatusCode`. \r\n\r\nThe result code I get in this example is ` -2146233054`.  No information is printed to stderr. \r\n\r\nIt looks like one of the methods in `ComponentActivator` threw an exception and that this code is the HResult, but here doesn\u0027t seem to be a way to get the error message or exception raised?\n\n### Reproduction Steps\n\nFor this example:\r\n\r\n```csharp\r\nusing System.Numerics;\r\n\r\nnamespace Pyjionlib\r\n{\r\n    public static class PlaneOperations\r\n    {\r\n        public delegate float VectorDotProductDelegate(float x1, float y1, float z1, float d1, float x2, float y2, float z2, float d2);\r\n\r\n        public static float VectorDotProduct(float x1, float y1, float z1, float d1, float x2, float y2, float z2, float d2)\r\n        {\r\n            var plane1 = new Plane(x1, y1, z1, d1);\r\n\r\n            return Plane.Dot(plane1, new Vector4(x2, y2, z2, d2));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen to try and fetch this delegate via `hdt_load_assembly_and_get_function_pointer`:\r\n\r\n```cpp\r\nstd::filesystem::path libPath = filesystem::path(\"../pyjion-lib/bin/Debug/Pyjionlib.dll\");\r\nREQUIRE(std::filesystem::exists(libPath));\r\nCHECK(load_hostfxr());\r\nauto load = get_dotnet_load_assembly();\r\nREQUIRE(load != nullptr);\r\ntypedef double (CORECLR_DELEGATE_CALLTYPE *custom_entry_point_fn)(double, double, double, double, double, double, double, double);\r\ncustom_entry_point_fn dot = nullptr;\r\nint ret = load(\r\n        libPath.c_str(),\r\n        \"Pyjion.PlaneOperations, Pyjionlib\",\r\n        \"VectorDotProduct\",\r\n        \"Pyjion.PlaneOperations+VectorDotProductDelegate, Pyjionlib\" /*delegate_type_name*/,\r\n        nullptr,\r\n        (void**) \u0026dot);\r\n\r\nREQUIRE(ret == Success);\r\nREQUIRE(dot != nullptr);\r\nCHECK(dot(1., 2., 3., 4., 5., 6., 7., 8.) == 12.);\r\n```\n\n### Expected behavior\n\nError message written to stderr, or one of StatusCode results returned.\n\n### Actual behavior\n\nValue `-2146233054` returned\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- macOS Monterey\r\n- .NET 6 RC2\r\n- X86_64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOSMmXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45IdGq",
                                           "createdAt":  "2021-11-03T00:26:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-11-03T00:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45Idjf",
                                           "createdAt":  "2021-11-03T00:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tonybaloney",
                                           "body":  "This is `area-Host`",
                                           "updatedAt":  "2021-11-03T00:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45Itlc",
                                           "createdAt":  "2021-11-03T01:20:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhilst using the hostfxr API with delegates to call static methods, the example repo works fine for the default method, but when trying different methods I noticed that the returned code is not a `StatusCode`. \r\n\r\nThe result code I get in this example is ` -2146233054`.  No information is printed to stderr. \r\n\r\nIt looks like one of the methods in `ComponentActivator` threw an exception and that this code is the HResult, but here doesn\u0027t seem to be a way to get the error message or exception raised?\n\n### Reproduction Steps\n\nFor this example:\r\n\r\n```csharp\r\nusing System.Numerics;\r\n\r\nnamespace Pyjionlib\r\n{\r\n    public static class PlaneOperations\r\n    {\r\n        public delegate float VectorDotProductDelegate(float x1, float y1, float z1, float d1, float x2, float y2, float z2, float d2);\r\n\r\n        public static float VectorDotProduct(float x1, float y1, float z1, float d1, float x2, float y2, float z2, float d2)\r\n        {\r\n            var plane1 = new Plane(x1, y1, z1, d1);\r\n\r\n            return Plane.Dot(plane1, new Vector4(x2, y2, z2, d2));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen to try and fetch this delegate via `hdt_load_assembly_and_get_function_pointer`:\r\n\r\n```cpp\r\nstd::filesystem::path libPath = filesystem::path(\"../pyjion-lib/bin/Debug/Pyjionlib.dll\");\r\nREQUIRE(std::filesystem::exists(libPath));\r\nCHECK(load_hostfxr());\r\nauto load = get_dotnet_load_assembly();\r\nREQUIRE(load != nullptr);\r\ntypedef double (CORECLR_DELEGATE_CALLTYPE *custom_entry_point_fn)(double, double, double, double, double, double, double, double);\r\ncustom_entry_point_fn dot = nullptr;\r\nint ret = load(\r\n        libPath.c_str(),\r\n        \"Pyjion.PlaneOperations, Pyjionlib\",\r\n        \"VectorDotProduct\",\r\n        \"Pyjion.PlaneOperations+VectorDotProductDelegate, Pyjionlib\" /*delegate_type_name*/,\r\n        nullptr,\r\n        (void**) \u0026dot);\r\n\r\nREQUIRE(ret == Success);\r\nREQUIRE(dot != nullptr);\r\nCHECK(dot(1., 2., 3., 4., 5., 6., 7., 8.) == 12.);\r\n```\n\n### Expected behavior\n\nError message written to stderr, or one of StatusCode results returned.\n\n### Actual behavior\n\nValue `-2146233054` returned\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- macOS Monterey\r\n- .NET 6 RC2\r\n- X86_64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etonybaloney\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-03T01:20:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45IyZc",
                                           "createdAt":  "2021-11-03T02:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tonybaloney",
                                           "body":  "Update -2146233054 is equivalent to COR_E_TYPELOAD. Found this by looping over all values in rexcep.h until I got a match",
                                           "updatedAt":  "2021-11-03T02:26:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "load_assembly_and_get_function_pointer_fn returns undocumented error codes",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64087",
        "createdAt":  "2022-01-21T05:10:17Z",
        "number":  64087,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCK-ZQQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2022-01-21T13:27:30Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-02-14T19:27:36Z",
        "body":  "By default, a C++ application in VS uses the debug version of the C runtime library when building with Configuration=Debug. Since we only ship a release `libnethost.lib` using the release CRT, if a consumer tries to link it in, they will hit mismatches between the runtime libraries (`LNK2038`). In order to consume the static `libnethost.lib`, they have to change the defaults for the Debug configuration to use the release version of the C runtime library.\r\n\r\nKind of a continuation of our \u0027we lack a defined/worn path for shipping native assets\u0027. Possibilities:\r\n- Ship a `libnethostd.lib` (and .pdb) on Windows that uses the debug CRT\r\n  - Would add about 4MB\r\n- Maintain and push people to [vcpkg](https://github.com/microsoft/vcpkg)\r\n  - [Port for nethost](https://github.com/microsoft/vcpkg/tree/master/ports/nethost) is there, but, to my knowledge, we have not been maintaining/updating\r\n- Only support using the release CRT if using static nethost (and document)\r\n  - Consumers would need to compile with `/MT` and not define `_DEBUG` (this is what [DNNE](https://github.com/aaronrobinsonmsft/dnne) is doing, cc @AaronRobinsonMSFT)\r\n\r\ncc @vitek-karas",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPLkPlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48sEnh",
                                           "createdAt":  "2022-01-21T05:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBy default, a C++ application in VS uses the debug version of the C runtime library when building with Configuration=Debug. Since we only ship a release `libnethost.lib` using the release CRT, if a consumer tries to link it in, they will hit mismatches between the runtime libraries (`LNK2038`). In order to consume the static `libnethost.lib`, they have to change the defaults for the Debug configuration to use the release version of the C runtime library.\r\n\r\nKind of a continuation of our \u0027we lack a defined/worn path for shipping native assets\u0027. Possibilities:\r\n- Ship a `libnethostd.lib` (and .pdb) on Windows that uses the debug CRT\r\n  - Would add about 4MB\r\n- Maintain and push people to [vcpkg](https://github.com/microsoft/vcpkg)\r\n  - [Port for nethost](https://github.com/microsoft/vcpkg/tree/master/ports/nethost) is there, but, to my knowledge, we have not been maintaining/updating\r\n- Only support using the release CRT if using static nethost (and document)\r\n  - Consumers would need to compile with `/MT` and not define `_DEBUG` (this is what [DNNE](https://github.com/aaronrobinsonmsft/dnne) is doing, cc @AaronRobinsonMSFT)\r\n\r\ncc @vitek-karas\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eelinor-fung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-21T05:10:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48uQ-W",
                                           "createdAt":  "2022-01-21T18:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "I would use the `libnethostd.lib` if it was made available. If I remember correctly, the existing `libnethost.lib` is only shipped in a Nuget package, and that Nuget package is not used for anything else other than custom native hosts so I don\u0027t think the size increase should matter.",
                                           "updatedAt":  "2022-01-21T18:32:54Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "libnethost is only provided with release CRT",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64517",
        "createdAt":  "2022-01-30T21:40:06Z",
        "number":  64517,
        "author":  "TalAloni",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-07T20:45:02Z",
        "body":  "### Description\r\n\r\nI have a self-contained application without \".runtimeconfig.json\" and without .deps.json.\r\nI recently needed to start using \".runtimeconfig.json\" (for the purpose of setting \u0027System.GC.Server\u0027).\r\n\r\nThe inclusion of the \".runtimeconfig.json\" file changed the behavior of the (self-contained) application and now it can no longer be started when the current directory is the application directory.\r\nI have to change the current directory in order for me to start the application.\r\n\r\nAfter investigation, I have came across this in fx_muxer.cpp:\r\nhttps://github.com/dotnet/runtime/blob/bc6d349ecd72eec162f0532e6b6218fdbaa07ddb/src/native/corehost/fxr/fx_muxer.cpp#L326\r\n\r\nhttps://github.com/dotnet/runtime/blob/bc6d349ecd72eec162f0532e6b6218fdbaa07ddb/src/native/corehost/fxr/fx_muxer.cpp#L329\r\n\r\nAs can be seen, the presence of \u0027{appname}.runtimeconfig.json\u0027 in the current directory, affect whether the self-contained application will be detected as a \"standalone apphost\" or \"legacy split mode\".\r\n\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\n1. Create a Console application\r\n2. Set \"GenerateRuntimeConfigurationFiles\" and \"GenerateDependencyFile\" to false.\r\n3. Publish the application and set self-contained to true.\r\n4. Add a minimal {appname}.deps.json to the application directory containing just \"{}\".\r\n5. Attempt to launch the application when the current directory is the application directory.\r\n\r\n### Expected behavior\r\n\r\nThe application should launch successfully.\r\n\r\n### Actual behavior\r\n\r\nThe following message is displayed\r\n```\r\nCould not execute because the application was not found or a compatible .NET SDK\r\n is not installed.\r\nPossible reasons for this include:\r\n  * You intended to execute a .NET program:\r\n      The application \u0027/RUNASAPPLICATION\u0027 does not exist.\r\n  * You intended to execute a .NET SDK command:\r\n      It was not possible to find any installed .NET SDKs.\r\n      Install a .NET SDK from:\r\n        https://aka.ms/dotnet-download\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nChange the working directory\r\n\r\n### Configuration\r\n\r\nTested .NET Core 3.1 / .NET 5 / .NET 6.0.1\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfSBtnA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49G-IX",
                                           "createdAt":  "2022-01-30T21:40:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have a self-contained application without \".runtimeconfig.json\" and without .deps.json.\r\nI recently needed to start using \".runtimeconfig.json\" (for the purpose of setting \u0027System.GC.Server\u0027).\r\n\r\nThe inclusion of the \".runtimeconfig.json\" file changed the behavior of the (self-contained) application and now it can no longer be started when the current directory is the application directory.\r\nI have to change the current directory in order for me to start the application.\r\n\r\nAfter investigation, I have came accross this line of code in fx_muxer.cpp:\r\nhttps://github.com/dotnet/runtime/blob/bc6d349ecd72eec162f0532e6b6218fdbaa07ddb/src/native/corehost/fxr/fx_muxer.cpp#L326\r\n\r\nAs can be seen, the presence of \u0027{appname}.runtimeconfig.json\u0027 in the current directory, affect whether the self-contained application will be detected as a \"standalone apphost\" or \"legacy split mode\".\r\n\r\n\r\n\n\n### Reproduction Steps\n\n1. Create a Console application\r\n2. Set \"GenerateRuntimeConfigurationFiles\" and \"GenerateDependencyFile\" to false.\r\n3. Publish the application and set self-contained to true.\r\n4. Add a minimal {appname}.deps.json to the application directory containing just \"{}\".\r\n5. Attempt to launch the application when the current directory is the application directory.\n\n### Expected behavior\n\nThe application should launch successfully.\n\n### Actual behavior\n\nThe following message is displayed\r\n```\r\nCould not execute because the application was not found or a compatible .NET SDK\r\n is not installed.\r\nPossible reasons for this include:\r\n  * You intended to execute a .NET program:\r\n      The application \u0027/RUNASAPPLICATION\u0027 does not exist.\r\n  * You intended to execute a .NET SDK command:\r\n      It was not possible to find any installed .NET SDKs.\r\n      Install a .NET SDK from:\r\n        https://aka.ms/dotnet-download\r\n```\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nChange the working directory\n\n### Configuration\n\nTested .NET Core 3.1 / .NET 5 / .NET 6.0.1\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTalAloni\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-30T21:40:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49G_2E",
                                           "createdAt":  "2022-01-30T22:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is not really surprising, applications without `.runtimeconfig.json` are not really supported. I agree that this could/should probably be fixed, but I would strongly advise against removing `.runtimeconfig.json`. Similarly for `.deps.json`, the behavior without `.deps.json` is relatively well defined, but there are still potential issues.\r\n\r\nJust curious: Why did you decide to remove the `.runtimeconfig.json` (and the `.deps.json`) ?",
                                           "updatedAt":  "2022-01-30T22:15:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49HD3i",
                                           "createdAt":  "2022-01-30T23:37:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TalAloni",
                                           "body":  "Thanks, so just to be clear, I don\u0027t mind having `.runtimeconfig.json` but I wish to keep avoiding `.deps.json`.\r\nI found out that when `.deps.json` is present I am not able to dynamically load any pre-generated XmlSerializer DLL (generated using \u0027[Microsoft.XmlSerializer.Generator](https://www.nuget.org/packages/Microsoft.XmlSerializer.Generator)\u0027).\r\n\r\nOnce I removed `.deps.json`, this issue forced me to remove `.runtimeconfig.json`.\r\n\r\nIt would be great to have this fixed as the current behavior is baffling at best.\r\n",
                                           "updatedAt":  "2022-01-30T23:40:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59IG2c",
                                           "createdAt":  "2024-05-07T20:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timo352",
                                           "body":  "Commenting on this since we are running into similar problems at our organization on .NET 8.\r\nThe \"error\" message displayed now is the dotnet help text instead of an actual error.\r\n\r\nhttps://github.com/dotnet/runtime/blob/0fb0188a137f3d53a2ebd719d7a684327938609a/src/native/corehost/fxr/fx_muxer.cpp#L328\r\n\r\nThe workarounds that we have found make the issue seem more like a bug than a legacy feature:\r\n1. Run from a different directory. Changing behavior based on cwd seems wrong.\r\n2. Call `dotnet *.dll` instead of calling `*.exe` directly. This requires having dotnet installed on the machine, partially defeating the purpose of self-contained apps.\r\n3. Move runtimeconfig.json to a different folder and provide the `runtimeconfig \u003cpath\u003e` option\r\n\r\nFor a few reasons [mainly the way that we deliver and support customized patches to previously deployed software] we do not want to rely on shipping the deps.json file. However, there are settings in runtimeconfig.json that are necessary for our application to work. We are able to get around it for now with workaround 2 with an IIS deployed application. We plan on adding support for Unix soon. In which case, we can\u0027t rely on workaround 2 since we will not want to install the dotnet runtime separately from our app.\r\n\r\nWe\u0027d gladly volunteer time to fixing it if we could get more details on what the \"legacy split/fx mode\" use case is. I\u0027m not sure what existing behavior for .NET Core 1.x apps we need to avoid breaking. In my tests, this same workflow also fails for .NET Core 1.0 builds. Only running split_fx mode if the cwd is different from the application dir seems like a possibility.",
                                           "updatedAt":  "2024-05-07T20:45:00Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Self contained application does not start when the current directory is the application directory and current directory containing {appname}.runtimeconfig.json but does not contain {appname}.deps.json",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64538",
        "createdAt":  "2022-01-31T14:55:24Z",
        "number":  64538,
        "author":  "vuplea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8QAUQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-09-26T18:19:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nRoger-Env",
                                            "createdAt":  "2024-05-24T16:17:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SergiusTheBest",
                                            "createdAt":  "2024-10-29T17:05:45Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-03-25T10:39:53Z",
        "body":  "Similar to https://github.com/dotnet/runtime/issues/64430\r\n\r\nFor supporting installation of our app without admin rights and without .NET6 runtime installed we are using the self-contained mode. The app contains both CLI and Windows GUI exes (.NET AppHosts).\r\n\r\nWe reached the following limitation of self-contained:\r\nWe would like to reuse the runtime with other exes that cannot be along the main installation, for user addon exes deployed in a different directory.  User addon exes are only launched by our app and not directly, so the parent exe could set `DOTNET_ROOT`, yet the runtime deployed for self-contained does not match the expected structure for `DOTNET_ROOT` (CLR in a different location than `hostfxr.dll`).\r\n\r\nAlternatives analyzed:\r\n* `DOTNET_ROOT` environment variable for everything. This solves the problem in theory in yet this requires the variable to be present.  We want to keep using AppHosts as app entry points (we do not want to wrap them in other commands just for setting the variable).  Alternatively, we could set the environment variable as default in the user\u0027s registry by the installer, yet this has the risk of affecting other apps.\r\n* Using an undocumented self-contained output structure we discovered that allows entry-points to not have the variable set, yet the runtime to be reused for the addons using the `DOTNET_ROOT` variable. The structure is as following:\r\nInstead of AppHost, `hostfxr.dll`, `CLR` and framework assemblies in the same directory, have AppHost and `hostfxr.dll` in the same directory, and CLR + framework assemblies in the subdirectory `shared\\Microsoft.NETCore.App\\6.0.1`.  This, suprisingly, allows the app to start up self-contained, and also allows the runtime to be reused through `DOTNET_ROOT`.\r\n\r\nOur questions are:\r\n* Are we missing a simpler solution to this?\r\n* Is the output structure we found intended to work?\r\nThanks you for your patience 😅 \r\n\r\nI just now see that our case is a \u0027simpler\u0027 subcase of https://github.com/dotnet/runtime/issues/64430#issuecomment-1023961180, because we are able to set the `DOTNET_ROOT` variable for the addon apps.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQE6PGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49JQbl",
                                           "createdAt":  "2022-01-31T14:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSimilar to https://github.com/dotnet/runtime/issues/64430\r\n\r\nFor supporting installation of our app without admin rights and without .NET6 runtime installed we are using the self-contained mode. The app contains both CLI and Windows GUI exes (.NET AppHosts).\r\n\r\nWe reached the following limitation of self-contained:\r\nWe would like to reuse the runtime with other exes that cannot be along the main installation, for user addon exes deployed in a different directory.  User addon exes are only launched by our app and not directly, so the parent exe could set `DOTNET_ROOT`, yet the runtime deployed for self-contained does not match the expected structure for `DOTNET_ROOT` (CLR in a different location than `hostfxr.dll`).\r\n\r\nAlternatives analyzed:\r\n* `DOTNET_ROOT` environment variable for everything. This solves the problem in theory in yet this requires the variable to be present.  We want to keep using AppHosts as app entry points (we do not want to wrap them in other commands just for setting the variable).  Alternatively, we could set the environment variable as default in the user\u0027s registry by the installer, yet this has the risk of affecting other apps.\r\n* Using an undocumented self-contained output structure we discovered that allows entry-points to not have the variable set, yet the runtime to be reused for the addons using the `DOTNET_ROOT` variable. The structure is as following:\r\nInstead of AppHost, `hostfxr.dll`, `CLR` and framework assemblies in the same directory, have AppHost and `hostfxr.dll` in the same directory, and CLR + framework assemblies in the subdirectory `shared\\Microsoft.NETCore.App\\6.0.1`.  This, suprisingly, allows the app to start up self-contained, and also allows the runtime to be reused through `DOTNET_ROOT`.\r\n\r\nOur questions are:\r\n* Are we missing a simpler solution to this?\r\n* Is the output structure we found intended to work?\r\nThanks you for your patience 😅 \r\n\r\nI just now see that our case is a \u0027simpler\u0027 subcase of https://github.com/dotnet/runtime/issues/64430#issuecomment-1023961180, because we are able to set the `DOTNET_ROOT` variable for the addon apps.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evuplea\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-31T14:55:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49JjRf",
                                           "createdAt":  "2022-01-31T15:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH3ZOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vuplea",
                                                                               "createdAt":  "2022-01-31T17:35:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2022-02-06T14:33:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iq2luc",
                                                                               "createdAt":  "2022-08-30T15:35:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T18:19:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Are we missing a simpler solution to this?\r\n\r\nNo - we currently don\u0027t have a \"simple\" solution for this. See below...\r\n\r\n\u003e Is the output structure we found intended to work?\r\n\r\nThis surprises even me, and I thought I\u0027ve seen it all 😭 - so I would say \"no, it\u0027s not intended that way\".\r\n\r\nAs for what to do about this: Currently the most \"supported\" way to achieve this is to:\r\n* Build your own apphost - this is not that hard as most of the functionality of apphost is already available through the `nethost` library (both as dll or static lib). You could also copy/reuse lot of code from the official apphost https://github.com/dotnet/runtime/blob/main/src/native/corehost/corehost.cpp. This is fully supported.\r\n* Inject your custom apphost into the app:\r\n  * You could build the app without apphost (`UseAppHost=false`) and then just copy it there. This would be also fully supported.\r\n  * Tweak the SDK to use your custom built apphost - this would require a bit of hacking of the SDK, but should not be too hard. I\u0027ve seen people do it, but I don\u0027t have a sample at hand. This is currently not really supported, so we could break you with future changes to the SDK. Some way of doing this will likely be part of https://github.com/dotnet/runtime/issues/53834 once we do it.\r\n* The custom apphost can specify the \"dotnet root\" in whatever way it wants - so you can pass in a path relative to the .exe path for example.\r\n* In the location of the \"dotnet root\" - you would \"install\" the runtime, the simplest way is to download the right \"zip\" install of the given runtime and just unzip it there (it should have `dotnet.exe` in the root, and then the usual structure).\r\n\r\nYou could use this technique for the main app, or for all of your apphosts if you don\u0027t want to set `DOTNET_ROOT` for the children.",
                                           "updatedAt":  "2022-01-31T15:40:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5APSUp",
                                           "createdAt":  "2022-03-24T15:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCUpFEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "nielsbosma",
                                                                               "createdAt":  "2022-03-25T07:52:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "oscargullberg",
                                           "body":  "\u003e \u003e Are we missing a simpler solution to this?\r\n\u003e \r\n\u003e No - we currently don\u0027t have a \"simple\" solution for this. See below...\r\n\u003e \r\n\u003e \u003e Is the output structure we found intended to work?\r\n\u003e \r\n\u003e This surprises even me, and I thought I\u0027ve seen it all 😭 - so I would say \"no, it\u0027s not intended that way\".\r\n\u003e \r\n\u003e As for what to do about this: Currently the most \"supported\" way to achieve this is to:\r\n\u003e \r\n\u003e * Build your own apphost - this is not that hard as most of the functionality of apphost is already available through the `nethost` library (both as dll or static lib). You could also copy/reuse lot of code from the official apphost https://github.com/dotnet/runtime/blob/main/src/native/corehost/corehost.cpp. This is fully supported.\r\n\u003e * Inject your custom apphost into the app:\r\n\u003e   \r\n\u003e   * You could build the app without apphost (`UseAppHost=false`) and then just copy it there. This would be also fully supported.\r\n\u003e   * Tweak the SDK to use your custom built apphost - this would require a bit of hacking of the SDK, but should not be too hard. I\u0027ve seen people do it, but I don\u0027t have a sample at hand. This is currently not really supported, so we could break you with future changes to the SDK. Some way of doing this will likely be part of [Support deploying multiple exes as a single self-contained set #53834](https://github.com/dotnet/runtime/issues/53834) once we do it.\r\n\u003e * The custom apphost can specify the \"dotnet root\" in whatever way it wants - so you can pass in a path relative to the .exe path for example.\r\n\u003e * In the location of the \"dotnet root\" - you would \"install\" the runtime, the simplest way is to download the right \"zip\" install of the given runtime and just unzip it there (it should have `dotnet.exe` in the root, and then the usual structure).\r\n\u003e \r\n\u003e You could use this technique for the main app, or for all of your apphosts if you don\u0027t want to set `DOTNET_ROOT` for the children.\r\n\r\nLet\u0027s say I create a modified build of the official app host template where I add an application specific `DOTNET_ROOT` env variable.  Is there an easy way to jack into the existing `HostWriter` functionality for setting binary path and icon etc? I guess a bad and hacky solution would be to replace the `dotnet\\sdk\\{version}\\apphost.exe` but I would like to avoid that. 😅",
                                           "updatedAt":  "2022-03-24T15:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ATo8a",
                                           "createdAt":  "2022-03-25T10:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@oscargullberg unfortunately the answer is \"not really\". You could do some msbuild hacking and run the CreateAppHost task manually, it\u0027s not that hard, but it\u0027s definitely not \"supported\".\r\n\r\nWe\u0027re looking into providing this ability to SDK here: https://github.com/dotnet/sdk/issues/24334\r\n\r\nIf you have a scenario in mind, could you please comment on that issue with a short description of it. Specifically we\u0027re looking for motivation/scenarios where the SDK would not just use the custom apphost as-is, but it would modify it - update Win32 resources, update the CLI/GUI bit, potentially allow the templating behavior (where the apphost is tied to a specific app.dll, and the name/relative path to that dll is baked into the exe).",
                                           "updatedAt":  "2022-03-25T10:39:52Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "DOTNET_ROOT alternative for Windows; hacky solution found",
        "labels":  [
                       "question",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70229",
        "createdAt":  "2022-05-05T12:40:10Z",
        "number":  70229,
        "author":  "Chandra123539",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-10T16:32:16Z",
        "body":  "### Issue\r\n\r\nIs there any way to unload a Managed assembly which is loaded from Native library using hostfxr library. Does unloading of hostfxr unload Managed assembly ?\r\n\r\nWorkflow\r\nASP.Net Core Service---\u003e loads ---\u003e Native Library-----\u003e loads Managed Assembly using hostfxr.\r\n\r\nwe would like to know whether we have a possibility of unloading Managed Assembly .\r\n\r\nPlease let us know your inputs on this. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaKdtWQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EVYIj",
                                           "createdAt":  "2022-06-03T23:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Issue\r\n\r\nIs there any way to unload a Managed assembly which is loaded from Native library using hostfxr library. Does unloading of hostfxr unload Managed assembly ?\r\n\r\nWorkflow\r\nASP.Net Core Service---\u003e loads ---\u003e Native Library-----\u003e loads Managed Assembly using hostfxr.\r\n\r\nwe would like to know whether we have a possibility of unloading Managed Assembly .\r\n\r\nPlease let us know your inputs on this. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eChandra123539\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-03T23:39:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EY5r0",
                                           "createdAt":  "2022-06-06T12:09:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The hosting APIs currently don\u0027t provide a way to unload assembly and unloading `hostfxr` itself will not help (note that .NET runtime is currently not unloadable - once it\u0027s loaded into the process it stays forever). Also in your case the `hostfxr` you\u0027re using (assuming you\u0027re using the `nethost` library to find it) is the one which was used to start the \"ASP.NET Core Service\" and thus is in use by it. If you free the native library reference to it, it will not unload it (and if you somehow manage to force the OS to unload it, it might break the service).\r\n\r\nThere are possible workaround which are a bit complicated. You could use a small helper assembly which is the one your native library loads and through it load other assemblies. Since the helper assembly is managed code, it can create a new load context into which it loads other assemblies and it could also unload such load context.",
                                           "updatedAt":  "2022-06-06T12:09:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5okYaO",
                                           "createdAt":  "2023-10-10T04:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lunar2kPS",
                                           "body":  "\u003e There are possible workaround which are a bit complicated. You could use a small helper assembly which is the one your native library loads and through it load other assemblies. Since the helper assembly is managed code, it can create a new load context into which it loads other assemblies and it could also unload such load context.\r\n\r\nOh wow, so does that mean I wouldn\u0027t need to use the hostfxr/nethost headers (nor their nethost/libnethost static/dynamic libraries) at all? I\u0027d use some other mechanism altogether, like [LoadLibraryW(...)](https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryw) or [dlopen(...)](https://linux.die.net/man/3/dlopen) perhaps?\r\n\r\nAnd I suppose this isn\u0027t being worked on, is it?\r\nJust curious either way! I want to avoid hacks if possible, so I just want to listen to your (or anyone\u0027s, really) recommendation(s) :) ",
                                           "updatedAt":  "2023-10-10T04:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5omLD0",
                                           "createdAt":  "2023-10-10T09:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJMHUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Lunar2kPS",
                                                                               "createdAt":  "2023-10-10T15:21:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "`LoadLibrary`/`dlopen` won\u0027t work on managed assemblies. If your native library needs to load managed code it needs to go through the `hostfxr`.\r\n\r\nBut since you start in managed code, if the service knows about all of this, you could just pass a function pointer from the service to your native library as a callback - and it would call it when it wants to get back to managed. That callback could do whatever you need in managed. This would not need `hostfxr` or anything on the native side really.\r\n\r\nWe don\u0027t have plans currently to add support for unloading through the native hosting APIs. We have preparation in the hosting APIs to support \"load contexts\" which would then lead to eventually supporting unloading, but currently these parameters are always `null`.",
                                           "updatedAt":  "2023-10-10T09:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opMoH",
                                           "createdAt":  "2023-10-10T14:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lunar2kPS",
                                           "body":  "\u003e `LoadLibrary`/`dlopen` won\u0027t work on managed assemblies. If your native library needs to load managed code it needs to go through the `hostfxr`.\r\n\r\nAhh good to know!\r\n\r\n\u003e But since you start in managed code, if the service knows about all of this, you could just pass a function pointer from the service to your native library as a callback - and it would call it when it wants to get back to managed. That callback could do whatever you need in managed. This would not need `hostfxr` or anything on the native side really.\r\n\r\n\r\nHmmm my apologies to take more of your time, but I\u0027m curious if you have (or know of) an example/sample code that does this? I\u0027m only partially understanding 🤔\r\n\r\n\u003e We don\u0027t have plans currently to add support for unloading through the native hosting APIs. We have preparation in the hosting APIs to support \"load contexts\" which would then lead to eventually supporting unloading, but currently these parameters are always `null`.\r\n\r\nOoh cool! Are there any GitHub PRs/issues that are working on adding support for load contexts, that I may be able to follow?\r\n\r\n---\r\n\r\nOtherwise, I\u0027ve heard that since the main way to \"unload\" hostfxr is to exit the process, I could make my main C++ create a child process (another C++ program) dedicated towards hosting a .NET runtime, that I can communicate with sockets or IPC, but if the way you described is easier, I\u0027d love to learn that too!\r\n",
                                           "updatedAt":  "2023-10-10T14:57:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opYFE",
                                           "createdAt":  "2023-10-10T15:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJMHRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Lunar2kPS",
                                                                               "createdAt":  "2023-10-10T15:21:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Otherwise, I\u0027ve heard that since the main way to \"unload\" hostfxr is to exit the process\r\n\r\nWe don\u0027t support unloading .NET runtime currently - so if that\u0027s what you want, child process is the only way.\r\n\r\nBut in your description above, it seems the app starts as .NET app (ASP.NET service), so you can\u0027t really unload the runtime. Note that in this case the `hostfxr` you get from `nethost` is the one already loaded into the process anyway.\r\n\r\n\u003e Reverse PInvoke (passing a pointer to managed function to native)\r\n\r\nI can\u0027t find a good example... \r\nThis is from a test in runtime repo which shows the general shape: https://github.com/dotnet/runtime/blob/e2c319a19c25b8c77f9d060077a4ea5f91a0214a/src/tests/profiler/transitions/transitions.cs#L52-L66\r\n\r\n@elinor-fung are you aware of some example for a reverse PInvoke?\r\n\r\n\u003e Ooh cool! Are there any GitHub PRs/issues that are working on adding support for load contexts, that I may be able to follow?\r\n\r\nI don\u0027t think we have a master issue for this - it\u0027s more a thing we discussed. There\u0027s not much demand for this actually (at least as far as I can tell).\r\n",
                                           "updatedAt":  "2023-10-10T15:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opoZ1",
                                           "createdAt":  "2023-10-10T15:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lunar2kPS",
                                           "body":  "Ah gotcha,\r\n\r\n\u003e But in your description above, it seems the app starts as .NET app (ASP.NET service), so you can\u0027t really unload the runtime.\r\n\r\nOh actually I\u0027m not the originally poster haha, I\u0027m familiar/good with C# .NET, but haven\u0027t used ASP.NET before (I don\u0027t think).\r\n\r\nI\u0027m learning to write cross-platform/native C++ programs using CMake and various libraries to make my own tiny/specialized 2D game engine, and am publicly documenting a lot of the lesser-documented compiling/linking setup in [this GitHub repo](https://github.com/Lunar2kPS/advanced-cpp) for others (and myself)! \r\n\r\n\r\n\u003e This is from a test in runtime repo which shows the general shape: \r\n\r\nBut ahhhh I see.. interesting.. I\u0027ma do some testing with this, thanks for the example! Now I think I understand. I\u0027m curious to measure some performance tests with what way is fastest, and also just to play around with it and see which is most convenient for my C++ engine to have C# scripting.\r\n\r\n\r\n\u003e I don\u0027t think we have a master issue for this - it\u0027s more a thing we discussed. There\u0027s not much demand for this actually (at least as far as I can tell).\r\n\r\nAh no problem, I appreciate the help nonetheless!",
                                           "updatedAt":  "2023-10-10T15:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5optCF",
                                           "createdAt":  "2023-10-10T16:07:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJMisw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Lunar2kPS",
                                                                               "createdAt":  "2023-10-10T16:16:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Oh actually I\u0027m not the originally poster\r\n\r\nSorry about that - my mistake.\r\n\r\n\u003e measure some performance tests with what way is fastest\r\n\r\nCalling the function pointer should be the same perf regardless how you get the pointer to native code. The `hostfxr` way is basically doing the same thing as the reverse PInvoke under the hood.\r\n\r\nIf you\u0027re starting from native code, then the reverse PInvoke is not very interesting - unless you need to have lot of native-\u003emanaged functions, in which case it might be easier to return a struct of functions pointers from managed, instead of using the `hostfxr` APIs for each method one by one (the `hostfxr` API does reflection to find the method, which is pretty expensive).",
                                           "updatedAt":  "2023-10-10T16:07:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opyld",
                                           "createdAt":  "2023-10-10T16:20:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lunar2kPS",
                                           "body":  "No problem!\r\n\r\nAhh.. that makes sense. Good to know about the reflection thing!\r\nAwesome, thanks for all the insight, this was super helpful 😄",
                                           "updatedAt":  "2023-10-10T16:20:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5op21Z",
                                           "createdAt":  "2023-10-10T16:32:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJNQVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Lunar2kPS",
                                                                               "createdAt":  "2023-10-10T18:02:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Some more examples around reverse p/invoke:\r\n\r\nhttps://learn.microsoft.com/dotnet/api/system.runtime.interopservices.unmanagedcallersonlyattribute\r\nhttps://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke#invoking-managed-code-from-unmanaged-code",
                                           "updatedAt":  "2023-10-10T16:32:15Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Way to unload a Managed assembly from native library using hostfxr",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70976",
        "createdAt":  "2022-06-20T07:13:02Z",
        "number":  70976,
        "author":  "k15tfu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4KFiA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-09-26T18:28:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dermot-hardy",
                                            "createdAt":  "2024-05-25T17:44:17Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-07-01T20:13:53Z",
        "body":  "Hi!\r\n\r\nThere was a discussion https://github.com/dotnet/runtime/issues/3496#issuecomment-472589961 that the dotnet executable doesn\u0027t work if renamed `A fatal error was encountered. Cannot execute dotnet when renamed to %s` because of security concerns (among others). The point is that the muxer can execute any managed assembly, but for end users it will look like something signed by Microsoft.\r\n\r\nThe published apphost executables are often signed by some companies to distribute their products, so the same concerns apply for these executables as well.\r\n\r\nLinked issues: https://github.com/dotnet/runtime/issues/3496\r\n\r\ncc @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORa4Tgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FJSS1",
                                           "createdAt":  "2022-06-20T07:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHi!\r\n\r\nThere was a discussion https://github.com/dotnet/runtime/issues/3496#issuecomment-472589961 that the dotnet executable doesn\u0027t work if renamed `A fatal error was encountered. Cannot execute dotnet when renamed to %s` because of security concerns (among others). The point is that the muxer can execute any managed assembly, but for end users it will look like something signed by Microsoft.\r\n\r\nThe published apphost executables are often signed by some companies to distribute their products, so the same concerns apply for these executables as well.\r\n\r\nLinked issues: https://github.com/dotnet/runtime/issues/3496\r\n\r\ncc @vitek-karas \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ek15tfu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T07:13:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FJ3NE",
                                           "createdAt":  "2022-06-20T09:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "disallowing file rename is unreliable way to ensure authenticity. nobody else uses this strange method and it only gives us false sense of safety.\r\n\r\n\u003e `A fatal error was encountered. Cannot execute dotnet when renamed to %s`\r\n\r\nyou can get away with something out of the operating system\r\n\r\n```\r\n# symlink\r\nln -s /usr/share/dotnet/dotnet renamed\r\n./renamed --info\r\n```\r\n\r\nor something out of shell\r\n\r\n```\r\nalias renamed=/usr/share/dotnet/dotnet\r\nrenamed --info\r\n```\r\n\r\n[#overengineering](https://en.wikipedia.org/wiki/Overengineering)\r\n[#safety-through-obscurity](https://en.wikipedia.org/wiki/Security_through_obscurity)\r\n[#kiss-principle](https://en.wikipedia.org/wiki/KISS_principle)",
                                           "updatedAt":  "2022-06-20T09:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FJ70L",
                                           "createdAt":  "2022-06-20T09:55:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The `apphost` is not signed by Microsoft when we ship it. It\u0027s also not signed by the SDK when it produces an app (macOS is different, but there it should be using the developer cert only anyway). Also the `apphost` as shipped by Microsoft won\u0027t run at all (it will immediately fail). The `apphost` produced as an executable of an app by the SDK is tied to a `.dll` file of a specific name, so it also can\u0027t be used to run just \"any\" code. Meaning that if someone signs the executable of an app, that executable can\u0027t be misused the same way `dotnet` can. For these reasons, there\u0027s no point in having any such logic in `apphost`.\r\n\r\nAs for the security side of this. It\u0027s more a defense in depth approach - make it harder for malicious actors to achieve what they want. My understanding (this was done before my time) is that this was mostly targeted to Windows, where trying to run an executable as administrator pops up the UAC dialogs which has the name of the executable on it.\r\n\r\n/cc @blowdart for the security aspect of this question",
                                           "updatedAt":  "2022-06-20T09:55:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FKWTB",
                                           "createdAt":  "2022-06-20T11:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "It\u0027s very much targeted at Windows because that\u0027s where Authenticode lived. On linux there\u0027s no such validation built into the OS\r\n\r\nHowever as @vitek-karas says the apphost exes are a more stripped down version of dotnet.exe, and the rename concern doesn\u0027t apply because they\u0027re not signed, until you make the choice to sign them, and they\u0027re tied to what else is published with them, so a rename doesn\u0027t help much, so there\u0027s no sense in adding any defense in depth method here.",
                                           "updatedAt":  "2022-06-20T11:41:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fq3Vq",
                                           "createdAt":  "2022-06-28T15:21:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "k15tfu",
                                           "body":  "@vitek-karas Sorry for not being clear. Yes, the `apphost` template is not signed by Microsoft and cannot be run, but I\u0027m considering the case where we published some application (e.g. `MoviePlayer.exe` which is bound to `MoviePlayer.dll`), and signed it. By run \"any\" code, I meant that one can rename this executable to a different name (let\u0027s call it `BackgroundUpdate.exe`), place its code to a managed .dll with the same name `MoviePlayer.dll`, and for the end user it will look (in UAC, Task Manager or Activity Monitor) like some kind of system process produced by our company, because it still has a valid signature and no one will even understand that it was supposed to be another program.\r\n\r\nIf it was the same reason to prevent renaming `dotnet`, should we do the same check for `apphost` as well?",
                                           "updatedAt":  "2022-06-28T15:21:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FrhOC",
                                           "createdAt":  "2022-06-28T17:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@k15tfu I think you\u0027re right that it could be used that way. We could consider doing something like we have in `dotnet` for `apphost` (although it\u0027s a bit more tricky since the name is arbitrary so SDK would have to bake the name of the exe into the exe itself, definitely doable).\r\n\r\nAlternatively you could build your own apphost and add additional protections - it\u0027s pretty easy to build one. And we will hopefully have a way to use it in SDK in an easy way eventually: https://github.com/dotnet/sdk/issues/24334.\r\n\r\nNote that all of this is relatively weak defense. The malicious actor could take your exe as is - replace the managed dll with malicious code and use it. The name of the exe would be some of your tool\u0027s name, and it would be signed by your cert - so it would look relatively legit.\r\n\r\nYet another alternative is to use framework dependent single-file (or self-contained, depends on your needs) - that bundles all of the managed code into the exe and thus all of it is signed. Renaming the exe would still work, but the attacker would have a much harder time substituting code.",
                                           "updatedAt":  "2022-06-28T17:46:27Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Prevent renaming apphost executables",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71027",
        "createdAt":  "2022-06-20T23:43:28Z",
        "number":  71027,
        "author":  "AraHaan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-12T20:08:46Z",
        "body":  "### Description\n\nCurrently it seems that the apphost looks for hostpolicy in the last framework that is in runtimeconfig which is not true, instead it should hard code it to look in the Microsoft.NETCore.App framework regardless of how many frameworks are in the runtimeconfig.json file.\n\n### Reproduction Steps\n\nHave an application that generates an runtimeconfig where Microsoft.NETCore.App does not appear last (in my case the problem happens when aspnetcore is last so it looks in the aspnetcore framework).\n\n### Expected behavior\n\nFor the AppHost to either ignore runtimeconfig when looking for hostpolicy by hard coding it or for the .NET SDK to always output it last regardless of how many frameworks the application depends on.\n\n### Actual behavior\n\nThe apphost always looks for the hostpolicy assembly in the framework listed last in runtimeconfig.\n\n### Regression?\n\nNot sure.\n\n### Known Workarounds\n\nCurrently the only option is to manually patch the runtimeconfig to reorder the frameworks listed after building.\n\n### Configuration\n\nThe code is running on 6.0.6 of the .NET SDK Frameworks.\r\n\r\nWindows 11 21H2.\r\nArch: x64 (AMD64)\r\nSpecifc to config?: I do not think so, other than sdk generated runtimeconfig.json which cannot be bypassed to use a premade runtimeconfig that is manually maintained in the mean time.\r\nNot using blazor at all.\n\n### Other information\n\nI think the problem lies in the apphost or whatever it is that tries to load hostpolicy.dll. As for the spot in code, I cant point to where the exact line it is failing at as I am not sure myself.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORrtrwA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FMtW9",
                                           "createdAt":  "2022-06-20T23:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCurrently it seems that the apphost looks for hostpolicy in the last framework that is in runtimeconfig which is not true, instead it should hard code it to look in the Microsoft.NETCore.App framework regardless of how many frameworks are in the runtimeconfig.json file.\n\n### Reproduction Steps\n\nHave an application that generates an runtimeconfig where Microsoft.NETCore.App does not appear last (in my case the problem happens when aspnetcore is last so it looks in the aspnetcore framework).\n\n### Expected behavior\n\nFor the AppHost to either ignore runtimeconfig when looking for hostpolicy by hard coding it or for the .NET SDK to always output it last regardless of how many frameworks the application depends on.\n\n### Actual behavior\n\nThe apphost always looks for the hostpolicy assembly in the framework listed last in runtimeconfig.\n\n### Regression?\n\nNot sure.\n\n### Known Workarounds\n\nCurrently the only option is to manually patch the runtimeconfig to reorder the frameworks listed after building.\n\n### Configuration\n\nThe code is running on 6.0.6 of the .NET SDK Frameworks.\r\n\r\nWindows 11 21H2.\r\nArch: x64 (AMD64)\r\nSpecifc to config?: I do not think so, other than sdk generated runtimeconfig.json which cannot be bypassed to use a premade runtimeconfig that is manually maintained in the mean time.\r\nNot using blazor at all.\n\n### Other information\n\nI think the problem lies in the apphost or whatever it is that tries to load hostpolicy.dll. As for the spot in code, I cant point to where the exact line it is failing at as I am not sure myself.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAraHaan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T23:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FMthy",
                                           "createdAt":  "2022-06-20T23:44:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Oh yeah, forgot to mention this happens in FDD deployments and the code does not have to be published to trigger it.",
                                           "updatedAt":  "2022-06-20T23:44:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FOSff",
                                           "createdAt":  "2022-06-21T07:37:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/native/corehost/fx_definition.h#L48\r\n\r\nWhat I think it should be changed to:\r\n\r\n```cpp\r\n    for (auto\u0026 fx_definition : fx_definitions)\r\n    {\r\n        if (fx_definition-\u003eget_name() != \"Microsoft.NETCore.App\")\r\n        {\r\n            continue;\r\n        }\r\n\r\n        return *fx_definition;\r\n    }\r\n\r\n    // not found? Return null.\r\n    return nullptr;\r\n```",
                                           "updatedAt":  "2022-06-21T08:30:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FO4-_",
                                           "createdAt":  "2022-06-21T10:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@AraHaan do you have a repro for this?\r\n\r\nI tried locally with an ASP.NET app and it produces a runtimeconfig.json like this by default:\r\n```JSON\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"7.0.0-preview.5.22301.12\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"7.0.0-preview.5.22303.8\"\r\n      }\r\n    ],\r\n```\r\n\r\nRunning the app works just fine, looking at the host trace it shows that the host correctly ordered the frameworks:\r\n```\r\n--- Summary of all frameworks:\r\n     framework:\u0027Microsoft.AspNetCore.App\u0027, lowest requested version=\u00277.0.0-preview.5.22303.8\u0027, found version=\u00277.0.0-preview.5.22303.8\u0027, effective reference version=\u00277.0.0-preview.5.22303.8\u0027 apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\7.0.0-preview.5.22303.8\r\n     framework:\u0027Microsoft.NETCore.App\u0027, lowest requested version=\u00277.0.0-preview.5.22301.12\u0027, found version=\u00277.0.0-preview.5.22301.12\u0027, effective reference version=\u00277.0.0-preview.5.22301.12\u0027 apply_patches=1, version_compatibility_range=patch, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.0-preview.5.22301.12\r\n```\r\n\r\nAnd that it correctly looked for `hostpolicy` in the lowest level framework (NETCore.App):\r\n```\r\n--- Resolving hostpolicy.dll version from deps json [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.0-preview.5.22301.12\\Microsoft.NETCore.App.deps.json]\r\n```\r\n\r\nThe code you\u0027re referring to relies on couple of assumptions:\r\n* There\u0027s a single lowest level framework - the \"Root\" - currently this is always the `Microsoft.NETCore.App`\r\n* When the host resolves frameworks it orders them in the `fx_definitions` array from highest to lowest level - the first is always the app (highest) and the last is always the \"root\" (lowest)\r\n\r\nThe ordering is done in the `fx_resolver`, and while a bit complex I guess this line is a good place to point to:\r\nhttps://github.com/dotnet/runtime/blob/5889de5fd2cb72dab4a1cfbdfb35466ec5a45f13/src/native/corehost/fxr/fx_resolver.cpp#L508\r\n",
                                           "updatedAt":  "2022-06-21T10:00:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FPqT2",
                                           "createdAt":  "2022-06-21T13:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "It probably happens because I also use a framework that depends on ``Microsoft.NETCore.App`` and ``Microsoft.AspNetCore.App`` causing it to look for hostpolicy in aspnetcore.\r\n\r\nI have pushed what I did to generate the frameworks which my application that fails uses to github:\r\n\r\n- \u003chttps://github.com/Elskom/Serilog-Installer\u003e (run ``dotnet build -c Release`` and then ``dotnet pack -c Release`` then add ``artifacts\\packages\\Release\\Shipping`` to the nuget feed of a new project)\r\n- \u003chttps://github.com/Elskom/EFCore-Installer\u003e (run ``dotnet build -c Release`` and then ``dotnet pack -c Release`` and then add ``artifacts\\packages\\Release\\Shipping`` to the nuget feed of a new project)\r\n\r\nAfter that in the new project, make sure it has it\u0027s own nuget.config to use for packages have the above directories in it\u0027s \"feeds\". Then add these to the project (after running the generated installers for the bitness of the .NET SDK that is the default):\r\n\r\n```xml\r\n  \u003cSdk Name=\"Serilog.Sdk\" Version=\"6.0.6\" /\u003e\r\n  \u003cSdk Name=\"Microsoft.EntityFrameworkCore.Sdk\" Version=\"6.0.6\" /\u003e\r\n```\r\n\r\nThe reason why I try it this was is due to dotnet store not working for .NET 6+ and I needed a way to share the dependencies between framework dependent applications without having them copied to their output directories so making them into their own shared frameworks was the best option for me.\r\n\r\nHowever in my case the application targets .NET 6 and so all of it\u0027s frameworks are using the 6.0.6 servicing of the default frameworks.",
                                           "updatedAt":  "2022-07-08T14:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOLaN",
                                           "createdAt":  "2022-07-07T19:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Sorry it took me so long...\r\nCan you please share the `runtimeconfig.json` for the app and the custom frameworks?\r\n\r\nOr even better, can you please grab a host trace when it fails? https://github.com/dotnet/runtime/blob/main/docs/design/features/host-tracing.md#trace-routing\r\n(Please note that the host trace contains information about the machine and user, so make sure you\u0027re OK to share it publicly)",
                                           "updatedAt":  "2022-07-07T19:28:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOODr",
                                           "createdAt":  "2022-07-07T19:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I was trying to build it locally but it fails to find matching `Microsoft.DotNet.Build.Tasks.Installers` package. I must admit I don\u0027t understand what the project is trying to do, but it apparently relies on some internal package.",
                                           "updatedAt":  "2022-07-07T19:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GRypV",
                                           "createdAt":  "2022-07-08T14:43:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "That failure was due to the fact I did not pin a specific version of that installers package and so a tool in it would fail to run because it expects 7.0.0 of the runtime (which does not exist in the stable state currently).\r\n\r\nI think I should have pushed an commit to all of those repos that pins it to the last known version that will run with the 6.0.0 runtime.\r\n\r\nEdit: It seems I forgot to push that update for the Serilog installers repo I linked above.",
                                           "updatedAt":  "2022-07-08T14:45:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GR0Ot",
                                           "createdAt":  "2022-07-08T14:50:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Alright pushed update to the Serilog installers, try to ``git pull``. Also version changed on it as well.",
                                           "updatedAt":  "2022-07-08T14:51:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GTxee",
                                           "createdAt":  "2022-07-09T18:43:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think the EF repo is still broken...",
                                           "updatedAt":  "2022-07-09T18:43:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GTyU7",
                                           "createdAt":  "2022-07-09T19:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "You are right, I forgot to commit to it as well (or push).",
                                           "updatedAt":  "2022-07-09T19:06:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GTybI",
                                           "createdAt":  "2022-07-09T19:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "@vitek-karas ok, pushed.",
                                           "updatedAt":  "2022-07-09T19:09:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GYFEV",
                                           "createdAt":  "2022-07-11T18:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks a lot for your help, I was able to repro this.\r\nI created https://github.com/dotnet/runtime/pull/71959 as the in-house repro within our test framework.\r\n\r\nWorkaround is to change the order of framework dependencies in the two frameworks you create - make it put NETCore.App last (not sure if SDK can do that, maybe you would need to add a post-build step to edit the json).",
                                           "updatedAt":  "2022-07-11T18:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GaWyn",
                                           "createdAt":  "2022-07-12T04:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Ok, I tried the workaround and it seems to not have worked.\r\n\r\nThis time when I did:\r\n- Installed https://github.com/Elskom/EFCore-Installer/releases/tag/6.0.6 and add it\u0027s SDK (in github packages) to the project (``\u003cSdk Name=\"[package name]\" Version=\"6.0.6\" /\u003e``).\r\n- Installed https://github.com/Elskom/Serilog-Installer/releases/tag/6.0.6 and add it\u0027s SDK (in github packages) to the project (``\u003cSdk Name=\"[package name]\" Version=\"6.0.6\" /\u003e``).\r\n- Installed https://github.com/Elskom/Remora.Discord-Installer/releases/tag/2022.43.0 and add it\u0027s SDK (in github packages) to the project (``\u003cSdk Name=\"[package name]\" Version=\"2022.43.0\" /\u003e``).\r\n\r\nInto any project (which will reference the AspNetCore framework if it is not referenced) then when I try to run it it will look for the hostpolicy in the AspNetCore framework still for some reason.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eruntimeconfig file\u003c/summary\u003e\r\n\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"net6.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"6.0.0\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"6.0.0\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.EntityFrameworkCore.App\",\r\n        \"version\": \"6.0.6\"\r\n      },\r\n      {\r\n        \"name\": \"Remora.Discord.App\",\r\n        \"version\": \"2022.43.0\"\r\n      },\r\n      {\r\n        \"name\": \"Serilog.App\",\r\n        \"version\": \"6.0.6\"\r\n      }\r\n    ],\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true,\r\n      \"System.Reflection.Metadata.MetadataUpdater.IsSupported\": false,\r\n      \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization\": false\r\n    }\r\n  }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003etrace log\u003c/summary\u003e\r\n\r\n```\r\nTracing enabled @ Tue Jul 12 05:12:01 2022 GMT\r\n--- Invoked apphost [version: 6.0.5, commit hash: 70ae3df4a6f3c92fb6b315afc405edd10ff38579] main = {\r\nH:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.exe\r\n}\r\nRedirecting errors to custom writer.\r\nThe managed DLL bound to this executable is: \u0027MyBot.dll\u0027\r\nUsing global installation location [C:\\Program Files\\dotnet\\] as runtime location.\r\nReading fx resolver directory=[C:\\Program Files\\dotnet\\host\\fxr]\r\nConsidering fxr version=[3.1.26]...\r\nConsidering fxr version=[5.0.17]...\r\nConsidering fxr version=[6.0.0]...\r\nConsidering fxr version=[6.0.1]...\r\nConsidering fxr version=[6.0.2]...\r\nConsidering fxr version=[6.0.5]...\r\nConsidering fxr version=[6.0.6]...\r\nDetected latest fxr version=[C:\\Program Files\\dotnet\\host\\fxr\\6.0.6]...\r\nResolved fxr [C:\\Program Files\\dotnet\\host\\fxr\\6.0.6\\hostfxr.dll]...\r\nLoaded library from C:\\Program Files\\dotnet\\host\\fxr\\6.0.6\\hostfxr.dll\r\nInvoking fx resolver [C:\\Program Files\\dotnet\\host\\fxr\\6.0.6\\hostfxr.dll] hostfxr_main_startupinfo\r\nHost path: [H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.exe]\r\nDotnet path: [C:\\Program Files\\dotnet\\]\r\nApp path: [H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.dll]\r\nTracing enabled @ Tue Jul 12 05:12:01 2022 GMT\r\n--- Invoked hostfxr_main_startupinfo [commit hash: 7cca709db2944a09b4db6ca7b20c457ff260fb5a]\r\nChecking if CoreCLR path exists=[C:\\Program Files\\dotnet\\coreclr.dll]\r\n--- Executing in a native executable mode...\r\nUsing dotnet root path [C:\\Program Files\\dotnet\\]\r\nApp runtimeconfig.json from [H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.dll]\r\nRuntime config is cfg=H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.runtimeconfig.json dev=H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.runtimeconfig.dev.json\r\nAttempting to read runtime config: H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.runtimeconfig.json\r\nAttempting to read dev runtime config: H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.runtimeconfig.dev.json\r\nRuntime config [H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.0\u0027.\r\n--- Resolving FX directory, name \u0027Microsoft.NETCore.App\u0027 version \u00276.0.0\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[6.0.0]\u0027, apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [minor]. Looking for the lowest release greater than or equal version to [6.0.0]\r\nFound version [6.0.6]\r\nApplying patch roll forward from [6.0.6] on release only\r\nInspecting version... [6.0.6]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.AspNetCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.0\u0027.\r\n--- Resolving FX directory, name \u0027Microsoft.AspNetCore.App\u0027 version \u00276.0.0\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[6.0.0]\u0027, apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [minor]. Looking for the lowest release greater than or equal version to [6.0.0]\r\nFound version [6.0.6]\r\nApplying patch roll forward from [6.0.6] on release only\r\nInspecting version... [6.0.6]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- Restarting all framework resolution because the previously resolved framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027 must be re-resolved with the new version \u00276.0.6\u0027, apply_patches=1, version_compatibility_range=patch, roll_to_highest_version=0 .\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- Resolving FX directory, name \u0027Microsoft.NETCore.App\u0027 version \u00276.0.6\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[6.0.6]\u0027, apply_patches=1, version_compatibility_range=patch, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [patch]. Looking for the lowest release greater than or equal version to [6.0.6]\r\nFound version [6.0.6]\r\nApplying patch roll forward from [6.0.6] on release only\r\nInspecting version... [6.0.6]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\\Microsoft.NETCore.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.AspNetCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.0\u0027.\r\n--- Resolving FX directory, name \u0027Microsoft.AspNetCore.App\u0027 version \u00276.0.0\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[6.0.0]\u0027, apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [minor]. Looking for the lowest release greater than or equal version to [6.0.0]\r\nFound version [6.0.6]\r\nApplying patch roll forward from [6.0.6] on release only\r\nInspecting version... [6.0.6]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.6\u0027, apply_patches=1, version_compatibility_range=patch is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- The specified framework \u0027Microsoft.EntityFrameworkCore.App\u0027, version \u00276.0.6\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- Resolving FX directory, name \u0027Microsoft.EntityFrameworkCore.App\u0027 version \u00276.0.6\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[6.0.6]\u0027, apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [minor]. Looking for the lowest release greater than or equal version to [6.0.6]\r\nFound version [6.0.6]\r\nApplying patch roll forward from [6.0.6] on release only\r\nInspecting version... [6.0.6]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6\\Microsoft.EntityFrameworkCore.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6\\Microsoft.EntityFrameworkCore.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6\\Microsoft.EntityFrameworkCore.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6\\Microsoft.EntityFrameworkCore.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6\\Microsoft.EntityFrameworkCore.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- The specified framework \u0027Microsoft.AspNetCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.0\u0027.\r\n--- The specified framework \u0027Remora.Discord.App\u0027, version \u00272022.43.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00272022.43.0\u0027.\r\n--- Resolving FX directory, name \u0027Remora.Discord.App\u0027 version \u00272022.43.0\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[2022.43.0]\u0027, apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [minor]. Looking for the lowest release greater than or equal version to [2022.43.0]\r\nFound version [2022.43.0]\r\nApplying patch roll forward from [2022.43.0] on release only\r\nInspecting version... [2022.43.0]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0\\Remora.Discord.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0\\Remora.Discord.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0\\Remora.Discord.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0\\Remora.Discord.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0\\Remora.Discord.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- The specified framework \u0027Microsoft.AspNetCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.0\u0027.\r\n--- The specified framework \u0027Serilog.App\u0027, version \u00276.0.6\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- Resolving FX directory, name \u0027Serilog.App\u0027 version \u00276.0.6\u0027\r\nMultilevel lookup is true\r\nSearching FX directory in [C:\\Program Files\\dotnet]\r\nAttempting FX roll forward starting from version=\u0027[6.0.6]\u0027, apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, prefer_release=1\r\n\u0027Roll forward\u0027 enabled with version_compatibility_range [minor]. Looking for the lowest release greater than or equal version to [6.0.6]\r\nFound version [6.0.6]\r\nApplying patch roll forward from [6.0.6] on release only\r\nInspecting version... [6.0.6]\r\nChanging Selected FX version from [] to [C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6]\r\nChose FX version [C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6]\r\nRuntime config is cfg=C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6\\Serilog.App.runtimeconfig.json dev=C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6\\Serilog.App.runtimeconfig.dev.json\r\nAttempting to read runtime config: C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6\\Serilog.App.runtimeconfig.json\r\nAttempting to read dev runtime config: C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6\\Serilog.App.runtimeconfig.dev.json\r\nRuntime config [C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6\\Serilog.App.runtimeconfig.json] is valid=[1]\r\n--- The specified framework \u0027Microsoft.NETCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.6\u0027.\r\n--- The specified framework \u0027Microsoft.AspNetCore.App\u0027, version \u00276.0.0\u0027, apply_patches=1, version_compatibility_range=minor is compatible with the previously referenced version \u00276.0.0\u0027.\r\n--- Summary of all frameworks:\r\n     framework:\u0027Microsoft.EntityFrameworkCore.App\u0027, lowest requested version=\u00276.0.6\u0027, found version=\u00276.0.6\u0027, effective reference version=\u00276.0.6\u0027 apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Microsoft.EntityFrameworkCore.App\\6.0.6\r\n     framework:\u0027Remora.Discord.App\u0027, lowest requested version=\u00272022.43.0\u0027, found version=\u00272022.43.0\u0027, effective reference version=\u00272022.43.0\u0027 apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Remora.Discord.App\\2022.43.0\r\n     framework:\u0027Serilog.App\u0027, lowest requested version=\u00276.0.6\u0027, found version=\u00276.0.6\u0027, effective reference version=\u00276.0.6\u0027 apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Serilog.App\\6.0.6\r\n     framework:\u0027Microsoft.NETCore.App\u0027, lowest requested version=\u00276.0.0\u0027, found version=\u00276.0.6\u0027, effective reference version=\u00276.0.6\u0027 apply_patches=1, version_compatibility_range=patch, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.6\r\n     framework:\u0027Microsoft.AspNetCore.App\u0027, lowest requested version=\u00276.0.0\u0027, found version=\u00276.0.6\u0027, effective reference version=\u00276.0.0\u0027 apply_patches=1, version_compatibility_range=minor, roll_to_highest_version=0, folder=C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\r\nExecuting as a framework-dependent app as per config file [H:\\Desktop\\github\\MyBot\\bin\\Release\\net6.0\\MyBot.runtimeconfig.json]\r\n--- Resolving hostpolicy.dll version from deps json [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.deps.json]\r\nResolved version  from dependency manifest file [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.deps.json]\r\nDependency manifest C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\\Microsoft.AspNetCore.App.deps.json does not contain an entry for runtime.win-x64.Microsoft.NETCore.DotNetHostPolicy\r\nThe expected hostpolicy.dll directory is [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6]\r\nThe hostpolicy.dll was not found in [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6]\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\u0027.\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.6\u0027.\r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-12T05:26:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gcq5W",
                                           "createdAt":  "2022-07-12T15:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The workaround is in the SDKs - so in your case for example Serilog.App. It\u0027s runtimeconfig needs to list the `Microsoft.NETCore.App` as the last dependency (and all of the others need to do that as well). I tried this locally with the original repro and it \"Fixed\" it.",
                                           "updatedAt":  "2022-07-12T15:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GdG8A",
                                           "createdAt":  "2022-07-12T17:17:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Perhaps my attempt to workaround it was not matching what you did. Mind if I can see what you did different to fix it?",
                                           "updatedAt":  "2022-07-12T17:17:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GgLX3",
                                           "createdAt":  "2022-07-13T06:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I have just now tested a locally built hostfxr with these changes with success to my application that I could not fix locally with this code change:\r\n\r\n![image](https://user-images.githubusercontent.com/15173749/178670721-0be7e147-bb6a-4c10-b12e-4764fad4f202.png)\r\n\r\nLooks like ``get_root_framework`` was another option that can fix it ironically.",
                                           "updatedAt":  "2022-07-13T06:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gg5S8",
                                           "createdAt":  "2022-07-13T10:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Regarding the workaround: I changed the `Microsoft.EntityFrameworkCore.App.runtimeconfig.json` (the one which is installed into Program Files by your installers) to look like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"net6.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"6.0.0\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"6.0.0\"\r\n      }\r\n    ],\r\n    \"configProperties\": {\r\n      \"System.Reflection.Metadata.MetadataUpdater.IsSupported\": false,\r\n      \"System.Reflection.NullabilityInfoContext.IsSupported\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSo moving the `Microsoft.NETCore.App` reference as last.\r\nI changed the `Serilog.App` the same way.\r\n\r\nWith these the app launches without any issues.\r\n\r\nSide note: If you\u0027re planning to expose these installers publicly I would recommend you rename the frameworks. Currently they look like official Microsoft or Serilog installers which is at least \"misleading\".",
                                           "updatedAt":  "2022-07-13T10:07:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gu2vA",
                                           "createdAt":  "2022-07-18T02:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "\u003e Workaround is to change the order of framework dependencies in the two frameworks you create - make it put NETCore.App last (not sure if SDK can do that, maybe you would need to add a post-build step to edit the json).\r\n\r\nAlright I found a way to have the installers for the frameworks to include the patched runtimeconfig files by:\r\n- Having the sfxproj file that builds the runtime pack manually import ``Sdk.props`` and ``Sdk.targets`` from ``Microsoft.NET.Sdk``.\r\n- After importing ``Sdk.targets`` override ``GenerateBuildRuntimeConfigurationFiles`` that basically copies a manually maintained runtimeconfig.json file:\r\n```xml\r\n  \u003c!-- override the version specified in Microsoft.NET.Sdk.targets --\u003e\r\n  \u003c!-- Work around https://github.com/dotnet/runtime/issues/71027 by adding NETCore.App last in the runtimeconfig file. --\u003e\r\n  \u003c!--\r\n      There is a problem with the automatically generated runtimeconfig.json\r\n      files where it is possible that it can cause the apphost to look for hostpolicy\r\n      in the wrong framework directory.\r\n\r\n      As such we must provide our own runtimeconfig file that gets copied to the\r\n      output directory that is manually maintained.\r\n  --\u003e\r\n  \u003c!-- Caution: Dangerous Hack. --\u003e\r\n  \u003cTarget\r\n    Name=\"GenerateBuildRuntimeConfigurationFiles\"\r\n    Condition=\"\u0027$(GenerateRuntimeConfigurationFiles)\u0027 == \u0027true\u0027\"\r\n    BeforeTargets=\"CopyFilesToOutputDirectory\"\u003e\r\n    \u003cCopy\r\n      SourceFiles=\"$(MSBuildThisFileDirectory)runtimeconfig.json\"\r\n      SkipUnchangedFiles=\"true\"\r\n      DestinationFiles=\"$(ProjectRuntimeConfigFilePath)\" /\u003e\r\n    \u003c!--\r\n        For some reason copy creates 2 files instead of just the\r\n        copied file with the new name above.\r\n    --\u003e\r\n    \u003cDelete Files=\"$(IntermediateOutputPath)runtimeconfig.json\" /\u003e\r\n  \u003c/Target\u003e\r\n```\r\n\r\nI consider this to be dangerous as it is possible for one to forget to update it manually.\r\n\r\n\u003e Side note: If you\u0027re planning to expose these installers publicly I would recommend you rename the frameworks. Currently they look like official Microsoft or Serilog installers which is at least \"misleading\".\r\n\r\nYeah, those names of the frameworks was to demonstrate the issue.",
                                           "updatedAt":  "2022-07-18T03:10:34Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "[AppHost] Don’t assume that last framework in runtimeconfig list contains hostpolicy.dll",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71282",
        "createdAt":  "2022-06-25T16:50:26Z",
        "number":  71282,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODOl-gA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lbargaoanu",
                                            "createdAt":  "2022-06-28T06:53:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vuplea",
                                            "createdAt":  "2022-06-28T07:58:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexmustata19",
                                            "createdAt":  "2022-06-28T08:38:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlvinStanescu",
                                            "createdAt":  "2022-06-28T08:50:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomihbk",
                                            "createdAt":  "2022-07-04T21:54:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gabriela-lungu-uip",
                                            "createdAt":  "2022-07-08T08:59:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamJongenelen",
                                            "createdAt":  "2022-07-12T12:43:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulomorgado",
                                            "createdAt":  "2022-07-25T22:00:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timconner",
                                            "createdAt":  "2022-08-10T17:55:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snechaev",
                                            "createdAt":  "2022-08-15T09:03:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iq2luc",
                                            "createdAt":  "2022-08-30T15:30:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2022-10-26T02:55:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "breadnone",
                                            "createdAt":  "2022-10-26T03:10:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2022-11-20T05:10:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batzen",
                                            "createdAt":  "2022-11-30T17:22:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "garrynewman",
                                            "createdAt":  "2023-01-29T08:33:41Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "garrynewman",
                                            "createdAt":  "2023-01-29T08:33:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Forge36",
                                            "createdAt":  "2023-05-22T20:31:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennyTK",
                                            "createdAt":  "2023-06-10T03:13:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nblackburn77",
                                            "createdAt":  "2023-07-06T10:58:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OptiStrat",
                                            "createdAt":  "2023-08-04T16:25:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2023-08-23T19:10:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-09-26T18:36:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "n2029-ndensan",
                                            "createdAt":  "2023-10-30T02:29:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "suikabyte",
                                            "createdAt":  "2023-12-04T06:21:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JLEYDET",
                                            "createdAt":  "2023-12-07T20:05:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "admin-ndensan",
                                            "createdAt":  "2023-12-27T23:31:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2024-01-09T23:49:59Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2024-05-09T11:08:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2024-05-17T09:58:42Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "gerhard17",
                                            "createdAt":  "2024-05-30T12:23:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mus65",
                                            "createdAt":  "2024-07-10T19:01:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "osmedd",
                                            "createdAt":  "2024-08-08T19:18:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevin0x90",
                                            "createdAt":  "2024-08-19T21:25:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gerhard17",
                                            "createdAt":  "2024-11-23T12:48:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trj87",
                                            "createdAt":  "2024-11-26T09:09:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2025-08-19T02:38:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Suchiman",
                                            "createdAt":  "2025-09-05T08:01:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2025-09-05T08:01:08Z"
                                        }
                                    ],
                          "totalCount":  39
                      },
        "updatedAt":  "2024-12-16T23:21:47Z",
        "body":  "Today, we support two scenarios quite well:\r\n\r\n- FDD: App (with all its dependencies) depends on shared globally-installed runtime\r\n- SCD: App (with all its dependencies) includes the required runtimes (possibly trimmed).\r\n\r\nSingle file is just a variation on those themes.\r\n\r\nThe scenario we are missing:\r\n\r\n- Suite of apps share locally-installed runtimes and libraries.\r\n\r\nIt\u0027s intended as a mid-point between FDD and SCD for a software suite. It\u0027s like FDD since none of the apps are self-contained, but like SCD since the apps don\u0027t rely on a globally installed runtime. Perhaps we could call it \"LSD: Locally Shared Deployment\". I\u0027m certain people would use LSD if we delivered it to them.\r\n\r\nThe shared library scenario is similar, in that many software suites use a common set of libraries across apps. Those libraries can be single-instanced (essentially a third-party framework) in a location that is local to the suite. This is not a proposal for the GAC.\r\n\r\nThis proposal has a soft bias to desktop client apps. However, it could equally apply to hosted server apps, even in containers.\r\n\r\nSpecific use cases:\r\n\r\n- Finally provide a [replacement](https://github.com/dotnet/sdk/issues/24752) for [`dotnet store`](https://github.com/dotnet/sdk/issues/14201).\r\n- [Shared libraries with COM](https://twitter.com/gcaughey/status/1250530691743387648)\r\n- Add-ins whose dependencies (at least in part) are guaranteed to be satisfied by the host app.\r\n- This has come up many times within Microsoft, from various teams.\r\n\r\n@elinor-fung @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl9G63g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FhLHj",
                                           "createdAt":  "2022-06-25T16:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nToday, we support two scenarios quite well:\r\n\r\n- FDD: App (with all its dependencies) depends on shared globally-installed runtime\r\n- SCD: App (with all its dependencies) includes the required runtimes (possibly trimmed).\r\n\r\nSingle file is just a variation on those themes.\r\n\r\nThe scenario we are missing:\r\n\r\n- Suite of apps share locally-installed runtimes and libraries.\r\n\r\nIt\u0027s intended as a mid-point between FDD and SCD for a software suite. It\u0027s like FDD since none of the apps are self-contained, but like SCD since the apps don\u0027t rely on a globally installed runtime. Perhaps we could call it \"LSD: Locally Shared Deployment\". I\u0027m certain people would use LSD if we delivered it to them.\r\n\r\nThe shared library scenario is similar, in that many software suites use a common set of libraries across apps. Those libraries can be single-instanced (essentially a third-party framework) in a location that is local to the suite. This is not a proposal for the GAC.\r\n\r\nThis proposal has a soft bias to desktop client apps. However, it could equally apply to hosted server apps, even in containers.\r\n\r\nSpecific use cases:\r\n\r\n- Finally provide a [replacement](https://github.com/dotnet/sdk/issues/24752) for [`dotnet store`](https://github.com/dotnet/sdk/issues/14201).\r\n- [Shared libraries with COM](https://twitter.com/gcaughey/status/1250530691743387648)\r\n- This has come up many times within Microsoft, from various teams.\r\n\r\n@elinor-fung @vitek-karas \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-25T16:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhRE4",
                                           "createdAt":  "2022-06-25T19:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuz-3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2022-06-25T20:04:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snechaev",
                                                                               "createdAt":  "2022-08-15T09:05:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevin0x90",
                                                                               "createdAt":  "2024-08-19T21:26:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "I\u0027ve been dreaming about this for a while now - i wrote a rough proposal for how things could be designed in regards to sharing between projects and how it\u0027s deployed - see this comment and the resulting discussion - i think we discovered some important pain points there:\r\nhttps://github.com/dotnet/runtime/issues/53834#issuecomment-856775082",
                                           "updatedAt":  "2022-06-25T19:32:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhSTC",
                                           "createdAt":  "2022-06-25T20:05:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuz-5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NickCraver",
                                                                               "createdAt":  "2022-06-26T01:04:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevin0x90",
                                                                               "createdAt":  "2024-08-19T21:26:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "richlander",
                                           "body":  "Thanks for all the design thinking already. Happy to host a call(s) on this at some point with anyone who wants to participate.",
                                           "updatedAt":  "2022-06-25T20:05:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhSsn",
                                           "createdAt":  "2022-06-25T20:18:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjvIKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2022-06-25T20:45:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MeikTranel",
                                           "body":  "i\u0027ll be happy to participate - since y\u0027all are already used to thick potato accents i don\u0027t have to be all that embarrassed.\r\n![EyebrowsAdventureTimeGIF](https://user-images.githubusercontent.com/6466560/175789213-e87e60d2-3db5-4167-8189-81f5844f0df9.gif)\r\n\r\nMaybe we should spin up a design proposal PR to get a grip of what we (as in maintainers and the community) are actually looking for and what is a non-goal - i think i have a good understanding but i\u0027m honestly a little overwhelmed with the complexity of the runtime components involved.\r\n\r\n",
                                           "updatedAt":  "2022-06-25T20:18:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhTsa",
                                           "createdAt":  "2022-06-25T20:50:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "I never met a potato i didn\u0027t like!\n\nI will start a design discussion over at dotnet/designs shortly. We can start with the basics and go from there.\n\nThanks for the support!",
                                           "updatedAt":  "2022-06-25T20:50:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhT5Z",
                                           "createdAt":  "2022-06-25T20:56:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjvMNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2022-06-25T21:36:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rickbrew",
                                           "body":  "LSD might not be the best acronym? 😂 ",
                                           "updatedAt":  "2022-06-25T20:56:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhVOd",
                                           "createdAt":  "2022-06-25T21:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn8Lhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "rickbrew",
                                                                               "createdAt":  "2022-06-25T21:45:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Suchiman",
                                                                               "createdAt":  "2024-03-29T16:24:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "breadnone",
                                                                               "createdAt":  "2024-07-01T19:12:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "richlander",
                                           "body":  "And people say Microsoft is bad at naming! This naming is so good, it\u0027s psychedelic!",
                                           "updatedAt":  "2022-06-25T21:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhdLR",
                                           "createdAt":  "2022-06-26T02:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Splitwirez",
                                           "body":  "Never thought I\u0027d see a .NET discussion about getting high on marketing...lol\r\n\r\nJokes aside...just wanted to share my two cents on this: It\u0027d be great for something I\u0027ve been working on...granted, I have my doubts I\u0027d have the luxury of moving runtimes (.NET Core 3.1 is enough of a gamble under WINE and Windows 7 SP1 without ESUs as-is)...but hey, I can dream. Hopefully others who may have use for this will be more fortunate.",
                                           "updatedAt":  "2022-06-26T02:09:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fhjgz",
                                           "createdAt":  "2022-06-26T05:54:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH3gXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2022-06-26T06:04:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2023-09-26T18:38:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "normj",
                                           "body":  "As someone that has abused `dotnet store` for more than it was ever meant I would be very excited about this. Happy to participate in design discussions.\r\n\r\nA big requirement I would need is configuring the location of the shared libraries at runtime of the LSD app. For our use of `dotnet store` we configure the location with the `DOTNET_SHARED_STORE` environment variable.\r\n\r\nObviously I would like the ability to R2R for a particular runtime the shared assemblies. \r\n",
                                           "updatedAt":  "2022-06-26T05:54:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FiDpE",
                                           "createdAt":  "2022-06-26T14:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "@normj -- does that get set from a custom host today?",
                                           "updatedAt":  "2022-06-26T14:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FiTg6",
                                           "createdAt":  "2022-06-26T19:16:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "normj",
                                           "body":  "\u003e @normj -- does that get set from a custom host today?\r\n\r\nBasically yes. In AWS Lambda there is a host that is in charge of setting up the compute environment for the .NET code similar to a container and part of that host\u0027s job is setting user supplied environment variables.  ",
                                           "updatedAt":  "2022-06-26T19:16:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FiU7f",
                                           "createdAt":  "2022-06-26T19:41:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "The big distinction is whether those ENVs are set before or after the the runtime is loaded.\r\n\r\n`DOTNET_STARTUP_HOOKS` is also related, if managed code needs to be used: https://github.com/dotnet/runtime/blob/main/docs/design/features/host-startup-hook.md\r\n\r\nThat\u0027s not suggesting a specific design direction, but cataloging interesting options.",
                                           "updatedAt":  "2022-06-26T19:41:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FiYFL",
                                           "createdAt":  "2022-06-26T20:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "normj",
                                           "body":  "For my use case I just need support for the ENV being set before the .NET runtime is started. I could see some value in other use cases for setting it at the AssemblyLoadContext level.",
                                           "updatedAt":  "2022-06-26T20:39:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FibuJ",
                                           "createdAt":  "2022-06-26T21:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCjxZtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "normj",
                                                                               "createdAt":  "2022-06-26T23:05:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "richlander",
                                           "body":  "Ya. That all makes sense. That\u0027s well within the bounds of what I have in mind.",
                                           "updatedAt":  "2022-06-26T21:48:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HL6rn",
                                           "createdAt":  "2022-07-25T16:17:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Related: https://github.com/dotnet/msbuild/issues/3996",
                                           "updatedAt":  "2022-07-25T16:17:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KWLsl",
                                           "createdAt":  "2022-09-14T21:39:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsRe-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2022-09-15T09:39:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Might be beneficial for SDK - since it basically already ships with the runtime. We could get rid of every process being `dotnet.exe` and actually use apphosts to name them appropriately.",
                                           "updatedAt":  "2022-09-14T21:39:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KWYvg",
                                           "createdAt":  "2022-09-14T22:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "\u003e I\u0027m certain people would use LSD if we delivered it to them.\r\n\r\nHahaha, sure thing. Imagine the news headlines 🤣 ",
                                           "updatedAt":  "2022-09-14T22:57:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MRtIt",
                                           "createdAt":  "2022-10-15T09:58:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCt5mPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snechaev",
                                                                               "createdAt":  "2022-10-15T10:53:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liesauer",
                                           "body":  "\u003e I\u0027ve been dreaming about this for a while now - i wrote a rough proposal for how things could be designed in regards to sharing between projects and how it\u0027s deployed - see this comment and the resulting discussion - i think we discovered some important pain points there: [#53834 (comment)](https://github.com/dotnet/runtime/issues/53834#issuecomment-856775082)\r\n\r\nyou can check this out on how NetBeauty2 shares runtimes between apps, https://github.com/nulastudio/NetBeauty2#shared-runtime-structure",
                                           "updatedAt":  "2022-10-15T09:58:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W1d4F",
                                           "createdAt":  "2023-03-06T19:47:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eabramczyk-mxtr",
                                           "body":  "Is this going to go on the roadmap for .NET 8? Per normj in this issue discussion the shared pre-compiled library functionality of .NET Core 3.1 was extremely valuable for AWS Lambda Layers for .NET and greatly improved my company\u0027s code\u0027s cold start times in a serverless environment, would love to have this functionality back in this LTS cycle.",
                                           "updatedAt":  "2023-03-06T19:47:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W12lZ",
                                           "createdAt":  "2023-03-06T20:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC__0OA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nblackburn77",
                                                                               "createdAt":  "2023-07-06T11:00:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "At this moment, I don\u0027t think we have a complete design for a feature set here, so I can\u0027t commit to .NET 8.\r\n\r\nOnce we have a feature design, I think we can discuss planning milestones.",
                                           "updatedAt":  "2023-03-06T20:45:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jm0PC",
                                           "createdAt":  "2023-08-09T11:05:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OptiStrat",
                                           "body":  "This would be a great option for a suite of xcopy-deployed WinUI apps, which could then share C# projections.",
                                           "updatedAt":  "2023-08-09T11:05:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53fKiB",
                                           "createdAt":  "2024-03-18T18:34:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "japj",
                                           "body":  "Is there any work ongoing to finish a design document? \r\nWe’ve been running into this issue and I would like to understand where dotnet is heading before colleagues start implementing their own “solution”.",
                                           "updatedAt":  "2024-03-18T18:34:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53gxvH",
                                           "createdAt":  "2024-03-18T21:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "This is in the backlog, but it has not reached planning priority yet. I would not expect anything for .NET 9.",
                                           "updatedAt":  "2024-03-18T21:41:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Xz_1E",
                                           "createdAt":  "2024-12-16T22:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrarnoldus",
                                           "body":  "It seems this was implemented in .NET 9: https://learn.microsoft.com/en-us/dotnet/core/deploying/deploy-with-cli#configure-net-install-search-behavior",
                                           "updatedAt":  "2024-12-16T22:29:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X0bre",
                                           "createdAt":  "2024-12-16T23:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEALwnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "trj87",
                                                                               "createdAt":  "2024-12-17T05:33:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2024-12-17T18:12:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevin0x90",
                                                                               "createdAt":  "2024-12-25T20:02:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "richlander",
                                           "body":  "That\u0027s part of it. That\u0027s the runtime. We\u0027re still talking about the shared library scenario.",
                                           "updatedAt":  "2024-12-16T23:21:46Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Enable shared libraries and runtimes for a software suite",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71283",
        "createdAt":  "2022-06-25T16:55:49Z",
        "number":  71283,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-24T17:52:33Z",
        "body":  "There was a request on our [host improvements post](https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements) to [localize our host error messages](https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/#comment-15950) (specifically relating to the download the runtime UX). That sounds like a good idea. We should consider it.\r\n\r\n@elinor-fung @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORhFL6w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FhLUl",
                                           "createdAt":  "2022-06-25T16:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere was a request on our [host improvements post](https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements) to [localize our host error messages](https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/#comment-15950) (specifically relating to the download the runtime UX). That sounds like a good idea. We should consider it.\r\n\r\n@elinor-fung @vitek-karas \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-25T16:55:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fk7wS",
                                           "createdAt":  "2022-06-27T12:47:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@elinor-fung did investigation on this topic and wrote some ideas here: https://github.com/dotnet/runtime/blob/main/docs/design/features/localization-options.md",
                                           "updatedAt":  "2022-06-27T12:47:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F9J29",
                                           "createdAt":  "2022-07-04T10:39:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "I have often heard that we want to keep the host relatively small (in size). With the localization option, I think the executable becomes significantly larger.\r\n\r\nIs this planned only for the \"normal\" host or also for the singlefilehost?",
                                           "updatedAt":  "2022-07-04T10:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F-JtW",
                                           "createdAt":  "2022-07-04T15:06:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Right now there\u0027s not specific plan - but the customer ask is actually mostly about the `apphost`, so the one which is very size sensitive. I don\u0027t know what the solution should be... maybe we will need a way in the SDK to determine the language up front, so that if you build the app for Spanish only, then it will only carry Spanish error messages and nothing else.\r\n\r\nThat said, the errors in the apphost itself are only very few - most of the logic and thus errors are in the `hostfxr` and `hostpolicy` components which are shared. So for framework dependent apps, it could make sense to include all languages and just pick the right one at runtime. But then self-contained apps are unnecessarily larger... and so on.\r\n\r\nWe could also consider localizing just the UI for now, as that\u0027s where this ask comes from most frequently. So Windows-only and just the text which is shown in the dialog box.",
                                           "updatedAt":  "2022-07-04T15:06:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GECno",
                                           "createdAt":  "2022-07-05T20:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "That thinking makes sense to me.\n\nI am wondering if we want to start with the (shared) dotnet host localization topic first. That would help developers and is still worthwhile.\n\nWe might approach the apphost localization topic at the same time as updating the UI. Our approach there might influence the technical localization plan.\n\nI am wondering if we end up with a bare bones experience and then a fancy one and then let people choose. I have this feeling that it is going to be very hard to provide a fancy experience that works for all scenarios.",
                                           "updatedAt":  "2022-07-05T20:22:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GEHMB",
                                           "createdAt":  "2022-07-05T20:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Multiplying hosts is likely to be pretty expensive, partially because once we scale past one or two we\u0027ll have to build dedicated infrastructure to handle the building and publishing (not to mention testing).",
                                           "updatedAt":  "2022-07-05T20:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GEUvr",
                                           "createdAt":  "2022-07-05T21:55:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Agreed on that. We need to spend some more time thinking about how to deliver a better experience.",
                                           "updatedAt":  "2022-07-05T21:55:04Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Localize apphost error page",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71286",
        "createdAt":  "2022-06-25T17:17:30Z",
        "number":  71286,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-25T17:21:58Z",
        "body":  "Various versioning scenarios remain too hard with .NET. We should find a way to resolve the.\r\n\r\nWe designed some solutions recently: https://github.com/dotnet/designs/blob/main/accepted/2022/version-selection.md. We should decide which of these to implement next.\r\n\r\nWe were recently discussing some related problems:\r\n\r\n- `dotnet test` has complicated versioning semantics. We need to do some combination of documenting and resolving that.\r\n- It\u0027s hard to test an unmodified app on multiple runtime versions.\r\n- Virtual environment providers publish multiple (many!) .NET SDK versions for `global.json` compatibility. We need to help them deliver a simpler experience.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORZV2Ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FhMJn",
                                           "createdAt":  "2022-06-25T17:17:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-25T17:17:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhMOS",
                                           "createdAt":  "2022-06-25T17:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Here\u0027s a related conversation:\r\n\r\n\u003e Tried some dirty tricks and the following seems to work. Make your test project have the lowest TFM you want to work with - so for example `net6.0`. Then run it with `dotnet test /p:RollForward=disable /p:RuntimeFrameworkVersion=6.0.2` - this will force the test to run on the specified version of `NETCore.App`. Note that if you want to run against a different version you have to rebuild the test (changing the command line will not force a rebuild) so typically `dotnet clean` and then again. This works across major versions, meaning this works as well: `dotnet test /p:RollForward=disable /p:RuntimeFrameworkVersion=7.0.0-preview.5.22301.12`.\r\n\r\nIt\u0027s pretty easy to conclude that this is not a great solution. Hence \"dirty tricks\".\r\n\r\nRelated to: https://github.com/dotnet/sdk/issues/11613",
                                           "updatedAt":  "2022-06-25T21:48:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhMOs",
                                           "createdAt":  "2022-06-25T17:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nVarious versioning scenarios remain too hard with .NET. We should find a way to resolve the.\r\n\r\nWe designed some solutions recently: https://github.com/dotnet/designs/blob/main/accepted/2022/version-selection.md. We should decide which of these to implement next.\r\n\r\nWe were recently discussing some related problems:\r\n\r\n- `dotnet test` has complicated versioning semantics. We need to do some combination of documenting and resolving that.\r\n- It\u0027s hard to test an unmodified app on multiple runtime versions.\r\n- Virtual environment providers publish multiple (many!) .NET SDK versions for `global.json` compatibility. We need to help them deliver a simpler experience.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-25T17:19:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fk7FO",
                                           "createdAt":  "2022-06-27T12:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Just want to make it clear that the \"dirty tricks\" as per https://github.com/dotnet/runtime/issues/71286#issuecomment-1166328722 actually rebuild the app - so even cleanup of that experience would not help with the requirement to test unmodified app on multiple runtimes.",
                                           "updatedAt":  "2022-06-27T12:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FlXYT",
                                           "createdAt":  "2022-06-27T14:25:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Ah. Poor wording on my part. I meant unmodified in the sense of source (primarily the project file). Not having to re-build would also be nice, but not what I meant.",
                                           "updatedAt":  "2022-06-27T14:25:40Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Improve host version selection semantics",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71287",
        "createdAt":  "2022-06-25T17:59:35Z",
        "number":  71287,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOClLfUg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lbussell",
                                            "createdAt":  "2022-06-27T16:26:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichaelSimons",
                                            "createdAt":  "2022-07-05T13:29:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-03T21:06:07Z",
        "body":  "Today, all of our host error messages send you to the Microsoft download site.\r\n\r\nIn some scenarios, that\u0027s both unfriendly and might not be the right end-user guidance. The solution is not immediately clear since the app may have been built with a Microsoft-built SDK and run on a Red Hat-built runtime (for example), while the host is a separate asset that doesn\u0027t change once built.\r\n\r\nWe should discuss this and see if there are options to explore. It is somewhat similar to https://github.com/dotnet/sdk/pull/25935.\r\n\r\n@elinor-fung @vitek-karas @distro-maintainers",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUaEpRQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FhNv3",
                                           "createdAt":  "2022-06-25T17:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nToday, all of our host error messages send you to the Microsoft download site.\r\n\r\nIn some scenarios, that\u0027s both unfriendly and might not be the right end-user guidance. The solution is not immediately clear since the app may have been built with a Microsoft-built SDK and run on a Red Hat-built runtime (for example), while the host is a separate asset that doesn\u0027t change once built.\r\n\r\nWe should discuss this and see if there are options to explore. It is somewhat similar to https://github.com/dotnet/sdk/pull/25935.\r\n\r\n@elinor-fung @vitek-karas @distro-maintainers\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-25T17:59:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FhOLh",
                                           "createdAt":  "2022-06-25T18:10:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "@dotnet/distro-maintainers",
                                           "updatedAt":  "2022-06-25T18:10:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F9KeG",
                                           "createdAt":  "2022-07-04T10:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e Today, all of our host error messages send you to the Microsoft download site.\r\n\r\nHow about redirecting to GitHub (for non MSFT-builds)?",
                                           "updatedAt":  "2022-07-04T10:41:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F-Imz",
                                           "createdAt":  "2022-07-04T15:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClOUBw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omajid",
                                                                               "createdAt":  "2022-07-04T19:07:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmitche",
                                                                               "createdAt":  "2022-07-05T15:01:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2022-07-05T17:01:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think it would make sense for the source build to be able to customize the link - so distro maintainer could decide where to point the URL. Just like distro maintainers effectively create their own RID and add it to the system.\r\n\r\n(That is ignoring the technical side, I have no idea how to do that).",
                                           "updatedAt":  "2022-07-04T15:01:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GC5_1",
                                           "createdAt":  "2022-07-05T15:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mmitche",
                                           "body":  "\u003e I think it would make sense for the source build to be able to customize the link - so distro maintainer could decide where to point the URL. Just like distro maintainers effectively create their own RID and add it to the system.\r\n\u003e \r\n\u003e (That is ignoring the technical side, I have no idea how to do that).\r\n\r\n@vitek-karas There are currently conversations going on in https://github.com/dotnet/sdk/pull/25935/files#diff-9da24614831c308827a1ae533ffea392c97638c261dd42bd0f5226baa136d16eR24 around addition of an \"OfficialBuilder\" switch, which would be a way for organizations (including Microsoft) to add build logic specific to them in shared code.",
                                           "updatedAt":  "2022-07-05T15:03:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDacl",
                                           "createdAt":  "2022-07-05T17:06:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "\u003e How about redirecting to GitHub (for non MSFT-builds)?\r\n\r\nThat\u0027s actually not solving the primary problem. This isn\u0027t \"non-MSFT\" but \"someone else\". In the case, of Red Hat builds, it wouldn\u0027t serve any purpose to point to GitHub builds.\r\n\r\nThere is also the question of what should happen if someone just builds .NET from source (not Red Hat, but an arbitrary person). I\u0027m not convinced that problem is worth solving.\r\n\r\n\u003e I think it would make sense for the source build to be able to customize the link \r\n\r\nYes. That\u0027s what I\u0027m thinking to.\r\n\r\n@omajid I assume this is of interest to you. I\u0027m guessing that your link would primarily link to documentation or do you have another idea in mind?",
                                           "updatedAt":  "2022-07-05T17:06:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDcea",
                                           "createdAt":  "2022-07-05T17:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClOmyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2022-07-05T17:30:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "We could suggest the user to install the runtime/sdk package.\r\nWe have agreed on naming for these packages in https://docs.microsoft.com/en-us/dotnet/core/distribution-packaging.",
                                           "updatedAt":  "2022-07-05T17:16:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDfJ9",
                                           "createdAt":  "2022-07-05T17:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "Should we just create an alternative message for \"package-style acquisition\" and then figure out how to conditionalize it the best way?",
                                           "updatedAt":  "2022-07-05T17:30:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gguep",
                                           "createdAt":  "2022-07-13T09:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Yes, we can print a message that requests the user to install the `dotnet-sdk-x.y` or `dotnet-runtime-x.y` package using the package manager.",
                                           "updatedAt":  "2022-07-13T09:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Grh0i",
                                           "createdAt":  "2022-07-15T18:49:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "I was just looking at this post: https://devblogs.microsoft.com/dotnet/dotnet-apphost-improvements/\r\n\r\nThere are a couple variations of the following message, but its good enough to just focus on this one:\r\n\r\n```bash\r\nYou must install or update .NET to run this application.\r\n\r\nApp: C:\\apps\\helloworld\\helloworld.exe\r\nArchitecture: x64\r\nFramework: \u0027Microsoft.AspNetCore.App\u0027, version \u00277.0.0-preview.4.22251.1\u0027 (x64)\r\n.NET location: C:\\Program Files\\dotnet\r\n\r\nThe following frameworks were found:\r\n  5.0.17 at [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\r\nLearn about framework resolution:\r\nhttps://aka.ms/dotnet/app-launch-failed\r\n\r\nTo install missing framework, download:\r\nhttps://aka.ms/dotnet-core-applaunch?framework=Microsoft.AspNetCore.App\u0026framework_version=7.0.0-preview.4.22251.1\u0026arch=x64\u0026rid=win10-x64\r\n```\r\n\r\nThere are two MS links there. I\u0027m going to ignore the help message but focus on the last one.\r\n\r\nHere\u0027s a proposal on what it could say:\r\n\r\n```bash\r\nTo install missing framework, install: dotnet-aspnet-7.0\r\n```\r\n\r\nThe technical problem is that this message is in the apphost. For the most part, people are going to use the Microsoft-build apphost. It doesn\u0027t make sense from a customer standpoint to target a source-build apphost vs a Microsoft one to get this message, particularly related to portable Linux targeting. That doesn\u0027t suggest that there should be no source-build apphost but that\u0027s really unrelated.\r\n\r\nThat makes me think that the following message would be better, at least within the MS-built *Linux* apphost:\r\n\r\n```bash\r\nInstall the following package (if available): \r\ndotnet-aspnet-7.0\r\n\r\nOtherwise, download:\r\nhttps://aka.ms/dotnet-core-applaunch?framework=Microsoft.AspNetCore.App\u0026framework_version=7.0.0-preview.4.22251.1\u0026arch=x64\u0026rid=win10-x64\r\n```\r\n\r\nThis approach would require a mapping between framework and package. That seems reasonable. Yes?\r\n\r\nSource-build could omit the download link or not.\r\n\r\nGood?\r\n\r\n",
                                           "updatedAt":  "2022-07-15T18:49:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GrjVc",
                                           "createdAt":  "2022-07-15T18:59:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e This approach would require a mapping between framework and package.\r\n\r\nThis would have to be hardcoded in the apphost:\r\n* Would only work for the frameworks which we knew about when releasing the apphost (if we or somebody else adds frameworks later on, this would not work)\r\n* Can we confidently create the mapping? Meaning, are the package names the same across all Linux flavors/package managers?\r\n\r\nHonestly the apphost is the least flexible component in the system - what if we simply change the wording to simply say something like \"Go to this page: link\" - and the web could provide the package mapping and so on. It\u0027s much easier to update the page.\r\n\r\nOn the other hand this might not be good enough for source build.",
                                           "updatedAt":  "2022-07-15T18:59:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GrkVY",
                                           "createdAt":  "2022-07-15T19:04:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e For the most part, people are going to use the Microsoft-build apphost. \r\n\r\nThe people who are using the Microsoft-built apphost are likely going to run on Microsoft-built runtime.\r\n\r\nI do not think it makes sense to optimize for mixing and matching bits from different .NET distros. It gets complex.",
                                           "updatedAt":  "2022-07-15T19:04:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Grmad",
                                           "createdAt":  "2022-07-15T19:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "We could start by making this proposal source-build only.\r\n\r\nA perfect scenario is global tools. That\u0027s where this experience would be useful.",
                                           "updatedAt":  "2022-07-15T19:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RNjPn",
                                           "createdAt":  "2022-12-22T07:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tryashtar",
                                           "body":  "Hi, I wanted to comment on #71993 / #3816, but those were both locked. Let me know if there is a better place.\r\n\r\nI really don\u0027t like the experience of just dumping the user on a webpage. When my first experience with opening a program is that, I seriously question whether I even want to use the thing if I have to jump through hoops first.\r\n\r\nIf the program needs to download and install the runtime, it should ask you permission to do it itself.\r\n\r\nAs it stands, *every* user\u0027s *first impression* of .NET software is it assigning them homework. They have no idea what this website is, what all the different versions mean, why they can\u0027t just click yes and start their original program. I really love making things with .NET but my users are constantly asking me \"so what\u0027s this thing it wants me to download?\" and it\u0027s not leaving a very good first impression.\r\n\r\nThanks for all your work",
                                           "updatedAt":  "2022-12-22T16:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RoSlF",
                                           "createdAt":  "2023-01-03T08:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@tryashtar not sure which version you\u0027re using, we\u0027ve made some improvements in this area relatively recently. The UI should be better (no fuzziness, nicer dialog, ...) and the website should now redirect directly to the correct download.\r\n\r\nThere are technical difficulties in adding the auto-install functionality - for one it\u0027s actually quite a lot of code to do that and every app would have to carry that code with it (so size is impacted).\r\n\r\nAlso - I don\u0027t think the app itself should act like an installer. The fact that .NET Framework apps behave this way is something which is intrinsic to .NET Framework being part of Windows - and it\u0027s discussed at length in https://github.com/dotnet/runtime/issues/71993.\r\n\r\n.NET 5+ offers two different ways to handle this:\r\n* Build the app as framework dependent, but then the app has a prerequisite install. As with other things similar to this, it typically means the app should provide an install experience, and part of the install should be to make sure the machine has the required .NET runtime on it.\r\n* Build the app as self-contained, in which case there should be no external dependencies and the app probably doesn\u0027t need an install experience (it may still need it for other reasons though)",
                                           "updatedAt":  "2023-01-03T08:55:09Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Make call-to-action host errors source-build friendly",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73711",
        "createdAt":  "2022-08-10T18:59:34Z",
        "number":  73711,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqEIpg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2022-08-10T19:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2022-08-10T20:32:49Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-07-24T18:00:15Z",
        "body":  "Since https://github.com/dotnet/runtime/pull/73095, we are now building the `host` subset when building `clr`. However, the `host` subset includes a few test directories:\r\n\r\nhttps://github.com/dotnet/runtime/blob/f244adbda9e680e39cfe6a660f695b07adec3792/eng/Subsets.props#L73\r\n\r\nand\r\n\r\nhttps://github.com/dotnet/runtime/blob/f244adbda9e680e39cfe6a660f695b07adec3792/src/native/corehost/CMakeLists.txt#L34\r\n\r\nWe should refactor our build so we don\u0027t need to build these tests when running a \"normal\" dev build: `.\\build.cmd libs+clr -rc Release`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSHMt5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IMHi1",
                                           "createdAt":  "2022-08-10T18:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSince https://github.com/dotnet/runtime/pull/73095, we are now building the `host` subset when building `clr`. However, the `host` subset includes a few test directories:\r\n\r\nhttps://github.com/dotnet/runtime/blob/f244adbda9e680e39cfe6a660f695b07adec3792/eng/Subsets.props#L73\r\n\r\nand\r\n\r\nhttps://github.com/dotnet/runtime/blob/f244adbda9e680e39cfe6a660f695b07adec3792/src/native/corehost/CMakeLists.txt#L34\r\n\r\nWe should refactor our build so we don\u0027t need to build these tests when running a \"normal\" dev build: `.\\build.cmd libs+clr -rc Release`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-10T18:59:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IM007",
                                           "createdAt":  "2022-08-10T21:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Should we make `clr` include `host.native` instead of `host`? If it is just being included to use the live host, I don\u0027t think we need host packages or tools either.",
                                           "updatedAt":  "2022-08-10T21:54:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5INEwQ",
                                           "createdAt":  "2022-08-10T23:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Yes, `host.native` sounds like the right subset for clr and mono defaults. `Microsoft.NET.HostModel.dll` is loaded when `dotnet publish` is used with `--runtime` argument (with or without `-p:Publish{Aot,SingleFile,ReadyToRun}`). We only use live host\u0027s `dotnet publish` in the installer tests.\r\n\r\nIdeally, if we are building all (or enough) subsets, then crossgen2 build (and anything else which uses `dotnet publish` from global sdk during the build) can be deferred after the $RuntimeFlavor+host+libs, and then `build.{cmd,sh}` can handover control from `runtime/.dotnet/dotnet` to live host in order to increase reliance on live build of corehost and HostModel.",
                                           "updatedAt":  "2022-08-10T23:12:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Icy3k",
                                           "createdAt":  "2022-08-15T17:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Switched to only include `host.native` in https://github.com/dotnet/runtime/pull/73800.\r\n\r\nThe native tests assets are part of `host.native` though, so they will still be built.",
                                           "updatedAt":  "2022-08-15T17:54:13Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Building clr shouldn\u0027t build host tests",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75882",
        "createdAt":  "2022-09-20T10:27:49Z",
        "number":  75882,
        "author":  "bikush",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-08T23:01:46Z",
        "body":  "### Description\n\nIf a path to a dotnet application contains slashes `/` in any of parent folder names, the app will just return a `Failed to create CoreCLR, HRESULT: 0x80070057`\r\nIf the path contains a backslash `\\` in any parent folder names, the app fails with a `System.IO.FileNotFoundException` pointing to the built dll file of the app.\r\n\r\nTested with:\r\n- dotnet `6.0.400` on Macmini M1, OSX12\r\n- dotnet `6.0.300` on Macmini (2018) i7, OSX11\r\n\r\n\r\n\n\n### Reproduction Steps\n\n- have a Mac (tested on macmini, 2018 and M1) with dotnet setup\r\n- create a new folder `testfolder` \r\n- in the folder, run `dotnet new console` and `dotnet build`\r\n- run the generated executable, something like `./bin/Debug/net6.0/testfolder`\r\n- change parent folder name to `test/folder`\r\n- re-run the generated executable and observe CoreCLR error\r\n- change parent folder name to `test\\folder`\r\n- re-run the generated executable and observe the FileNotCoundException\r\n- change the parent folder back to the initial\r\n- re-run the generated executable and things work again\n\n### Expected behavior\n\nThe baseline \"Hello World\" app will work if any of the parent folders contains `\\` or `/` characters in their names.\n\n### Actual behavior\n\nDepending on the slash character in the parent folder names, different errors occur when running dotnet apps.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRenaming the parent folders to remove the slashes makes dotnet applications work again.\n\n### Configuration\n\n.Net 6 with runtimes tested 6.0.300 and 6.0.400\r\nMac OSX 11 (Macmini 2018) and 12 (Macmini M1).\r\nBased on the test on two different architectures and OS\u0027s, I do not think it is based on the configuration, most likely applies to general OSX environment.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg5cd4A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Kolv_",
                                           "createdAt":  "2022-09-20T10:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf a path to a dotnet application contains slashes `/` in any of parent folder names, the app will just return a `Failed to create CoreCLR, HRESULT: 0x80070057`\r\nIf the path contains a backslash `\\` in any parent folder names, the app fails with a `System.IO.FileNotFoundException` pointing to the built dll file of the app.\r\n\r\nTested with:\r\n- dotnet `6.0.400` on Macmini M1, OSX12\r\n- dotnet `6.0.300` on Macmini (2018) i7, OSX11\r\n\r\n\r\n\n\n### Reproduction Steps\n\n- have a Mac (tested on macmini, 2018 and M1) with dotnet setup\r\n- create a new folder `testfolder` \r\n- in the folder, run `dotnet new console` and `dotnet build`\r\n- run the generated executable, something like `./bin/Debug/net6.0/testfolder`\r\n- change parent folder name to `test/folder`\r\n- re-run the generated executable and observe CoreCLR error\r\n- change parent folder name to `test\\folder`\r\n- re-run the generated executable and observe the FileNotCoundException\r\n- change the parent folder back to the initial\r\n- re-run the generated executable and things work again\n\n### Expected behavior\n\nThe baseline \"Hello World\" app will work if any of the parent folders contains `\\` or `/` characters in their names.\n\n### Actual behavior\n\nDepending on the slash character in the parent folder names, different errors occur when running dotnet apps.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nRenaming the parent folders to remove the slashes makes dotnet applications work again.\n\n### Configuration\n\n.Net 6 with runtimes tested 6.0.300 and 6.0.400\r\nMac OSX 11 (Macmini 2018) and 12 (Macmini M1).\r\nBased on the test on two different architectures and OS\u0027s, I do not think it is based on the configuration, most likely applies to general OSX environment.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebikush\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-20T10:27:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KpbLG",
                                           "createdAt":  "2022-09-20T13:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The backslash part is a duplicate of https://github.com/dotnet/runtime/issues/75387",
                                           "updatedAt":  "2024-07-04T00:54:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LKQ_B",
                                           "createdAt":  "2022-09-28T14:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@vitek-karas should this be closed since it\u0027s a duplicate?",
                                           "updatedAt":  "2024-07-04T00:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LN7OD",
                                           "createdAt":  "2022-09-29T08:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I copied the repro steps to #75387. Closing this as duplicate.",
                                           "updatedAt":  "2024-07-04T00:54:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dlx3g",
                                           "createdAt":  "2024-07-04T00:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The issue with backward slashes was fixed by https://github.com/dotnet/runtime/pull/78995 (duplicate of #75387).\r\n\r\nThe issue with forward slashes is still present.",
                                           "updatedAt":  "2024-07-04T00:54:10Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "On a Mac, dotnet app results in CoreCLR error or FileNotFound exception if parent path folder names contain slashes",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75923",
        "createdAt":  "2022-09-20T19:42:45Z",
        "number":  75923,
        "author":  "pkErbynn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-21T10:09:29Z",
        "body":  "I am trying to generate a **self-contained** single-file executable in .net 6 and I am using the `HostModel.Bundler` v6 api. \r\nOn enabling `diagnosticOutput`, I receive this error: \r\n\r\n```\r\nLogs: Exclude [NativeBinary]: hostfxr.dll\r\nLogs: Exclude [NativeBinary]: hostpolicy.dll\r\n```\r\n\r\nUpon extensive investigations in the source code, I realized there\u0027s a framework validation in the `ShouldExclude` logic \r\nhttps://github.com/dotnet/runtime/blob/4e6244c111c1aabb891c83a48701e6033c7b0fc2/src/installer/managed/Microsoft.NET.HostModel/Bundle/TargetInfo.cs#L117\r\n\r\nWhy should the implementation logic exclude `hostfxr.dll` and `hostpolicy.dll` files if the framework major version is not 3 ? \r\nHow can I embed the `hostfxr.dll` and `hostpolicy.dll` inside an executable application?\r\n\r\nHere is my source code - https://github.com/pkErbynn/Crossroads/blob/1d0474662759a2ed98326de405bf02d571329458/src/Crossroads/Services/AppHostService.cs#L34\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSra7tA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KrJfu",
                                           "createdAt":  "2022-09-20T19:42:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am trying to generate a **self-contained** single-file executable in .net 6 and I am using the `HostModel.Bundler` v6 api. \r\nOn enabling `diagnosticOutput`, I receive this error: \r\n\r\n```\r\nLogs: Exclude [NativeBinary]: hostfxr.dll\r\nLogs: Exclude [NativeBinary]: hostpolicy.dll\r\n```\r\n\r\nUpon extensive investigations in the source code, I realized there\u0027s a framework validation in the `ShouldExclude` logic \r\nhttps://github.com/dotnet/runtime/blob/4e6244c111c1aabb891c83a48701e6033c7b0fc2/src/installer/managed/Microsoft.NET.HostModel/Bundle/TargetInfo.cs#L117\r\n\r\nWhy should the implementation logic exclude `hostfxr.dll` and `hostpolicy.dll` files if the framework major version is not 3 ? \r\nHow can I embed the `hostfxr.dll` and `hostpolicy.dll` inside an executable application?\r\n\r\nHere is my source code - https://github.com/pkErbynn/Crossroads/blob/1d0474662759a2ed98326de405bf02d571329458/src/Crossroads/Services/AppHostService.cs#L34\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epkErbynn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-20T19:42:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ktru0",
                                           "createdAt":  "2022-09-21T10:09:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Disclaimer: The HostModel assembly is not considered a public API, we don\u0027t even ship the package anymore on NuGet (last version there is 5.0.0-preview, while the current version is 7 or 8). This means we are likely to introduce breaking changes without even thinking about it.\r\n\r\nAs for the question - starting with .NET 5 the hosting functionality is part of the apphost used for single-file apps, that\u0027s why it should not include the dynamic libraries, since it already has that code baked in.\r\nI don\u0027t think there\u0027s a way to workaround that right now - the code was simply not designed like that.\r\n\r\nThat said - the apphost should have the hosting functionality necessary for single-file already in it, so if you\u0027re trying to build a single-file app, you should not need the libraries.",
                                           "updatedAt":  "2022-09-21T10:09:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Logs: Exlude [NativeBinary]: hostfxr.dll and hostpolicy.dll files in .net 6",
        "labels":  [
                       "question",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76080",
        "createdAt":  "2022-09-23T15:54:38Z",
        "number":  76080,
        "author":  "MasterMann",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T20:42:24Z",
        "body":  "### Description\n\nUsing `hostfxr_initialize_for_dotnet_command_line` to load a self-contained executable with a custom runtime host app fails due to a missing .deps.json file (even though it shouldn\u0027t be present in self-contained apps?).\n\n### Reproduction Steps\n\n1. Create a default .NET 6 console app project\r\n2. Publish it with the following settings:\r\n\r\n- Deployment mode: self-contained\r\n- Target runtime: win-x64\r\n- ✅ Produce single file\r\n\r\n3. Create a custom runtime host, as per [Microsoft documentation](https://learn.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting)\r\n4. Replace the `init_fptr` call (with the `hostfxr_initialize_for_runtime_config` signature) for `hostfxr_initialize_for_dotnet_command_line`\r\n5. Compile the C++ executable and put the self-contained executable alongside it\r\n6. Add `COREHOST_TRACE=1` and `COREHOST_TRACE_VERBOSITY=4` to environment variables for logging\r\n7. Launch the host app and observe missing .deps.json and hostpolicy.dll errors in console output.\r\n\r\n\n\n### Expected behavior\n\nCall to `hostfxr_initialize_for_dotnet_command_line` to pass without issues (return code = 0, valid host context returned).\n\n### Actual behavior\n\nHost context fails to initialize with error code 0x80008083, and following logs are displayed:\r\n(truncated = full path to both the SCD executable and native host executable)\r\n```\r\n--- Invoked hostfxr_initialize_for_dotnet_command_line [commit hash: 55fb7ef977e7d120dc12f0960edcff0739d7ee0e]\r\nChecking if CoreCLR path exists=[C:\\Program Files\\dotnet\\host\\fxr\\6.0.8\\coreclr.dll]\r\n--- Executing in muxer mode...\r\nUsing the provided arguments to determine the application to execute.\r\nApp runtimeconfig.json from [\u003ctruncated\u003e\\UE5InteropManaged.exe]\r\nRuntime config is cfg=\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json dev=\u003ctruncated\u003e\\Internal_LocalDev\\bin\\UE5InteropManaged.runtimeconfig.dev.json\r\nAttempting to read runtime config: \u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json\r\nAttempting to read dev runtime config: \u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.dev.json\r\nRuntime config [\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json] is valid=[1]\r\nExecuting as a self-contained app as per config file [\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json]\r\n--- Resolving hostpolicy.dll version from deps json [\u003ctruncated\u003e\\UE5InteropManaged.deps.json]\r\nCannot use file stream for [\u003ctruncated\u003e\\UE5InteropManaged.deps.json]: No such file or directory\r\nThe expected hostpolicy.dll directory is [C:\\Program Files\\dotnet\\]\r\nThe hostpolicy.dll was not found in [C:\\Program Files\\dotnet\\]\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Program Files\\dotnet\\\u0027.\r\nFailed to run as a self-contained app.\r\n  - The application was run as a self-contained app because \u0027\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json\u0027 was not found.\r\n  - If this should be a framework-dependent app, add the \u0027\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json\u0027 file and specify the appropriate framework.\r\n```\n\n### Regression?\n\nNot aware, haven\u0027t tested on previous versions of .NET.\n\n### Known Workarounds\n\nNot aware (not using a self-contained distribution would not be ideal for the target use-case).\n\n### Configuration\n\n.NET version: 6.0.8\r\nOS: Windows 11 21H2 (22000.978)\r\nArchitecture: x64\r\nIs error specific to environment: not aware, haven\u0027t tested on Linux\r\nUsing Blazor: no, the managed app is a standard console application\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSwHb1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K4vG_",
                                           "createdAt":  "2022-09-23T15:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nUsing `hostfxr_initialize_for_dotnet_command_line` to load a self-contained executable with a custom runtime host app fails due to a missing .deps.json file (even though it shouldn\u0027t be present in self-contained apps?).\n\n### Reproduction Steps\n\n1. Create a default .NET 6 console app project\r\n2. Publish it with the following settings:\r\n\r\n- Deployment mode: self-contained\r\n- Target runtime: win-x64\r\n- ✅ Produce single file\r\n\r\n3. Create a custom runtime host, as per [Microsoft documentation](https://learn.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting)\r\n4. Replace the `init_fptr` call (with the `hostfxr_initialize_for_runtime_config` signature) for `hostfxr_initialize_for_dotnet_command_line`\r\n5. Compile the C++ executable and put the self-contained executable alongside it\r\n6. Add `COREHOST_TRACE=1` and `COREHOST_TRACE_VERBOSITY=4` to environment variables for logging\r\n7. Launch the host app and observe missing .deps.json and hostpolicy.dll errors in console output.\r\n\r\n\n\n### Expected behavior\n\nCall to `hostfxr_initialize_for_dotnet_command_line` to pass without issues (return code = 0, valid host context returned).\n\n### Actual behavior\n\nHost context fails to initialize with error code 0x80008083, and following logs are displayed:\r\n(truncated = full path to both the SCD executable and native host executable)\r\n```\r\n--- Invoked hostfxr_initialize_for_dotnet_command_line [commit hash: 55fb7ef977e7d120dc12f0960edcff0739d7ee0e]\r\nChecking if CoreCLR path exists=[C:\\Program Files\\dotnet\\host\\fxr\\6.0.8\\coreclr.dll]\r\n--- Executing in muxer mode...\r\nUsing the provided arguments to determine the application to execute.\r\nApp runtimeconfig.json from [\u003ctruncated\u003e\\UE5InteropManaged.exe]\r\nRuntime config is cfg=\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json dev=\u003ctruncated\u003e\\Internal_LocalDev\\bin\\UE5InteropManaged.runtimeconfig.dev.json\r\nAttempting to read runtime config: \u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json\r\nAttempting to read dev runtime config: \u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.dev.json\r\nRuntime config [\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json] is valid=[1]\r\nExecuting as a self-contained app as per config file [\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json]\r\n--- Resolving hostpolicy.dll version from deps json [\u003ctruncated\u003e\\UE5InteropManaged.deps.json]\r\nCannot use file stream for [\u003ctruncated\u003e\\UE5InteropManaged.deps.json]: No such file or directory\r\nThe expected hostpolicy.dll directory is [C:\\Program Files\\dotnet\\]\r\nThe hostpolicy.dll was not found in [C:\\Program Files\\dotnet\\]\r\nA fatal error was encountered. The library \u0027hostpolicy.dll\u0027 required to execute the application was not found in \u0027C:\\Program Files\\dotnet\\\u0027.\r\nFailed to run as a self-contained app.\r\n  - The application was run as a self-contained app because \u0027\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json\u0027 was not found.\r\n  - If this should be a framework-dependent app, add the \u0027\u003ctruncated\u003e\\UE5InteropManaged.runtimeconfig.json\u0027 file and specify the appropriate framework.\r\n```\n\n### Regression?\n\nNot aware, haven\u0027t tested on previous versions of .NET.\n\n### Known Workarounds\n\nNot aware (not using a self-contained distribution would not be ideal for the target use-case).\n\n### Configuration\n\n.NET version: 6.0.8\r\nOS: Windows 11 21H2 (22000.978)\r\nArchitecture: x64\r\nIs error specific to environment: not aware, haven\u0027t tested on Linux\r\nUsing Blazor: no, the managed app is a standard console application\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMasterMann\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-23T15:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K4xB_",
                                           "createdAt":  "2022-09-23T16:02:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "If I read the above correctly you produced the app as a single-file, right? So in your output there should be only `app.exe` (and probably `app.pdb`).\r\n\r\nIf that is the case then this scenario is not supported. Custom host doesn\u0027t work with single-file apps currently. The only way to make that work would be to use a custom single-file-host to produce the app. It is technically doable with hacking stuff in the SDK, but it would be a non-trivial thing as you would have to link in all of the runtime correctly and so on. Loading the `.exe` into already running process is not something we want to go after anytime soon (and probably never).\r\n\r\nThe only weird thing is that apparently there is a `app.runtimeconfig.json` on the disk there - which I find weird, normal single-file publish should not put it there.",
                                           "updatedAt":  "2022-09-23T16:02:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K4x8g",
                                           "createdAt":  "2022-09-23T16:06:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MasterMann",
                                           "body":  "@vitek-karas yes, the app produced is single-file, with self-contained SDK libs and dependencies.\r\n\r\nThe UE5InteropManaged.runtimeconfig.json is not on the disk, apparently hostfxr extracts it from the SCD executable somehow (the only files there are UE5InteropManaged.exe and UE5InteropManaged.pdb)",
                                           "updatedAt":  "2022-09-23T16:09:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K41iT",
                                           "createdAt":  "2022-09-23T16:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Yeah - it reads it from the .exe, which is what it does when you run the exe as well. That\u0027s something we should guard against and fail with a better error. The scenario is not going to work, for multiple reasons, but the main one is that the .exe contains all of the runtime statically linked into the exe. It\u0027s tricky (to say the least) to try to load native code from an executable into a different process and run it. Also the single-file build of the runtime makes certain assumptions which would not be true in the hosted scenario (one is that it can look for the currently running exe and assume that it\u0027s the single-file bundle).\r\n\r\nBTW: you can get it to fail the same way by trying to do `dotnet my-single-file.exe` - the end result is the same. Again, something we should probably fix to provide better failure mode.\r\n\r\n@elinor-fung as FYI",
                                           "updatedAt":  "2022-09-23T16:21:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K45AI",
                                           "createdAt":  "2022-09-23T16:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MasterMann",
                                           "body":  "Thanks, I guess a workaround for that could be shipping the SDK libs in a separate directory and project dependencies alongside the target managed executable.\r\nThough the question is - would dependency assemblies need to be manually loaded, or it\u0027s managed by runtimeconfig/deps.json and hostfxr during init?",
                                           "updatedAt":  "2022-09-23T16:36:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K5mts",
                                           "createdAt":  "2022-09-23T19:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Sorry - I don\u0027t follow - what\u0027s the goal?",
                                           "updatedAt":  "2022-09-23T19:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K5n6a",
                                           "createdAt":  "2022-09-23T19:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MasterMann",
                                           "body":  "@vitek-karas  The goal is to load a managed library + dependent libraries and call specific exported (public) functions, and probably set up some kind of class instance interop (via codegen + custom tracking of unique instances). Using COM is not possible since use-case is cross-platform.\r\n\r\nI managed to get the CLR loaded, but currently having another issue when trying to get a pointer to the target managed function.\r\nC++ code:\r\n```\r\nusing MGPMainUnmanaged = void (*)(MGPBuildConstants* productBuildConstants);\r\n\r\n[...]\r\n\r\nMGPMainUnmanaged MGPMain = nullptr;\r\n    result = get_function_pointer(\r\n        STR(\"MGP.Tests.UE5Interop.Managed.Source\"), /* type_name */\r\n        STR(\"MGPMain\"), /* method_name */\r\n        STR(\"MGP.Tests.UE5Interop.Managed.MGPMainUnmanaged\"), /* delegate_type_name */\r\n        nullptr, /* load_context */\r\n        nullptr, /* reserved */\r\n        (void**)\u0026MGPMain /* (out) delegate */);\r\n```\r\n\r\nC#:\r\n```\r\nnamespace MGP.Tests.UE5Interop.Managed;\r\n\r\npublic delegate void MGPMainUnmanaged(IntPtr productBuildConstantsNative);\r\n\r\npublic class Source\r\n{\r\n\tstatic void TestDelegate()\r\n\t{\r\n\t\tvar delegateType = Type.GetType(\"MGP.Tests.UE5Interop.Managed.MGPMainUnmanaged\")!;\r\n\r\n\t\tType type = Type.GetType(\"MGP.Tests.UE5Interop.Managed.Source\")!;\r\n\r\n\t\tDelegate d = Delegate.CreateDelegate(delegateType, type, \"MGPMain\")!;\r\n\r\n\t\tvar functionPtr = Marshal.GetFunctionPointerForDelegate(d);\r\n\t}\r\n\r\n\tpublic static void Main(string[] args) =\u003e TestDelegate();\r\n\r\n\tpublic static void MGPMain(IntPtr productBuildConstantsNative)\r\n\t{\r\n\t\tvar buildConstants = Marshal.PtrToStructure\u003cMGPBuildConstants\u003e(productBuildConstantsNative);\r\n\r\n\t\tConsole.WriteLine($\"Received product name: {buildConstants.MGPProductName}.\");\r\n\t}\r\n}\r\n```\r\n\r\nInvoking via `TestDelegate()` from C# works, but C++ `get_function_pointer` returns error code 0x80131522 (cannot find description for it, therefore am stuck).",
                                           "updatedAt":  "2022-09-23T20:39:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K5o_Y",
                                           "createdAt":  "2022-09-23T20:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The error code is \"Could not find or load a specific type (class, enum, etc).\".\r\n\r\nHow do you get the assembly with the C# code loaded from the native host?",
                                           "updatedAt":  "2022-09-23T20:04:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K5qPP",
                                           "createdAt":  "2022-09-23T20:10:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MasterMann",
                                           "body":  "Currently using the same `hostfxr_initialize_for_dotnet_command_line`, though this time the assembly is exported as self-contained, but not single-file (has all SDK libs and both .deps.json and .runtimeconfig.json in the same folder), so it loads fine.\r\nIt exports both an EXE and a DLL (since it\u0027s a console app), but I load the DLL directly.\r\n\r\nAnd here\u0027s the code that loads it:\r\n```\r\nstd::wstring targetLibraryLocation(STR(\"\u003ctruncated\u003e\") + DIR_SEPARATOR + STR(\"UE5InteropManaged.dll\"));\r\n\r\nhostfxr_handle dotnetHostContext = nullptr;\r\n\r\nint launchArgumentsCount = 1;\r\nwchar_t** launchArguments = new wchar_t*[launchArgumentsCount];\r\nlaunchArguments[0] = (wchar_t*)targetLibraryLocation.c_str();\r\nint result = hostfxr_initialize_for_dotnet_command_line(launchArgumentsCount, (const wchar_t**)launchArguments, nullptr, \u0026dotnetHostContext);\r\nif ((result != 0) || (dotnetHostContext == nullptr))\r\n{\r\n    std::cerr \r\n        \u003c\u003c \"Dotnet host init failed (failed to initialize managed library; error code - \" \r\n        \u003c\u003c std::hex \u003c\u003c std::showbase \u003c\u003c result \r\n        \u003c\u003c \")\" \u003c\u003c std::endl;\r\n    UnloadDotnetHostLoader(dotnetHostContext);\r\n    return nullptr;\r\n}\r\n\r\nget_function_pointer_fn get_function_pointer = nullptr;\r\n// Get the load assembly function pointer\r\nresult = get_runtime_delegate(\r\n    dotnetHostContext,\r\n    hdt_get_function_pointer,\r\n    \u0026get_function_pointer);\r\nif ((result != 0) || (get_function_pointer == nullptr))\r\n{\r\n    std::cerr \r\n        \u003c\u003c \"Dotnet host init failed (failed to get delegate loader helper function; error code - \" \r\n        \u003c\u003c std::hex \u003c\u003c std::showbase \u003c\u003c result \r\n        \u003c\u003c \")\" \u003c\u003c std::endl;\r\n    UnloadDotnetHostLoader(dotnetHostContext);\r\n    return nullptr;\r\n}\r\n```",
                                           "updatedAt":  "2022-09-23T20:13:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K6vL1",
                                           "createdAt":  "2022-09-24T08:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MasterMann",
                                           "body":  "The problem with `get_function_pointer` returning error code 0x80131522 was fixed after some googling.\r\nIt seems like both the delegate name and type name require specifying the assembly name (output file name without extension) afterwards.\r\nExample:\r\n```\r\nMGPMainUnmanaged MGPMain = nullptr;\r\nresult = get_function_pointer(\r\n      STR(\"MGP.Tests.UE5Interop.Managed.Source, UE5InteropManaged\"), /* type_name */\r\n      STR(\"MGPMain\"), /* method_name */\r\n      STR(\"MGP.Tests.UE5Interop.Managed.MGPMainUnmanaged, UE5InteropManaged\"), /* delegate_type_name */\r\n      nullptr, /* load_context */\r\n      nullptr, /* reserved */\r\n      (void**)\u0026MGPMain /* (out) delegate */);\r\n```\r\n\r\n@vitek-karas maybe related docs could be updated to reflect that requirement? Currently it\u0027s not clear what exactly should be supplied as parameters. I can do a pull request as well, if that would work.",
                                           "updatedAt":  "2022-09-24T08:39:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LAagK",
                                           "createdAt":  "2022-09-26T17:48:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Unfortunately we don\u0027t have official docs for the native hosting APIs yet.\r\n\r\nThe unofficial docs are here: https://github.com/dotnet/runtime/blob/main/docs/design/features/native-hosting.md#calling-managed-function-net-5-and-above\r\nThis does state that it should be assembly qualified type name, but maybe it\u0027s worth stressing that in some way.\r\n\r\nThe only piece of official docs on this topic is this guide: https://learn.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting#step-3---load-managed-assembly-and-get-function-pointer-to-a-managed-method\r\nWhich doesn\u0027t mention the need for assembly qualified type name - so that could be improved.\r\n\r\nDo you know of any other place?\r\n",
                                           "updatedAt":  "2022-09-26T17:48:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LAdvW",
                                           "createdAt":  "2022-09-26T18:01:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MasterMann",
                                           "body":  "Since there\u0027s no official docs apart from the tutorial and a file in the repo, I think that\u0027s it. I think it might be useful to provide an example with sample parameters (either in the tutorial, or in the .md).\r\nThere\u0027s an [example in the .md file](https://github.com/dotnet/runtime/blob/main/docs/design/features/native-hosting.md#getting-a-function-pointer-to-call-a-managed-method), but it doesn\u0027t show how to specify the string (i.e. that it needs to be a full type name with the namespace, following with a comma and an assembly name; same goes for the delegate type name).\r\nAs an idea, some sample strings could be put in related to Contoso (I know MS uses that \"company\" in examples).\r\n\r\nEdit: I found a sample in the tutorial project (from the link in the docs), but probably would be worth it to have the sample right in the docs as well.",
                                           "updatedAt":  "2022-09-26T20:07:14Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Loading a self-contained executable with custom runtime host returns error about missing .deps.json file",
        "labels":  [
                       "documentation",
                       "help wanted",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77800",
        "createdAt":  "2022-11-02T19:21:47Z",
        "number":  77800,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu5N2g==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "am11",
                                            "createdAt":  "2023-03-15T19:03:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T17:37:54Z",
        "body":  "Host tests (`src/installer/tests`) currently run directly on the build machine.\n- CI failure investigation is different from that for libraries/runtime tests (which use Helix)\n  - Results/artifacts aren\u0027t associated in the same way - accessing in AzureDevOps or querying in Kusto is inconsistent with rest of repo\n- Tests are run on a limited set of platforms\n  - No arm64 coverage - only x64 and x86\n\nTest projects\n- [AppHost.Bundle.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/AppHost.Bundle.Tests)\n- [HostActivation.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/HostActivation.Tests)\n- `Microsoft.NET.HostModel`\n  - [Microsoft.NET.HostModel.AppHost.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/Microsoft.NET.HostModel.AppHost.Tests)\n  - [Microsoft.NET.HostModel.Bundle.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/Microsoft.NET.HostModel.Bundle.Tests)\n  - [Microsoft.NET.HostModel.ComHost.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/Microsoft.NET.HostModel.ComHost.Tests)\n- [Microsoft.DotNet.CoreSetup.Packaging.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.DotNet.CoreSetup.Packaging.Tests)\n  - Not actually hosting tests - inspects built NuGet packages\n  - Could probably use some investigation into whether these are still valuable, should be done a different way, etc.\n\nWork\n- [x] Audit/reduce amount of host tests/assets that would need to be added to a helix workload\n  - [x] https://github.com/dotnet/runtime/pull/77858\n  - [x] https://github.com/dotnet/runtime/pull/78139\n  - [x] https://github.com/dotnet/runtime/pull/79177\n  - [x] #77807\n  - [x] #77805 \n  - [x] Remove testing of both build and publish outputs\n    - Various tests run both build and publish outputs - shouldn\u0027t really be interesting to target both for host testing.\n- [x] Remove building of test projects as part of test run\n  - Tests don\u0027t actually care about the build itself - they just want something built and redirected to use the live build.\n    - Currently relies on `GenerateTestRestoreSourcesNuGetConfig` to point at live built packages\n  - Build all test projects before the test run and copy them as test assets.\n  - https://github.com/dotnet/runtime/pull/99847\n  - https://github.com/dotnet/runtime/pull/100324\n- [x] Remove assumption in tests that they are run from within the runtime repo\n  - `RepoDirectoriesProvider` builds paths based on repo structure / output directory\n    - Also currently reads settings from a file created by [`SetupTestContextVariables`](https://github.com/dotnet/runtime/blob/acd444566623d48f8b9c6b68b64cf6b8daf4e522/src/installer/tests/Directory.Build.targets#L33)\n- [x] Construct layout for whatever assets are necessary to carry with the test (separate from the runtime repo)\n    - [`RefreshProjectTestAssets`](https://github.com/dotnet/runtime/blob/acd444566623d48f8b9c6b68b64cf6b8daf4e522/src/installer/tests/Directory.Build.targets#L3) currently sets up a `sharedFrameworkPublish` folder and test projects that will be run\n  - Maybe add a `host.pretest` subset, similar to `libs.pretest`\n- [ ] Ensure tests can run successfully on other platforms\n  - Likely don\u0027t run properly on arm64 right now\n  - https://github.com/dotnet/runtime/pull/108954\n- [x] Add support for creating/sending Helix payload/job for host tests\n  - Equivalent of src/tests/Common/helixpublishwitharcade.proj and src/libraries/sendtohelix.proj, but for host tests\n  - https://github.com/dotnet/runtime/pull/108529\n- [ ] Update pipeline to send tests to Helix\n  - eng/pipelines/installer/jobs/build-job.yml\n  - [x] Current test platfroms - https://github.com/dotnet/runtime/pull/114187\n  - [ ]  Platforms without coverage: arm64, linux_musl \n    - https://github.com/dotnet/runtime/pull/117434",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTY1YSg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5NjU-E",
                                           "createdAt":  "2022-11-02T19:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHost tests (`src/installer/tests`) currently run directly on the build machine.\r\n- CI failure investigation is different from that for libraries/runtime tests (which use Helix)\r\n  - Results/artifacts aren\u0027t associated in the same way - accessing in AzureDevOps or querying in Kusto is inconsistent with rest of repo\r\n- Tests are run on a limited set of platforms\r\n  - No arm64 coverage - only x64 and x86\r\n\r\nTest projects\r\n- [AppHost.Bundle.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/AppHost.Bundle.Tests)\r\n- [HostActivation.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/HostActivation.Tests)\r\n- `Microsoft.NET.HostModel`\r\n  - [Microsoft.NET.HostModel.AppHost.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/Microsoft.NET.HostModel.AppHost.Tests)\r\n  - [Microsoft.NET.HostModel.Bundle.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/Microsoft.NET.HostModel.Bundle.Tests)\r\n  - [Microsoft.NET.HostModel.ComHost.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.NET.HostModel.Tests/Microsoft.NET.HostModel.ComHost.Tests)\r\n- [Microsoft.DotNet.CoreSetup.Packaging.Tests](https://github.com/dotnet/runtime/tree/main/src/installer/tests/Microsoft.DotNet.CoreSetup.Packaging.Tests)\r\n  - Not actually hosting tests - inspects built NuGet packages\r\n  - Could probably use some investigation into whether these are still valuable, should be done a different way, etc.\r\n\r\nWork\r\n- [ ] Audit/reduce amount of host tests/assets that would need to be added to the workload\r\n  - Many projects in src/installer/tests/Assets/TestProjects only have minor differences - multiple projects can become one with different behaviour based on command line arguments\r\n    - Likely candidates: PortableApp*, RuntimeProperties, AppWith*, LightupApp\r\n  - Various tests run both build and publish outputs - shouldn\u0027t really be interesting to target both for host testing.\r\n  - Many StartupHook tests (and test projects) are actually targeting `StartupHookProvider`, not the hosting side of it. They can be moved to coreclr and just call into `StartupHookProvider` without launching a bunch of processes to actually run an app.\r\n- [ ] Remove building of test projects as part of test run\r\n  - Tests don\u0027t actually care about the build itself - they just want something built and redirected to use the live build.\r\n    - Currently relies on `GenerateTestRestoreSourcesNuGetConfig` to point at live built packages\r\n  - Build all test projects before the test run and copy them as test assets.\r\n- [ ] Remove assumption in tests that they are run from within the runtime repo\r\n  - `RepoDirectoriesProvider` builds paths based on repo structure / output directory\r\n    - Also currently reads settings from a file created by [`SetupTestContextVariables`](https://github.com/dotnet/runtime/blob/acd444566623d48f8b9c6b68b64cf6b8daf4e522/src/installer/tests/Directory.Build.targets#L33)\r\n  - Construct layout for whatever assets are necessary to carry with the test (separate from the runtime repo)\r\n    - [`RefreshProjectTestAssets`](https://github.com/dotnet/runtime/blob/acd444566623d48f8b9c6b68b64cf6b8daf4e522/src/installer/tests/Directory.Build.targets#L3) currently sets up a `sharedFrameworkPublish` folder and test projects that will be run\r\n    - Maybe add a `host.pretest` subset, similar to `libs.pretest`\r\n- [ ] Ensure tests can run successfully on other platforms\r\n  - Likely don\u0027t run properly on arm64 right now\r\n- [ ] Add support for creating/sending Helix payload/job for host tests\r\n  - Equivalent of src/tests/Common/helixpublishwitharcade.proj and src/libraries/sendtohelix.proj, but for host tests\r\n- [ ] Update pipeline to send tests to Helix\r\n  - eng/pipelines/installer/jobs/build-job.yml\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eelinor-fung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-02T19:21:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NjVhK",
                                           "createdAt":  "2022-11-02T19:24:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "I don\u0027t anticipate us actually doing all this in 8.0, but putting this in that milestone for now.",
                                           "updatedAt":  "2022-11-02T19:24:15Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Enable running host tests using helix",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81191",
        "createdAt":  "2023-01-25T22:34:33Z",
        "number":  81191,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0E2ug==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tannergooding",
                                            "createdAt":  "2023-01-25T22:38:06Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "tannergooding",
                                            "createdAt":  "2023-01-25T22:38:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "tannergooding",
                                            "createdAt":  "2023-01-25T22:38:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rickbrew",
                                            "createdAt":  "2023-01-25T22:39:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2023-01-25T22:39:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ivdiazsa",
                                            "createdAt":  "2023-01-25T22:40:25Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "ivdiazsa",
                                            "createdAt":  "2023-01-25T22:40:27Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "akiraveliara",
                                            "createdAt":  "2023-01-25T22:41:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Windows10CE",
                                            "createdAt":  "2023-01-25T22:45:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduardo-vp",
                                            "createdAt":  "2023-01-25T22:50:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sunkin351",
                                            "createdAt":  "2023-01-25T22:54:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "js6pak",
                                            "createdAt":  "2023-01-25T22:57:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wraith2",
                                            "createdAt":  "2023-01-25T22:59:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2023-01-25T23:14:58Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2023-01-25T23:15:02Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2023-01-25T23:15:03Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2023-01-25T23:15:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2023-01-25T23:32:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jaredpar",
                                            "createdAt":  "2023-01-26T00:29:40Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jaredpar",
                                            "createdAt":  "2023-01-26T00:54:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2023-01-26T02:46:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2023-01-26T06:35:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2023-01-26T15:35:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2023-01-26T15:41:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2023-01-26T16:20:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Uladzimir-Lashkevich",
                                            "createdAt":  "2023-01-26T16:26:21Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Suchiman",
                                            "createdAt":  "2023-01-27T00:00:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saucecontrol",
                                            "createdAt":  "2023-01-27T18:57:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dibarbet",
                                            "createdAt":  "2023-11-17T23:25:13Z"
                                        }
                                    ],
                          "totalCount":  29
                      },
        "updatedAt":  "2023-07-20T08:01:30Z",
        "body":  "Lots of apps spin up multiple processes. These often show up with non-descript titles. For some apps, that doesn\u0027t matter and for others, it does.\r\n\r\nDocker:\r\n![image](https://user-images.githubusercontent.com/2608468/214705329-42bec9a4-e780-4fca-b6ec-e60d4adc7419.png)\r\n\r\nFor my use, all those \"Docker Desktop\" processes is fine.\r\n\r\nVS Code:\r\n![image](https://user-images.githubusercontent.com/2608468/214705821-8044c977-fbad-4b05-8293-73f4423946c0.png)\r\n\r\nAgain, mostly fine for me.\r\n\r\nEdge:\r\n![image](https://user-images.githubusercontent.com/2608468/214705679-023daa6d-8b6a-4810-92b4-b9f976884e63.png)\r\n\r\nThat\u0027s a lot of detail. Wow!\r\n\r\nDotnet:\r\n![image](https://user-images.githubusercontent.com/2608468/214706212-61c70b5c-92c4-433b-b261-4beff110baa1.png)\r\n\r\nI\u0027m running a build at dotnet/iot. It\u0027s not at all obvious what is happening. It would be really nice for devs if we could split these processes into components like \"MSBuild\". The assumption is that there are multiple separate processes here and not just MSBuild.\r\n\r\nPerhaps we could adopt an Edge-like option for the .NET SDK.\r\n\r\nThis isn\u0027t a problem for actual .NET apps. They get their own EXE.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/214706828-e2474454-6737-459b-99ad-8df2a7d9162e.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYfU9nQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5TtCeL",
                                           "createdAt":  "2023-01-25T22:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-25T22:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TtDHB",
                                           "createdAt":  "2023-01-25T22:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "richlander",
                                           "body":  "@elinor-fung",
                                           "updatedAt":  "2023-01-25T22:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TtHrn",
                                           "createdAt":  "2023-01-25T23:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLots of apps spin up multiple processes. These often show up with non-descript titles. For some apps, that doesn\u0027t matter and for others, it does.\r\n\r\nDocker:\r\n![image](https://user-images.githubusercontent.com/2608468/214705329-42bec9a4-e780-4fca-b6ec-e60d4adc7419.png)\r\n\r\nFor my use, all those \"Docker Desktop\" processes is fine.\r\n\r\nVS Code:\r\n![image](https://user-images.githubusercontent.com/2608468/214705821-8044c977-fbad-4b05-8293-73f4423946c0.png)\r\n\r\nAgain, mostly fine for me.\r\n\r\nEdge:\r\n![image](https://user-images.githubusercontent.com/2608468/214705679-023daa6d-8b6a-4810-92b4-b9f976884e63.png)\r\n\r\nThat\u0027s a lot of detail. Wow!\r\n\r\nDotnet:\r\n![image](https://user-images.githubusercontent.com/2608468/214706212-61c70b5c-92c4-433b-b261-4beff110baa1.png)\r\n\r\nI\u0027m running a build at dotnet/iot. It\u0027s not at all obvious what is happening. It would be really nice for devs if we could split these processes into components like \"MSBuild\". The assumption is that there are multiple separate processes here and not just MSBuild.\r\n\r\nPerhaps we could adopt an Edge-like option for the .NET SDK.\r\n\r\nThis isn\u0027t a problem for actual .NET apps. They get their own EXE.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/214706828-e2474454-6737-459b-99ad-8df2a7d9162e.png)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-25T23:03:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TtcXS",
                                           "createdAt":  "2023-01-26T00:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBSXkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2023-01-26T00:55:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2023-07-20T12:10:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Related: https://github.com/dotnet/runtime/issues/2688",
                                           "updatedAt":  "2023-01-26T00:51:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h18hR",
                                           "createdAt":  "2023-07-19T07:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBSXnw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2023-07-20T12:10:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e Perhaps we could adopt an Edge-like option for the .NET SDK.\r\n\r\nThe \"what dotnet process is this\" problem isn\u0027t just a Windows problem, right?",
                                           "updatedAt":  "2023-07-19T07:05:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h9T2d",
                                           "createdAt":  "2023-07-20T08:01:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  ".NET Runtime generally informs the operating system about Thread.Name changes.  For the main thread on Linux/Apple/FreeBSD, this would apparently affect the process name in the OS, but the runtime blocks the change: \u003chttps://github.com/dotnet/runtime/blob/2ee61bbe7bb04e97159f017c4f9eaf486dc46c1f/src/coreclr/pal/src/thread/thread.cpp#L1551-L1556\u003e\n\nLinux also has a 16-byte limit there.  If the `dotnet` host were changed to explicitly set the name of the main thread to match the entry assembly name, and that started with a company name, then there might be no space left for the name of the product.  Well, I suppose developers who care about that would just have to use shorter assembly names.  That would be easier for users to understand than copying the process name from some assembly attribute.",
                                           "updatedAt":  "2023-07-20T08:01:29Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Consider fixing the \"what dotnet process is this\" problem",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83779",
        "createdAt":  "2023-03-22T10:09:14Z",
        "number":  83779,
        "author":  "xgqt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-23T05:24:29Z",
        "body":  "### Describe the bug\r\n\r\nOn a Gentoo system built with musl libc the library `libc.musl-x86_64.so.1` is inaccessible.\r\n\r\n### Expectations\r\n\r\n.NET SDK links to a more widely known musl library name.\r\n\r\n### Further technical details\r\n\r\nmusl version is: 1.2.3-r7\r\n\r\nSee also https://bugs.gentoo.org/894760",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcZDLTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUCT",
                                           "createdAt":  "2023-03-22T10:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "This also propagates to programs built with such `dotnet` exe.\r\n\r\nSee: https://bugs.gentoo.org/894758",
                                           "updatedAt":  "2023-03-22T10:12:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUCh",
                                           "createdAt":  "2023-03-22T10:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "It is possible to build applications with this seemingly broken `dotnet` since it ALSO links to a libc library: `libc.so.6 =\u003e /lib64/libc.so.6 (0x00007f16a4d49000)`.\r\n\r\nThe .NET SDK musl version was probably supposed to be used on a glibc Linux system but for a musl packaging?\r\nIs this correct? How should the musl version be used on Linux systems without glibc?",
                                           "updatedAt":  "2023-03-22T10:17:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUCr",
                                           "createdAt":  "2023-03-22T13:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e .NET SDK links to a more widely known musl library name.\r\n\r\nWe don\u0027t explicitly specify the libc name or path, we are using the system defaults (Alpine Linux):\r\n\r\n```sh\r\n# use gcc to compile a hello world app\r\n$ echo \"int main(){}\" | gcc -xc -\r\n# inspect the executable\r\n$ ldd ./a.out \r\n     /lib/ld-musl-x86_64.so.1 (0x7f15b41a7000)\r\n     libc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 (0x7f15b41a7000)\r\n$ readelf -a ./a.out | grep NEEDED\r\n 0x0000000000000001 (NEEDED)             Shared library: [libc.musl-x86_64.so.1]\r\n\r\n# compare with dotnet executable\r\n\r\n$ ldd $(command -v dotnet)\r\n        /lib/ld-musl-x86_64.so.1 (0x7f088e769000)\r\n        libstdc++.so.6 =\u003e /usr/lib/libstdc++.so.6 (0x7f088e507000)\r\n        libgcc_s.so.1 =\u003e /usr/lib/libgcc_s.so.1 (0x7f088e4e9000)\r\n        libc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 (0x7f088e769000)\r\n$ readelf -a $(command -v dotnet) | grep NEEDED\r\n 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libc.musl-x86_64.so.1]\r\n```\r\n\r\nDo you have a suggestion to improve `DT_NEEDED` at build time? If you built everything on gentoo-musl (.NET Runtime + SDK) then it should use whatever defaults were there on the build machine.\r\n\r\nAlternatively, you can create a `libc.musl-x86_64.so.1 -\u003e /usr/lib/libc.so` symlink on your system if it is missing it.\r\n\r\nAnother alternative is to patch the ELF after the fact:\r\n\r\n```sh\r\n# Prerequisite: emerge equivalent of \u0027apk add patchelf\u0027\r\n\r\n$ patchelf --replace-needed libc.musl-x86_64.so.1 libc.so $(command -v dotnet)\r\n# or patch all ELF files under install dir\r\n$ find /usr/share/dotnet/ -exec file {} \\; | grep ELF | \\\r\n     while IFS=: read name rest; do patchelf --replace-needed libc.musl-x86_64.so.1 libc.so $name; done\r\n# (and ~/.nuget dir if needed)\r\n\r\n# verify desired results\r\n$ ldd $(command -v dotnet)\r\n        /lib/ld-musl-x86_64.so.1 (0x7f2186a5d000)\r\n        libstdc++.so.6 =\u003e /usr/lib/libstdc++.so.6 (0x7f21867f9000)\r\n        libgcc_s.so.1 =\u003e /usr/lib/libgcc_s.so.1 (0x7f21867db000)\r\n        libc.so =\u003e /lib/ld-musl-x86_64.so.1 (0x7f2186a5d000)\r\n$ readelf -a $(command -v dotnet) | grep NEEDED\r\n 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so]\r\n```",
                                           "updatedAt":  "2023-03-22T13:34:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUC3",
                                           "createdAt":  "2023-03-22T13:36:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "@am11 thank you for your quick response.\r\nUnfortunately you will have to take my words with a grain of salt because I am not a toolchain expert.\r\n\r\n\u003e Do you have a suggestion to improve DT_NEEDED at build time? If you built everything on gentoo-musl (.NET Runtime + SDK) then it should use whatever defaults were there on the build machine.\r\n\r\nCurrently we struggle with building .NET SDK from source under Portage mainly because the network restriction and huge build size, see: https://github.com/gentoo/gentoo/pull/21112\r\n\r\nSo we are talking about binary distributed by Microsoft / .NET project now only.\r\n\r\n\u003e Alternatively, you can create a libc.musl-x86_64.so.1 -\u003e /usr/lib/libc.so symlink on your system if it is missing it.\r\n\r\nI hope a person form Gentoo Toolchain Project or one of musl maintainers in Gentoo could comment on that.\r\n\r\n\u003e Another alternative is to patch the ELF after the fact:\r\n\r\nI think this is what we will have to do.\r\nThanks for the snippet :D ",
                                           "updatedAt":  "2023-03-22T13:36:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUDH",
                                           "createdAt":  "2023-03-22T13:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "Im worried that subsequent application builds will also want to link to \"wrong\" musl libc name.\r\nDo you know if this is taken from some place defined by .NET SDK?\r\nIm taking about this issue: https://bugs.gentoo.org/894758",
                                           "updatedAt":  "2023-03-22T13:39:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUDQ",
                                           "createdAt":  "2023-03-22T13:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Cc @richlander ",
                                           "updatedAt":  "2023-03-22T13:58:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMUTQ",
                                           "createdAt":  "2023-03-22T14:03:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\n\r\nOn a Gentoo system built with musl libc the library `libc.musl-x86_64.so.1` is inaccessible.\r\n\r\n### Expectations\r\n\r\n.NET SDK links to a more widely known musl library name.\r\n\r\n### Further technical details\r\n\r\nmusl version is: 1.2.3-r7\r\n\r\nSee also https://bugs.gentoo.org/894760\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003exgqt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-22T14:03:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMYHi",
                                           "createdAt":  "2023-03-22T14:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@xgqt, I am not sure if that issue was _just_ a lint warning or the app actually failed to run? In another issue (https://bugs.gentoo.org/894760#c3), I see this link:\r\n\r\n```\r\n        /lib/ld-musl-x86_64.so.1 =\u003e /lib64/ld-linux-x86-64.so.2 (0x00007f16a5287000)\r\n```\r\n\r\nwhich suggests that the link was resolved on gentoo. Try running that app.",
                                           "updatedAt":  "2023-03-22T14:12:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMZKn",
                                           "createdAt":  "2023-03-22T14:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e @xgqt, I am not sure if that issue was _just_ a lint warning or the app actually failed to run? In another issue (https://bugs.gentoo.org/894760#c3), I see this link:\r\n\u003e \r\n\u003e ```\r\n\u003e         /lib/ld-musl-x86_64.so.1 =\u003e /lib64/ld-linux-x86-64.so.2 (0x00007f16a5287000)\r\n\u003e ```\r\n\u003e \r\n\u003e which suggests that the link was resolved on gentoo. Try running that app.\r\n\r\nIt must run since it can compile .NET applications,\r\nin https://bugs.gentoo.org/894758 it compiles csharp-language-server.",
                                           "updatedAt":  "2023-03-22T14:15:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMZzc",
                                           "createdAt":  "2023-03-22T14:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e \u003e @xgqt, I am not sure if that issue was _just_ a lint warning or the app actually failed to run? In another issue (https://bugs.gentoo.org/894760#c3), I see this link:\r\n\u003e \u003e ```\r\n\u003e \u003e         /lib/ld-musl-x86_64.so.1 =\u003e /lib64/ld-linux-x86-64.so.2 (0x00007f16a5287000)\r\n\u003e \u003e ```\r\n\u003e \u003e \r\n\u003e \u003e \r\n\u003e \u003e     \r\n\u003e \u003e       \r\n\u003e \u003e     \r\n\u003e \u003e \r\n\u003e \u003e       \r\n\u003e \u003e     \r\n\u003e \u003e \r\n\u003e \u003e     \r\n\u003e \u003e   \r\n\u003e \u003e which suggests that the link was resolved on gentoo. Try running that app.\r\n\u003e \r\n\u003e It must run since it can compile .NET applications, in https://bugs.gentoo.org/894758 it compiles csharp-language-server.\r\n\r\nThis is the logfile: https://894758.bugs.gentoo.org/attachment.cgi?id=851776\r\n\r\nAnd quoting the build process:\r\n\r\n```\r\n\u003e\u003e\u003e Unpacking source...\r\n\u003e\u003e\u003e Unpacking csharp-language-server-0.5.7.tar.gz to /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work\r\n\u003e\u003e\u003e Unpacking csharp-language-server-0.5.7-prebuilt.tar.xz to /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work\r\n\u003e\u003e\u003e Source unpacked in /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work\r\n\u003e\u003e\u003e Preparing source in /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7 ...\r\n\u003e\u003e\u003e Source prepared.\r\n\u003e\u003e\u003e Configuring source in /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7 ...\r\n * Running dotnet restore /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src --source /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/nuget_packages -p:TargetFramework=net6.0 ...\r\n=  Determining projects to restore...\r\n=========  Restored /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src/CSharpLanguageServer.Tests/CSharpLanguageServer.Tests.fsproj (in 475 ms).\r\n  Restored /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src/CSharpLanguageServer/CSharpLanguageServer.fsproj (in 474 ms).\r\n [ ok ]\r\n\u003e\u003e\u003e Source configured.\r\n\u003e\u003e\u003e Compiling source in /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7 ...\r\n * Running dotnet build --configuration Debug --no-restore --no-self-contained --nologo --output /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7_net6.0_Debug/csharp-language-server -maxCpuCount:1 -p:TargetFramework=net6.0 /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src ...\r\n==  CSharpLanguageServer -\u003e /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7_net6.0_Debug/csharp-language-server/CSharpLanguageServer.dll\r\n  CSharpLanguageServer -\u003e /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7_net6.0_Debug/csharp-language-server/CSharpLanguageServer.dll\r\n/var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src/CSharpLanguageServer.Tests/DocumentationTests.fs(102,1): warning FS0988: Main module of program is empty: nothing will happen when it is run [/var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src/CSharpLanguageServer.Tests/CSharpLanguageServer.Tests.fsproj]\r\n=  CSharpLanguageServer.Tests -\u003e /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7_net6.0_Debug/csharp-language-server/CSharpLanguageServer.Tests.dll\r\n\r\nBuild succeeded.\r\n\r\n/var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src/CSharpLanguageServer.Tests/DocumentationTests.fs(102,1): warning FS0988: Main module of program is empty: nothing will happen when it is run [/var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/work/csharp-language-server-0.5.7/src/CSharpLanguageServer.Tests/CSharpLanguageServer.Tests.fsproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:07.48\r\n [ ok ]\r\n\u003e\u003e\u003e Source compiled.\r\n\u003e\u003e\u003e Test phase [not enabled]: dev-dotnet/csharp-language-server-0.5.7\r\n\r\n\u003e\u003e\u003e Install dev-dotnet/csharp-language-server-0.5.7 into /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/image\r\n\u003e\u003e\u003e Completed installing dev-dotnet/csharp-language-server-0.5.7 into /var/tmp/portage/dev-dotnet/csharp-language-server-0.5.7/image\r\n\r\n * Final size of build directory: 1084284 KiB ( 1.0 GiB)\r\n * Final size of installed tree:    57832 KiB (56.4 MiB)\r\n\r\n * QA Notice: Unresolved soname dependencies:\r\n * \r\n * \t/usr/share/csharp-language-server/CSharpLanguageServer: libc.musl-x86_64.so.1\r\n * \r\nstrip: x86_64-gentoo-linux-musl-strip --strip-unneeded -N __gentoo_check_ldflags__ -R .comment -R .GCC.command.line -R .note.gnu.gold-version\r\n   /usr/share/csharp-language-server/CSharpLanguageServer\r\n\u003e\u003e\u003e Done.\r\n```",
                                           "updatedAt":  "2023-03-22T14:17:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMbpT",
                                           "createdAt":  "2023-03-22T14:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Yup, I was referring to that `QA Notice`, if the app runs, that means dynamic linker is happy. You can ignore the lint / QA warning.",
                                           "updatedAt":  "2023-03-22T14:21:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMc3z",
                                           "createdAt":  "2023-03-22T14:24:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e Yup, I was referring to that `QA Notice`, if the app runs, that means dynamic linker is happy. You can ignore the lint / QA warning.\r\n\r\nWell, not really, \"we\" can not ignore it,\r\nin Gentoo we care very much to have no QA warnings, mislinked or missing libraries.\r\n\r\nBut yes, this is not a critical issue in term of that the app can run.\r\n\r\nBUT it might be producing \"garbage\" applications --\u003e https://github.com/dotnet/runtime/issues/83779#issuecomment-1479622855",
                                           "updatedAt":  "2023-03-22T14:24:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMgJc",
                                           "createdAt":  "2023-03-22T14:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e BUT it might be producing \"garbage\" applications\r\n\r\nNot sure I followed. If the app is running that means dynamic loader successfully loaded the libc among other dependencies at the startup. Otherwise you will get SIGABRT right away when you execute the app. libc is the first library dynamic linker loads at runtime (discounting the ELF interpreter). If you are not getting any error when running the app, then this is a bogus warning. QA tool should be fixed.",
                                           "updatedAt":  "2023-03-22T14:30:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bBEDa",
                                           "createdAt":  "2023-04-28T05:19:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmboggs",
                                           "body":  "Hi,\r\n\r\nWe are running into a similar issue on void running musl as well with a missing `libc.musl-x86_64.so.1` link.  Is there any way to switch that dependency to something more generic, like libc.so instead? ",
                                           "updatedAt":  "2023-04-28T05:19:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bBPvr",
                                           "createdAt":  "2023-04-28T06:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@rmboggs, hello. I tested .NET 8 [build](https://github.com/dotnet/installer#readme) in void-linux docker container, it seems to be running just fine.\r\n\r\nFull story:\r\n```sh\r\n# interactively run the container:\r\n#   https://github.com/void-linux/void-docker/pkgs/container/void-linux/68157668?tag=20230204RC01-thin-bb-x86_64-musl\r\n$ docker run -it ghcr.io/void-linux/void-linux:20230204RC01-thin-bb-x86_64-musl\r\n\r\n# inside the container\r\n\r\n# 1. install dependencies (for SDK commands)\r\n$ xbps-install -Sy curl openssl icu-libs\r\n\r\n# 2. download and install .NET\r\n$ mkdir ~/.dotnet \u0026\u0026 \\\r\n    curl -sSL https://aka.ms/dotnet/8.0.1xx/daily/dotnet-sdk-linux-musl-x64.tar.gz | tar xzf - -C ~/.dotnet \u0026\u0026 \\\r\n    export PATH=$PATH:~/.dotnet\r\n\r\n# 3. create a simple web api app and run it\r\n$ dotnet new api -n api1 \u0026\u0026 cd api1\r\n# add .NET 8 preview feed\r\n$ cat \u003e nuget.config \u003c\u003cEOF\r\n\u003cconfiguration\u003e\r\n  \u003cpackageSources\u003e\r\n    \u003cadd key=\"dotnet8\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json\" /\u003e\r\n  \u003c/packageSources\u003e\r\n\u003c/configuration\u003e\r\nEOF\r\n$ dotnet run\r\n\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5000\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /api1\r\n\r\n# 4. try AOT: first the prereqs\r\n$ xbps-install -Sy clang zlib-devel\r\n# 5. publish AOT app\r\n$ dotnet publish -o dist -c Release -p:PublishAot=true\r\n$ dist/api1\r\n\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5000\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /api1\r\n```",
                                           "updatedAt":  "2023-04-28T06:25:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bFo21",
                                           "createdAt":  "2023-04-28T23:35:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmboggs",
                                           "body":  "Hi @am11,\r\nI am actually working on packaging dotnet 7 for a void package on x64-musl.  It builds fine but fails during the package step for SDK because it can\u0027t find the package containing `libc.musl-x86_64.so.1` because the musl package for void doesn\u0027t contain that sym link.  I\u0027m hoping that, because the file in question is just a link anyway, that this can be updated to point to the libc.so file instead.  Does this make sense?",
                                           "updatedAt":  "2023-04-28T23:35:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bFtz5",
                                           "createdAt":  "2023-04-28T23:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Can you share the output of `ldd $(command -v dotnet)`?",
                                           "updatedAt":  "2023-04-28T23:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bH7Lp",
                                           "createdAt":  "2023-04-29T14:43:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmboggs",
                                           "body":  "Hi @am11,\r\nI just did the command you asked and it comes up as follows for dotnet:\r\n\r\n```\r\n\t/lib/ld-musl-x86_64.so.1 (0x7f8e0be1c000)\r\n\t/usr/lib/libswmhack.so.0.0 =\u003e /usr/lib/libswmhack.so.0.0 (0x7f8e0be03000)\r\n\tlibstdc++.so.6 =\u003e /lib/libstdc++.so.6 (0x7f8e0ba00000)\r\n\tlibgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x7f8e0bde5000)\r\n\tlibc.so =\u003e /lib/ld-musl-x86_64.so.1 (0x7f8e0be1c000)\r\n\tlibX11.so.6 =\u003e /lib/libX11.so.6 (0x7f8e0b8be000)\r\n\tlibxcb.so.1 =\u003e /lib/libxcb.so.1 (0x7f8e0bdbc000)\r\n\tlibXau.so.6 =\u003e /lib/libXau.so.6 (0x7f8e0bdb7000)\r\n\tlibXdmcp.so.6 =\u003e /lib/libXdmcp.so.6 (0x7f8e0bdaf000)\r\n```\r\n\r\nThe file in question isn\u0027t there.  However, I dug further and found the vstest.console file in the sdk files has this output for ldd:\r\n\r\n```\r\n\t/lib/ld-musl-x86_64.so.1 (0x7f2fd7af2000)\r\n\t/usr/lib/libswmhack.so.0.0 =\u003e /usr/lib/libswmhack.so.0.0 (0x7f2fd7ad7000)\r\n\tlibstdc++.so.6 =\u003e /lib/libstdc++.so.6 (0x7f2fd7600000)\r\n\tlibgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x7f2fd7ab9000)\r\n\tlibc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 (0x7f2fd7af2000) \u003c-- Here is the reference\r\n\tlibX11.so.6 =\u003e /lib/libX11.so.6 (0x7f2fd7977000)\r\n\tlibxcb.so.1 =\u003e /lib/libxcb.so.1 (0x7f2fd794e000)\r\n\tlibXau.so.6 =\u003e /lib/libXau.so.6 (0x7f2fd7949000)\r\n\tlibXdmcp.so.6 =\u003e /lib/libXdmcp.so.6 (0x7f2fd7941000)\r\n```\r\n\r\nI\u0027m not sure how/why vstest.console is linking to that file when it isn\u0027t on my system.  Especially when it looks like it is trying to link to the ld-musl-x86_64.so.1 above.\r\n\r\nAnything I can do to avoid the reference to the missing file for vstest.console?",
                                           "updatedAt":  "2023-04-29T14:43:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bH-hh",
                                           "createdAt":  "2023-04-29T15:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "```\r\n\tlibc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 (0x7f2fd7af2000) \u003c-- Here is the reference\r\n```\r\nand\r\n```\r\n\tlibc.so =\u003e /lib/ld-musl-x86_64.so.1 (0x7f8e0be1c000)\r\n```\r\nare resolving to the same \"ELF intepreter\". Which means if `dotnet` or `vstest.console` are not terminating with SIGABRT etc. it shouldn\u0027t matter which name was encoded in `DT_NEEDED` header, as long as dynamic loader can make sense of it. Dynamic loader is smart and looks beyond  the verbatim names on the filename.\r\n\r\nSo the real question is, is the binary actually failing or some QA/linting took is complaining about the name? If it is former, then please explain a bit, when/how it fails, what\u0027s the exit code when it fails (`echo $?`) etc. If it is latter, then let me show you how to patch the `DT_NEEDED` header to get by the bogus lint warnings:\r\n\r\n(replace aarch64 with x86_64)\r\n```sh\r\n# first check the header\r\n$ readelf -d that_binary\r\nDynamic section at offset 0x92f930 contains 34 entries:\r\n  Tag        Type                         Name/Value\r\n 0x000000000000001d (RUNPATH)            Library runpath: [$ORIGIN/netcoredeps]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libz.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libc.musl-aarch64.so.1]\r\n                                                              ^^^\r\n                                             it will look something like this\r\n....\r\n\r\n# patch it (e.g. `apk add patchelf`)\r\n$ patchelf --replace-needed libc.musl-aarch64.so.1 libc.so that_binary\r\n\r\n# check the headers again\r\n$ readelf -d that_binary\r\nDynamic section at offset 0x92f930 contains 34 entries:\r\n  Tag        Type                         Name/Value\r\n 0x000000000000001d (RUNPATH)            Library runpath: [$ORIGIN/netcoredeps]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libz.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n 0x0000000000000001 (NEEDED)             Shared library: [libc.so]\r\n                                                              ^^^\r\n                                       it \"looks\" good but binary runs the same 😅\r\n....\r\n```",
                                           "updatedAt":  "2023-04-29T15:55:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bI2bZ",
                                           "createdAt":  "2023-04-30T15:08:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmboggs",
                                           "body":  "\u003e ```\r\n\u003e \tlibc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 (0x7f2fd7af2000) \u003c-- Here is the reference\r\n\u003e ```\r\n\u003e \r\n\u003e and\r\n\u003e \r\n\u003e ```\r\n\u003e \tlibc.so =\u003e /lib/ld-musl-x86_64.so.1 (0x7f8e0be1c000)\r\n\u003e ```\r\n\u003e \r\n\u003e are resolving to the same \"ELF intepreter\". Which means if `dotnet` or `vstest.console` are not terminating with SIGABRT etc. it shouldn\u0027t matter which name was encoded in `DT_NEEDED` header, as long as dynamic loader can make sense of it. Dynamic loader is smart and looks beyond the verbatim names on the filename.\r\n\u003e \r\n\u003e So the real question is, is the binary actually failing or some QA/linting took is complaining about the name? If it is former, then please explain a bit, when/how it fails, what\u0027s the exit code when it fails (`echo $?`) etc. If it is latter, then let me show you how to patch the `DT_NEEDED` header to get by the bogus lint warnings:\r\n\u003e \r\nIt\u0027s actually failing for the latter, during the install/package stage of the package process.\r\n\r\n\u003e (replace aarch64 with x86_64)\r\n\u003e \r\n\u003e ```shell\r\n\u003e # first check the header\r\n\u003e $ readelf -d that_binary\r\n\u003e Dynamic section at offset 0x92f930 contains 34 entries:\r\n\u003e   Tag        Type                         Name/Value\r\n\u003e  0x000000000000001d (RUNPATH)            Library runpath: [$ORIGIN/netcoredeps]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libz.so.1]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libc.musl-aarch64.so.1]\r\n\u003e                                                               ^^^\r\n\u003e                                              it will look something like this\r\n\u003e ....\r\n\u003e \r\n\u003e # patch it (e.g. `apk add patchelf`)\r\n\u003e $ patchelf --replace-needed libc.musl-aarch64.so.1 libc.so that_binary\r\n\u003e \r\n\u003e # check the headers again\r\n\u003e $ readelf -d that_binary\r\n\u003e Dynamic section at offset 0x92f930 contains 34 entries:\r\n\u003e   Tag        Type                         Name/Value\r\n\u003e  0x000000000000001d (RUNPATH)            Library runpath: [$ORIGIN/netcoredeps]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libz.so.1]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libstdc++.so.6]\r\n\u003e  0x0000000000000001 (NEEDED)             Shared library: [libc.so]\r\n\u003e                                                               ^^^\r\n\u003e                                        it \"looks\" good but binary runs the same 😅\r\n\u003e ....\r\n\u003e ```\r\n\r\nThanks, tried this a bit yesterday without success.  So there is either another binary in the sdk somewhere that i need to search for or the process that is failing is using something different to check.  I\u0027ll see if I can keep digging into this.",
                                           "updatedAt":  "2023-04-30T15:08:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYLKC",
                                           "createdAt":  "2024-01-20T16:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "Currently this bothers us quite a bit in Gentoo, see https://bugs.gentoo.org/894760 and \"Blocks:\" tag.\r\n\r\nShort term solution is to `patchelf` all .NET-produced binaries conditionally for `musl` installations.",
                                           "updatedAt":  "2024-01-20T16:05:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYLwe",
                                           "createdAt":  "2024-01-20T16:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@agocke Just curious, why do we not link to the more generic name?",
                                           "updatedAt":  "2024-01-20T16:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYgng",
                                           "createdAt":  "2024-01-20T19:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@xgqt, what does this report on gentoo:\r\n\r\n```sh\r\n$ curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --quality daily --channel 9.0 --install-dir ~/.dotnet9\r\n$ ldd ~/.dotnet9/dotnet\r\n$ ~/.dotnet9/dotnet --info # does this fail? it works on alpine and void-linux (musl edition)\r\n```\r\n\r\nAs said, we do not explicitly link against any specific ABI version, we pick a [minimal OS](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md#libc-compatibility) and link against its libc. Meaning if your libc is older or built differently (e.g. with a different or without the SONAME), then it may not be easy for static analyzer / linter etc. to distinguish that the mismatches it has found are not the real issues; the real dynamic loader will resolve this:\r\n`libc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 `",
                                           "updatedAt":  "2024-01-20T19:50:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYh-c",
                                           "createdAt":  "2024-01-20T20:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e @xgqt, what does this report on gentoo:\r\n\u003e \r\n\u003e ```shell\r\n\u003e $ curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --quality daily --channel 9.0 --install-dir ~/.dotnet9\r\n\u003e $ ldd ~/.dotnet9/dotnet\r\n\u003e $ ~/.dotnet9/dotnet --info # does this fail? it works on alpine and void-linux (musl edition)\r\n\u003e ```\r\n\u003e \r\n\u003e As said, we do not explicitly link against any specific ABI version, we pick a [minimal OS](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md#libc-compatibility) and link against its libc. Meaning if your libc is older or built differently (e.g. with a different or without the SONAME), then it may not be easy for static analyzer / linter etc. to distinguish that the mismatches it has found are not the real issues; the real dynamic loader will resolve this: `libc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 `\r\n\r\n@am11 \r\n\r\n\r\nInfo returns:\r\n\r\n```log\r\n.NET SDK:\r\n Version:           9.0.100-alpha.1.24070.2\r\n Commit:            cac6c93287\r\n Workload version:  9.0.100-manifests.0d37fe7a\r\n\r\nRuntime Environment:\r\n OS Name:     gentoo\r\n OS Version:  2.14\r\n OS Platform: Linux\r\n RID:         linux-musl-x64\r\n Base Path:   /root/.dotnet9/sdk/9.0.100-alpha.1.24070.2/\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      9.0.0-alpha.1.24066.33\r\n  Architecture: x64\r\n  Commit:       dbb335c6ba\r\n\r\n.NET SDKs installed:\r\n  9.0.100-alpha.1.24070.2 [/root/.dotnet9/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 9.0.0-alpha.1.24068.16 [/root/.dotnet9/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 9.0.0-alpha.1.24066.33 [/root/.dotnet9/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\n\r\nldd show:\r\n\r\n```log\r\n /lib/ld-musl-x86_64.so.1 (0x7f7264a80000)\r\n        libstdc++.so.6 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libstdc++.so.6 (0x7f7264816000)\r\n        libgcc_s.so.1 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libgcc_s.so.1 (0x7f72647f3000)\r\n        libc.musl-x86_64.so.1 =\u003e /lib/ld-musl-x86_64.so.1 (0x7f7264a80000)\r\n```\r\n\r\n... looks like no failure? ...\r\n\r\nbut lddtree shows:\r\n\r\n```log\r\ndotnet =\u003e /root/.dotnet9/dotnet (interpreter =\u003e /lib/ld-musl-x86_64.so.1)\r\n    libstdc++.so.6 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libstdc++.so.6\r\n        libc.so =\u003e /usr/lib/libc.so\r\n    libgcc_s.so.1 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libgcc_s.so.1\r\n    libc.musl-x86_64.so.1 =\u003e not found\r\n```\r\n\r\n... and it can not find `libc.musl-x86_64.so.1`\r\n\r\n\r\nSo I think that ldd should not be taken as a source of truth here.",
                                           "updatedAt":  "2024-01-20T20:57:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYkMi",
                                           "createdAt":  "2024-01-20T21:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "This is what ldd on libcoreclr.so returns\r\n\r\n```log\r\nfoxylady ~ # ldd ~/.dotnet9/shared/Microsoft.NETCore.App/9.0.0-alpha.1.24066.33/libcoreclr.so\r\n        ldd (0x7f589ffbe000)\r\n        libgcc_s.so.1 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libgcc_s.so.1 (0x7f589f8a9000)\r\n        libstdc++.so.6 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libstdc++.so.6 (0x7f589f653000)\r\n        libc.musl-x86_64.so.1 =\u003e ldd (0x7f589ffbe000)\r\nfoxylady ~ # lddtree ~/.dotnet9/shared/Microsoft.NETCore.App/9.0.0-alpha.1.24066.33/libcoreclr.so\r\nlibcoreclr.so =\u003e /root/.dotnet9/shared/Microsoft.NETCore.App/9.0.0-alpha.1.24066.33/libcoreclr.so (interpreter =\u003e none)\r\n    libgcc_s.so.1 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libgcc_s.so.1\r\n        libc.so =\u003e /usr/lib/libc.so\r\n    libstdc++.so.6 =\u003e /usr/lib/gcc/x86_64-gentoo-linux-musl/13/libstdc++.so.6\r\n    libc.musl-x86_64.so.1 =\u003e not found\r\nfoxylady ~ #\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-01-20T21:06:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xYmKz",
                                           "createdAt":  "2024-01-20T21:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Thanks. So the binary is working flawlessly. Based on this info, you can open a bug with QA tool upstream which is raising false-negatives; assuming the QA tool is supposed to validate \"whether or not the OS `ld` will be able to load the binary and its linked dependencies\" (which is what `ldd` utility reports).",
                                           "updatedAt":  "2024-01-20T21:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xZU68",
                                           "createdAt":  "2024-01-21T00:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e @agocke Just curious, why do we not link to the more generic name?\r\n\r\nWhat do you think @am11 of what @agocke suggested?",
                                           "updatedAt":  "2024-01-21T00:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xhoJK",
                                           "createdAt":  "2024-01-22T19:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "Could any .NET developer point to code that is used to determine what libc is linked when dotnet build/publish is used for producing executables? ",
                                           "updatedAt":  "2024-01-22T19:13:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xhre6",
                                           "createdAt":  "2024-01-22T19:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Could any .NET developer point to code that is used to determine what libc is linked when dotnet build/publish is used for producing executables?\r\n\r\nPretty sure that the executable is build with the native runtime and only patched later with the logo and such.",
                                           "updatedAt":  "2024-01-22T19:21:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xhvbn",
                                           "createdAt":  "2024-01-22T19:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e \u003e Could any .NET developer point to code that is used to determine what libc is linked when dotnet build/publish is used for producing executables?\r\n\u003e \r\n\u003e Pretty sure that the executable is build with the native runtime and only patched later with the logo and such.\r\n\r\nHmm if so by patching runtime linkage \"errors\" we should get \"correct\" exes (for Gentoo).",
                                           "updatedAt":  "2024-01-22T19:32:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xh7Z7",
                                           "createdAt":  "2024-01-22T20:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "If there was any linkage error, none of the executables would run. If executables are running, ignore the naive QA tool.",
                                           "updatedAt":  "2024-01-22T20:04:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xkMtP",
                                           "createdAt":  "2024-01-23T05:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xgqt",
                                           "body":  "\u003e \u003e \u003e Could any .NET developer point to code that is used to determine what libc is linked when dotnet build/publish is used for producing executables?\r\n\u003e \u003e \r\n\u003e \u003e \r\n\u003e \u003e Pretty sure that the executable is build with the native runtime and only patched later with the logo and such.\r\n\u003e \r\n\u003e Hmm if so by patching runtime linkage \"errors\" we should get \"correct\" exes (for Gentoo).\r\n\r\n@MichalPetryka \r\n\r\nI tried to investigate my assumption and hack around with `patchelf`\r\n\r\n```bash\r\nsos=(\r\n    /opt/dotnet-sdk-bin-8.0/dotnet\r\n    /opt/dotnet-sdk-bin-8.0/host/fxr/8.0.1/libhostfxr.so\r\n    /opt/dotnet-sdk-bin-8.0/packs/Microsoft.NETCore.App.Host.linux-musl-x64/8.0.1/runtimes/linux-musl-x64/native/apphost\r\n    /opt/dotnet-sdk-bin-8.0/packs/Microsoft.NETCore.App.Host.linux-musl-x64/8.0.1/runtimes/linux-musl-x64/native/libnethost.so\r\n    /opt/dotnet-sdk-bin-8.0/packs/Microsoft.NETCore.App.Host.linux-musl-x64/8.0.1/runtimes/linux-musl-x64/native/singlefilehost\r\n    /opt/dotnet-sdk-bin-8.0/sdk/8.0.101/AppHostTemplate/apphost\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/createdump\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libSystem.Globalization.Native.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libSystem.IO.Compression.Native.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libSystem.Native.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libSystem.Net.Security.Native.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libSystem.Security.Cryptography.Native.OpenSsl.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libclrgc.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libclrjit.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libcoreclr.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libcoreclrtraceptprovider.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libhostpolicy.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libmscordaccore.so\r\n    /opt/dotnet-sdk-bin-8.0/shared/Microsoft.NETCore.App/8.0.1/libmscordbi.so\r\n)\r\n\r\nfor so in ${sos[@]} ; do\r\n    patchelf --remove-needed libc.musl-x86_64.so.1 $so\r\n    patchelf --add-needed libc.so $so\r\ndone\r\n```\r\n\r\nBut with no success, building a example software - Coco in this case produced a binary still requiring the missing library:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/47485207/405d7cb1-fe14-4fb1-83a1-2046a559e742)\r\n\r\nSo probably the runtime libraries (if any) to build Coco come from core NuGet packages.\r\nWhich means one would have to patch the following NuGets:\r\n\r\n- microsoft.aspnetcore.app.runtime.linux-musl-x64.8.0.1.nupkg \r\n- microsoft.netcore.app.runtime.linux-musl-x64.8.0.1.nupkg\r\n- microsoft.aspnetcore.app.ref.8.0.1.nupkg\r\n- microsoft.netcore.app.ref.8.0.1.nupkg\r\n- microsoft.netcore.app.host.linux-musl-x64.8.0.1.nupkg (most likely the offender)\r\n\r\nThis also means if we compile .NET SDK on Gentoo with musl libc and the resulting package will not have no despondencies on `libc.musl-x86_64.so.1` the software produced by it will gain them! Because a probuilt ` microsoft.netcore.app.host.linux-musl-x64.8.0.1.nupkg` is used.\r\n\r\nEither that or .NET SDK hardcodes `libc.musl-x86_64.so.1` dependency. I have no other ides for now.",
                                           "updatedAt":  "2024-01-23T05:24:28Z"
                                       }
                                   ],
                         "totalCount":  32
                     },
        "title":  ".NET SDK uses wrong libc name on musl libc",
        "labels":  [
                       "question",
                       "source-build",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87811",
        "createdAt":  "2023-06-20T11:43:15Z",
        "number":  87811,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCw1VBw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2023-06-21T11:23:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-14T01:39:26Z",
        "body":  "See https://github.com/dotnet/runtime/pull/87522#issuecomment-1597538017 for details on the situation.\r\n\r\nIn that PR we use a workaround which hooks into the SDK right before the runtime properties are written out and we remove that one property manually.\r\n\r\nThe more correct way to do this would be to:\r\n* Fix https://github.com/dotnet/sdk/issues/32969\r\n* Which would allow us to simplify the logic in https://github.com/dotnet/sdk/blob/1e2e060424ddee16b9ac1ca56c28aeff96647f24/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L145-L178 - specifically revert https://github.com/dotnet/sdk/pull/33004\r\n* Which in turn would allow us to go back to the original form of the `System.Runtime.Serialization.Fromatters.Tests.csproj` which just sets properties",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtZaCYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fU-oV",
                                           "createdAt":  "2023-06-20T18:47:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee https://github.com/dotnet/runtime/pull/87522#issuecomment-1597538017 for details on the situation.\r\n\r\nIn that PR we use a workaround which hooks into the SDK right before the runtime properties are written out and we remove that one property manually.\r\n\r\nThe more correct way to do this would be to:\r\n* Fix https://github.com/dotnet/sdk/issues/32969\r\n* Which would allow us to simplify the logic in https://github.com/dotnet/sdk/blob/1e2e060424ddee16b9ac1ca56c28aeff96647f24/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L145-L178 - specifically revert https://github.com/dotnet/sdk/pull/33004\r\n* Which in turn would allow us to go back to the original form of the `System.Runtime.Serialization.Fromatters.Tests.csproj` which just sets properties\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-20T18:47:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lgg1U",
                                           "createdAt":  "2023-09-01T16:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Now that this has been fixed for runtime/windows, could we take the next steps on this? Or is it blocked on ASP.NET having the same fix?",
                                           "updatedAt":  "2023-09-01T16:35:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IfCgT",
                                           "createdAt":  "2024-08-14T20:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "We need the revert mentioned in https://github.com/dotnet/sdk/issues/32969 before we can switch the tests back to just setting properties (revert https://github.com/dotnet/runtime/pull/87522/commits/b63f588212e4497e8e22bf1a555f17bfba9c04b8).",
                                           "updatedAt":  "2024-08-14T20:40:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61loJi",
                                           "createdAt":  "2025-07-07T21:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Workaround in SDK is reverted now (https://github.com/dotnet/sdk/commit/2ed26645f68c5280848488ef47bd719afb77a537). Once we move to an SDK with that change, we can address this.",
                                           "updatedAt":  "2025-07-07T21:14:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Remove workaround for `EnableUnsafeBinaryFormatterSerialization` runtime property setting in tests",
        "labels":  [
                       "area-Host",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88754",
        "createdAt":  "2023-07-12T17:35:31Z",
        "number":  88754,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCx-k1A==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "YuliiaKovalova",
                                            "createdAt":  "2023-08-16T09:08:17Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-30T16:28:40Z",
        "body":  "There are scenarios where apps need to be launched with `dotnet` host. The big question is how to find the host, with the two obvious places to look being:\r\n\r\n- `PATH`\r\n- apphost configuration (`DOTNET_ROOT`, `/etc/dotnet/install_location`, ...)\r\n\r\nI don\u0027t believe we\u0027ve documented this.\r\n\r\nThis question may be similar to how one locates `node` from code given the use of `nvm`. I haven\u0027t looked at that pattern/guidance, but it seems similar.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuvt9Tw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hVLCt",
                                           "createdAt":  "2023-07-12T17:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere are scenarios where apps need to be launched with `dotnet` host. The big question is how to find the host, with the two obvious places to look being:\r\n\r\n- `PATH`\r\n- apphost configuration (`DOTNET_ROOT`, `/etc/dotnet/install_location`, ...)\r\n\r\nI don\u0027t believe we\u0027ve documented this.\r\n\r\nThis question may be similar to how one locates `node` from code given the use of `nvm`. I haven\u0027t looked at that pattern/guidance, but it seems similar.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-12T17:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVM-f",
                                           "createdAt":  "2023-07-12T17:41:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Depends where you want to do this. In a script something like `which dotnet` is probably a good answer.\r\nFrom code you could use `nethost` library, it finds `hostfxr` for a given application and from there you can go up 2 levels where `dotnet` should live. `nethost` will look at the same things as `apphost` (if used correctly): https://github.com/dotnet/runtime/blob/main/docs/design/features/native-hosting.md#new-host-binary-for-finding-hostfxr",
                                           "updatedAt":  "2023-07-12T17:41:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVPSL",
                                           "createdAt":  "2023-07-12T17:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "This comes up frequently in the C# compiler source code as there are a number of cases where we need to launch a managed process. Effectively we have `csc.dll` and need to launch it as a process but that requires us first finding a `dotnet` to use. The pattern for finding `dotnet` hasn\u0027t been documented and as a result our implementation has been derived by looking at ENV variables set by the runtime, reviewing patterns in other parts of the .NET SDK, etc ... Basically trying to draw from other examples. \r\n\r\nThere are generally two scenarios I think about in this area:\r\n\r\n1. How the C# compiler is executed in the .NET SDK. Essentially what should be the experience when the customer types `dotnet build`? \r\n2. How the C# compiler is executed within our own infrastructure. There is a strong incentive for our own infra to be able to control the `dotnet` that is used when running tools in the SDK. For example the `runtime` repo uses this to effectively dogfood the latest runtime against SDK tools. This is very valuable.\r\n\r\nAfter thinking this through this morning I think the right approach going forward is to **only** consult `$PATH`. Basically find the first `dotnet` instance and use that. This mostly closely mirrors how a customer would run our own tooling and is most likely to line up with their expectations. Basically `dotnet build` uses the same host as `dotnet exec csc`. Further I think this should apply to any tool in the SDK, not just the compiler. \r\n\r\nThat would have the following impact on our product and testing:\r\n\r\n1. Our product code which today consults `$DOTNET_ROOT` or `$DOTNET_HOST_PATH` for the purpose of finding `dotnet` should cease doing so. Instead consult `$PATH` only. \r\n2. Our infra code which was trying to insert a `dotnet` for testing / dogfood purposes by changing values like `$DOTNET_ROOT` should cease doing so. Instead that specific infra run should prepend the directory that contains the recently built `dotnet` to `$PATH` ",
                                           "updatedAt":  "2023-07-12T17:50:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVP_V",
                                           "createdAt":  "2023-07-12T17:49:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "If you\u0027re asking what is `$DOTNET_HOST_PATH` I had the same question. In researching through our code I _believe_ that it is effectively an arcade invention. It\u0027s a mechanism for us to control where arcade puts `dotnet` into our enlistments. Unfortunately this seems to have filtered into our actual production code as well. That feels wrong. \r\n\r\nPerhaps I have the history / intent of this variable wrong and if so please correct me 😄 ",
                                           "updatedAt":  "2023-07-12T17:49:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVUGf",
                                           "createdAt":  "2023-07-12T17:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAt1jQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sandyarmstrong",
                                                                               "createdAt":  "2023-07-14T13:41:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think `DOTNET_HOST_PATH` is something SDK uses - there are many use cases in that repo: https://github.com/search?q=repo%3Adotnet%2Fsdk%20DOTNET_HOST_PATH\u0026type=code\r\nI think it uses it to pass the location of the host from the parent to the child processes, so that child processes use the same SDK/runtime install which was used to run the top level command. It\u0027s possible Arcade uses it as well. But I could be wrong.\r\nFor the usage inside SDK though we might want to keep looking at `DOTNET_HOST_PATH`. The problematic scenario is for example:\r\n```\r\n/my/private/install/dotnet build\r\n```\r\n\r\nThis should spawn the child nodes for msbuild, csc and so on using the runtime/SDK from `/my/private/install` and not look for it on the `PATH`. For example if I have only installed 7.0 globally (so it\u0027s on PATH) but then I run `/my/private/8.0-preview.7/dotnet` then things should just work.\r\n\r\nUnless we also change SDK to modify PATH for its child processes.\r\n\r\nOutside of SDK I agree that `PATH` is probably the best approach. Installers, scripts and users will set `PATH` to point to `dotnet.exe` because we tell them to and because they need it anyway (so that they can run `dotnet build` and similar). It will also be set in CI systems to point to the dotnet from the SDK they want used and so on.\r\n`DOTNET_ROOT` in itself is not enough and there\u0027s much more involved algorithm how to find the runtime if that variable is not set. That\u0027s basically what `nethost` implements.",
                                           "updatedAt":  "2023-07-12T17:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVaWV",
                                           "createdAt":  "2023-07-12T18:18:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e I think DOTNET_HOST_PATH is something SDK uses - \r\n\r\nI 100% agree it uses it, I\u0027m questioning why it does that. The `$DOTNET_HOST_PATH` does not appear to be a variable that we support as a product. The only places I can find where it is set is through arcade, not the customer facing product. As such I\u0027m questioning whether or not those uses in the SDK are correct and at the moment I don\u0027t believe they are. \r\n\r\n\u003e For the usage inside SDK though we might want to keep looking at DOTNET_HOST_PATH.\r\n\r\nWhy though? I\u0027m struggling to see what value it provides vs. always using `$PATH` and just modifying that to use it. \r\n\r\nIf we do want a variable that special cases the SDK though then \r\n\r\n1. We need to universally use it. Today it\u0027s hit and miss from what I can see. \r\n2. Having it called `DOTNET_` feels wrong. This is for effectively our internal testing purposes. Giving it a name like `DOTNTE_` feels like we\u0027re elevating it to an actual .NET feature. \r\n\r\n\r\n",
                                           "updatedAt":  "2023-07-12T18:18:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVeO-",
                                           "createdAt":  "2023-07-12T18:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAt1ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sandyarmstrong",
                                                                               "createdAt":  "2023-07-14T13:42:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e \u003e For the usage inside SDK though we might want to keep looking at DOTNET_HOST_PATH.\r\n\r\n\u003e Why though? I\u0027m struggling to see what value it provides vs. always using $PATH and just modifying that to use it.\r\n\r\nI realized this as well after I sent the response. It would be simpler if SDK just modified `PATH` for its child processes I assume and then everything could use `PATH.\r\n\r\nUnfortunately `PATH` is not great to use - especially on Windows. Historically our guidance (given to us by other teams) was to try to not parse `PATH` and make sense out of it. But maybe it\u0027s OK for just spawning processes, since we can let the OS do it for us I assume.",
                                           "updatedAt":  "2023-07-12T18:30:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVg8u",
                                           "createdAt":  "2023-07-12T18:39:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Historically our guidance (given to us by other teams) was to try to not parse PATH and make sense out of it\r\n\r\nYeah I\u0027m not really thrilled about parsing `$PATH` either. Ended up just stealing the code from [msbuild that does it](https://github.com/dotnet/msbuild/blob/main/src/Utilities/ToolTask.cs#L1259). This is essentially how our entire build tool stack works today so it seems like a good source to draw some code from. \r\n\r\nWould be nice to have an API for `FindOnPath` but that seems unlikely. Also I\u0027d still have to polyfill that for downlevel targets. \r\n\r\n@rainersigwald, @baronfel: have you all ever considered exposing a `FindToolPath` on `ToolTask` or MSBuild APIs in general that we could use to find `dotnet`? That way the logic for parsing `$PATH` is centralized. ",
                                           "updatedAt":  "2023-07-12T18:51:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hViZd",
                                           "createdAt":  "2023-07-12T18:44:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAgpcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2023-07-12T18:48:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rainersigwald",
                                           "body":  "It\u0027s come up before but I couldn\u0027t find an issue so https://github.com/dotnet/msbuild/issues/9018.",
                                           "updatedAt":  "2023-07-12T18:44:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hWWFF",
                                           "createdAt":  "2023-07-12T21:40:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@vitek-karas is there a managed API for finding the location of the muxer? Is this something we want to provide?",
                                           "updatedAt":  "2023-07-12T21:40:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hYNot",
                                           "createdAt":  "2023-07-13T07:46:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "No - we don\u0027t have an API like that. There\u0027s something similar in SDK: https://github.com/dotnet/sdk/blob/a4b77d4fd5e878fd42aef22d86c0668c90888da6/src/Resolvers/Microsoft.DotNet.MSBuildSdkResolver/MSBuildSdkResolver.cs. And there seem to be other versions of this elsewhere, for example: https://github.com/microsoft/MSBuildLocator/blob/master/src/MSBuildLocator/DotNetSdkLocationHelper.cs (this one even mentions that maybe it should use nethost but doesn\u0027t).\r\n`dotnet test` also has something similar, where it is actually looking for `dotnet.exe` in some cases.\r\n\r\nI know we\u0027ve had several discussions with various SDK teams about this in the past, but no specific result. The problem is that there are like 5 versions of this code each with its own set of quirks and it\u0027s too late to change that.",
                                           "updatedAt":  "2023-07-13T07:46:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hhdbn",
                                           "createdAt":  "2023-07-14T17:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBnttw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "sandyarmstrong",
                                                                               "createdAt":  "2023-07-14T19:24:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "vitek-karas",
                                                                               "createdAt":  "2023-07-17T08:12:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2023-07-17T18:43:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2023-07-24T16:12:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "There is one other view to consider which was brought up in https://github.com/dotnet/roslyn/issues/69023. Essentially all the tools that execute as part of an SDK action should use the same `dotnet` host. \r\n\r\nFor example: \r\n\r\n```sh\r\n\u003e export PATH=/some/dotnet/install:$PATH\r\n\u003e which dotnet\r\n/some/dotnet/install/dotnet\r\n\u003e /some/dotnet2/install/dotnet build \r\n```\r\n\r\nIn this view point tools like the compiler would be launched using `/some/dotnet2/install/dotnet` even though it is not the first `dotnet` on `$PATH`. Or possibly it\u0027s not on `$PATH` at all. \r\n\r\nI\u0027m certainly sympathetic to this point of view. Mostly because the opposite view seems quite strange. Basically if I launch `msbuild` with one `dotnet` host and then suddenly other tools are launching with another `dotnet` host that is effectively revealing implementation details of the build. Most of the time they are the same cause the primary customer use case is `dotnet build` without explicit qualification of _which_ `dotnet`. \r\n\r\nIf there was an easy way from a process to find the `dotnet` host that created it then I\u0027d lean towards this as the _primary_ mechanism for finding the `dotnet` host. That cannot be the sole mechanism for finding `dotnet` though as we still need to fall back to `$PATH` lookup in cases where our .NET core tools are loaded from .NET Framework processes. \r\n",
                                           "updatedAt":  "2023-07-14T17:26:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc515kDZ",
                                           "createdAt":  "2024-03-05T06:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I think an API called something like `AppContext.ExecutingMuxerPath` makes sense -- the idea is that we would internally use the native hosting APIs to grab the location of hostfxr, and then from there we would try to find `dotnet.exe` (the muxer) in the expected location.\r\n\r\nThe problem being that there are a number of uncommon configurations where this will not work, including self-contained deployments where there just isn\u0027t a muxer to find. So this API would probably return `null` in a variety of cases where it\u0027s not possible to return a useful path.\r\n\r\n@jaredpar Would this address all scenarios you\u0027re thinking of? I think the basic idea is that this would fix the problem, \"I would like to start a new dotnet process using the same runtime/host that I\u0027m running under.\" It wouldn\u0027t try to solve the problem of launching the \"first\" .NET process (either from native code or from the desktop framework). In those cases you would have to rely on PATH being appropriately configured, or use the native hosting APIs.\r\n\r\nAnother limitation would be that the muxer serves double-duty as the entry point to both the runtime and to the SDK. There\u0027s no guarantee that an SDK will actually be present in any given dotnet process though. So people have to be careful to only use this to execute DLLs, not run SDK commands.",
                                           "updatedAt":  "2024-03-05T06:01:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc516XxG",
                                           "createdAt":  "2024-03-05T08:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e For the usage inside SDK though we might want to keep looking at DOTNET_HOST_PATH.\r\n\u003e \u003e Why though? I\u0027m struggling to see what value it provides vs. always using $PATH and just modifying that to use it.\r\n\r\nI\u0027m also not a fan of overriding PATH and looking into it, because it means that we can\u0027t use a dotnet exe without wrapping it with a batch/pwsh to setup this variable. That\u0027s really not great.\r\n\r\nEven if `DOTNET_HOST_PATH` is not official, it seems that it is still considered and used all over the places as the primary location to look before going to the path, so why not making it official? Could we then always enforce it from dotnet.exe? (when run for the first time without a `DOTNET_HOST_PATH`?)\r\n\r\n\u003e I think an API called something like AppContext.ExecutingMuxerPath makes sense -- the idea is that we would internally use the native hosting APIs to grab the location of hostfxr, and then from there we would try to find dotnet.exe (the muxer) in the expected location.\r\n\r\nHaving an API would be nice, but I would think that making `DOTNET_HOST_PATH` first class would be simpler and would even make it working with launching intermediate sub-child process shells that inherit from this variable and can resolve to dotnet.exe without having to explicitly propagate this variable around. It makes it more consistent to stick with an environment variable to propagate such things between managed and native processes.",
                                           "updatedAt":  "2024-03-05T08:46:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51-Ofq",
                                           "createdAt":  "2024-03-05T17:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e \"I would like to start a new dotnet process using the same runtime/host that I\u0027m running under.\n\nFor me at least that is the primary problem to solve. Basically I have a suite of tools that launch each other and I want them to use the same host. ",
                                           "updatedAt":  "2024-03-05T17:08:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51-PpP",
                                           "createdAt":  "2024-03-05T17:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Having an API would be nice, but I would think that making DOTNET_HOST_PATH first class would be simpler \n\nThis is a proven approach we\u0027ve used in MsBuild and it functions well for this type of scenario. Perhaps this new API just seeds this value more automatically. ",
                                           "updatedAt":  "2024-03-05T17:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51_Nlj",
                                           "createdAt":  "2024-03-05T19:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@elinor-fung Any thoughts on the above? Either a managed API, or setting `DOTNET_HOST_PATH` environment variable when initializing the runtime?",
                                           "updatedAt":  "2024-03-05T19:40:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52A5d7",
                                           "createdAt":  "2024-03-06T02:04:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEchNMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vitek-karas",
                                                                               "createdAt":  "2024-03-06T09:32:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "baronfel",
                                                                               "createdAt":  "2025-07-30T16:25:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "\u003e setting DOTNET_HOST_PATH environment variable when initializing the runtime\r\n\r\nI don\u0027t really want to get the host itself into the business of setting environment variables. I think it would be reasonable to enable something like `AppContext.GetData(\"DOTNET_HOST_PATH\")`.\r\n\r\n\u003e \u003e \"I would like to start a new dotnet process using the same runtime/host that I\u0027m running under.\r\n\u003e \r\n\u003e For me at least that is the primary problem to solve. Basically I have a suite of tools that launch each other and I want them to use the same host.\r\n\r\nIs it the same host that is desired, or the same runtime? Given https://github.com/dotnet/designs/pull/303, those could be different locations. My impression is that the same runtime would be the desire.",
                                           "updatedAt":  "2024-03-06T02:04:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52C0CF",
                                           "createdAt":  "2024-03-06T09:33:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "What about versions? Even if we provide API to get to the same runtime location, there might be several runtimes (and SDKs) installed there. Are the scenarios such that we would also want to be able to use the same version of the runtime/SDK as the currently running process? (I must admit I don\u0027t know exactly how we would do that, just asking what the scenario calls for).",
                                           "updatedAt":  "2024-03-06T09:33:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52C3Uk",
                                           "createdAt":  "2024-03-06T09:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rainersigwald",
                                           "body":  "For build scenarios I _think_ we want \"same runtime and SDK as current MSBuild process\"--at least for SDK built-in tooling like Roslyn. Tools packaged in NuGet packages _may_ want more flexibility but that feels like a good default.",
                                           "updatedAt":  "2024-03-06T09:41:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Eaj3",
                                           "createdAt":  "2024-03-06T13:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e I don\u0027t really want to get the host itself into the business of setting environment variables\r\n\r\nOn that topic, I have been having a difficult time to track down which process/main is actually setting `DOTNET_HOST_PATH`? When we are referring to `DOTNET_HOST_PATH`, is it acknowledged that it is only about the muxer? (`dotnet` exe, in the SDK situation)",
                                           "updatedAt":  "2024-03-06T13:25:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Ehxv",
                                           "createdAt":  "2024-03-06T13:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e For build scenarios I _think_ we want \"same runtime and SDK as current MSBuild process\"--at least for SDK built-in tooling like Roslyn. Tools packaged in NuGet packages _may_ want more flexibility but that feels like a good default.\r\n\r\nBy curiosity, how do we propagate from process to process the same runtime? (assuming we go through the `dotnet` muxer?) Do we point to the `dotnet path/sdk/x.y.z/dotnet.dll` in a specific SDK version folder?",
                                           "updatedAt":  "2024-03-06T13:39:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Fg8g",
                                           "createdAt":  "2024-03-06T15:37:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e I don\u0027t really want to get the host itself into the business of setting environment variables. I think it would be reasonable to enable something like AppContext.GetData(\"DOTNET_HOST_PATH\").\r\n\r\nI understand, and agree with, the reluctance for the runtime to be setting environment variables. At the same time though it would seem odd if the runtime is giving an API to find the host executable but then our SDK tool chain is effectively inventing another mechanism via `$DOTNET_HOST_PATH` environment variable. If we go with a new API then I think we need to consider moving the SDK to using that mechanism as the primary mode.\r\n\r\n\u003e Is it the same host that is desired, or the same runtime?\r\n\r\nAgree it\u0027s the same runtime. Basically the location we can `dotnet exec` with to get the same runtime executing the current process.\r\n",
                                           "updatedAt":  "2024-03-06T15:37:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Iwe2",
                                           "createdAt":  "2024-03-06T23:06:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e Is it the same host that is desired, or the same runtime? Given https://github.com/dotnet/designs/pull/303, those could be different locations. My impression is that the same runtime would be the desire.\r\n\r\nActually, I don\u0027t think my statement was well-defined. What DOTNET_HOST_PATH is intended to do is point to a muxer that can run the target binary. There\u0027s no guarantee that binary will end up actually using the same runtime, due to all the decisions that happen when loading the binary (roll-forward, etc).\r\n\r\nI think my proposal is: find the muxer associated with the current hostfxr, if one exists. Run under that muxer. No guarantees about SDK or runtime.",
                                           "updatedAt":  "2024-03-07T07:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52IyNT",
                                           "createdAt":  "2024-03-06T23:13:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e I understand, and agree with, the reluctance for the runtime to be setting environment variables. At the same time though it would seem odd if the runtime is giving an API to find the host executable but then our SDK tool chain is effectively inventing another mechanism via `$DOTNET_HOST_PATH` environment variable. If we go with a new API then I think we need to consider moving the SDK to using that mechanism as the primary mode.\r\n\r\nI think there are potentially two different scenarios here: do you want tools launched under your process to know that this is a .NET process and where it was launched from? Or do you simply want managed processes to be able to find a compatible muxer?\r\n\r\nI think of this as the divide between native children and managed children. If you want native children to know the location of the muxer, you probably want to use an environment variable. But also, I don\u0027t think this is an appropriate contract to use for the .NET runtime -- we wouldn\u0027t want to automatically pollute the environment variable space of child processes.\r\n\r\nConversely, a managed API is effectively an entirely internal contract to a .NET binary. That\u0027s definitely the kind of thing that makes sense to build into every .NET app.\r\n\r\nSo I think an AppContext switch makes a lot of sense as a universal host feature, and environment variable less so. But, I would also find it reasonable if the `dotnet` CLI/SDK, in particular, wanted to have all child processes inherit a .NET-specific variable. That would be something unique to running tools under the SDK and we wouldn\u0027t expect, say, a random WinForms app to start passing its muxer path to native child processes. ",
                                           "updatedAt":  "2024-03-07T07:53:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sI8Np",
                                           "createdAt":  "2025-05-17T03:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zivkan",
                                           "body":  "FWIW, I just lost over a day of productivity, which could have been avoided if there was an API to allow apps to launch child processes with the same dotnet muxer as the parent process.\n\nI\u0027m creating a new command for the dotnet SDK, and the dotnet SDK sets the DOTNET_HOST_PATH environment variable which our product code uses. But I\u0027m working in the NuGet.Client repo, so integration tests can\u0027t run the command as a child process until after the new command is inserted into the dotnet sdk repo. So, I used a console app as a temporary alternative to running the final dotnet command. But in order to solve `Environment.GetEnvironmentVariable`\u0027s nullable warning, my first mistake was to fallback to `dotnet` on the PATH. Though a comedy of several other errors that is not relevant to this issue, it took me hours to figure out and solve, finally setting the environment variable in the test.",
                                           "updatedAt":  "2025-05-17T03:31:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc636Dti",
                                           "createdAt":  "2025-07-17T20:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEchNjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2025-07-29T04:17:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2025-07-29T04:22:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "baronfel",
                                                                               "createdAt":  "2025-07-30T16:26:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Here\u0027s what I\u0027m thinking for using `AppContext` data - `AppContext.GetData(\"DOTNET_HOST_PATH\")` would be a string value:\n- Absolute path pointing to the `dotnet` executable corresponding to the runtime being used to run the application\n- Not necessarily the same as the running process or the `dotnet` for the loaded `hostfxr`:\n  - with local SDK paths, the running `dotnet` and `hostfxr` may not correspond to the runtime used to run the SDK .dll\n  - when using `apphost`, the `apphost` is the executing process, but the property points at the `dotnet` corresponding to the runtime that was resolved for the app. \n- Not set for scenarios where there is no corresponding `dotnet` for the runtime - for example: self-contained, NativeAOT, using a .NET runtime install that (for whatever reason) doesn\u0027t have a `dotnet` executable\n- No guarantee that an app launched through that `dotnet` will actually use the same runtime and frameworks versions\n  - runtime version for the current app will be available to that `dotnet`, along with any other versions under that install\n  - whether or not that same version is used depends on configuration (target version, roll forward) of what is being launched\n- No guarantee that any SDK is available to that `dotnet` - unless the original app is the SDK\u0027s `dotnet.dll` itself\n\nWould that make sense / actually be useful for folks here?",
                                           "updatedAt":  "2025-07-17T20:58:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc636sz7",
                                           "createdAt":  "2025-07-17T21:44:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "With this proposal, is it going to be possible to replace https://github.com/dotnet/sdk/blob/ea7c246d30be4db27c9d265afef7162dce8d3ed1/src/Cli/Microsoft.DotNet.Cli.Utils/Muxer.cs#L39-L77 in .NET SDK with just `_muxerPath = AppContext.GetData(\"DOTNET_HOST_PATH\")`?",
                                           "updatedAt":  "2025-07-17T21:44:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6369vK",
                                           "createdAt":  "2025-07-17T22:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "As it exists now, I believe so. With https://github.com/dotnet/sdk/issues/49667 for shipping the dotnet CLI as a native AOT application, if the native AOT SDK needs to launch a regular .NET app, I think it would still need some fallback of looking relative to itself.\n\n@jaredpar @rainersigwald @baronfel - please correct me if I\u0027m missing something.",
                                           "updatedAt":  "2025-07-17T22:19:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc637K2w",
                                           "createdAt":  "2025-07-17T22:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "I wrote a doc today based on some findings that echo what folks here are saying I think: https://hackmd.io/pKvDHW89TwOKPbG7FvnLWw\n\nI think we need more shared components similar to the MSBuild SdkResolvers, but for general IDE/tooling scenarios outside of MSBuild. @elinor-fung I\u0027d especially like your eyes on that^",
                                           "updatedAt":  "2025-07-17T22:54:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66-31P",
                                           "createdAt":  "2025-07-30T16:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc9Pbw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elinor-fung",
                                                                               "createdAt":  "2025-07-30T17:06:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2025-08-04T05:50:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "baronfel",
                                           "body":  "\u003e As it exists now, I believe so. With [dotnet/sdk#49667](https://github.com/dotnet/sdk/issues/49667) for shipping the dotnet CLI as a native AOT application, if the native AOT SDK needs to launch a regular .NET app, I think it would still need some fallback of looking relative to itself.\n\u003e \n\u003e [@jaredpar](https://github.com/jaredpar) [@rainersigwald](https://github.com/rainersigwald) [@baronfel](https://github.com/baronfel) - please correct me if I\u0027m missing something.\n\nYeah, in that case we\u0027d still need to trampoline but @agocke has already shown a way forward there. I\u0027m very happy with this AppContext approach 👍  ",
                                           "updatedAt":  "2025-07-30T16:28:39Z"
                                       }
                                   ],
                         "totalCount":  31
                     },
        "title":  "Write guidance on how to launch (non apphost) apps",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89034",
        "createdAt":  "2023-07-17T17:26:29Z",
        "number":  89034,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxXCAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2023-07-17T19:10:47Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T21:06:45Z",
        "body":  "The runtime / host / sdk uses aka.ms links with varying formats.\r\n\r\n\u003e Notice that these two links end up at the same place:\r\n\u003e \r\n\u003e - https://aka.ms/dotnet-core-applaunch\r\n\u003e - https://aka.ms/dotnet/download\r\n\u003e \r\n\u003e I can easily point the latter link to point to the same place as the former. I own both links.\r\n\u003e \r\n\u003e If we make this change, we should also change this link to match.\r\n\u003e \r\n\u003e ```bash\r\n\u003e Learn about framework resolution:\r\n\u003e https://aka.ms/dotnet/app-launch-failed\r\n\u003e ```\r\n\u003e \r\n\u003e We could change that to:\r\n\u003e \r\n\u003e https://aka.ms/dotnet/app/failed\r\n\u003e \r\n\u003e I have two goals here:\r\n\u003e \r\n\u003e - Switch to more memorable and human-centric terms.\r\n\u003e - Switch to slashes, which we use elsewhere and are more natural for URLs.\r\n\u003e \r\n\r\n_Originally posted by @richlander in https://github.com/dotnet/runtime/issues/88359#issuecomment-1622879975_\r\n\r\ncc @mairaw ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYauL1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hqypZ",
                                           "createdAt":  "2023-07-17T17:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Searching through runtime repo, links we may want to consider for the goals @richlander outlined:\r\n\r\n### Download links\r\n- https://aka.ms/dotnet/download is used as the generic install link\r\n- https://aka.ms/dotnet-core-applaunch is used when failing to launch an app due to missing runtime / framework - handles various query parameters to redirect to a specific download.\r\nhttps://github.com/dotnet/runtime/blob/9ffdb53540ce286438a769b3e1950c4d99b630f0/src/native/corehost/hostmisc/utils.h#L18-L19\r\n- Issue for adding a download link for missing SDK: https://github.com/dotnet/sdk/issues/26255\r\n  - Doesn\u0027t exist yet, but whatever we do should be consistent with anything we do here\r\n\r\n### Pre-requisites doc links\r\n\r\n- https://aka.ms/nativeaot-prerequisites\r\n- https://github.com/dotnet/runtime/blob/9ffdb53540ce286438a769b3e1950c4d99b630f0/src/native/corehost/hostmisc/utils.h#L12-L17\r\n\r\n### Failure info links\r\n\r\n- https://aka.ms/dotnet-illink/com\r\n- https://aka.ms/dotnet-illink/nativehost\r\n- https://aka.ms/dotnet/app-launch-failed\r\n- https://aka.ms/dotnet/sdk-not-found\r\n\r\n@richlander / @mairaw could you suggest new links (or existing ones we should use instead)?\r\n\r\ncc @agocke @LakshanF @MichalStrehovsky @vitek-karas as owners of some of the aka.ms links",
                                           "updatedAt":  "2023-07-17T18:22:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hq4vW",
                                           "createdAt":  "2023-07-17T18:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe runtime / host / sdk uses aka.ms links with varying formats.\r\n\r\n\u003e Notice that these two links end up at the same place:\r\n\u003e \r\n\u003e - https://aka.ms/dotnet-core-applaunch\r\n\u003e - https://aka.ms/dotnet/download\r\n\u003e \r\n\u003e I can easily point the latter link to point to the same place as the former. I own both links.\r\n\u003e \r\n\u003e If we make this change, we should also change this link to match.\r\n\u003e \r\n\u003e ```bash\r\n\u003e Learn about framework resolution:\r\n\u003e https://aka.ms/dotnet/app-launch-failed\r\n\u003e ```\r\n\u003e \r\n\u003e We could change that to:\r\n\u003e \r\n\u003e https://aka.ms/dotnet/app/failed\r\n\u003e \r\n\u003e I have two goals here:\r\n\u003e \r\n\u003e - Switch to more memorable and human-centric terms.\r\n\u003e - Switch to slashes, which we use elsewhere and are more natural for URLs.\r\n\u003e \r\n\r\n_Originally posted by @richlander in https://github.com/dotnet/runtime/issues/88359#issuecomment-1622879975_\r\n\r\ncc @mairaw \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eelinor-fung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-17T18:09:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Simplify aka.ms/dotnet links used in runtime/host",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89849",
        "createdAt":  "2023-08-02T12:26:30Z",
        "number":  89849,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T12:26:36Z",
        "body":  "Currently `AssemblyDependencyResolver` does all the work in its constructor and caches the results for later use. Consider doing this lazily by storing the path to the assembly and only process its `.deps.json` when there\u0027s a first query on its contents.\r\n\r\nTo keep decent usability we should probably check the assembly path for existence in the `.ctor` and throw if it doesn\u0027t exist. But all the other failure modes would move from the constructor to the first usage.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYxHs_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jEez8",
                                           "createdAt":  "2023-08-02T12:26:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently `AssemblyDependencyResolver` does all the work in its constructor and caches the results for later use. Consider doing this lazily by storing the path to the assembly and only process its `.deps.json` when there\u0027s a first query on its contents.\r\n\r\nTo keep decent usability we should probably check the assembly path for existence in the `.ctor` and throw if it doesn\u0027t exist. But all the other failure modes would move from the constructor to the first usage.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-02T12:26:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider postponing reading and parsing of `.deps.json` in `AssemblyDependencyResolver`",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90883",
        "createdAt":  "2023-08-21T18:23:51Z",
        "number":  90883,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyFx8g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2023-08-21T19:07:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2023-08-22T05:41:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-12T20:48:36Z",
        "body":  "Now that we\u0027ve retired the \"full\" RID graph and only support portable RIDs, the \"portable\" RIDs only have three axis that matter: the base OS name, the (optional) libc name, and the CPU architecture name.\r\n\r\nPorting dotnet to any of these will involve updating the host and the SDK to understand the new options. We should right down a simple instruction doc on what needs to be updated and where to update it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZIrJYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kislg",
                                           "createdAt":  "2023-08-21T18:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNow that we\u0027ve retired the \"full\" RID graph and only support portable RIDs, the \"portable\" RIDs only have three axis that matter: the base OS name, the (optional) libc name, and the CPU architecture name.\r\n\r\nPorting dotnet to any of these will involve updating the host and the SDK to understand the new options. We should right down a simple instruction doc on what needs to be updated and where to update it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-21T18:24:08Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add docs for porting dotnet to a new OS/arch/libc",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94519",
        "createdAt":  "2023-11-08T14:04:22Z",
        "number":  94519,
        "author":  "Gaoyifei1011",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-10T14:30:29Z",
        "body":  "### Description\r\n\r\nIs there a way to modify the file properties of the exe generated after .NET compilation?\r\n是否有方法修改.net编译后生成的exe的文件属性？\r\n\r\nIn the solution of cpp project, we can add.rc resource file to modify the file properties of the compiled exe program. In c#, most of the properties can be modified, but OriginalFileName and InteralFileName cannot be modified.\r\n在cpp项目的解决方案中，我们可以添加.rc的资源文件来修改编译后exe程序的文件属性，在c#中，大部分属性可以被修改，然而OriginalFileName和InteralFileName这两个属性却无法修改。\r\n\r\nWhen the application is PublishSingleFile and AOT published, the name generated by the application is xxx.exe, but InternalFileName and OriginalFileName in the file properties still show xxx.dll. Is there any way to change it to xxx.exe?\r\n当应用程序采用单文件捆绑发布（PublishSingleFile）和AOT发布时，应用程序生成的名称为xxx.exe，然而文件属性中的InternalFileName和OriginalFileName仍然显示xxx.dll，有没有什么方法将其修改为xxx.exe呢？\r\n\r\n![image](https://github.com/dotnet/runtime/assets/49179966/c0f5e318-4301-4577-8113-9f58cb19525b)\r\n\r\n\r\n### Reproduction Steps\r\n\r\nNone\r\n\r\n### Expected behavior\r\n\r\nOrigianlFileName and InternalFileName value should be xxx.exe after publishsinglefile and aot publish\r\n\r\n### Actual behavior\r\n\r\nOrigianlFileName and InternalFileName value are xxx.dll after publishsinglefile and aot publish\r\n\r\n### Regression?\r\n\r\nThese two properties appear as xxx.exe in the.NET framework and xxx.dll in the.NET core\r\n这两个属性在.net framework中显示为xxx.exe，在.net core中显示为xxx.dll\r\n\r\n### Known Workarounds\r\n\r\nI can only use the ResourceHacker and xxx.res files to manually modify the file properties after the application compiles\r\n我只能使用ResourceHacker和xxx.res文件在应用程序编译完成后手动修改文件属性\r\n\r\n### Configuration\r\n\r\n.net 8\r\n\r\n### Other information\r\n\r\nProvide the Settings options for modifying OriginalFileName and InternalFileName\r\n请提供修改OriginalFileName和InternalFileName的设置选项",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc3RylA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5raMAV",
                                           "createdAt":  "2023-11-08T14:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nIs there a way to modify the file properties of the exe generated after .NET compilation?\r\n是否有方法修改.net编译后生成的exe的文件属性？\r\n\r\nIn the solution of cpp project, we can add.rc resource file to modify the file properties of the compiled exe program. In c#, most of the properties can be modified, but OriginalFileName and InteralFileName cannot be modified.\r\n在cpp项目的解决方案中，我们可以添加.rc的资源文件来修改编译后exe程序的文件属性，在c#中，大部分属性可以被修改，然而OriginalFileName和InteralFileName这两个属性却无法修改。\r\n\r\nWhen the application is PublishSingleFile and AOT published, the name generated by the application is xxx.exe, but InternalFileName and OriginalFileName in the file properties still show xxx.dll. Is there any way to change it to xxx.exe?\r\n当应用程序采用单文件捆绑发布（PublishSingleFile）和AOT发布时，应用程序生成的名称为xxx.exe，然而文件属性中的InternalFileName和OriginalFileName仍然显示xxx.dll，有没有什么方法将其修改为xxx.exe呢？\r\n\r\n![image](https://github.com/dotnet/runtime/assets/49179966/c0f5e318-4301-4577-8113-9f58cb19525b)\r\n\r\n\r\n### Reproduction Steps\r\n\r\nNone\r\n\r\n### Expected behavior\r\n\r\nOrigianlFileName and InternalFileName value should be xxx.exe after publishsinglefile and aot publish\r\n\r\n### Actual behavior\r\n\r\nOrigianlFileName and InternalFileName value are xxx.dll after publishsinglefile and aot publish\r\n\r\n### Regression?\r\n\r\nThese two properties appear as xxx.exe in the.NET framework and xxx.dll in the.NET core\r\n这两个属性在.net framework中显示为xxx.exe，在.net core中显示为xxx.dll\r\n\r\n### Known Workarounds\r\n\r\nI can only use the ResourceHacker and xxx.res files to manually modify the file properties after the application compiles\r\n我只能使用ResourceHacker和xxx.res文件在应用程序编译完成后手动修改文件属性\r\n\r\n### Configuration\r\n\r\n.net 8\r\n\r\n### Other information\r\n\r\nProvide the Settings options for modifying OriginalFileName and InternalFileName\r\n请提供修改OriginalFileName和InternalFileName的设置选项\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGaoyifei1011\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-08T14:42:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5raMGM",
                                           "createdAt":  "2023-11-08T14:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Not really a host question, probably Roslyn",
                                           "updatedAt":  "2023-11-08T14:42:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ralMp",
                                           "createdAt":  "2023-11-08T15:32:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQ2AOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2023-11-08T20:10:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NCLnclNCL",
                                                                               "createdAt":  "2023-11-09T02:03:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "redflitzi",
                                                                               "createdAt":  "2023-12-30T16:32:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This might be a host (or rather SDK part of host). It\u0027s true that when Roslyn compiles the code it produces `app.dll` and so it embeds those values. But when we build an app from it in the SDK we take those same native resources and embed them into `app.exe` (single-file or not really) without any modification.\r\n\r\nIt would make sense to modify these to `.exe`. But we would have to be careful, it\u0027s possible to modify this by hand (Roslyn allows an rc file as input, in which case we would not want to touch it).",
                                           "updatedAt":  "2023-11-08T15:32:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5reVBY",
                                           "createdAt":  "2023-11-09T03:37:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gaoyifei1011",
                                           "body":  "\u003e This might be a host (or rather SDK part of host). It\u0027s true that when Roslyn compiles the code it produces `app.dll` and so it embeds those values. But when we build an app from it in the SDK we take those same native resources and embed them into `app.exe` (single-file or not really) without any modification.\r\n\u003e \r\n\u003e It would make sense to modify these to `.exe`. But we would have to be careful, it\u0027s possible to modify this by hand (Roslyn allows an rc file as input, in which case we would not want to touch it).\r\n\r\nSo there isn\u0027t a viable solution at the moment?",
                                           "updatedAt":  "2023-11-09T03:37:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rfGn-",
                                           "createdAt":  "2023-11-09T07:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e So there isn\u0027t a viable solution at the moment?\r\n\r\nAt the moment, the only documented option is to pass your own res file:\r\n\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cWin32Resource\u003enameofresfile.res\u003c/Win32Resource\u003e\r\n\u003c/PropertyGroup\u003e\r\n```\r\n\r\nThis will work for both AOT and single file. You have to create your res file. ResHacker can do it and there are other tools.\r\n\r\nAs for undocumented options (that could break in .NET 9, but are unlikely to break in .NET 8), for AOT you could do below. It will not work for single file.\r\n\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cTargetExt Condition=\"\u0027$(_IsPublishing)\u0027 == \u0027true\u0027 and \u0027$(PublishAot)\u0027 == \u0027true\u0027\"\u003e.exe\u003c/TargetExt\u003e\r\n\u003c/PropertyGroup\u003e\r\n```",
                                           "updatedAt":  "2023-11-09T07:51:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rfqau",
                                           "createdAt":  "2023-11-09T09:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODWPLSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "redflitzi",
                                                                               "createdAt":  "2024-02-10T13:19:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Gaoyifei1011",
                                           "body":  "\u003e \u003e So there isn\u0027t a viable solution at the moment?\r\n\u003e \r\n\u003e At the moment, the only documented option is to pass your own res file:\r\n\u003e \r\n\u003e ```\r\n\u003e \u003cPropertyGroup\u003e\r\n\u003e   \u003cWin32Resource\u003enameofresfile.res\u003c/Win32Resource\u003e\r\n\u003e \u003c/PropertyGroup\u003e\r\n\u003e ```\r\n\u003e \r\n\u003e This will work for both AOT and single file. You have to create your res file. ResHacker can do it and there are other tools.\r\n\u003e \r\n\u003e As for undocumented options (that could break in .NET 9, but are unlikely to break in .NET 8), for AOT you could do below. It will not work for single file.\r\n\u003e \r\n\u003e ```\r\n\u003e \u003cPropertyGroup\u003e\r\n\u003e   \u003cTargetExt Condition=\"\u0027$(_IsPublishing)\u0027 == \u0027true\u0027 and \u0027$(PublishAot)\u0027 == \u0027true\u0027\"\u003e.exe\u003c/TargetExt\u003e\r\n\u003e \u003c/PropertyGroup\u003e\r\n\u003e ```\r\n\r\nWell, thanks for your help. This is indeed a more viable solution at the moment. Hopefully, in future releases, changes will be made to address this issue",
                                           "updatedAt":  "2023-11-09T09:26:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zdHKU",
                                           "createdAt":  "2024-02-10T13:46:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "redflitzi",
                                           "body":  "Tried this solution for me, as I also would like to see `MyApp.exe` instead of `MyApp.dll` as Original Filename of the Windows file properties.\r\nI use .NET 8, PublishSingleFile and SelfContained.\r\n\r\nIn my .csproj I tried:\r\n`\u003cTargetExt Condition=\"\u0027$(RuntimeIdentifier)\u0027 == \u0027win-x64\u0027\"\u003e.exe\u003c/TargetExt\u003e`\r\n\r\nBut unfortunately it throws an error:\r\n`\r\n/usr/share/dotnet/sdk/8.0.101/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.ConflictResolution.targets(112,5): error NETSDK1152: Found multiple publish output files with the same relative path: /workspaces/MyApp/main/obj/Release/net8.0/win-x64/singlefilehost.exe, obj/Release/net8.0/win-x64/R2R/MyApp.exe. [/workspaces/MyApp/main/MyApp.csproj]\r\n`\r\n\r\nIt is in fact very ugly to deploy a software that has this irritating .dll ending in the Original Filename.\r\nAnd Yes there is a reasons to do so, as the \".exe\" is made from the \".dll\".\r\n\r\nBut it is unnecessary and misleading because the file was not renamed by anyone (which is suggested by the divergent naming), and I would prefer to show the customer a \"MyApp.exe\" there, which is what he received.\r\n\r\nSo I would be very happy if this behavior could be improved.\r\n\r\n**Edit:**\r\n\r\nSince renaming the .dll (which is what the TargetExt property does) happens basically just for cosmetic reasons, I now renamed it to .exe plus an invisible space [U+200E].\r\nThis way it also works for SingleFile.\r\n\r\n`\u003cTargetExt Condition=\"\u0027$(RuntimeIdentifier)\u0027 == \u0027win-x64\u0027\"\u003e.exe‎[U+200E]\u003c/TargetExt\u003e`\r\n(You cannot type the opening bracket etc, but insert the invisible character with your editor.)\r\n\r\nNow The Original filename looks good in the file properties display, but it feels a bit hacky...\r\n",
                                           "updatedAt":  "2024-02-10T14:30:29Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Is there a way to modify the file properties of the exe generated after .NET compilation?",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96299",
        "createdAt":  "2023-12-19T19:41:50Z",
        "number":  96299,
        "author":  "maltalex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHompA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gusarov",
                                            "createdAt":  "2023-12-19T19:52:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladimir-bukreev",
                                            "createdAt":  "2023-12-19T21:37:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yuriShafet",
                                            "createdAt":  "2024-01-12T19:32:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevin0x90",
                                            "createdAt":  "2025-05-07T20:52:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2025-07-18T22:17:55Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-18T21:41:06Z",
        "body":  "### Describe the bug\r\n\r\ndotnet.exe silently ignores global.json with a \"wrong\" sdk version like \"6.0\" or \"3.1\" (as opposed to \"6.0.0\" or \"3.1.0\").\r\n\r\n### To Reproduce\r\nInstall .Net SDK, create an empty directory with a global.json file with a two digit SDK version:\r\n\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"6.0\"\r\n  }\r\n}\r\n```\r\n\r\nNow, run `dotnet --info` in the directory and observe output similar to the following:\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.6c33ef20\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.6c33ef20\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n...\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\r\nNote that dotnet reports that `global.json` hasn\u0027t been found. Commands like `dotnet --version` or `dotnet build` will **silently** use the latest SDK instead of requiring .NET 6 as was intended by global.json. The expected behavior in this case would be to either treat \"6.0\" as \"6.0.0\" or to show an error to point out the invalid version number.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuDmarw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vYJqO",
                                           "createdAt":  "2023-12-24T07:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "I guess it would be safe to consider 0 if the patch version is not available. Moreover, I guess if the Major version is mentioned, then it will be safe to consider the other version to be at 0. \r\n\r\nFor example in global json `\"version\": \"6\"` would be equivalent to `\"version\": \"6.0.0\"`",
                                           "updatedAt":  "2023-12-24T07:52:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYJqP",
                                           "createdAt":  "2023-12-24T08:04:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Suppose that change is implemented in .NET 9 for example, the computer has both .NET 6 SDK and .NET 9 SDK installed, global.json says \"version\": \"6\", and the dotnet.exe of .NET 9 correctly treats that as meaning \"6.0.0\" — then will .NET 6 SDK parse global.json again and fail somehow because it does not support the abbreviated syntax?",
                                           "updatedAt":  "2023-12-24T08:04:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYJqQ",
                                           "createdAt":  "2023-12-24T08:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "It needs to be backported to the supported version of .NET I guess to get this working. \r\n\r\nI wonder why this was not the default behavior in SDK, strange. ",
                                           "updatedAt":  "2023-12-24T08:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYJqR",
                                           "createdAt":  "2023-12-24T09:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "I guess, this issue needs to be moved to dotnet/runtime repo, as global.json printing is done there and hopefully parsing as well. \r\n\r\nhttps://github.com/dotnet/runtime/blob/955604c6620d0eaf9a10b4591449e377a6faa7d3/src/native/corehost/fxr/command_line.cpp#L323-L328\r\n\r\n\r\n",
                                           "updatedAt":  "2023-12-24T09:08:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYJqS",
                                           "createdAt":  "2023-12-24T09:27:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "After doing more research below is the line where we parse global.json file and read it\u0027s version tag. \r\nhttps://github.com/dotnet/runtime/blob/955604c6620d0eaf9a10b4591449e377a6faa7d3/src/native/corehost/fxr/sdk_resolver.cpp#L284\r\n\r\nBelow is the line where we parse the actual version string\r\nhttps://github.com/dotnet/runtime/blob/955604c6620d0eaf9a10b4591449e377a6faa7d3/src/native/corehost/fxr/fx_ver.cpp#L272-L273",
                                           "updatedAt":  "2023-12-24T09:27:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYJrH",
                                           "createdAt":  "2023-12-24T22:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\n\r\ndotnet.exe silently ignores global.json with a \"wrong\" sdk version like \"6.0\" or \"3.1\" (as opposed to \"6.0.0\" or \"3.1.0\").\r\n\r\n### To Reproduce\r\nInstall .Net SDK, create an empty directory with a global.json file with a two digit SDK version:\r\n\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"6.0\"\r\n  }\r\n}\r\n```\r\n\r\nNow, run `dotnet --info` in the directory and observe output similar to the following:\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.6c33ef20\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.6c33ef20\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n...\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\r\nNote that dotnet reports that `global.json` hasn\u0027t been found. Commands like `dotnet --version` or `dotnet build` will **silently** use the latest SDK instead of requiring .NET 6 as was intended by global.json. The expected behavior in this case would be to either treat \"6.0\" as \"6.0.0\" or to show an error to point out the invalid version number.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaltalex\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-24T22:11:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vYtYy",
                                           "createdAt":  "2023-12-25T05:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If global.json specifies `\"version\": \"9.0\"` and you have versions 9.0.100 and 9.0.200 installed, then which one should it run — should a less-than-three-part version number imply some kind of roll-forward when `\"rollForward\"` is not explicitly specified?\n\nPerhaps it\u0027s better to just report an error about the unsupported version number format; then the roll-forward ambiguity won\u0027t arise.",
                                           "updatedAt":  "2023-12-25T05:26:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vY1xq",
                                           "createdAt":  "2023-12-25T06:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "\u003e If global.json specifies \"version\": \"9.0\" and you have versions 9.0.100 and 9.0.200 installed, then which one should it run\r\n\r\nYeah, this is correct, I missed this totally. I am not sure why we start from `.100` patch version instead of going from `0`,. \r\n\r\nBut anyway, I guess it would be good if we just showed an error if the version specified it\u0027s just 2 digits. ",
                                           "updatedAt":  "2023-12-25T06:34:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vaCR5",
                                           "createdAt":  "2023-12-25T19:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e I am not sure why we start from .100 patch version instead of going from 0,.\n\nI guess it is a way to distinguish .NET SDK version numbers from .NET Runtime version numbers.",
                                           "updatedAt":  "2023-12-25T19:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vcc0G",
                                           "createdAt":  "2023-12-26T19:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@KalleOlaviNiemitalo It\u0027s actually a way to have four-part version number inside a three-part version number. So 9.0.100 is effectively 9.0.1.0. What is somewhat funny is that the second part will always be zero (but that\u0027s only the case since .Net Core 3.1).",
                                           "updatedAt":  "2023-12-26T19:19:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wo6s2",
                                           "createdAt":  "2024-01-12T18:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Related:\r\n- https://github.com/dotnet/runtime/issues/94496\r\n\r\nAs in the above, I don\u0027t think it is worth making a breaking change to make it fail instead of ignore the global.json. But updating the output of `--info` to indicate that it was found but invalid / ignored for whatever reason would be good - similar to https://github.com/dotnet/runtime/issues/94496#issuecomment-1800339684.",
                                           "updatedAt":  "2024-01-12T18:34:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wpAj4",
                                           "createdAt":  "2024-01-12T18:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODSSumA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yuriShafet",
                                                                               "createdAt":  "2024-01-12T19:01:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gusarov",
                                                                               "createdAt":  "2024-01-12T19:18:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "maltalex",
                                           "body":  "@elinor-fung I\u0027m sorry, but that\u0027s a bad solution. No one actively runs `--info` after updating their `global.json` to check whether the change worked. You\u0027ll just be preserving the current state of **silent** failure, which is the worst possible outcome.",
                                           "updatedAt":  "2024-01-12T18:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wpIOw",
                                           "createdAt":  "2024-01-12T19:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Any change would be in a component used by all .NET versions, so I wouldn\u0027t want the breaking/active failure.\r\n\r\nI wouldn\u0027t be opposed to relaxing the version parsing to make a missing part imply 0 (instead of the current strict semver 2 requiring all major, minor, and patch - https://semver.org/#spec-item-2) - but that still seems insufficient per the concerns @KalleOlaviNiemitalo [raised](https://github.com/dotnet/runtime/issues/96299#issuecomment-1868601999).",
                                           "updatedAt":  "2024-01-12T19:21:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wpLPp",
                                           "createdAt":  "2024-01-12T19:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODSS17w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yuriShafet",
                                                                               "createdAt":  "2024-01-12T19:33:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maltalex",
                                           "body":  "@elinor-fung The breaking failure would be only in cases which are already broken, it\u0027s just that the failure is silent, and therefore dangerous.",
                                           "updatedAt":  "2024-01-12T19:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wpLxS",
                                           "createdAt":  "2024-01-12T19:34:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Oh, I think my concern about the shared/global component might actually address the concern with relaxing it in the latest version only. I believe the SDK just uses that shared `hostfxr` component to determine SDK resolution based on global.json - @nagilson would you be able to confirm?\r\n\r\nIf that\u0027s the case, then saying missing implies 0 seems reasonable. And the defaults for not specifying things like \u0027rollForward\u0027 remains the same - that is, 6.0 with no rollForward specified -\u003e 6.0.0 with no rollForward specified -\u003e 6.0.0 defaulting to latest patch.",
                                           "updatedAt":  "2024-01-12T19:34:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wpMxQ",
                                           "createdAt":  "2024-01-12T19:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODSS9qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vlad2135",
                                                                               "createdAt":  "2024-01-12T19:49:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gusarov",
                                           "body":  "@elinor-fung can you elaborate a bit more about what is valid and what is invalid global json? If I malform the json syntax, it will not be ignored, it will fail to build. I wonder why in some cases global.json considered malformed and ignored in a first place instead of indicating this right away? In our case we did not knew that 3 digits is mandatory, so we put 2 and everything went fine because we had all .Net versions installed anyway and the latest was silently picked up. It ended up with broken CI, but all of this could have been avoided if \"dotnet build\" either properly failed the build or imply 3 digits out of 2",
                                           "updatedAt":  "2024-01-12T19:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wpSEr",
                                           "createdAt":  "2024-01-12T19:54:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vlad2135",
                                           "body":  "Interesting, this comment says that dotnet build ignores broken global.json - https://github.com/dotnet/runtime/issues/94496#issuecomment-1800339666 , but in my experiment with .NET SDK 8.0.100 shows that dotnet build crashes spectacularly.",
                                           "updatedAt":  "2024-01-12T19:54:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64NvXk",
                                           "createdAt":  "2025-07-18T20:14:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbJbOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "amaltinsky",
                                                                               "createdAt":  "2025-07-18T20:18:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Sorry, this fell off my radar. Looking at it again, it seems we have two slightly different definitions of invalid `global.json`:\n- malformed: comments are allowed, but otherwise must conform to JSON RFC\n- missing/unexpected data: based on what is expected to be in a `global.json` (the two-digit version falls into this category)\n\nPreviously, both these cases were treated the same way (ignored). Some time after https://github.com/dotnet/runtime/issues/94496#issuecomment-1800339680, most SDK commands started failing on malformed global.json.\n\n\u003e the failure is silent, and therefore dangerous.\n\nAgreed - thanks for pushing on this. I did not fully grasp the unsafe nature of the current behaviour - especially since having an ignored global.json currently means latest version including prereleases, which also has security implications. I don\u0027t know the original reasoning for the current behaviour, but I agree it is mis-designed from an experience and a reliability/security view - we should take a breaking change to make both malformed and missing/unexpected data an error.",
                                           "updatedAt":  "2025-07-18T20:14:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64OZqv",
                                           "createdAt":  "2025-07-18T21:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbKlew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "richlander",
                                                                               "createdAt":  "2025-07-19T02:25:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Related in terms of security implications of the current behaviour to use latest SDK including prerelease: https://github.com/dotnet/sdk/issues/49777\ncc @richlander ",
                                           "updatedAt":  "2025-07-18T21:41:06Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "dotnet.exe silently ignores global.json with a two-digit sdk version",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98387",
        "createdAt":  "2024-02-13T21:41:50Z",
        "number":  98387,
        "author":  "richlander",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-30T21:58:48Z",
        "body":  "This is to aid diagnostics and transparency. It is very easy to install .NET from multiple places and get mixed up. This is the host side of the project. \r\n\r\nSDK issue: https://github.com/dotnet/sdk/issues/37725",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc-tQaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zyrVR",
                                           "createdAt":  "2024-02-13T21:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is to aid diagnostics and transparency. It is very easy to install .NET from multiple places and get mixed up. This is the host side of the project. \r\n\r\nSDK issue: https://github.com/dotnet/sdk/issues/37725\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erichlander\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-13T21:41:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z61Bp",
                                           "createdAt":  "2024-02-14T22:18:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Based on https://github.com/dotnet/sdk/issues/37725#issuecomment-1942574654, we\u0027d want that same `OfficialBuilder` value. Probably need something like:\r\n- Pipe `OfficialBuilder` value through build scripts to cmake\r\n- Set value as a preprocessor define when building `dotnet`\r\n- If non-empty and SDK was not present, include in `--info` output\r\n",
                                           "updatedAt":  "2024-02-14T22:18:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add \"Who built this\" to dotnet --info",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98735",
        "createdAt":  "2024-02-21T06:01:25Z",
        "number":  98735,
        "author":  "Markliniubility",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-22T21:06:53Z",
        "body":  "### Background and motivation\n\ndotnet SDK intends to implement a new command `dotnet info` to replace the original `dotnet --info`. The detail is specified in https://github.com/dotnet/sdk/issues/33697. \r\n\r\nHowever, to implement this new command, we need to have some information exposed in the corehost, which are:\r\n- Host,\r\n- .NET SDKs installed,\r\n- .NET runtimes installed,\r\n- Other architectures found,\r\n- Environment Variables, and\r\n- global.json file\r\n\r\nWe may make modification to this file to introduce the new API https://github.com/dotnet/runtime/blob/c28bec4d3d63849c9e60dee1e7174b9a180a7e55/src/native/corehost/hostfxr.h#L311-L323\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nSHARED_API int32_t HOSTFXR_CALLTYPE hostfxr_get_dotnet_host_info(\r\n    const pal::char_t* dotnet_root,\r\n    void* reserved,\r\n    hostfxr_get_dotnet_host_info_result_fn result,\r\n    void* result_context)\r\n{}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n        [UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Auto)]\r\n        internal delegate void hostfxr_get_dotnet_environment_info_result_fn(\r\n            IntPtr info,\r\n            IntPtr result_context);\r\n\r\n        [DllImport(Constants.HostFxr, CharSet = CharSet.Auto, ExactSpelling = true, CallingConvention = CallingConvention.Cdecl)]\r\n        internal static extern int hostfxr_get_dotnet_host_info(\r\n            .....);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nit would require some versioning magic but that doable (the host has to work against any SDK, so it would have to know to do the old thing for the old SDK and the new thing for the new SDK and unfortunately this can\u0027t be done through an API since the host literally runs the SDK as an app). ---- mentioned by @vitek-karas\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdNxyLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50lXOt",
                                           "createdAt":  "2024-02-21T06:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\ndotnet SDK intends to implement a new command `dotnet info` to replace the original `dotnet --info`. The detail is specified in https://github.com/dotnet/sdk/issues/33697. \r\n\r\nHowever, to implement this new command, we need to have some information exposed in the corehost, which are:\r\n- Host,\r\n- .NET SDKs installed,\r\n- .NET runtimes installed,\r\n- Other architectures found,\r\n- Environment Variables, and\r\n- global.json file\r\n\r\nWe may make modification to this file to introduce the new API https://github.com/dotnet/runtime/blob/c28bec4d3d63849c9e60dee1e7174b9a180a7e55/src/native/corehost/hostfxr.h#L311-L323\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nSHARED_API int32_t HOSTFXR_CALLTYPE hostfxr_get_dotnet_host_info(\r\n    const pal::char_t* dotnet_root,\r\n    void* reserved,\r\n    hostfxr_get_dotnet_host_info_result_fn result,\r\n    void* result_context)\r\n{}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n        [UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Auto)]\r\n        internal delegate void hostfxr_get_dotnet_environment_info_result_fn(\r\n            IntPtr info,\r\n            IntPtr result_context);\r\n\r\n        [DllImport(Constants.HostFxr, CharSet = CharSet.Auto, ExactSpelling = true, CallingConvention = CallingConvention.Cdecl)]\r\n        internal static extern int hostfxr_get_dotnet_host_info(\r\n            .....);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nit would require some versioning magic but that doable (the host has to work against any SDK, so it would have to know to do the old thing for the old SDK and the new thing for the new SDK and unfortunately this can\u0027t be done through an API since the host literally runs the SDK as an app). ---- mentioned by @vitek-karas\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMarkliniubility\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Host`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-21T06:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50p2Sv",
                                           "createdAt":  "2024-02-21T16:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e However, to implement this new command, we need to have some information exposed in the corehost,\r\n\r\nCan SDK gather most or all of this information in managed code on its own?\r\n\r\nFor example, it does not make sense for the host to return environment variables. The managed `dotnet info` command can read the environment just fine.",
                                           "updatedAt":  "2024-02-21T16:08:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50vXYE",
                                           "createdAt":  "2024-02-22T03:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Markliniubility",
                                           "body":  "\u003e \u003e However, to implement this new command, we need to have some information exposed in the corehost,\r\n\u003e \r\n\u003e Can SDK gather most or all of this information in managed code on its own?\r\n\u003e \r\n\u003e For example, it does not make sense for the host to return environment variables. The managed `dotnet info` command can read the environment just fine.\r\n\r\nUnfortunately, it may be a bit difficult to gather the information within the sdk repo. The current `dotnet --info` obtain the information from corehost as well. Ref.\r\nhttps://github.com/dotnet/runtime/blob/9da53590c9d624b51fddcfb85f76641c78a415d4/src/native/corehost/fxr/command_line.cpp#L283\r\n\r\nThe corehost will print out the info when there is a command `dotnet --info`. ",
                                           "updatedAt":  "2024-02-22T03:04:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc503HIs",
                                           "createdAt":  "2024-02-23T01:15:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Markliniubility",
                                           "body":  "Some earlier discussions for this API proposal: https://github.com/dotnet/sdk/pull/36943",
                                           "updatedAt":  "2024-02-23T01:15:56Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Expose dotnet info by introducing a new hostfxr API",
        "labels":  [
                       "api-suggestion",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101837",
        "createdAt":  "2024-05-03T06:44:05Z",
        "number":  101837,
        "author":  "xoofx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5-8ag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dahlia",
                                            "createdAt":  "2024-05-03T06:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richardcox13",
                                            "createdAt":  "2024-05-03T07:03:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mklement0",
                                            "createdAt":  "2024-08-06T19:34:06Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-18T06:48:10Z",
        "body":  "Hello there, ☺️ \r\n\r\nThis issue is related to the following previous issues (and there are more closed):\r\n\r\n* #11305\r\n* #30212\r\n\r\n`Environment.ProcessPath` and `Environment.GetCommandLineArgs()[0]` are behaving quite differently (See the follow parts for more details):\r\n- between them\r\n- between platforms\r\n- between regular dotnet built app and NativeAOT\r\n- When we access the exe through a symbolic link\r\n\r\nThis is quite problematic when trying to build apps that expect to recover the C/C++ equivalent of `argv[0]` which should give exactly what was typed on the command line (e.g if it is a symbolic link, we should keep its name), and not something else.\r\n\r\n# Reproducible steps\r\n\r\n## Windows - .NET 8.0\r\n\r\nPowershell with admin rights (for the symbolic link):\r\n\r\n```pwsh\r\ndotnet new console -n HelloWorld\r\ncd HelloWorld\r\nWrite-Output \"Console.WriteLine($\"\"Environment.ProcessPath: {Environment.ProcessPath}\"\");\" \u003e Program.cs\r\nWrite-Output \"Console.WriteLine($\"\"Environment.GetCommandLineArgs()[0]: {Environment.GetCommandLineArgs()[0]}\"\");\" \u003e\u003e Program.cs\r\ndotnet build -c Release\r\ncd .\\bin\\Release\\net8.0\r\n```\r\n\r\nThen we create a symbolic link from `special_hello.exe` to `HelloWorld.exe`:\r\n\r\n```pwsh\r\nNew-Item -ItemType SymbolicLink -Path special_hello.exe -Value HelloWorld.exe\r\n.\\special_hello.exe\r\n```\r\n\r\nOutputs:\r\n\r\n```\r\nEnvironment.ProcessPath: C:\\code\\HelloWorld\\bin\\Release\\net8.0\\special_hello.exe\r\nEnvironment.GetCommandLineArgs()[0]: C:\\code\\HelloWorld\\bin\\Release\\net8.0\\HelloWorld.dll\r\n```\r\n\r\n## Windows - NativeAOT .NET 8.0\r\n\r\nSimilar steps then before, but with `dotnet publish -c Release -p:PublishAot=true`\r\n\r\n```shell\r\ncd .\\bin\\Release\\net8.0\\win-x64\\publish\r\nNew-Item -ItemType SymbolicLink -Path special_hello.exe -Value HelloWorld.exe\r\n.\\special_hello.exe\r\n```\r\n\r\nOutputs:\r\n\r\n```\r\nEnvironment.ProcessPath: C:\\code\\HelloWorld\\bin\\Release\\net8.0\\win-x64\\publish\\special_hello.exe\r\nEnvironment.GetCommandLineArgs()[0]: C:\\code\\HelloWorld\\bin\\Release\\net8.0\\win-x64\\publish\\special_hello.exe\r\n```\r\n\r\n## MacOS/Ubuntu - .NET 8.0\r\n\r\n```shell\r\ncd ./bin/Release/net8.0\r\nln -s HelloWorld special_hello\r\n./special_hello\r\n```\r\n\r\nOutputs:\r\n\r\n```\r\nEnvironment.ProcessPath: /home/xoofx/code/HelloWorld/bin/Release/net8.0/HelloWorld\r\nEnvironment.GetCommandLineArgs()[0]: /home/xoofx/code/HelloWorld/bin/Release/net8.0/HelloWorld.dll\r\n```\r\n\r\n## MacOS/Ubuntu - NativeAOT .NET 8.0\r\n\r\n```shell\r\ncd ./bin/Release/net8.0/linux-x64/publish\r\nln -s HelloWorld special_hello\r\n./special_hello\r\n```\r\n\r\nOutputs:\r\n\r\n```\r\nEnvironment.ProcessPath: /home/xoofx/code/HelloWorld/bin/Release/net8.0/linux-x64/publish/HelloWorld\r\nEnvironment.GetCommandLineArgs()[0]: ./special_hello\r\n```\r\n\r\n# Expected behavior\r\n\r\n## `Environment.GetCommandLineArgs()[0]`\r\n\r\nThis value should always be the strict equivalent of `argv[0]` in a C/C++ program (and `MacOS/Ubuntu - NativeAOT .NET 8.0` is the only one to respect it from the above)\r\n\r\nIn particular:\r\n- It should not transform to an absolute path or resolve symbolic link\r\n- It should not give a dll whether we are running through corehost from a regular `dotnet build`\r\n\r\n## `Environment.ProcessPath`\r\n\r\nFrom the above it is unclear if:\r\n\r\n- It should give an absolute path to the exe name but not following symbolic link? (as on `Windows - NativeAOT .NET 8.0`) e.g `C:\\code\\HelloWorld\\bin\\Release\\net8.0\\win-x64\\publish\\special_hello.exe`\r\n- It should give an absolute path to the fully resolve exe name following symbolic link? (as on MacOS/Ubuntu) e.g `/home/xoofx/code/HelloWorld/bin/Release/net8.0/HelloWorld`\r\n\r\n# Implementation problems\r\n\r\nI tried to fix it but the problem is that we are not able to recover `argv[0]` from `coreclr_execute_assembly`, and I end up hacking `argv` to actually have `argv[0]` in it and putting 1 on bit 0 on the pointer to understand behind that it is a special `argv`, which I conceded is super ugly 😅 (Thinking about it I could hack it more easily by using argc as a negative number to convery that it includes argv[0], but it still ugly 😁 )\r\n\r\n```\r\nint coreclr_execute_assembly(\r\n            void* hostHandle,\r\n            unsigned int domainId,\r\n            int argc,\r\n            const char** argv,\r\n            const char* managedAssemblyPath,\r\n            unsigned int* exitCode)\r\n```\r\n\r\nand while `coreclr_initialize` receive an `exePath` (which is not `argv[0]`), it is processing it to create a commandline string and things get more convoluted here (and it\u0027s not used by `Environment.GetCommandLineArgs()[0]`)\r\n\r\n```\r\nint coreclr_initialize(\r\n            const char* exePath,\r\n            const char* appDomainFriendlyName,\r\n            int propertyCount,\r\n            const char** propertyKeys,\r\n            const char** propertyValues,\r\n            void** hostHandle,\r\n            unsigned int* domainId)\r\n```\r\n\r\nI assume that it is not possible to change the signature of these functions?\r\n\r\nI would be happy to make a PR, but some guidance regarding `coreclr_execute_assembly`/`coreclr_initialize` on how to propagate `argv[0]` would be appreciated. (If I can add a new arg, that should be relatively easy to fix - but I would have change also e.g `CorHost2::ExecuteAssembly`)\r\n\r\nThanks! ☺️ \r\n\r\ncc: @jkotas @MichalStrehovsky @agocke ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk6B7Mg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58vDrd",
                                           "createdAt":  "2024-05-03T10:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-03T10:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58wgK_",
                                           "createdAt":  "2024-05-03T14:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "- Consider what the behavior should be for invocation using `dotnet` host, e.g. `dotnet foo.dll`. The current behavior of `GetCommandLineArgs` tries to be consistent between `dotnet hello.dll` and `hello.exe`.\r\n\r\n- Changing the behavior of `GetCommandLineArgs()[0]` would need to be treated as a breaking change. For example, code our there can be doing things like `AssemblyName.GetAssemblyName(Environment.GetCommandLineArgs()[0])`.\r\n\r\n- `Environment.ProcessPath`: We resolve the symlinks on some platforms because we have to in order to return absolute path.\r\n",
                                           "updatedAt":  "2024-05-03T14:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58wno0",
                                           "createdAt":  "2024-05-03T14:19:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Consider what the behavior should be for invocation using dotnet host, e.g. dotnet foo.dll. The current behavior of GetCommandLineArgs tries to be consistent between dotnet hello.dll and hello.exe.\r\n\r\nIndeed, something I should probably add in the differences.\r\n\r\n\u003e Changing the behavior of GetCommandLineArgs()[0] would need to be treated as a breaking change. For example, code our there can be doing things like AssemblyName.GetAssemblyName(Environment.GetCommandLineArgs()[0]).\r\n\r\nFrom the above, it looks like `Environment.GetCommandLineArgs()[0]` is so unspecified that it is barely possible to use it in a consistent manner across NativeAOT/Regular App/Platforms. So I could definitely see some folks relying on it for specific niche cases, but I see also plenty of folks not able to use it because of these inconsistencies (I would personally not use it at all)\r\n\r\nIf this is not desirable to make a breaking change, would it be not better then to add a new property to `Environment`, like `Environment.Argv0` or something similar? I would make a proposal then. Ideally, I would prefer to introduce a different property for the case of e.g `dotnet foo.dll` because it would then make `Environment.GetCommandLineArgs()` the strict equivalent of `argv`, which is the confusing part today. But if this breaking change is not possible, then we should consider a new property.\r\n\r\n\u003e Environment.ProcessPath: We resolve the symlinks on some platforms because we have to in order to return absolute path.\r\n\r\nThe doc says `Returns the path of the executable that started the currently executing process`. Is there a technical requirement that it should point to the resolved exe?",
                                           "updatedAt":  "2024-05-03T14:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58w1N9",
                                           "createdAt":  "2024-05-03T14:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it looks like Environment.GetCommandLineArgs()[0] is so unspecified that it is barely possible to use it in a consistent manner across NativeAOT/Regular App/Platforms.\r\n\r\nYes, `GetCommandLineArgs()[0]` is problematic for single file deployments (that includes NativeAOT). Single file deployments are a niche. Outside of single file deployments, `GetCommandLineArgs()[0]` always returns the managed binary that started the process.\r\n\r\n\u003e Is there a technical requirement that it should point to the resolved exe?\r\n\r\nIt should be an absolute path and it should not be a placeholder like `/proc/self/exe`.",
                                           "updatedAt":  "2024-05-03T14:49:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58w_tl",
                                           "createdAt":  "2024-05-03T15:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Looking at the usage of [`Environment.GetCommandLineArgs()[0]`](https://github.com/search?q=%22Environment.GetCommandLineArgs%28%29%5B0%5D%22\u0026type=code), it is definitely used a lot, so changing it would break too many things. (Not all the usages are expecting a DLL, some are expecting an exe name, but that depends on their usage for sure).\r\n\r\nMaybe introducing a new API that would give the additional parts as prefixes would help:\r\n\r\n`string? Environment.PreCommandLineArg0` would return:\r\n\r\n| Command line | `Environment.PreCommandLineArg0` | `Environment.GetCommandLineArgs()` \r\n|------------------|--------------|---------------\r\n| `./dotnet.exe foo.dll 1 2 3`| `./dotnet.exe`  | `foo.dll`, `1`, `2`, `3` |\r\n| `./foo.exe 1 2 3`| `./foo.exe`  | `foo.dll`, `1`, `2`, `3`\r\n| `./special_foo.exe 1 2 3` with `special_foo.exe` symlinked to `foo.exe`| `./special_foo.exe` | `foo.dll`, `1`, `2`, `3`\r\n| `./special_foo.exe 1 2 3` with `special_foo.exe` symlinked to `foo.exe` (NativeAOT) | null | `./special_foo.exe`, `1`, `2`, `3`\r\n\r\nwith `Environment.PreCommandLineArg0` being the true `argv[0]` equivalent of C/C++ when it is not covered by `Environment.GetCommandLineArgs()` for NativeAOT case.\r\n\r\nWould that be an acceptable API to resolve this situation?",
                                           "updatedAt":  "2024-05-03T16:27:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xTHw",
                                           "createdAt":  "2024-05-03T16:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgnZzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2024-05-04T11:44:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Bringing some folks from other issues that would be interested in solving this: @rjmholt, @tmds, @mklement0 ",
                                           "updatedAt":  "2024-05-03T16:00:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xWac",
                                           "createdAt":  "2024-05-03T16:08:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "I would be interested maybe in adding also `bool Environment.IsImplicitCommandLineArg0` to detect the difference between `dotnet.exe foo.dll 1 2 3 ` and `foo.exe 1 2 3` (would be true in that latter with `foo.dll` being passed implicitly as `Environment.GetCommandLineArgs()[0]`)",
                                           "updatedAt":  "2024-05-03T16:14:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xX6x",
                                           "createdAt":  "2024-05-03T16:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Adding a table for clarity\r\n\r\n| Command line | ? | `Environment.PreCommandLineArg0` | `Environment.GetCommandLineArgs()`\r\n|------------------|--------------|---------------|---------------\r\n| `./dotnet.exe foo.dll 1 2 3`| `false` |  `./dotnet.exe`  | `foo.dll`, `1`, `2`, `3` |\r\n| `./foo.exe 1 2 3`| `true` | `./foo.exe`  | `foo.dll`, `1`, `2`, `3`\r\n| `./special_foo.exe 1 2 3` with `special_foo.exe` symlinked to `foo.exe`| `true` | `./special_foo.exe` | `foo.dll`, `1`, `2`, `3`\r\n| `./special_foo.exe 1 2 3` with `special_foo.exe` symlinked to `foo.exe` (NativeAOT) | `false`| null | `./special_foo.exe`, `1`, `2`, `3`\r\n\r\nwith ? = `Environment.IsImplicitCommandLineArg0`",
                                           "updatedAt":  "2024-05-03T16:27:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xrnQ",
                                           "createdAt":  "2024-05-03T16:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgn1Aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2024-05-04T13:59:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I am not following why we would want the API to return null for native AOT.\r\n\r\nIf we were to add a new API for this, I think it should be a policy-free API that does not change its behavior based on how the process was invoked. Something like: `string? Environment.ProcessInvocationName`. Returns the name used to invoke the process, same as `argv[0]` in C/C++, in all situations. Returns null when the invocation name is not available.",
                                           "updatedAt":  "2024-05-03T16:57:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xs-n",
                                           "createdAt":  "2024-05-03T17:00:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e If we were to add a new API for this, I think it should be a policy-free API that does not change its behavior based on how the process was invoked. Something like: string? Environment.ProcessInvocationName. Returns the name used to invoke the process, same as argv[0] in C/C++, in all situations. Returns null when the invocation name is not available.\r\n\r\nIndeed, that would work.\r\n\r\n(_Edit: In that case we would have `Environment.IsImplicitCommandLineArg0` true_)",
                                           "updatedAt":  "2024-05-04T05:45:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580IqT",
                                           "createdAt":  "2024-05-04T06:07:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "I have created the following API proposal for this issue:\r\n\r\n- #101872",
                                           "updatedAt":  "2024-05-04T06:07:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580NWw",
                                           "createdAt":  "2024-05-04T07:18:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Note that there is also: `Process.GetCurrentProcess().MainModule.FileName` and `Process.GetCurrentProcess().ProcessName`.\r\n\r\n\u003e Environment.ProcessPath\r\n\r\nPerhaps we could initialize this to the full path for `argv[0]` without resolving links?\r\n\r\nIt wouldn\u0027t allow to get the exact `argv[0]` but it might enable all desired use-cases without adding another API.",
                                           "updatedAt":  "2024-05-04T07:26:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580TOW",
                                           "createdAt":  "2024-05-04T08:52:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgnEPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2024-05-04T09:55:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e It wouldn\u0027t allow to get the exact argv[0] but it might enable all desired use-cases without adding another API.\r\n\r\nNot all use-cases, like login shell as you highlighted [here](https://github.com/dotnet/runtime/issues/30212#issuecomment-512330585) with the character `-` added as a prefix when running a shell as a login shell. The purpose here is to get the real `argv[0]`.\r\n\r\nAlso, we are still missing the case of `dotnet foo.dll` where `foo.dll` is put in `Environment.GetCommandLineArgs()[0]` which could be detected with `Environment.IsImplicitCommandLineArg0` returning false.",
                                           "updatedAt":  "2024-05-04T08:52:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580coX",
                                           "createdAt":  "2024-05-04T11:11:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Not all use-cases, like login shell as you highlighted https://github.com/dotnet/runtime/issues/30212#issuecomment-512330585 with the character - added as a prefix when running a shell as a login shell. The purpose here is to get the real argv[0].\r\n\r\nWe may want to accept the behavior for this very specific case.\r\n\r\nAn other option may be: change `GetCommandLineArgs()[0] ` so it contains `argv[0]` when it is executed through an app host and remains the current behavior when executed through the `dotnet` host (full path to managed assembly).",
                                           "updatedAt":  "2024-05-04T11:11:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580e1T",
                                           "createdAt":  "2024-05-04T11:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e An other option may be: change GetCommandLineArgs()[0]  so it contains argv[0] when it is executed through an app host and remains the current behavior when executed through the dotnet host (full path to managed assembly).\r\n\r\nI would have preferred as well but that would break too many expected behaviors as based on usage on GitHub [here](https://github.com/dotnet/runtime/issues/101837#issuecomment-2093218661)",
                                           "updatedAt":  "2024-05-04T11:41:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc580giZ",
                                           "createdAt":  "2024-05-04T12:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I would have preferred as well but that would break too many expected behaviors as based on usage on GitHub here\r\n\r\nWe would break some of these and also fix some others.\r\n\r\nIf you\u0027re now using `GetCommandLineArgs()[0]` you have a bug depending on how the app was published.",
                                           "updatedAt":  "2024-05-04T12:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58082H",
                                           "createdAt":  "2024-05-04T15:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgq_uw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2024-05-04T16:45:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2024-05-05T08:24:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e We would break some of these and also fix some others.\r\n\r\nAre there any examples of code out there that would be fixed by changing `GetCommandLineArgs()[0]` behavior to match `argv[0]` unless the app was launched via a host?\r\n\r\n`GetCommandLineArgs()[0]` in .NET Framework matches `argv[0]`:\r\n```\r\nC:\\repro\u003etype test.cs\r\nusing System;\r\n\r\nclass My {\r\n    static void Main() {\r\n        Console.WriteLine(Environment.GetCommandLineArgs()[0]);\r\n    }\r\n}\r\nC:\\repro\u003etest.exe\r\ntest.exe\r\n\r\nC:\\repro\u003ec:\\repro\\test.exe\r\nc:\\repro\\test.exe\r\n```\r\n\r\nSo we can treat it as undoing an (unintentional?) .NET Framework -\u003e .NET Core change. Looking at the github examples, I think the breaking change should be acceptable. ",
                                           "updatedAt":  "2024-05-04T15:19:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5809bC",
                                           "createdAt":  "2024-05-04T15:25:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgq_wQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xoofx",
                                                                               "createdAt":  "2024-05-05T08:24:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "| Command line | `Environment.GetCommandLineArgs()` \r\n|------------------|---------------\r\n| `dotnet.exe foo.dll 1 2 3`| `foo.dll`, `1`, `2`, `3` |\r\n| `foo 1 2 3`| `foo`, `1`, `2`, `3`\r\n| `../bar/special_foo.exe 1 2 3` with `special_foo.exe` symlinked to `foo.exe`| `../bar/special_foo.exe`, `1`, `2`, `3`\r\n",
                                           "updatedAt":  "2024-05-04T15:25:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc581G6S",
                                           "createdAt":  "2024-05-04T16:45:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e So we can treat it as undoing an (unintentional?) .NET Framework -\u003e .NET Core change. Looking at the github examples, I think the breaking change should be acceptable.\r\n\r\nYes, many of the samples expect the .NET Framework semantics: something a user can execute and a path that may be relative.",
                                           "updatedAt":  "2024-05-04T16:45:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc582k_r",
                                           "createdAt":  "2024-05-05T08:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e Are there any examples of code out there that would be fixed by changing GetCommandLineArgs()[0] behavior to match argv[0] unless the app was launched via a host?\r\n\r\nDifficult to say because `GetCommandLineArgs()[0]` is unusable today for the argv[0] scenario. I started this issue because I was just developing a command line parser library for C#, and I have left the code using `Environment.ProcessPath` instead of `GetCommandLineArgs()[0]` for this reason:\r\n\r\nhttps://github.com/XenoAtom/XenoAtom.CommandLine/blob/c3e2d29389a39ea8d5335d6ec265f25eedec95c7/src/XenoAtom.CommandLine/CommandApp.cs#L94-L98\r\n\r\n\u003e So we can treat it as undoing an (unintentional?) .NET Framework -\u003e .NET Core change. Looking at the github examples, I think the breaking change should be acceptable.\r\n\r\nIf we could do that, I would be happy to make a PR. I believe that the case of `dotnet.exe foo.dll` can be detected by checking that the `GetCommandLineArgs()[0]` is actually a dll (and additionally that `Environment.ProcessPath` is the `dotnet.exe`).",
                                           "updatedAt":  "2024-05-05T08:24:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc582n2T",
                                           "createdAt":  "2024-05-05T08:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xoofx",
                                           "body":  "Pushed a prototype fix #101880, not really thrilled by it, but I had some difficulty to pass this information over without changing any of the existing CorHost2 APIs.",
                                           "updatedAt":  "2024-05-05T08:57:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-QXog",
                                           "createdAt":  "2024-05-17T19:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "+ @elinor-fung for any thoughts on different behavior based on hosting.",
                                           "updatedAt":  "2024-05-17T19:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CSwm0",
                                           "createdAt":  "2024-06-24T08:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "It would be nice if we can fix this for .NET 9.",
                                           "updatedAt":  "2024-06-24T08:50:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CTRs5",
                                           "createdAt":  "2024-06-24T09:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODm3iqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2024-06-24T09:56:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xoofx",
                                           "body":  "\u003e It would be nice if we can fix this for .NET 9.\r\n\r\nAgreed, I will try to come back with a better PR in the coming months.",
                                           "updatedAt":  "2024-06-24T09:53:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ToHsy",
                                           "createdAt":  "2024-11-14T15:51:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Another potential solution could be to introduce a new API, `string[] Environment.NativeCommandLineArgs`, which would expose the raw command line arguments as received from the hosting layer (corehost,nativeaot etc.). These arguments could then be accessed via a QCall. While this approach may not fully resolve all discrepancies, it could address use cases which require the unmodified arguments (with the exception of differences in `argv` processing rules between POSIX and Win32 systems).",
                                           "updatedAt":  "2024-11-14T15:51:44Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Environment.ProcessPath / Environment.GetCommandLineArgs()[0] discrepancies",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103816",
        "createdAt":  "2024-06-21T13:31:26Z",
        "number":  103816,
        "author":  "MichalPetryka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T04:44:20Z",
        "body":  "The vcpkg port for the `nethost` seems to apply a patch to [the nethost CMakeLists.txt file](https://github.com/microsoft/vcpkg/blob/master/ports/nethost/0001-nethost-cmakelists.patch) and also [seems to patch the headers](https://github.com/microsoft/vcpkg/blob/2b665df62f1ccc5dead7f1c93888bfe30a918363/ports/nethost/portfile.cmake#L74-L78) in its cmake code.\r\n\r\nSince vcpkg [prefers to have all patches upstreamed](https://github.com/microsoft/vcpkg/blob/master/CONTRIBUTING.md#new-package-guidelines), it\u0027d be preferable if the changes made by them would be reviewed and the official versions would be changed in a way that removes the need for patching.\r\n\r\nRemoving the patches there would also avoid any future issues caused by them causing the nethost from vcpkg to function differently from the official one.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgi35QQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CGmk-",
                                           "createdAt":  "2024-06-21T13:35:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/runtime-infrastructure\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-21T13:35:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CIkBI",
                                           "createdAt":  "2024-06-21T18:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-21T18:48:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CLflB",
                                           "createdAt":  "2024-06-22T14:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "They can pass `-DNETHOST_USE_AS_STATIC` for static variant and skip it for the shared one: https://github.com/am11/vcpkg/commit/2f6d2590d91d37ae0c2e4f9d96c46886caf9ea2f",
                                           "updatedAt":  "2024-06-22T14:18:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Review and consider upstreaming vcpkg patches to nethost cmake files and headers",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104402",
        "createdAt":  "2024-07-03T19:42:43Z",
        "number":  104402,
        "author":  "rolfbjarne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5I1HQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brunck",
                                            "createdAt":  "2024-07-04T20:08:30Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-07T21:28:03Z",
        "body":  "Simplified repro:\r\n```\r\ndotnet new console\r\ndotnet build\r\nren ./bin/Debug/net9.0 net9.0:n\r\n./bin/Debug/net9.0:n/app\r\nFailed to create CoreCLR, HRESULT: 0x80070057\r\n```\r\n\r\n_From @brunck on Mon, 01 Jul 2024 22:46:14 GMT_\r\n\r\n\r\n\u003c!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-\u0026-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n--\u003e\r\n\r\nIt\u0027s helpful to have a `nuget.config` file on the Windows side to shorten paths, due to the dastardly max path problem in VS for Windows. This breaks building the project on a Mac at the command line.\r\n\r\nBuilding the same project in VS for Windows (paired to a Mac) works.\r\n\r\n### Steps to Reproduce\r\n\r\n1. `dotnet new ios -n someName` on a Mac\r\n2. Create a `nuget.config` file for the created project with a Windows path like `C:\\n`\r\nfor example:\r\n```xml\r\n\u003cconfiguration\u003e\r\n  \u003cconfig\u003e\r\n    \u003cadd key=\"globalPackagesFolder\" value=\"C:\\n\" /\u003e\r\n  \u003c/config\u003e\r\n\u003c/configuration\u003e\r\n```\r\n3. `dotnet build`\r\n4. or, just download and run the provided example project\r\n\r\n### Expected Behavior\r\nThe app builds with no errors.\r\n\r\n### Actual Behavior\r\nA `Failed to create CoreCLR, HRESULT: 0x80070057` error, along with a message about setting the `PublishTrimmed` property to false, which is disallowed in a.NET for iOS app anyway\r\n\r\n### Environment\r\n\r\n\u003c!--\r\n1. How to get version information: https://github.com/xamarin/xamarin-macios/wiki/Diagnosis#version-information\r\n2. Paste into the code block below (between ```)\r\n--\u003e\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eVersion information\u003c/summary\u003e\r\n\r\n.NET SDK  version 8.0.302\r\nWorkload info: `ios                        17.2.8053/8.0.100      SDK 8.0.300`\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\r\n### Example Project (If Possible)\r\n\r\n\u003c!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n--\u003e\r\n\r\nhttps://github.com/brunck/reproductions/tree/master/NuGetConfigBuildError\r\n\r\n\r\n_Copied from original issue xamarin/xamarin-macios#20800_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtZbhbA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DjUJP",
                                           "createdAt":  "2024-07-03T19:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @rolfbjarne on Wed, 03 Jul 2024 19:37:43 GMT_\n\nThis looks like a bug in .NET:\r\n\r\n```shell\r\n$ mkdir rootdir\r\n$ cd rootdir\r\n$ dotnet new console\r\n[...]\r\n$ dotnet publish /p:PublishDir=C:\r\n[...]\r\n$ dotnet exec C:/rootdir.dll\r\nFailed to create CoreCLR, HRESULT: 0x80070057\r\n```\r\n",
                                           "updatedAt":  "2024-07-03T19:42:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DjUJp",
                                           "createdAt":  "2024-07-03T19:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @rolfbjarne on Wed, 03 Jul 2024 19:40:38 GMT_\n\nLooks like variations of https://github.com/dotnet/runtime/issues/3163 and https://github.com/dotnet/runtime/issues/75387",
                                           "updatedAt":  "2024-07-03T19:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DxL0s",
                                           "createdAt":  "2024-07-05T11:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-05T11:28:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E2IUH",
                                           "createdAt":  "2024-07-15T15:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is weird to me: \r\n```$ dotnet exec C:/rootdir.dll\r\nFailed to create CoreCLR, HRESULT: 0x80070057\r\n```\r\n\r\nThat is trying to run the app - I would not expect an ios app to run on CoreCLR, we could produce a better error, but functionally this is simply not supported.\r\n\r\nBut the issue states that it fails during build, which would not be this failure. What does the build failure look like?",
                                           "updatedAt":  "2024-07-15T15:29:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3qTG",
                                           "createdAt":  "2024-07-15T19:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brunck",
                                           "body":  "```\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  Detected signing identity:\r\n          \r\n    Bundle Id: com.companyname.TestiOSApp\r\n    App Id: com.companyname.TestiOSApp\r\n  TestiOSApp -\u003e /Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/bin/Debug/net8.0-ios/iossimulator-x64/TestiOSApp.dll\r\n  Optimizing assemblies for size may change the behavior of the app. Be sure to test after publishing. See: https://aka.ms/dotnet-illink\r\n  Optimizing assemblies for size. This process might take a while.\r\n  Failed to create CoreCLR, HRESULT: 0x80070057\r\n/Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/C:/n/microsoft.net.illink.tasks/8.0.6/build/Microsoft.NET.ILLink.targets(134,5)\r\n: error MSB6006: \"dotnet\" exited with code 137. [/Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/TestiOSApp.csproj]            /Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/C:/n/microsoft.net.illink.tasks/8.0.6/build/Microsoft.NET.ILLink.targets(87,5):\r\n error NETSDK1144: Optimizing assemblies for size failed. Optimization can be disabled by setting the PublishTrimmed property to false. [/Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/TestiOSApp.csproj]                                                                          \r\nBuild FAILED.\r\n\r\n/Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/C:/n/microsoft.net.illink.tasks/8.0.6/build/Microsoft.NET.ILLink.targets(134,5)\r\n: error MSB6006: \"dotnet\" exited with code 137. [/Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/TestiOSApp.csproj]            /Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/C:/n/microsoft.net.illink.tasks/8.0.6/build/Microsoft.NET.ILLink.targets(87,5):\r\n error NETSDK1144: Optimizing assemblies for size failed. Optimization can be disabled by setting the PublishTrimmed property to false. [/Users/x/Documents/SourceCode/reproductions/NuGetConfigBuildError/TestiOSApp.csproj]                                                                              0 Warning(s)\r\n    2 Error(s)\r\n\r\nTime Elapsed 00:00:04.20\r\n\r\nWorkload updates are available. Run `dotnet workload list` for more information.\r\n```",
                                           "updatedAt":  "2024-07-15T19:00:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3rlT",
                                           "createdAt":  "2024-07-15T19:03:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "It fails to launch illink.",
                                           "updatedAt":  "2024-07-15T19:03:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3rzb",
                                           "createdAt":  "2024-07-15T19:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-15T19:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G4Npp",
                                           "createdAt":  "2024-08-01T12:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "Here\u0027s a simpler repro: https://github.com/dotnet/runtime/issues/104402#issuecomment-2207072847",
                                           "updatedAt":  "2024-08-01T12:10:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hpo9a",
                                           "createdAt":  "2024-08-08T13:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The command which fails looks something like\r\n```\r\ndotnet ~/repro/app/C:/n/nugetcatchpath/illink.dll\r\n```\r\n\r\nThe problem is that this leads to `~/repro/app/C:/n/nugetcatchpath/illink.dll` being part of TPA. But TPA is a string which stores a list of file paths which are delimited by the OS\u0027s path separator, which is `:` on mac. So the path is seen as two by the runtime:\r\n```\r\n~/repro/app/C\r\n/n/nugetcatchpath/illink.dll\r\n```\r\n\r\nPopulating the internal TPA cache with this will fail because neither points to an existing file.\r\n\r\nThe short version of this bug is that running a .NET app in a path which has \u0027:\u0027 in it somewhere fails.",
                                           "updatedAt":  "2024-08-08T13:30:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hpror",
                                           "createdAt":  "2024-08-08T13:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-08T13:35:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JoN_E",
                                           "createdAt":  "2024-08-25T22:36:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3x7BQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brunck",
                                                                               "createdAt":  "2024-10-23T18:45:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Related to this, dotnet-publish fails with semicolon as well.\r\n\r\n```sh\r\n$ dotnet new console -n \u0027t;e;s;t\u0027\r\n$ cd \u0027t;e;s;t\u0027\r\n\r\n$ dotnet publish -o dist\r\nMSBUILD : error MSB1006: Property is not valid.\r\nSwitch: e\r\n\r\nFor switch syntax, type \"MSBuild -help\"\r\n\r\n$ dotnet publish -p:PublishDir=\"$(pwd)/dist\"                \r\nThe \"HasTrailingSlash\" function only accepts a scalar value, but its argument \"$(ClickOncePublishDir)\" evaluates to \"/Users/adeel/projects/t;e;s;t/dist\" which is not a scalar value.  /Users/adeel/.dotnet9/sdk/9.0.100-rc.1.24414.26/Microsoft.Common.CurrentVersion.targets\r\nMSBUILD : error MSB1006: Property is not valid.\r\nSwitch: e\r\n\r\nFor switch syntax, type \"MSBuild -help\"\r\n\r\n# without publishdir or -o / --output, it works\r\n$ dotnet publish\r\nRestore complete (0,3s)\r\nYou are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy\r\n  t;e;s;t succeeded (0,3s) → bin/Release/net9.0/publish/\r\n\r\nBuild succeeded in 0,7s\r\n```",
                                           "updatedAt":  "2024-08-25T22:36:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61luFs",
                                           "createdAt":  "2025-07-07T21:24:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Split the `dotnet publish` scenario into a separate issue in SDK: https://github.com/dotnet/sdk/issues/49671",
                                           "updatedAt":  "2025-07-07T21:24:48Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Failed to create CoreCLR if an app has \u0027:\u0027 (colon) in the path on Mac",
        "labels":  [
                       "os-mac-os-x",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104768",
        "createdAt":  "2024-07-12T01:30:03Z",
        "number":  104768,
        "author":  "Flithor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5VWKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2024-07-12T14:10:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-29T16:58:02Z",
        "body":  "## Summary\r\nWe have a project always updates some components, but not every update will be rigorously verified the assembly version and deps.json. If there is a major change, it may have a program assembly dependency error and break down.\r\nThis error is occurred before enter the assembly entry (Main method), so program code cannot capture it.\r\n\r\nHowever, the current AppHost does not show exception message by eye-catching way when startup like on Linux terminal, but only writes the exception into the Windows system log silently, which causes some trouble.\r\nAlthough we know that we can take the cause of the startup failure by viewing the Windows system log, it is still a barrier for non-technical personnel.\r\nThen they complain that the program has no eye-catching message tell them how to do next (although they know to seek technical assistance).\r\n\r\n## User Impact\r\n\r\nI hope there can be an optional function that allows AppHost.exe to output exception message by a message box (for desktop app) or in a not auto closed terminal window when the assembly dependency error occurred.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhJQgMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ElCAz",
                                           "createdAt":  "2024-07-12T02:14:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-12T02:14:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Improve AppHost to display the startup exceptions (such as assembly dependency error)",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106306",
        "createdAt":  "2024-08-13T01:37:48Z",
        "number":  106306,
        "author":  "zhh0000zhh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-19T01:23:12Z",
        "body":  "I\u0027m using AlmaLinux 8 as my production environment and pm2 as my process manager. With .NET 6, I could directly overwrite the executable file using WinSCP. However, when using .NET 8, this operation results in an error. I suspect that the way .NET 6 and .NET 8 handle executable files on Linux is different. Are there any ways to confirm this behavior and reduce the cost of program updates?\r\nthanks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlBamHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IOgUc",
                                           "createdAt":  "2024-08-13T07:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e this operation results in an error\r\n\r\nWhat does the error message say? There is not much information for us to go on.",
                                           "updatedAt":  "2024-08-13T07:08:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IO1Hx",
                                           "createdAt":  "2024-08-13T07:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhh0000zhh",
                                           "body":  "\u003e \u003e this operation results in an error\r\n\u003e \r\n\u003e What does the error message say? There is not much information for us to go on.\r\n\r\nGeneral error (the server should provide an error description).\r\nError code: 4\r\nError message returned by the server: Failure",
                                           "updatedAt":  "2024-08-13T07:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IPGR2",
                                           "createdAt":  "2024-08-13T08:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Is the process still running when you execute the scp command? If so, can you stop the process and then run the scp to see if it succeeds? If both answers are yes, then it could be about the flock advisory being effective with either `-o mand`  (mandatory) filesystem mount or `chmod g-x` (turn off group execution) and `g+s` (turn on group ID).",
                                           "updatedAt":  "2024-08-13T08:25:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IPJn-",
                                           "createdAt":  "2024-08-13T08:31:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhh0000zhh",
                                           "body":  "\u003e Is the process still running when you execute the scp command? If so, can you stop the process and then run the scp to see if it succeeds? If both answers are yes, then it could be about the flock advisory being effective with either `-o mand` (mandatory) filesystem mount or `chmod g-x` (turn off group execution) and `g+s` (turn on group ID).\r\n\r\nThe current issue is that I was able to update the executable file of a running process (using .NET 6) using the same method, but after upgrading to .NET 8, I am unable to do so even though nothing else has changed.\r\nI usually restart the program after replacing the file to minimize downtime.",
                                           "updatedAt":  "2024-08-13T08:31:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jc5r8",
                                           "createdAt":  "2024-08-23T02:10:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Perhaps something for @dotnet/appmodel to look at?",
                                           "updatedAt":  "2024-08-23T02:10:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mg4pd",
                                           "createdAt":  "2024-09-18T03:41:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Could you provide more details on exactly how you\u0027re deploying the application? Is this a framework-dependent app? Are you deploying it with an apphost (the native executable)? Are you copying each assembly over individually?",
                                           "updatedAt":  "2024-09-18T03:41:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MpmVY",
                                           "createdAt":  "2024-09-19T01:11:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhh0000zhh",
                                           "body":  "\u003e Could you provide more details on exactly how you\u0027re deploying the application? Is this a framework-dependent app? Are you deploying it with an apphost (the native executable)? Are you copying each assembly over individually?\r\nDeployment is standalone, target environment linux-x64\r\n![image](https://github.com/user-attachments/assets/bd563a51-d4bc-4058-8394-e392c61cdc85)\r\nThis is the directory tree on the server, the server is almalinux 8.10",
                                           "updatedAt":  "2024-09-19T01:11:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UESzW",
                                           "createdAt":  "2024-11-18T21:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "By executable file, do you mean the exe file, or the `app.dll` file?\n\nBroadly, we don\u0027t do anything special here in .NET 8. Usually Linux will not stop you from modifying concurrently open files. The exception is that the kernel sometimes doesn\u0027t let you modify the .txt section from an open executable. I wouldn\u0027t expect much different here for .NET 8, but we also don\u0027t promise that this is possible.",
                                           "updatedAt":  "2024-11-18T21:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UFqYc",
                                           "createdAt":  "2024-11-19T01:23:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhh0000zhh",
                                           "body":  "\u003e By executable file, do you mean the exe file, or the `app.dll` file?\n\u003e \n\u003e Broadly, we don\u0027t do anything special here in .NET 8. Usually Linux will not stop you from modifying concurrently open files. The exception is that the kernel sometimes doesn\u0027t let you modify the .txt section from an open executable. I wouldn\u0027t expect much different here for .NET 8, but we also don\u0027t promise that this is possible.\n\nthe exe file\n.net8 dll can be modified, but modifying the dll will cause the program to crash\nThis is also different from .net6",
                                           "updatedAt":  "2024-11-19T01:23:10Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "The .NET 8 executable behaves differently from the .NET 6 executable on Linux.",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109633",
        "createdAt":  "2024-11-08T08:30:04Z",
        "number":  109633,
        "author":  "CeSun",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-04T05:58:13Z",
        "body":  "I am embedding coreclr using a custom host on a linux based mobile device.\n\nWhen I initialized coreclr, coreclr prompted me that it could not find the path to System.Private.CoreLib.dll, and then it told me that the path to System.Private.CoreLib.dll was:\nPath: /data/storage/el1/bundle/libs/arm64/System.Private.CoreLib.dll\n\nThe system I am using now has a sandbox mechanism. The system\u0027s software installer will only automatically copy native shared libraries to the \"/data/storage/el1/bundle/libs/arm64/\" directory. I do not have permission to automatically copy System.Private.CoreLib.dll there. Is there a way to modify the search directory for System.Private.CoreLib.dll?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtODRvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6S33pz",
                                           "createdAt":  "2024-11-08T08:32:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "![Image](https://github.com/user-attachments/assets/0a38600d-4cbd-4451-bdf0-b3cf4e728d98)\n![Image](https://github.com/user-attachments/assets/fde6cf89-e6ec-4614-9572-f68ae282d7f4)\n![Image](https://github.com/user-attachments/assets/af5688ea-eef6-4bb9-930e-f9d9795048af)\n",
                                           "updatedAt":  "2024-11-08T08:32:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S38t8",
                                           "createdAt":  "2024-11-08T08:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "When I enter the system through the shell and manually copy System.Private.CoreLib.dll to the /data/storage/el1/bundle/libs/arm64/ directory, coreclr can be initialized successfully",
                                           "updatedAt":  "2024-11-08T08:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S4EBY",
                                           "createdAt":  "2024-11-08T09:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "CoreLib is hardcoded to be next to coreclr because its tight relationship:\n\nhttps://github.com/dotnet/runtime/blob/b567474c22d0766cf3a416592c39e4b633d015d9/src/coreclr/binder/assemblybindercommon.cpp#L253-L269\n\nI\u0027m afraid there\u0027s no viable workaround currently. Since you are writing custom host, single file bundling will not be an option.",
                                           "updatedAt":  "2024-11-08T09:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S4Lvo",
                                           "createdAt":  "2024-11-08T09:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e CoreLib is hardcoded to be next to coreclr because its tight relationship:\n\u003e \n\u003e [runtime/src/coreclr/binder/assemblybindercommon.cpp](https://github.com/dotnet/runtime/blob/b567474c22d0766cf3a416592c39e4b633d015d9/src/coreclr/binder/assemblybindercommon.cpp#L253-L269)\n\u003e \n\u003e Lines 253 to 269 in [b567474](/dotnet/runtime/commit/b567474c22d0766cf3a416592c39e4b633d015d9)\n\u003e \n\u003e  HRESULT AssemblyBinderCommon::BindToSystem(SString   \u0026systemDirectory, \n\u003e                                             Assembly **ppSystemAssembly) \n\u003e  { \n\u003e      HRESULT hr = S_OK; \n\u003e   \n\u003e      _ASSERTE(ppSystemAssembly != NULL); \n\u003e   \n\u003e      ReleaseHolder\u003cAssembly\u003e pSystemAssembly; \n\u003e   \n\u003e      // System.Private.CoreLib.dll is expected to be found at one of the following locations: \n\u003e      //   * Non-single-file app: In systemDirectory, beside coreclr.dll \n\u003e      //   * Framework-dependent single-file app: In systemDirectory, beside coreclr.dll \n\u003e      //   * Self-contained single-file app: Within the single-file bundle. \n\u003e      // \n\u003e      //   CoreLib path (sCoreLib): \n\u003e      //   * Absolute path when looking for a file on disk \n\u003e      //   * Bundle-relative path when looking within the single-file bundle. \n\u003e I\u0027m afraid there\u0027s no viable workaround currently. Since you are writing custom host, single file bundling will not be an option.\n\nBad news, I want to complain: not as good as mono.",
                                           "updatedAt":  "2024-11-08T09:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S4PlR",
                                           "createdAt":  "2024-11-08T09:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "For the we-know-which platform that applies special processing for native executables/libraries, nativeaot would fit better since the compiled file is just a native object.\n\nI\u0027m also curious about how it handles multiple CLR copies from different applications. The versions of libcoreclr.so and System.Private.CoreLib must match exactly.",
                                           "updatedAt":  "2024-11-08T09:24:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S4TI8",
                                           "createdAt":  "2024-11-08T09:32:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e For the we-know-which platform that applies special processing for native executables/libraries, nativeaot would fit better since the compiled file is just a native object.\n\u003e \n\u003e I\u0027m also curious about how it handles multiple CLR copies from different applications. The versions of libcoreclr.so and System.Private.CoreLib must match exactly.\n\nWell, I\u0027m trying to embed .net runtime for HarmonyOS. Nativeaot has been verified to be available, so I want to see the support of virtual machines. After all, virtual machines can do more things: easier reflection, dynamic il generation, etc.\n",
                                           "updatedAt":  "2024-11-08T09:32:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S7o1_",
                                           "createdAt":  "2024-11-08T15:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-08T15:57:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T11QO",
                                           "createdAt":  "2024-11-16T03:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "driver1998",
                                           "body":  "I guess you can just add System.Private.CoreLib.dll inside the hap app package as well and let the system package manager handle it?\n\nUpdate: oh if this is considered as data content it won\u0027t be copied to the same location...",
                                           "updatedAt":  "2024-11-16T03:14:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6T2KOk",
                                           "createdAt":  "2024-11-16T06:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Yeah, it\u0027s better to submit a request to change how package manager handles it.",
                                           "updatedAt":  "2024-11-16T06:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UHdEU",
                                           "createdAt":  "2024-11-19T08:08:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e Yeah, it\u0027s better to submit a request to change how package manager handles it.\n\nIt seems that it would be better to let coreclr adjust the mechanism of loading il to make it more suitable for systems such as android/harmonyos",
                                           "updatedAt":  "2024-11-19T08:08:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UHn3O",
                                           "createdAt":  "2024-11-19T08:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "It\u0027s indeed hard. CoreLib is the specially handled instead of other managed assemblies. It\u0027s expected to be bundled closely together with coreclr.",
                                           "updatedAt":  "2024-11-19T08:31:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UHqtQ",
                                           "createdAt":  "2024-11-19T08:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "I personally think this is a design problem, mono can do it",
                                           "updatedAt":  "2024-11-19T08:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6f92-Z",
                                           "createdAt":  "2025-02-26T03:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "It looks like this environment variable can specify the directory: TRUSTED_PLATFORM_ASSEMBLIES\nhttps://learn.microsoft.com/zh-cn/dotnet/core/dependency-loading/default-probing",
                                           "updatedAt":  "2025-02-26T03:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6f_rP7",
                                           "createdAt":  "2025-02-26T08:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e It looks like this environment variable can specify the directory: TRUSTED_PLATFORM_ASSEMBLIES\n\nNo. This only affects the other `System.*` assemblies. CoreLib is very special and has a unique code path for loading.",
                                           "updatedAt":  "2025-02-26T08:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ik4Bq",
                                           "createdAt":  "2025-03-16T18:16:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKHGwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "driver1998",
                                                                               "createdAt":  "2025-03-17T00:51:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CeSun",
                                                                               "createdAt":  "2025-03-17T01:41:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "agocke",
                                           "body":  "So it sounds like the opposite approach could also work: we could make S.P.C a native assembly? Meaning the container file format would be the platform native executable format. ",
                                           "updatedAt":  "2025-03-16T18:16:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60t0Gl",
                                           "createdAt":  "2025-07-03T11:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "Any progress or plans? about \"make S.P.C a native assembly\"",
                                           "updatedAt":  "2025-07-03T11:24:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc603IAY",
                                           "createdAt":  "2025-07-04T03:52:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "No, this in the “future” milestone so it has no expected completion date. ",
                                           "updatedAt":  "2025-07-04T03:52:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc604NG8",
                                           "createdAt":  "2025-07-04T05:58:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "If this change is not a big deal, I hope to include it in the development plan as soon as possible. It affects whether coreclr can be embed in the mobile operating system.",
                                           "updatedAt":  "2025-07-04T05:58:13Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "How to change System.Private.CoreLib.dll find path?",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109778",
        "createdAt":  "2024-11-13T14:49:09Z",
        "number":  109778,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-14T01:00:34Z",
        "body":  "The internal `corerun` host supports setting environment variables through a `.env` file via the [`--env` option](https://github.com/dotnet/runtime/blob/f3c705ef291ff89b53220a31d8321355471d1937/docs/workflow/testing/using-corerun.md#additional-corerun-options). Similarly, the .NET CLI `run` command has an (undocumented) feature called \"environment directives,\" allowing environment variables to be passed in this format: `dotnet \u0027[env:FOO=1]\u0027 \u0027[env:BAR=2]\u0027 run`. These options are platform-agnostic, providing a unified syntax that bypasses platform-specific commands like `set FOO=1`, `setx FOO=1`, `export FOO=1`, `setenv FOO=1` or `$env:FOO=1`.\n\nCurrently, in user-facing hosting such as `corehost` and `nativeaot`, no comparable platform-agnostic option exists. I’m opening this issue to gauge interest in introducing such a feature. 💡\n\nWould adding `--env` or `--dotnet-env` next to the existing:\n\n```sh\ndotnet exec --roll-forward major my.dll\ndotnet --roll-forward major my.dll\npublish/my.exe --roll-forward major\n```\nmake sense in both corehost and nativeaot?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk4eKCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Tc76L",
                                           "createdAt":  "2024-11-13T14:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-13T14:49:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Th4oI",
                                           "createdAt":  "2024-11-14T01:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-14T01:00:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Platform-agnostic way of passing environment variables to `corehost` / `nativeaot`",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110013",
        "createdAt":  "2024-11-20T15:23:50Z",
        "number":  110013,
        "author":  "julienGrd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC839pQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2024-11-22T07:07:55Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-31T16:29:18Z",
        "body":  "Hello guys, i developed a .net 9.0 winform app, published in framework dependant and targeting win-x64.\n\nFirst time a user will run this app, he will have the message \"you must install or update .net to run this application\"  to install the framework, which is good.\n\nProblem, my app is deployed in french market, most of the user don\u0027t speak english and it seem they are scared of this message and some of them refused to go further thinking its a virus or something like that.\n\nI was wondering if some personnalization of this window was possible, for example use the system language will be better, and even more, have the ability to decide itself which message show in the window so it could be personnalize, for example by overriding some entries in runtimeconfig.json or things like that. Overriding the logo would be nice too.\n\nWhat do you think about that ? Is it something you are thinking or can be added in your roadmap ?\n\nthanks !",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlJsZ2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6UWTwR",
                                           "createdAt":  "2024-11-20T15:24:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-20T15:24:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UXE46",
                                           "createdAt":  "2024-11-20T16:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-20T16:41:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UYgpW",
                                           "createdAt":  "2024-11-20T20:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Could you publish as self-contained instead?",
                                           "updatedAt":  "2024-11-20T20:09:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UZyw6",
                                           "createdAt":  "2024-11-21T00:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julienGrd",
                                           "body":  "\u003e Could you publish as self-contained instead?\n\nnot really, its not the idea. Actually this winform app is deployed on server environnement to be use as an installer/configurer for a asp .net server app (in .net 9.0 also)\n\nSo the idea was more to have the .net installed on the machine because the webapp will need too, otherwise i also have to make my webapp self-contained. all of this will increase a lot the size of my app (of the two apps actually). ",
                                           "updatedAt":  "2024-11-21T00:04:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UijSv",
                                           "createdAt":  "2024-11-21T19:28:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Right now I think your options are limited to writing a custom host: https://learn.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting\n\nHowever, this has come up as an issue before. @elinor-fung @vitek-karas do you know if there is an existing tracking issue?",
                                           "updatedAt":  "2024-11-21T19:28:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Umxnb",
                                           "createdAt":  "2024-11-22T08:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "There\u0027s been something similar for self-contained: https://github.com/dotnet/runtime/issues/50081\nPotentially also https://github.com/dotnet/runtime/issues/3687 - but that should not be an issue for most apps anymore.\n\nLocalization of the host has been discussed before, my understanding is that for now we decided not to do it. The proposed \"Use the host\u0027s OS language\" might be problematic for size - it would require the apphost to carry localization for all languages and then at runtime pick the right one.\n\nThis is also somewhat of a slippery slope - we add localization, customized messages, icons... what next? The more scalable solution would be a good example for this scenario which uses a custom host. With nethost and hostfxr the actual functional code in the custom host is about 1 page of C++, I could see us simplifying that even more by adding more helpers to nethost.",
                                           "updatedAt":  "2024-11-22T08:39:47Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "\"you must install or update .net to run this application\" localization or personnalization improvements",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110891",
        "createdAt":  "2024-12-22T15:10:24Z",
        "number":  110891,
        "author":  "ArthurVasseur",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-25T20:04:00Z",
        "body":  "**Context**: While developing with the Hostfxr library, I noticed that the hostfxr_* functions return an int rather than a StatusCode enum.\nProblem:\n\nDevelopers must manually redefine or map the possible return codes to understand and handle the status of the functions properly.\nEven after downloading the .NET SDK (e.g., [dotnet-sdk-8.0.301-win-x64.zip](https://download.visualstudio.microsoft.com/download/pr/7ac2d880-2d57-4008-850e-4b42b829c354/e1c92cb3b6a85f53cab6fa55b14b49e3/dotnet-sdk-8.0.301-win-x64.zip)), the `error_codes.h` file is not included.\n\nThank you for considering this enhancement to the Hostfxr library!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmS41vQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Yf2wT",
                                           "createdAt":  "2024-12-22T15:10:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-22T15:10:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZLjW9",
                                           "createdAt":  "2025-01-03T23:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @elinor-fung ",
                                           "updatedAt":  "2025-01-03T23:50:26Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "hostfxr_* Functions Return int Instead of StatusCode Enum",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112984",
        "createdAt":  "2025-02-27T10:29:08Z",
        "number":  112984,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_jLZA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "matouskozak",
                                            "createdAt":  "2025-02-27T17:13:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-16T21:07:39Z",
        "body":  "## Description\n\nIt is needless to say that startup performance is critical for mobile applications. As we are exploring the support of CoreCLR for mobile we have identified several inefficiencies with currently available hosting APIs which need to be addressed in order to achieve best performance possible. \n\nOne example of such inefficiency is related to how the runtime properties can be passed to the runtime during initialization.\nIf we consider CoreCLR\u0027s private hosting APIs, like `coreclr_initialize`, runtime configuration properties\u0027 values are accepted as UTF8 strings. Which means that pointers need to be converted to UTF8 strings which are internally converted back to pointers. The conversion pointer-string-pointer seems redundant and negatively impacts the performance during startup. Additionally, this conversion could break tagged pointers on `ARMv8+`.\nOn the other hand, the public hosting hostfxr APIs support passing runtime configuration properties as a json file, which is also not ideal.\n\nGoing forward, we would like to avoid using private hosting APIs and use hostfxr APIs instead.\n \nThe goal of this issue is to open up a discussion between our hosting and iOS/Android/WASM experts in order to collect list of requirements specific to each platform and from that design new highly performant hosting API to successfully support CoreCLR on them.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoGyDGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gMIBV",
                                           "createdAt":  "2025-02-27T10:29:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-27T10:29:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gMIB2",
                                           "createdAt":  "2025-02-27T10:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-27T10:29:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gMKBy",
                                           "createdAt":  "2025-02-27T10:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "/cc: @AaronRobinsonMSFT @elinor-fung @jkotas @grendello @jonpryor @rolfbjarne @pavelsavara ",
                                           "updatedAt":  "2025-02-27T10:32:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gNIfD",
                                           "createdAt":  "2025-02-27T12:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIt4OQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "grendello",
                                                                               "createdAt":  "2025-02-27T18:23:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zoujyjs",
                                                                               "createdAt":  "2025-03-06T02:51:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e Going forward, we would like to avoid using private hosting APIs and use hostfxr APIs instead.\n\nWhat\u0027s wrong with the private hosting APIs?\n\nFrom https://github.com/dotnet/runtime/blob/main/docs/design/features/native-hosting.md:\n\n\u003e `hostfxr` and `hostpolicy APIs` [...] These can execute application, determine available SDKs, determine native dependency locations, resolve component dependencies and so on.\n\nThat sounds like a massive overkill for what we need it for. We know which SDK to use (it\u0027s embedded in the app), we know where all the native dependencies are (also all in the app), etc.\n\nOur startup needs are really rather simple:\n\n1. First we need to call a specific managed method, which will initialize all our managed logic.\n2. Optionally call the managed Main method.\n\t* App extensions don\u0027t have a managed Main method, the entry point into managed code can be any API we\u0027ve exposed to Objective-C.\n\nNote that for NativeAOT we don\u0027t neither of those two points, because we expose both our initialization method + the managed Main method using [UnmanagedCallersOnly] entry points we just call from native code.\n\nSo I think our needs can be stated rather simply: we can figure out a lot at build time, so we need a hosting API that takes advantage of that fact.",
                                           "updatedAt":  "2025-02-27T12:18:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gNr57",
                                           "createdAt":  "2025-02-27T13:18:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Which means that pointers need to be converted to UTF8 strings which are internally converted back to pointers.\n\nThis assumes that the source of truth for the property values are UTF16 strings. Is it really the case?\n\nIn general, file formats and the Unix APIs are UTF8 that makes UTF8/UTF16 conversions very common. A few more should not be a big deal.\n\nBTW: Our C/C++ implementation of UTF8/UTF16 conversions seems to be leaving perf on the table, but it have not showed up on the radar except for this PR micro-benchmark: https://github.com/dotnet/runtime/pull/102424#issuecomment-2123770259\n\n\u003e Additionally, this conversion could break tagged pointers on ARMv8+.\n\nI do not see a problem here.\n\n\u003e list of requirements \n\nMy list would be: \n- Allow efficient zero-copy loading of both IL and native code. The scheme implemented in #112934 ends up copying all native code. It is inefficient (megabytes of memory copied), and it won\u0027t work for platforms that prohibit dynamic code generation.\n- No json parsing during startup in fully self-contained Android/iOS/WASM apps. As @rolfbjarne said, we can figure all of this at build time.\n- Be lazy as much as possible, avoid materializing very long strings. `TRUSTED_PLATFORM_ASSEMBLIES` value that is extremely long string is the main offender. https://github.com/dotnet/runtime/pull/100503#discussion_r1550067939 has done some experiments with fixing it.\n",
                                           "updatedAt":  "2025-02-27T13:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gN1po",
                                           "createdAt":  "2025-02-27T13:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e \u003e Which means that pointers need to be converted to UTF8 strings which are internally converted back to pointers.\n\u003e \n\u003e This assumes that the source of truth for the property values are UTF16 strings. Is it really the case?\n\nNo, for some of the properties the source of truth is _a pointer_ - some properties are function pointers.\n\nOne example is PINVOKE_OVERRIDE, we do:\n\n```c\nchar *pinvokeOverride = strdup_printf (\"%p\", \u0026xamarin_pinvoke_override); // xamarin_pinvoke_override is a C function\ncoreclr_initialize (..., pinvokeOverride, ...); // very pseudo code here\n```\n",
                                           "updatedAt":  "2025-02-27T13:35:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gOJxp",
                                           "createdAt":  "2025-02-27T14:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e * Be lazy as much as possible, avoid materializing very long strings. `TRUSTED_PLATFORM_ASSEMBLIES` value that is extremely long string is the main offender. [Expand host_runtime_contract to get assembly names and resolve their paths #100503 (comment)](https://github.com/dotnet/runtime/pull/100503#discussion_r1550067939) has done some experiments with fixing it.\n\nFor iOS apps we generate C code, so we can provide TRUSTED_PLATFORM_ASSEMBLIES in pretty much any format.\n\nOne idea could be a constant presorted list of constant (UTF8 or UTF16) strings the runtime can do a binary search in for instance.",
                                           "updatedAt":  "2025-02-27T14:05:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gPwDA",
                                           "createdAt":  "2025-02-27T16:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e * Be lazy as much as possible, avoid materializing very long strings. `TRUSTED_PLATFORM_ASSEMBLIES` value that is extremely long string is the main offender. [Expand host_runtime_contract to get assembly names and resolve their paths #100503 (comment)](https://github.com/dotnet/runtime/pull/100503#discussion_r1550067939) has done some experiments with fixing it.\n\nThis should be resurrectable. Had a hard time with the hosting tests if I remember correctly.\n",
                                           "updatedAt":  "2025-02-27T16:28:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gQviW",
                                           "createdAt":  "2025-02-27T18:16:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e No, for some of the properties the source of truth is a pointer - some properties are function pointers.\n\u003e One example is PINVOKE_OVERRIDE, we do:\n\nAh ok, this one. I disagree that this negatively impacts the performance during startup. The overhead of these roundtrips is miniscule. I agree that this is not pretty, and it is fine to consider it during the design.\n\n\u003e For iOS apps we generate C code, so we can provide TRUSTED_PLATFORM_ASSEMBLIES in pretty much any format.\n\u003e One idea could be a constant presorted list of constant (UTF8 or UTF16) strings the runtime can do a binary search in for instance.\n\nThe runtime does not actually need the list. The runtime just needs a callback that returns the payload (file name, pointer to mapped memory, etc.) for the given assembly name.",
                                           "updatedAt":  "2025-02-27T18:17:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gQ647",
                                           "createdAt":  "2025-02-27T18:35:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "\u003e \u003e No, for some of the properties the source of truth is a pointer - some properties are function pointers.\n\u003e \u003e One example is PINVOKE_OVERRIDE, we do:\n\u003e \n\u003e Ah ok, this one. I disagree that this negatively impacts the performance during startup. The overhead of these roundtrips is miniscule. I agree that this is not pretty, and it is fine to consider it during the design.\n\nLet me describe the process here:\n\n  1. Host converts a pointer to a hexadecimal UTF8 string (or an integer one, more on that later)\n  2. coreclr_initialize first must [walk over the entire collection](https://github.com/dotnet/runtime/blob/bfc881417c984ee23c8903b2bd7aa42e75cbc800/src/coreclr/dlls/mscoree/exports.cpp#L154-L172) of properties (30 at this point for a `dotnet new android` app), using strcmp over potentially each of them to find the pointer property.\n  3. coreclr_initialie converts the [string to Unicode](https://github.com/dotnet/runtime/blob/bfc881417c984ee23c8903b2bd7aa42e75cbc800/src/coreclr/dlls/mscoree/exports.cpp#L151-L152) - which requires [**two** passes](https://github.com/dotnet/runtime/blob/bfc881417c984ee23c8903b2bd7aa42e75cbc800/src/coreclr/dlls/mscoree/exports.cpp#L78-L90) over the string, one to determine the desired destination buffer length and the other to do the actual conversion.\n  4. Destination string is malloc-ed\n  5. Unicode string is sent to [another API](https://github.com/dotnet/runtime/blob/main/src/coreclr/pal/src/cruntime/wchar.cpp#L329) which then immediately [converts it back to UTF8](https://github.com/dotnet/runtime/blob/bfc881417c984ee23c8903b2bd7aa42e75cbc800/src/coreclr/pal/src/cruntime/wchar.cpp#L344-L369)\n  6. The UTF8 string is converted back to an integer by [calling `strtoull`](https://github.com/dotnet/runtime/blob/bfc881417c984ee23c8903b2bd7aa42e75cbc800/src/coreclr/pal/src/cruntime/wchar.cpp#L371)\n\nThis process is repeated for up to 3 pointers currently (if the host optimizes it, it\u0027s just a single pointer).\n\nNone of those steps are necessary, and it\u0027s a 100% waste of time. Dismissing such \"insignificant\" delays is what leads to software that underperforms. It is especially important on mobile to not ignore such time and resource waste.",
                                           "updatedAt":  "2025-02-27T18:35:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gQ82n",
                                           "createdAt":  "2025-02-27T18:38:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "I fully agree with @rolfbjarne that we need simple, directly callable API and that hoxstfxr is a serious overkill for both iOS and Android apps. We have a huge opportunity to optimize for zero-cost operations for many things here. Properties, for instance, could be pre-converted at build time to Unicode and their values sent to the runtime not as strings, but as concrete (limited) types (e.g. bool, int, float) - other property values could be sent as Unicode strings. ",
                                           "updatedAt":  "2025-02-27T18:38:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gQ-Uo",
                                           "createdAt":  "2025-02-27T18:41:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "\u003e \u003e Which means that pointers need to be converted to UTF8 strings which are internally converted back to pointers.\n\u003e \n\u003e This assumes that the source of truth for the property values are UTF16 strings. Is it really the case?\n\u003e \n\u003e In general, file formats and the Unix APIs are UTF8 that makes UTF8/UTF16 conversions very common. A few more should not be a big deal.\n\u003e \n\u003e BTW: Our C/C++ implementation of UTF8/UTF16 conversions seems to be leaving perf on the table, but it have not showed up on the radar except for this PR micro-benchmark: [#102424 (comment)](https://github.com/dotnet/runtime/pull/102424#issuecomment-2123770259)\n\u003e \n\u003e \u003e Additionally, this conversion could break tagged pointers on ARMv8+.\n\u003e \n\u003e I do not see a problem here.\n\u003e \nHere\u0027s an example of what happens when a tagged pointer is broken:\n\n```\n02-17 20:44:59.545 25657 25657 F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n02-17 20:44:59.545 25657 25657 F DEBUG   : Build fingerprint: \u0027google/shiba/shiba:15/AP4A.250105.002/12701944:user/release-keys\u0027\n02-17 20:44:59.545 25657 25657 F DEBUG   : Revision: \u0027MP1.0\u0027\n02-17 20:44:59.545 25657 25657 F DEBUG   : ABI: \u0027arm64\u0027\n02-17 20:44:59.545 25657 25657 F DEBUG   : Timestamp: 2025-02-17 20:44:59.470501659+0100\n02-17 20:44:59.545 25657 25657 F DEBUG   : Process uptime: 1s\n02-17 20:44:59.545 25657 25657 F DEBUG   : Cmdline: com.xamarin.mauiperftest\n02-17 20:44:59.545 25657 25657 F DEBUG   : pid: 25635, tid: 25635, name: in.mauiperftest  \u003e\u003e\u003e com.xamarin.mauiperftest \u003c\u003c\u003c\n02-17 20:44:59.545 25657 25657 F DEBUG   : uid: 10297\n02-17 20:44:59.545 25657 25657 F DEBUG   : tagged_addr_ctrl: 0000000000000001 (PR_TAGGED_ADDR_ENABLE)\n02-17 20:44:59.545 25657 25657 F DEBUG   : pac_enabled_keys: 000000000000000f (PR_PAC_APIAKEY, PR_PAC_APIBKEY, PR_PAC_APDAKEY, PR_PAC_APDBKEY)\n02-17 20:44:59.545 25657 25657 F DEBUG   : signal 6 (SIGABRT), code -1 (SI_QUEUE), fault addr --------\n02-17 20:44:59.545 25657 25657 F DEBUG   : Abort message: \u0027Pointer tag for 0x758bc5e7d5 was truncated, see \u0027https://source.android.com/devices/tech/debug/tagged-pointers\u0027.\u0027\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x0  0000000000000000  x1  0000000000006423  x2  0000000000000006  x3  0000007fea9445a0\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x4  7260761f34633664  x5  7260761f34633664  x6  7260761f34633664  x7  7f7f7f7f7f7f7f7f\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x8  00000000000000f0  x9  34f7a19f88f3c120  x10 0000000000000001  x11 00000078b3e89a80\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x12 0000000067b391bb  x13 000000007fffffff  x14 00000000003e02dc  x15 000000cc33ac402a\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x16 00000078b3ef3058  x17 00000078b3edd590  x18 00000078dc4fc000  x19 0000000000006423\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x20 0000000000006423  x21 00000000ffffffff  x22 0000007fea9451b8  x23 00000078db7e8a80\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x24 000000758e994690  x25 0000007fea945300  x26 0000007fea945248  x27 0000000000000001\n02-17 20:44:59.545 25657 25657 F DEBUG   :     x28 0000007fea945ca0  x29 0000007fea944620\n02-17 20:44:59.545 25657 25657 F DEBUG   :     lr  00000078b3e72098  sp  0000007fea9445a0  pc  00000078b3e720bc  pst 0000000000001000\n02-17 20:44:59.545 25657 25657 F DEBUG   : 3 total frames\n02-17 20:44:59.545 25657 25657 F DEBUG   : backtrace:\n02-17 20:44:59.545 25657 25657 F DEBUG   :       #00 pc 000000000005e0bc  /apex/com.android.runtime/lib64/bionic/libc.so (abort+156) (BuildId: d607b2dd86e0ffc603529ce13afab7fa)\n02-17 20:44:59.545 25657 25657 F DEBUG   :       #01 pc 0000000000045508  /apex/com.android.runtime/lib64/bionic/libc.so (free+104) (BuildId: d607b2dd86e0ffc603529ce13afab7fa)\n02-17 20:44:59.545 25657 25657 F DEBUG   :       #02 pc 00000000000b800c  /memfd:doublemapper (deleted) (offset 0x161000)\n02-17 20:44:59.554  1633 25661 I DropBoxManagerService: add tag=data_app_native_crash isTagEnabled=true flags=0x2\n```\n\nIt will become a more pronounced problem as more devices use ARMv8 with tagging extensions or ARMv9. We most certainly cannot ignore it nor can we risk breaking any pointers (via e.g. casting) in any way.",
                                           "updatedAt":  "2025-02-27T18:41:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gRAa8",
                                           "createdAt":  "2025-02-27T18:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "\u003e \u003e No, for some of the properties the source of truth is a pointer - some properties are function pointers.\n\u003e \u003e One example is PINVOKE_OVERRIDE, we do:\n\u003e \n\u003e Ah ok, this one. I disagree that this negatively impacts the performance during startup. The overhead of these roundtrips is miniscule. I agree that this is not pretty, and it is fine to consider it during the design.\n\nThe overhead of the entire property set (30 properties, 60 strings) conversion costs 15% of the total `coreclr_initialize` time in my testing, on a fast device (Pixel 8). This cost will be bigger on slower devices. On Pixel 8 it\u0027s \"just\" 4ms, but considering that the entire startup time of a plain Android app using Mono runtime takes 167ms, the 4ms are significant (especially that they are just one of an entire set of equally \"small\" amounts of time spent doing something that doesn\u0027t have to be done or doing it less efficiently that it could be done). We must not, and I can\u0027t stress it more, ignore even the smallest inefficiencies.",
                                           "updatedAt":  "2025-02-27T18:45:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gRFdF",
                                           "createdAt":  "2025-02-27T18:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "\u003e My list would be:\n\u003e \n\u003e     * Allow efficient zero-copy loading of both IL and native code. The scheme implemented in [Allow R2R for images provided via external_assembly_probe #112934](https://github.com/dotnet/runtime/pull/112934) ends up copying all native code. It is inefficient (megabytes of memory copied), and it won\u0027t work for platforms that prohibit dynamic code generation.\n\n100% agreed, but as long as R2R is a resource embedded in an assembly this cannot be avoided. The best approach here is to place the code in a separate shared library and request it via an API similar to `extended_assembly_probe` when needed. Shared libraries are, sort of, privileged denizens on Android and on iOS, I imagine, the API could just return a pointer to in-memory data, pre-allocated and filled at build time.\n\n\u003e \n\u003e     * No json parsing during startup in fully self-contained Android/iOS/WASM apps. As [@rolfbjarne](https://github.com/rolfbjarne) said, we can figure all of this at build time.\n\nAndroid already does all the JSON processing at build time. We generate native code (via LLVM IR) which contains environment variables, system properties as well as runtime properties (those from `runtimeconfig.json`)\n\n\u003e \n\u003e     * Be lazy as much as possible, avoid materializing very long strings. `TRUSTED_PLATFORM_ASSEMBLIES` value that is extremely long string is the main offender. [Expand host_runtime_contract to get assembly names and resolve their paths #100503 (comment)](https://github.com/dotnet/runtime/pull/100503#discussion_r1550067939) has done some experiments with fixing it.\n\nAgain, 100% agreed - I would add not converting pointers to strings to pointers as the lazy optimization here :)",
                                           "updatedAt":  "2025-02-27T18:54:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gRHya",
                                           "createdAt":  "2025-02-27T18:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Let me describe the process here:\n\nYou are pointing out that the implementation of the whole thing is not very efficient today and it can be streamlined. I agree with that.\n\nThe overhead of the `PINVOKE_OVERRIDE` roundtrips required by the current contract is miniscule compared to that. It is like in the order 100 nanoseconds if the other inefficiencies are fixed.\n\n\u003e Here\u0027s an example of what happens when a tagged pointer is broken:\n\nCoreCLR has number of issues/bugs related with tagged pointers. This is just one of many.\n\n\u003e 100% agreed, but as long as R2R is a resource embedded in an assembly this cannot be avoided. The best approach here is to place the code in a separate shared library and request it via an API similar to extended_assembly_probe when needed.\n\nRight, we will need something along these lines.",
                                           "updatedAt":  "2025-02-27T18:59:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gROSE",
                                           "createdAt":  "2025-02-27T19:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "\u003e \u003e Let me describe the process here:\n\u003e \n\u003e You are pointing out that the implementation of the whole thing is not very efficient today and it can be streamlined. I agree with that.\n\nI\u0027m pointing out that conversion from pointer-to-string-to-pointer is an entirely unnecessary process. We are running in a single process, we call the API directly, there\u0027s no reason to pass a pointer as a string. And note - `coreclr_initalize` takes **two** pointers directly, why are they passed as raw pointers and not as strings? Playing devil\u0027s advocate here.\n\n\u003e The overhead of the `PINVOKE_OVERRIDE` roundtrips required by the current contract is miniscule compared to that. It is like in the order 100 nanoseconds if the other inefficiencies are fixed.\n\u003e \n\nThe overhead is 100% wasted time - this is the main point. Dismissing such \"insignificant\" things isn\u0027t going to lead to better performance.\n\n\u003e \u003e Here\u0027s an example of what happens when a tagged pointer is broken:\n\u003e \n\u003e CoreCLR has number of issues/bugs related with tagged pointers. This is just one of many.\n\u003e \n\nThey must be fixed then, including this one.\n\n",
                                           "updatedAt":  "2025-02-27T19:10:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gRh0i",
                                           "createdAt":  "2025-02-27T19:42:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e The overhead is 100% wasted time - this is the main point. Dismissing such \"insignificant\" things isn\u0027t going to lead to better performance.\n\nDiscussing a few hundred nanosecond savings is a distraction in this scenario at this point. It will lead to worse performance at the end it since we will pay less attention to improving things that actually matter.",
                                           "updatedAt":  "2025-02-27T19:42:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gRpi8",
                                           "createdAt":  "2025-02-27T19:55:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "\u003e \u003e The overhead is 100% wasted time - this is the main point. Dismissing such \"insignificant\" things isn\u0027t going to lead to better performance.\n\u003e \n\u003e Discussing a few hundred nanosecond savings is a distraction in this scenario at this point. It will lead to worse performance at the end it since we will pay less attention to improving things that actually matter.\n\nIt\u0027s not a distraction since the code has already been written to work around it. I don\u0027t see why fixing this obvious inefficiency appears to be a problem. Maybe if I understood the reason behind this conversion I wouldn\u0027t object it. And conversion of pointer-to-string-to-pointer **does** actually matter - since it has the potential to break tagged pointers as we pointed out before.",
                                           "updatedAt":  "2025-02-27T19:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gRxkL",
                                           "createdAt":  "2025-02-27T20:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEH8oWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-02-27T20:15:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-02-27T21:04:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e I don\u0027t see why fixing this obvious inefficiency appears to be a problem. \n\nI don\u0027t think there is a problem. I\u0027ve maintained that we get a big picture sense of where we are and attack the most glaring areas. I feel Jan is saying something similar. ",
                                           "updatedAt":  "2025-02-27T20:13:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gZmOj",
                                           "createdAt":  "2025-02-28T16:26:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Additionally, this conversion could break tagged pointers on `ARMv8+`.\n\nShould we also attempt to look at any RISC-V specific concerns as part of this?\n\nI don\u0027t know if there are any, not do I have any of the relevant experience, but I do know it\u0027s being worked on here, so if there are architecture concerns like this, it seems like it should be brought up....",
                                           "updatedAt":  "2025-02-28T16:26:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaKpl",
                                           "createdAt":  "2025-02-28T17:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Should we also attempt to look at any RISC-V specific concerns as part of this?\n\nCurrently there is no riscv64 mobile platform support in runtime, and desktop linux-riscv64 does not use this API with non-stringly key-value arrays.\nhttps://github.com/dotnet/runtime/blob/72797525571f962081da2bd463706ffb291bf4e8/src/coreclr/dlls/mscoree/exports.cpp#L235-L242\non windows, corehost uses utf-16 and utf-8 on unix, there is no conversion happening on unix in corehost (from main() -\u003e coreclr_initialize() call path). The issue raised above is about passing function pointer in `propertyValues` array on mobile platform, for that integer to string conversion is necessary.\n\n(perhaps xamarin could use `strdup_printf(\"%#\" PRIxPTR` and `sscanf(pinvokeOverride, \"%\" SCNxPTR` instead which covers the tags?)",
                                           "updatedAt":  "2025-02-28T17:42:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaOi1",
                                           "createdAt":  "2025-02-28T17:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e \u003e Additionally, this conversion could break tagged pointers on ARMv8+.\n\n\u003e Should we also attempt to look at any RISC-V specific concerns as part of this?\n\nThere should not be any architecture specific concerns to worry about for the design tracked by this issue.\n\nWrt. tagged pointers: Tagged pointers are 64-bit values just like regular pointers on 64-bit platforms. I do not see anything fundamental why converting the value to string and back is incompatible with it. It is no different from storing to value to a field or a static variable and reading it back. My guess is that the C/C++ compiler is getting confused where to add and validate tags on the roundtrip code path. It should be like 2-line fix somewhere to fix this confusion once it is understood what\u0027s going on. I expect that there are number of other places in coreclr with the same problem. We should have a separate issue about it if tagged data pointers are something to worry about on Android.",
                                           "updatedAt":  "2025-02-28T17:51:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gagL3",
                                           "createdAt":  "2025-02-28T18:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIEhpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-28T18:35:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "grendello",
                                                                               "createdAt":  "2025-02-28T18:42:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "@jkotas [wrote](https://github.com/dotnet/runtime/issues/112984#issuecomment-2691229877):\n\n\u003e I do not see anything fundamental why converting the value to string and back is incompatible with it.\n\nTagged pointers are incompatible with round-tripping via strings because tagged pointers are explicitly designed to be incompatible with round-tripping, for security.\n\nSee e.g. [Pointer Tagging for Memory Safety](https://www.microsoft.com/en-us/research/uploads/prod/2019/07/Pointer-Tagging-for-Memory-Safety.pdf):\n\n\u003e The change involves having the CPU hold two extra tag bits to the side of each piece of 64-bit data to denote whether the data holds a code/data pointer or not. By doing this, we can prevent attackers from using ‘data’ to corrupt ‘pointers’ and cause undesired damage.\n\u003e …\n\u003e  the spirit of this proposal is to make corruption of pointers as hard as possible. We achieve this by storing (non-addressable) tag bits on the side of each 64-bit word in the computer to denote whether the data is merely regular data or it actually contains a pointer and, if so, what kind of pointer (code or data).\n\u003e \n\u003e The general spirit of this pointer tagging proposal is to make the HW aware of whether each 64-bit in the system is regular ‘data’, or whether it is a ‘data pointer’ or a ‘code pointer’\n\nWhen you pass pointers through strings, you bypass all of the pointer tagging going on behind the scenes.  By doing so, *the pointer is different*; it has the same *value*, but it lacks the *tags*, and thus using it will result in [a crash](https://github.com/dotnet/runtime/issues/112984#issuecomment-2688804136).\n\nThis is all very much ***by design*** and the only way to \"fix\" it is to ***stop doing that***: pointers ***must*** be passed around *as pointers*, not strings!\n\nThis has the \"nice\" benefit -- in the context of this issue -- that *we need to stop using strings to store pointers*, which means *less* parsing overhead during startup, and better performance.  Win-Win!",
                                           "updatedAt":  "2025-02-28T18:32:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gan9n",
                                           "createdAt":  "2025-02-28T18:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e This is all very much by design and the only way to \"fix\" it is to stop doing that: pointers must be passed around as pointers, not strings!\n\nI disagree with that. As I have said, the roundtripping through string is no different from storing the pointer in a field or a static variable and reading it back.\n\nDepending on the pointer tagging plan that the memory location is on, the roundtrip of storing the pointer to a field or a static variable may strip the tag on store and re-attach the tag on load; or store and load the pointer with the tag. The exact same options exist when roundtripping the pointer through a string.\n",
                                           "updatedAt":  "2025-02-28T18:51:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaxzY",
                                           "createdAt":  "2025-02-28T19:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIEx7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-02-28T19:17:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "grendello",
                                                                               "createdAt":  "2025-02-28T19:17:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "@jkotas [wrote](https://github.com/dotnet/runtime/issues/112984#issuecomment-2691333991):\n\n\u003e I disagree with that. As I have said, the roundtripping through string is no different from storing the pointer in a field or a static variable and reading it back.\n\nIt\u0027s nice that you disagree with that, but copying a pointer value *is not* the same as roundtripping through a string.\n\nConsider this short C++ program:\n\n```cpp\n#include \u003cstdio.h\u003e\n\nvoid invoke_me ()\n{\n  printf(\"Hello, world!\\n\");\n}\n\nint main()\n{\n  void (*p)() = invoke_me;\n  p(); /* works */\n\n  void (*q)() = p;\n  q(); /* works */\n\n  char *buf = new char[100];\n  snprintf(buf, sizeof(buf), \"%p\", p);\n  void (*r)() = nullptr;\n  sscanf(buf, \"%p\", \u0026r);\n  r(); /* boom */\n\n  return 0;\n}\n```\n\nI you compile it on macOS with clang using `-fsanitize=address`:\n\n```sh\nclang -fsanitize=address ptr-tag.cc -lc++\n```\n\nand run it, it crashes, big-time:\n\n```\n% ./a.out\na.out(28379,0x7ff84452db00) malloc: nano zone abandoned due to inability to reserve vm space.\nHello, world!\nHello, world!\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==28379==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000101dc (pc 0x0000000101dc bp 0x7ff7be13a5e0 sp 0x7ff7be13a4f8 T0)\n==28379==The signal is caused by a READ memory access.\n    #0 0x101dc  (\u003cunknown module\u003e)\n    #1 0x7ff80144a2cc in start+0x70c (dyld:x86_64+0xfffffffffff4f2cc)\n\n==28379==Register values:\nrax = 0x00007ff7be13a520  rbx = 0x00007ff7be13a540  rcx = 0x0000100000000000  rdx = 0x0000000000000007  \nrdi = 0x00000ffef7c274a4  rsi = 0x00000ffef7c274a4  rbp = 0x00007ff7be13a5e0  rsp = 0x00007ff7be13a4f8  \n r8 = 0x0000000000000000   r9 = 0xf3f3f300f1f1f100  r10 = 0x0000000000000000  r11 = 0x00007ff7be13a238  \nr12 = 0x00007ff7be13a738  r13 = 0x00007ff7be13a7d0  r14 = 0x00007ff844704e70  r15 = 0x00007ff8442910a0  \nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV (\u003cunknown module\u003e) \n==28379==ABORTING\nzsh: abort      ./a.out\n```\n\nWhy? Because that\u0027s what [Clang\u0027s AddressSanitizer is for](https://clang.llvm.org/docs/AddressSanitizer.html#usage).\n\nSee also [Hardware-assisted AddressSanitizer](https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html), which on arm64 uses hardware pointer tagging to implement the (software based) AddressSanitizer which caused the above crash.\n\n***Going through strings is bad.***\n\n@grendello has a variation on the above app crashing on an Android device, with *real* pointer tagging.  Same basic scenario, similar basic crash (but with hardware support!).",
                                           "updatedAt":  "2025-02-28T19:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaySN",
                                           "createdAt":  "2025-02-28T19:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "For reference, this is the Android 15 Pixel 8 crash:\n\n```shell\nshiba:/data/local/tmp $ ./test\nHello, world!\nHello, world!\nBus error \n```\n\n```\nFatal signal 7 (SIGBUS), code 1 (BUS_ADRALN), fault addr 0x63a26 in tid 8094 (test), pid 8094 (test)\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\nBuild fingerprint: \u0027google/shiba/shiba:15/AP4A.250105.002/12701944:user/release-keys\u0027\nRevision: \u0027MP1.0\u0027\nABI: \u0027arm64\u0027\nTimestamp: 2025-02-28 20:11:31.761527452+0100\nProcess uptime: 1s\nCmdline: ./test\npid: 8094, tid: 8094, name: test  \u003e\u003e\u003e ./test \u003c\u003c\u003c\nuid: 2000\ntagged_addr_ctrl: 0000000000000001 (PR_TAGGED_ADDR_ENABLE)\npac_enabled_keys: 000000000000000f (PR_PAC_APIAKEY, PR_PAC_APIBKEY, PR_PAC_APDAKEY, PR_PAC_APDBKEY)\nsignal 7 (SIGBUS), code 1 (BUS_ADRALN), fault addr 0x0000000000063a26\n    x0  0000000000000001  x1  0000000000000000  x2  0000000000000010  x3  0000007fd1cfaa80\n    x4  0000007fd1cfab00  x5  0000000000000004  x6  fefefefefefefeff  x7  7f7f7f7f7f7f7f7f\n    x8  0000000000063a26  x9  208da78212096f96  x10 0000000000000020  x11 0000000000063a26\n    x12 0000000000000010  x13 0000000000000001  x14 00000000ffffffff  x15 00000000ffffffa5\n    x16 00000071ebae9878  x17 00000071eba831d0  x18 00000071ec0ec000  x19 b40000707b95eac0\n    x20 00000063a2654e3f  x21 0000000000000001  x22 0000007fd1cfafc8  x23 0000007fd1cfafd0\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000007fd1cfaf20\n    lr  00000063a2663428  sp  0000007fd1cfaf10  pc  0000000000063a26  pst 0000000060001800\n3 total frames\nbacktrace:\n  NOTE: Function names and BuildId information is missing for some frames due\n  NOTE: to unreadable libraries. For unwinds of apps, only shared libraries\n  NOTE: found under the lib/ directory are readable.\n  NOTE: On this device, run setenforce 0 to make the libraries readable.\n  NOTE: Unreadable libraries:\n  NOTE:   /data/local/tmp/test\n      #00 pc 0000000000063a26  \u003cunknown\u003e\n      #01 pc 0000000000019424  /data/local/tmp/test\n      #02 pc 0000000000057854  /apex/com.android.runtime/lib64/bionic/libc.so (__libc_init+116) (BuildId: d607b2dd86e0ffc603529ce13afab7fa)\n```",
                                           "updatedAt":  "2025-02-28T19:18:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gbGyH",
                                           "createdAt":  "2025-02-28T20:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIFIeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-02-28T20:11:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Right, I have said: \"My guess is that the C/C++ compiler is getting confused where to add and validate tags on the roundtrip code path. It should be like 2-line fix somewhere to fix this confusion once it is understood what\u0027s going on.\"\n\nYou are saying that the roundtripping pointers through a string is not pretty and that the way we do that today may not be compatible with pointer tagging. I agree with that.\n\nI disagree that roundtripping a pointer through a string is fundamentally incompatible with pointer tagging.\n\nThe example that you have included in your reply has a trivial bug: `snprintf(buf, sizeof(buf), \"%p\", p);` should be `snprintf(buf, 100, \"%p\", p);`. Once you fix the bug, it works just fine with clang address sanitizer.",
                                           "updatedAt":  "2025-02-28T20:07:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gbIMb",
                                           "createdAt":  "2025-02-28T20:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "There is also the Android documentation that describes the use of upper bits in the pointer, not two extra bits along side the 64-bit pointer. See https://source.android.com/docs/security/test/tagged-pointers.",
                                           "updatedAt":  "2025-02-28T20:10:58Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "New hostfxr hosting API design - discussion",
        "labels":  [
                       "discussion",
                       "area-Host",
                       "os-android",
                       "os-ios",
                       "os-wasi",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113067",
        "createdAt":  "2025-03-03T10:33:28Z",
        "number":  113067,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T11:24:17Z",
        "body":  "create host app similar to other coreclr hosts. the host should be able to run apps on wasm/browser\n\nuse mono simple server to run the app in the default browser or through offscreen chromedriver\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwPS-0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gwy_d",
                                           "createdAt":  "2025-03-04T11:11:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e use mono simple server\n\nWe already have HTTP server in `WasmAppHost`",
                                           "updatedAt":  "2025-03-04T11:11:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lB41C",
                                           "createdAt":  "2025-04-01T09:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "radekdoulik",
                                           "body":  "\u003e \u003e use mono simple server\n\u003e \n\u003e We already have HTTP server in `WasmAppHost`\n\nok, maybe we can merge these at some point. I use the simple server currently as it is able to run through selenium/chromedriver and also to get the console output back to the host std output.",
                                           "updatedAt":  "2025-04-01T09:23:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lC5N7",
                                           "createdAt":  "2025-04-01T11:07:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "The option to forward the console output through WebSocket is there as well",
                                           "updatedAt":  "2025-04-01T11:07:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A9L7S",
                                           "createdAt":  "2025-08-29T14:39:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "+1 for not growing simple server more complex",
                                           "updatedAt":  "2025-08-29T14:39:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[wasm coreclr] create host to run on browser",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115799",
        "createdAt":  "2025-05-20T18:44:21Z",
        "number":  115799,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCnTYA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "drewnoakes",
                                            "createdAt":  "2025-05-21T01:52:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-02T20:14:32Z",
        "body":  "The existing `--info` command is intended to include information about the .NET install - this includes running the SDK (if it exists) and querying the system for runtime and SDK installations, environment variables, global.json, etc.\n\nExample output:\n```\nHost:\n  Version:      10.0.0-preview.4.25258.110\n  Architecture: x64\n  Commit:       c22dcd0c7a\n  RID:          win-x64\n\n.NET SDKs installed:\n  No SDKs were found.\n\n.NET runtimes installed:\n  Microsoft.NETCore.App 10.0.0-preview.4.25258.110 [C:\\dotnet-runtime-10-preview4\\shared\\Microsoft.NETCore.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n```\n\nThere is no way to query basic information about the host itself. We could add a simpler `--host-info` command that just prints info for the host itself:\n```\n\u003e dotnet --host-info\nVersion:      10.0.0-preview.4.25258.110\nArchitecture: x64\nCommit:       c22dcd0c7a\nRID:          win-x64\n```\n\nA possible extension could be to allow json output - that would be in line with the desired SDK `info` command: https://github.com/dotnet/sdk/issues/33697",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrJVZMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6slVkz",
                                           "createdAt":  "2025-05-20T18:44:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-20T18:44:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add `--host-info` command to the host for printing information about the host itself only",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116225",
        "createdAt":  "2025-06-02T19:25:44Z",
        "number":  116225,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-02T21:00:52Z",
        "body":  "Currently, the `dotnet` commands for printing data (`--info`, `--help`, `--list-runtimes`, `--list-sdks`) are required to be the first argument. With https://github.com/dotnet/runtime/pull/1160780, an `--arch` option is now available for `--list-runtimes/sdks` - and must come after the data printing command. The host has a number of other options intended for running an application:\nhttps://github.com/dotnet/runtime/blob/39e8c08cbbed6b655fbc0a4264d1ccd2cb626477/src/native/corehost/fxr/command_line.cpp#L25-L31\nIf any are specified before a data printing command, the data printing command is not recognized and the operation fails.\n\nThis is inconsistent with how such commands are typically handled, where they can appear in any order and specified with other options - where those options may not actually apply and printing data overrides other options.\n\nSee https://github.com/dotnet/runtime/pull/116078#issuecomment-2923052043\n\nWe should consider relaxing this ordering requirement to be consistent with other command line behaviour.\n\nSome considerations:\n- `--list-runtimes/sdks` is used as an indication that it is only for host data and the SDK does not need to be resolved or run. It should remain that way.\n- `--info` and `--help` call into the SDK when it exists - which will error out on unknown options. We\u0027ll need to skip the other known host options when calling into the SDK\n- Any unknown option coming before a printing command should still go to the SDK - for example `dotnet \u003cunknown_option\u003e --list-runtimes` should still call into the SDK",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrsfwpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6uxP-q",
                                           "createdAt":  "2025-06-02T19:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-02T19:26:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ux_Cl",
                                           "createdAt":  "2025-06-02T20:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "At least on Unix, maybe we should just use `getopt` for arg parsing? It\u0027s the standard after all. May be an issue if we want to support the same options on Unix and Windows, though.",
                                           "updatedAt":  "2025-06-02T20:15:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Allow re-ordering of host commands to print data (--list-runtimes, --list-sdks, --info, --help) and other options",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116527",
        "createdAt":  "2025-06-11T12:36:44Z",
        "number":  116527,
        "author":  "alexrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-25T22:23:36Z",
        "body":  "With #113183 fixed, I tried updating [runtime.win-x64.Microsoft.NETCore.DotNetAppHost](https://www.nuget.org/packages/runtime.win-x64.Microsoft.NETCore.DotNetAppHost) to 9.0.6, and got:\n\n```\nlld-link : error : Cannot use debug info for \u0027libnethost.lib(trace.cpp.obj)\u0027 [LNK4099]\n    \u003e\u003e\u003e failed to load reference \u0027D:\\a\\_work\\1\\s\\artifacts\\obj\\win-x64.Release\\corehost\\hostmisc\\CMakeFiles\\hostmisc_public.dir\\vc140.pdb\u0027: No such file or directory\nlld-link : error : Cannot use debug info for \u0027libnethost.lib(utils.cpp.obj)\u0027 [LNK4099]\n    \u003e\u003e\u003e failed to load reference \u0027D:\\a\\_work\\1\\s\\artifacts\\obj\\win-x64.Release\\corehost\\hostmisc\\CMakeFiles\\hostmisc_public.dir\\vc140.pdb\u0027: No such file or directory\nlld-link : error : Cannot use debug info for \u0027libnethost.lib(pal.windows.cpp.obj)\u0027 [LNK4099]\n    \u003e\u003e\u003e failed to load reference \u0027D:\\a\\_work\\1\\s\\artifacts\\obj\\win-x64.Release\\corehost\\hostmisc\\CMakeFiles\\hostmisc_public.dir\\vc140.pdb\u0027: No such file or directory\nlld-link : error : Cannot use debug info for \u0027libnethost.lib(fx_ver.cpp.obj)\u0027 [LNK4099]\n    \u003e\u003e\u003e failed to load reference \u0027D:\\a\\_work\\1\\s\\artifacts\\obj\\win-x64.Release\\corehost\\hostmisc\\CMakeFiles\\hostmisc_public.dir\\vc140.pdb\u0027: No such file or directory\nlld-link : error : Cannot use debug info for \u0027libnethost.lib(longfile.windows.cpp.obj)\u0027 [LNK4099]\n    \u003e\u003e\u003e failed to load reference \u0027D:\\a\\_work\\1\\s\\artifacts\\obj\\win-x64.Release\\corehost\\hostmisc\\CMakeFiles\\hostmisc_public.dir\\vc140.pdb\u0027: No such file or directory\n```\n\nThese are actually warnings, so I can work around them, but it would be nice to not have to.\n\nThis was not an issue in the past FWIW.\n\ncc @jkoritzinsky",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsJTFxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wlMXF",
                                           "createdAt":  "2025-06-11T12:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-11T12:41:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "`libnethost.lib` contains references to nonexistent PDB file",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118184",
        "createdAt":  "2025-07-14T09:02:29Z",
        "number":  118184,
        "author":  "lcsondes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJfGpA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Frulfump",
                                            "createdAt":  "2025-08-01T09:30:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-16T03:42:29Z",
        "body":  "### Is your feature request related to a problem? Please describe.\ndotnet/sdk#26647 highlights an important shortcoming in .NET: the inability to publish for AnyCPU. With the recent push for Windows on Arm, I think it\u0027s important to have an officially supported way of shipping AnyCPU executables. It\u0027s silly if .NET Framework can do it just fine, but the supposedly better, more modern version cannot.\n\nThere is some discussion there about the technical challenges for 32-bit x86, but I\u0027d like to re-contextualize this issue to x64/ARM64, which is arguably more important for the future of the Windows ecosystem. The original issue has been untriaged for 3 years.\n\n### Describe the solution you\u0027d like\nBeing able to `dotnet publish` a (framework-dependent) AnyCPU .exe file that runs natively on x64 and ARM64, ideally x86, too. How it\u0027s implemented behind the scenes or what PE headers it has is not important.\n\n### Additional context\nRelying on `dotnet myapp.dll` doesn\u0027t play nice with tools that make decisions based on the .exe, such as Xbox Game Bar, GPU drivers, some application firewalls; the issue highlighted by [this comment](https://github.com/dotnet/sdk/issues/26647#issuecomment-1937063313); and I\u0027m sure many others.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxGGtyw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc66zD4J",
                                           "createdAt":  "2025-07-29T20:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcpopMSFT",
                                           "body":  "Triage: We believe that this type of application requires work both from the OS and the apphost and would need to be a deliberate effort to make it work (ie it can\u0027t be done just in publish). Routing to runtime as I assume that @agocke and the host team would drive this if it became a priority.",
                                           "updatedAt":  "2025-07-29T20:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66zhjt",
                                           "createdAt":  "2025-07-29T21:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "This would require building .NET 5+ into Windows, which we are not going to do, ever.",
                                           "updatedAt":  "2025-07-29T21:04:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66zmE9",
                                           "createdAt":  "2025-07-29T21:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Alternatively, Windows could support x86/x64/arm64 fat binaries, but that is an OS feature, which should be made in the windows feedback tools.",
                                           "updatedAt":  "2025-07-29T21:10:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67EFkw",
                                           "createdAt":  "2025-07-31T03:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lcsondes",
                                           "body":  "@agocke This is exactly what I wanted to avoid by reframing this in a new x64/ARM64 context.\n\nFor instance, would it be possible to use ARM64EC here? The .exe itself would technically be x64 at the very beginning, but the bulk of the application itself would run with native JIT output.",
                                           "updatedAt":  "2025-07-31T03:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67OQO4",
                                           "createdAt":  "2025-07-31T19:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "What are you trying to accomplish? Would the goal be that you download a framework-dependent app and it works, as long as the user has the appropriate runtime already installed?",
                                           "updatedAt":  "2025-07-31T19:13:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67Y2V6",
                                           "createdAt":  "2025-08-01T09:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcx02A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-08-01T09:30:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lcsondes",
                                           "body":  "I can accomplish \"it works\" by shipping x64 everywhere, even self-contained in this case, but ARM64 users could have a better experience (performance, battery life, I presume) if IL was compiled to ARM64 directly, instead of x64-and-then-emulated.\n\nIf this already works behind the scenes somehow, mea culpa. I\u0027ve tried breaking into JIT code on ARM64, and saw x64 disassembly.\n\nThe result is currently good enough to not justify multiple builds (good job on the emulation!), but it feels like a waste when the code is delivered as platform-independent IL.",
                                           "updatedAt":  "2025-08-01T09:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67jSTA",
                                           "createdAt":  "2025-08-02T16:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Are you shipping self-contained or framework dependent? For self contained it would be pretty expensive to carry duplicate code. ",
                                           "updatedAt":  "2025-08-02T16:13:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68i-qC",
                                           "createdAt":  "2025-08-07T09:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lcsondes",
                                           "body":  "Framework dependent.",
                                           "updatedAt":  "2025-08-07T09:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B0avd",
                                           "createdAt":  "2025-09-04T04:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "driver1998",
                                           "body":  "One can use a cursed workaround that is writing an AnyCPU AppHost in .NET Framework, and let that start the CoreCLR of the right architecture.\n\nOf course that means running two CLR instances in the same process.\n\nThere is existing project that does just that: https://github.com/Tyrrrz/DotnetRuntimeBootstrapper\n\nOr you can just have a script that starts `dotnet my-app.dll` for you, too bad Windows doesn\u0027t have a good way to write slient-executing scripts (VBS is on the way out, others will breifly show a console window).",
                                           "updatedAt":  "2025-09-04T04:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B1US0",
                                           "createdAt":  "2025-09-04T05:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEg0Cxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lcsondes",
                                                                               "createdAt":  "2025-09-04T09:15:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "I\u0027ve been thinking about this: I don\u0027t think x86+x64+arm64 is doable, but x64+arm64 might be, using ARM64X.\n\nThe tricky bit would be loading the correct binaries into the process. ARM64EC may also work, but there would be performance penalties.",
                                           "updatedAt":  "2025-09-04T05:39:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B1aed",
                                           "createdAt":  "2025-09-04T05:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEg4Y-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2025-09-04T16:41:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "driver1998",
                                           "body":  "ARM64EC can\u0027t load ARM64 dlls (and therefore ARM64 CoreCLR) and x64 systems can\u0027t run ARM64EC binaries so it is useless in this scenario.\n\nAn ARM64X apphost with pure x64 and pure ARM64 slice should work though. I think these will have to be built by hand as I don\u0027t think Visual Studio allow building like this.",
                                           "updatedAt":  "2025-09-04T05:48:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B1gJI",
                                           "createdAt":  "2025-09-04T05:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "driver1998",
                                           "body":  "One tricky thing is ARM64X exes will switch its executed architecture based on its parent process, that is:\n\nIf you run an ARM64X exe on a ARM64 process: the ARM64 slice run.\nIf you run an ARM64X exe on a x64 process: the x64 slice run.\n\nUnless you force it with things like `start /machine` in cmd.\n\nThis is different from traditional AnyCPU EXEs and can be confusing.",
                                           "updatedAt":  "2025-09-04T05:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B4HuY",
                                           "createdAt":  "2025-09-04T09:19:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEg03eA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-09-04T10:52:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lcsondes",
                                           "body":  "I\u0027m not particularly attached to the AnyCPU name. I wouldn\u0027t mind if this was technically a new platform named x64+ARM64, or something like that.\n\nI defaulted to AnyCPU because .NET Framework can do x86+x64+ARM64, but I agree that if x86 in particular is standing in the way of this, it\u0027s not a big deal to lose.",
                                           "updatedAt":  "2025-09-04T09:19:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EYa3L",
                                           "createdAt":  "2025-09-16T03:35:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "driver1998",
                                           "body":  "Actually, another way to resolve this is... Why not use a different file extension for .NET IL executables? Something like `.ilexe` would be great. \n\nThat way we can simply add file assiocations to allow double-click execution. It also matches other managed environments like Java (`.jar`) and Python (`.py` and `.pyc`).\n\nThe reason we cannot do that is .NET uses `.dll` and `.dll` is used everywhere for unmanaged dynamic link libraries.\n\nWindows can also ship a stub that loads `.ilexe` and prompts the required .NET version to install.\n\n",
                                           "updatedAt":  "2025-09-16T03:35:17Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "ARM64EC/ARM64X support for apphost, allowing one apphost to launch either x64 or ARM64 runtime",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118488",
        "createdAt":  "2025-08-07T14:24:01Z",
        "number":  118488,
        "author":  "baronfel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNTuoA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YuliiaKovalova",
                                            "createdAt":  "2025-08-07T14:24:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rainersigwald",
                                            "createdAt":  "2025-08-29T15:19:13Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-11T19:00:11Z",
        "body":  "As the SDK and MSBuild teams have started adopting the `sdk.paths` feature in global.json, one thing we\u0027ve noticed is that there are scenarios in which can make testing harder.  These repos often do integration-level testing of an SDK-like layout _in situ_ - and this often involves running `dotnet`- or `msbuild.exe`-based commands that intended to work on cutomized SDK layouts/roots.\n\nIt is relatively easy for us to configure these scenarios/environments to use these custom SDK roots by setting the following env vars:\n\n* PATH - to ensure the muxer in the layout root is used,\n* DOTNET_ROOT - to ensure the layout root is used when probing for Runtimes, and\n* DOTNET_HOST_PATH - to ensure that the muxer in the layout root isn\u0027t confused for the \u0027outer\u0027 dotnet.exe that started the testing host process, etc.\n\nHowever, these tests are still vulnerable to SDK-resolution hijacking by global.jsons in the repo roots - especially with `sdk.paths` where the repo-local root may not have all of the runtimes the tests may require.  To work around this, we\u0027ve resorted to creating a \u0027dummy\u0027 global.json in the testing root file system heirarchy to act as a forced-stop for the global.json probing logic in the muxer.\n\nInstead of generating this file, we feel it would be more understandable if the muxer itself had a documented knob that said \"don\u0027t try to probe for global.json at all, just use the process environment to do probing\".",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Allow the muxer to skip global.json resolution entirely",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118846",
        "createdAt":  "2025-08-18T16:27:30Z",
        "number":  118846,
        "author":  "GregoFromQinoth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-03T18:21:29Z",
        "body":  "### Description\n\nI use Visual Studio 2022 Community on Windows OS to create some console \u0026 Winforms apps. I usually prepare \"release packages\" for the users of my apps - .zip files that the users can just extract and run the app without any additional installation aside of .NET Runtime. I often use `additionalProbingPaths` in `runtimeconfig.json` to have a `dependencies` subfolder in the app\u0027s main folder to store app\u0027s dependencies there.\nWhen I have updated Visual Studio to 17.14.12, .NET SDK 8.0.19 has been installed on my computer and since then, my apps crash because they fail to recognize `dependencies` subfolder as one to look into despite it being mentioned in `additionalProbingPaths`:\n\n\u003cimg width=\"978\" height=\"78\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/13c21054-298b-42dd-8804-00397de9eae7\" /\u003e\n\nHere is an example of a very simple Hello World app that crashes in such situation (it references Automapper simply for the sake of  showing the issue).\n\n[TestDependencies.zip](https://github.com/user-attachments/files/21839662/TestDependencies.zip)\n\nI have confirmed that the issue doesn\u0027t occur on a laptop with Windows OS and .NET Runtime 8.0.11. Installing .NET Runtime 8.0.19 on the laptop introduces the issue.\nThis issue blocks me from testing my \"release packages\" on a computer with Visual Studio 2022 Community since it forces me to have .NET Runtime 8.0.19 installed.\n\n### Reproduction Steps\n\n1. Install .NET Runtime 8.0.19.\n2. Download `TestDependencies.zip` attached above.\n3. Extract it - it will create `TestDependencies` folder with the `TestDependencies.exe` app inside.\n4. Open console in `TestDependencies` folder.\n5. Launch `TestDependencies.exe` in the console.\n### Expected behavior\n\n\"Hello, World!\" should appear in the console.\n\n### Actual behavior\n\nThe app throws an exception as in the picture attached above\n\n### Regression?\n\nIt did work with .NET Runtime 8.0.11.\n\n### Known Workarounds\n\n- Put all the dependencies in the main folder of the app? Unconvenient, especially when you have 30+ dependencies you don\u0027t want your non-technical app users to deal with.\n- Uninstall Visual Studio 2022 Community each time you want to launch such an app? Even less convenient.\n- Pay for Visual Studio 2022 Professional to choose older build version? No way...\n\n### Configuration\n\n- .NET Runtime 8.0.19\n- Windows 11 Home 24H2 26120.5751, x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv7i6-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-rRN9",
                                           "createdAt":  "2025-08-19T02:36:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-19T02:36:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_NDZN",
                                           "createdAt":  "2025-08-20T19:50:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "This is from a fix we made to the implementation of [`is_path_rooted`](https://github.com/dotnet/runtime/blob/8f1c6e86aaa558c7ea8bb7917a2afa1204b01dff/src/native/corehost/hostmisc/pal.windows.cpp#L668-L672) on Windows. Just the directory separator (`/` or `\\`) is a rooted path, which means in your repro, with the AutoMapper package path of `/` is rooted and its assets are looked for at that root rather than relative to the directory specified in `additionalProbingPaths`.\n\nWould you be able to switch the library path from `/` to `.`?\n\n```diff\n\"AutoMapper/15.0.1\": {\n  \"type\": \"package\",\n  \"serviceable\": true,\n  \"sha512\": \"sha512-kNo7iIAi4p4XxoEbfif2WUQtc6RTx+UteiRYPqCOKj+4q4+YaWono06qTxoHBy+0N1HdganA//k5p/VmWw2AMA==\",\n-  \"path\": \"/\",\n+  \"path\": \".\",\n  \"hashPath\": \"automapper.15.0.1.nupkg.sha512\"\n}\n```",
                                           "updatedAt":  "2025-08-20T19:50:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_meQH",
                                           "createdAt":  "2025-08-22T14:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GregoFromQinoth",
                                           "body":  "@elinor-fung maybe I would, but why such a breaking change has been introduced in a patch release?",
                                           "updatedAt":  "2025-08-22T14:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_nu8M",
                                           "createdAt":  "2025-08-22T15:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "It was part of a fix around running from UNC paths and not intended / realized to be a breaking change for this. \n\nI was suggesting a potential path for making your current scenario work with 8.0.19. The new behaviour of `is_path_rooted` is \u0027correct\u0027 but, as you found, an unintentional break for this scenario - I\u0027ll look at what we can do for this scenario (and if it might have affected others), but that wouldn\u0027t help until we can get that approved for servicing and in a release.",
                                           "updatedAt":  "2025-08-22T15:56:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_uLr6",
                                           "createdAt":  "2025-08-23T08:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GregoFromQinoth",
                                           "body":  "Got it, thank you.\nUsing \".\" instead of \"/\" seems to work fine for me, thank you for the suggestion.",
                                           "updatedAt":  "2025-08-23T08:04:56Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  ".NET Runtime 8.0.19 on Windows: library path of `/` in deps.json searches at root instead of relative to probe paths (additionalProbingPaths)",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118998",
        "createdAt":  "2025-08-22T14:04:56Z",
        "number":  118998,
        "author":  "baronfel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T23:35:16Z",
        "body":  "### Background and motivation\n\nAcross the .NET tooling landscape we have several copies of half-implemented PInvokes to the hostfxr APIs:\n\n* [dotnet/sdk](https://github.com/dotnet/sdk/blob/265f486f3b389a2915acb448b449af8a25d4aa40/src/Resolvers/Microsoft.DotNet.NativeWrapper/Interop.cs)\n* [MSBuildLocator](https://github.com/microsoft/MSBuildLocator/blob/main/src/MSBuildLocator/NativeMethods.cs)\n* And soon, VS and/or DevKit will likely make another variant for their own SDK-location needs.\n\nIt would be very helpful to have a complete set of bindings to the hostfxr API, either in-repo as a sample/example to redistribute in each instance, or as an actual shippable dependency - is this something that could be done?\n\nRedisting hostfxr itself is not _necessarily_ the request here, but selfishly that seems like it would be useful much in the same way the various sqlite RID-specific assets are in that package family.\n\n\n\n### API Proposal\n\nIdeally something more C#-friendly-looking than the bindings we have in the SDK today! We have a very \u0027raw\u0027 binding that doesn\u0027t feel very C#-y.\n\n### API Usage\n\nSomething similar to what we have in the SDK today:\n\n```csharp\n\npublic static SdkResolutionResult ResolveSdk(\n            string? dotnetExeDirectory,\n            string? globalJsonStartDirectory,\n            bool disallowPrerelease = false)\n        {\n            var result = new SdkResolutionResult();\n            var flags = disallowPrerelease ? Interop.hostfxr_resolve_sdk2_flags_t.disallow_prerelease : 0;\n\n            int errorCode = Interop.RunningOnWindows\n                ? Interop.Windows.hostfxr_resolve_sdk2(dotnetExeDirectory, globalJsonStartDirectory, flags, result.Initialize)\n                : Interop.Unix.hostfxr_resolve_sdk2(dotnetExeDirectory, globalJsonStartDirectory, flags, result.Initialize);\n\n            Debug.Assert((errorCode == 0) == (result.ResolvedSdkDirectory != null));\n            return result;\n        }\n```\n\nthat papers over\n\n* platform-specific library-targeting concerns\n* the \u0027raw\u0027 native interface in favor of more C#-native idioms\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nIf these bindings are shipped as a dependency, it may be possible for users to use a version of the bindings that doesn\u0027t work for the hostfxr that they end up binding to at runtime (unless hostfxr itself is also redistributed).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv602kQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_mV-k",
                                           "createdAt":  "2025-08-22T14:05:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "cc @elinor-fung from our recent meeting",
                                           "updatedAt":  "2025-08-22T14:05:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_nV8y",
                                           "createdAt":  "2025-08-22T15:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Looking at https://github.com/dotnet/sdk/blob/265f486f3b389a2915acb448b449af8a25d4aa40/src/Resolvers/Microsoft.DotNet.NativeWrapper/Interop.cs#L6, it has number of unique requirements like compat with .NET Framework and dealing with MSBuild directory layout.\n\nWould it make more sense to maintain the canonical sample of this in SDK repo where these unique requirements make more sense, and copy it from there?",
                                           "updatedAt":  "2025-08-22T15:22:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_pmSA",
                                           "createdAt":  "2025-08-22T19:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "Ignoring the MSbuild-specific parts of that specific SdkResolver example, the bindings to hostfxr are still relevant/sharable IMO. It feels very weird for the SDK to host bindings to a component we do not control.",
                                           "updatedAt":  "2025-08-22T19:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_rTaR",
                                           "createdAt":  "2025-08-22T22:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It feels very weird for the SDK to host bindings to a component we do not control.\n\nIt does not feel weird to me. It is very common to have unmanaged APIs exposed in one place, and C# bindings for those APIs to live in unrelated places. Many PInvokes in this repo are like that. They are wrapping unmanaged components that live in the OS or in the other open-source projects.",
                                           "updatedAt":  "2025-08-22T22:04:44Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Have canonical PInvoke APIs/samples for hostfxr",
        "labels":  [
                       "api-suggestion",
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119139",
        "createdAt":  "2025-08-27T12:35:39Z",
        "number":  119139,
        "author":  "teo-tsirpanis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-18T17:14:31Z",
        "body":  "Context: https://github.com/dotnet/runtime/issues/119034#issuecomment-3228010512",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add native hosting APIs with callback context parameters.",
        "labels":  [
                       "area-Host"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119249",
        "createdAt":  "2025-09-01T14:51:33Z",
        "number":  119249,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:32Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1135932\nBuild error leg or test failing: AppHost.Bundle.Tests.BundledAppWithSubDirs.AppHost.Bundle.Tests.BundledAppWithSubDirs.FrameworkDependent\nPull request: https://github.com/dotnet/runtime/pull/119235\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"Failure extracting contents of the application bundle.\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135932\r\n**Error message validated:** `[Failure extracting contents of the application bundle.`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/1/2025 2:51:56 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153608](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153608)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153608\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31867122\u0026resultId=100490)|dotnet/runtime#119920|\r\n|[1152715](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152715)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152715\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31843246\u0026resultId=100496)|dotnet/runtime#117436|\r\n|[1152694](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152694)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152694\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31842852\u0026resultId=100496)|dotnet/runtime#118958|\r\n|[1152396](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152396)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152396\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31832448\u0026resultId=100496)|dotnet/runtime#119867|\r\n|[1152364](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152364)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152364\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31832112\u0026resultId=100496)|dotnet/runtime#119866|\r\n|[1151219](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151219)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151219\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31802396\u0026resultId=100496)|dotnet/runtime#119826|\r\n|[1151224](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151224)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151224\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31802154\u0026resultId=100496)|dotnet/runtime#119663|\r\n|[1150762](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150762)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150762\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31791064\u0026resultId=100490)|dotnet/runtime#119812|\r\n|[1150124](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150124)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150124\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31769928\u0026resultId=100496)|dotnet/runtime#119684|\r\n|[1149766](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149766)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149766\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31760496\u0026resultId=100490)|dotnet/runtime#119768|\r\n|[1148752](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148752)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148752\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31727670\u0026resultId=100490)|dotnet/runtime#119469|\r\n|[1148765](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148765)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148765\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31727386\u0026resultId=100490)||\r\n|[1148740](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148740)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148740\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31727236\u0026resultId=100490)|dotnet/runtime#118831|\r\n|[1148666](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148666)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148666\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31723430\u0026resultId=100490)|dotnet/runtime#119728|\r\n|[1148497](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148497)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148497\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31716660\u0026resultId=100494)|dotnet/runtime#119429|\r\n|[1146323](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146323)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146323\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31632794\u0026resultId=100494)|dotnet/runtime#119540|\r\n|[1144737](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144737)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144737\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31577526\u0026resultId=100494)|dotnet/runtime#119552|\r\n|[1138148](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138148)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138148\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31348772\u0026resultId=100489)|dotnet/runtime#117583|\r\n|[1136629](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136629)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136629\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31294360\u0026resultId=100489)|dotnet/runtime#118122|\r\n|[1135932](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135932)|dotnet/runtime|[AppHost.Bundle.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135932\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31271510\u0026resultId=100489)|dotnet/runtime#119235|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|1|15|20|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwcHGIw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BRuBk",
                                           "createdAt":  "2025-09-01T14:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-01T14:52:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BRugz",
                                           "createdAt":  "2025-09-01T14:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Log fragment:\n```\n[xUnit.net 00:00:05.71]       Mapped application bundle\n[xUnit.net 00:00:05.71]       Files embedded within the bundle will be extracted to [/home/helixbot/.net/AppWithSubDirs/SNQqguvtg_SF] directory.\n[xUnit.net 00:00:05.71]       Starting new extraction of application bundle.\n[xUnit.net 00:00:05.71]       Temporary directory used to extract bundled files is [/home/helixbot/.net/AppWithSubDirs/15414].\n[xUnit.net 00:00:05.71]       Failure extracting contents of the application bundle. Expected size:2865152 Actual size:1183744\n[xUnit.net 00:00:05.71]       I/O failure when writing extracted files.\n[xUnit.net 00:00:05.71]       \u0027 could not be formatted with string.Format\n[xUnit.net 00:00:05.71]          at System.Text.ValueStringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\n[xUnit.net 00:00:05.71]          at System.String.FormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\n[xUnit.net 00:00:05.71]          at FluentAssertions.Execution.FailureMessageFormatter.FormatArgumentPlaceholders(String failureMessage, Object[] failureArgs)\n[xUnit.net 00:00:05.71]       Stack Trace:\n[xUnit.net 00:00:05.71]            at FluentAssertions.Execution.LateBoundTestFramework.Throw(String message)\n[xUnit.net 00:00:05.71]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)\n[xUnit.net 00:00:05.71]            at FluentAssertions.Execution.AssertionScope.AddPreFormattedFailure(String formattedFailureMessage)\n[xUnit.net 00:00:05.71]            at FluentAssertions.Execution.AssertionChain.FailWith(Func`1 getFailureReason)\n[xUnit.net 00:00:05.71]            at FluentAssertions.Execution.AssertionChain.FailWith(Func`1 getFailureReason)\n[xUnit.net 00:00:05.71]            at FluentAssertions.Execution.AssertionChain.FailWith(String message)\n[xUnit.net 00:00:05.71]         /_/src/installer/tests/TestUtils/Assertions/CommandResultAssertions.cs(37,0): at Microsoft.DotNet.CoreSetup.Test.CommandResultAssertions.Pass()\n[xUnit.net 00:00:05.71]         /_/src/installer/tests/AppHost.Bundle.Tests/BundledAppWithSubDirs.cs(35,0): at AppHost.Bundle.Tests.BundledAppWithSubDirs.RunTheApp(String path, Boolean selfContained, Boolean deleteExtracted)\n```",
                                           "updatedAt":  "2025-09-01T14:53:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Besn_",
                                           "createdAt":  "2025-09-02T16:36:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgiWxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2025-09-02T16:51:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "cc @elinor-fung @jtschuster ",
                                           "updatedAt":  "2025-09-02T16:36:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BfPL-",
                                           "createdAt":  "2025-09-02T17:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Errors in the following tests indicate the machine is out of space:\n\n`Failed to create directory [/home/helixbot/.net/AppWithSubDirs/1c1cf] for extracting bundled files. Error code: 28`",
                                           "updatedAt":  "2025-09-02T17:22:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BwcYj",
                                           "createdAt":  "2025-09-03T20:35:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "I believe we do properly clean everything up, but perhaps we could do so more eagerly. For a number of test classes, we have a shared app where each test case bundles it differently. Only after all the test cases in that class have run do all those bundles get cleaned up (when the shared app is cleaned up).",
                                           "updatedAt":  "2025-09-03T20:35:03Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "AppHost tests fail with \"Failure extracting contents of the application bundle.\"",
        "labels":  [
                       "blocking-clean-ci",
                       "area-Host",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119902",
        "createdAt":  "2025-09-19T17:23:11Z",
        "number":  119902,
        "author":  "leppie",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T05:51:45Z",
        "body":  "### Description\n\nMy dotnet tool has broken due to this. See: https://github.com/IronScheme/IronScheme/issues/171\n\nI dont understand the reason behind that PR as the default versionless handling was doing exactly what one would expect, run on the latest version.\n\nNow if a time came latest didnt work, the `--fx-version` arg would still allow it to run. The PR destroys this option.\n\nThis not only breaks the tool, but running it as `dotnet app.dll` too is impossible. \n\nI can\u0027t imagine many people using this rather cool default, but I cant be the only one.\n\nIt _was_ cool due to the fact that you could just run on the latest installed .NET version regardless of what was installed on the user system. This cannot be achieved in any other way (try it).\n\nAnyways, forcing a version seems like adding a very unnecessary limitation and breaking really good default behavior.\n\n### Reproduction Steps\n\n* Install  `ironscheme.tool`  .NET tool. \n* Run `ironscheme`.  \n* Try run it as `dotnet IronScheme.ConsoleCore.dll` from tool dir.\n\n### Expected behavior\n\nNo error as it was with .NET 9 and every version prior.\n\n### Actual behavior\n\n```\nFramework \u0027Microsoft.NETCore.App\u0027 is missing a version.\nInvalid runtimeconfig.json ...\n```\n\n### Regression?\n\nYes. [#117914](https://github.com/dotnet/runtime/pull/117914)\n\n### Known Workarounds\n\nUninstall .NET 10\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxZDgzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FiDtG",
                                           "createdAt":  "2025-09-19T22:35:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e It was cool due to the fact that you could just run on the latest installed .NET version regardless of what was installed on the user system. This cannot be achieved in any other way (try it).\n\nYou should be able to replicate the same behavior by compiling for the oldest in-support framework (e.g., net8.0) then setting `\u003cRollForward\u003eLatestMajor\u003c/RollForward\u003e`.",
                                           "updatedAt":  "2025-09-19T22:35:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FkMm2",
                                           "createdAt":  "2025-09-20T05:29:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEjIPpg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "leppie",
                                                                               "createdAt":  "2025-09-20T05:43:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "leppie",
                                           "body":  "I found a workaround! (some sarcastic emoji)\n\n```\n{\n  \"runtimeOptions\": {\n    \"rollForward\": \"LatestMajor\",\n    \"framework\": {\n      \"name\": \"Microsoft.NETCore.App\",\n      \"version\": \"really matters right?\"\n    }\n  }\n}\n```\n\nActually works just like before! \n\nDisclaimer: Not tested on previous runtime.",
                                           "updatedAt":  "2025-09-20T05:51:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FkODM",
                                           "createdAt":  "2025-09-20T05:39:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leppie",
                                           "body":  "\u003e You should be able to replicate the same behavior by compiling for the oldest in-support framework (e.g., net8.0) then setting `\u003cRollForward\u003eLatestMajor\u003c/RollForward\u003e`.\n\nLess sarcastically, IIRC previously when you had that lower version installed, it would still run on that lower version and not the latest one installed.  (and minimum issues, not relevant as dll is .net core 2.1 compat).\n\n\u0027versionless\u0027 (or garbage it seems now) seem to have that behaviour (intended or not, backward compat).",
                                           "updatedAt":  "2025-09-20T05:42:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Cannot run app as DLL without a runtimeconfig version",
        "labels":  [
                       "area-Host",
                       "untriaged"
                   ]
    }
]
