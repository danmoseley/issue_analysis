[
    {
        "url":  "https://github.com/dotnet/runtime/issues/37390",
        "createdAt":  "2017-05-11T02:35:22Z",
        "number":  37390,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:51:26Z",
        "body":  "- Catching exception that does not derive from System.Exception\r\n- location that immediately follows an unconditional branch, and not a target of an earlier branch instruction, then the state of the evaluation stack at X must be empty.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKs5txA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODYwNTIxOQ==",
                                           "createdAt":  "2020-06-04T05:07:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-06-04T05:07:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODE3MTU4OA==",
                                           "createdAt":  "2020-10-28T19:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e Catching exception that does not derive from System.Exception\r\n\r\nI have opened PR #43969 for this one.",
                                           "updatedAt":  "2020-10-28T19:52:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[ILVerify] Add optional warnings for constructs that are likely incorrect",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37391",
        "createdAt":  "2017-05-11T02:37:37Z",
        "number":  37391,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1BvSg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2023-08-01T01:41:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericstj",
                                            "createdAt":  "2023-10-17T15:42:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "August-Alm",
                                            "createdAt":  "2023-10-24T13:38:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-01-08T13:22:21Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-06-19T19:06:19Z",
        "body":  "Useful for sanity check of valid unsafe IL. This option should suppress all verification checks related to type safety, but keep the rest.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsiecmg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5td60h",
                                           "createdAt":  "2023-12-01T18:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRmZTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IonKiwi",
                                                                               "createdAt":  "2023-12-01T18:10:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-08T13:22:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@TIHan, moving this to priority 2 in .NET 9. There is a customer who wants this feature.",
                                           "updatedAt":  "2023-12-01T18:09:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IfkGj",
                                           "createdAt":  "2024-08-14T21:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Moved to .NET 10 because we don\u0027t have time to work on this in .NET 9.",
                                           "updatedAt":  "2024-08-14T21:46:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P7V6b",
                                           "createdAt":  "2024-10-15T18:13:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@amanasifkhalid, reassigned the ILVerify issue to you. ",
                                           "updatedAt":  "2024-10-15T18:13:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yJ5ya",
                                           "createdAt":  "2025-06-19T19:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amanasifkhalid",
                                           "body":  "Unlikely to get to this in .NET 10 -- moving to Future.",
                                           "updatedAt":  "2025-06-19T19:06:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[ILVerify] Add option for IL validation without IL verification",
        "labels":  [
                       "area-Tools-ILVerification",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37392",
        "createdAt":  "2017-09-15T13:25:36Z",
        "number":  37392,
        "author":  "ArztSamuel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-15T18:26:31Z",
        "body":  "The method `AbortBasicBlockVerification` currently aborts the verification of the entire method by simply throwing an exception.\r\nThe expected behavior would be that it only aborts the verification of the current basic block and continues verifying the next basic block.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj-3AYQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODYwNTQyNg==",
                                           "createdAt":  "2020-06-04T05:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-06-04T05:08:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P7cBh",
                                           "createdAt":  "2024-10-15T18:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Reassigned to @amanasifkhalid. ",
                                           "updatedAt":  "2024-10-15T18:26:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[ILVerify] Fix AbortBasicBlockVerification aborting the entire method",
        "labels":  [
                       "area-Tools-ILVerification",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37393",
        "createdAt":  "2017-11-17T22:33:31Z",
        "number":  37393,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAtkDkw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArztSamuel",
                                            "createdAt":  "2017-11-18T09:43:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2017-12-26T23:06:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-07-31T09:00:55Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-04-24T22:53:30Z",
        "body":  "This is very subjective. Most unimplemented errors between `UnknownOpcode` and `ThisMismatch` in https://github.com/dotnet/corert/blob/master/src/ILVerify/src/VerifierError.cs are interesting.\r\n\r\nMy approach here is to prioritize the errors by the chances of seeing such violation without triggering some internal asserts in our compilers.\r\nBasically - bugs at higher levels of abstraction typically result in logically incorrect and yet valid IL, so IL verification cannot help there. However bugs at lower levels often result in malformed IL and that is where IL verification could be very helpful.\r\n\r\nI would start with completing errors related to control flow, stack misbalances and uninitialized data. If IL is malformed due to a bug, it often ends up triggering these.\r\nMany look already implemented, but there are still some not yet done.\r\n\r\n- [x]    //E_BAD_JMP_TARGET              \"jmp / exception into the middle of an instruction.\"\r\n- [x]    //E_BR_OUTOF_FIN                \"Branch out of finally block.\"\r\n- [x]    //E_BR_TO_EXCEPTION             \"branch/leave to the beginning of a catch/filter handler\"\r\n- [x]    //E_FALLTHRU_EXCEP              \"fallthru the end of an exception block.\"\r\n- [x]    //E_FALLTHRU_INTO_HND           \"fallthru into an exception handler.\"\r\n- [x]    //E_FALLTHRU_INTO_FIL           \"fallthru into an exception filter.\"\r\n- [x]    //E_LEAVE                       \"Leave from outside a try or catch block.\"\r\n- [x]    //E_BACKWARD_BRANCH             \"Stack height at all points must be determinable in a single forward scan of IL.\"\r\n- [ ]    //E_THIS_UNINIT_BR              \"Branch back when this is uninitialized.\"\r\n\r\nThen there are bugs where something went wrong with dataflow or casts. In such cases we generally see various stack corruptions and mishaps with type compatibility.\r\n\r\n- [ ]    //StackNotEq,                   // Non-compatible types on the stack.\r\n\r\nThe shape of exception handling regions could be delicate, but the area is not currently in active development so these can be done later.\r\n\r\n- [ ]    //E_TRY_GTEQ_END                \"try start \u003e= try end.\"\r\n- [ ]    //E_TRYEND_GT_CS                \"try end \u003e code size.\"\r\n- [ ]    //E_HND_GTEQ_END                \"handler start \u003e= handler end.\"\r\n- [ ]    //E_HNDEND_GT_CS                \"handler end \u003e code size.\"\r\n- [ ]    //E_TRY_START                   \"Try starts in the middle of an instruction.\"\r\n- [ ]    //E_HND_START                   \"Handler starts in the middle of an instruction.\"\r\n- [ ]    //E_TRY_OVERLAP                 \"Try block overlap with another block.\"\r\n- [ ]    //E_TRY_EQ_HND_FIL              \"Try and filter/handler blocks are equivalent.\"\r\n- [ ]    //E_TRY_SHARE_FIN_FAL           \"Shared try has finally or fault handler.\"\r\n- [ ]    //E_HND_OVERLAP                 \"Handler block overlaps with another block.\"\r\n- [ ]    //E_HND_EQ                      \"Handler block is the same as another block.\"\r\n- [ ]    //E_FIL_OVERLAP                 \"Filter block overlaps with another block.\"\r\n- [ ]    //E_FIL_EQ                      \"Filter block is the same as another block.\"\r\n- [ ]    //E_FIL_CONT_TRY                \"Filter contains try.\"\r\n- [ ]    //E_FIL_CONT_HND                \"Filter contains handler.\"\r\n- [ ]    //E_FIL_CONT_FIL                \"Nested filters.\"\r\n- [ ]    //E_FIL_GTEQ_CS                 \"filter \u003e= code size.\"\r\n- [ ]    //E_FIL_START                   \"Filter starts in the middle of an instruction.\"\r\n- [ ]    //E_ENDFILTER_MISSING           \"Missing Endfilter.\"\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJhBY4A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTM4NTIyMw==",
                                           "createdAt":  "2017-11-17T22:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "CC: @jcouv @ArztSamuel @jkotas ",
                                           "updatedAt":  "2017-11-17T22:39:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTQzNDczMQ==",
                                           "createdAt":  "2017-11-18T11:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "Thanks, that is very helpful!\r\n\r\nIf I remember correctly the following ER specific errors are actually already reported, but with different names / messages:\r\n\r\n\u003e //E_BR_OUTOF_FIN \"Branch out of finally block.\"\r\n\r\nBranching out of a finally block currently reports a `BranchOutOfHandler` error, since finally blocks are also categorized as handlers by our current data structures. It would be possible to change the code to report this more specific error instead quite easily, though. \r\nAlso: I think it is a bit odd that there is a specific error for branching _out of_ a finally block, but not for branching _into_ one.\r\n\r\n\u003e //E_BR_TO_EXCEPTION \"branch/leave to the beginning of a catch/filter handler\"\r\n\r\nBranching into a catch/filter currently reports a `BranchIntoHandler`/`Filter` or `LeaveIntoHandler`/`Filter` error. I am not sure why this was defined as a seperate error by PEVerify, as branching/leaving into a catch/filter should always be invalid, independent of which instruction inside the catch/filter is the target (unless I missed something in the rules of `ECMA I.12.4.2.8.2`).  I also can\u0027t find any part in the PEVerify source, which actually reports this error.\r\nIf this is true, it would make sense to remove this unused error.\r\n\r\n\u003e //E_FALLTHRU_EXCEP \"fallthru the end of an exception block.\"\r\n\u003e //E_FALLTHRU_INTO_HND \"fallthru into an exception handler.\"\r\n\u003e //E_FALLTHRU_INTO_FIL \"fallthru into an exception filter.\"\r\n\r\nAll three of these cases currently report a corresponding branch error. It shouldn\u0027t be too much work to change this to actually report a fallthrough error instead.\r\n\r\n\u003e //E_LEAVE \"Leave from outside a try or catch block.\"\r\n\r\nIf I understand the PEVerify source correctly, this error was always reported, whenever an invalid leave target was found. When I implemented the checks for this, I also added a more specific error message for the different possible rule violations: `LeaveIntoTry`, `LeaveIntoHandler`, `LeaveIntoFilter`, `LeaveOutOfFilter`, `LeaveOutOfFinally` and `LeaveOutOfFault`.\r\nI thought the error message \"Leave from outside a try or catch block.\" was a bit vague and misleading. If I understood the rules defined in ECMA correctly, using the leave instruction outside an exception region is actually valid and behaves like a normal branch instruction, but this error message sounds like it is prohibited.\r\nI also checked PEVerify and as expected it does not report this error for using the leave instruction outside a try/catch.\r\nSince this error was split into multiple more specific errors, it would make sense to remove it.\r\n\r\n\r\nI will be looking into the errors mentioned above and change the code / add test cases if necessary.\r\n\r\nI also hope to be able to have a quick look at the other errors soon and will comment here if I find anything worth noting. I think I remember that there are some other errors, which were defined in the PEVerify source, but never actually reported.",
                                           "updatedAt":  "2017-11-18T11:00:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTQ1NDY5OA==",
                                           "createdAt":  "2017-11-18T16:50:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "Resolved `E_BR_OUTOF_FIN`, `E_BR_TO_EXCEPTION`, `E_FALLTHRU_EXCEP`, `E_FALLTHRU_INTO_HND`, `E_FALLTHRU_INTO_FIL` and `E_LEAVE` through dotnet/corert#4960.",
                                           "updatedAt":  "2017-11-18T16:50:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTQ2MjkzMg==",
                                           "createdAt":  "2017-11-18T18:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Thanks!! I only used error list with assumption that if error is used then the scenario is most likely handled. The opposite is indeed not necessarily true.\r\n\r\nYes I also find it odd that there is an error for leave outside handlers. I think it is defined as goto with clear eval stack. Could even be useful if it really works like that. Perhaps there is some subtle rule that makes it illegal, or it is a JIT implementation thing.\r\n\r\nYes, I think it makes sense to continue using the error list for tracking and remove errors if corresponding scenarios are reported as something else.\r\n\r\n",
                                           "updatedAt":  "2017-11-18T18:55:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTQ2NDc3OQ==",
                                           "createdAt":  "2017-11-18T19:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "\u003e I think it is defined as goto with clear eval stack.\r\n\r\nYes, true. I forgot to mention that the evaluation stack is additionally cleared by the leave instruction.\r\n\r\n\u003e Perhaps there is some subtle rule that makes it illegal, or it is a JIT implementation thing.\r\n\r\nPEVerify actually doesn\u0027t report a leave outside exception regions as an error (I have tested that). I have only seen this error being used for other rules of the leave instruction, like leaving out of a finally block. It is just the message that is kind of misleading.\r\n\r\nA note in ECMA (`I.12.4.2.8.2.8: leave and leave.s`) even states:\r\n\u003e In effect, a leave from outside of exception handling acts like a branch, with the side-effect of emptying the evaluation stack.",
                                           "updatedAt":  "2017-11-18T19:23:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTUzOTE5Nw==",
                                           "createdAt":  "2017-11-19T18:39:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "I have had a quick look at all errors now:\r\n\r\n\u003e //E_STACK_EMPTY \"Stack empty.\"\r\n\r\nI am not sure what this error was defined for in PEVerify. I couldn\u0027t find any code that actually reports this error. When the stack is poped even though it is empty, ILVerify reports `StackUnderflow`.\r\n\r\n\u003e //E_THIS_UNINIT_BR \"Branch back when this is uninitialized.\"\r\n\r\nThis error is never reported by PEVerify and I even found a comment in the source code saying:\r\n`// backwards branch with uninitialized \u0027this\u0027 is actually allowed`\r\n(https://github.com/lewischeng-ms/sscli/blob/master/clr/src/jit64/newverify.cpp#L3494)\r\n\r\nThere is also a comment saying;\r\n`//backwards branch with \u0027this\u0027 uninitialized is illegal`\r\nbut the code actually performing the check seems to have been removed.\r\n(https://github.com/lewischeng-ms/sscli/blob/master/clr/src/jit64/newverify.cpp#L1006)\r\nI would have to re-read the chapters about branching/this pointer state in order to confirm what ECMA defines in respect to this.\r\n\r\n\u003e //E_RET_UNINIT \"Return uninitialized data.\"\r\n\r\nThis error is never thrown inside the PEVerify code. PEVerify defined a flag to mark uninitialized ObjRefs, however this flag was only used to mark the this-pointer as uninitialized. I assume this error was defined for when an uninitialized ObjRef is returned, but was never used, since returning an uninitialized this-pointer was assigned its own error code.\r\n\r\n\u003e //StackNotEq, // Non-compatible types on the stack.\r\n\r\nThis was reported by PEVerify when verifying compare instructions. I think `IsBinaryComparable` is already handling these rules, but always reports `StackUnexpected`. I would have to investigate this further though.\r\n\r\n\u003e //E_STACK_NO_R_I8 \"unexpected R, R4, R8, or I8 on the stack.\"\r\n\r\nThis error is only reported by PEVerify when a bool branch is performed with a value of type `TI_DOUBLE`. ILVerify simply reports `StackUnexpected` for this case and all other invalid types of values. I think it makes sense to remove this error, unless there is any benefit from having a more precise error for this case.\r\n\r\nI wasn\u0027t able to find where quite a lot of errors are reported in PEVerify. I am not sure whether these errors are actually deprecated or simply reported in a code part that I do not have access to. Some of the errors definitiely sound like they still make sense though.\r\n\r\nHere is the full list of errors I could not find in the PEVerify source:\r\n\r\n\u003e //E_STACK_EXCEPTION \"Missing stack slot for exception.\"\r\n\u003e //E_THIS \"Instance variable (this) missing.\"\r\n\u003e //E_THIS_UNINIT_V_RET \"Return from .ctor before all fields are initialized.\"\r\n\u003e //E_SIG_VAR_PARAM \"Unrecognized type parameter of enclosing class.\"\r\n\u003e //E_SIG_MVAR_PARAM \"Unrecognized type parameter of enclosing method.\"\r\n\u003e //E_SIG_VAR_ARG \"Unrecognized type argument of referenced class instantiation.\"\r\n\u003e //E_SIG_MVAR_ARG \"Unrecognized type argument of referenced method instantiation.\"\r\n\u003e //E_SIG_GENERICINST \"Cannot resolve generic type.\"\r\n\u003e //E_PATH_LOC \"Non-compatible types depending on path.\"\r\n\u003e //E_STACK_P_OBJREF \"Expected address of an ObjRef on the stack.\"\r\n\u003e //E_STACK_ARRAY_SD \"Expected single dimension array on the stack.\"\r\n\u003e //E_STACK_VALCLASS \"Expected value type instance on the stack.\"\r\n\u003e //E_STACK_P_VALCLASS \"Expected address of value type on the stack.\"\r\n\u003e //E_STACK_NO_VALCLASS \"Unexpected value type instance on the stack.\"\r\n\u003e //E_ARRAY_ACCESS \"Illegal array access.\"\r\n\u003e //E_ARRAY_V_STORE \"Store non Object type into Object array.\"\r\n\u003e //E_TRY_EQ_HND_FIL \"Try and filter/handler blocks are equivalent.\"\r\n\u003e //E_HND_OVERLAP \"Handler block overlaps with another block.\"\r\n\u003e //E_FIL_OVERLAP \"Filter block overlaps with another block.\"\r\n\u003e //E_FIL_EQ \"Filter block is the same as another block.\"\r\n\u003e //E_FIL_START \"Filter starts in the middle of an instruction.\"\r\n\u003e //E_ENDFILTER_MISSING \"Missing Endfilter.\"\r\n\r\n\r\n",
                                           "updatedAt":  "2017-11-19T18:39:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU0NDc5NQ==",
                                           "createdAt":  "2017-11-19T19:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I am not sure whether these errors are actually deprecated\r\n\r\nThese errors are deprecated. The implementation of PEVerify morphed a lot over the years - they were likely used in the earlier versions of PEVerify and later removed. Could you please submit PR to cleanup all the unused errors?\r\n\r\n\u003e I think it makes sense to remove this error\r\n\r\nAgree. BTW: I have run into nonsensical errors reported by PEVerify. I have tried to match PEVerify for some time to make side-by-side comparison of errors easier, and added a TODO to convert it to better error message later. I may be worth it to go over TODOs in ILVerify (to fix the error messages, and to find other non-implemented nugets). Opened dotnet/corert#4963 on this.",
                                           "updatedAt":  "2017-11-19T19:59:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU1MzM3MA==",
                                           "createdAt":  "2017-11-19T21:59:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "\u003e Could you please submit PR to cleanup all the unused errors?\r\n\r\nOf course, done in dotnet/corert#4965.",
                                           "updatedAt":  "2017-11-19T21:59:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU1NzY5MA==",
                                           "createdAt":  "2017-11-19T23:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I also found some of the errors unfamiliar. I assumed they cover rare situations.\r\nI still ordered them by what looked to be their category - control flow, stack, etc, but some looked pretty strange or redundant.\r\n\r\nRemoving deprecated ones seems right thing to do\r\n",
                                           "updatedAt":  "2017-11-19T23:12:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU1OTg5OQ==",
                                           "createdAt":  "2017-11-19T23:36:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "//E_SIG_VAR_PARAM \"Unrecognized type parameter of enclosing class.\"\r\n//E_SIG_MVAR_PARAM \"Unrecognized type parameter of enclosing method.\"\r\n//E_SIG_VAR_ARG \"Unrecognized type argument of referenced class instantiation.\"\r\n//E_SIG_MVAR_ARG \"Unrecognized type argument of referenced method instantiation.\"\r\n//E_SIG_GENERICINST \"Cannot resolve generic type.\"\r\n\r\nThese seem to refer to situations when, for example, code references a method type parameter while the type parameter does not exist of containing method is not even generic. Such errors are relatively easy to hit in broken generic code.  \r\nI am curious how these kind of errors are handled in ILVerify. \r\n\r\n//E_PATH_LOC \"Non-compatible types depending on path.\"\r\n//E_STACK_P_OBJREF \"Expected address of an ObjRef on the stack.\"\r\n//E_STACK_ARRAY_SD \"Expected single dimension array on the stack.\"\r\n//E_STACK_VALCLASS \"Expected value type instance on the stack.\"\r\n//E_STACK_P_VALCLASS \"Expected address of value type on the stack.\"\r\n//E_STACK_NO_VALCLASS \"Unexpected value type instance on the stack.\"\r\n//E_ARRAY_ACCESS \"Illegal array access.\"\r\n//E_ARRAY_V_STORE \"Store non Object type into Object array.\"\r\n\r\nI assume these were replaced by other errors about stack or expected type inconsistencies.\r\n\r\n//E_TRY_EQ_HND_FIL \"Try and filter/handler blocks are equivalent.\"\r\n//E_HND_OVERLAP \"Handler block overlaps with another block.\"\r\n//E_FIL_OVERLAP \"Filter block overlaps with another block.\"\r\n//E_FIL_EQ \"Filter block is the same as another block.\"\r\n//E_FIL_START \"Filter starts in the middle of an instruction.\"\r\n//E_ENDFILTER_MISSING \"Missing Endfilter.\"\r\n\r\nInteresting what happens if exception handling regions are incorrect as these errors mention. - other errors reported?\r\n\r\n//E_RET_UNINIT \"Return uninitialized data.\"    \r\n\r\nnot sure how this even possible with `initlocals` present. \r\n\r\n//E_THIS_UNINIT_BR \"Branch back when this is uninitialized.\"\r\n\r\nDid not know such rule exist(ed).\r\n\r\nI would guess, if there are actions that are disallowed when `this` is uninitialized, then, having to derive in single pass where `this` is uninitialized could result in prohibiting branching back with uninitialized `this`.  \r\n\r\nCurious - why is this ok now?\r\n",
                                           "updatedAt":  "2017-11-19T23:52:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU2Mjk5MA==",
                                           "createdAt":  "2017-11-20T00:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e code references a method type parameter while the type parameter does not exist of containing method is not even generic\r\n\r\nThese fall into the metadata validation errors. ILVerify does a basic validation as part of the type loading (you may not always get a pretty error for invalid metadata like this).\r\n\r\n\u003e here are actions that are disallowed when this is uninitialized, then, having to derive in single pass where `this` is uninitialized\r\n\r\nThe ECMA spec has the backward branch rule that requires the verification to be a single pass. The implemented IL verification has not ever been single pass - the backward branch rule has not been ever enforced.",
                                           "updatedAt":  "2017-11-20T00:23:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU3ODMzMw==",
                                           "createdAt":  "2017-11-20T02:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Being an independent tool it may make sense for ILVerify be a single pass. It might actually be easier for the implementation.\r\n\r\n(by 1 pass i mean “logically 1 pass”, - I.E. not the kind that repeats the analysis once/if more data about backwards branches is discovered)\r\n\r\nPerhaps the backward branch rule for uninitialized ‘this’ should be enforced. It should not be hard and I doubt there are violations.",
                                           "updatedAt":  "2017-11-20T02:55:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTU4NTgwMw==",
                                           "createdAt":  "2017-11-20T04:00:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I think we should make ILVerify compatible with PEVerify by default. I do not think there is much value in enforcing stronger rules than what PEVerify and JIT-time verification enforced since forever.\r\n\r\nIt maybe ok to have a stronger rules in the opt-in warning mode: https://github.com/dotnet/corert/issues/3586",
                                           "updatedAt":  "2017-11-20T04:00:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTkxODk1MA==",
                                           "createdAt":  "2017-11-21T05:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Talked with @jkotas about the \"single pass\" requirements in more details.\r\n\r\nECMA335 does specify that \r\n```\r\nIt shall be possible, with a single forward-pass through the CIL instruction stream for any\r\nmethod, to infer the exact state of the evaluation stack at every instruction (where by “state” we\r\nmean the number and type of each item on the evaluation stack).\r\n```\r\n\r\nHowever no real implementation seem to be requiring this. We should review whether the requirement should be dropped from the spec.\r\n\r\nThat said, some of these cases, while ok with the JIT and type-safety, are often indicative of bugs in IL generator. Besides, some rules are still enforced in 32bit JIT/PEVerify.\r\n\r\nI think we should keep the rules that result from one-pass requirement, at least those that 32bit PEVerify implements and make them \"warnings\" as in dotnet/runtime#37390 . \r\nUnless it is a serious burden to implement, of course, since this would be going beyond the spec.\r\n\r\nIn particular the rule described in `III.1.7.5 Backward branch constraints` seems not hard to do.\r\n\r\n\r\n",
                                           "updatedAt":  "2017-11-21T05:11:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTkzNzEyOA==",
                                           "createdAt":  "2017-11-21T07:12:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Still wonder about the following. Are different errors reported for these?\r\n\r\n//E_TRY_EQ_HND_FIL \"Try and filter/handler blocks are equivalent.\"\r\n//E_HND_OVERLAP \"Handler block overlaps with another block.\"\r\n//E_FIL_OVERLAP \"Filter block overlaps with another block.\"\r\n//E_FIL_EQ \"Filter block is the same as another block.\"\r\n//E_FIL_START \"Filter starts in the middle of an instruction.\"\r\n//E_ENDFILTER_MISSING \"Missing Endfilter.\"",
                                           "updatedAt":  "2017-11-21T07:12:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NTk3MzE0MA==",
                                           "createdAt":  "2017-11-21T09:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "As far as I am aware, the validation of the start/end offsets of exception regions is not implemented for ILVerify at all yet. It could well be that these errors are handled by other errors in PEVerify, but I think it would make sense to keep these errors in the list of this issue until we have unit tests for ILVerify confirming that these cases are handled appropriately.",
                                           "updatedAt":  "2017-11-21T09:49:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTc4NzQxNg==",
                                           "createdAt":  "2017-12-14T17:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArztSamuel",
                                           "body":  "`E_BAD_JMP_TARGET` and `E_BACKWARD_BRANCH` are now implemented via dotnet/corert#5101 and dotnet/corert#5113 respectively.",
                                           "updatedAt":  "2017-12-14T17:54:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTM5NjQ5Mw==",
                                           "createdAt":  "2019-07-26T10:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e However no real implementation seem to be requiring this. We should review whether the requirement should be dropped from the spec.\r\n\r\nFor cross reference: Mono currently requires that, see https://github.com/dotnet/corefx/pull/39765.",
                                           "updatedAt":  "2019-07-26T10:16:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTU2MjgxMg==",
                                           "createdAt":  "2019-07-26T18:54:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtTkjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2019-07-26T18:57:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Also see https://github.com/dotnet/coreclr/issues/14492 for an example where different single pass implementations may arrive at different answers for types.",
                                           "updatedAt":  "2019-07-26T18:54:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODYwNTUzNg==",
                                           "createdAt":  "2020-06-04T05:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-06-04T05:08:52Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Ordering unimplemented ILVerify errors by their impact in compiler output validation",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37394",
        "createdAt":  "2017-11-19T19:57:52Z",
        "number":  37394,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:53:52Z",
        "body":  "File separate issues on all TODOs in https://github.com/dotnet/runtime/tree/master/src/coreclr/src/tools/ILVerification",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKesAzg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI2NzAyMg==",
                                           "createdAt":  "2020-10-04T14:53:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "Hi @jkotas, quite new to repo actually, I will take this task and will open PR after making those required code changes. By looking at comments in that file, I understand some of the changes, but some are not sure! I hope you will help me to get those in the PR discussion. Thanks! :) ",
                                           "updatedAt":  "2020-10-04T14:53:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Go over ILVerify TODOs",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37395",
        "createdAt":  "2018-12-18T15:32:45Z",
        "number":  37395,
        "author":  "MarcoRossignoli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:54:13Z",
        "body":  "Today when ILVerify found issue we report tokens/offsets value for type system item for IL methods i.e.\r\n```\r\n[IL]: Error: [C:\\git\\corert\\bin\\Windows_NT.x64.Debug\\ILVerification.Tests\\Tests\\BranchingTests.dll : BranchingTestsType::Branching.FromTryIntoFinally_Invalid_BranchOutOfTry.BranchIntoHandler()][offset 0x00000004] Branch out of try block.\r\n```\r\nWe added some new type check and we decided to not report token value for it because they are not useful for regular use i.e.\r\n```\r\n[MD]: Error: Interface implementation has a duplicate. Class \u0027[InterfaceImplementation]InterfaceImplHasDuplicate_InvalidType_InterfaceImplHasDuplicate\u0027 Interface: \u0027[InterfaceDefinition]Interface\u0027\r\n```\r\nHowever there are some scenario where tokens are useful, for instance on obfuscated code.\r\nWe should refactor code to have token values only if a user pass \u0027--tokens\u0027  switch to command line.\r\nReference https://github.com/dotnet/corert/pull/6687#discussion_r241916514\r\n\r\nTask list:\r\n- [x] Add `--tokens` option to command line https://github.com/dotnet/corert/pull/6730\r\n- [x] Include metadata tokens in error messages for new type verifier https://github.com/dotnet/corert/blob/master/src/ILVerification/src/TypeVerifier.cs#L112\r\n- [ ] Move IL verifier error message from [driver](https://github.com/dotnet/corert/blob/master/src/ILVerify/src/Program.cs#L159) to [IL importer](https://github.com/dotnet/corert/blob/master/src/ILVerification/src/ILImporter.Verify.cs) and include metadata token only if `--tokens` is passed \r\n\r\nExtra: cleanup code https://github.com/dotnet/corert/pull/6758#discussion_r248405930",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[ILVerify]Add \u0027--tokens\u0027 switch",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37396",
        "createdAt":  "2019-01-15T08:04:51Z",
        "number":  37396,
        "author":  "z1c0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:55:23Z",
        "body":  "Calling `ILVerify.exe` for a *.netmodule* results in a `BadImageFormatGeneric` error.\r\ne.g. \r\n\r\n`ILVerify.exe \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.EnterpriseServices.Wrapper.dll\" -r \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll\"`\r\n\r\nresults in:\r\n\r\n`Error: [TEMPORARY EXCEPTION MESSAGE] BadImageFormatGeneric:`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGxUVxQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDMwMTk2NA==",
                                           "createdAt":  "2019-01-15T08:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "z1c0",
                                           "body":  "The problem occurs in `EcmaModule.cs` since `containingAssembly` is `null` in that case and the .netmodule is incorrectly opened as `EcmaAssembly` (instead of `EcmaModule`).\r\n\r\n```cs\r\npublic static EcmaModule Create(TypeSystemContext context, PEReader peReader, IAssemblyDesc containingAssembly)\r\n{\r\n  MetadataReader metadataReader = CreateMetadataReader(context, peReader);\r\n\r\n  if (containingAssembly == null)\r\n    return new EcmaAssembly(context, peReader, metadataReader);\r\n  else\r\n    return new EcmaModule(context, peReader, metadataReader, containingAssembly);\r\n}\r\n```",
                                           "updatedAt":  "2019-01-15T08:11:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDM2NTE4MA==",
                                           "createdAt":  "2019-01-15T11:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Does it make sense to run the ILVerify on a .netmodule directly? We can\u0027t e.g. do proper access checks in this situation because we don\u0027t know whether an `InternalsVisibleTo` attribute on a referenced assembly is applicable to the module being verified (we don\u0027t know what assembly the verified module is part of). If not, we could just add an early check that reports a bad input.",
                                           "updatedAt":  "2019-01-15T11:46:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDM2NjY2MQ==",
                                           "createdAt":  "2019-01-15T11:52:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "z1c0",
                                           "body":  "I agree that it does not make to much sense.\r\nI only discovered the issue because in our use case we generically try to verify all files in a folder - some of them being netmodules.\r\n\r\nHowever, currently the code takes a wrong turn and tries to resolve a netmodule as an `EcmaAssembly`.\r\nProper error handling would probably be the best choice.\r\n\r\n(Alternatively, an additional command line argument could specify the containing assembly for the .netmodule)",
                                           "updatedAt":  "2019-01-15T11:52:50Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[ILVerify] BadImageFormatGeneric when verifying a .netmodule",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48250",
        "createdAt":  "2021-02-12T23:02:33Z",
        "number":  48250,
        "author":  "jfd16",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:57:46Z",
        "body":  "### Description\r\nTo reproduce: Run ILVerify on the `Foo.dll` assembly in [this zip file](https://github.com/dotnet/runtime/files/5974603/Foo.zip).\r\nThe following output should be produced:\r\n```\r\n[IL]: Error [LeaveIntoTry]: [...\\Foo.dll : .A::m2(int32)][offset 0x00000014] Leave into try block.\r\n1 Error(s) Verifying ...\\Foo.dll\r\n```\r\nIf the assembly is executed on .NET 5 (by invoking its `Main` method), it produces the expected output without any errors.\r\n\r\nThe assembly contains two static methods `A.m1` and `A.m2`. Both contain `leave` instructions that jump from a catch block to its associated try block, which is legal according to ECMA-335, section I.12.4.2.8.2.8.\r\n\r\nILVerify correctly verifies the leave in `A.m1`. In `A.m2`, the catch block and the try block to which it jumps to are nested in another try block which has a finally block, which triggers the bug.\r\n\r\n### Configuration\r\n\r\nILVerify version: 5.0.0-rtm.20519.4+cf258a14b70ad9069470a108f13765e0e5988f51\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONOuKqw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODUwMzAwNw==",
                                           "createdAt":  "2021-02-12T23:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-02-12T23:02:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4064qr",
                                           "createdAt":  "2021-07-27T21:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Moving to future since ILVerify is preview feature.",
                                           "updatedAt":  "2021-07-27T21:37:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILVerify fails to verify some catch-to-try leave instructions",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54110",
        "createdAt":  "2021-06-12T22:54:32Z",
        "number":  54110,
        "author":  "AArnott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC00_Mg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rstarkov",
                                            "createdAt":  "2023-12-25T15:00:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-11-19T20:01:47Z",
        "body":  "After `dotnet tool update --global dotnet-ilverify --version 5.0.0`, any invocation of `ilverify` that includes a dll (I tried several) fails with:\r\n\r\n```\r\nError: Internal.IL.VerifierException: Assembly or module not found: mscorlib\r\n   at ILVerify.Verifier.SetSystemModuleName(AssemblyName name)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.Program.Run(Options options)\r\n```\r\n\r\nThe latest prerelease also fails, but with a different message:\r\n```\r\ndotnet tool install --global dotnet-ilverify --version 6.0.0-preview.4.21253.7\r\n```\r\n\r\n```\r\nError:\r\n  An assembly specified in the application dependencies manifest (ILVerify.deps.json) was not found:\r\n    package: \u0027System.Collections.Immutable\u0027, version: \u00275.0.0\u0027\r\n    path: \u0027lib/netstandard2.0/System.Collections.Immutable.dll\u0027\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObFvl-A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDEyMzA0OQ==",
                                           "createdAt":  "2021-06-12T22:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2021-06-12T22:54:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDEzNzc5NQ==",
                                           "createdAt":  "2021-06-13T01:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Error: Internal.IL.VerifierException: Assembly or module not found: mscorlib\r\n\r\nWhat is the command line that you are using to invoke ilverify?\r\n\r\nilverify requires explicitly all references, including mscorlib, to be explicitly specified on the command line. It looks like that mscorlib reference is not specified. https://github.com/dotnet/runtime/tree/main/src/coreclr/tools/ILVerify#how-to-use-ilverify",
                                           "updatedAt":  "2021-06-13T01:50:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDE0MzQ2OQ==",
                                           "createdAt":  "2021-06-13T03:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "I only specified the one assembly on the command line. I had no idea I had to specify all its references too. Can that be added to the `-?` usage help? It didn\u0027t mention it. What\u0027s more, peverify.exe doesn\u0027t share that requirement, so it would be great to call it out.\r\n\r\n",
                                           "updatedAt":  "2021-06-13T03:06:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjUwMzEwNw==",
                                           "createdAt":  "2021-07-01T19:42:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lovettchris",
                                           "body":  "Yeah, I found this confusing too until I found the \"-r\" command line argument.  I found it to be quite difficult to find all the right folders, and it would be cool if ilverify provided an option that automatically does all this:\r\n\r\n```powershell\r\nfunction FindDotNet($dotnet) {\r\n    $dotnet_path = $ENV:PATH.split([System.IO.Path]::PathSeparator) | ForEach-Object {\r\n        $test = Join-Path -Path $_ -ChildPath $dotnet\r\n        if ($IsWindows) {\r\n            $test = $test + \".exe\"\r\n        }\r\n        if (Test-Path -Path $test) {\r\n            return $_\r\n        }\r\n        $candidate = [System.IO.Path]::Combine($_, \"dotnet\")\r\n        if (Test-Path -Path $candidate) {\r\n            $candidate = TraverseLink($candidate)\r\n            if (Test-Path -Path $candidate -PathType Leaf) {\r\n                $candidate = [System.IO.Path]::GetDirectoryname($candidate)\r\n            }\r\n            return $candidate\r\n        }\r\n    }\r\n\r\n    if ($dotnet_path -is [array]) {\r\n        $dotnet_path = $dotnet_path[0]\r\n    }\r\n    return $dotnet_path\r\n}\r\n\r\nfunction FindNetCoreApp($dotnet_path, $version) {\r\n    # find the matching version in c:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\*\r\n    $result = $null\r\n    $latest = $null\r\n    $path = Join-Path -Path $dotnet_path -ChildPath \"shared\" -AdditionalChildPath \"Microsoft.NETCore.App\"\r\n    foreach ($item in Get-ChildItem -Path $path -Directory) {\r\n        if ($item.Name.StartsWith($version)) {\r\n            $v = [version] $item.Name\r\n            if ($null -eq $latest -or $v -gt $latest) {\r\n                $latest = $v\r\n                $result = $item.FullName\r\n            }\r\n        }\r\n    }\r\n    if ($null -eq $result) {\r\n        Write-Error(\"Microsoft.NETCore.App folder matching $version not found\")\r\n        exit 1\r\n    }\r\n    return $result\r\n}\r\n\r\n$dotnet_path = FindDotNet(\"dotnet\");\r\n$AssemblyName = GetAssemblyName($target)\r\n$NetCoreApp = FindNetCoreApp -dotnet_path $dotnet_path -version \"5.0\"\r\n$command = \"$PSScriptRoot/bin/net5.0/$AssemblyName.dll\"\r\n$command = $command + \u0027 -r \"\u0027 + \"$PSScriptRoot/bin/net5.0/*.dll\" + \u0027\"\u0027\r\n$command = $command + \u0027 -r \"\u0027 + \"$dotnet_path/packs/Microsoft.NETCore.App.Ref/5.0.0/ref/net5.0/*.dll\" + \u0027\"\u0027\r\n$command = $command + \u0027 -r \"\u0027 + \"$PSScriptRoot/../bin/net5.0/*.dll\" + \u0027\"\u0027\r\n$command = $command + \u0027 -r \"\u0027 + $NetCoreApp + \u0027/*.dll\"\u0027\r\n```\r\n",
                                           "updatedAt":  "2021-07-01T19:42:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4064jh",
                                           "createdAt":  "2021-07-27T21:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Moving to future since ILVerify is preview feature.",
                                           "updatedAt":  "2021-07-27T21:36:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZRZjk",
                                           "createdAt":  "2023-04-05T15:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zachrybaker",
                                           "body":  "The error \"Error: Internal.IL.VerifierException: Assembly or module not found: mscorlib\" can still occur even after RTFM and following the directions. For example, for a net6.0 tf dll:\r\n\r\n\u003e dotnet tool install --global dotnet-ilverify --version 6.0.0            \r\n\u003e ILVerify.exe myTarget.dll -r \"c:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.9\\*.dll\" \r\n\r\nError: Internal.IL.VerifierException: Assembly or module not found: mscorlib\r\n   at ILVerify.Verifier.SetSystemModuleName(AssemblyName name)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.Program.Run(Options options)\r\n   \r\n   It doesn\u0027t seem to matter if I give it the x86 or 64-bit program files base. It doesn\u0027t seem to accept the mscorlib dll in ANY of the runtime folders.",
                                           "updatedAt":  "2023-04-05T15:55:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZShTy",
                                           "createdAt":  "2023-04-05T19:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e ILVerify.exe myTarget.dll -r \"c:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.9*.dll\"\r\n\r\n`c:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App` is ASP.NET Core only. It does not contain mscorlib. Try running `ILVerify.exe  myTarget.dll -r \"c:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.14\\*.dll\"` instead.",
                                           "updatedAt":  "2023-04-05T19:46:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZT3QI",
                                           "createdAt":  "2023-04-06T01:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zachrybaker",
                                           "body":  "Wow totally missed that I was referencing asp there!Sent from my iPhoneOn Apr 5, 2023, at 2:46 PM, Jan Kotas ***@***.***\u003e wrote:﻿\n\nILVerify.exe myTarget.dll -r \"c:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\6.0.9*.dll\"\n\nc:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App is ASP.NET Core only. It does not contain mscorlib. Try running ILVerify.exe  myTarget.dll -r \"c:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\6.0.14\\*.dll\" instead.\n\n—Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you commented.Message ID: ***@***.***\u003e",
                                           "updatedAt":  "2023-04-06T01:45:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sW-X4",
                                           "createdAt":  "2023-11-19T20:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQf8cg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rstarkov",
                                                                               "createdAt":  "2023-12-25T15:00:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ForNeVeR",
                                           "body":  "ILVerify 8 now just outright throws NRE if called without `-r`:\r\n```console\r\n$ ilverify.exe .\\EntryPoint.dll\r\nError: Object reference not set to an instance of an object.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at ILVerify.Program.Resolve(String simpleName)\r\n   at ILVerify.Program.ILVerify.IResolver.ResolveAssembly(AssemblyName assemblyName)\r\n   at ILVerify.Verifier.SetSystemModuleName(AssemblyName name)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.ILVerifyRootCommand.\u003c.ctor\u003eb__40_0(ParseResult result)\r\n```\r\n\r\nIf called with `-r \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.0\\*.dll\"` then it works.\r\n\r\nI wonder if we could just make it use the SDK references by default (either from the SDK that ILVerify itself is using, or taken from the `.runtimeconfig` of the inspected assembly, if available).",
                                           "updatedAt":  "2023-11-19T20:01:46Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "ilverify fails with various file not found errors",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57444",
        "createdAt":  "2021-08-15T15:51:01Z",
        "number":  57444,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB5Xyzg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2021-09-07T20:54:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-28T04:01:52Z",
        "body":  "Implement rules proposed in https://github.com/dotnet/designs/blob/main/proposed/verifiable-ref-readonly.md in ILVerify",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnAhdKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41lrh6",
                                           "createdAt":  "2021-08-15T15:51:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nImplement rules proposed in https://github.com/dotnet/designs/blob/main/proposed/verifiable-ref-readonly.md in ILVerify\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`up-for-grabs`, `area-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-15T15:51:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b9ZEG",
                                           "createdAt":  "2025-01-27T18:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "I would like to get some clarification on document from somebody.\n\n Right now inside ILVerify there concept of `isReadonly` and `isPermanentHome`. \na. Is `isReadonly` in the ILVerify correspond to `readonly references`?\nb. What concept represented by the `isPermanentHome`. \nc. How ILVerify represent `controlled mutability references`? Also not clear what `controlled mutability references` is.\n\nAlso quick glance on the codebase get me puzzled a bit. I do not fully understand what\u0027s going on, but looks like verification happens when ILImporter sees instruction. Currently `InitOnly` error happens when ilverifier find `ldsflda`/`ldflda`, for example and if field is readonly have exclusion condition. It seems to me that with `readonly ref` support I have to check what kind of reference attempted to be assigned, only at `stsfld` for example, or during `call` famility. But that seems a bit disruptive to me, so I want to ask if I thinking in right direction and what am I missing.",
                                           "updatedAt":  "2025-01-27T18:17:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cCF0q",
                                           "createdAt":  "2025-01-28T04:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEQH0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2025-01-28T07:15:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Is isReadonly in the ILVerify correspond to readonly references?\n\u003e How ILVerify represent controlled mutability references? \n\nIsReadonly concept in current ILVerify corresponds to controlled mutability references.\n \n\u003e What concept represented by the isPermanentHome.\n\nWhether or not the reference can be pointing to stack. The rules for isPermanentHome are very simplistic compared to what\u0027s available in C# today.\n\n\u003e Also not clear what controlled mutability references is.\n\nControlled mutability references are explained in ECMA-335. The key difference between controlled mutability references and readonly references is that it is allowed to call non-readonly valuetype instance method on controlled mutability reference, but it is not allowed to call such method on readonly reference.",
                                           "updatedAt":  "2025-01-28T04:01:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Implement verification of readonly references",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62732",
        "createdAt":  "2021-12-13T16:50:25Z",
        "number":  62732,
        "author":  "carlos-quintero",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-24T22:56:56Z",
        "body":  "### Description\r\n\r\nWhen a call to a method uses a parameter whose type is embedded from an interop assembly, ILVerify fails to verify the dll with:\r\n\r\nError [MissingMethod]\r\n\r\n\r\n### Reproduction Steps\r\n\r\n- Using Visual Studio 2022 create a .NET Framework (not .NET) Class Library named ClassLibraryInterop\r\n- Add the NuGet package Microsoft.VisualStudio.Imaging (version 14.3.25407)\r\n- Add the NuGet package Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime (version 14.3.26931). This interop assembly is automatically embedded, which is typical of the Visual Studio SDK used to create VSIX extensions for Visual Studio\r\n- Add this code:\r\n```\r\nusing Microsoft.VisualStudio.Imaging.Interop;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ClassLibraryInterop\r\n{\r\n   public class Class1\r\n   {\r\n      void f1()\r\n      {\r\n         ImageAttributes imageAttributes = new ImageAttributes\r\n         {\r\n            StructSize = Marshal.SizeOf(typeof(ImageAttributes))\r\n         };\r\n\r\n         Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateAttributes(imageAttributes);\r\n      }\r\n   }\r\n}\r\n```\r\n- Build the DLL\r\n- Open a command prompt and change to the output folder (ClassLibraryInterop\\bin\\Debug)\r\n- Run:\r\n\r\n`ilverify ClassLibraryInterop.dll -r \"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\*.dll\" -r \".\\*.dll\"\r\n`\r\n\r\n### Expected behavior\r\n\r\nNo error (PEVerify from .NET Framework works fine in this case, but ILVerify doesn\u0027t)\r\n\r\n### Actual behavior\r\n\r\n[IL]: Error [MissingMethod]\r\nClassLibraryInterop.Class1::f1()] Missing method \u0027Void Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateAttributes(Microsoft.VisualStudio.Imaging.Interop.ImageAttributes)\u0027\r\n\r\nThis is likely because the signature of the method doesn\u0027t match due to the type of the parameter, which has been embedded:\r\n![Embedded](https://user-images.githubusercontent.com/10756684/145853788-dae88587-0ac6-4500-a78c-11792385e18f.PNG)\r\n\r\n\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET Framework 4.7.2\r\nWindows 10\r\nAnyCPU\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPOfboA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47KvWa",
                                           "createdAt":  "2021-12-13T16:50:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-13T16:50:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Kwq-",
                                           "createdAt":  "2021-12-13T16:56:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen a call to a method uses a parameter whose type is embedded from an interop assembly, ILVerify fails to verify the dll with:\r\n\r\nError [MissingMethod]\r\n\r\n\r\n### Reproduction Steps\r\n\r\n- Using Visual Studio 2022 create a .NET Framework (not .NET) Class Library named ClassLibraryInterop\r\n- Add the NuGet package Microsoft.VisualStudio.Imaging (version 14.3.25407)\r\n- Add the NuGet package Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime (version 14.3.26931). This interop assembly is automatically embedded, which is typical of the Visual Studio SDK used to create VSIX extensions for Visual Studio\r\n- Add this code:\r\n```\r\nusing Microsoft.VisualStudio.Imaging.Interop;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ClassLibraryInterop\r\n{\r\n   public class Class1\r\n   {\r\n      void f1()\r\n      {\r\n         ImageAttributes imageAttributes = new ImageAttributes\r\n         {\r\n            StructSize = Marshal.SizeOf(typeof(ImageAttributes))\r\n         };\r\n\r\n         Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateAttributes(imageAttributes);\r\n      }\r\n   }\r\n}\r\n```\r\n- Build the DLL\r\n- Open a command prompt and change to the output folder (ClassLibraryInterop\\bin\\Debug)\r\n- Run:\r\n\r\n`ilverify ClassLibraryInterop.dll -r \"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\*.dll\" -r \".\\*.dll\"\r\n`\r\n\r\n### Expected behavior\r\n\r\nNo error (PEVerify from .NET Framework works fine in this case, but ILVerify doesn\u0027t)\r\n\r\n### Actual behavior\r\n\r\n[IL]: Error [MissingMethod]\r\nClassLibraryInterop.Class1::f1()] Missing method \u0027Void Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateAttributes(Microsoft.VisualStudio.Imaging.Interop.ImageAttributes)\u0027\r\n\r\nThis is likely because the signature of the method doesn\u0027t match due to the type of the parameter, which has been embedded:\r\n![Embedded](https://user-images.githubusercontent.com/10756684/145853788-dae88587-0ac6-4500-a78c-11792385e18f.PNG)\r\n\r\n\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET Framework 4.7.2\r\nWindows 10\r\nAnyCPU\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecarlos-quintero\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-13T16:56:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4859ug",
                                           "createdAt":  "2022-01-26T03:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "cc @TIHan. ",
                                           "updatedAt":  "2022-01-26T03:26:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ILVerify fails with error [MissingMethod] if call to method uses a parameter with type from an embedded interop assembly",
        "labels":  [
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63198",
        "createdAt":  "2021-12-29T19:05:58Z",
        "number":  63198,
        "author":  "masonwheeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC90NvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2021-12-29T22:07:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2021-12-30T15:47:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2022-01-02T10:03:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2022-01-25T19:39:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2022-01-25T23:05:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sanikolov",
                                            "createdAt":  "2022-06-08T20:27:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jl0pd",
                                            "createdAt":  "2022-08-28T15:02:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeeminglyScience",
                                            "createdAt":  "2022-10-17T19:19:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rickbrew",
                                            "createdAt":  "2022-10-17T19:49:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tanveerbadar",
                                            "createdAt":  "2023-10-01T06:53:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2025-01-01T17:18:29Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2023-04-24T23:04:21Z",
        "body":  "### Description\r\n\r\n[The documentation for `InvalidProgramException`](https://docs.microsoft.com/en-us/dotnet/api/system.invalidprogramexception?view=net-6.0) states right up front that:\r\n\r\n\u003e Generally this [exception being thrown] indicates a bug in the compiler that generated the program.\r\n\r\nTherefore the people most likely to see it are those working on compilers or similar code generation tools.  (It\u0027s certainly possible that other people could see it if untested compiler bugs are released into the wild, but hopefully the bulk of them will stay inside of the realm of compiler development!)\r\n\r\nExceptions, by design, are full of information meant to make debugging easier.  The class describes the general type of problem, the message gives specifics, the stack trace shows you exactly where the error occurred, etc.  So you\u0027d expect  an exception caused by a bad compiler, whose primary expected audience is compiler developers, to give them a decent clue as to what their compiler did wrong.  Unfortunately, `InvalidProgramException` fails pretty hard at this.\r\n\r\n### Reproduction Steps\r\n\r\n1) Modify Roslyn\u0027s code generator to omit the `leave` opcode at the end of a `try` body.\r\n2) Compile an otherwise-valid test case containing a `try` block.\r\n3) Run the test case.\r\n\r\n### Expected behavior\r\n\r\nThe exception that comes up should tell you that there\u0027s a `try` body with no `leave` instruction.  The JIT knows which IL rule was violated, so it ought to be able to convey this information to the user.\r\n\r\n### Actual behavior\r\n\r\nYou get a generic error message that says nothing whatsoever about the nature of the problem.  All you know is \"something went wrong,\" during the JITting of this method.\r\n\r\n### Other information\r\n\r\nThis is one specific example that I recently discovered can cause this error.  A glance at the JIT source suggests there are plenty of others.  Ideally, each rule violated that leads to this exception being thrown should return an informative error message explaining what went wrong.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPPElIQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47xJJ7",
                                           "createdAt":  "2021-12-29T19:06:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-29T19:06:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xL2a",
                                           "createdAt":  "2021-12-29T19:39:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n[The documentation for `InvalidProgramException`](https://docs.microsoft.com/en-us/dotnet/api/system.invalidprogramexception?view=net-6.0) states right up front that:\r\n\r\n\u003e Generally this [exception being thrown] indicates a bug in the compiler that generated the program.\r\n\r\nTherefore the people most likely to see it are those working on compilers or similar code generation tools.  (It\u0027s certainly possible that other people could see it if untested compiler bugs are released into the wild, but hopefully the bulk of them will stay inside of the realm of compiler development!)\r\n\r\nExceptions, by design, are full of information meant to make debugging easier.  The class describes the general type of problem, the message gives specifics, the stack trace shows you exactly where the error occurred, etc.  So you\u0027d expect  an exception caused by a bad compiler, whose primary expected audience is compiler developers, to give them a decent clue as to what their compiler did wrong.  Unfortunately, `InvalidProgramException` fails pretty hard at this.\r\n\r\n### Reproduction Steps\r\n\r\n1) Modify Roslyn\u0027s code generator to omit the `leave` opcode at the end of a `try` body.\r\n2) Compile an otherwise-valid test case containing a `try` block.\r\n3) Run the test case.\r\n\r\n### Expected behavior\r\n\r\nThe exception that comes up should tell you that there\u0027s a `try` body with no `leave` instruction.  The JIT knows which IL rule was violated, so it ought to be able to convey this information to the user.\r\n\r\n### Actual behavior\r\n\r\nYou get a generic error message that says nothing whatsoever about the nature of the problem.  All you know is \"something went wrong,\" during the JITting of this method.\r\n\r\n### Other information\r\n\r\nThis is one specific example that I recently discovered can cause this error.  A glance at the JIT source suggests there are plenty of others.  Ideally, each rule violated that leads to this exception being thrown should return an informative error message explaining what went wrong.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emasonwheeler\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-29T19:39:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xMQf",
                                           "createdAt":  "2021-12-29T19:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "This seems reasonable.\r\n\r\n@jkotas would this be easy to add for an external contributor?  Is there a reasonable place to point someone (like @masonwheeler) at where they could easily add this information (or pass it through) so the final exception contained more useful info?\r\n\r\n@masonwheeler would you be interested in contributing a fix here if it was low-cost to do so? Thanks!",
                                           "updatedAt":  "2021-12-29T19:45:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xMXl",
                                           "createdAt":  "2021-12-29T19:46:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "The diagnostic story around `InvalidProgramException` is indeed that there is none. In some ways, this is by design.\r\n\r\nFor example, the Jit is not at all obliged [1] to throw anything when it encounters invalid IL. It could hard crash instead, or, as [has happened](https://github.com/dotnet/roslyn/issues/58472), just accept it and compile \"something\". It is this latter kind of failure mode that\u0027s perhaps more insidious, though (much, I\u0027d imagine?) less common.\r\n\r\nIf you search around the Jit sources, you will indeed find some `BADCODE` macros that will turn into `IPE`s. You will find many more `noway_assert`s (that _can_ turn into `IPE`s if the Jit fails to compile the code even with all optimizations turned off), and yet more regular `assert`s, some of them guarding conditions that aren\u0027t critical to the integrity of the compiler\u0027s internal data structures (those are usually `BADCODE`s), but not expected to be produced by the compiler itself.\r\n\r\nThere is some infrastructure in the compiler for verification that would not allow for \"invalid IL\", but of course, not all valid IL is verifiable. And [we\u0027re going to](https://github.com/dotnet/runtime/issues/32648) delete the verifier anyways.\r\n\r\nThere are some issues with defining the concept of \"valid IL\", too. One example is `ldfld/a`. In `III.4.11 ldflda – load field address`, we can find under `Correctness`: `Correct CIL ensures that ... obj is compatible-with the Class of field`. In other words, this forbids accessing fields of type `A` \"through\" fields of an unrelated type `B`. Yet, that happens on a daily basis because of `Unsafe.As` and even works fine, [most of the time](https://github.com/dotnet/runtime/issues/58312#issuecomment-993491291).\r\n\r\nAll that overcome, we would still be left with the fact that building a \"correctness verifier\" into the Jit would slow it down, perhaps just a little, but in the Jit world, even, say, a 0.2% regression in throughput is a significant one.\r\n\r\nAll in all, I don\u0027t forsee us fixing this issue in a systematic way (though having the error messages for `BADCODE`s would be nice regardless, and presumably those could be tunnelled through without too much difficulty). I would recommend to use tools like ILVerify, and if those are not suitable (say, because you\u0027re using Ref.Emit), acquiring a Checked version of the Jit (say with a local runtime build), that has both more `assert`s built in and actually prints useful messages from them :).\r\n\r\n[1]: ECMA 335, `III.1.8 Verifiability and correctness`: `The operation of CIL sequences that do not meet the CIL correctness requirements is unspecified.`",
                                           "updatedAt":  "2021-12-29T19:47:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xMmS",
                                           "createdAt":  "2021-12-29T19:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e would this be easy to add for an external contributor?\r\n\r\nIn theory it\u0027s only about extending badCode macro and pass the string we use [here](https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/importer.cpp#L83) to [this](https://github.com/dotnet/runtime/blob/main/src/coreclr/jit/error.cpp#L45).\r\n\r\nBut I am not sure we have an API in JIT-EE to materialize a `const char*` to `StringObject`, if there is one than it should be easy.\r\n**UPD** ah, no need for StringObject actually",
                                           "updatedAt":  "2021-12-29T19:54:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xM6y",
                                           "createdAt":  "2021-12-29T19:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e @masonwheeler would you be interested in contributing a fix here if it was low-cost to do so? Thanks!\r\n\r\nC++ is never \"low-cost\" for me, unfortunately.  I\u0027ve been actively avoiding the language ever since it traumatized me in college. 😛 ",
                                           "updatedAt":  "2021-12-29T19:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xM-7",
                                           "createdAt":  "2021-12-29T19:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@masonwheeler I meant \u0027low cost\u0027 in the sense that it does not add overhead, and slots in cleanly to the existing code without a ton of churn. ",
                                           "updatedAt":  "2021-12-29T19:55:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xNEQ",
                                           "createdAt":  "2021-12-29T19:56:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@EgorBo Can you clarify this bit:\r\n\r\n\u003e UPD ah, no need for StringObject actually",
                                           "updatedAt":  "2021-12-29T19:56:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xNk4",
                                           "createdAt":  "2021-12-29T20:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e There is some infrastructure in the compiler for verification that would not allow for \"invalid IL\", but of course, not all valid IL is verifiable.\r\n\r\nSure, but let\u0027s not let the perfect be the enemy of the good here.\r\n\r\n\u003e And [we\u0027re going to](https://github.com/dotnet/runtime/issues/32648) delete the verifier anyways.\r\n\r\nYou are?  That feels like a security problem, for reasons I noted on the linked issue.\r\n\r\n\u003e All that overcome, we would still be left with the fact that building a \"correctness verifier\" into the Jit would slow it down, perhaps just a little, but in the Jit world, even, say, a 0.2% regression in throughput is a significant one.\r\n\r\nI\u0027m not asking to build a correctness verifier into the JIT.  *There is already one there,* imperfect and incomplete though it may be.  It exists, and it\u0027s producing `InvalidProgramException` errors in the current shipping product.  All I\u0027m asking is that, when it does so, it ought to explain itself.",
                                           "updatedAt":  "2021-12-29T20:04:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xOtO",
                                           "createdAt":  "2021-12-29T20:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e @EgorBo Can you clarify this bit:\r\n\u003e \r\n\u003e \u003e UPD ah, no need for StringObject actually\r\n\r\nI meant we could materialize it in VM itself, jit will only bypass a second argument to RaiseException\r\n",
                                           "updatedAt":  "2021-12-29T20:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xO3Q",
                                           "createdAt":  "2021-12-29T20:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "As an one-line fix: we can define `DOTNET_PrintBadCodeToStdout=` config switch ;-)",
                                           "updatedAt":  "2021-12-29T20:17:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xSPZ",
                                           "createdAt":  "2021-12-29T21:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "Printing to stdout would be unhelpful for testing scenarios where the test harness ignores or does custom things with stdout.",
                                           "updatedAt":  "2021-12-29T21:04:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xYrA",
                                           "createdAt":  "2021-12-29T22:42:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Printing to stdout would be unhelpful for testing scenarios where the test harness ignores or does custom things with stdout.\r\n\r\nIt feels like it would at least be a better starting point than no info at all.  You could also just have the test harness print this out.  Or just do a manual case and get this info. \r\n\r\nI do agree that having the exception have more info would be valuable.  Just thinking about what would be easiest to get in.  \r\n\r\nAs per the post above, it could just be a one line fix (and easy for you to create and get reviewed).",
                                           "updatedAt":  "2021-12-29T22:42:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xdH6",
                                           "createdAt":  "2021-12-30T00:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODIR1Og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2023-10-01T06:58:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "If you\u0027re building a compiler, you want to know the entire output of the compiler is valid, not just the parts that get executed/JITted. Sure, a more detailed `InvalidProgramException` could help, but it should not be the thing a compiler developer relies on because it\u0027s annoying having to execute all the produced code to ensure it\u0027s valid.\r\n\r\nI think the solution to this problem is an external tool. JIT will by design only look at code that is getting executed. One could force the JIT to compile everything, but even then one might have trouble figuring out how to validly instantiate constrained generics. The IL might be acceptable for RyuJIT because of how RyuJIT is implemented, but it might not be acceptable to Mono\u0027s JIT. The JIT (or the runtime) is not a good validator.\r\n\r\nI think it\u0027s a better investment to add this to [ILVerify](https://github.com/dotnet/runtime/tree/main/src/coreclr/tools/ILVerify) if it\u0027s missing. Now, ILVerify currently checks for verifiable IL. There\u0027s an issue somewhere to add a mode that checks for valid instead of verifiable IL. The concept of verifiable IL kind of lost its meaning after execution models like Silverlight died.",
                                           "updatedAt":  "2021-12-30T00:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xd1q",
                                           "createdAt":  "2021-12-30T00:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e If you\u0027re building a compiler, you want to know the entire output of the compiler is valid, not just the parts that get executed/JITted.\r\n\r\nAs I mentioned in the original post, the ideal scenario for this is compiler *testing.*  As a general rule of thumb, if 100% of the code in your tests doesn\u0027t get exposed to the JIT, there\u0027s something wrong with the test case.\r\n\r\n\u003e Sure, a more detailed `InvalidProgramException` could help, but it should not be the thing a compiler developer relies on because it\u0027s annoying having to execute all the produced code to ensure it\u0027s valid.\r\n\r\nIt\u0027s not a question of relying on, so much as \"you\u0027re telling me that *something* is wrong but not what the problem is. Stop doing that.  It\u0027s annoying and counterproductive.\"\r\n\r\n\u003e I think the solution to this problem is an external tool. JIT will by design only look at code that is getting executed. One could force the JIT to compile everything, but even then one might have trouble figuring out how to validly instantiate constrained generics. The IL might be acceptable for RyuJIT because of how RyuJIT is implemented, but it might not be acceptable to Mono\u0027s JIT. The JIT (or the runtime) is not a good validator.\r\n\r\nAgain, I\u0027m not asking for a better more comprehensive/perfect verifier here; just for actual meaningful explanations of the stuff it\u0027s already reporting as problems.\r\n\r\n\u003e I think it\u0027s a better investment to add this to [ILVerify](https://github.com/dotnet/runtime/tree/main/src/coreclr/tools/ILVerify) if it\u0027s missing. Now, ILVerify currently checks for verifiable IL. There\u0027s an issue somewhere to add a mode that checks for valid instead of verifiable IL. The concept of verifiable IL kind of lost its meaning after execution models like Silverlight died.\r\n\r\nThanks, that\u0027s actually helpful.  Before today I had never heard of ILVerify; all I knew was that PEVerify doesn\u0027t work on Core assemblies.  It\u0027s good to see there\u0027s a replacement for it!  However, I still maintain that code that throws an exception indicating there\u0027s a problem that needs to be fixed has a responsibility to provide useful information about the problem so that it can be fixed.",
                                           "updatedAt":  "2021-12-30T00:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xeJq",
                                           "createdAt":  "2021-12-30T00:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIKRjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2021-12-30T00:46:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e However, I still maintain that code that throws an exception indicating there\u0027s a problem that needs to be fixed has a responsibility to provide useful information about the problem so that it can be fixed.\r\n\r\n\u003e Stop doing that. It\u0027s annoying and counterproductive.\"\r\n\r\n@masonwheeler as discussed, the user base size for these APIs is tiny and has generally been served fine with the current approach.  Given finite resources to expend on the breadth of functionality that is in the runtime, this is going to be low on the list.   If you are interested in working to improve things here, your help would be welcome.  However, berating because you don\u0027t like that this particular system hasn\u0027t gotten the deep attention that would make it better for a tiny subset of consuming devs isn\u0027t productive or useful for winning friends and changing minds.\r\n\r\nIt seems already like there\u0027s a path foward to expose this information.  It doesn\u0027t appear to be particularly crazy code or some very onerous c++.  At this point, absent anything new coming to light, the best way to get to the outcome you\u0027re looking for would likely be to just contribute a PR.  I do believe if it fit the classification i laid out above, it would likely be approved.  That would quickly get you to the state where you got the info you wanted for any future work you\u0027re doing in your particular compiler.",
                                           "updatedAt":  "2021-12-30T00:28:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xfAD",
                                           "createdAt":  "2021-12-30T00:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e It doesn\u0027t appear to be particularly crazy code or some very onerous c++\r\n\r\nException messages produced by the runtime need to be localizable so this would at minimum need to introduce a way to get localizable text strings out of the JIT (then Microsoft will foot the bill to have them translated, and have engineers do a back-and-forth with the translation team describing the intents behind the messages). This would not be just about surfacing the string in the BADCODE macro.\r\n\r\nBut again, because the JIT is not a validator after the concept of verifiability became unimportant, it would only give you the detail if RyuJIT cannot accept the IL. RyuJIT doesn\u0027t spend extra time validating the IL; it will only throw InvalidProgram if it\u0027s completely lost. It\u0027s by design. So this would not ensure the IL is valid. It might still be invalid for Mono. Similar investment will need to be done on the Mono side so that one can discern the reasons why Mono\u0027s JIT doesn\u0027t accept the IL if they\u0027re different from RyuJIT\u0027s.\r\n\r\n...or one can invest in ILVerify, which is a tool with the sole purpose of spending time on validating the IL and giving detailed explanations.",
                                           "updatedAt":  "2021-12-30T00:47:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xfcm",
                                           "createdAt":  "2021-12-30T00:56:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@MichalStrehovsky ILVerify seems like a reasonable path forward for me.  \r\n\r\nOn this count:\r\n\r\n\u003e Exception messages produced by the runtime need to be localizable\r\n\r\nCould this just be additional information tacked onto the existing InvalidOperationException?  For example, it could expose this as additional informaiton in the `.Data` property.  That main message woudl still be localized as normal.  This would just be additional info someone could poke at to learn more.  ",
                                           "updatedAt":  "2021-12-30T00:56:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xgCb",
                                           "createdAt":  "2021-12-30T01:10:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEE9MyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2023-10-01T07:01:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2025-02-03T05:08:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Could this just be additional information tacked onto the existing InvalidOperationException?  For example, it could expose this as additional informaiton in the `.Data` property.  That main message woudl still be localized as normal.  This would just be additional info someone could poke at to learn more.\r\n\r\nThis kind of goes against the spirit of localization. The purpose of localization is to give even ground to people who don\u0027t speak English.\r\n\r\n(I didn\u0027t think someone can be successful with computers without speaking English until I met my sister-in-law\u0027s husband who is a firmware engineer at Nikon. I\u0027m sure he does a lot of cool stuff but I can\u0027t talk to him about any of it because he only speaks Japanese and I only know like 50 words in Japanese. There\u0027s a lot of people like him in Japan. Turns out my view was biased by the fact that I speak a niche language and I definitely wouldn\u0027t be able to succeed with that language without also learning English.)",
                                           "updatedAt":  "2021-12-30T01:10:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xgLE",
                                           "createdAt":  "2021-12-30T01:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@MichalStrehovsky I don\u0027t see how more information vs none could be any worse here.  Both would be \u0027against the spirit\u0027 here in that both are absent information that could be useful.  WIth no information though, you can\u0027t do anythign to narrow things down.  WIth some info you have a starting point.  Maybe via google.  Maybe via translate.  etc. ",
                                           "updatedAt":  "2021-12-30T01:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xgUo",
                                           "createdAt":  "2021-12-30T01:17:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e Exception messages produced by the runtime need to be localizable so this would at minimum need to introduce a way to get localizable text strings out of the JIT (then Microsoft will foot the bill to have them translated, and have engineers do a back-and-forth with the translation team describing the intents behind the messages). This would not be just about surfacing the string in the BADCODE macro.\r\n\r\nThis feels to me like a separation-of-concerns issue.  Why have the BADCODE macro surface a string when it could easily use an int/enum instead that\u0027s an index into an array of (localizable) strings?",
                                           "updatedAt":  "2021-12-30T01:17:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xhMU",
                                           "createdAt":  "2021-12-30T01:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e @MichalStrehovsky I don\u0027t see how more information vs none could be any worse here\r\n\r\nIt sends a message. There are 3 options: do nothing, do a little bit that mostly benefits people in privilege of speaking English but tells the others that they\u0027re second class, or do extra work that will benefit everyone. The extra information is either important enough that we do option 3, or not important enough. As engineers we don\u0027t have saying in what languages this gets translated into, but we do control whether its translatable. If Satya asks whether we \"empower every person and every organization on the planet to achieve more\", it\u0027s hard to say yes if we do things like option 2.\r\n\r\n\u003e This feels to me like a separation-of-concerns issue. Why have the BADCODE macro surface a string when it could easily use an int/enum instead that\u0027s an index into an array of (localizable) strings?\r\n\r\nYup, I think it could be redone that way.",
                                           "updatedAt":  "2021-12-30T01:37:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xixX",
                                           "createdAt":  "2021-12-30T02:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e It sends a message. There are 3 options: do nothing, do a little bit that mostly benefits people in privilege of speaking English but tells the others that they\u0027re second class, or do extra work that will benefit everyone.\r\n\r\nI disagree.  There are limited resources, and allowing the perfect to be the enemy of the good feels like punishing all because of have to accept that.  For example, roslyn\u0027s source code comments aren\u0027t translated into other languages.  Does that hinder people who would want to potentially get involved there?  Sure.  But we don\u0027t have the time or resources to make the codebase suitable so that those who don\u0027t speak english have the same ease of entry as those that do.\r\n\r\nIn no way did i propose that we not localize if we are able.  However, if such an option is not available, then i don\u0027t see any good that comes from stating that because we can\u0027t do that we won\u0027t expose other information.  It becomes a position of \"if we can\u0027t help everyone, then we will harm everyone\" and that puts everyone in a strictly worse position than \"We can help some people more than others\".  \r\n\r\n\u003e \"empower every person and every organization on the planet to achieve more\", it\u0027s hard to say yes if we do things like option 2.\r\n\r\nIt\u0027s hard to say \"yes\" if we do nothing.",
                                           "updatedAt":  "2021-12-30T02:13:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xkU2",
                                           "createdAt":  "2021-12-30T02:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "\u003e do a little bit that mostly benefits people in privilege of speaking English but tells the others that they\u0027re second class\r\n\r\nI wouldn\u0027t say that, personally.  It\u0027s simply a recognition of the reality that English is the *lingua franca* of software development and always has been.  Wirth didn\u0027t write Pascal in German; he wrote it in English.  Matsumoto didn\u0027t write Ruby in Japanese; he wrote it in English.  It\u0027s not about privilege or class so much as the fact that Church, Turing, Shannon, and the people who built the first programmable computers based on their theories all spoke English.  (Much like how biological and medical terminology remains in Latin to this very day, despite Latin being a dead language for centuries.  Historical inertia is a heck of a force!)\r\n\r\nHaving said that, this does seem like something that could be made localizable with a minimum of effort, so it seems worthwhile to do so.",
                                           "updatedAt":  "2021-12-30T02:49:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xl3B",
                                           "createdAt":  "2021-12-30T03:20:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEE9LJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2025-02-03T05:03:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I disagree. There are limited resources, and allowing the perfect to be the enemy of the good feels like punishing all because of have to accept that.\r\n\r\nAfter all the trainings on inclusion Microsoft has put me through, I don\u0027t believe building an inclusive product equals building the perfect product - it\u0027s the min bar.\r\n\r\nMicrosoft doesn\u0027t go to the extent of e.g. hiring translators to translate our conversation here, but end user messages coming out of our tools/runtimes are localizable, and so are the docs, and that\u0027s the bar on inclusiveness that Microsoft as a company established for the products.\r\n\r\n\u003e It\u0027s hard to say \"yes\" if we do nothing.\r\n\r\nThe ILVerify tool is built for this purpose. Given limited amount of time and energy, I would direct the efforts towards ILVerify. There are benefits in having a single way to do this that everyone can follow (no matter if they target Mono or don\u0027t speak English). If enough effort gets put into ILVerify, we could just promote it in the `InvalidProgramException` (and `BadImageFormatException`, that also has these problems) message and docs so that people know about it.",
                                           "updatedAt":  "2021-12-30T03:20:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xmRu",
                                           "createdAt":  "2021-12-30T03:29:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e After all the trainings on inclusion Microsoft has put me through, I don\u0027t believe building an inclusive product equals building the perfect product - it\u0027s the min bar.\r\n\r\nHaving no error message at all is exclusive to all.  Being inclusive to some, but not all, is strictly better.  Stating that it doesn\u0027t meet the \u0027min bar\u0027 is illogical.\r\n\r\nThis also feels entirely specious as exception messages are just one *extremely* narrow part of the developer loc story.  As i mentioned, our own codebases are not loc\u0027ed.  Which makes them already not as convenient to use from someone who does not speak english.  We understand and accept that, even though i\u0027m sure we\u0027d like to invest in makign that better if we had the resources.\r\n\r\n\u003e  Given limited amount of time and energy, I would direct the efforts towards ILVerify. \r\n\r\nOf course.  That applies to efforts we can direct ourselves.  In zero sum resource allocation that makes sense.  However, open source means it doesn\u0027t have to be zero sum.  There may be varying different levels of external resources we can be provided with, with varying constraints on the viability and efficacy of where that work can go.\r\n\r\nFor example, we might have to choose between a community contribution of X% in this section of the code versus *0%* in ILVerify if the barrier to entry is too high there.  Logically, given the finite resources at our own disposal, and the potential applicability of external resources, that may be the only viable path forward.\r\n\r\nIf you can find that you can make the resourcing work (internal or external) for ILVerify:  Great.  Do that.  Similarly, if you can find that loc costs can be made to work for this part of the code: Great.  Do that.  However, if the costs or availability of resources make either of those not possible, we should not default to \u0027do nothing\u0027 when there is something that makes things strictly better, even if it\u0027s not as good as some ideal we may not be able to reach.",
                                           "updatedAt":  "2021-12-30T03:29:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47xmeR",
                                           "createdAt":  "2021-12-30T03:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Microsoft doesn\u0027t go to the extent of e.g. hiring translators to translate our conversation here,\r\n\r\nCorrect. We accept taht 100% loc of all artifacts is not something we will get.  And we accept that that\u0027s ok in a world of finite resources.\r\n\r\n\u003e but end user messages coming out of our tools/runtimes are localizable, \r\n\r\nas i posited above, this doesn\u0027t have to be an \u0027end user message\u0027.  it can be \"internal debugging state of the engine\" if you want to call it that.  Just as we don\u0027t loc our asserts/contracts, and we see those strings show up when users encounter them, this would be another form of internal dev data that serves to add information, while not necessarily getting loc\u0027ed (just like so many other dev artifacts).\r\n\r\n\u003e and so are the docs, and that\u0027s the bar on inclusiveness that Microsoft as a company established for the products.\r\n\r\nAs per above, this is not docs.  Nor is it an \u0027end user message\u0027.  I specifically placed it in the `.Data` property.  We doc that as: \r\n\r\n\u003e Gets a collection of key/value pairs that provide additional user-defined information about the exception.\r\n\r\nThis is simply that.  It\u0027s user-defined information about the exception as per the component at play.  It could be any number of things that component feels might be relevant.  It might collects pieces of state of the runtime.  It may include the specific IL instruction point that somethign went wrong.  it could include the particular native JIT frames it was in.  And yes, it could include enums, debug-strings, etc. that might be relevant.",
                                           "updatedAt":  "2021-12-30T03:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47x0DZ",
                                           "createdAt":  "2021-12-30T07:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e @jkotas would this be easy to add for an external contributor?\r\n\r\nAs @michalstrehovsky said, ILVerify is both tool and library designed to help compiler developers to validate the produced IL. The energy should be focused on improving ILVerify. The ILVerify library is designed to allow unit testing of compilers. It has been used in the internal tests by Dynatrace. We have also done some work towards using it for Roslyn testing: https://github.com/dotnet/roslyn/issues/22872.\r\n\r\nFor people interested in internal RyuJIT diagnostic, we have effort in place to publish checked builds of the JIT: https://github.com/dotnet/runtime/pull/61597. It is meant to make it easier to get the JIT log that can be used to diagnose code quality issues and code correctness issues, including issues with invalid IL supplied to the JIT. One has to understand the RyuJIT internals to interpret the JIT log.\r\n\r\nI do not think that adding the `BADCODE` or `noway_assert` message to the InvalidProgramException would be very helpful in practice. In my experience, you typically need the whole RyuJIT log and you need to understand how the RyuJIT works to diagnose how the JIT ended up in the bad state. The `BADCODE` or `noway_assert` message is rarely enough to diagnose what went wrong.",
                                           "updatedAt":  "2021-12-30T07:58:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47yMH0",
                                           "createdAt":  "2021-12-30T12:41:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "Update: tried using ILVerify. [It didn\u0027t work.](https://github.com/dotnet/runtime/issues/63221)",
                                           "updatedAt":  "2021-12-30T12:41:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc477HNX",
                                           "createdAt":  "2022-01-05T03:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "ILVerify has been very helpful, except when it hasn\u0027t.  I\u0027ve found a few cases where it will give an assembly a clean bill of health but the CLR will still refuse to load it.  (For example, if metadata describes an `interface` type that inherits from `System.Object`.)\r\n\r\n[And then there\u0027s this.](https://github.com/dotnet/runtime/files/7811822/testcase.zip)  I honestly have no idea what\u0027s wrong with `testcase.dll` in here, but ILVerify gives it a clean bill of health and the CLR chokes on it.  I can only assume something\u0027s going wrong with the exception handling in `Main`, but looking at it in ILDASM, nothing is jumping out at me.\r\n\r\nCan any CLR experts have a look at this and figure out where the problem lies?  Because no available tools are showing anything useful, and because this is using a `fault` handler, I can\u0027t even build the equivalent in C# and compare compiler outputs.",
                                           "updatedAt":  "2022-01-05T03:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc477QL5",
                                           "createdAt":  "2022-01-05T05:13:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCLgV5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2022-01-05T11:46:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2022-01-25T19:25:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "It\u0027s running into the \"A single protected block shall have exactly one handler associated with it\" rule from the ECMA-335 spec.\r\n\r\nThere\u0027s a try block that has a filter, fault, and finally handler:\r\n\r\n```\r\n  .try IL_000a to IL_0015 filter IL_0015 handler IL_0023 to IL_0032\r\n  .try IL_000a to IL_0015 fault handler IL_0032 to IL_003d\r\n  .try IL_000a to IL_0015 finally handler IL_003d to IL_0048\r\n```\r\n\r\nWe would be happy to accept a pull request that adds this validation to ILVerify.",
                                           "updatedAt":  "2022-01-05T05:13:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc478Wrn",
                                           "createdAt":  "2022-01-05T13:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "Oh, that makes sense, thanks!",
                                           "updatedAt":  "2022-01-05T13:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484y1a",
                                           "createdAt":  "2022-01-25T19:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "CC @TIHan .",
                                           "updatedAt":  "2022-01-25T19:14:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4841WK",
                                           "createdAt":  "2022-01-25T19:26:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n[The documentation for `InvalidProgramException`](https://docs.microsoft.com/en-us/dotnet/api/system.invalidprogramexception?view=net-6.0) states right up front that:\r\n\r\n\u003e Generally this [exception being thrown] indicates a bug in the compiler that generated the program.\r\n\r\nTherefore the people most likely to see it are those working on compilers or similar code generation tools.  (It\u0027s certainly possible that other people could see it if untested compiler bugs are released into the wild, but hopefully the bulk of them will stay inside of the realm of compiler development!)\r\n\r\nExceptions, by design, are full of information meant to make debugging easier.  The class describes the general type of problem, the message gives specifics, the stack trace shows you exactly where the error occurred, etc.  So you\u0027d expect  an exception caused by a bad compiler, whose primary expected audience is compiler developers, to give them a decent clue as to what their compiler did wrong.  Unfortunately, `InvalidProgramException` fails pretty hard at this.\r\n\r\n### Reproduction Steps\r\n\r\n1) Modify Roslyn\u0027s code generator to omit the `leave` opcode at the end of a `try` body.\r\n2) Compile an otherwise-valid test case containing a `try` block.\r\n3) Run the test case.\r\n\r\n### Expected behavior\r\n\r\nThe exception that comes up should tell you that there\u0027s a `try` body with no `leave` instruction.  The JIT knows which IL rule was violated, so it ought to be able to convey this information to the user.\r\n\r\n### Actual behavior\r\n\r\nYou get a generic error message that says nothing whatsoever about the nature of the problem.  All you know is \"something went wrong,\" during the JITting of this method.\r\n\r\n### Other information\r\n\r\nThis is one specific example that I recently discovered can cause this error.  A glance at the JIT source suggests there are plenty of others.  Ideally, each rule violated that leads to this exception being thrown should return an informative error message explaining what went wrong.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emasonwheeler\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `area-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-25T19:26:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc488SUh",
                                           "createdAt":  "2022-01-26T17:42:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TIHan",
                                           "body":  "Will take a look.",
                                           "updatedAt":  "2022-01-26T17:42:53Z"
                                       }
                                   ],
                         "totalCount":  35
                     },
        "title":  "InvalidProgramException is extremely unhelpful",
        "labels":  [
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63227",
        "createdAt":  "2021-12-30T22:28:43Z",
        "number":  63227,
        "author":  "masonwheeler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-03T19:52:28Z",
        "body":  "### Description\r\n\r\nWhile attempting to use ILVerify to diagnose a compiler output problem, it instead blew up in my face, dumping an `IndexOutOfRangeException` stack trace on me.\r\n\r\n### Reproduction Steps\r\n\r\n1) Install .NET 5.\r\n2) Install ILVerify.\r\n3) Download [this test case](https://github.com/dotnet/runtime/files/7794775/testcase.zip) and unzip it to a new folder.\r\n4) Open PowerShell and CD to that folder.\r\n5) `ilverify .\\testcase.dll -r \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.13\\*.dll\" -r \"Boo.Lang.dll\"`  (Adjust .NET 5 path as needed)\r\n \r\n\r\n### Expected behavior\r\n\r\nA correct program should not throw [\"boneheaded exceptions.\"](https://ericlippert.com/2008/09/10/vexing-exceptions/)\r\n\r\nA diagnostic tool should provide helpful diagnostic information about the nature of errors encountered.\r\n\r\n### Actual behavior\r\n\r\n\u003cdetails\u003e\r\n\r\n```\r\nError: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Internal.IL.ILImporter.CreateBasicBlock(Int32 offset)\r\n   at Internal.IL.ILImporter.FindBasicBlocks()\r\n   at Internal.IL.ILImporter.Verify()\r\n   at ILVerify.Verifier.VerifyMethod(EcmaModule module, MethodIL methodIL, MethodDefinitionHandle methodHandle)\r\n   at ILVerify.Verifier.VerifyMethods(EcmaModule module, IEnumerable`1 methodHandles)+MoveNext()\r\n   at ILVerify.Verifier.Verify(PEReader peReader, MethodDefinitionHandle methodHandle)+MoveNext()\r\n   at ILVerify.Program.VerifyMethods(PEReader peReader, EcmaModule module, String path, Int32\u0026 numErrors, Int32\u0026 verifiedMethodCounter, Int32\u0026 methodCounter)\r\n   at ILVerify.Program.VerifyAssembly(PEReader peReader, EcmaModule module, String path)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.Program.Run(Options options)\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n### Configuration\r\n\r\n.NET 5, Windows 10, x64",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOclVfTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47y6Bq",
                                           "createdAt":  "2021-12-30T22:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhile attempting to use ILVerify to diagnose a compiler output problem, it instead blew up in my face, dumping an `IndexOutOfRangeException` stack trace on me.\r\n\r\n### Reproduction Steps\r\n\r\n1) Install .NET 5.\r\n2) Install ILVerify.\r\n3) Download [this test case](https://github.com/dotnet/runtime/files/7794775/testcase.zip) and unzip it to a new folder.\r\n4) Open PowerShell and CD to that folder.\r\n5) `ilverify .\\testcase.dll -r \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.13\\*.dll\" -r \"Boo.Lang.dll\"`  (Adjust .NET 5 path as needed)\r\n \r\n\r\n### Expected behavior\r\n\r\nA correct program should not throw [\"boneheaded exceptions.\"](https://ericlippert.com/2008/09/10/vexing-exceptions/)\r\n\r\nA diagnostic tool should provide helpful diagnostic information about the nature of errors encountered.\r\n\r\n### Actual behavior\r\n\r\n\u003cdetails\u003e\r\n\r\n```\r\nError: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Internal.IL.ILImporter.CreateBasicBlock(Int32 offset)\r\n   at Internal.IL.ILImporter.FindBasicBlocks()\r\n   at Internal.IL.ILImporter.Verify()\r\n   at ILVerify.Verifier.VerifyMethod(EcmaModule module, MethodIL methodIL, MethodDefinitionHandle methodHandle)\r\n   at ILVerify.Verifier.VerifyMethods(EcmaModule module, IEnumerable`1 methodHandles)+MoveNext()\r\n   at ILVerify.Verifier.Verify(PEReader peReader, MethodDefinitionHandle methodHandle)+MoveNext()\r\n   at ILVerify.Program.VerifyMethods(PEReader peReader, EcmaModule module, String path, Int32\u0026 numErrors, Int32\u0026 verifiedMethodCounter, Int32\u0026 methodCounter)\r\n   at ILVerify.Program.VerifyAssembly(PEReader peReader, EcmaModule module, String path)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.Program.Run(Options options)\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n### Configuration\r\n\r\n.NET 5, Windows 10, x64\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emasonwheeler\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-30T22:28:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zEqQ",
                                           "createdAt":  "2021-12-31T02:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "```\r\nError: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at Internal.IL.ILImporter.CreateBasicBlock(Int32 offset)\r\n   at Internal.IL.ILImporter.FindBasicBlocks()\r\n   at Internal.IL.ILImporter.Verify()\r\n   at ILVerify.Verifier.VerifyMethod(EcmaModule module, MethodIL methodIL, MethodDefinitionHandle methodHandle)\r\n   at ILVerify.Verifier.VerifyMethods(EcmaModule module, IEnumerable`1 methodHandles)+MoveNext()\r\n   at ILVerify.Verifier.Verify(PEReader peReader, MethodDefinitionHandle methodHandle)+MoveNext()\r\n   at ILVerify.Program.VerifyMethods(PEReader peReader, EcmaModule module, String path, Int32\u0026 numErrors, Int32\u0026 verifiedMethodCounter, Int32\u0026 methodCounter)\r\n   at ILVerify.Program.VerifyAssembly(PEReader peReader, EcmaModule module, String path)\r\n   at ILVerify.Program.Run()\r\n   at ILVerify.Program.Run(Options options)\r\n```",
                                           "updatedAt":  "2021-12-31T02:29:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zGog",
                                           "createdAt":  "2021-12-31T03:16:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIO-Fw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "masonwheeler",
                                                                               "createdAt":  "2021-12-31T03:18:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "peverify message:\r\n\r\n```\r\n[IL]: Error: [foo.exe : \u003cModule\u003e::main][offset 0x00000000] Code size is zero.\r\n1 Error(s) Verifying empty.exe\r\n```\r\n\r\nThe best fix is to add a check for length being zero in `FindBasicBlocks` and have that call `ReportZeroSizedMethod` (a new method; similar to the other `ReportXXX` method calls in ILImporter.cs). The `ReportZeroSizedMethod` method would be defined in ILImporter.Verify.cs file and report the error similar to how the other `Report` methods do it there.\r\n\r\nIt won\u0027t be possible to make a unit test for this because ILAsm will never generate a method with an empty body (it will put a ret there for you), so unit test can be skipped.",
                                           "updatedAt":  "2021-12-31T03:16:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47z2OV",
                                           "createdAt":  "2021-12-31T20:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIRD7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2021-12-31T22:49:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "masonwheeler",
                                           "body":  "There is actually a check for this already in `InitialPass`.  Unfortunately, its name notwithstanding, `InitialPass` is called *after* `FindBasicBlocks`.",
                                           "updatedAt":  "2021-12-31T20:27:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yVV9P",
                                           "createdAt":  "2024-01-31T01:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Also hit for non-empty method bodies when `ret` is missing.\r\n\r\n\r\n```\r\n// [af599476-a23f-4c2e-b70d-a1de4f653a79]C.F()\r\n.method instance void F() cil managed\r\n{\r\n  // Code size: 34\r\n  .maxstack 1\r\n  .locals init (bool V_0)\r\n\r\n  IL_0000:  ldsflda     valuetype [System.Runtime]System.Threading.CancellationToken \u003cPrivateImplementationDetails\u003e::ModuleCancellationToken\r\n  IL_0005:  call        instance void [System.Runtime]System.Threading.CancellationToken::ThrowIfCancellationRequested()\r\n  IL_000A:  nop\r\n  IL_000B:  nop\r\n  IL_000C:  call        void [System.Console]System.Console::WriteLine()\r\n  IL_0011:  nop\r\n  IL_0012:  nop\r\n  IL_0013:  ldsflda     valuetype [System.Runtime]System.Threading.CancellationToken \u003cPrivateImplementationDetails\u003e::ModuleCancellationToken\r\n  IL_0018:  call        instance void [System.Runtime]System.Threading.CancellationToken::ThrowIfCancellationRequested()\r\n  IL_001D:  ldc.i4.1\r\n  IL_001E:  stloc.0\r\n  IL_001F:  ldloc.0\r\n  IL_0020:  brtrue.s    IL_000B\r\n}\r\n\r\n```\r\n\r\n[repro.zip](https://github.com/dotnet/runtime/files/14106033/repro.zip)\r\n\r\n",
                                           "updatedAt":  "2024-01-31T01:28:11Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Bad data can cause ILVerify to throw IndexOutOfRangeException",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "Priority:2",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73922",
        "createdAt":  "2022-08-14T21:30:48Z",
        "number":  73922,
        "author":  "teo-tsirpanis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-tIWw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ForNeVeR",
                                            "createdAt":  "2025-02-03T08:25:47Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-04-24T23:07:06Z",
        "body":  "An obstacle of using ILVerify is that all references of the assembly must be explicitly specified on the command line. We could take advantage of the `AssemblyDependencyResolver` class and automatically find the references from the assembly\u0027s accompanying `.deps.json` file if it exists. This would make using ILVerify much more easy.\r\n\r\nThe main question is how to expose it to the user. A way I thought is to use it if we specify a new switch like `--use-deps-json` and also have specified only one input file and no `--reference`s. If the shape is agreed upon I can implement it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSGYYxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IYxOe",
                                           "createdAt":  "2022-08-14T21:30:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-14T21:30:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IYxQS",
                                           "createdAt":  "2022-08-14T21:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAn obstacle of using ILVerify is that all references of the assembly must be explicitly specified on the command line. We could take advantage of the `AssemblyDependencyResolver` class and automatically find the references from the assembly\u0027s accompanying `.deps.json` file if it exists. This would make using ILVerify much more easy.\r\n\r\nThe main question is how to expose it to the user. A way I thought is to use it if we specify a new switch like `--use-deps-json` and also have specified only one input file and no `--reference`s. If the shape is agreed upon I can implement it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eteo-tsirpanis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `feature-request`, `area-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-14T21:31:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IZhjF",
                                           "createdAt":  "2022-08-15T06:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e AssemblyDependencyResolver class and automatically find the references from the assembly\u0027s accompanying .deps.json file if it exists\r\n\r\nAssemblyDependencyResolver won\u0027t resolve framework references for standalone .dlls, even though they have .deps.json next to them. It means that this would find the framework references only if the .dll was published as self-contained application.\r\n\r\nI agree that it would be convenient for ILVerify to have an option to find the framework references for you, but I do not think that the proposed design works.",
                                           "updatedAt":  "2022-08-15T06:06:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Resolve ILVerify assembly references from `.deps.json`.",
        "labels":  [
                       "help wanted",
                       "feature-request",
                       "area-Tools-ILVerification",
                       "Priority:3"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94090",
        "createdAt":  "2023-10-27T14:08:24Z",
        "number":  94090,
        "author":  "Zastai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-31T15:10:33Z",
        "body":  "### Description\n\nILVerify is rejecting C# code compiled using the normal compiler from the .NET SDK.\r\n\n\n### Reproduction Steps\n\nCompile an assembly containing a class like this:\r\n\r\n```cs\r\ninternal class ILVerifyDoesNotLikeThis {\r\n\r\n  private static readonly DateTimeOffset FixedUtcTime = new(1969, 7, 20, 20, 17, 40, TimeSpan.Zero);\r\n\r\n  public DateTimeOffset UtcNow =\u003e ILVerifyDoesNotLikeThis.FixedUtcTime.ToUniversalTime();\r\n\r\n}\r\n```\r\n\r\nRun ILVerify on it.\r\n\r\nI doubt it matters, but in my case, the compile used MSBuild version 17.7.3+8ec440e68 for .NET, targeting `net6.0` in Debug configuration.\n\n### Expected behavior\n\nNo errors detected by ILVerify.\n\n### Actual behavior\n\nILVerify reports an error:\r\n\r\n```text\r\n[IL]: Error [InitOnly]: [\\Path\\To\\Assembly.dll : Some.Namespace.ILVerifyDoesNotLikeThis::get_UtcNow()][offset 0x00000000] Cannot change initonly field outside its .ctor.\r\n```\r\n\r\nThe code does not actually change any fields.\r\n\r\nIL for the getter:\r\n\r\n```msil\r\n.method /* 06001BBB */ public hidebysig specialname \r\n\tinstance valuetype [System.Runtime]System.DateTimeOffset get_UtcNow () cil managed \r\n{\r\n\t// Method begins at RVA 0xdfcb7\r\n\t// Header size: 1\r\n\t// Code size: 11 (0xb)\r\n\t.maxstack 8\r\n\r\n\t// return ILVerifyDoesNotLikeThis.FixedUtcTime.ToUniversalTime();\r\n\t// sequence point: (line 1597, col 35) to (line 1597, col 89) in C:\\Sources\\Anubex\\natural-services.dotnet\\Anubex.NaturalServices.Tests\\DummyObjects\\DummyProcessor.cs\r\n\tIL_0000: ldsflda valuetype [System.Runtime]System.DateTimeOffset Anubex.NaturalServices.Tests.DummyObjects.ILVerifyDoesNotLikeThis::FixedUtcTime /* 040011F2 */\r\n\tIL_0005: call instance valuetype [System.Runtime]System.DateTimeOffset [System.Runtime]System.DateTimeOffset::ToUniversalTime() /* 0A0000D3 */\r\n\tIL_000a: ret\r\n} // end of method ILVerifyDoesNotLikeThis::get_UtcNow\r\n```\r\n(would be nice if GitHub supported IL highlighting, btw)\r\n\r\nLooking at #57385 it looks like support for `ldflda` was added but `ldsflda` was left out.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n`ILVerify --version` reports `7.0.0-rtm.22518.5+d099f075e45d2aa6007a22b71b45a08758559f80`, which should be the current version.\r\n\r\nOutput of `dotnet --info`:\r\n```text\r\n.NET SDK:\r\n Version:   7.0.402\r\n Commit:    791db8e2d8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.402\\\r\n\r\nHost:\r\n  Version:      7.0.12\r\n  Architecture: x64\r\n  Commit:       4a824ef37c\r\n\r\n.NET SDKs installed:\r\n  6.0.416 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.304 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOakd5MQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qR3kx",
                                           "createdAt":  "2023-10-27T15:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nILVerify is rejecting C# code compiled using the normal compiler from the .NET SDK.\r\n\n\n### Reproduction Steps\n\nCompile an assembly containing a class like this:\r\n\r\n```cs\r\ninternal class ILVerifyDoesNotLikeThis {\r\n\r\n  private static readonly DateTimeOffset FixedUtcTime = new(1969, 7, 20, 20, 17, 40, TimeSpan.Zero);\r\n\r\n  public DateTimeOffset UtcNow =\u003e ILVerifyDoesNotLikeThis.FixedUtcTime.ToUniversalTime();\r\n\r\n}\r\n```\r\n\r\nRun ILVerify on it.\r\n\r\nI doubt it matters, but in my case, the compile used MSBuild version 17.7.3+8ec440e68 for .NET, targeting `net6.0` in Debug configuration.\n\n### Expected behavior\n\nNo errors detected by ILVerify.\n\n### Actual behavior\n\nILVerify reports an error:\r\n\r\n```text\r\n[IL]: Error [InitOnly]: [\\Path\\To\\Assembly.dll : Some.Namespace.ILVerifyDoesNotLikeThis::get_UtcNow()][offset 0x00000000] Cannot change initonly field outside its .ctor.\r\n```\r\n\r\nThe code does not actually change any fields.\r\n\r\nIL for the getter:\r\n\r\n```msil\r\n.method /* 06001BBB */ public hidebysig specialname \r\n\tinstance valuetype [System.Runtime]System.DateTimeOffset get_UtcNow () cil managed \r\n{\r\n\t// Method begins at RVA 0xdfcb7\r\n\t// Header size: 1\r\n\t// Code size: 11 (0xb)\r\n\t.maxstack 8\r\n\r\n\t// return ILVerifyDoesNotLikeThis.FixedUtcTime.ToUniversalTime();\r\n\t// sequence point: (line 1597, col 35) to (line 1597, col 89) in C:\\Sources\\Anubex\\natural-services.dotnet\\Anubex.NaturalServices.Tests\\DummyObjects\\DummyProcessor.cs\r\n\tIL_0000: ldsflda valuetype [System.Runtime]System.DateTimeOffset Anubex.NaturalServices.Tests.DummyObjects.ILVerifyDoesNotLikeThis::FixedUtcTime /* 040011F2 */\r\n\tIL_0005: call instance valuetype [System.Runtime]System.DateTimeOffset [System.Runtime]System.DateTimeOffset::ToUniversalTime() /* 0A0000D3 */\r\n\tIL_000a: ret\r\n} // end of method ILVerifyDoesNotLikeThis::get_UtcNow\r\n```\r\n(would be nice if GitHub supported IL highlighting, btw)\r\n\r\nLooking at #57385 it looks like support for `ldflda` was added but `ldsflda` was left out.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n`ILVerify --version` reports `7.0.0-rtm.22518.5+d099f075e45d2aa6007a22b71b45a08758559f80`, which should be the current version.\r\n\r\nOutput of `dotnet --info`:\r\n```text\r\n.NET SDK:\r\n Version:   7.0.402\r\n Commit:    791db8e2d8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.402\\\r\n\r\nHost:\r\n  Version:      7.0.12\r\n  Architecture: x64\r\n  Commit:       4a824ef37c\r\n\r\n.NET SDKs installed:\r\n  6.0.416 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.304 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eZastai\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILVerification`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-27T15:02:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILVerify incorrectly complains about use of initonly field outside of constructor+",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96458",
        "createdAt":  "2024-01-03T19:46:21Z",
        "number":  96458,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T20:12:18Z",
        "body":  "This option should try to resolve all metadata ref tokens in the assembly and report all errors for unresolvable ones.\r\n\r\nContributes to #37391",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvVlHhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vz6za",
                                           "createdAt":  "2024-01-03T19:46:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis option should try to resolve all metadata ref tokens in the assembly and report all errors for unresolvable ones.\r\n\r\nContributes to #37391\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejkotas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-03T19:46:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vz8ER",
                                           "createdAt":  "2024-01-03T19:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "(customer requested feature)",
                                           "updatedAt":  "2024-01-03T19:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GzUqg",
                                           "createdAt":  "2024-07-31T22:53:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "We will not have time to work on this in .NET 9. Moving to .NET 10.",
                                           "updatedAt":  "2024-07-31T22:53:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69WUeG",
                                           "createdAt":  "2025-08-11T20:12:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Moving to .NET 11.",
                                           "updatedAt":  "2025-08-11T20:12:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[ILVerify] Add option for validation of all dependencies",
        "labels":  [
                       "area-Tools-ILVerification",
                       "Priority:2"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96695",
        "createdAt":  "2024-01-09T17:23:36Z",
        "number":  96695,
        "author":  "jcouv",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-13T00:26:17Z",
        "body":  "As part of rolsyn PR https://github.com/dotnet/roslyn/pull/71544, we\u0027re updating to ILVerify version 8.0.0-rtm.23523.3 (from 7.0.0-alpha.1.22060.1).\r\n\r\nThe test below shows the verification failure. \r\nThe error is \"[Main]: Unrecognized arguments for delegate .ctor. { Offset = 0xe }\".\r\n\r\nAs far as I can tell the problem is in `IsDelegateAssignable` which ends up doing an `IsAssignable` check for assigning an `int32` (which comes from the `firstArg` parameter and represents the stack value) to `object`.\r\n\r\nPlease let us know if the problem turns out to be with the code generated by roslyn (see IL captured in test below).\r\n\r\n```\r\n        [Fact]\r\n        public void StructDelegate()\r\n        {\r\n            var source = @\"\r\nusing System;\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        int x = 42;\r\n        Func\u003cstring\u003e f = x.ToString;\r\n        Console.Write(f.Invoke());\r\n    }\r\n}\";\r\n            var verifier = CompileAndVerify(source, expectedOutput: \"42\",\r\n                verify: Verification.FailsILVerify with { ILVerifyMessage = \"[Main]: Unrecognized arguments for delegate .ctor. { Offset = 0xe }\" });\r\n\r\n            verifier.VerifyIL(\"Program.Main\", \"\"\"\r\n{\r\n  // Code size       30 (0x1e)\r\n  .maxstack  2\r\n  IL_0000:  ldc.i4.s   42\r\n  IL_0002:  box        \"int\"\r\n  IL_0007:  dup\r\n  IL_0008:  ldvirtftn  \"string object.ToString()\"\r\n  IL_000e:  newobj     \"System.Func\u003cstring\u003e..ctor(object, System.IntPtr)\"\r\n  IL_0013:  callvirt   \"string System.Func\u003cstring\u003e.Invoke()\"\r\n  IL_0018:  call       \"void System.Console.Write(string)\"\r\n  IL_001d:  ret\r\n}\r\n\"\"\");\r\n        }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcElh2g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wQ5p3",
                                           "createdAt":  "2024-01-09T17:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs part of rolsyn PR https://github.com/dotnet/roslyn/pull/71544, we\u0027re updating to ILVerify version 8.0.0-rtm.23523.3.\r\n\r\nThe test below shows the verification failure. As far as I can tell the problem is in `IsDelegateAssignable` which ends up doing an `IsAssignable` check for assigning an `int32` (which comes from the `firstArg` parameter and represents the stack value) to `object`.\r\n\r\nPlease let us know if the problem turns out to be with the code generated by roslyn (see IL captured in test below).\r\n\r\n```\r\n        [Fact]\r\n        public void StructDelegate()\r\n        {\r\n            var source = @\"\r\nusing System;\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        int x = 42;\r\n        Func\u003cstring\u003e f = x.ToString;\r\n        Console.Write(f.Invoke());\r\n    }\r\n}\";\r\n            var verifier = CompileAndVerify(source, expectedOutput: \"42\",\r\n                verify: Verification.FailsILVerify with { ILVerifyMessage = \"[Main]: Unrecognized arguments for delegate .ctor. { Offset = 0xe }\" });\r\n\r\n            verifier.VerifyIL(\"Program.Main\", \"\"\"\r\n{\r\n  // Code size       30 (0x1e)\r\n  .maxstack  2\r\n  IL_0000:  ldc.i4.s   42\r\n  IL_0002:  box        \"int\"\r\n  IL_0007:  dup\r\n  IL_0008:  ldvirtftn  \"string object.ToString()\"\r\n  IL_000e:  newobj     \"System.Func\u003cstring\u003e..ctor(object, System.IntPtr)\"\r\n  IL_0013:  callvirt   \"string System.Func\u003cstring\u003e.Invoke()\"\r\n  IL_0018:  call       \"void System.Console.Write(string)\"\r\n  IL_001d:  ret\r\n}\r\n\"\"\");\r\n        }\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejcouv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILVerification`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-09T17:23:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wQ-M2",
                                           "createdAt":  "2024-01-09T17:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcouv",
                                           "body":  "We have another related one, which produces an unexpected \"[Test3]: Unexpected type on the stack. { Offset = 0x6, Found = address of Int32, Expected = Native Int }\":\r\n\r\nThe C# snippet (from test `NullTerminate_01`) is:\r\n```cs\r\nusing System;\r\nclass C\r\n{\r\n    static ReadOnlySpan\u003cbyte\u003e Test3() =\u003e \"cat\"u8;\r\n}\r\n```\r\n\r\nThe resulting IL is:\r\n```\r\n{\r\n  // Code size       12 (0xc)\r\n  .maxstack  2\r\n  IL_0000:  ldsflda    \"int \u003cPrivateImplementationDetails\u003e.F3D4280708A6C4BEA1BAEB5AD5A4B659E705A90BDD448840276EA20CB151BE57\"\r\n  IL_0005:  ldc.i4.3\r\n  IL_0006:  newobj     \"System.ReadOnlySpan\u003cbyte\u003e..ctor(void*, int)\"\r\n  IL_000b:  ret\r\n}\r\n```\r\n\r\nThe first error message is unexpected:\r\n```\r\n[Test3]: Unexpected type on the stack. { Offset = 0x6, Found = address of Int32, Expected = Native Int }\r\n[Test3]: Return type is ByRef, TypedReference, ArgHandle, or ArgIterator. { Offset = 0xb }\r\n```",
                                           "updatedAt":  "2024-01-09T17:35:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSKWU",
                                           "createdAt":  "2024-01-09T21:19:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e We have another related one, which produces an unexpected \"[Test3]: Unexpected type on the stack. { Offset = 0x6, Found = address of Int32, Expected = Native Int }\":\r\n\u003e \r\n\u003e The C# snippet (from test `NullTerminate_01`) is:\r\n\u003e \r\n\u003e ```cs\r\n\u003e using System;\r\n\u003e class C\r\n\u003e {\r\n\u003e     static ReadOnlySpan\u003cbyte\u003e Test3() =\u003e \"cat\"u8;\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e The resulting IL is:\r\n\u003e \r\n\u003e ```\r\n\u003e {\r\n\u003e   // Code size       12 (0xc)\r\n\u003e   .maxstack  2\r\n\u003e   IL_0000:  ldsflda    \"int \u003cPrivateImplementationDetails\u003e.F3D4280708A6C4BEA1BAEB5AD5A4B659E705A90BDD448840276EA20CB151BE57\"\r\n\u003e   IL_0005:  ldc.i4.3\r\n\u003e   IL_0006:  newobj     \"System.ReadOnlySpan\u003cbyte\u003e..ctor(void*, int)\"\r\n\u003e   IL_000b:  ret\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e The first error message is unexpected:\r\n\u003e \r\n\u003e ```\r\n\u003e [Test3]: Unexpected type on the stack. { Offset = 0x6, Found = address of Int32, Expected = Native Int }\r\n\u003e [Test3]: Return type is ByRef, TypedReference, ArgHandle, or ArgIterator. { Offset = 0xb }\r\n\u003e ```\r\n\r\nIsn\u0027t this the well known case of Roslyn emitting invalid IL by not emitting `conv.u` on the byref returned from `ldflda`?",
                                           "updatedAt":  "2024-01-09T21:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wSWHa",
                                           "createdAt":  "2024-01-09T21:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jcouv",
                                           "body":  "\u003e \u003e ```\r\n\u003e \u003e [Test3]: Unexpected type on the stack. { Offset = 0x6, Found = address of Int32, Expected = Native Int }\r\n\u003e \u003e ```\r\n\u003e \r\n\u003e Isn\u0027t this the well known case of Roslyn emitting invalid IL by not emitting `conv.u` on the byref returned from `ldflda`?\r\n\r\nI see, it would be a Roslyn codegen problem then. Searching for \"conv.u\", I didn\u0027t find any relevant roslyn issue that recorded this, but we\u0027ve not done a great job at documenting such cases. Let me ask around to confirm and understand the pros/cons of fixing our codegen at this point. Maybe @VSadov would know the history. Thanks!",
                                           "updatedAt":  "2024-01-09T21:53:11Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ILVerification fails unexpected on delegate construction with instance method",
        "labels":  [
                       "help wanted",
                       "area-Tools-ILVerification"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116139",
        "createdAt":  "2025-05-30T11:01:09Z",
        "number":  116139,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-30T14:09:10Z",
        "body":  "Reported by @333fred: on a branch outside the IL space, ilverify crashes instead of failing verification.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrjHbXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6uMa3q",
                                           "createdAt":  "2025-05-30T14:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-30T14:04:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uMdtc",
                                           "createdAt":  "2025-05-30T14:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Related to #63227",
                                           "updatedAt":  "2025-05-30T14:09:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILVerify crashes on branch out of IL space",
        "labels":  [
                       "area-Tools-ILVerification"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118042",
        "createdAt":  "2025-07-24T21:52:47Z",
        "number":  118042,
        "author":  "333fred",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T21:55:56Z",
        "body":  "ILVerify does not support runtime async, which leads to various \"verification\" errors of valid IL. There are two flavors of this:\n\n1. In a `Task` or `ValueTask` returning method, ILVerify does not like that the stack is empty when calling `ret`.\n2. In a `Task\u003cT\u003e` or `ValueTask\u003cT\u003e` returning method, ILVerify does not like that the stack has a `T`, not a `Task\u003cT\u003e` or `ValueTask\u003cT\u003e`.\n\nRelates to feature https://github.com/dotnet/runtime/issues/109632",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOupGuiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65rHf-",
                                           "createdAt":  "2025-07-24T21:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "333fred",
                                           "body":  "/cc @jcouv ",
                                           "updatedAt":  "2025-07-24T21:52:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65rHum",
                                           "createdAt":  "2025-07-24T21:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-24T21:53:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66ka6I",
                                           "createdAt":  "2025-07-28T23:20:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "@amanasifkhalid @jakobbotsch FYI",
                                           "updatedAt":  "2025-07-28T23:20:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ILVerify support for runtime async",
        "labels":  [
                       "area-Tools-ILVerification",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119536",
        "createdAt":  "2025-09-10T14:18:37Z",
        "number":  119536,
        "author":  "djc-khaos",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T16:45:56Z",
        "body":  "### Description\n\nIf I write an .IL file in which a class extends \"object\" rather than \"[System.Runtime]System.Object\", ilasm will compile it; ilverify will report no errors on the resulting assembly; but it\u0027s not possible to reference that class from (e.g.) C# code without encountering a TypeLoadException at runtime.\n\n### Reproduction Steps\n\nCompile the following IL with ilasm:\n\n```\n.assembly extern System.Runtime {\n  .publickeytoken = (b0 3f 5f 7f 11 d5 0a 3a )\n  .ver 9:0:0:0\n}\n\n.assembly Sample1 {}\n.module Sample1.dll\n\n  .class nested public auto ansi beforefieldinit FirstObj extends [System.Runtime]System.Object {  \n    .method public hidebysig specialname rtspecialname instance void .ctor() cil managed {\n      ldarg.0\n      call instance void object::.ctor()\n      ret\n    }\n  }\n\n  .class nested public auto ansi beforefieldinit SecondObj extends object {  \n    .method public hidebysig specialname rtspecialname instance void .ctor() cil managed {\n      ldarg.0\n      call instance void object::.ctor()\n      ret\n    }\n  }\n```\n\n\n### Expected behavior\n\nIt might be fine that ilasm compiles the code, but I\u0027d expect ilverify to warn me that the \u0027extends\u0027 is invalid and the resulting class can\u0027t be loaded at runtime.\n\n### Actual behavior\n\nilasm compiles the IL fine. \n\nilverify reports:\n\nAll Classes and Methods in C:\\temp\\Sample1.dll Verified.\n\nHowever, at runtime, a .NET program attempting to create an instance of FirstObj will succeed, but trying to create an instance of SecondObj will instead give:\n\n`System.TypeLoadException: \u0027Could not load TypeSpec from assembly \u0027Sample1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\u0027.\u0027`\n\n### Regression?\n\nSame behaviour in 9.0.9 and 9.0.6, so no change recently. Not sure about older versions. This may have never been something ilverify or peverify have ever checked for.\n\n### Known Workarounds\n\nCorrecting the IL to never have \"extends object\" works fine. \n\nThe issue is that it\u0027s hard to identify that _is_ the change which needs to be made, as the runtime exception you get isn\u0027t descriptive (it doesn\u0027t identify which type failed to load), and ilverify isn\u0027t able to warn about the problem.\n\n### Configuration\n\n.NET 9.0.9, Windows 11, x64. Don\u0027t expect it to be specific to this configuration but haven\u0027t verified elsewhere.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwz2pvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DPam_",
                                           "createdAt":  "2025-09-10T16:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T16:04:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ilverify fails to warn about invalid class declaration",
        "labels":  [
                       "area-Tools-ILVerification"
                   ]
    }
]
